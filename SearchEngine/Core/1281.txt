{"text": "ICS 1F Homework 5 Solutions Suppose we have defined two Turing machines M1 and M2 both of which take input strings composed of the characters and 1 M1 accepts strings that match the regular expression 1 and that have equal numbers of zeros and ones for instance it accepts the empty string and the strings 1 11 111 and 1111 M2 accepts any string which is a palindrome reads the same forwards and backwards for instance it accepts the empty string and the strings 1 11 1 1 1 111 11 1 1 and 1111 a Show how to translate strings of zeros and ones with a finite state machine so that M1 accepts a string s if and only if M2 accepts the translation of s Answer There are many possible translations here s a particularly simple one Convert to 1 and 1 to 1 But if you ever see a after the first 1 convert it and any following characters to a 1 b Does the existence of this translation show that M1 can simulate M2 or that M2 can simulate M1 Answer that M2 can simulate M1 c Do you think you can find a similar translation in the opposite direction so that M2 accepts a string s if and only if M1 accepts the translation of s Why or why not Answer I don t believe a translation in the other direction exists because the finite state machine doing the translation could not know where the middle of the string is For example suppose the machine were going to translate the input 11 11 The first four characters 11 are a palindrome and the maching doing the translation can not know after seeing these palindromes that there are more characters left So their translation should be of the form i1i accepted by M1 Then the first five characters 11 are not a palindrome and the machine doing the translation should add more characters to the previously output string so it is no longer of the form i1i But once it has done that then no matter what else is added it is stuck with a string that will never be accepted by M1 even though the whole string 11 11 is a palindrome d If the reverse translation does not exist what would that imply about the possibility that M1 or M2 might be universal M1 is not a universal Turing machine because there exist machines namely M2 which it can t simulate We would need more information to know whether M2 is universal the translations considered so far aren t enough to tell one way or the other It turns out that M2 is not universal but proving this would be beyond the scope of this course For each of the following sets of pairs of strings either solve the Post correspondence problem or explain why no solution exists Recall that a solution is a sequence of pairs such that the concatenation of the top strings in the pairs is equal to the concatenation of the bottom strings a 11 11 11 1 111 111 Answer 11 11 11 11 1 1 1 1 11 11 b 1 1 1 1 11 1 Answer There is no solution If there were the first pair in the solution would have to be 1 1 because no other pair has matching first characters But after using that pair the top string ends with one more character a zero than the bottom Only one pair 1 1 allows that zero to be matched but it leaves another zero unmatched again So at each step you re forced to add a pair 1 1 and you can never finish this process and find a finite solution c 111 1 1 111 Answer 111 111 111 111 1 1 1 1 1 1 111 111 111 This one is pretty easy but it shows that even when the number of pairs in an example of the Post correspondence problem is small here there are only two pairs the length of a solution can be quite large ", "_id": "http://www.ics.uci.edu/~eppstein/1f/hw5-soln.html", "title": "ics 1f, homework 5 solutions", "html": "<HTML>\n<HEAD>\n<TITLE>ICS 1F, Homework 5 Solutions</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\" FGCOLOR=\"#000000\">\n<CENTER>\n<H1>ICS 1F, Homework 5 Solutions</H1>\n</CENTER>\n\n<OL>\n<P><LI>Suppose we have defined two Turing machines, M1 and M2, both of \nwhich take input strings composed of the characters \"0\" and \"1\".\nM1 accepts strings that match the regular expression 0*1* and that have \nequal numbers of zeros and ones; for instance, it accepts the empty string, \nand the strings 01, 0011, 000111, and 00001111.  M2 accepts any string \nwhich is a palindrome (reads the same forwards and backwards);\nfor instance, it accepts the empty string, and the strings 0, 1, 00, 11,\n000, 010, 101, 111, 0000, 0110, 1001, and 1111.\n\n<P>(a) Show how to translate strings of zeros and ones with a finite state \nmachine, so that M1 accepts a string s if and only if M2 accepts the \ntranslation of s.\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: There are many possible translations; here's a particularly\nsimple one.  Convert \"0\" to \"01\" and \"1\" to \"10\".  But if you ever see a\n\"0\" after the first \"1\", convert it and any following characters to a\n\"1\".\n\n<P><IMG SRC=\"hw5p1.gif\">\n</I></FONT></BLOCKQUOTE>\n\n\n<P>(b) Does the existence of this translation show that M1 can simulate \nM2, or that M2 can simulate M1?\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: that M2 can simulate M1.\n</I></FONT></BLOCKQUOTE>\n\n<P>(c) Do you think you can find a similar translation in the opposite \ndirection, so that M2 accepts a string s if and only if M1 accepts the \ntranslation of s?  Why or why not?\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: I don't believe a translation in the other direction exists,\nbecause the finite state machine doing the translation could not know\nwhere the middle of the string is.\n\n<P>For example suppose the machine were going to translate the input\n\"01100110\".  The first four characters \"0110\" are a palindrome, and the\nmaching doing the translation can not know (after seeing these palindromes)\nthat there are more characters left.  So, their\ntranslation should be of the form 0<sup>i</sup>1<sup>i</sup>\naccepted by M1.  Then the first five characters \"01100\" are not a palindrome,\nand the machine doing the translation should add more characters to\nthe previously output string so it is no longer of the form\n0<sup>i</sup>1<sup>i</sup>.  But once it has done that, then no matter\nwhat else is added, it is stuck with\na string that will never be accepted by M1, even though the whole string\n\"01100110\" is a palindrome.\n</I></FONT></BLOCKQUOTE>\n\n<P>(d) If the reverse translation does not exist, what would that imply \nabout the possibility that M1 or M2 might be universal?\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nM1 is not a universal Turing machine, because there exist machines\n(namely M2) which it can't simulate.\n\n<P>We would need more information to know whether M2 is universal,\nthe translations considered so far aren't enough to tell one way or the other.\n(It turns out that M2 is not universal, but proving this would be beyond\nthe scope of this course.)\n</I></FONT></BLOCKQUOTE>\n\n<P><LI>For each of the following sets of pairs of strings,\neither solve the Post correspondence problem or explain why no solution \nexists.  (Recall that a solution is a sequence of \npairs such that the concatenation of the top strings in the pairs is equal \nto the concatenation of the bottom strings.)\n\n<P><TABLE CELLPADDING=0 CELLSPACING=0>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD ROWSPAN=2>(a)&nbsp;&nbsp;&nbsp;{&nbsp;</TD><TD>11</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>11</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>110</TD><TD ROWSPAN=2>&nbsp;}</TR>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD>101</TD><TD>11011</TD><TD>1</TD></TR></TABLE>\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: 110 11 110 11 = 1 101 1 11011\n</I></FONT></BLOCKQUOTE>\n\n<P><TABLE CELLPADDING=0 CELLSPACING=0>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD ROWSPAN=2>(b)&nbsp;&nbsp;&nbsp;{&nbsp;</TD><TD>10</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>10</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>01</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>0</TD><TD ROWSPAN=2>&nbsp;}</TR>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD>1</TD><TD>01</TD><TD>10</TD><TD>10</TD></TR></TABLE>\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: There is no solution.  If there were, the first pair in the\nsolution would have to be (10,1) because no other pair has matching\nfirst characters.  But after using that pair, the top string\nends with one more character (a zero) than the bottom.\nOnly one pair, (10,01), allows that zero to be matched, but it leaves\nanother zero unmatched again.  So, at each step you're forced\nto add a pair (10,01), and you can never finish this process and find a\nfinite solution.\n</I></FONT></BLOCKQUOTE>\n\n<P><TABLE CELLPADDING=0 CELLSPACING=0>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD ROWSPAN=2>(c)&nbsp;&nbsp;&nbsp;{&nbsp;</TD><TD>1110</TD><TD \nROWSPAN=2>,&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>1</TD><TD ROWSPAN=2>&nbsp;}</TR>\n<TR ALIGN=CENTER VALIGN=CENTER>\n<TD>1</TD><TD>0111</TD></TR></TABLE>\n\n<BLOCKQUOTE><FONT COLOR=\"RED\"><I>\nAnswer: 1110 1110 1110 1110 1 1 1 = 1 1 1 0111 0111 0111.\n\n<P>This one is pretty easy, but it shows that even when the number of\npairs in an example of the Post correspondence problem is small\n(here there are only two pairs), the length of a solution can be quite large.\n</I></FONT></BLOCKQUOTE>\n\n</OL>\n</BODY>\n</HTML>\n", "id": 1281.0}