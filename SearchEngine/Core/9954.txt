{"text": "Documentation standards Documentation serves as an essential interface between programmers working together and as the main interface between the final product and the naive user Since documentation is designed to communicate it should be clear and unambiguous Documentation should be coherent Breaking the documentation up into distinct sections which describe different aspects of the program increases clarity Writing in grammatically correct sentences with correctly spelled words increases readability Internal documentation Internal documentation should be concise Variable names should be defined arbitrary or magic numbers should be explained and sections of code should be described Descriptive variable names are necessary as an addition to both the documentation and readability of the program External documentation External documentation should include descriptions of the following How to use the final product The type of input you expect and the type of output you will generate The type of errors handled and the action taken on each type of error All special features which you implemented which were not specified for the lab Any design choices which you made and reasons for these choices Any special files needed to run the program Note Your name should be inside each file that you write Be careful to cite any sources from which you derived your work Dan Hirschberg Computer Science Department University of California Irvine CA 92697 3435 dan at ics uci edu Last modified Mar 22 1999", "_id": "http://www.ics.uci.edu/~dan/class/165/notes/doc.stds.html", "title": " documentation standards\n", "html": "<HTML><HEAD>\n<TITLE> Documentation standards\n</TITLE>\n</HEAD><BODY>\n\n<H2> Documentation standards </H2>\n\nDocumentation serves as an essential interface between programmers\nworking together, and as the main interface between the final product\nand the naive user.&nbsp;\nSince documentation is designed to communicate,\nit should be clear and unambiguous.\n<P>\nDocumentation should be coherent.&nbsp;\nBreaking the documentation up into\ndistinct sections which describe different aspects of the program\nincreases clarity.&nbsp;\nWriting in grammatically correct sentences with\ncorrectly spelled words increases readability.\n<P>\n<H3> Internal documentation </H3>\n\nInternal documentation should be concise.&nbsp;\nVariable names should be defined;&nbsp;\narbitrary or \"magic\" numbers should be explained;&nbsp;\nand sections of code should be described.&nbsp;\nDescriptive variable names are\nnecessary as an addition to both the documentation and readability of\nthe program.\n\n<H3> External documentation </H3>\n\nExternal documentation should include descriptions of the following:\n<UL>\n<LI> How to use the final product.\n<LI> The type of input you expect and the\n     type of output you will generate.\n<LI> The type of errors handled and the action\n     taken on each type of error. \n<LI> All special features which you implemented\n     which were not specified for the lab. \n<LI> Any design choices which you made and reasons for these choices. \n<LI> Any special files needed to run the program.\n</UL>\n\n<P>\n<I>Note</I>:&nbsp;  Your name should be inside each file that\nyou write.&nbsp;\nBe careful to cite any sources from which you derived your work.\n<P>\n\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435<BR>\n</ADDRESS>\n<tt>dan (at) ics.uci.edu</tt><br>\nLast modified: Mar 22, 1999\n</BODY></HTML>\n", "id": 9954.0}