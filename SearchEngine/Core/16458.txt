{"text": "The Sourcerer Project Tutorial This tutorial is designed to show the reader how to download install and use the Sourcerer infrastructure to build SourcererDB This tutorial can be completed using either the command line or Eclipse In either case you must have a working version of the Java Development Kit Git and a MySQL server The command line tutorial is recommended for those looking to use Sourcerer for large scale analysis as the command line interaction is better suited for server machines If you intend to complete the tutorial using the command line you must have both Ant and Eclipse installed Eclipse will not be run graphically but is necessary for the extractor to function If you intend to complete the tutorial using Eclipse you only need to have Eclipse installed Steps specific to the command line are prefaced with Command Line while steps specific to the Eclipse are prefaced with Eclipse Step 1 Download Sourcerer Run install git clone https github com sourcerer Sourcerer git where install is the directory into which you wish to download Sourcerer Eclipse Load Sourcerer in Eclipse Do the following once you have opened a fresh Eclipse workspace Go to File ImportSelect General Existing Projects into Workspace and hit Next Click Browse next to Select Root Directory Navigate to the install Sourcerer directory and click OK Make sure the following projects are selected bindatabasedatabase utilitiesextractorliblink crawlermodelrepository managerjava repository managerutilities Click finish and wait for the projects to build Once built there will be missing dependencies for the extractor project To correct this go to the bin project and run launch lib extractor lib launch Then refresh the bin project and the error should disappear Step 2 Set up a Repository For the purposes of the tutorial there are four ways setting up the repository They all result in a repository located in a directory referred to as root for the remainder of this tutorial So pick either 2 A 2 B 2 C or 2 D 2 A Create the test repository Run Eclipse launcher launch test repo Create test repo launch install cd Sourcerer bin install Sourcerer bin ant create test repo This creates a test repository To view it s contents run install Sourcerer bin cd infrastructure tools java extractor test repo install Sourcerer infrastructure tools java extractor test repo ls This test repository contains three projects a project for testing the feature extractor 1 a subset of the Sourcerer infrastructure and 2 an additional feature extractor test project 2 B Download a sample repository A sample repository containing a small random selection of projects from the full repository can be found online here Simply download this file and extract it to the desired directory 2 C Download the full repository The full repository can be found online here Simply download this file very very big and extract it to the desired directory 2 D Create your own repository To create a repository with custom projects simply follow the repository structure here 2 D 1 Create ROOT directory mkdir root cd root 2 D 2 Create project directories For every project you wish to include in the repository create a subdirectory of root of the form root number number For example if you wanted to create a repository with 3 projects you would do the following root mkdir root mkdir root mkdir 1 root mkdir 2 root ls root cd root ls 1 2 This creates space for 3 projects It doesn t matter what numbers are picked for the directories as long as they are numbers 2 D 3 Add project content To add the actual content for each project do the following root cd root mkdir content root cp R project content content This copies the contents of the project from some project content directory into the content directory of the repository This content can be any combination of Java source code and jar files 2 D 4 Create project properties files root echo name project name project properties There are a number of other supported properties but the only required one is name Step 3 Compile the repository tools Command Line Compile Run Eclipse launcher launch lib repo tools launch install Sourcerer bin ant repo tools This will create repo tools jar in the dist subdirectory We will refer to this subdirectory as install dist 3 A Test Running Eclipse launcher launch tutorial Step 3 Repo Tools launch install Sourcerer bin cd dist install dist java jar repo tools jar will print a complete list of the commands provided by repo tools jar Step 4 Finish setting up the repository Eclipse Set up properties file Open the file tutorial properties found in launch tutorial On the first line for the property input repo replace root with the path to the repository you created in Step 2 As this is a Java properties file make sure to escape any used of as On the second line for the property output repo replace path with the path to where you would like the extracted version of the repository to be stored As this is a Java properties file make sure to any used of as 4 1 Aggregate jar files Note If you used step 2 A create test repo ant task this task have already been run and you may skip this step Run Eclipse launcher launch tutorial Step 4 Aggregate Jar Files launch install dist java jar repo tools jar aggregate jar files input repo root If you are running it from the command line you should replace root with the path to the repository you created in Step 2 This collects all of the jar files in the repository into the jars directory To see the result do the following cd root root ls jars jars root cd jars root jars ls project The project subdirectory contains all of the jar files aggregated from the repository They are stored in a two layered structure of directories similar to the main repository itself 4 2 Other commands Some other commands that might be interesting to run are the Eclipse launchers are all found in launch tutorial cd install Sourcerer bin dist install dist java jar repo tools jar print repo disk usage input repo root install dist java jar repo tools jar print project names input repo root install dist java jar repo tools jar print jar stats input repo root install dist java jar repo tools jar print project sizes input repo root If you wish for the output logs to be saved to a file the output path parameter may be added When this parameter is specified logs are saved to path command name date time and are no longer printed to the command line To have them printed to the command line again add the report to console flag Step 5 Set up the Extractor Command Line Build Extractor plugin Unfortunately as the extractor is an Eclipse plugin this step cannot be done from the command line You can download the plugin here Place it in the install Sourcerer bin plugins directory you will have to create this directory If you decided to load the projects into Eclipse you can instead run launch extractor Build Extractor This Eclipse specific ant task will create the plugin and place it in the directory mentioned above Next run launch extractor Repackage Extractor launch cd install Sourcerer bin install Sourcerer bin ant repackage extractor This ant task will repackage the plugin to contain the necessary dependencies and will place it in the dist directory Command Line Copy plugin into Eclipse As the Extractor is a headless Eclipse plugin it must be installed into a working Eclipse instance This installation can be done as follows Download a recent version of Eclipse and extract it to some directory eclipse Place the Extractor 1 jar file generated by the ant task in the eclipse plugins directory 5 A Test Extractor To test that it s working run Eclipse launcher launch tutorial Step 5 Test Extractor launch java jar eclipse plugins org eclipse version name launcher version number jar consolelog application Extractor Extractor The result should be a list of the 3 commands supported by the Extractor Step 6 Run the Extractor 6 A Extract Libraries Before the Java libraries can be extracted they must be added to the repository To do this run Eclipse launcher launch tutorial Step 6 Add Java Libraries to Repo launch java jar application Extractor Extractor add libraries to repo output repo path Now the repository is ready to extract Java library code To do so run Eclipse launcher launch tutorial Step 6 Extract Libraries launch java jar application Extractor Extractor extract libraries output repo path Unfortunately Eclipse buffers all output printed to System out System err by headless plugins until the termination of the plugin Therefore to receive real time feedback regarding the status of the Extractor you must add the output property For the command line this entails adding output path to the end of the command For Eclipse this means uncommenting a line in tutorial properties that says output path In either case path should be the path to where the output logs get written You can track the progress of the extractor by running tail f output path extract libraries date time error log When using the command line it is recommended to run this in the background using as it can take a while to complete The results of the extraction can be seen in output repo libs The extracted data for each Java library jar file is contained within the directory with that jar file s name rt jar contains the vast majority of the Java library Looking into any directory you can see the various flat files that are used to build the database 6 B Extract Jars Next extract the jar files using Eclipse launcher launch tutorial Step 6 Extract Jars launch java jar application Extractor Extractor extract jars input repo path output repo path Notice that an input repo is needed this time as the jar files are not being picked off the Java classpath The results of this extraction can be found in output repo jars 6 C Extract Projects Lastly extract the source files using Eclipse launcher launch tutorial Step 6 Extract Projects launch java jar application Extractor Extractor extract projects input repo path output repo path The results of this extraction can be found in output repo Step 7 Set up the database 7 A Set up database Connect to your MySQL server running at some url url Create a database named db for SourcererDB create database db Give the user permission to the database grant all on db to user Eclipse Set up properties file Open the file tutorial db properties found in launch tutorial On the first line for the property input repo replace path with the path to the output repository used in the extraction As this is a Java properties file make sure to escape any used of as On the second line for the property database url replace url with the url of your MySQL instance and replace db with the name of the database On the third line for the property database user replace user with the name of the database user On the fourth line for the property database password replace password with the name of the database password 7 B Extraction summary To view some summary statistics of the extraction please run Eclipse launcher launch tutorial Step 7 Extraction Stats launch cd install dist install dist java jar repo tools jar extraction stats input repo path This will create an extraction stats txt file which contains some details on what was extracted from the repository Step 8 Set up the database tools Command Line Build sourcerer db jar cd install Sourcerer bin install Sourcerer bin ant sourcerer db This will create a sourcerer db jar in install Sourcerer bin dist Step 9 Set up the database tools Initialize DB Run Eclipse launcher launch tutorial Step 9 Initialize DB launch cd install Sourcerer bin dist install dist java jar sourcerer db jar database url jdbc mysql url db database user user database password password initialize db Import Libraries Run Eclipse launcher launch tutorial Step 9 Import Libraries launch cd install Sourcerer bin dist install dist java jar sourcerer db jar database url jdbc mysql url db database user user database password password add libraries input repo path Where path for input repo is the path to the output repository used in the extraction Import Jars Run Eclipse launcher launch tutorial Step 9 Import Jars launch cd install Sourcerer bin dist install dist java jar sourcerer db jar database url jdbc mysql url db database user user database password password add jars input repo path Import Projects Run Eclipse launcher launch tutorial Step 9 Import Projects launch cd install Sourcerer bin dist install dist java jar sourcerer db jar database url jdbc mysql url db database user user database password password add projects input repo path Step 1 Explore the database Connect to the database and look around at what you have Overview Core Infrastructure Repository SourcererDB Services Code Search Engine Tutorial People Publications", "_id": "http://sourcerer.ics.uci.edu/tutorial.html", "title": "sourcerer project: tutorial", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n\n<head>\n<title>Sourcerer Project: Tutorial</title>\n<link rel=\"stylesheet\" href=\"css/sourcerer.css\" type=\"text/css\" />\n</head>\n\n<body>\n<div id=\"container\">\n<div id=\"header\">\n<div id=\"a1\"></div>\n<div id=\"a2\"></div>\n<div id=\"a3\"></div>\n<div id=\"a4\"></div>\n<div id=\"a5\"></div>\nThe Sourcerer Project\n</div>\n<div id=\"content\">\n<div id=\"main\">\n<h1>Tutorial</h1>\n<p>\n  This tutorial is designed to show the reader how to download, install,\n  and use the Sourcerer infrastructure to build SourcererDB.\n</p>\n<p>\n  This tutorial can be completed using either the command-line\n  or Eclipse. In either case, you must have a working version\n  of the <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">\n  Java Development Kit</a>, <a href=\"http://git-scm.com/\">Git</a>, and\n  a <a href=\"http://www.mysql.com/\">MySQL</a> server. The \n  command-line tutorial is recommended for\n  those looking to use Sourcerer for large-scale analysis,\n  as the command-line interaction is better suited for server\n  machines. \n</p>\n<ul>\n  <li>\n    If you intend to complete the tutorial using the command-line, you\n    must have both <a href=\"http://ant.apache.org/\">Ant</a> and\n    <a href=\"http://www.eclipse.org\">Eclipse</a> installed. Eclipse\n    will not be run graphically, but is necessary for the extractor\n    to function. \n  </li>\n  <li>\n    If you intend to complete the tutorial using Eclipse, you only\n    need to have <a href=\"http://www.eclipse.org\">Eclipse</a> installed.\n  </li>\n</ul>\n<p>\n  Steps specific to the command-line are prefaced with <span style=\"color:#534874;font-weight:bold;\">Command-Line)</span>, while\n  steps specific to the Eclipse are prefaced with <span style=\"color:#534874;font-weight:bold;\">Eclipse)</span>.\n</p>\n\n<h2>Step 1: <span class=\"colora\">Download Sourcerer</span></h2>\n<div class=\"sub\">\n  <p>\n    Run\n  </p>\n  <div class=\"code-block\">\n    [install]$ git clone https://github.com/sourcerer/Sourcerer.git\n  </div>\n  <p>\n    where <span class=\"fixed\">[install]</span> is the directory into which\n    you wish to download Sourcerer.\n  </p>\n  \n  <h3>Eclipse) Load Sourcerer in Eclipse</h3>\n  <div class=\"sub\">\n    <p>\n      Do the following once you have opened a fresh Eclipse workspace.\n    </p>\n    <ol>\n      <li>Go to <span class=\"fixed\">File-&gt;Import</span></li>\n      <li>Select <span class=\"fixed\">General-&gt;Existing Projects into Workspace</span> and hit <span class=\"fixed\">Next</span>.</li>\n      <li>Click <span class=\"fixed\">Browse</span> next to <span class=\"fixed\">Select Root Directory</span>.</li>\n      <li>Navigate to the <span class=\"fixed\">[install]/Sourcerer</span> directory and click <span class=\"fixed\">OK</span>.</li>\n      <li>Make sure the following projects are selected\n        <ul>\n          <li><span class=\"fixed\">bin</span></li>\n          <li><span class=\"fixed\">database</span></li>\n          <li><span class=\"fixed\">database-utilities</span></li>\n          <li><span class=\"fixed\">extractor</span></li>\n          <li><span class=\"fixed\">lib</span></li>\n          <li><span class=\"fixed\">link-crawler</span></li>\n          <li><span class=\"fixed\">model</span></li>\n          <li><span class=\"fixed\">repository-manager</span></li>\n          <li><span class=\"fixed\">java-repository-manager</span></li>\n          <li><span class=\"fixed\">utilities</span></li>\n        </ul>\n      </li>\n      <li>Click finish, and wait for the projects to build.</li>\n      <li>\n        Once built, there will be missing dependencies for the <span class=\"fixed\">extractor</span> project.\n        To correct this, go to the <span class=\"fixed\">bin</span> project, and run <span class=\"fixed\">launch/lib/extractor-lib.launch</span>.\n        Then refresh the <span class=\"fixed\">bin</span> project, and the error should disappear.\n      </li> \n    </ol>\n  </div>\n</div>\n\n<h2>Step 2: <span class=\"colora\">Set up a Repository</span></h2>\n<div class=\"sub\">\n  <p>\n    For the purposes of the tutorial, there are four ways setting up the repository. They\n    all result in a repository located in a directory referred to as <span class=\"code\">[root]</span>\n    for the remainder of this tutorial. So pick either 2.A, 2.B, 2.C or 2.D.\n  </p>\n\n  <h3>2.A) Create the test-repository</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/test-repo/Create test repo.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [install]$ cd Sourcerer/bin<br>\n      [install]/Sourcerer/bin$ ant create-test-repo\n    </div>\n    <p>\n      This creates a test repository. To view it's contents, run\n    </p>\n    <div class=\"code-block\">\n      [install]/Sourcerer/bin$ cd ../infrastructure/tools/java/extractor/test-repo<br>\n      [install]/Sourcerer/infrastructure/tools/java/extractor/test-repo$ ls\n    </div>\n    <p>\n      This test repository contains three projects, <span class=\"fixed\">0/0</span>, a project for testing the \n      feature extractor, <span class=\"fixed\">0/1</span>, a subset of the Sourcerer infrastructure, and <span class=\"fixed\">0/2</span>,\n      an additional feature extractor test project.\n    </p>\n  </div>\n\n  <h3>2.B) Download a sample repository</h3>\n  <div class=\"sub\">\n    <p>\n      A sample repository containing a small random selection of projects from \n      the full repository can be found online\n      <a href=\"http://sourcerer.ics.uci.edu/files/sample-repo.tgz\">here</a>.\n      Simply download this file and extract it to the desired directory.\n    </p>\n  </div>\n  \n  <h3>2.C) Download the full repository</h3>\n  <div class=\"sub\">\n    <p>\n      The full repository can be found online \n      <a href=\"http://www.ics.uci.edu/~lopes/datasets/SDS_source-repo-18k.html\">here</a>.\n      Simply download this file (very very big) and extract it to the desired directory.\n    </p>\n  </div>\n  \n  <h3>2.D) Create your own repository</h3>\n  <div class=\"sub\">\n    <p>\n      To create a repository with custom projects, simply follow the repository \n      structure <a href=\"repository.html\">here</a>.\n    </p>\n    \n    <h4>2.D.1) Create <span class=\"fixed\">[ROOT]</span> directory</h4>\n    <div class=\"sub\">\n      <div class=\"code-block\">\n        [?]$ mkdir [root]<br>\n        [?]$ cd [root]\n      </div>\n    </div>\n    \n    <h4>2.D.2) Create project directories</h4>\n    <div class=\"sub\">\n      <p>\n        For every project you wish to include in the repository, create a subdirectory of\n        <span class=\"fixed\">[root]</span> of the form <span class=\"fixed\">[root]/[number]/[number]</span>.\n        For example, if you wanted to create a repository with 3 projects, you would do the following.\n      </p>\n      <div class=\"code-block\">\n        [root]$ mkdir 0<br>\n        [root]$ mkdir 0/0<br>\n        [root]$ mkdir 0/1<br>\n        [root]$ mkdir 0/2<br>\n        [root]$ ls<br>\n        0<br>\n        [root]/0$ cd 0<br>\n        [root]$ ls<br>\n        0 1 2\n      </div>\n      <p>\n        This creates space for 3 projects. It doesn't matter what numbers are picked \n        for the directories, as long as they are numbers.\n      </p>\n    </div>\n    \n    <h4>2.D.3) Add project content</h4>\n    <div class=\"sub\">\n      <p>\n        To add the actual content for each project, do the following.\n      </p>\n      <div class=\"code-block\">\n        [root]/0$ cd 0<br>\n        [root]/0/0$ mkdir content<br>\n        [root]/0/0$ cp -R [project-content]/* content\n      </div>\n      <p>\n        This copies the contents of the project from some <span class=\"code\">[project-content]</span>\n        directory into the content directory of the repository. This content can be any combination of Java \n        source code and jar files.\n      </p>\n    </div>\n  \n    <h4>2.D.4) Create <span class=\"fixed\">project.properties</span> files</h4>\n    <div class=\"sub\">\n      <div class=\"code-block\">\n        [root]/0/0$ echo name=[project-name] &gt; project.properties\n      </div>\n      <p>\n        There are a number of other supported properties, but the only required one is name.\n      </p>\n    </div>\n  </div>\n</div>\n\n<h2>Step 3: <span class=\"colora\">Compile the repository tools</span></h2>\n<div class=\"sub\">\n  <h3>Command-Line) Compile</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/lib/repo-tools.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [install]/Sourcerer/bin$ ant repo-tools \n    </div>\n    <p>\n      This will create <span class=\"fixed\">repo-tools.jar</span> in the <span class=\"fixed\">dist</span> subdirectory. We will\n      refer to this subdirectory as <span class=\"fixed\">[install-dist]</span>.\n    </p>\n  </div>\n  <h3>3.A) Test</h3>\n  <div class=\"sub\">\n    <p>\n      Running (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 3 - Repo Tools.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [install]/Sourcerer/bin$ cd dist<br>\n      [install-dist]$ java -jar repo-tools.jar\n    </div>\n    <p>\n      will print a complete list of the commands provided by <span class=\"fixed\">repo-tools.jar</span>.\n    </p>\n  </div>\n</div>\n\n<h2>Step 4: <span class=\"colora\">Finish setting up the repository</span></h2>\n<div class=\"sub\">\n  <h3>Eclipse) Set up properties file</h3>\n  <div class=\"sub\">\n    <ol>\n      <li>\n        Open the file <span class=\"fixed\">tutorial.properties</span>, found in\n        <span class=\"fixed\">launch/tutorial</span>.\n      </li>\n      <li>\n        On the first line, for the property <span class=\"fixed\">input-repo</span>,\n        replace <span class=\"fixed\">[root]</span> with the path to the repository\n        you created in Step 2. As this is a Java properties file, make sure to \n        escape any used of <span class=\"fixed\">\\</span> as <span class=\"fixed\">\\\\</span>. \n      </li>\n      <li>\n        On the second line, for the property <span class=\"fixed\">output-repo</span>,\n        replace <span class=\"fixed\">[path]</span> with the path to where you would\n        like the extracted version of the repository to be stored. As this is a Java \n        properties file, make sure to any used of <span class=\"fixed\">\\</span> as \n        <span class=\"fixed\">\\\\</span>.\n    </ol>\n  </div>\n  <h3>4.1) Aggregate jar files</h3>\n  <div class=\"sub\">\n    <p>\n      <span class=\"colora bold\">Note</span>: If you used step 2.A (create-test-repo ant task), this task have already been run and you may skip this step.\n    </p>\n    \n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 4 - Aggregate Jar Files.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [install-dist]$ java -jar repo-tools.jar --aggregate-jar-files --input-repo [root]\n    </div>\n    <p>\n      If you are running it from the command line, you should replace <span class=\"fixed\">[root]</span> with the\n      path to the repository you created in Step 2.\n    </p>\n    <p>\n      This collects all of the jar files in the repository into the jars directory. To see the result, do the following.\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [root]<br>\n      [root]$ ls jars<br>\n      jars<br>\n      [root]$ cd jars<br>\n      [root]/jars$ ls<br>\n      project\n    </div>\n    <p>\n      The project subdirectory contains all of the jar files aggregated from the repository. They are stored in a two-layered structure\n      of directories, similar to the main repository itself.\n    </p>\n  </div>\n  <h3>4.2) Other commands</h3>\n  <div class=\"sub\">\n    <p>\n      Some other commands that might be interesting to run are: (the Eclipse launchers are all found in <span class=\"fixed\">launch/tutorial</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin/dist<br>\n      [install-dist]$ java -jar repo-tools.jar --print-repo-disk-usage --input-repo [root]<br>\n      [install-dist]$ java -jar repo-tools.jar --print-project-names --input-repo [root]<br>\n      [install-dist]$ java -jar repo-tools.jar --print-jar-stats --input-repo [root]<br>\n      [install-dist]$ java -jar repo-tools.jar --print-project-sizes --input-repo [root]<br>\n    </div>\n    <p>\n      If you wish for the output logs to be saved to a file, the <span class=\"fixed\">--output [path]</span>\n      parameter may be added. When this parameter is specified, logs are saved to \n      <span class=\"fixed\">[path]/[command name]/[date]/[time]</span> and are no longer printed to the command line. \n      To have them printed to the command line again, add the <span class=\"fixed\">--report-to-console</span> flag.\n    </p>\n  </div>\n</div>\n\n<h2>Step 5: <span class=\"colora\">Set up the Extractor</span></h2>\n<div class=\"sub\">\n  <h3>Command-Line) Build Extractor plugin</h3>\n  <div class=\"sub\">\n    <p>\n      Unfortunately, as the extractor is an Eclipse plugin, this step cannot be done from the command line.\n      You can download the plugin <a href=\"\">here</a>. Place it in the <span class=\"fixed\">[install]/Sourcerer/bin/plugins</span>\n      directory (you will have to create this directory).\n    </p>\n    <p>\n      If you decided to load the projects into Eclipse, you can instead run <span class=\"fixed\">launch/extractor/Build Extractor</span>.\n      This Eclipse-specific ant task will create the plugin and place it in the directory mentioned above.\n    </p>\n    <p>\n      Next, run <span class=\"fixed\">launch/extractor/Repackage Extractor.launch</span>\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin<br>\n      [install]/Sourcerer/bin$ ant repackage-extractor<br>\n    </div>\n    <p>\n      This ant task will repackage the plugin to contain the necessary dependencies, and will place it in the <span class=\"fixed\">dist</span> directory.\n    </p>\n  </div>\n  <h3>Command-Line) Copy plugin into Eclipse</h3>\n  <div class=\"sub\">\n    <p>\n      As the Extractor is a headless Eclipse plugin, it must be installed into a working Eclipse instance. This installation can be done as follows:\n    <p>\n    <ol>\n      <li>Download a recent version of Eclipse and extract it to some directory <span class=\"fixed\">[eclipse]</span>.</li>\n      <li>Place the Extractor_1.0.0.jar file generated by the ant task in the [eclipse]/plugins directory.</li>\n    </ol>\n  </div>\n  \n  <h3>5.A) Test Extractor</h3>\n  <div class=\"sub\">\n    <p>\n      To test that it's working, run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 5 - Test Extractor.launch</span>) \n    </p>\n    <div class=\"code-block\">\n      [?]$ java -jar [eclipse]/plugins/org.eclipse.[version-name].launcher_[version-number].jar -consolelog -application Extractor.Extractor\n    </div>\n    <p>\n      The result should be a list of the 3 commands supported by the Extractor.\n    </p>\n  </div>\n</div>\n\n<h2>Step 6: <span class=\"colora\">Run the Extractor</span></h2>\n<div class=\"sub\">\n  <h3>6.A) Extract Libraries</h3>\n  <div class=\"sub\">\n    <p>\n      Before the Java libraries can be extracted, they must be added to the repository. To do this,\n      run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 6 - Add Java Libraries to Repo.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ java -jar [...] -application Extractor.Extractor --add-libraries-to-repo --output-repo [path]\n    </div>\n    <p>\n      Now the repository is ready to extract Java library code. To do so, run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 6 - Extract Libraries.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ java -jar [...] -application Extractor.Extractor --extract-libraries --output-repo [path]\n    </div>\n    <p>\n      Unfortunately, Eclipse buffers all output printed to <span class=\"fixed\">System.out</span>/<span class=\"fixed\">System.err</span> by headless plugins until\n      the termination of the plugin. Therefore, to receive real-time feedback regarding the status of the Extractor, you must add the <span class=\"fixed\">output</span>\n      property. For the command-line, this entails adding <span class=\"fixed\">--output [path]</span> to the end of the command. For Eclipse, this means uncommenting a line\n      in <span class=\"fixed\">tutorial.properties</span> that says <span class=\"fixed\">output=[path]</span>. In either case, <span class=\"fixed\">[path]</span> should\n      be the path to where the output logs get written. \n    </p>\n    <p>\n      You can track the progress of the extractor by running \n    </p>\n    <div class=\"code-block\">\n      [?]$ tail -f [output-path]/extract-libraries/[date]/[time]/error.log\n    </div>\n    <p>\n      When using the command-line, it is recommended to run this in the background (using &amp;), \n      as it can take a while to complete.\n    </p>\n    <p>\n      The results of the extraction can be seen in <span class=\"fixed\">[output-repo]/libs/</span>. The extracted \n      data for each Java library jar file is contained within the directory with that \n      jar file's name. <span class=\"fixed\">rt.jar</span> contains the vast majority of the Java library. Looking \n      into any directory, you can see the various flat files that are used to build the database.\n    </p>\n  </div>\n  <h3>6.B) Extract Jars</h3>\n  <div class=\"sub\">\n    <p>\n      Next, extract the jar files using (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 6 - Extract Jars.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ java -jar [...] -application Extractor.Extractor --extract-jars --input-repo [path] --output-repo [path]\n    </div>\n    <p>\n      Notice that an input-repo is needed this time, as the jar files are not being picked off the Java classpath.\n    </p>\n    <p>\n      The results of this extraction can be found in <span class=\"fixed\">[output-repo]/jars/</span>.\n    </p>\n  </div>\n  <h3>6.C) Extract Projects</h3>\n  <div class=\"sub\">\n    <p>\n      Lastly, extract the source files using (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 6 - Extract Projects.launch</span>) \n    </p>\n    <div class=\"code-block\">\n      [?]$ java -jar [...] -application Extractor.Extractor --extract-projects --input-repo [path] --output-repo [path]\n    </div>\n    <p>\n      The results of this extraction can be found in <span class=\"fixed\">[output-repo]</span>.\n    </p>\n  </div>\n</div>\n  \n<h2>Step 7: <span class=\"colora\">Set up the database</span></h2>\n<div class=\"sub\">\n  <h3>7.A) Set up database</h3>\n  <div class=\"sub\">\n    <p>\n      Connect to your MySQL server, running at some url, <span class=\"fixed\">url</span>.\n      Create a database named, <span class=\"fixed\">[db]</span> for SourcererDB. \n    </p>\n    <div class=\"code-block\">\n      create database [db];\n    </div>\n    <p>\n      Give the user permission to the database.\n    </p>\n    <div class=\"code-block\">\n      grant all on [db].* to [user];\n    </div>\n  </div>\n  <h3>Eclipse) Set up properties file</h3>\n  <div class=\"sub\">\n    <ol>\n      <li>\n        Open the file <span class=\"fixed\">tutorial-db.properties</span>, found in\n        <span class=\"fixed\">launch/tutorial</span>.\n      </li>\n      <li>\n        On the first line, for the property <span class=\"fixed\">input-repo</span>,\n        replace <span class=\"fixed\">[path]</span> with the path to the <span style=\"font-weight:bold; font-style: italic;\">output</span> repository\n        used in the extraction. As this is a Java properties file, make sure to \n        escape any used of <span class=\"fixed\">\\</span> as <span class=\"fixed\">\\\\</span>. \n      </li>\n      <li>\n        On the second line, for the property <span class=\"fixed\">database-url</span>,\n        replace <span class=\"fixed\">[url]</span> with the url of your MySQL instance,\n        and replace <span class=\"fixed\">[db]</span> with the name of the database.\n      </li>\n      <li>\n        On the third line, for the property <span class=\"fixed\">database-user</span>,\n        replace <span class=\"fixed\">[user]</span> with the name of the database user.\n      </li>\n      <li>\n        On the fourth line, for the property <span class=\"fixed\">database-password</span>,\n        replace <span class=\"fixed\">[password]</span> with the name of the database password.\n      </li>\n    </ol>\n  </div>\n  <h3>7.B) Extraction summary</h3>\n  <div class=\"sub\">\n    <p>\n      To view some summary statistics of the extraction, please run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 7 - Extraction Stats.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install-dist]<br>\n      [install-dist]$ java -jar repo-tools.jar --extraction-stats --input-repo [path]\n    </div>\n    <p>\n      This will create an extraction-stats.txt file which contains some \n      details on what was extracted from the repository.\n    </p>\n  </div>\n</div>\n\n<h2>Step 8: <span class=\"colora\">Set up the database tools</span></h2>\n<div class=\"sub\">\n  <h3>Command-Line) Build <span class=\"fixed\">sourcerer-db.jar</span></h3>\n  <div class=\"sub\">\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin<br>\n      [install]/Sourcerer/bin$ ant sourcerer-db\n    </div>\n    <p>\n      This will create a <span class=\"fixxed\">sourcerer-db.jar</span> in <span class=\"fixed\">[install]/Sourcerer/bin/dist</span>.\n    </p>\n  </div>\n</div>\n\n<h2>Step 9: <span class=\"colora\">Set up the database tools</span></h2>\n<div class=\"sub\">\n  <h3>Initialize DB</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 9 - Initialize DB.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin/dist\n      [install-dist]$ java -jar sourcerer-db.jar --database-url jdbc:mysql://[url]/[db] --database-user [user] --database-password [password] --initialize-db\n    </div>\n  </div>\n  \n  <h3>Import Libraries</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 9 - Import Libraries.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin/dist\n      [install-dist]$ java -jar sourcerer-db.jar --database-url jdbc:mysql://[url]/[db] --database-user [user] --database-password [password] --add-libraries --input-repo [path]\n    </div>\n    <p>\n      Where <span class=\"fixed\">[path]</span> for <span class=\"fixed\">input-repo</span> is the path to the \n      <span style=\"font-weight:bold; font-style: italic;\">output</span> repository used in the extraction.\n    </p> \n  </div>\n  \n  <h3>Import Jars</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 9 - Import Jars.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin/dist\n      [install-dist]$ java -jar sourcerer-db.jar --database-url jdbc:mysql://[url]/[db] --database-user [user] --database-password [password] --add-jars --input-repo [path]\n    </div>\n  </div>\n  \n  <h3>Import Projects</h3>\n  <div class=\"sub\">\n    <p>\n      Run (Eclipse launcher <span class=\"fixed\">launch/tutorial/Step 9 - Import Projects.launch</span>)\n    </p>\n    <div class=\"code-block\">\n      [?]$ cd [install]/Sourcerer/bin/dist\n      [install-dist]$ java -jar sourcerer-db.jar --database-url jdbc:mysql://[url]/[db] --database-user [user] --database-password [password] --add-projects --input-repo [path]\n    </div>\n  </div>  \n</div>\n\n<h2>Step 10: <span class=\"colora\">Explore the database</span></h2>\n<div class=\"sub\">\n  <p>\n    Connect to the database and look around at what you have.\n  </p>\n</div>\n\n</div>\n</div>\n<div id=\"navbar\">\n  <div><a href=\"index.html\">Overview</a></div>\n  <div><a href=\"infrastructure.html\">Core Infrastructure</a></div>\n  <div><a href=\"repository.html\">Repository</a></div>\n  <div><a href=\"sourcerer-db.html\">SourcererDB</a></div>\n  <div><a href=\"services.html\">Services</a></div>\n  <div><a href=\"code-search-engine.html\">Code Search Engine</a></div>\n  <!--<div><a href=\"code-genie.html\">CodeGenie</a></div> -->\n  <div><a class=\"sel\" href=\"tutorial.html\">Tutorial</a></div>\n  <div><a href=\"people.html\">People</a></div>\n  <div><a href=\"publications.html\">Publications</a></div>\n</div>\n</div>\n</body>\n</html>\n", "id": 16458.0}