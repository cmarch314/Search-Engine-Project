{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Triangulation data structure 2 Vb Fb Definition The class Triangulation data structure 2 Vb Fb is a model for the TriangulationDataStructure 2 concept It can be used to represent an orientable 2D triangulation embedded in a space of any dimension include CGAL Triangulation data structure 2 h Is Model for the ConceptTriangulationDataStructure 2 Modifiers In addition to the modifiers required by the TriangulationDataStructure 2 concept the Triangulation data structure 2 Vb Fb class supports also the modifiers below Note also that the modifiers below guarantee the combinatorial validity of the resulting data structure Vertex handle tds join vertices Face handle f int i Joins the vertices that are endpoints of the edge f i It returns a vertex handle to common vertex see Fig Precondition f must be different from Face handle and i must be 1 or 2 Vertex handle tds join vertices Edge e Joins the vertices that are endpoints of the edge e It returns a vertex handle to common vertex Vertex handle tds join vertices Edge iterator eit Joins the vertices that are endpoints of the edge eit It returns a vertex handle to common vertex Vertex handle tds join vertices Edges circulator ec Joins the vertices that are endpoints of the edge ec It returns a vertex handle to common vertex boost tuples tuple Vertex handle Vertex handle Face handle Face handle tds split vertex Vertex handle v Face handle f1 Face handle f2 Splits the vertex v into two vertices v1 and v2 The common faces f and g of v1 and v2 are created after in the counter clockwise sense the faces f1 and f2 The 4 tuple v1 v2 f g is returned see Fig Precondition dimension must be equal to 2 f1 and f2 must be different from Face handle and v must be a vertex of both f1 and f2 Vertex handle tds insert degree 2 Face handle f int i Inserts a degree two vertex and two faces adjacent to it that have two common edges The edge defined by the face handle f and the integer i is duplicated It returns a handle to the vertex created see Fig void tds remove degree 2 Vertex handle v Removes a degree 2 vertex and the two faces adjacent to it The two edges of the star of v that are not incident to it are collapsed see Fig Precondition The degree of v must be equal to 2 Figure The join and split operations Figure Insertion and removal of degree 2 vertices Next Triangulation ds face base 2 Tds Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/TDS_2_ref/Class_Triangulation_data_structure_2.html", "title": "triangulation_data_structure_2&lt;vb,fb&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './TDS_2_ref/Triangulation_data_structure_2.tex' -->\n<html> <head>  \n<title>Triangulation_data_structure_2&lt;Vb,Fb&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_965\"></A>\n\n<A NAME=\"Cross_link_anchor_966\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_912\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Triangulation_data_structure_2<Vb,Fb>\"></A>\n<h2><I>CGAL::Triangulation_data_structure_2&lt;Vb,Fb&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I> is a  model\nfor the <I><A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I> concept.\nIt can be used to represent an orientable 2D triangulation\nembedded in a space of any dimension.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Triangulation_data_structure_2.h\">CGAL/Triangulation_data_structure_2.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3><I><A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>\n<P>\n\n<H3>Modifiers</H3>\n<P>\n\nIn addition to the modifiers required by the\n<I><A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I> concept, the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I> class\nsupports also the modifiers below. Note also that the modifiers below\nguarantee the combinatorial validity of the resulting data structure.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_join_vertices6Face_handle_f+_int_i9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.join_vertices ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Joins\n  the vertices that are endpoints of the edge <I>(f,i)</I>. It returns\n  a vertex handle to common vertex (see\n  Fig. <A HREF=\"Class_Triangulation_data_structure_2.html#fig-tds-split-join\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).<BR>\n\n<EM>Precondition: </EM><I>f</I> must be different from <I>Face_handle()</I> and\n    <I>i</I> must be <I>0</I>, <I>1</I> or <I>2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_join_vertices6Edge_e9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.join_vertices ( Edge e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Joins\n  the vertices that are endpoints of the edge <I>e</I>. It returns\n  a vertex handle to common vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_join_vertices6Edge_iterator_eit9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.join_vertices ( Edge_iterator eit)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Joins\n  the vertices that are endpoints of the edge <I>*eit</I>. It returns\n  a vertex handle to common vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_join_vertices6Edges_circulator_ec9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.join_vertices ( Edges_circulator ec)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Joins\n  the vertices that are endpoints of the edge <I>*ec</I>. It returns\n  a vertex handle to common vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_boost::tuples::tuple6Vertex_handle+_Vertex_handle+_Face_handle+_Face_handle9_split_vertex6Vertex_handle_v+_Face_handle_f1+_Face_handle_f29;\"></A>\nboost::tuples::tuple&lt;Vertex_handle, Vertex_handle, Face_handle, Face_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tds.split_vertex ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle v,<BR>\n\nFace_handle f1,<BR>\n\nFace_handle f2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Splits the vertex <I>v</I> into two vertices <I>v1</I> and\n  <I>v2</I>. The common faces <I>f</I> and <I>g</I> of <I>v1</I> and\n  <I>v2</I> are created after (in the counter-clockwise sense) the\n  faces <I>f1</I> and <I>f2</I>. The 4-tuple <I>(v1,v2,f,g)</I> is\n  returned (see Fig. <A HREF=\"Class_Triangulation_data_structure_2.html#fig-tds-split-join\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).<BR>\n\n<EM>Precondition: </EM><I>dimension()</I> must be equal to <I>2</I>, <I>f1</I> and\n    <I>f2</I> must be different from <I>Face_handle()</I> and <I>v</I>\n    must be a vertex of both <I>f1</I> and <I>f2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert_degree_26Face_handle_f+_int_i9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.insert_degree_2 ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts \na degree two vertex and two faces adjacent to it that have two common\nedges. The edge defined by the face handle <I>f</I> and the integer\n<I>i</I> is duplicated. It returns a handle to the vertex created\n(see Fig. <A HREF=\"Class_Triangulation_data_structure_2.html#fig-tds-ir-deg2\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_degree_26Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tds.remove_degree_2 ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Removes a degree 2\nvertex and the two faces adjacent to it. The two edges of the star of\n<I>v</I> that are not incident to it are collapsed\n(see Fig. <A HREF=\"Class_Triangulation_data_structure_2.html#fig-tds-ir-deg2\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).<BR>\n\n<EM>Precondition: </EM>The degree of <I>v</I> must be equal to 2.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<center>\n<img border=0 src=\"./join_split.gif\" align=center\nalt=\"The join and split operations\"\ntitle=\"The join and split operations\">\n</center><BR>\n\n<font size=-1>\n\n<B>Figure:&nbsp;&nbsp;</B>The join and split operations.<A NAME=\"fig-tds-split-join\"></A>\n\n</font>\n<P>\n\n<center>\n<img border=0 src=\"./tds-insert_degree_2.gif\" align=center\nalt=\"Insertion and removal of degree 2 vertices\"\ntitle=\"Insertion and removal of degree 2 vertices\">\n</center><BR>\n\n<font size=-1>\n\n<B>Figure:&nbsp;&nbsp;</B>Insertion and removal of degree 2 vertices.\n<A NAME=\"fig-tds-ir-deg2\"></A>\n\n</font>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Triangulation_ds_face_base_2.html\"><I>Triangulation_ds_face_base_2&lt;Tds&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_34!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39023.0}