{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 1Introduction CGAL the Computational Geometry Algorithms Library is written in C and consists of three major parts The first part is the kernel which consists of constant size non modifiable geometric primitive objects and operations on these objects The objects are represented both as stand alone classes that are parameterized by a representation class which specifies the underlying number types used for calculations and as members of the kernel classes which allows for more flexibility and adaptability of the kernel The second part is a collection of basic geometric data structures and algorithms which are parameterized by traits classes that define the interface between the data structure or algorithm and the primitives they use In many cases the kernel classes provided in CGAL can be used as traits classes for these data structures and algorithms The third part of the library consists of non geometric support facilities such as circulators random sources I O support for debugging and for interfacing CGAL to various visualization tools This part of the reference manual covers the kernel The kernel contains objects of constant size such as point vector direction line ray segment triangle iso oriented rectangle and tetrahedron With each type comes a set of functions which can be applied to an object of this type You will typically find access functions e g to the coordinates of a point tests of the position of a point relative to the object a function returning the bounding box the length or the area of an object and so on The CGAL kernel further contains basic operations such as affine transformations detection and computation of intersections and distance computations 1 1 Robustness The correctness proof of nearly all geometric algorithms presented in theory papers assumes exact computation with real numbers This leads to a fundamental problem with the implementation of geometric algorithms Naively often the exact real arithmetic is replaced by inexact floating point arithmetic in the implementation This often leads to acceptable results for many input data However even for the implementation of the simplest geometric algorithms this simplification occasionally does not work Rounding errors introduced by an inaccurate arithmetic may lead to inconsistent decisions causing unexpected failures for some correct input data There are many approaches to this problem one of them is to compute exactly compute so accurate that all decisions made by the algorithm are exact which is possible in many cases but more expensive than standard floating point arithmetic C M Hoffmann Hof89a Hof89b illustrates some of the problems arising in the implementation of geometric algorithms and discusses some approaches to solve them A more recent overview is given in Sch The exact computation paradigm is discussed by Yap and Dub YD95 and Yap Yap97 In CGAL you can choose the underlying number types and arithmetic You can use different types of arithmetic simultaneously and the choice can be easily changed e g for testing So you can choose between implementations with fast but occasionally inexact arithmetic and implementations guaranteeing exact computation and exact results Of course you have to pay for the exactness in terms of execution time and storage space See the section on number types in the Support Library for more details on number types and their capabilities and performance 1 2 CGAL and LEDA LEDA is a Library of Efficient Data types and Algorithms partially developed at the Max Planck Institut f r Informatik Saarbr cken and the University of Trier Germany CGAL is independent of LEDA but the two work well together In particular the exact number types provided by LEDA are a way to deal with the robustness issues of the geometric algorithms of CGAL Next chapter Kernel Representations Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23/Chapter_introduction.html", "title": "introduction", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23/introduction.tex' -->\n<html> <head>  \n<title>Introduction</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_introduction.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_1\"></a>\n  \n<h1>Chapter 1<BR>Introduction</h1>\n\nC<SMALL>GAL</SMALL>, the <I>Computational Geometry Algorithms Library</I>, is written in \nC++ and consists of three major parts.\nThe first part is the kernel, which consists of constant-size non-modifiable \ngeometric primitive objects and operations on these objects. \nThe objects are represented both as stand-alone classes that are\nparameterized by a representation class, which specifies\nthe underlying number types used for calculations and as members of the\nkernel classes, which allows for more flexibility and adaptability of the \nkernel.\nThe second part is a collection of basic geometric data structures and\nalgorithms, which are parameterized by traits classes that define the \ninterface between the data structure or algorithm and the primitives they use.\nIn many cases, the kernel classes provided in C<SMALL>GAL</SMALL> can be used as traits\nclasses for these data structures and algorithms.\nThe third part of the library consists of non-geometric support facilities, \nsuch as circulators, random sources, I/O support for debugging and for \ninterfacing C<SMALL>GAL</SMALL> to various visualization tools.\n<P>\n\nThis part of the reference manual covers the kernel.\nThe kernel contains objects of constant size, such as point, vector, \ndirection, line, ray, segment, triangle, iso-oriented rectangle and \ntetrahedron. \nWith each type comes a set of functions which can be applied to an object \nof this type.  \nYou will typically find access functions (e.g. to the coordinates of a point), \ntests of the position of a point relative to the object, a function returning \nthe bounding box, the length, or the <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> of an object, and so on.\nThe C<SMALL>GAL</SMALL> kernel further contains basic operations such as affine\ntransformations, detection and computation of intersections, and distance \ncomputations.\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>1.1&nbsp;&nbsp;&nbsp;Robustness</h2>\n\nThe correctness proof of nearly all geometric algorithms presented\nin theory papers assumes exact computation with real numbers.\nThis leads to a fundamental problem with the implementation of geometric\nalgorithms.\nNaively, often the exact real arithmetic is replaced by inexact floating-point \narithmetic in the implementation.\nThis often leads to acceptable results for many input data.\nHowever, even for the implementation of the simplest geometric \nalgorithms this simplification occasionally does not work.\nRounding errors introduced by an inaccurate arithmetic may lead to \ninconsistent decisions, causing unexpected failures for some correct \ninput data.\nThere are many approaches to this problem, one of them is to compute\nexactly (compute so accurate that all decisions made by the algorithm\nare exact) which is possible in many cases but more expensive\nthan standard floating-point arithmetic.\nC.&nbsp;M.&nbsp;Hoffmann&nbsp;[<A HREF=\"../biblio.html#Biblio_h-gsm-89\">Hof89a</A>, <A HREF=\"../biblio.html#Biblio_h-pargc-89\">Hof89b</A>] illustrates some \nof the problems arising in the implementation of geometric algorithms\nand discusses some approaches to solve them. \nA more recent overview is given in [<A HREF=\"../biblio.html#Biblio_s-rpigc-00\">Sch00</A>].\nThe exact computation paradigm is discussed by Yap and Dub&eacute; \n[<A HREF=\"../biblio.html#Biblio_yd-ecp-95\">YD95</A>] and Yap [<A HREF=\"../biblio.html#Biblio_y-tegc-97\">Yap97</A>].\n<P>\n\nIn C<SMALL>GAL</SMALL> you can choose the underlying number types and arithmetic.  \nYou can use different types of arithmetic simultaneously and the choice can \nbe easily changed, e.g. for testing.  \nSo you can choose between implementations with fast but occasionally inexact \narithmetic and implementations guaranteeing exact computation and exact \nresults.  \nOf course you have to pay for the exactness in terms of execution time \nand storage space.  \nSee the section on number types in the Support Library\nfor more details on number types and their capabilities and performance.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>1.2&nbsp;&nbsp;&nbsp;CGAL and LEDA</h2>\n<P>\n\n<A HREF=\"http://www.algorithmic-solutions.com/\" TARGET=\"_top\">L<SMALL>EDA</SMALL></A>\n\nis a <I>Library of Efficient Data types and Algorithms</I> partially developed \nat the <I><A HREF=\"../NumberTypeSupport_ref/FunctionObjectClass_Max.html#Cross_link_anchor_1396\">Max</A>-Planck Institut f&uuml;r Informatik</I>, Saarbr&uuml;cken,\nand the <I>University of Trier</I>, Germany.\nC<SMALL>GAL</SMALL> is independent of L<SMALL>EDA</SMALL>, but the two work well together.  In particular\nthe exact number types provided by L<SMALL>EDA</SMALL> are a way to deal with the robustness\nissues of the geometric algorithms of C<SMALL>GAL</SMALL>.\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"Chapter_kernel_representation.html\">Kernel Representations</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_1!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39187.0}