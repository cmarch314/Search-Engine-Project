{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 17Topological Maps Iddo Hanniel and Shai Hirsch 17 1 Introduction The topological map Topological map Dcel is a combinatorial structure with no geometric information Therefore it can also be used as a base class for deriving geometric subdivisions e g 2D planar maps with different geometries e g on a sphere or torus 17 2 Basic Terms and Software Design The class is parametrized with the Dcel type which should model the TopologicalMapDcel concept The Dcel Doubly Connected Edge List is the underlying combinatorial data structure also know as the halfedge data structure The Planar map 2 Dcel Traits class Chapter is derived from the Topological map Dcel class and it describes an embedding of a topological map in the Euclidean plane This chapter and Chapter describe the Topological map class and the Planar map class respectively These classes supply the ability to maintain subdivisions of the plane induced by collections of curves In this chapter we introduce the topological map In this section we briefly review the concepts underlying the data structures described in the following sections as well as the functionality of Topological map in a nutshell Figure A face an edge and a vertex Topological Map Vertex Edge Face A topological map is a graph that consists of vertices V edges E faces F and an incidence relation on them Each edge is represented by two halfedges with opposite orientations A face of the topological map is defined by the ordered circular sequences inner and outer of halfedges along its boundary Incidence If a vertex v is an endpoint of an edge e then we say that v and e are incident to each other Similarly a face and an edge on its boundary are incident and a face and a vertex on its boundary are incident including edges and vertices that are not connected to the outer boundary see below Halfedge Twin Source Target We consider each edge e to be two sided representing it by two directed halfedges e and Twin e In other packages the twin halfedge is called opposite A halfedge e is an ordered pair u v of its endpoints and it is directed from u the source to v the target there is no need to store both in each halfedge since Target e Source Twin e We consider each halfedge to lie on the boundary of a single face Connected Component of the Boundary CCB Each connected component of the boundary of a face is defined by a circular list of halfedges For a face f of a topological map we call each connected component of the boundary of f a CCB A bounded face has a unique CCB that is defined to be its outer CCB An unbounded face does not have an outer boundary In the topological map we have one unbounded face Except for the outer CCB any other connected component of the boundary of f is called a hole or inner CCB every face can have none or several holes We say that the holes are contained inside the face Edges around a Vertex Every maximal set of halfedges that share the same target can be viewed as a circular list of halfedges ordered around their target vertex It should be noted that the orientation of the edges around a vertex is opposite to that of the halfedges around a face i e if edge e2 succeeds edge e1 in the order given around vertex v then e1 succeeds e2 in the order given around the incident face f Unlike the convention we adopt for Planar map in Chapter where the halfedges are oriented counterclockwise around a face and clockwise around a vertex in the topological map the users are free to choose any other convention Figure Source and target vertices and twin halfedges Doubly Connected Edge List DCEL For a topological map its DCEL representation consists of a connected list of halfedges for every CCB of every face in the subdivision with additional incidence information that enables us to traverse the subdivision For each halfedge the DCEL stores a pointer to its twin halfedge and to the next halfedge around its incident face see Figure In addition for each halfedge the DCEL stores a pointer to the incident face and the target vertex For each face the DCEL stores a pointer to a halfedge representing its outer CCB and an iterator over pointers to halfedges representing its inner CCBs traversing over a CCB is thus done with repetitive calls to the next halfedge pointer For each vertex the DCEL stores a pointer to an incident halfedge For more information about the DCEL representation see dBvKOS97 and Chapter on Halfedge data structure The DCEL is a low level container class that stores the objects The topological map layer adds high level functions and protection of combinatorial validity Iterators handles and circulators are also introduced in this layer pointers are no longer visible in this layer In the following specifications we implement the subdivision by a DCEL Functionality The class Topological map Dcel supplies the ability to maintain a topological map The user can insert edges in various ways and then split merge or remove them as well as move holes from one face to another The vertices edges and faces can be traversed in a linear way or any other fashion mentioned above For a full reference of the class i e its associated types its operations etc read the Topological map Reference Pages 17 3 Example Programs We conclude this chapter with two example programs The first example demonstrates a simple construction of a Topological map The second example demonstrates the ease with which additional information can be added to the Topological map 17 3 1 Simple Topological Map The example shows a simple construction of a Topological map It uses the base classes for vertex halfedge and face and demonstrates the use of the three insertion functions The function is valid checks the validity of the topological map file examples Topological map example1 C include CGAL basic h include iostream include CGAL Topological map bases h include CGAL Pm default dcel h include CGAL Topological map h typedef CGAL Pm dcel CGAL Tpm vertex base CGAL Tpm halfedge base CGAL Tpm face base Dcel typedef CGAL Topological map Dcel Tpm typedef Tpm Halfedge handle Halfedge handle typedef Tpm Vertex handle Vertex handle typedef Tpm Face handle Face handle int main Tpm t Face handle uf t unbounded face std cout Inserting edge e1 in unbounded face interior Halfedge handle e1 t insert in face interior uf CGAL assertion t is valid std cout map is valid std endl std cout Inserting edge e2 from target vertex of e1 Halfedge handle e2 t insert from vertex e1 CGAL assertion t is valid std cout map is valid std endl std cout Inserting edge e3 between target vertices of e2 and twin of e1 t insert at vertices e2 e1 twin CGAL assertion t is valid std cout map is valid std endl return The output of the program is inserting edge e1 in face interior map is valid inserting edge e2 from target vertex of e1 map is valid inserting edge e3 between target vertices of e2 and e1 twin map is valid 17 3 2 Topological Map with Additional Information The example shows a construction of a Topological map with additional information in the faces It uses inheritance from the face base class to add the information file examples Topological map example2 C include CGAL basic h include iostream include CGAL Topological map bases h include CGAL Pm default dcel h include CGAL Topological map h class Face with info public CGAL Tpm face base int inf public Face with info CGAL Tpm face base inf int info return inf void set info int i inf i typedef CGAL Pm dcel CGAL Tpm vertex base CGAL Tpm halfedge base Face with info Dcel typedef CGAL Topological map Dcel Tpm typedef Tpm Halfedge handle Halfedge handle typedef Tpm Vertex handle Vertex handle typedef Tpm Face handle Face handle int main Tpm t Face handle uf t unbounded face Halfedge handle e1 t insert in face interior uf CGAL assertion t is valid std cout Edge e1 inserted in unbounded face interior std endl Halfedge handle e2 t insert from vertex e1 CGAL assertion t is valid std cout Edge e2 inserted from target vertex of e1 std endl Halfedge handle e3 t insert at vertices e2 e1 twin CGAL assertion t is valid std cout Edge e3 inserted between target vertices of e2 and twin of e1 std endl std cout std endl Setting info of the new face to 1 std endl Face handle nf e3 face nf set info 1 std cout Unbounded face info uf info std endl std cout New face info nf info std endl return The output of the program is inserting e1 in face interior inserting e2 from vertex inserting e3 between vertices of e2 and e1 twin setting info of the new face to 1 unbounded face info new face info 1 Next chapter Topological Maps Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Topological_map/Chapter_main.html", "title": "topological maps", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Topological_map/main.tex' -->\n<html> <head>  \n<title>Topological Maps</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_17\"></a>\n  \n<h1>Chapter 17<BR>Topological Maps</h1>\n\n<A NAME=\"I1_ChapterTopologicalMap\"></A>\n<EM>Iddo Hanniel  and Shai Hirsch</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>17.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n\n<A NAME=\"TPM_sec:intro\"></A>\n   The topological map (<I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;</I>) is a <I>combinatorial</I> structure with no geometric information. Therefore,\n   it can also be used as a base class for deriving geometric\n   subdivisions (e.g, 2D planar maps) with different geometries (e.g,\n   on a sphere or torus).\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>17.2&nbsp;&nbsp;&nbsp;Basic Terms and Software Design</h2>\n\n   The class is parametrized with the <I>Dcel</I> type which should\n   model the <I><A HREF=\"../Topological_map_ref/Concept_TopologicalMapDcel.html#Cross_link_anchor_776\">TopologicalMapDcel</A></I> concept. The <I>Dcel</I> (Doubly\n   Connected Edge List) is the underlying combinatorial data structure\n   (also know as the halfedge data structure).\n<P>\n\nThe <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&lt;Dcel,Traits&gt;</I> class\n   (Chapter&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>) is derived from the\n   <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;</I> class and it describes an embedding of\n   a topological map in the Euclidean plane.  This chapter and Chapter\n   <A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A> describe the <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I> class\n   and the <I>Planar_map</I> class respectively. These classes supply\n   the ability to maintain subdivisions of the plane induced by\n   collections of curves. In this chapter we introduce the\n   <I>topological map</I>. In this section we briefly review the\n   concepts underlying the data structures described in the following\n   sections as well as the functionality of <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I> in a\n   nutshell.\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>A face, an edge, and a vertex <A NAME=\"fig:face\"></A>\n<P>\n\n<center><img border=0 src=\"my_face.gif\" alt=\" \">\n  <!-- <br> A face, an edge, and a vertex -->\n  </center>\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n\n\n<b>Topological Map, Vertex, Edge, Face:</b>\n \n\n<!-- REMOVE_LINKS_END -->\n\nA topological map is a graph that consists of vertices V,\nedges E, faces F and an incidence relation on them. Each edge is represented by two halfedges with <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> orientations.\nA <I>face</I> of the topological map is defined by the ordered\ncircular sequences \n(inner and outer) of halfedges along its boundary.\n<P>\n\n<b>Incidence:</b>\n\nIf a vertex <MATH><I>v</I></MATH> is an endpoint of an edge <MATH><I>e</I></MATH>, then we say that <MATH><I>v</I></MATH>\nand <MATH><I>e</I></MATH> are <I>incident</I> to each other. Similarly, a face and an\nedge on its boundary are incident, and a face and a vertex on its\nboundary are incident (including edges and vertices that are not connected \nto the outer boundary  -  see below).\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n\n\n<b>Halfedge, Twin, Source, Target:</b>\n\n\n<!-- REMOVE_LINKS_END -->\n\nWe consider each edge <MATH><I>e</I></MATH> to be two-sided, representing it by two\ndirected <I>halfedges</I> <MATH><I>e</I></MATH> and \n<MATH><I>Twin(e)</I></MATH> \n(In other packages the twin halfedge is called <MATH><I><A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A></I></MATH>).  \nA halfedge <MATH><I>e</I></MATH> is an ordered pair <MATH><I>(u,v)</I></MATH> of its endpoints, and\nit is directed from <MATH><I>u</I></MATH>, the <I>source</I>, to <MATH><I>v</I></MATH>, the <I>target</I> (there \nis no need to store both in each halfedge since \n<MATH><I>Target(e)  <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> Source(Twin(e))</I></MATH>).\nWe consider each halfedge to lie on the boundary of a single face.\n<P>\n\n<b>Connected Component of the \n<!-- REMOVE_LINKS_BEGIN -->\nBoundary\n<!-- REMOVE_LINKS_END -->\n (CCB):</b>\n\nEach connected component of the boundary of a face is defined by a\ncircular list of halfedges. \nFor a face <MATH><I>f</I></MATH> of a topological map, \nwe call each\nconnected component of the boundary of <MATH><I>f</I></MATH> a <I>CCB</I>.\nA <I>bounded face</I> has a\nunique CCB that is defined to be\nits outer CCB. An\n<I>unbounded</I> face does not have an outer boundary.\nIn the topological map we have one unbounded face.\nExcept for the outer CCB, any other\nconnected component of the boundary of <MATH><I>f</I></MATH> is called a hole (or inner CCB),\nevery face can have none\nor several holes.\nWe say that the holes are <I>contained</I> inside\nthe face.\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n\n\n<b>Edges around a Vertex :</b>\n\n\n<!-- REMOVE_LINKS_END -->\n\nEvery maximal set of halfedges that share the same target can be viewed \nas a circular list of halfedges ordered around their target vertex.\nIt should be noted that the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of the edges around a vertex is \n<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to that of the halfedges around a face, i.e., if edge <MATH><I>e2</I></MATH>\nsucceeds edge <MATH><I>e1</I></MATH> in the order given around vertex <MATH><I>v</I></MATH>, then <MATH><I>e1</I></MATH>\nsucceeds <MATH><I>e2</I></MATH> in the order given around the incident face <MATH><I>f</I></MATH>.\nUnlike the convention we adopt\nfor <I>Planar_map</I> in Chapter&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A> where the halfedges\nare oriented counterclockwise around a face and clockwise around a vertex,\nin the topological map the users are free to choose any other convention.\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>Source and target vertices, and twin halfedges <A NAME=\"fig:DCEL\"></A>\n<P>\n\n<center><img border=0 src=\"./dcel.gif\" alt=\" \">\n<!-- <br> Source and target vertices, and twin halfedges -->\n</center>\n<P>\n\n<b>Doubly Connected Edge List (DCEL):</b>\n\nFor a topological map, its <I>DCEL</I> representation consists of a\nconnected list of halfedges for every CCB of every face in the\nsubdivision, with additional incidence information that enables us to\ntraverse the subdivision. For each halfedge the DCEL\nstores a pointer to its twin halfedge and to the next\nhalfedge around its incident face (see Figure&nbsp;<A HREF=\"Chapter_main.html#fig:DCEL\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>). In\naddition, for each halfedge the DCEL stores a pointer to the incident\nface and the target vertex.\nFor each face the DCEL stores a pointer to a halfedge representing\nits outer-CCB and an iterator over pointers to halfedges representing\nits inner-CCBs (traversing over a CCB is thus done with repetitive\ncalls to the next halfedge pointer).\nFor each vertex the DCEL stores a pointer to an incident halfedge. \nFor more information about the DCEL\nrepresentation see &nbsp;[<A HREF=\"../biblio.html#Biblio_bkos-cgaa-97\">dBvKOS97</A>] and Chapter&nbsp;<A HREF=\"../HalfedgeDS/Chapter_main.html#chapterHalfedgeDS\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>\non <I>Halfedge_data_structure</I>.\nThe DCEL is a low-level container class that stores the objects.\nThe topological map layer adds high-level functions and protection of\ncombinatorial validity. Iterators, handles and circulators are also\nintroduced in this layer (pointers are no longer visible in this layer).\n<P>\n\nIn the following\nspecifications, we implement the subdivision by a DCEL.\n<P>\n\n<h3>Functionality</h3>\n<P>\n\nThe class <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;</I> supplies the ability to maintain\na topological map. The user can insert edges in various ways and then split,\nmerge or remove them as well as move holes from one face to another.\nThe vertices, edges and faces can be traversed in a \nlinear way or any other fashion mentioned above.\nFor a full reference of the class (i.e its associated types,\nits operations, etc.) read the <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A> Reference Pages</I>.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>17.3&nbsp;&nbsp;&nbsp;Example Programs</h2>\n\n<A NAME=\"TPM_sec:example\"></A>\nWe conclude this chapter with two example programs. The first example\ndemonstrates a simple construction of a <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I>. The \nsecond example demonstrates the ease with which additional information can\nbe added to the <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I>.\n<P>\n\n<h3>17.3.1&nbsp;&nbsp;&nbsp;Simple Topological Map</h3>\n\nThe example shows a simple construction of a <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I>.\nIt uses the base classes for vertex, halfedge and face and demonstrates\nthe use of the three insertion functions.\n<P>\n\nThe function <I>is_valid()</I> checks the validity of the topological map.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>/example1.C\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;iostream&gt;\n\n#include &lt;CGAL/Topological_map_bases.h&gt;\n#include &lt;CGAL/Pm_default_dcel.h&gt;\n#include &lt;CGAL/<A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>.h&gt;\n\n\ntypedef <A HREF=\"../Planar_map_ref/Class_Pm_dcel.html#Cross_link_anchor_798\">CGAL::Pm_dcel</A>&lt;<A HREF=\"../Topological_map_ref/Class_Tpm_vertex_base.html#Cross_link_anchor_780\">CGAL::Tpm_vertex_base</A>,\n                      <A HREF=\"../Topological_map_ref/Class_Tpm_halfedge_base.html#Cross_link_anchor_782\">CGAL::Tpm_halfedge_base</A>,\n                      <A HREF=\"../Topological_map_ref/Class_Tpm_face_base.html#Cross_link_anchor_784\">CGAL::Tpm_face_base</A>&gt; Dcel;  \n\ntypedef <A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_768\">CGAL::Topological_map</A>&lt;Dcel&gt; Tpm;\n\ntypedef Tpm::Halfedge_handle Halfedge_handle;\ntypedef Tpm::Vertex_handle   Vertex_handle;\ntypedef Tpm::Face_handle     Face_handle;\n\nint main()\n{\n\n  Tpm t;\n\n  Face_handle uf = t.unbounded_face();\n\n  std::cout &lt;&lt; &quot;Inserting edge e1 in unbounded face interior ... &quot; ;\n  Halfedge_handle e1 = t.insert_in_face_interior(uf);\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt; &quot;map is valid!&quot; &lt;&lt; std::endl;\n\n  std::cout &lt;&lt; &quot;Inserting edge e2 from target vertex of e1 ... &quot; ;\n  Halfedge_handle e2 = t.insert_from_vertex(e1);\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt;  &quot;map is valid!&quot; &lt;&lt; std::endl;\n\n  std::cout &lt;&lt; &quot;Inserting edge e3 between target vertices of e2 and twin of &quot;\n            &lt;&lt; &quot;e1 ... &quot;;\n\n  t.insert_at_vertices(e2,e1-&gt;twin());\n\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt; &quot;map is valid!&quot; &lt;&lt; std::endl;\n\n  return 0;\n}\n</pre>\n<P>\n\nThe output of the program is:\n<P>\n\n<pre class=\"Verbatim\">\ninserting edge e1 in face interior ...map is valid.\ninserting edge e2 from target vertex of e1 ...map is valid.\ninserting edge e3 between target vertices of e2 and e1-&gt;twin() ...map is valid.\n\n</pre>\n<P>\n\n<h3>17.3.2&nbsp;&nbsp;&nbsp;Topological Map with Additional Information</h3>\n\nThe example shows a construction of a <I><A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A></I>\nwith additional information in the faces. It uses inheritance from the face \nbase class to add the information.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>/example2.C\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;iostream&gt;\n\n#include &lt;CGAL/Topological_map_bases.h&gt;\n#include &lt;CGAL/Pm_default_dcel.h&gt;\n#include &lt;CGAL/<A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>.h&gt;\n\nclass Face_with_info : public <A HREF=\"../Topological_map_ref/Class_Tpm_face_base.html#Cross_link_anchor_784\">CGAL::Tpm_face_base</A> {\n  int inf;\npublic:\n  Face_with_info() : <A HREF=\"../Topological_map_ref/Class_Tpm_face_base.html#Cross_link_anchor_784\">CGAL::Tpm_face_base</A>(), inf(0) {}\n\n  int info() { return inf; }\n  void set_info(int i) { inf = i; }\n};\n\ntypedef <A HREF=\"../Planar_map_ref/Class_Pm_dcel.html#Cross_link_anchor_798\">CGAL::Pm_dcel</A>&lt;<A HREF=\"../Topological_map_ref/Class_Tpm_vertex_base.html#Cross_link_anchor_780\">CGAL::Tpm_vertex_base</A>,\n                      <A HREF=\"../Topological_map_ref/Class_Tpm_halfedge_base.html#Cross_link_anchor_782\">CGAL::Tpm_halfedge_base</A>,\n                      Face_with_info &gt; Dcel;  \n\ntypedef <A HREF=\"../Topological_map_ref/Class_Topological_map.html#Cross_link_anchor_768\">CGAL::Topological_map</A>&lt;Dcel&gt; Tpm;\n\ntypedef Tpm::Halfedge_handle Halfedge_handle;\ntypedef Tpm::Vertex_handle   Vertex_handle;\ntypedef Tpm::Face_handle     Face_handle;\n\nint main()\n{\n  \n  Tpm t;\n\n  Face_handle uf = t.unbounded_face();\n\n  Halfedge_handle e1 = t.insert_in_face_interior(uf);\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt; &quot;Edge e1 inserted in unbounded face interior&quot; &lt;&lt; std::endl;\n\n  Halfedge_handle e2 = t.insert_from_vertex(e1);\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt; &quot;Edge e2 inserted from target vertex of e1&quot; &lt;&lt; std::endl;\n\n  Halfedge_handle e3 = t.insert_at_vertices(e2, e1-&gt;twin());\n  CGAL_assertion(t.is_valid());\n  std::cout &lt;&lt; &quot;Edge e3 inserted between target vertices of e2 and &quot;\n            &lt;&lt; &quot;twin of e1&quot; &lt;&lt; std::endl;\n  \n  std::cout &lt;&lt; std::endl &lt;&lt;&quot;Setting info of the new face to 10&quot; &lt;&lt; std::endl;\n  Face_handle nf = e3-&gt;face();\n  nf-&gt;set_info(10);\n\n  std::cout &lt;&lt; &quot;Unbounded face info = &quot; &lt;&lt; uf-&gt;info() &lt;&lt; std::endl;\n  std::cout &lt;&lt; &quot;New face info = &quot; &lt;&lt; nf-&gt;info() &lt;&lt; std::endl;\n\n  return 0;\n}\n</pre>\n<P>\n\nThe output of the program is:\n<P>\n\n<pre class=\"Verbatim\">\ninserting e1 in face interior...\ninserting e2 from vertex...\ninserting e3 between vertices of e2 and e1-&gt;twin()...\n\nsetting info of the new face to 10...\n\nunbounded face info = 0\nnew face info = 10\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Topological_map_ref/Chapter_intro.html\">Topological Maps</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_17!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38355.0}