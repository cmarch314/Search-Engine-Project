{"text": "Homework 5 due Friday Wk 6 required problemstopic1CLR Exercise 4 2 5 on page 82 V Pan has discovered a way of multiplying 68 68 matrices using 132 464 multiplications a way of multiplying 7 7 matrices using 143 64 multiplications and a way of multiplying 72 72 matrices using 155 424 multiplications Which method yields the best asymptotic running time when used in a divide and conquer matrix multiplication algorithm How does it compare to Strassen s algorithm Strassen2CLR Problem 3 1 b on page 92 Give two divide and conquer algorithms for multiplying two polynomials of degree bound n in nlg 3 time The first algorithm should divide the input polynomial coefficients into a high half and a low half and the second algorithm should divide them according to whether their index is odd or even D C multiplication suggested problems topic3Baase Exercise 1 6 on page 476product of matrix chain4 Consider the following extension of the Towers of Hanoi problem in which there are four pegs A B C and D and n squares of varying sizes Initially the squares are stacked on peg A in order of decreasing size the largest square on the bottom The problem is to move the squares from peg A to peg B one at a time in such a way that no square is ever placed on a smaller square Pegs C and D may be used for temporary storage of squares Write an efficient recursive algorithm to solve this problem What is the execution time of your algorithm in terms of the number of times a square is moved recursion Dan Hirschberg Computer Science Department University of California Irvine CA 92697 3435 dan at ics uci edu Last modified Nov 1 2 14", "_id": "http://www.ics.uci.edu/~dan/class/161/hw5.html", "title": " compsci 161 homework #5 ", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n      \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<HTML><HEAD>\n<TITLE> CompSci 161 Homework #5 </TITLE>\n</HEAD><BODY>\n\n<!-- <H2> Homework #5 -- due Wednesday Wk 6 </H2> -->\n<H2 align=center> Homework #5 -- due Friday Wk 6 </H2>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=red>required problems</font></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>1</td>\n    <td>CLR Exercise 4.2-5 on page 82\n      <BR>V. Pan has discovered\n        a way of multiplying 68&nbsp;&times;&nbsp;68 matrices using 132,464 multiplications,\n        a way of multiplying 70&nbsp;&times;&nbsp;70 matrices using 143,640 multiplications, and\n        a way of multiplying 72&nbsp;&times;&nbsp;72 matrices using 155,424 multiplications.\n        Which method yields the best asymptotic running time when used in a\n        divide-and-conquer matrix-multiplication algorithm?\n        How does it compare to Strassen's algorithm?\n      </td>\n    <td>Strassen</td>\n<tr><td align=center>2</td>\n    <td>CLR Problem 30-1(b) on page 920\n      <BR>Give two divide-and-conquer algorithms for multiplying two polynomials\n        of degree-bound <I>n</I> in &theta;(<I>n</I><sup>lg&nbsp;3</sup>) time.\n        The first algorithm should divide the input polynomial coefficients into\n        a high half and a low half, and the second algorithm should divide them\n        according to whether their index is odd or even.\n      </td>\n    <td>D+C multiplication</td>\n</table>\n\n<P>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=\"#009900\">suggested problems</font>\n<!--              -- not to be turned in  --></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>3</td>\n    <td>Baase Exercise 10.6 on page 476</td>\n    <td>product of matrix chain</td>\n<tr><td align=center>4<font color=blue>*</font></td>\n    <td>\nConsider the following extension of the Towers of Hanoi problem,\nin which there are four pegs <I>A</I>, <I>B</I>, <I>C</I>, and <I>D</I>,\nand <I>n</I> squares of varying sizes.&nbsp;\nInitially the squares are stacked on peg <I>A</I> in order of decreasing\nsize, the largest square on the bottom.&nbsp;\nThe problem is to move the squares from peg <I>A</I> to peg <I>B</I>\none at a time in such a way that no square is ever placed\non a smaller square.&nbsp;\nPegs <I>C</I> and <I>D</I> may be used for temporary storage of squares.\nWrite an efficient recursive algorithm to solve this problem.&nbsp;\nWhat is the execution time of your algorithm in terms of\nthe number of times a square is moved?\n    </td>\n    <td>recursion</td>\n</table>\n\n<HR>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\n<ADDRESS>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435\n</ADDRESS>\n<tt>dan at ics.uci.edu</tt><br>\n\nLast modified: Nov 10, 2014\n</BODY></HTML>\n", "id": 2055.0}