{"text": "OEChem C Theory Manual Version 1 3 1 Previous 3 5 Compressed Molecule Input Up 3 Reading and Writing Next 3 7 Flavored Reading and 3 6 Format control from the command line Using the methods outlined above it is possible to allow the stream format to be controlled from the command line OEChem s oemolstreams control the format by interpreting the input and output file names The following is a simple example of using command line arguments to allow OEChem programs to support many file formats at run time include oechem h include iostream using namespace OEChem using namespace OESystem using namespace std int main int argc char argv if argc 3 return 1 oemolistream ims argv 1 oemolostream oms argv 2 if ims cerr Error Unable to read argv 1 endl return 1 if oms cerr Error Unable to create argv 2 endl return 1 OEMol mol while OEReadMolecule ims mol OEWriteMolecule oms mol return Download as text The example above allows a user to specify the input and output files and formats from the command line For instance if the above listing is a program called convert prompt convert file1 sdf file1 smi will convert the file1 sdf from MDL s SD format to Daylight s SMILES format A first extension of this idea allows access to cin and cout via the filename For instance prompt convert file2 mol2 This command will read file2 mol2 in MOL2 format and write the molecules to cout in SMILES the default format Thus if you have another program GetFromDatabase which gets molecules from a database and writes them in SMILES format you can chain it with any OEChem program Using your operating systems redirection commands e g Unix pipe or redirect you can move molecules directly from GetFromDatabase to convert without a temporary file prompt GetFromDatabase convert file3 sdf This convert command will take the SMILES format output from GetFromDatabase and generate an SD format file However to make this concept of using cin and cout for piping data really useful one needs to be able to control the format of cin and cout similarly to the way it would be controlled for temporary files To facilitate this oemolstreams interpret filenames which are ONLY format extensions to indicate format control for cin and cout The following example shows use of file extensions as filenames include oechem h include iostream using namespace OEChem using namespace OESystem using namespace std int main OEMol mol oemolistream ims sdf oemolostream oms mol2 if ims if oms while OEReadMolecule ims mol OEWriteMolecule oms mol else cerr Error Unable to write OEBinary to cout endl else cerr Error Unable to read SD format from cin endl return Download as text In the example above the input oemolstream is cin and the format is set to SDF The output oemolstream is cout and the format is MOL2 This is exactly equivalent to listing 4 4 However this method is extensible to format control of cin and cout from the command line Note this prevents you from naming files mol2 sdf etc Now using our program convert from listing 4 7 above prompt convert smi mol2 This command opens cin with SMILES format and open cout with MOL2 format Now we have complete format control of cin and cout from the command line If we have a program GenerateStructures which only writes MOL2 format and another program GenerateData which only reads SD format we can use them from the command line with any OEChem program which uses command line arguments for file specification prompt GenerateStructures MyOEChemProgram mol2 sd GenerateData This command demonstrates how any OEChem program with command line file specification can be used to pipe formated input and output OEChem C Theory Manual Version 1 3 1 Previous 3 5 Compressed Molecule Input Up 3 Reading and Writing Next 3 7 Flavored Reading and Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node20.html", "title": "3.6 format control from the command line", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>3.6 Format control from the command line</title>\n<META NAME=\"description\" CONTENT=\"3.6 Format control from the command line\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node21.html\">\n<LINK REL=\"previous\" HREF=\"node19.html\">\n<LINK REL=\"up\" HREF=\"node14.html\">\n<LINK REL=\"next\" HREF=\"node21.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node19.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node21.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node19.html\">3.5 Compressed Molecule Input</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node14.html\">3. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node21.html\">3.7 Flavored Reading and</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION006600000000000000000\">\n3.6 Format control from the command line</A>\n</H1>\n\n<P>\nUsing the methods outlined above, it is possible to allow the stream format\nto be controlled from the command line.  OEChem's oemolstreams control\nthe format by interpreting the input and output file names.\n\n<P>\nThe following is a simple example of using command-line arguments to allow\nOEChem programs to support many file formats at run-time.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n\nusing namespace OEChem;\nusing namespace OESystem;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n  if(argc != 3)\n    return 1;\n  oemolistream ims(argv[1]);\n  oemolostream oms(argv[2]);\n\n  if (!ims)\n  {\n    cerr &lt;&#60; \"Error: Unable to read \" &lt;&#60; argv[1] &lt;&#60; endl;\n    return 1;\n  }\n  if (!oms)\n  {\n    cerr &lt;&#60; \"Error: Unable to create \" &lt;&#60; argv[2] &lt;&#60; endl;\n    return 1;\n  }\n\n  OEMol mol;\n  while (OEReadMolecule(ims,mol))\n    OEWriteMolecule(oms,mol);\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-7.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe example above allows a user to specify the input and output files and\nformats from the command line.\n\n<P>\nFor instance, if the above listing is a program called <code>convert</code>:\nprompt&gt;convert file1.sdf file1.smi\n\n<P>\nwill convert the <code>file1.sdf</code> from MDL's SD format to Daylight's SMILES\nformat.\n\n<P>\nA first extension of this idea allows access to cin and cout via the \"-\"\nfilename.\n\n<P>\nFor instance:\n<dl><dd><pre class=\"verbatim\">prompt&gt;convert file2.mol2 -\n</pre></dl>\n\n<P>\nThis command will read <code>file2.mol2</code> in MOL2 format and write the\nmolecules to cout in SMILES, the default format.\n\n<P>\nThus if you have another program <code>GetFromDatabase</code> which gets\nmolecules from a database and writes them in SMILES format, you can chain\nit with any OEChem program.  Using your operating systems redirection\ncommands (<I>e.g.</I> - Unix pipe <code>\"|\"</code> or redirect <code>\"&gt;\"</code>) you can\nmove molecules directly from <code>GetFromDatabase</code> to <code>convert</code>\nwithout a temporary file.\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt;GetFromDatabase | convert - file3.sdf\n</pre></dl>\n\n<P>\nThis convert command will take the SMILES format output from\n<code>GetFromDatabase</code> and generate an SD format file.\n\n<P>\nHowever, to make this concept of using cin and cout for piping data really\nuseful, one needs to be able to control the format of cin and cout\nsimilarly to the way it would be controlled for temporary files.  To\nfacilitate this, oemolstreams interpret filenames which are ONLY format\nextensions to indicate format control for cin and cout.\n\n<P>\nThe following example shows use of file extensions as filenames\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace OEChem;\nusing namespace OESystem;\nusing namespace std;\n\nint main()\n{\n  OEMol mol;\n  oemolistream ims(\".sdf\");\n  oemolostream oms(\".mol2\");\n\n  if (ims)\n  {\n    if (oms)\n    {\n      while (OEReadMolecule(ims,mol))\n        OEWriteMolecule(oms,mol);\n    }\n    else cerr &lt;&#60; \"Error: Unable to write OEBinary to cout\" &lt;&#60; endl;\n  }\n  else cerr &lt;&#60; \"Error: Unable to read SD format from cin\" &lt;&#60; endl;\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-8.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nIn the example above, the input oemolstream is cin and the format is set to\nSDF.  The output oemolstream is cout and the format is MOL2.  This is exactly\nequivalent to listing 4.4.  However, this method is extensible to format\ncontrol of cin and cout from the command line.  Note: this prevents you\nfrom naming files <code>\".mol2\", \".sdf\", etc</code>.\n\n<P>\nNow, using our program <code>convert</code> from listing 4.7 above:\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt;convert .smi .mol2\n</pre></dl>\n\n<P>\nThis command opens cin with SMILES format and open cout with MOL2 format.\n\n<P>\nNow we have complete format control of cin and cout from the command line.\nIf we have a program <code>GenerateStructures</code>, which only writes MOL2\nformat and another program <code>GenerateData</code>, which only reads SD format,\nwe can use them from the command line with any OEChem program which uses\ncommand-line arguments for file specification.\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt; GenerateStructures | MyOEChemProgram .mol2 .sd | GenerateData\n</pre></dl>\n\n<P>\nThis command demonstrates how any OEChem program with command-line file\nspecification can be used to pipe formated input and output.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node19.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node21.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node19.html\">3.5 Compressed Molecule Input</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node14.html\">3. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node21.html\">3.7 Flavored Reading and</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38602.0}