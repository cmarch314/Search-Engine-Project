{"text": "View Javadoc 1 2 Created on Feb 12 2 5 by Jie Ren 3 4 5 package edu uci isr impromptu repository 6 7 8 9 author Jie Ren a href mailto jie ics uci edu jie ics uci edu a 1 11 12 public class Overall 13 14 Design and Build guidelines for Impromptu 15 1 Overrall 16 Follow established rules unless clear advantages can be anticipated 17 Modular and flexible design 18 Clearly separate out security and visualiuzation features 19 Architectural connector 2 Keep aspect security and usablity in mind 21 Maximize push communictions use Yancees maybe other events 22 Separate file system semantics from WebDAV semantics 23 Maintain limitations on shared file name for simplicity no support for directory 24 Localize HTTP WebDAV access so security will be in one place 25 Clear threading concurrency control 26 Clear lifecycle creation start stop destruction control 27 No unnecessary performance overhead 28 Prefer simple middleware solutions over elaborate ones unless security is a concern 29 2 Components 3 Use Slide 2 2 dev as of 6 15 2 5 as WebDAV container 31 because it interoperates with Windows and Mac out of the box 32 Use Jetty 5 1 2 as of 2 12 2 5 as Web server because it is clear and light 33 Use HttpClient 2 2 as Http client since this is the one used with Slide 34 Use Slide s WebDAV client for WebDAV client 35 Use the same proxy pattern Redirection 3xx only works for GET 36 Use a filter to do the proxy instead of a servlet 37 this should be faster 38 should try redirect first requiring perfect mapping 39 For the security part resource urls i e folders can be used 4 to do access control but dynamic setting them is more challenging 41 For the naming part we can also do folder or other management 42 But letting them share a single namespace and telling them something 43 is already existing should be just fine no need for over complex 44 The proxy specially handles PROPFIND by aggregating responses from everybody 45 For other methods it uses the factory pattern but just relays bits 46 Use JmDNS as the implementation for zeroconf rendezvous 47 Use Batik as graphics because it can be scaled up and down easily 48 Use SWT because it is native looking new and cannot be that hard 49 Use Holongate as the bridge for Batik SWT keep an eye on it 5 Unfortunately Batik does not work with SWT Holongate well so fall back to Swing 51 Pie has a refresh start and pull use events to maintain 52 Check commons launcher 53 Java for URL Jetty for HTTP Slide for WebDAV 54 Use as little jars as possible 55 See whether JDK 5 can be of some use 56 3 Platform issues 57 XP gets major support 2 might lack WebDAV redirector 58 Mac might have a problem with Holongate so keep the Batik part ready for Swing 59 Test redirector webdavfs as main clients not relying on Office DAV 6 PocketPC can be a headache depending on Java availability and jars dependency Maybe just a client server 61 4 Process 62 Use Maven because it generates good looking documents 63 Use debugger no log unless absolute necessary 64 Use installer so the system is always deployable for XP 65 Use automatic test 66 Use a bug tracking system 67 Generate process and product matrics 68 5 Security 69 Root me others 7 Root is to bootstrapt security It is generated during installation 71 and can only be accessed programmatically locally 72 Roles are still just me and others For me the local user should 73 be added No users me just roles me Everybody else is others 74 This is the name based scheme How insecure a name based 75 system is More vulnerable than an address based system 76 Dynamic adding users SlideUserRealm briges Jetty s realm with 77 Slide s Domain xml It is stored and retrived by an attribute 78 Slide s NameaccessToken is also retrieved through an attribute 79 in UserManager During JmDNS peer addition these two attributes 8 are used to add a user to the Jetty authentication realm and 81 add a user to Slide server s users and roles hierarchy 82 Both are proprieatary server side programming The Slide 83 part can also be done from the client side see UserManager 84 The client side programming uses WebDAV mkcol proppatch to 85 trigger Slide propreiatary processing 86 Files level 87 LevelHandler is used to set Jetty security constraints that 88 reflect authorizations This is about HTTP methods on HTTP 89 resources The handler is stored in an attribute and is 9 executed during insecure event processing 91 ACLManager sets ACEs for files The method ACL and the format 92 ACE are all standard so this is the preferred way to set 93 permissions 94 6 Peer vs Repository Pie 95 A peer is a combination of a repository and a pie The combination is done 96 through a couple tighly coupled procedure calls 97 When the repository and the pie run separately the peer is refactored as such 98 Both the repository and the pie have a character name in addition to the 99 real user name For a PeerOwner Pie ProxyFilter the getCharacter 1 returns this information 1 1 Only a repository triggers a creation of a peer since that is the file store 1 2 So even for a Pie who creates a slice for each peer such a slice is only 1 3 created when a repository comes on line 1 4 For Yancees since it needs to deliver messages to everybody and repositories 1 5 and pies listen to each other so it maintains a different set of communication 1 6 end points PeerManager tells Yancees of each such peer even though it does not 1 7 always create such peer it only creates a peer in its map for a repository 1 8 The code has some random timing issues with shutdown and cannot support persistence 1 9 In summary the refactoring is a naming issue that keep the original repository 11 concept while let Yancees communicate with many participants 111 112 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/repository/Overall.html", "title": "overall xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>Overall xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../../apidocs/edu/uci/isr/impromptu/repository/Overall.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Feb 12, 2005 by Jie Ren</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> *</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> */</em>\n<a name=\"5\" href=\"#5\">5</a>   <strong>package</strong> <a href=\"../../../../../edu/uci/isr/impromptu/repository/package-summary.html\">edu.uci.isr.impromptu.repository</a>;\n<a name=\"6\" href=\"#6\">6</a>   \n<a name=\"7\" href=\"#7\">7</a>   <em>/**<em>*</em></em>\n<a name=\"8\" href=\"#8\">8</a>   <em> * </em>\n<a name=\"9\" href=\"#9\">9</a>   <em> * @author Jie Ren &lt;a href=\"<a href=\"mailto:jie@ics.uci.edu\" target=\"alexandria_uri\">mailto:jie@ics.uci.edu</a>\">jie@ics.uci.edu&lt;/a></em>\n<a name=\"10\" href=\"#10\">10</a>  <em> *</em>\n<a name=\"11\" href=\"#11\">11</a>  <em> */</em>\n<a name=\"12\" href=\"#12\">12</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../../edu/uci/isr/impromptu/repository/Overall.html\">Overall</a> {\n<a name=\"13\" href=\"#13\">13</a>      <em class=\"comment\">/*</em>\n<a name=\"14\" href=\"#14\">14</a>  <em class=\"comment\">     * Design and Build guidelines for Impromptu</em>\n<a name=\"15\" href=\"#15\">15</a>  <em class=\"comment\">     * \t\t1) Overrall</em>\n<a name=\"16\" href=\"#16\">16</a>  <em class=\"comment\">     *      Follow established rules, unless clear advantages can be anticipated</em>\n<a name=\"17\" href=\"#17\">17</a>  <em class=\"comment\">     * \t\tModular and flexible design</em>\n<a name=\"18\" href=\"#18\">18</a>  <em class=\"comment\">     * \t\tClearly separate out security and visualiuzation features </em>\n<a name=\"19\" href=\"#19\">19</a>  <em class=\"comment\">     * \t\tArchitectural connector</em>\n<a name=\"20\" href=\"#20\">20</a>  <em class=\"comment\">     * \t\tKeep aspect (security and usablity) in mind</em>\n<a name=\"21\" href=\"#21\">21</a>  <em class=\"comment\">     * \t\tMaximize push communictions, use Yancees, maybe other events</em>\n<a name=\"22\" href=\"#22\">22</a>  <em class=\"comment\">     * \t\tSeparate file system semantics from WebDAV semantics</em>\n<a name=\"23\" href=\"#23\">23</a>  <em class=\"comment\">     * \t\tMaintain limitations on shared file name for simplicity, no support for directory.</em>\n<a name=\"24\" href=\"#24\">24</a>  <em class=\"comment\">     * \t\tLocalize HTTP/WebDAV access (so security will be in one place)</em>\n<a name=\"25\" href=\"#25\">25</a>  <em class=\"comment\">     * \t\tClear threading/concurrency control</em>\n<a name=\"26\" href=\"#26\">26</a>  <em class=\"comment\">     * \t\tClear lifecycle (creation/start/stop/destruction) control</em>\n<a name=\"27\" href=\"#27\">27</a>  <em class=\"comment\">     * \t\tNo unnecessary performance overhead</em>\n<a name=\"28\" href=\"#28\">28</a>  <em class=\"comment\">     * \t\tPrefer simple middleware solutions over elaborate ones, unless security is a concern</em>\n<a name=\"29\" href=\"#29\">29</a>  <em class=\"comment\">     * \t\t2) Components</em>\n<a name=\"30\" href=\"#30\">30</a>  <em class=\"comment\">     *      Use Slide (2.2-dev as of 06/15/2005) as WebDAV container, </em>\n<a name=\"31\" href=\"#31\">31</a>  <em class=\"comment\">     * \t\t\tbecause it interoperates with Windows and Mac out of the box </em>\n<a name=\"32\" href=\"#32\">32</a>  <em class=\"comment\">     * \t\tUse Jetty (5.1.2 as of 02/12/2005) as Web server, because it is clear and light</em>\n<a name=\"33\" href=\"#33\">33</a>  <em class=\"comment\">     * \t\tUse HttpClient (2.0.2) as Http client since this is the one used with Slide</em>\n<a name=\"34\" href=\"#34\">34</a>  <em class=\"comment\">     * \t\tUse Slide's WebDAV client for WebDAV client</em>\n<a name=\"35\" href=\"#35\">35</a>  <em class=\"comment\">     * \t\tUse the same proxy pattern. Redirection (3xx) only works for GET.</em>\n<a name=\"36\" href=\"#36\">36</a>  <em class=\"comment\">     * \t\tUse a filter to do the proxy instead of a servlet</em>\n<a name=\"37\" href=\"#37\">37</a>  <em class=\"comment\">     * \t\t\tthis should be faster</em>\n<a name=\"38\" href=\"#38\">38</a>  <em class=\"comment\">     * \t\t\tshould try redirect first (requiring perfect mapping)</em>\n<a name=\"39\" href=\"#39\">39</a>  <em class=\"comment\">     * \t\t\tFor the security part, resource urls (i.e., folders) can be used</em>\n<a name=\"40\" href=\"#40\">40</a>  <em class=\"comment\">     * \t\t\t\tto do access control, but dynamic setting them is more challenging</em>\n<a name=\"41\" href=\"#41\">41</a>  <em class=\"comment\">     * \t\t\tFor the naming part, we can also do folder or other management</em>\n<a name=\"42\" href=\"#42\">42</a>  <em class=\"comment\">     * \t\t\t\tBut letting them share a single namespace and telling them something</em>\n<a name=\"43\" href=\"#43\">43</a>  <em class=\"comment\">     * \t\t\t\tis already existing should be just fine: no need for over complex</em>\n<a name=\"44\" href=\"#44\">44</a>  <em class=\"comment\">     * \t\tThe proxy specially handles PROPFIND, by aggregating responses from everybody</em>\n<a name=\"45\" href=\"#45\">45</a>  <em class=\"comment\">     * \t\t\tFor other methods, it uses the factory pattern, but just relays bits     </em>\n<a name=\"46\" href=\"#46\">46</a>  <em class=\"comment\">     * \t\tUse JmDNS as the implementation for zeroconf/rendezvous</em>\n<a name=\"47\" href=\"#47\">47</a>  <em class=\"comment\">     * \t\tUse Batik as graphics, because it can be scaled up and down easily</em>\n<a name=\"48\" href=\"#48\">48</a>  <em class=\"comment\">     * \t\tUse SWT, because it is native looking, new, and cannot be that hard</em>\n<a name=\"49\" href=\"#49\">49</a>  <em class=\"comment\">     * \t\tUse Holongate as the bridge for Batik/SWT, keep an eye on it</em>\n<a name=\"50\" href=\"#50\">50</a>  <em class=\"comment\">     * \t\tUnfortunately, Batik does not work with SWT/Holongate well, so fall back to Swing </em>\n<a name=\"51\" href=\"#51\">51</a>  <em class=\"comment\">     * \t\tPie: has a refresh: start and pull; use events to maintain</em>\n<a name=\"52\" href=\"#52\">52</a>  <em class=\"comment\">     * \t\tCheck commons launcher</em>\n<a name=\"53\" href=\"#53\">53</a>  <em class=\"comment\">     * \t\tJava for URL, Jetty for HTTP, Slide for WebDAV</em>\n<a name=\"54\" href=\"#54\">54</a>  <em class=\"comment\">     * \t\tUse as little jars as possible</em>\n<a name=\"55\" href=\"#55\">55</a>  <em class=\"comment\">     * \t\tSee whether JDK 5.0 can be of some use</em>\n<a name=\"56\" href=\"#56\">56</a>  <em class=\"comment\">     * \t\t3) Platform issues</em>\n<a name=\"57\" href=\"#57\">57</a>  <em class=\"comment\">     * \t\tXP gets major support, 2000 might lack WebDAV redirector</em>\n<a name=\"58\" href=\"#58\">58</a>  <em class=\"comment\">     * \t\tMac might have a problem with Holongate, so keep the Batik part ready for Swing</em>\n<a name=\"59\" href=\"#59\">59</a>  <em class=\"comment\">     * \t\tTest redirector/webdavfs as main clients, not relying on Office DAV.</em>\n<a name=\"60\" href=\"#60\">60</a>  <em class=\"comment\">     * \t\tPocketPC can be a headache, depending on Java availability and jars dependency. Maybe just a client/server</em>\n<a name=\"61\" href=\"#61\">61</a>  <em class=\"comment\">     *\t\t4) Process \t\t\t  </em>\n<a name=\"62\" href=\"#62\">62</a>  <em class=\"comment\">     * \t\tUse Maven, because it generates good looking documents</em>\n<a name=\"63\" href=\"#63\">63</a>  <em class=\"comment\">     * \t\tUse debugger, no log unless absolute necessary</em>\n<a name=\"64\" href=\"#64\">64</a>  <em class=\"comment\">     * \t\tUse installer so the system is always deployable (for XP)</em>\n<a name=\"65\" href=\"#65\">65</a>  <em class=\"comment\">     *\t\tUse automatic test</em>\n<a name=\"66\" href=\"#66\">66</a>  <em class=\"comment\">     *\t\tUse a bug tracking system</em>\n<a name=\"67\" href=\"#67\">67</a>  <em class=\"comment\">     *\t\tGenerate process and product matrics</em>\n<a name=\"68\" href=\"#68\">68</a>  <em class=\"comment\">     *\t\t5) Security</em>\n<a name=\"69\" href=\"#69\">69</a>  <em class=\"comment\">     *\t\tRoot, me, others:</em>\n<a name=\"70\" href=\"#70\">70</a>  <em class=\"comment\">     *\t\t\tRoot is to bootstrapt security. It is generated during installation,</em>\n<a name=\"71\" href=\"#71\">71</a>  <em class=\"comment\">     *\t\t\t\tand can only be accessed programmatically locally.</em>\n<a name=\"72\" href=\"#72\">72</a>  <em class=\"comment\">     *\t\t\tRoles are still just me and others. For me, the local user should </em>\n<a name=\"73\" href=\"#73\">73</a>  <em class=\"comment\">     *\t\t\t\tbe added. No /users/me, just /roles/me. Everybody else is others. </em>\n<a name=\"74\" href=\"#74\">74</a>  <em class=\"comment\">     *\t\t\t\t(This is the name-based scheme. How insecure a name-based </em>\n<a name=\"75\" href=\"#75\">75</a>  <em class=\"comment\">     *\t\t\t\tsystem is? More vulnerable than an address-based system?</em>\n<a name=\"76\" href=\"#76\">76</a>  <em class=\"comment\">     *\t\t\tDynamic adding users: SlideUserRealm briges Jetty's realm with </em>\n<a name=\"77\" href=\"#77\">77</a>  <em class=\"comment\">     *\t\t\t\tSlide's Domain.xml. It is stored and retrived by an attribute.</em>\n<a name=\"78\" href=\"#78\">78</a>  <em class=\"comment\">     *\t\t\t\tSlide's NameaccessToken is also retrieved through an attribute</em>\n<a name=\"79\" href=\"#79\">79</a>  <em class=\"comment\">     *\t\t\t\tin UserManager. During JmDNS peer addition, these two attributes </em>\n<a name=\"80\" href=\"#80\">80</a>  <em class=\"comment\">     *\t\t\t\tare used to add a user to the Jetty authentication realm and </em>\n<a name=\"81\" href=\"#81\">81</a>  <em class=\"comment\">     *\t\t\t\tadd a user to Slide server's /users and /roles hierarchy. </em>\n<a name=\"82\" href=\"#82\">82</a>  <em class=\"comment\">     *\t\t\t\tBoth are proprieatary server side programming. The Slide </em>\n<a name=\"83\" href=\"#83\">83</a>  <em class=\"comment\">     *\t\t\t\tpart can also be done from the client side, see UserManager.</em>\n<a name=\"84\" href=\"#84\">84</a>  <em class=\"comment\">     *\t\t\t\tThe client side programming uses WebDAV mkcol/proppatch to</em>\n<a name=\"85\" href=\"#85\">85</a>  <em class=\"comment\">     *\t\t\t\ttrigger Slide propreiatary processing.   </em>\n<a name=\"86\" href=\"#86\">86</a>  <em class=\"comment\">     *\t\tFiles level</em>\n<a name=\"87\" href=\"#87\">87</a>  <em class=\"comment\">     *\t\t\tLevelHandler is used to set Jetty security constraints that </em>\n<a name=\"88\" href=\"#88\">88</a>  <em class=\"comment\">     *\t\t\t\treflect authorizations. This is about HTTP methods on HTTP</em>\n<a name=\"89\" href=\"#89\">89</a>  <em class=\"comment\">     *\t\t\t\tresources. The handler is stored in an attribute, and is </em>\n<a name=\"90\" href=\"#90\">90</a>  <em class=\"comment\">     *\t\t\t\texecuted during (insecure) event processing.</em>\n<a name=\"91\" href=\"#91\">91</a>  <em class=\"comment\">     *\t\t\tACLManager sets ACEs for files. The method (ACL) and the format</em>\n<a name=\"92\" href=\"#92\">92</a>  <em class=\"comment\">     *\t\t\t\t(ACE) are all standard, so this is the preferred way to set</em>\n<a name=\"93\" href=\"#93\">93</a>  <em class=\"comment\">     *\t\t\t\tpermissions.</em>\n<a name=\"94\" href=\"#94\">94</a>  <em class=\"comment\">     *\t\t6) Peer vs Repository/Pie</em>\n<a name=\"95\" href=\"#95\">95</a>  <em class=\"comment\">     *\t\tA peer is a combination of a repository and a pie. The combination is done</em>\n<a name=\"96\" href=\"#96\">96</a>  <em class=\"comment\">     *\t\t\tthrough a couple tighly-coupled procedure calls.</em>\n<a name=\"97\" href=\"#97\">97</a>  <em class=\"comment\">     *\t\tWhen the repository and the pie run separately, the peer is refactored as such</em>\n<a name=\"98\" href=\"#98\">98</a>  <em class=\"comment\">     *\t\t\tBoth the repository and the pie have a \"character name\", in addition to the</em>\n<a name=\"99\" href=\"#99\">99</a>  <em class=\"comment\">     *\t\t\t\treal user name. For a PeerOwner (Pie/ProxyFilter), the getCharacter </em>\n<a name=\"100\" href=\"#100\">100</a> <em class=\"comment\">     *\t\t\t\treturns this information. </em>\n<a name=\"101\" href=\"#101\">101</a> <em class=\"comment\">     *\t\t\tOnly a repository triggers a creation of a \"peer\", since that is the file store.</em>\n<a name=\"102\" href=\"#102\">102</a> <em class=\"comment\">     *\t\t\t\tSo even for a Pie, who creates a slice for each peer, such a slice is only</em>\n<a name=\"103\" href=\"#103\">103</a> <em class=\"comment\">     *\t\t\t\tcreated when a repository comes on-line.</em>\n<a name=\"104\" href=\"#104\">104</a> <em class=\"comment\">     *\t\t\tFor Yancees, since it needs to deliver messages to everybody, and repositories</em>\n<a name=\"105\" href=\"#105\">105</a> <em class=\"comment\">     *\t\t\t\tand pies listen to each other, so it maintains a different set of communication</em>\n<a name=\"106\" href=\"#106\">106</a> <em class=\"comment\">     *\t\t\t\tend points. PeerManager tells Yancees of each such peer, even though it does not</em>\n<a name=\"107\" href=\"#107\">107</a> <em class=\"comment\">     *\t\t\t\talways create such peer (it only creates a \"peer\" in its map for a repository)</em>\n<a name=\"108\" href=\"#108\">108</a> <em class=\"comment\">     *\t\t\tThe code has some random timing issues with shutdown, and cannot support persistence.</em>\n<a name=\"109\" href=\"#109\">109</a> <em class=\"comment\">     *\t\t\tIn summary, the refactoring is a naming issue that keep the original repository </em>\n<a name=\"110\" href=\"#110\">110</a> <em class=\"comment\">     *\t\t\t\tconcept while let Yancees communicate with many participants.      </em>\n<a name=\"111\" href=\"#111\">111</a> <em class=\"comment\">     */</em>\n<a name=\"112\" href=\"#112\">112</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34218.0}