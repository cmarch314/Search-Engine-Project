{"text": "Project 4 Snake game Overview In this project you will implement a simple snake game In our version of the game the snake has a starting length of five and lives in a forty by forty grid eating red and yellow apples When the snake eats its head intersects a red apple its length is increased by five and when the snake eats a yellow apple its length is decreased by five the minimum length is five If the snakes tries to eat itself or a boundary cell left right column or top bottom row the snake dies and the game is over Warning This project uses the same GUI library as Project 1 So if you had performance problems with Project 1 you will have them with this project as well Make sure you make time to come by lab or to use the lab computers on the third floor of the ICS building The GameView object You will interact with the GUI through the GameView object which is similar to the object by the same name in Project 1 This object acts as the interface between your code and the SDL GUI library You should read the code in GameView hpp cpp to understand how it works but you may not modify it If you have any questions about the code please come to lab or office hours Note that although we will only be working with one red apple and one yellow apple at a time the GameView class supports using more than one red apple and more that one yellow apple GameEvents GameEvent is an enum representing the user interaction with the GUI It will be equal to one of six values GameEvent Up The user pressed the up arrow GameEvent Down The user pressed the up downGameEvent Left The user pressed the up left GameEvent Right The user pressed the up right GameEvent Quit The user either pressed Q or clicked the close buttonGameEvent Null An event that is of no interest to us Unlike Project 1 there is no data associated with any of these events The game loop Your program will spend most of its time in a loop commonly called the game loop A high level description of the game loop would be loop get next event use a switch to process current event update game state if necessary render GUI The loop will normally end when it receives a quit event which may be triggered by a key press Q in our program or by closing the window Unlike Project 1 this functionality is already implemented for you in this project Your task Your task for this project is to implement a game loop for the snake game On each update the snake should be moved one cell in its current direction The snake should start in the middle of the board moving upward The exact position is unimportant When a direction event happens the snake should change its current direction to the direction of the event A 18 degree direction change should be ignored When a quit event happens the game loop should end and the program exit If the snake eats a red apple then a new red apple should spawn at a random empty location and the snakes length should increase by a total of five cells spread over the next five updates If the snake eats a yellow apple then a new yellow apple should spawn at a random empty location and the snakes length should decrease by five cells over the next five updates The snake should never have a length less than five If the snake tries to eat itself or a boundary cell then the game is over and the game over message should be displayed For this project you may fully utilize the objects in the STL Starter code The makefile for this project has the same functionality as project 3 When you are satisfied with your project you will use make gather to produce a tar gz file to submit to dropbox on eee There are now two dropboxes on eee make sure you submit your project to the correct dropbox Project 4 starter code project4 tar gz You can download at terminal with the command wget http www ics uci edu mbannist teaching ics45c project4 project4 tar gz Errors When you run your program you will likely get the following error which may be safely ignored libGL error failed to authenticate magic 3 libGL error failed to load driver vboxvideo If you run the program with memcheck you will find some error that are in the SDL library itself You can safely ignore these errors Sample program In the tar gz file I have included the binary for my solution to the project The name of the file is example out and you can run the program by typing example out ", "_id": "http://www.ics.uci.edu/~mbannist/teaching/ics45c/project4/", "title": "none", "html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n  \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/~mbannist/css/default.css\"/>\n  \n\n  <title></title>\n\n  \n</head>\n\n<body>\n  <h1 id=\"project-4-snake-game\">Project 4: Snake game</h1>\n  <hr />\n  \n  <h2 id=\"overview\">Overview</h2>\n  <p>In this project you will implement a simple <a href=\"https://en.wikipedia.org/wiki/Snake_\\(video_game\\)\">snake game</a>. In our version of the game, the snake has a starting length of five and lives in a forty-by-forty grid, eating red and yellow apples. When the snake eats (its head intersects) a red apple its length is increased by five and when the snake eats a yellow apple its length is decreased by five (the minimum length is five). If the snakes tries to eat itself or a boundary cell (left/right column or top/bottom row), the snake dies and the game is over. </p>\n  \n  <h3 id=\"warning\">Warning</h3>\n  <p>This project uses the same GUI library as <a href=\"project1.html\">Project 1</a>. So if you had performance problems with <a href=\"project1.html\">Project 1</a>, you will have them with this project as well. Make sure you make time to come by lab or to use the lab computers on the third floor of the ICS building.</p>\n  \n  <h2 id=\"the-gameview-object\">The GameView object</h2>\n  <p>You will interact with the GUI through the <strong>GameView</strong> object, which is similar to the object by the same name in Project 1. This object acts as the interface between your code and the SDL GUI library. You should read the code in <strong>GameView.{hpp,cpp}</strong> to understand how it works, but you may not modify it. If you have any questions about the code, please come to lab or office hours. Note that, although we will only be working with one red apple and one yellow apple at a time the GameView class supports using more than one red apple and more that one yellow apple. </p>\n  \n  <h2 id=\"gameevents\">GameEvents</h2>\n  <p><strong>GameEvent</strong> is an <strong>enum</strong> representing the user interaction with the GUI. It will be equal to one of six values.</p>\n  \n  <ul>\n    <li><strong>GameEvent::Up</strong>: The user pressed the up arrow </li>\n    <li><strong>GameEvent::Down</strong>: The user pressed the up down</li>\n    <li><strong>GameEvent::Left</strong>: The user pressed the up left </li>\n    <li><strong>GameEvent::Right</strong>: The user pressed the up right </li>\n    <li><strong>GameEvent::Quit</strong>: The user either pressed <strong>Q</strong> or clicked the close button</li>\n    <li><strong>GameEvent::Null</strong>: An event that is of no interest to us</li>\n  </ul>\n  \n  <p>Unlike Project 1, there is no data associated with any of these events.</p>\n  \n  <h2 id=\"the-game-loop\">The game loop</h2>\n  \n  <p>Your program will spend most of its time in a loop commonly called the game loop. A high level description of the game loop would be:</p>\n  \n  <pre><code>loop:\n    get next event\n    use a switch to process current event\n    update game state if necessary\n    render GUI\n  </code></pre>\n  \n  <p>The loop will normally end when it receives a quit event, which may be triggered by a key press (<strong>Q</strong> in our program) or by closing the window. Unlike Project 1, this functionality is already implemented for you in this project.</p>\n  \n  <h2 id=\"your-task\">Your task</h2>\n  <p>Your task for this project is to implement a game loop for the snake game. On each update the snake should be moved one cell in its current direction. The snake should start in the middle of the board moving upward. The exact position is unimportant. When a direction event happens the snake should change its current direction to the direction of the event. A 180-degree direction change should be ignored. When a quit event happens the game loop should end and the program exit.</p>\n  \n  <p>If the snake eats a red apple, then a new red apple should spawn at a random empty location and the snakes length should increase by a total of five cells spread over the next five updates. If the snake eats a yellow apple, then a new yellow apple should spawn at a random empty location and the snakes length should decrease by five cells over the next five updates. The snake should never have a length less than five. If the snake tries to eat itself or a boundary cell, then the game is over and the \u201cgame over\u201d message should be displayed.</p>\n  \n  <p>For this project you may fully utilize the objects in the STL.</p>\n  \n  <h3 id=\"starter-code\">Starter code</h3>\n  <p>The <strong>makefile</strong> for this project has the same functionality as <a href=\"project3.html\">project 3</a>. When you are satisfied with your project you will use <strong>make gather</strong> to produce a <strong>tar.gz</strong> file to submit to dropbox on eee. There are now two dropboxes on eee; make sure you submit your project to the correct dropbox!</p>\n  \n  <p>Project 4 starter code: <a href=\"project4.tar.gz\">project4.tar.gz</a>  </p>\n  \n  <p>You can download at terminal with the command:<br />\n  <strong>wget \u201chttp://www.ics.uci.edu/~mbannist/teaching/ics45c/project4/project4.tar.gz\u201d</strong></p>\n  \n  <h3 id=\"errors\">Errors</h3>\n  <p>When you run your program you will likely get the following \u201cerror\u201d, which may be safely ignored:</p>\n  \n  <pre><code>libGL error: failed to authenticate magic 3\n  libGL error: failed to load driver: vboxvideo\n  </code></pre>\n  \n  <p>If you run the program with memcheck, you will find some error that are in the SDL library itself. You can safely ignore these errors.</p>\n  \n  <h3 id=\"sample-program\">Sample program</h3>\n  <p>In the <strong>tar.gz</strong> file I have included the binary for my solution to the project. The name of the file is <strong>example.out</strong>, and you can run the program by typing <strong>./example.out</strong>.</p>\n \n</body>\n\n</html>\n", "id": 482.0}