{"text": "The Project FAQ Thanks to Dr Mason Chang for providing the following project information More information will be added as the class progresses Parsing the constant pool class file My fread is weird even though I haven t reached the end of file or I get an ferror Make sure you open the file in binary mode Add a b to the open mode Read the first line of the paragraph What are the file operations on C C Google fopen fread fclose ferror feof The print and other memory operations printf scanf memcpy memset sprintf mallocI m getting a crazy big number negative number when reading a byte A byte when casted to an int will sign extend the value So if the byte value read is greater than 127 you need to chop off the bottom 8 bits You can do this by bitwise ANDING the value with xFF What s the function to get the size of a data type sizeofDo you have an example Sure Consider the beginning of a out file Magic CP Entries E1 E2 NameLen1 NameChars E3 E4 NameLen2 FF EE CD AB 1E 2 6 3C 69 6E 69 74 3E 2 7 Denotes a logical separation of data as defined in the out file spec First parse the magic numbers as an integer Then parse the constant pool size as an integer The constant pool size refers to the number of ENTRIES in the constant pool not the actual byte length of the constant pool Then for each entry the constant pool is either NONE an integer 1 or a method 2 So the FIRST entry in the constant pool E1 is the type NONE The SECOND entry of the constant pool E2 is a method 2 Then we parse a method constant pool entry The method constant pool entry starts with an integer that tells you how many bytes a method name is Parse that integer NameLen1 Then we parse 6 the number of bytes which is in NameChars We have finished parsing ONE method constant pool entry Now we parse the THIRD entry E3 of the constant pool which is NONE The fourth entry of the constant pool E4 is a method 2 so we parse another method using the same technique we used in the previous paragraph When will I see a CP INT You need a really big constant integer For example int x 323878237 This should turn into the Java bytecode ldc which then references the constant pool JVM Interpreter How do I know when to call a method Just do a name compare If the method you need to call is the correct method name call it We can assume all method names are unique How do I implement system out println or the print function Whenever you see the method name println or printInt or whatever your print function is call the C method printf Building SSA What are the three steps again 1 Create Basic Blocks 2 Link Basic Blocks with successors predecessors 3 Create Instructions To do steps 1 and 2 DO NOT require you to implement Instructions yet How do I know what pc represents which block You need a MAP that maps program counter locations in the bytecode pc to the basic block This PC location represents the BEGINNING of the block not the RANGE of a block For example if the first basic block represents PC 9 your map should only contain one entry for pc Basic Block What are the instruction types I need Instruction BinaryInstruction ConditionInstruction ConstantInt PhiInstruction CallInstruction UnconditionalBranch ConditionalBranch ReturnInstruction If you do arrays you need a NewArrayInstruction SetArrayElementInstruction and GetArrayElementInstruction If you do methods you need a ParameterInstruction for method parameters How should I represent everything A Method object has a List BasicBlock Each BasicBlock is an object A BasicBlock has a List BasicBlock for it s successors and another list for it s predecessors Each BasicBlock has a List Instruction Each Instruction points to its operands What s in a PhiInstruction A phi should have a List BasicBlock and a List Instruction Phi s really have an operand that represents a pair BasicBlock Instruction that says if control flow comes from a basic block BB1 the phi represents this Instruction I1 A nice trick is to map each element in the List BasicBlock and List Instruction at the same index So if a Phi BB2 ConstantValueInstruction 42 the element of the List BasicBlock can point to BB2 and the element of the List Instruction can point to the ConstantValueInstruction 42 I m getting loop headers that have forward GOTOs Make sure you build your java files with javac from the command line not eclipse What are these state objects The state keeps track of what instruction each local variable points to at this current point in time You will have MULTIPLE state objects You always operate on one that you keep updating However the begin states and end states of each basic block are CLONED states If you have one basic block you have three state objects The current one you modify and the begin end states which are independent states They may POINT to the same instruction but they are different state objects Register Allocator What s the basic block order You need to build your blocks in reverse post order A sketch of the algorithm is located on wikipedia under topological sorting Use the version that uses the depth first search The only kicker is that when you add a node to the list add it to the BEGINNING of the list rather than the end of the list What order do I register allocate in You iterate backwards from the Reverse post order list What are the four steps 1 Get blocks in reverse post order 2 Build live ranges 3 Build interference graph 4 Allocate registers Which registers do we NEVER use again ESP EBPHow are phis treated The OPERANDS of a phi get their live ranges added up to the current phi instruction id The Operands of the phi DO NOT get added into the live set Assembler How do I read the table of doom assemble something The mod r m table is freakishly confusing The whole point of the mod r m table is to build 1 byte 8 bits total It is segmented into three parts The top 2 bits represent the MOD or how to access the register The next 3 bits represent the destination register and is a value of 7 The bottom 3 bits represent the source register and is a value of 7 So the mod r m byte looks like MOD BIT dst reg src register Let s say we wanted to move EBX to EDX The opcode for mov is x8b Since we are using the actual registers rather than referring to the value IN the register the MOD bit is b11 or 3 in decimal EBX is 3 b 11 in the table and is our src register EDX is register 2 b 1 So in total you need to write two bytes x8b The mov opcode xd3 b11 1 11 MOD 11 dst EDX src EBX You can build it by lots of bit shifting Ala 3 6 2 3 3 Shift the number 3 six bits left or with 2 shift three bits left or with 3 b binary x hex What x86 instructions should we use add sub idiv imul mov call push pop return jump cmp jcc Remember idiv and imul put the result in certain registers idiv puts the quotient in EAX and the remainder in EDX imul can sometimes put certain results in certain registers if you want jccs must occur immediatley after a cmp What am I looking for in the intel manual How do I know which opcode to use Look for instructions that use R32 MODRM requests For example add use x3 which has the destination left value saying ADD r32 r m32 CMP should use 3b CMP r32 r m32 the r32 should be the left Do not use CMP r m32 r32 How do I debug this with GDB Lookup info registers display i pc si x commands Info registers gives you the values in registers display i pc single steps x86 and si Checkout examining memory here Or the overall using gdb GDB is painful What happens between a call You need to save all the registers perform the call then restore them You can do this by pushing all the registers onto the stack make the call then pop them off the stack again How do I call the print method Create a C method that calls into printf and takes an integer Get the address of that method move it into EAX and perform a call indirect near xFF 2 The 2 here means the mod rm bit for the destination register is set to 2 So 3 6 2 3 EAX EAX here is where we stored the address of printInt but you can choose any register How do I make debugging easier Between each instruction you generate x86 for you can insert a nop The nop opcode does nothing It will help you deliniate which instructions emitted what x86 code How do I resolve Phis When you reach a jump instruction check which block you are jumping to If the target block has phis get the phi instructions for the target block Insert moves in your current block from the phi operand register to the phi instruction register I m getting a permission denied when I try to execute jit compiled code Make sure you mark the page as executable This is mprotect on OSX Linux and VirtualProtect on Windows Include sys mman h on Unix OSX and Windows h on Windows What do I do for a constant int instruction Constants are known as immediates in assembly So look for mov r32 immi32 xb8 rd The rd means xb8 the destination register So let s say you wanted to move the number 1 into register EBX 11 3 Remember the Registers h file has the registers in the order as the table of doom So you need to do xb8 EBX xb8 3 in one byte Then 32 bit integer for the number 1 byte1 xb8 3 byte2 6 x A What does it mean opcode rd Like push pop instructions The rd stands for the destination register So if you want to push EDX EDX is 1 2 so the opcode is opcode 2 Checkout question 11 for a concrete example How do you deal with this CDECL stuff Here is a really good tutorial on it How do I generate jump offsets Your jcc jmp requires a 4 byte offset This offset is from the location of the jump instruction TO the memory address of the jump target So let s say your jump instruction exists at memory location x1 And you wanted to jump to address x4 You don t fill the 4 byte offset with x4 You have to do x4 x1 x3 Which jump and return instructions should we use Use the jcc jmp ret NEAR instructions not the FAR ones General C C Where do I get containers lists vectors hashmaps in C You can roll your own by making wrappers around the vector class or use the std containers here What s the syntax to cast a void to a function pointer void compiledCode assembler assemble method the location of jit compiled code int fp Declare a function pointer to a method that returns an int and takes no parameters fp int compiledCode cast the void to the function pointer fp Actually execute it Heres more on C and C function pointers I m making a template class but it says the class doesn t exist Template classes must be defined in the header file not cpp file What s the order for C include files cpp Files should always only include other header files h files should NEVER include other header files unless they are standard files iostream etc If you are getting a type not defined you have to forward declare it In the header file just type class SomethingElse and have pointers to those structures Here s more info Another student found this resource more helpful What are some C string methods strncmp strncpy strncat You can convert a C string to a C string by calling the data method on a C string What is a null terminated string or how do C strings work not C std string Check this out Why does it say a type isn t recognized You need to forward declare types When you use the type you must use a POINTER to the type not the type itself For example if I want to have a list of BasicBlock in the Method object in the Method h file you have to have a list of BasicBlock NOT BasicBlock And forward declare BasicBlock Then in the Method cpp file you need to include basicBlock h Uncategorized Javap doesn t exist Install the Java JDK not the JRE How do I see the bytecodes in a javac generated class file Not our out file javap v TestClassWhat language features do we need to support if statements while for only local variables that are integers Arithmetic operators ", "_id": "http://www.ics.uci.edu/~guoqingx/courses/142b/winter13/faq.html", "title": "cs 295--run-time techniques for efficient and reliable program execution", "html": "<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\r\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n<meta http-equiv=Content-Type content=\"text/html; charset=windows-1252\">\r\n<meta name=ProgId content=Word.Document>\r\n<meta name=Generator content=\"Microsoft Word 14\">\r\n<meta name=Originator content=\"Microsoft Word 14\">\r\n<link rel=File-List href=\"faq_files/filelist.xml\">\r\n<title>CS 295--Run-time Techniques for Efficient and Reliable Program Execution</title>\r\n<!--[if gte mso 9]><xml>\r\n <o:DocumentProperties>\r\n  <o:Author>harrygxu</o:Author>\r\n  <o:LastAuthor>harrygxu</o:LastAuthor>\r\n  <o:Revision>28</o:Revision>\r\n  <o:TotalTime>672</o:TotalTime>\r\n  <o:Created>2013-01-03T23:55:00Z</o:Created>\r\n  <o:LastSaved>2013-03-28T20:28:00Z</o:LastSaved>\r\n  <o:Pages>2</o:Pages>\r\n  <o:Words>2029</o:Words>\r\n  <o:Characters>11567</o:Characters>\r\n  <o:Lines>96</o:Lines>\r\n  <o:Paragraphs>27</o:Paragraphs>\r\n  <o:CharactersWithSpaces>13569</o:CharactersWithSpaces>\r\n  <o:Version>14.00</o:Version>\r\n </o:DocumentProperties>\r\n <o:OfficeDocumentSettings>\r\n  <o:AllowPNG/>\r\n </o:OfficeDocumentSettings>\r\n</xml><![endif]-->\r\n<link rel=themeData href=\"faq_files/themedata.thmx\">\r\n<link rel=colorSchemeMapping href=\"faq_files/colorschememapping.xml\">\r\n<!--[if gte mso 9]><xml>\r\n <w:WordDocument>\r\n  <w:Zoom>80</w:Zoom>\r\n  <w:TrackMoves/>\r\n  <w:TrackFormatting/>\r\n  <w:ValidateAgainstSchemas/>\r\n  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n  <w:DoNotPromoteQF/>\r\n  <w:LidThemeOther>EN-US</w:LidThemeOther>\r\n  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>\r\n  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>\r\n  <w:Compatibility>\r\n   <w:BreakWrappedTables/>\r\n   <w:SnapToGridInCell/>\r\n   <w:WrapTextWithPunct/>\r\n   <w:UseAsianBreakRules/>\r\n   <w:DontGrowAutofit/>\r\n   <w:SplitPgBreakAndParaMark/>\r\n   <w:DontVertAlignCellWithSp/>\r\n   <w:DontBreakConstrainedForcedTables/>\r\n   <w:DontVertAlignInTxbx/>\r\n   <w:Word11KerningPairs/>\r\n   <w:CachedColBalance/>\r\n   <w:UseFELayout/>\r\n  </w:Compatibility>\r\n  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n  <m:mathPr>\r\n   <m:mathFont m:val=\"Cambria Math\"/>\r\n   <m:brkBin m:val=\"before\"/>\r\n   <m:brkBinSub m:val=\"&#45;-\"/>\r\n   <m:smallFrac m:val=\"off\"/>\r\n   <m:dispDef/>\r\n   <m:lMargin m:val=\"0\"/>\r\n   <m:rMargin m:val=\"0\"/>\r\n   <m:defJc m:val=\"centerGroup\"/>\r\n   <m:wrapIndent m:val=\"1440\"/>\r\n   <m:intLim m:val=\"subSup\"/>\r\n   <m:naryLim m:val=\"undOvr\"/>\r\n  </m:mathPr></w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n <w:LatentStyles DefLockedState=\"false\" DefUnhideWhenUsed=\"true\"\r\n  DefSemiHidden=\"true\" DefQFormat=\"false\" DefPriority=\"99\"\r\n  LatentStyleCount=\"267\">\r\n  <w:LsdException Locked=\"false\" Priority=\"0\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Normal\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 7\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 8\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 9\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 7\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 8\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 9\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"35\" QFormat=\"true\" Name=\"caption\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"10\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Title\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"1\" Name=\"Default Paragraph Font\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"11\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtitle\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"22\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Strong\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"20\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"59\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Table Grid\"/>\r\n  <w:LsdException Locked=\"false\" UnhideWhenUsed=\"false\" Name=\"Placeholder Text\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"1\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"No Spacing\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" UnhideWhenUsed=\"false\" Name=\"Revision\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"34\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"List Paragraph\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"29\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Quote\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"30\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Quote\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"19\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtle Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"21\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"31\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtle Reference\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"32\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Reference\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"33\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Book Title\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"37\" Name=\"Bibliography\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" QFormat=\"true\" Name=\"TOC Heading\"/>\r\n </w:LatentStyles>\r\n</xml><![endif]-->\r\n<style>\r\n<!--\r\n /* Font Definitions */\r\n @font-face\r\n\t{font-family:SimSun;\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-alt:\\5B8B\\4F53;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:3 680460288 22 0 262145 0;}\r\n@font-face\r\n\t{font-family:\"Cambria Math\";\r\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;\r\n\tmso-font-charset:0;\r\n\tmso-generic-font-family:roman;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-536870145 1107305727 0 0 415 0;}\r\n@font-face\r\n\t{font-family:\"\\@SimSun\";\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:3 680460288 22 0 262145 0;}\r\n /* Style Definitions */\r\n p.MsoNormal, li.MsoNormal, div.MsoNormal\r\n\t{mso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-parent:\"\";\r\n\tmargin:0in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\nh2\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 2 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:2;\r\n\tfont-size:18.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\nh3\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 3 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:3;\r\n\tfont-size:13.5pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\nh4\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 4 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:4;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\na:link, span.MsoHyperlink\r\n\t{mso-style-priority:99;\r\n\tcolor:blue;\r\n\ttext-decoration:underline;\r\n\ttext-underline:single;}\r\na:visited, span.MsoHyperlinkFollowed\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tcolor:purple;\r\n\ttext-decoration:underline;\r\n\ttext-underline:single;}\r\np\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\nspan.Heading2Char\r\n\t{mso-style-name:\"Heading 2 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 2\";\r\n\tmso-ansi-font-size:13.0pt;\r\n\tmso-bidi-font-size:13.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;}\r\nspan.Heading3Char\r\n\t{mso-style-name:\"Heading 3 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 3\";\r\n\tmso-ansi-font-size:12.0pt;\r\n\tmso-bidi-font-size:12.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;}\r\nspan.Heading4Char\r\n\t{mso-style-name:\"Heading 4 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 4\";\r\n\tmso-ansi-font-size:12.0pt;\r\n\tmso-bidi-font-size:12.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;\r\n\tfont-style:italic;}\r\n.MsoChpDefault\r\n\t{mso-style-type:export-only;\r\n\tmso-default-props:yes;\r\n\tfont-size:10.0pt;\r\n\tmso-ansi-font-size:10.0pt;\r\n\tmso-bidi-font-size:10.0pt;\r\n\tmso-fareast-font-family:SimSun;}\r\n@page WordSection1\r\n\t{size:8.5in 11.0in;\r\n\tmargin:1.0in 1.0in 1.0in 1.0in;\r\n\tmso-header-margin:.5in;\r\n\tmso-footer-margin:.5in;\r\n\tmso-paper-source:0;}\r\ndiv.WordSection1\r\n\t{page:WordSection1;}\r\n /* List Definitions */\r\n @list l0\r\n\t{mso-list-id:69012255;\r\n\tmso-list-template-ids:-1422632950;}\r\n@list l0:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1\r\n\t{mso-list-id:753358344;\r\n\tmso-list-template-ids:1968625824;}\r\n@list l1:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2\r\n\t{mso-list-id:834493817;\r\n\tmso-list-type:hybrid;\r\n\tmso-list-template-ids:688655602 959475852 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}\r\n@list l2:level1\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;\r\n\tmso-ansi-font-size:14.0pt;}\r\n@list l2:level2\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2:level3\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l2:level4\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2:level5\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2:level6\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l2:level7\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2:level8\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l2:level9\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l3\r\n\t{mso-list-id:955872462;\r\n\tmso-list-template-ids:-1781382022;}\r\n@list l3:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l3:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4\r\n\t{mso-list-id:1099180005;\r\n\tmso-list-template-ids:-1866566366;}\r\n@list l4:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l4:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5\r\n\t{mso-list-id:1331519623;\r\n\tmso-list-template-ids:-1062941028;}\r\n@list l5:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l5:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6\r\n\t{mso-list-id:1831287282;\r\n\tmso-list-template-ids:-2046888204;}\r\n@list l6:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l6:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7\r\n\t{mso-list-id:2061006366;\r\n\tmso-list-template-ids:1600061266;}\r\n@list l7:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level2\r\n\t{mso-level-tab-stop:1.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level3\r\n\t{mso-level-tab-stop:1.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level4\r\n\t{mso-level-tab-stop:2.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level5\r\n\t{mso-level-tab-stop:2.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level6\r\n\t{mso-level-tab-stop:3.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level7\r\n\t{mso-level-tab-stop:3.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level8\r\n\t{mso-level-tab-stop:4.0in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l7:level9\r\n\t{mso-level-tab-stop:4.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\nol\r\n\t{margin-bottom:0in;}\r\nul\r\n\t{margin-bottom:0in;}\r\n-->\r\n</style>\r\n<!--[if gte mso 10]>\r\n<style>\r\n /* Style Definitions */\r\n table.MsoNormalTable\r\n\t{mso-style-name:\"Table Normal\";\r\n\tmso-tstyle-rowband-size:0;\r\n\tmso-tstyle-colband-size:0;\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-style-parent:\"\";\r\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\r\n\tmso-para-margin:0in;\r\n\tmso-para-margin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:10.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";}\r\n</style>\r\n<![endif]--><!--[if gte mso 9]><xml>\r\n <o:shapedefaults v:ext=\"edit\" spidmax=\"1026\"/>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n <o:shapelayout v:ext=\"edit\">\r\n  <o:idmap v:ext=\"edit\" data=\"1\"/>\r\n </o:shapelayout></xml><![endif]-->\r\n</head>\r\n\r\n<body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>\r\n\r\n<div class=WordSection1>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>The Project\r\nFAQ (Thanks to Dr. Mason Chang for providing the following project information)</span></b><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'>:<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>More\r\ninformation will be added as the class progresses</span></b><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'>.<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Parsing the\r\nconstant pool / .class file:</span></b><span style='font-size:14.0pt;\r\nmso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>My fread is weird even though I haven't reached the end\r\n     of file or I get an ferror!&nbsp;- </span></b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Make sure you open the file in &quot;binary&quot;\r\n     mode.&nbsp;<a\r\n     href=\"http://www.cplusplus.com/reference/clibrary/cstdio/fopen/\">Add a b\r\n     to the open mode</a>. - Read the first line of the paragraph.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are the file operations on C/C++?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;Google fopen,\r\n     fread, fclose, ferror, feof.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>The print and other memory operations?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;printf, scanf,\r\n     memcpy, memset, sprintf, malloc<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>I<b>'m getting a crazy big number / negative number\r\n     when reading a byte!</b> A byte, when casted to an int, will sign extend\r\n     the value. So if the byte value read is greater than 127, you need to chop\r\n     off the bottom 8 bits. You can do this by bitwise ANDING the value with\r\n     0xFF.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What's the function to get the size of a data type</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>? sizeof<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Do you have an example?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Sure!<br>\r\n     Consider the beginning of a .out file:<br>\r\n     <br>\r\n     &nbsp;&nbsp; &nbsp; Magic &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CP Entries\r\n     &nbsp; &nbsp; &nbsp; E1 &nbsp; E2 &nbsp; &nbsp; &nbsp; &nbsp;NameLen1\r\n     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NameChars &nbsp; &nbsp; &nbsp;\r\n     &nbsp; &nbsp;E3 &nbsp; &nbsp;E4 &nbsp; &nbsp; &nbsp;NameLen2<br>\r\n     FF EE CD AB | 1E 00 00 00 | 00 | 02 | 06 00 00 00 |3C 69 6E 69 74 3E | 00\r\n     | 02 | 07 00 00 00<br>\r\n     * | Denotes a logical separation of data as defined in the .out file spec.<br>\r\n     <br>\r\n     First parse the magic numbers as an integer. Then parse the constant pool\r\n     size as an integer. The constant pool size refers to the number of ENTRIES\r\n     in the constant pool, not the actual byte length of the constant pool. Then\r\n     for each entry, the constant pool is either NONE (0), an integer (1), or a\r\n     method (2). So the FIRST entry in the constant pool (E1), is the type\r\n     NONE. The SECOND entry of the constant pool (E2) is a method (2). Then we\r\n     parse a method constant pool entry.<br>\r\n     <br>\r\n     The method constant pool entry starts with an integer that tells you how\r\n     many bytes a method name is. Parse that integer (NameLen1). Then we parse\r\n     (6) * the number of bytes which is in (NameChars). We have finished\r\n     parsing ONE method constant pool entry.<br>\r\n     <br>\r\n     Now we parse the THIRD entry (E3) of the constant pool which is NONE. The\r\n     fourth entry of the constant pool (E4) is a method (2), so we parse\r\n     another method using the same technique we used in the previous paragraph.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l1 level1 lfo3;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>When will I see a CP_INT?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> You need a really big\r\n     constant integer. For example, int x = 323878237; This should turn into\r\n     the Java bytecode ldc, which then references the constant pool.<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>JVM\r\nInterpreter</span></b><b><span style='mso-fareast-font-family:\"Times New Roman\"'>:</span></b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l7 level1 lfo4;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I know when to call a method? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>Just do a name compare.\r\n     If the method you need to call is the correct method name, call it. We can\r\n     assume all method names are unique.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l7 level1 lfo4;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I implement system.out.println or the print\r\n     function?</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;Whenever\r\n     you see the method name println or printInt or whatever your print\r\n     function is, call the C method printf.<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Building SSA</span></b><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'>:</span></b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are the three steps again!? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>1) Create Basic Blocks.\r\n     2) Link Basic Blocks with successors / predecessors. 3) Create\r\n     Instructions. To do steps 1 and 2 DO NOT require you to implement\r\n     Instructions yet.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I know what pc represents which block?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> You need a MAP that\r\n     maps program counter locations in the bytecode (pc) to the basic block.\r\n     This PC location represents the&nbsp;BEGINNING&nbsp;of the block, not the\r\n     RANGE of a block. For example, if the first basic block represents PC 0 -\r\n     9, your map should only contain one entry for pc 0 -&gt; Basic Block 0.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are the instruction types I need?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Instruction,\r\n     BinaryInstruction, ConditionInstruction, ConstantInt, PhiInstruction,\r\n     CallInstruction, UnconditionalBranch, ConditionalBranch,\r\n     ReturnInstruction. If you do arrays, you need a NewArrayInstruction,\r\n     SetArrayElementInstruction, and GetArrayElementInstruction. If you do\r\n     methods, you need a ParameterInstruction for method parameters.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How should I represent everything? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>A <i>Method</i> object\r\n     has a List&lt;BasicBlock*&gt;. Each <i>BasicBlock </i>is an object. A <i>BasicBlock\r\n     </i>has a List&lt;BasicBlock*&gt; for it's successors, and another list\r\n     for it's predecessors. Each <i>BasicBlock </i>has a List&lt;<i>Instruction</i>*&gt;.\r\n     Each <i>Instruction </i>points to its operands.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What's in a PhiInstruction?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;A phi should have\r\n     a List&lt;BasicBlock*&gt; and a List&lt;Instruction*&gt;. Phi's really\r\n     have an operand that represents a pair [BasicBlock*, Instruction*], that\r\n     says if control flow comes from a basic block BB1, the phi represents this\r\n     Instruction I1. A nice trick is to map each element in the\r\n     List&lt;BasicBlock*&gt; and List&lt;Instruction*&gt; at the same index. So\r\n     if a Phi ( [BB2, ConstantValueInstruction(42]), the 0 element of the\r\n     List&lt;BasicBlock*&gt; can point to BB2 and the 0 element of the\r\n     List&lt;Instruction*&gt; can point to the ConstantValueInstruction(42).<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>I'm getting loop headers that have forward GOTOs!</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Make sure you build\r\n     your .java files with javac from the command line, not eclipse.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l3 level1 lfo5;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are these state objects?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> The state keeps track\r\n     of what instruction each local variable points to at this current point in\r\n     time. You will have MULTIPLE state objects. You always operate on one,\r\n     that you keep updating. However, the begin states and end states of each\r\n     basic block are CLONED states. If you have one basic block, you have three\r\n     state objects: The current one you modify, and the begin/end states which\r\n     are independent states. They may POINT to the same instruction, but they\r\n     are different state objects.<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Register\r\nAllocator</span></b><b><span style='mso-fareast-font-family:\"Times New Roman\"'>:</span></b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What's the basic block order? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>You need to build your\r\n     blocks in <a\r\n     href=\"http://en.wikipedia.org/wiki/Depth-first_search#Vertex_orderings\">reverse\r\n     post order</a>. A sketch of the algorithm is located on wikipedia under <a\r\n     href=\"http://en.wikipedia.org/wiki/Topological_sorting\">topological\r\n     sorting</a>. Use the version that uses the depth first search. The only\r\n     kicker is that when you add a node to the list, add it to\r\n     the&nbsp;BEGINNING&nbsp;of the list, rather than the end of the\r\n     list.&nbsp;<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What order do I register allocate in? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>You iterate backwards\r\n     from the Reverse post order list.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are the four steps</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>? 1) Get blocks in\r\n     reverse post order. 2) Build live ranges. 3) Build interference graph. 4)\r\n     Allocate registers.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Which registers do we NEVER use again?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> ESP, EBP<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l5 level1 lfo6;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How are phis treated?</span></b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'> The OPERANDS of a phi, get their live ranges added up\r\n     to the current phi instruction id. The Operands of the phi DO NOT get\r\n     added into the live set.<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Assembler</span></b><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'>:</span></b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I read the table of doom / assemble\r\n     something!&nbsp;- </span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>The\r\n     mod r/m table is freakishly confusing. The whole point of the mod r/m\r\n     table is to build 1 byte, 8 bits total. It is segmented into three parts.\r\n     The top 2 bits represent the &quot;MOD&quot; or how to access the\r\n     register. The next 3 bits represent the destination register and is a\r\n     value of 0 - 7. The bottom 3 bits&nbsp;represent&nbsp;the source register\r\n     and is a value of 0 - 7. So the mod r/m byte looks like:<br>\r\n     <br>\r\n     MOD BIT &nbsp; &nbsp;dst reg &nbsp; &nbsp; &nbsp;src register<br>\r\n     &nbsp;&nbsp; &nbsp;00 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 000 &nbsp;\r\n     &nbsp; &nbsp; &nbsp; 000&nbsp;<br>\r\n     <br>\r\n     Let's say we wanted to move EBX to EDX. The opcode for mov is 0x8b. Since\r\n     we are using the actual registers rather than referring to the value IN\r\n     the register, the MOD bit is 0b11 (or 3 in decimal). EBX is 3 (0b011) in\r\n     the table and is our src register. EDX is register 2 (0b010). So in total\r\n     you need to write two bytes:<br>\r\n     <br>\r\n     0x8b; -- The mov opcode<br>\r\n     0xd3 = 0b11 010 011 (MOD 11, dst EDX, src EBX)<br>\r\n     <br>\r\n     You can build it by lots of bit shifting. Ala ( (3 &lt;&lt; 6) | (2\r\n     &lt;&lt; 3) | (3) ). Shift the number &quot;3&quot; six bits left, or with\r\n     (&quot;2&quot; shift three bits left&quot;) or with &quot;3&quot;.&nbsp;<br>\r\n     <br>\r\n     0b = binary. 0x = hex.&nbsp;<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What x86 instructions should we use?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;add, sub, idiv,\r\n     imul, mov, call, push, pop, return, jump, cmp, jcc. Remember, idiv and\r\n     imul put the result in certain registers. idiv puts the quotient in EAX,\r\n     and the remainder in EDX. imul can sometimes put certain results in\r\n     certain registers if you want. jccs must occur immediatley after a cmp.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What am I looking for in the intel manual? How do I\r\n     know which opcode to use?</span></b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>&nbsp;Look for instructions that use R32/MODRM\r\n     requests. For example, add, use 0x3 which has the destination (left value)\r\n     saying ADD r32, r/m32. CMP should use 3b. (CMP r32, r/m32 - the r32 should\r\n     be the left. Do not use CMP r/m32, r32).<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I debug this with GDB?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Lookup info registers,\r\n     display /i $pc, si, x commands. Info registers gives you the values in\r\n     registers. display /i $pc single steps x86 and si. Checkout <a\r\n     href=\"http://www.delorie.com/gnu/docs/gdb/gdb_56.html\">examining memory</a>\r\n     here. Or the <a href=\"http://davis.lbl.gov/Manuals/GDB/gdb_9.html\">overall\r\n     using gdb</a>. GDB is painful.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What happens between a call?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> You need to save all\r\n     the registers, perform the call, then restore them. You can do this by\r\n     pushing all the registers onto the stack, make the call, then pop them off\r\n     the stack again.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I call the print method?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Create a C method that\r\n     calls into printf and takes an integer. Get the address of that method,\r\n     move it into EAX, and perform a call indirect near. 0xFF /2. The 2 here\r\n     means the mod/rm bit for the destination register is set to 2. So: (3\r\n     &lt;&lt; 6) | (2 &lt;&lt; 3) | EAX; (EAX here is where we stored the\r\n     address of printInt, but you can choose any register.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I make debugging easier?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Between each\r\n     instruction you generate x86 for, you can insert a nop. The nop opcode\r\n     does nothing. It will help you deliniate which instructions emitted what\r\n     x86 code.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I resolve Phis?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> When you reach a jump instruction,\r\n     check which block you are jumping to. If the target block has phis, get\r\n     the phi instructions for the target block. Insert moves in your current\r\n     block from the phi operand register to the phi instruction register.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>I'm getting a permission denied when I try to execute\r\n     jit compiled code</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;-\r\n     Make sure you mark the page as executable. This is&nbsp;<a\r\n     href=\"http://opengroup.org/onlinepubs/007908799/xsh/mprotect.html\">mprotect\r\n     on OSX/Linux</a>&nbsp;and&nbsp;<a\r\n     href=\"http://msdn.microsoft.com/en-us/library/aa366898%28VS.85%29.aspx\">VirtualProtect\r\n     on Windows</a>. Include &lt;sys/mman.h&gt; on Unix/ OSX and\r\n     &quot;Windows.h&quot; on Windows.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What do I do for a constant int instruction?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Constants are known as\r\n     &quot;immediates&quot; in assembly. So look for mov r32, immi32. 0xb8 +\r\n     rd. The +rd means 0xb8 + the destination register. So let's say you wanted\r\n     to move the number 10 into register EBX (011 - 3). Remember, the\r\n     Registers.h file has the registers in the order as the table of doom. So\r\n     you need to do 0xb8 + EBX (0xb8 + 3) in one byte. Then 32 bit integer for\r\n     the number 10:<br>\r\n     byte1: 0xb8 + 3.<br>\r\n     byte2 - 6 = 0x0000000A. <o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What does it mean opcode +rd? Like push/pop\r\n     instructions?</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>\r\n     The rd stands for the destination register. So if you want to push EDX,\r\n     EDX is 010 (2), so the opcode is opcode + 2. Checkout question #11 for a\r\n     concrete example.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do you deal with this CDECL stuff</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>? Here is a <a\r\n     href=\"http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/\">really\r\n     good tutorial</a> on it.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I generate jump offsets?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Your jcc / jmp requires\r\n     a 4 byte offset. This offset is from the location of the jump instruction\r\n     TO the memory address of the jump target. So let's say your jump\r\n     instruction exists at memory location 0x100. And you wanted to jump to\r\n     address 0x400. You don't fill the 4 byte offset with 0x400. You have to do\r\n     0x400 - 0x100 = 0x300.&nbsp;<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l6 level1 lfo7;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Which jump and return instructions should we use?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> Use the jcc/jmp/ret\r\n     NEAR instructions, not the FAR ones.&nbsp;<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>General\r\nC/C++:</span></b><span style='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Where do I get containers (lists, vectors, hashmaps) in\r\n     C++?&nbsp;</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>You\r\n     can roll your own by making wrappers around the vector class, or use\r\n     the&nbsp;<a href=\"http://www.cplusplus.com/reference/stl/\">std containers\r\n     here</a>.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What's the syntax to cast a void* to a function\r\n     pointer?</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;<br>\r\n     void* compiledCode = assembler.assemble(method); // the location of jit\r\n     compiled code<br>\r\n     int (*fp)(); // Declare a function pointer to a method that returns an int\r\n     and takes no parameters<br>\r\n     fp = (int (*)())(compiledCode); // cast the void* to the function pointer<br>\r\n     fp(); // Actually execute it<br>\r\n     <a href=\"http://www.newty.de/fpt/index.html\"><br>\r\n     Heres more on C and C++ function pointers</a>.&nbsp;<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>I'm making a template class but it says the class\r\n     doesn't exist!</span></b><span style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;Template\r\n     classes must be defined in the header file, not .cpp file.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What's the order for C++ include files?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>&nbsp;.cpp Files should\r\n     always only include other header files. .h files should NEVER include\r\n     other header files unless they are standard files (&lt;iostream&gt;, etc).\r\n     If you are getting a type not defined, you have to forward declare it. In\r\n     the header file, just type &quot;class SomethingElse&quot; and have\r\n     pointers to those structures.&nbsp;<a\r\n     href=\"http://www.eventhelix.com/RealtimeMantra/HeaderFileIncludePatterns.htm\">Here's\r\n     more info</a>. Another student <a\r\n     href=\"http://cplusplus.com/forum/articles/10627/\">found this resource more\r\n     helpful</a>.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What are some C string methods?</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'> strncmp, strncpy,\r\n     strncat. You can convert a C++ string to a C string by calling the data()\r\n     method on a C++ string.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What is a null terminated string, or how do C strings\r\n     work (not C++ std::string)?</span></b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'> - <a href=\"http://www.cplusplus.com/doc/tutorial/ntcs/\">Check\r\n     this out</a>.&nbsp;<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l4 level1 lfo8;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Why does it say a type isn't recognized</span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>! You need to forward\r\n     declare types. When you use the type, you must use a POINTER to the type,\r\n     not the type itself. For example, if I want to have a list of\r\n     &lt;BasicBlock&gt; in the Method object, in the Method.h file, you have to\r\n     have a list of BasicBlock*, NOT BasicBlock. And forward declare\r\n     BasicBlock. Then in the Method.cpp file, you need to include basicBlock.h.<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Uncategorized</span></b><b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'>:</span></b><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p></o:p></span></p>\r\n\r\n<ol start=1 type=1>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>Javap doesn't exist - </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>Install the Java JDK,\r\n     not the JRE.<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>How do I see the bytecodes in a javac generated .class\r\n     file (Not our .out file)</span></b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>? javap -v TestClass<o:p></o:p></span></li>\r\n <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;\r\n     mso-list:l0 level1 lfo9;tab-stops:list .5in'><b><span style='mso-fareast-font-family:\r\n     \"Times New Roman\"'>What language features do we need to support? </span></b><span\r\n     style='mso-fareast-font-family:\"Times New Roman\"'>if statements, while,\r\n     for, only local variables that are integers. Arithmetic operators (+, -,\r\n     *, /).&nbsp;<o:p></o:p></span></li>\r\n</ol>\r\n\r\n<p class=MsoNormal><o:p>&nbsp;</o:p></p>\r\n\r\n<p class=MsoNormal align=center style='text-align:center'><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></p>\r\n\r\n<p class=MsoNormal align=center style='text-align:center'><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></p>\r\n\r\n</div>\r\n\r\n</body>\r\n\r\n</html>\r\n", "id": 1826.0}