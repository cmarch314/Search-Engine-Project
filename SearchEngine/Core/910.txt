{"text": "Simple Linear Regression in R Birth Weight data Taken from Stat Labs by Nolan and Speed originally from the Child Health and Development Studies conducted at the Oakland CA Kaiser Foundation Hospital The variables are bwt baby s weight in ounces at birth gestation duration of pregnancy in days parity parity indicator first born 1 later birth age mother s age in years height mother s height in inches weight mother s weight in pounds during pregnancy smoke indicator for whether mother smokes 1 yes no The data will be read into R in data frame format which are arrays of data in which each case here an individual corresponds to a row and each variable corresponds to a column The row labels for these data frames are just row numbers the column labels are the names of the variables Only complete cases are included here Use the following command to load the data into your R session babies read table http www ics uci edu staceyah 2 1 data Bwt dat header TRUE sep Check that the data were read in correctly head babies tail babies dim babies For the dimension of a vector use the function length names babies is data frame babies We will take bwt to be the response variable For now consider gestation as the only predictor We will explore this data set in more detail using more predictor variables in the future The first step to any data analysis should be to explore the data plots and summary statistics Plotting in R Histograms Let s take a look at the distribution of gestation periods using a histogram hist babies gestation A histogram places each observation into pre determined bins where the height of the bin is the number of observations in that bin Our histogram doesn t look too good let s try a different bin size hist babies gestation breaks 4 The option breaks 4 tells R to break up the x axis into 4 bins Notice that the labels on the vertical axis are counts frequencies We could also look at the density histogram use hist babies gestation breaks 4 freq F When you use the freq F argument in hist you are asking for the density histogram which has total area 1 Area is proportional to relative frequency the count divided by the total number of observations For example in the interval from 28 to 3 the frequency histogram shows a count of 61 The height of that interval in the density histogram is about 247 and the width is 2 Thus the area for that interval is about 91 5 49 4 9 of the sample and 49 1236 is about 61 We can also add a smoothed density line to a histogram lines density babies gestation Note that the histogram must be on the density scale in order to add a smoothed density line In every plot function there are various arguments that add to the figure such as adding titles axes labels or color hist babies gestation breaks 4 col seagreen main Gestation Distribution xlab Days For a list of all the colors in R type colors Box Plots A boxplot is really not much more than a graphical display of a 5 number summary min 1st quartile median 3rd quartile max The body of the box represents the location of the quartiles with a line added at the median The whiskers or lines extending out from the box display the distance to the furthest observations which are no more than 1 5 times the inner quartile range Q3 Q1 from the quartiles Outliers are displayed as points or lines beyond the whiskers boxplot babies gestation or horizontal boxplot babies gestation horizontal TRUE Note that the above plots are missing axis labels How would you add them R will also do side by side boxplots which we can use to compare distributions of quantitative variables across categories boxplot gestation smoke data babies xlab Smoker no 1 yes ylab Gestation days Comparing Two Variables For the most part we will be interested not in just one variable but the relationship between two or more variables Depending on if the variables are quantitative or categorical this can be done in a variety of ways In order to refer to variables directly by name rather than preceding the variable name with babies let s attach the data set attach babies The plot function is a generic plotting function We can feed it one variable plot bwt Plots birthweight vs observation number or two variables scatterplot plot bwt gestation Order of arguments are y x where x is the x axis variable and y is the y axis variable Could instead use arguments x y e g plot gestation bwt or side by side boxplots plot bwt smoke or an entire data set plot babies What if we want to compare more than two variables If they are all quantitative we would need a 3 D scatterplot However if there are two quantitative variables and one categorical variable we can use a scatterplot of the two quantitative variables with plot symbols denoting the levels of the categorical variable Let s try this with gestation bwt and smoke plot bwt gestation type n main Bwt vs Gestation by Smoke xlab Gestation Days ylab Bwt Ounces type n tells R just to set up the plot window and don t plot the points think of n standing for nothing points bwt smoke gestation smoke pch 15 col hotpink Plot nonsmokerspoints bwt smoke 1 gestation smoke 1 pch 18 col rosybrown Plot smokerslegend locator 1 c Nonsmoker Smoker pch c 15 18 col c hotpink rosybrown Add legend abline lm bwt smoke gestation smoke col hotpink Add least squares regression linesabline lm bwt smoke 1 gestation smoke 1 col rosybrown Summary Statistics R has functions built in for most of the standard quantitative measures that we are likely to use Those that aren t built in are easy to add Basic numerical measures for a data set X1 X2 X3 Xn stored in an R variable named x Statistic Definition R Function mean average X1 X2 Xn n mean x median middle value 5 th percentile i e a value M such that 5 of the data are less than M and 5 are greater than M median x minimum value of the smallest data point min x maximum value of the largest data point max x p th quantile A value Q such that p 1 of the data are less than Q and 1 p 1 are greater than Q Special cases Median 5 th quantile1st quartile Q1 25th quantile3rd quartile Q3 75th quantile quantile x p 5 number summary min Q1 median Q2 max quantile x variance mean squared deviation from the mean var x standard deviation square root of the variance a typical deviation from the mean sd x order statistics data in ascending order sort x We can easily add functions for example to compute the inter quartile range IQR Q3 Q1 iqr function x computes the inter quartile range of a data set r quantile x c 25 75 r 2 r 1 In the iqr function defined above the variable r will be a dataset with 2 elements the first and third quartiles The final expression of the function is the value returned in this case the difference between the two quartiles There are also functions that are meant for two or more variables such as correlation cor babies bwt babies gestation cor babies Simple Linear Regression A simple linear regression model is an example of a linear model R uses the function lm to fit linear models In this case mod lm bwt gestation data babies R fits the modelmod View SLR fitsummary mod More details of SLR model fitattributes mod attibutes summary mod Ask R what is contained in the mod and summary mod objectsmod coefficientshead mod fitted values head mod residuals summary mod r squaredsummary mod sigmaplot bwt gestation data babies xlab Gestation Period days ylab Birth Weight oz abline mod Adds least squares regression line to plotplot mod Default residual plots Once we have fit the regression model we can also use R to calculate confidence intervals for the regression coefficients the mean response as well as prediction intervals Confidence intervals for the regression parameters are found using the R command confint mod level 95 For confidence intervals for the mean response or prediction intervals first we need to create a data frame with the x values of interest The variables names in the new data frame need to match the names of the original data set names babies newdat data frame gestation c 2 25 3 newdat Print the new data frame in the console A 95 confidence interval for the mean response uses the predict function with the argument interval confidence predict mod newdata newdat interval confidence level 95 We can also ask R to report the standard errors of the estimated mean response predict mod newdata newdat interval confidence level 95 se fit TRUE For a 95 prediction interval use the argument interval prediction predict mod newdata newdat interval prediction level 95 For more information on the predict function for lm objects look at the help file predict lm Don t forget to detach data sets that you attached earlier detach babies Previous Basic R Functions Stats 2 1 Index", "_id": "http://www.ics.uci.edu/~staceyah/201/discussion/SLR.html", "title": "simple linear regression in r", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <meta content=\"text/html; charset=windows-1252\"\n      http-equiv=\"Content-Type\">\n    <title>Simple Linear Regression in R</title>\n    <meta content=\"Stacey Hancock\" name=\"author\">\n  </head>\n  <body>\n    <table style=\"width: 100%; background-color: rgb(102, 204, 204);\n      margin-left: auto; margin-right: auto; height: 58px; text-align:\n      left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td>\n            <div style=\"text-align: center;\"> </div>\n            <h1 style=\" text-align: center;\">Simple Linear Regression in\n              R<br>\n            </h1>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <span style=\"color: rgb(51, 153, 153);\"><br>\n    </span>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <center>\n      <h2> Birth Weight data </h2>\n    </center>\n    Taken from <a href=\"http://stat-www.berkeley.edu/users/statlabs/\">\n      Stat Labs</a> by Nolan and Speed, originally from the Child Health\n    and Development Studies conducted at the Oakland, CA, Kaiser\n    Foundation Hospital. The variables are\n    <ol>\n      <li>bwt: baby's weight in ounces at birth </li>\n      <li>gestation: duration of pregnancy in days </li>\n      <li>parity: parity indicator (first born = 1, later birth = 0) </li>\n      <li>age: mother's age in years </li>\n      <li>height: mother's height in inches </li>\n      <li>weight: mother's weight in pounds (during pregnancy) </li>\n      <li>smoke: indicator for whether mother smokes (1=yes, 0=no) </li>\n    </ol>\n    <p> The data will be read into R in \"data frame\" format, which are\n      arrays of data in which each case (here an individual) corresponds\n      to a row, and each variable corresponds to a column. The row\n      labels for these data frames are just row numbers, the column\n      labels are the names of the variables. Only complete cases are\n      included here.<br>\n      <br>\n      Use the following command to load the data into your R session: </p>\n    <blockquote>\n      <pre>babies = read.table(\"http://www.ics.uci.edu/~staceyah/201/data/Bwt.dat\", header=TRUE, sep=\",\")\n</pre>\n    </blockquote>\n    Check that the data were read in correctly:<br>\n    <blockquote>\n      <pre>head(babies)<br>tail(babies)</pre>\n      <pre>dim(babies)\t# For the dimension of a vector, use the function \"length\"</pre>\n      <pre>names(babies)</pre>\n      <pre>is.data.frame(babies)</pre>\n    </blockquote>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <p>We will take bwt to be the response variable. For now, consider\n      gestation as the only predictor. (We will explore this data set in\n      more detail, using more predictor variables, in the future.) The\n      first step to any data analysis should be to explore the data -\n      plots and summary statistics.<br>\n      <br>\n    </p>\n    <h2>Plotting in R</h2>\n    <p>\n      <meta http-equiv=\"content-type\" content=\"text/html;\n        charset=windows-1252\">\n    </p>\n    <h3>\n      <meta http-equiv=\"content-type\" content=\"text/html;\n        charset=windows-1252\">\n    </h3>\n    <h3>Histograms<br>\n    </h3>\n    Let's take a look at the distribution of gestation periods using a\n    histogram:<br>\n    <pre style=\"margin-left: 40px;\">hist(babies$gestation)<br></pre>\n    A histogram places each observation into pre-determined \"bins\" where\n    the height of the bin is the number of observations in that bin. Our\n    histogram doesn't look too good - let's try a different bin size:<br>\n    <pre style=\"margin-left: 40px;\">hist(babies$gestation, breaks=40)<br></pre>\n    The option <span style=\"font-family: monospace;\">breaks=40</span>\n    tells R to break up the x-axis into 40 bins. Notice that the labels\n    on the vertical axis are counts (frequencies). We could also look at\n    the \"density\" histogram, use<br>\n    <pre style=\"margin-left: 40px;\">hist(babies$gestation, breaks=40, freq=F)<br></pre>\n    When you use the <span style=\"font-family: monospace;\">freq=F</span>\n    argument in <span style=\"font-family: monospace;\">hist()</span>,\n    you are asking for the <span style=\"font-weight: bold;\">density</span>\n    histogram, which has total area 1. Area is proportional to <span\n      style=\"font-weight: bold;\">relative frequency</span> (the count\n    divided by the total number of observations). For example, in the\n    interval from 280 to 300, the frequency histogram shows a count of\n    61. The height of that interval in the density histogram is about\n    .00247, and the width is 20. Thus the area for that interval is\n    about .091*5 = 0.049 (4.9% of the sample), and 0.049*1236 is about\n    61. <br>\n    <br>\n    We can also add a smoothed density line to a histogram:<br>\n    <blockquote>\n      <pre>lines(density(babies$gestation))<br></pre>\n    </blockquote>\n    Note that the histogram must be on the density scale in order to add\n    a smoothed density line.<br>\n    <br>\n    In every plot function, there are various arguments that add to the\n    figure, such as adding titles, axes labels, or color:<br>\n    <pre style=\"margin-left: 40px;\">hist(babies$gestation,breaks=40,col=\"seagreen\",main=\"Gestation Distribution\",xlab=\"Days\")<br></pre>\n    For a list of all the colors in R, type:<br>\n    <pre style=\"margin-left: 40px;\">colors()<br><br></pre>\n    <h3>Box Plots</h3>\n    A boxplot is really not much more than a graphical display of a\n    5-number summary (min, 1st quartile, median, 3rd quartile, max). The\n    body of the box represents the location of the quartiles, with a\n    line added at the median. The \"whiskers\", or lines extending out\n    from the box, display the distance to the furthest observations\n    which are no more than 1.5 times the inner-quartile range (Q3-Q1)\n    from the quartiles. Outliers are displayed as points or lines beyond\n    the whiskers.<br>\n    <div style=\"margin-left: 40px;\">\n      <pre>boxplot(babies$gestation)<br># or horizontal--<br>boxplot(babies$gestation, horizontal = TRUE)<br></pre>\n      <h3>\n        <meta http-equiv=\"content-type\" content=\"text/html;\n          charset=windows-1252\">\n      </h3>\n    </div>\n    <h2>\n      <meta http-equiv=\"content-type\" content=\"text/html;\n        charset=windows-1252\">\n    </h2>\n    Note that the above plots are missing axis labels. How would you add\n    them?<br>\n    <br>\n    R will also do side-by-side boxplots which we can use to compare\n    distributions of quantitative variables across categories:<br>\n    <blockquote>\n      <pre>boxplot(gestation ~ smoke, data=babies, xlab=\"Smoker (0 = no; 1 = yes)\", ylab=\"Gestation (days)\")<br><br></pre>\n    </blockquote>\n    <h3>Comparing Two Variables<br>\n    </h3>\n    For the most part, we will be interested not in just one variable,\n    but the relationship between two or more variables. Depending on if\n    the variables are quantitative or categorical, this can be done in a\n    variety of ways.<br>\n    <br>\n    In order to refer to variables directly by name (rather than\n    preceding the variable name with babies$), let's attach the data\n    set:<br>\n    <blockquote>\n      <pre>attach(babies)<br></pre>\n    </blockquote>\n    <br>\n    The \"plot\" function is a generic plotting function. We can feed it\n    one variable:<br>\n    <pre style=\"margin-left: 40px;\">plot(bwt)&nbsp;&nbsp;  # Plots birthweight vs. observation number</pre>\n    or two variables (scatterplot):<br>\n    <pre style=\"margin-left: 40px;\">plot(bwt ~ gestation)&nbsp;&nbsp;  \t# Order of arguments are y~x where x is the x-axis variable and y is the y-axis variable. <br>\t\t  \t\t# (Could instead use arguments x,y, e.g., plot(gestation,bwt).)</pre>\n    or side-by-side boxplots:<br>\n    <pre style=\"margin-left: 40px;\">plot(bwt ~ smoke)</pre>\n    or an entire data set:<br>\n    <pre style=\"margin-left: 40px;\">plot(babies)<br><br></pre>\n    What if we want to compare more than two variables? If they are all\n    quantitative, we would need a 3-D scatterplot. However, if there are\n    two quantitative variables and one categorical variable, we can use\n    a scatterplot of the two quantitative variables with plot symbols\n    denoting the levels of the categorical variable. Let's try this with\n    gestation, bwt, and smoke. <br>\n    <blockquote>\n      <pre style=\"margin-left: 40px;\">plot(bwt~gestation,type=\"n\",main=\"Bwt vs. Gestation by Smoke\",xlab=\"Gestation (Days)\",ylab=\"Bwt (Ounces)\")\t<br>\t\t# type=\"n\" tells R just to set up the plot window<br>\t\t# and don't plot the points (think of \"n\" standing for \"nothing\")<br><br>points(bwt[smoke==0]~gestation[smoke==0],pch=15,col=\"hotpink\")\t\t# Plot nonsmokers<br>points(bwt[smoke==1]~gestation[smoke==1],pch=18,col=\"rosybrown\")\t# Plot smokers<br><br>legend(locator(1),c(\"Nonsmoker\",\"Smoker\"),pch=c(15,18),col=c(\"hotpink\",\"rosybrown\"))\t# Add legend<br>&nbsp;<br>abline(lm(bwt[smoke==0]~gestation[smoke==0]),col=\"hotpink\")\t# Add least squares regression lines<br>abline(lm(bwt[smoke==1]~gestation[smoke==1]),col=\"rosybrown\")</pre>\n    </blockquote>\n    <h2><br>\n    </h2>\n    <h2>Summary Statistics<br>\n    </h2>\n    <pre><meta http-equiv=\"content-type\" content=\"text/html; charset=windows-1252\"></pre>\n    <p>R has functions built in for most of the standard quantitative\n      measures that we are likely to use. Those that aren't built in are\n      easy to add.<br>\n    </p>\n    <h3>Basic numerical measures for a data set X1, X2, X3,..., Xn,\n      stored in an R variable named \"x\"<br>\n    </h3>\n    <table style=\"text-align: left; width: 100%; background-color:\n      rgb(255, 255, 204);\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td style=\"vertical-align: top; font-weight: bold;\">Statistic<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">Definition<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">R Function<br>\n          </td>\n        </tr>\n        <tr>\n          <td>mean (average)<br>\n          </td>\n          <td>(X1+X2+...+Xn)/n<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">mean(x) </span></td>\n        </tr>\n        <tr>\n          <td>median (middle value)<br>\n          </td>\n          <td>50th percentile, i.e., a value M such that 50% of the data\n            are less than M and 50% are greater than M.<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">median(x) </span></td>\n        </tr>\n        <tr>\n          <td>minimum<br>\n          </td>\n          <td>value of the smallest data point<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">min(x) </span></td>\n        </tr>\n        <tr>\n          <td>maximum<br>\n          </td>\n          <td>value of the largest data point<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">max(x) </span></td>\n        </tr>\n        <tr>\n          <td>p-th quantile<br>\n          </td>\n          <td>A value Q such that p*100% of the data are less than Q and\n            (1-p)100% are greater than Q. Special cases:<br>\n            <ul>\n              <li>Median = .50th quantile</li>\n              <li>1st quartile (Q1) = .25th quantile</li>\n              <li>3rd quartile (Q3) = .75th quantile<br>\n              </li>\n            </ul>\n          </td>\n          <td> <span style=\"font-family: monospace;\">quantile(x,p) </span></td>\n        </tr>\n        <tr>\n          <td>5 number summary<br>\n          </td>\n          <td>min, Q1, median, Q2, max<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">quantile(x) </span></td>\n        </tr>\n        <tr>\n          <td>variance<br>\n          </td>\n          <td>mean squared deviation from the mean<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">var(x) </span></td>\n        </tr>\n        <tr>\n          <td>standard deviation<br>\n          </td>\n          <td>square root of the variance; a \"typical\" deviation from\n            the mean<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">sd(x) </span></td>\n        </tr>\n        <tr>\n          <td>order statistics<br>\n          </td>\n          <td>data in ascending order<br>\n          </td>\n          <td> <span style=\"font-family: monospace;\">sort(x) </span></td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    We can easily add functions, for example to compute the\n    inter-quartile range (IQR) = Q3-Q1:<br>\n    <div style=\"margin-left: 40px;\">\n      <pre>iqr = function(x){<br>\t# computes the inter-quartile range of a data set <br>\tr = quantile(x, c(0.25,0.75))<br>\tr[2]-r[1]<br>}&nbsp;&nbsp; </pre>\n    </div>\n    In the <span style=\"font-family: monospace;\">iqr</span> function\n    defined above, the variable r will be a dataset with 2 elements, the\n    first and third quartiles. The final expression of the function is\n    the value returned, in this case the difference between the two\n    quartiles.<br>\n    <br>\n    There are also functions that are meant for two or more variables,\n    such as correlation:<br>\n    <pre>cor(babies$bwt, babies$gestation)<br>cor(babies)<br></pre>\n    <br>\n    <h2>Simple Linear Regression</h2>\n    A simple linear regression model is an example of a \"linear model\".\n    R uses the function \"lm\" to fit linear models. In this case:<br>\n    <pre>mod = lm(bwt ~ gestation, data = babies)\t# R fits the model<br>mod\t\t\t\t\t\t# View SLR fit<br>summary(mod)\t\t\t\t\t# More details of SLR model fit<br><br>attributes(mod)<br>attibutes(summary(mod))\t\t\t\t# Ask R what is contained in the mod and summary(mod) objects<br><br>mod$coefficients<br>head(mod$fitted.values)<br>head(mod$residuals)<br>summary(mod)$r.squared<br>summary(mod)$sigma<br><br>plot(bwt ~ gestation, data = babies, xlab=\"Gestation Period (days)\", ylab=\"Birth Weight (oz)\")<br>abline(mod)\t\t# Adds least-squares regression line to plot<br><br>plot(mod)\t\t# Default residual plots<br></pre>\n    <br>\n    Once we have fit the regression model, we can also use R to\n    calculate confidence intervals for the regression coefficients, the\n    mean response, as well as prediction intervals. Confidence intervals\n    for the regression parameters are found using the R command<br>\n    <blockquote>\n      <pre>confint(mod, level=0.95)<br></pre>\n    </blockquote>\n    <br>\n    For confidence intervals for the mean response or prediction\n    intervals, first we need to create a data.frame with the x-values of\n    interest. The variables names in the new data.frame need to match\n    the names of the original data set:<br>\n    <blockquote>\n      <pre>names(babies)<br></pre>\n      <pre>newdat = data.frame(gestation = c(200, 250, 300))<br>newdat\t\t# Print the new data.frame in the console.<br></pre>\n    </blockquote>\n    A 95% confidence interval for the mean response uses the \"predict\"\n    function with the argument \"interval = \"confidence\"\":<br>\n    <blockquote>\n      <pre>predict(mod, newdata = newdat, interval = \"confidence\", level=.95)<br></pre>\n    </blockquote>\n    We can also ask R to report the standard errors of the estimated\n    mean response:<br>\n    <blockquote>\n      <pre>predict(mod, newdata = newdat, interval = \"confidence\", level=.95, se.fit=TRUE)</pre>\n    </blockquote>\n    For a 95% prediction interval, use the argument \"interval =\n    \"prediction\"\":<br>\n    <blockquote>\n      <pre>predict(mod, newdata = newdat, interval = \"prediction\", level=.95)</pre>\n    </blockquote>\n    For more information on the predict function for lm objects, look at\n    the help file<br>\n    <blockquote>\n      <pre>?predict.lm<br></pre>\n    </blockquote>\n    Don't forget to detach data sets that you attached earlier <br>\n    <pre>detach(babies)<br><br></pre>\n    <hr style=\"width: 100%; height: 2px;\">\n    <div style=\"text-align: center;\"><big><span style=\"font-weight:\n          bold;\">Previous:</span> <a href=\"BasicR.html\">Basic R\n          Functions</a><br>\n        <br>\n        <a href=\"../index.html\">Stats 201 Index</a></big><br>\n      <hr style=\"width: 100%; height: 2px;\"><br>\n    </div>\n  </body>\n</html>\n", "id": 910.0}