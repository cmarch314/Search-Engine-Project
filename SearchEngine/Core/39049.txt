{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL convex hull 2 Definition The function convex hull 2 generates the counterclockwise sequence of extreme points from a given set of input points include CGAL convex hull 2 h template class InputIterator class OutputIterator OutputIterator convex hull 2 InputIterator first InputIterator beyond OutputIterator result Traits ch traits Default traits generates the counterclockwise sequence of extreme points of the points in the range first beyond The resulting sequence is placed starting at position result and the past the end iterator for the resulting sequence is returned It is not specified at which point the cyclic sequence of extreme points is cut into a linear sequence Precondition The source range first beyond does not contain result The default traits class Default traits is the kernel in which the type InputIterator value type is defined Requirements InputIterator value type and OutputIterator value type are equivalent to Traits Point 2 Traits contains the following subset of types from the concept ConvexHullTraits 2 and their corresponding member functions that return instances of these types Traits Point 2 Traits Equal 2 Traits Less xy 2 Traits Less yx 2 Traits Left turn 2 See Also CGAL ch akl toussaint CGAL ch bykat CGAL ch eddy CGAL ch graham andrew CGAL ch jarvis CGAL ch melkman Implementation One of two algorithms is used depending on the type of iterator used to specify the input points For input iterators the algorithm used is that of Bykat Byk78 which has a worst case running time of O n h where n is the number of input points and h is the number of extreme points For all other types of iterators the O n logn algorithm of of Akl and Toussaint AT78 is used ExampleIn the following example we use the STL compliant interface of CGAL Polygon 2 to construct the convex hull polygon from the sequence of extreme points Point data are read from standard input the convex hull polygon is shown in a CGAL window Remember that when no traits class is specified for the function convex hull 2 the kernel from which the input points come is used as the default traits class Next ConvexHullTraits 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_2_ref/Function_convex_hull_2.html", "title": "convex_hull_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_2_ref/convex_hull_2.tex' -->\n<html> <head>  \n<title>convex_hull_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_608\"></A>\n\n<A NAME=\"Cross_link_anchor_609\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_496\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::convex_hull_2\"></A>\n<h2><I>CGAL::convex_hull_2</I></h2>\n\n   \n     \n<A NAME=\"Index_anchor_497\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_convex_hull_2.html#Cross_link_anchor_609\">convex_hull_2</A></I> generates the counterclockwise sequence of extreme\npoints from a given set of input points.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/convex_hull_2.h\">CGAL/convex_hull_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator, class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_convex_hull_26InputIterator_first+_InputIterator_beyond+_OutputIterator_result+_const_Traits___ch_traits_=_Default_traits_9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_convex_hull_2.html#Cross_link_anchor_609\">convex_hull_2</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\nOutputIterator result,<BR>\n\nTraits ch_traits = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    generates the counterclockwise sequence of extreme points\n            of the points in the range [<I>first</I>,<I>beyond</I>).\n            The resulting sequence is placed starting at position\n            <I>result</I>, and the past-the-end iterator for the resulting\n            sequence is returned. It is not specified at which point the\n            cyclic sequence of extreme points is cut into a linear sequence.<BR>\n\n<EM>Precondition: </EM>The source range [<I>first</I>,<I>beyond</I>) does not contain\n            <I>result</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe default traits class <I>Default_traits</I> is the kernel in which\nthe type <I>InputIterator::value_type</I> is defined.\n<P>\n\n<H3>Requirements</H3>\n<OL>\n   <LI><I>InputIterator::value_type</I> and <I>OutputIterator::value_type</I>\n            are equivalent to <I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n   <LI><I>Traits</I> contains the following subset of types from\n            the concept <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A> and their corresponding member\n            functions that return instances of these types:\n            <UL>\n                <LI><I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>,\n\t\t<LI><I>Traits::Equal_2</I>,\n                <LI><I>Traits::Less_xy_2</I>, \n                <LI><I>Traits::Less_yx_2</I>,\n                <LI><I>Traits::Left_turn_2</I>.\n            </UL>\n</OL>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_ch_akl_toussaint.html#Cross_link_anchor_578\">CGAL::ch_akl_toussaint</A></I><BR>\n\n<I><A HREF=\"Function_ch_bykat.html#Cross_link_anchor_580\">CGAL::ch_bykat</A></I><BR>\n\n<I><A HREF=\"Function_ch_eddy.html#Cross_link_anchor_582\">CGAL::ch_eddy</A></I><BR>\n\n<I><A HREF=\"Function_ch_graham_andrew.html#Cross_link_anchor_586\">CGAL::ch_graham_andrew</A></I><BR>\n\n<I><A HREF=\"Function_ch_jarvis.html#Cross_link_anchor_590\">CGAL::ch_jarvis</A></I><BR>\n\n<I><A HREF=\"Function_ch_melkman.html#Cross_link_anchor_594\">CGAL::ch_melkman</A></I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nOne of two algorithms is used,\ndepending on the type of iterator used to specify the input points.  For\ninput iterators, the algorithm used is that of Bykat [<A HREF=\"../biblio.html#Biblio_b-chfsp-78\">Byk78</A>], which \nhas a worst-case running time of <MATH><I>O(n h)</I></MATH>, where <MATH><I>n</I></MATH> is the number of input \npoints and <MATH><I>h</I></MATH> is the number of extreme points.  For all other types of \niterators, the <MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> algorithm of of Akl and Toussaint \n[<A HREF=\"../biblio.html#Biblio_at-fcha-78\">AT78</A>] is used.\n<P>\n\n<H3>Example</H3>In the following example we use the STL-compliant interface of\n<I><A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A></I> to construct the convex hull polygon from the\nsequence of extreme points. Point data are read from standard input, the\nconvex hull polygon is shown in a C<SMALL>GAL</SMALL> window.\nRemember, that when no traits class is specified for the function\n<I><A HREF=\"Function_convex_hull_2.html#Cross_link_anchor_609\">convex_hull_2</A></I>, the kernel from which the input points come is\nused as the default traits class.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_ConvexHullTraits_2.html\"><I>ConvexHullTraits_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39049.0}