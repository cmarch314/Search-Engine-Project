{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 6 4 Looping over subsets Up 6 Traversing the Atoms Next 7 Properties of Atoms 6 5 Using OEChem C Iterators Directly The standard way of processing each item or member of a set or collection in OEChem is by use of a C iterator The use of iterators is a common design pattern in object oriented programming that hides the way the collection container is implemented internally Hence a set of atoms could be implemented internally as an array a linked list a hash table or any similar data structure but its behavior to the programmer is independent of the actual implementation An iterator can be thought of as a current position indicator In C OEChem iterators make use of C s template mechanism The use of templates allows the functionality of an iterator to be specified independently of the type of the collection being iterated over An iterator over atoms is defined as type OEIter OEAtomBase and an iterator over bonds has type OEIter OEBondBase In the Python wrapper these instantiations are replaced with method calls on the OEMolBase To get an iterator over the atoms in an OEMolBase mol one would use mol GetAtomIter and likewise a call to mol GetBondIter would return a reference to an iterator over the bonds of the molecule The generator methods described in the previous section make use of these iterator methods but simplify it for simple looping over the atoms and bonds If a programmer wants to use iterators directly in Python the following table describes the translation from C OEIterBase operators and methods to the Python wrapper methods C PythonCreationOEIter OEAtomBase i mol GetAtoms i mol GetAtomIter Increment i i Next Decrement i i Prev Increment by ni n i Next n Decrement by ni n i Prev n Go to firsti ToFirst i ToFirst Go to lasti ToLast i ToLast De reference access the objectoperator i Target pointed to i e OEAtomBase Validityoperator booli IsValid The next example show how to use the an OEAtomBase iterator directly to loop over the atoms in a molecule in reverse order and print their atomic numbers usr bin env python ch6 5 py from openeye oechem import mol OEGraphMol OEParseSmiles mol n1ccccc1 iter mol GetAtomIter iter ToLast while iter IsValid print iter Target GetAtomicNum iter Prev Download as text OEChem Python Theory Manual Version 1 3 1 Previous 6 4 Looping over subsets Up 6 Traversing the Atoms Next 7 Properties of Atoms Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node50.html", "title": "6.5 using oechem c++ iterators directly", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>6.5 Using OEChem C++ Iterators Directly</title>\n<META NAME=\"description\" CONTENT=\"6.5 Using OEChem C++ Iterators Directly\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node49.html\">\n<LINK REL=\"up\" HREF=\"node45.html\">\n<LINK REL=\"next\" HREF=\"node51.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node49.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node45.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node51.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node49.html\">6.4 Looping over subsets</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node45.html\">6. Traversing the Atoms</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node51.html\">7. Properties of Atoms</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION008500000000000000000\">\n6.5 Using OEChem C++ Iterators Directly</A>\n</H1>\n\n<P>\nThe standard way of processing each item or member of a set or\ncollection in OEChem is by use of a C++ iterator. The use of iterators\nis a common design pattern in object-oriented programming that hides\nthe way the collection/container is implemented internally. Hence a\nset of atoms could be implemented internally as an array, a linked\nlist, a hash table, or any similar data structure, but its behavior to\nthe programmer is independent of the actual implementation. An\niterator can be thought of as a current position indicator.\n\n<P>\nIn C++, OEChem iterators make use of C++'s template mechanism. The use\nof templates allows the functionality of an iterator to be specified\nindependently of the type of the collection being iterated over.  An\niterator over atoms is defined as type ``OEIter&lt;OEAtomBase&gt;'' and an\niterator over bonds has type ``OEIter&lt;OEBondBase&gt;''.\n\n<P>\nIn the Python wrapper, these instantiations are replaced with method\ncalls on the OEMolBase. To get an iterator over the atoms in an\nOEMolBase ``mol'', one would use mol.GetAtomIter() and likewise a call\nto mol.GetBondIter() would return a reference to an iterator over the\nbonds of the molecule. The generator methods described in the previous\nsection make use of these iterator methods, but simplify it for simple\nlooping over the atoms and bonds.\n\n<P>\nIf a programmer wants to use iterators directly in Python, the\nfollowing table describes the translation from C++ OEIterBase\noperators and methods to the Python wrapper methods.\n\n<P>\n<DIV ALIGN=\"CENTER\">\n<TABLE CELLPADDING=3 BORDER=\"1\">\n<TR><TD ALIGN=\"LEFT\">&nbsp;</TD>\n<TD ALIGN=\"LEFT\"><B>C++</B></TD>\n<TD ALIGN=\"LEFT\"><B>Python</B></TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Creation</TD>\n<TD ALIGN=\"LEFT\">OEIter&lt;OEAtomBase&gt; i = mol.GetAtoms();</TD>\n<TD ALIGN=\"LEFT\">i  = mol.GetAtomIter()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Increment</TD>\n<TD ALIGN=\"LEFT\">++i;</TD>\n<TD ALIGN=\"LEFT\">i.Next()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Decrement</TD>\n<TD ALIGN=\"LEFT\">-i;</TD>\n<TD ALIGN=\"LEFT\">i.Prev()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Increment by n</TD>\n<TD ALIGN=\"LEFT\">i += n;</TD>\n<TD ALIGN=\"LEFT\">i.Next(n)</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Decrement by n</TD>\n<TD ALIGN=\"LEFT\">i -= n;</TD>\n<TD ALIGN=\"LEFT\">i.Prev(n)</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Go to first</TD>\n<TD ALIGN=\"LEFT\">i.ToFirst();</TD>\n<TD ALIGN=\"LEFT\">i.ToFirst()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Go to last</TD>\n<TD ALIGN=\"LEFT\">i.ToLast();</TD>\n<TD ALIGN=\"LEFT\">i.ToLast()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">De-reference (access the object</TD>\n<TD ALIGN=\"LEFT\">operator -&gt;</TD>\n<TD ALIGN=\"LEFT\">i.Target()</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">pointed to, i.e.  OEAtomBase)</TD>\n<TD ALIGN=\"LEFT\">&nbsp;</TD>\n<TD ALIGN=\"LEFT\">&nbsp;</TD>\n</TR>\n<TR><TD ALIGN=\"LEFT\">Validity</TD>\n<TD ALIGN=\"LEFT\">operator bool</TD>\n<TD ALIGN=\"LEFT\">i.IsValid()</TD>\n</TR>\n</TABLE>\n</DIV>\n\n<P>\nThe next example show how to use the an OEAtomBase iterator directly to loop\nover the atoms in a molecule in reverse order and print their atomic numbers.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch6-5.py\nfrom openeye.oechem import *\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"n1ccccc1\")\n\niter = mol.GetAtomIter()\niter.ToLast()\nwhile iter.IsValid():\n    print iter.Target().GetAtomicNum()\n    iter.Prev()\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-6.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node49.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node45.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node51.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node49.html\">6.4 Looping over subsets</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node45.html\">6. Traversing the Atoms</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node51.html\">7. Properties of Atoms</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37971.0}