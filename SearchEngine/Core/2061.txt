{"text": "Cryptogram Helper Algorithm The algorithm used by the applet s Solve button is a deterministic iterative procedure based around a 26x26 matrix of probabilities how likely the algorithm thinks it is that a given code letter should be replaced by a given text letter The matrix starts out with all probabilities equal then after loading a dictionary of English word frequencies repeats the following steps For each word in the dictionary that matches a word of the cryptogram the word s frequency is multiplied by the matrix entries for its individual letters giving an overall probability of seeing that word in that position For each pair of a code word and a possible decryption of that word we build a 26x26 matrix in which the probability of finding that word is as large as possible with uniform probabilities for unrelated letters We then replace our original matrix with a new matrix formed as a weighted average of the word matrices where the weights are the word probabilities computed in the first step A minimum weight perfect matching algorithm computes the most likely decryption for the current matrix We try all possible ways of swapping two letters in the decryption keeping a swap when it improves the quality number of recognized words and product of frequencies of those words If we find a good swap we also adjust the matrix to make that decryption more likely in future iterations For each word of the decryption we use the dictionary to find all other words that could replace it without changing anything in the rest of the decryption If we find any such words we use the one with the highest frequency At each iteration the iteration number and quality of the current translation are shown in the browser s status line The decryption shown in the main window is the best one found so far which is not necessarily the one from the latest iteration See Graham Toal s cryptogram source code page for alternative cryptogram solving algorithms Return to Cryptogram HelperView source", "_id": "http://www.ics.uci.edu/~eppstein/cryptogram/algo.html", "title": "cryptogram helper algorithm", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html>\n<head>\n<title>Cryptogram Helper Algorithm</title>\n</head>\n<body text=\"#000000\" bgcolor=\"#FFFFFF\">\n<div align=\"CENTER\">\n<h1>Cryptogram Helper Algorithm</h1>\n\n<hr>\n</div>\n\n<p>The algorithm used by the applet's \"Solve\" button is a\ndeterministic, iterative procedure based around a 26x26 matrix of\nprobabilities (how likely the algorithm thinks it is that a given\ncode letter should be replaced by a given text letter). The matrix\nstarts out with all probabilities equal, then (after loading <a\nhref=\"freqc.txt.gz\">a dictionary of English word frequencies</a>)\nrepeats the following steps:</p>\n\n<ol>\n<li>For each word in the dictionary that matches a word of the\ncryptogram, the word's frequency is multiplied by the matrix\nentries for its individual letters, giving an overall probability\nof seeing that word in that position.</li>\n\n<li>For each pair of a code word and a possible decryption of that\nword, we build a 26x26 matrix in which the probability of finding\nthat word is as large as possible (with uniform probabilities for\nunrelated letters). We then replace our original matrix with a new\nmatrix formed as a weighted average of the word matrices, where the\nweights are the word probabilities computed in the first step.</li>\n\n<li>A minimum-weight perfect matching algorithm computes the most\nlikely decryption for the current matrix.</li>\n\n<li>We try all possible ways of swapping two letters in the\ndecryption, keeping a swap when it improves the quality (number of\nrecognized words and product of frequencies of those words). If we\nfind a good swap we also adjust the matrix to make that decryption\nmore likely in future iterations.</li>\n\n<li>For each word of the decryption, we use the dictionary to find\nall other words that could replace it without changing anything in\nthe rest of the decryption. If we find any such words, we use the\none with the highest frequency.</li>\n</ol>\n\n<p>At each iteration, the iteration number and quality of the current\ntranslation are shown in the browser's status line. The decryption\nshown in the main window is the best one found so far, which is not\nnecessarily the one from the latest iteration.</p>\n\n<p>See <a href=\"http://www.gtoal.com/wordgames/cryptograms.html\">Graham\nToal's cryptogram source code page</a> for alternative cryptogram-solving\nalgorithms.</p>\n\n<hr>\n<table width=\"100%\">\n<tr>\n<td align=\"LEFT\"><small><a href= \n\"http://www.ics.uci.edu/~eppstein/cryptogram\">Return to\nCryptogram Helper</a></small></td>\n<td align=\"RIGHT\"><small><a href=\"source.html\">View source</a></small></td>\n</tr>\n</table>\n</body>\n</html>\n\n", "id": 2061.0}