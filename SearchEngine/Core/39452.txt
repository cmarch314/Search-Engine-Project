{"text": "Navigation Up Table of Contents Bibliography Index Title Page TriangulationDSFaceBase 2 DefinitionThe concept TriangulationDSFaceBase 2 describes the requirements for the base face of a Triangulation data structure 2 Vb Fb Note that if the Triangulation data structure 2 is plugged into a triangulation class the face base class may have additional geometric requirements depending on the triangulation class At the base level see Sections and a face stores handles on its three vertices and on the three neighboring faces The vertices and neighbors are indexed 1 and 2 Neighbor i lies opposite to vertex i Since the Triangulation data structure 2 is the class which defines the handle types the face base class has to be somehow parameterized by the triangulation data structure But since the Triangulation data structure 2 itself is parameterized by the face and vertex base classes there is a cycle in the definition of these classes In order to break the cycle the base classes for faces and vertices which are plugged in to instantiate a Triangulation data structure 2 use a void as triangulation data structure parameter Then the Triangulation data structure 2 uses a rebind mecanism similar to the one specified in std allocator in order to plug itself as parameter in the face and vertex base classes This mecanism requires that the base class provides a templated nested class Rebind TDS that itself provides the subtype Rebind TDS TDS2 Other which is the rebound version of the base class This rebound base class is the class that the Triangulation data structure 2 actually uses as a base class for the class Triangulation data structure 2 Face Types The concept TriangulationDSFaceBase 2 has to provide the following types template typename TDS2 TriangulationDSFaceBase 2 struct Rebind TDS This nested template class has to define a type Other which is the rebound face base where the Triangulation data structure 2 is actually plugged in This type Other will be the actual base of the class Triangulation data structure 2 Face typedef TriangulationDataStructure 2 Triangulation data structure typedef TriangulationDataStructure 2 Vertex handle Vertex handle typedef TriangulationDataStructure 2 Face handle Face handle Creation TriangulationDSFaceBase 2 f default constructor TriangulationDSFaceBase 2 f Vertex handle v Vertex handle v1 Vertex handle v2 Initializes the vertices with v v1 v2 and the neighbors with Face handle TriangulationDSFaceBase 2 f Vertex handle v Vertex handle v1 Vertex handle v2 Face handle n Face handle n1 Face handle n2 initializes the vertices with v v1 v2 and the neighbors with n n1 n2 Access Functions int f dimension returns the dimension Vertex handle f vertex int i returns the vertex i of f Precondition i 2 bool f has vertex Vertex handle v returns true if v is a vertex of f bool f has vertex Vertex handle v int i as above and sets i to the index of v in f int f vertex index Vertex handle v returns the index of v in f Face handle f neighbor int i returns the neighbor i of f Precondition i 2 bool f has neighbor Face handle n returns true if n is a neighbor of f bool f has neigbor Face handle n int i as above and sets i to the index of n in f int f face index const Face handle n returns the index of neighbor n in f Setting void f set vertex int i Vertex handle v sets vertex i to v Precondition i 2 void f set vertices sets the vertices to Vertex handle void f set vertices Vertex handle v Vertex handle v1 Vertex handle v2 sets the vertices void f set neighbor int i Face handle n sets neighbors i to n Precondition i 2 void f set neighbors sets the neighbors to Face handle void f set neighbors Face handle n Face handle n1 Face handle n2 sets the neighbors Orientation void f reorient Changes the orientation of f by exchanging vertex with vertex 1 and neighbor with neighbor 1 void f ccw permute preforms a counterclockwise permutation of the vertices and neighbors of f void f cw permute preforms a clockwise permutation of the vertices and neighbors of f Checking bool f is valid bool verbose false performs any required test on a face If verbose is set to true messages are printed to give a precise indication of the kind of invalidity encountered Various void f for compact container void f for compact container These member functions are required by Triangulation data structure 3 because it uses Compact container to store its faces See the documentation of Compact container for the exact requirements I O istream istream is f Inputs any non combinatorial information possibly stored in the face ostream ostream os f Outputs any non combinatorial information possibly stored in the face Has ModelsCGAL Triangulation ds face base 2 Tds CGAL Triangulation face base 2 Traits Fb CGAL Regular triangulation face base 2 Traits Fb CGAL Constrained triangulation face base 2 Traits Fb CGAL Triangulation face base with info 2 Info Traits Fb See AlsoTriangulationDSVertexBase 2 TriangulationDataStructure 2 Face TriangulationFaceBase 2 Triangulation data structure 2 Vb Fb Next TriangulationDataStructure 2 Face Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/TDS_2_ref/Concept_TriangulationDSFaceBase_2.html", "title": "triangulationdsfacebase_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './TDS_2_ref/TriangulationDSFaceBase_2.tex' -->\n<html> <head>  \n<title>TriangulationDSFaceBase_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_961\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_908\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_TriangulationDSFaceBase_2\"></A>\n<h2><I>TriangulationDSFaceBase_2</I></h2>\n<P>\n\n<H3>Definition</H3>The concept <I><A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A></I> describes the requirements for\nthe base face of a <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I>.\n<P>\n\nNote that if  the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> \nis plugged  into a triangulation class, \nthe face base class may have  additional geometric\nrequirements depending on the triangulation class.\n<P>\n\nAt the base level, \n(see Sections&nbsp;<A HREF=\"../Triangulation_2/Chapter_main.html#Section_2D_Triangulations_Software_Design\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A> \nand&nbsp;<A HREF=\"../TDS_2/Chapter_main.html#2D_TDS_default\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>),\na  face stores handles\n on  its three vertices  and on  the three neighboring faces.\nThe vertices and neighbors are indexed 0,1 and 2.\nNeighbor <MATH><I>i</I></MATH> lies <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to vertex <MATH><I>i</I></MATH>.\n<P>\n\nSince the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> is the class \nwhich defines the handle\ntypes, the face base class has to be somehow \nparameterized by the triangulation\ndata structure.  But since the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\nitself is parameterized by the face and vertex\nbase classes, there is a cycle in the definition of these classes.  \nIn order\nto break the cycle, the base classes for faces and vertices\n which are plugged in to instantiate a\n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\nuse a <I>void</I> as triangulation\ndata structure parameter. Then, \nthe <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\n uses a <I>rebind</I>  mecanism (similar to the one specified in\n<I>std::allocator</I>) in order to plug itself \nas parameter in the face and vertex  base classes. \nThis mecanism requires that the base class  provides\na templated nested class <I>Rebind_TDS</I> that\nitself provides \n the subtype <I>Rebind_TDS&lt;TDS2&gt;::Other</I>\nwhich is the <I>rebound</I> version of the base class.\n This <I>rebound</I> base class is  the class\nthat the   <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\n actually  uses  as a base class for the class\n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>::Face</I>.\n<P>\n\n<H3>Types</H3>\nThe concept <I><A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A></I> has to provide the following types.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;typename TDS2&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A>:: struct Rebind_TDS;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    This nested template class has to define a type <I>Other</I> which is the\n<I>rebound</I> face base, where  the \n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> is actually  plugged in.\nThis type  <I>Other</I>  will be the actual  base \nof the class <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>::Face</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Triangulation_data_structure\"></A>\n<A NAME=\"Typedef_Triangulation_data_structure\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Triangulation_data_structure;\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle\"></A>\n<A NAME=\"Typedef_Vertex_handle\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Vertex_handle;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle\"></A>\n<A NAME=\"Typedef_Face_handle\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Face_handle;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>  \n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A> f;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A> f ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle v0,<BR>\n\nVertex_handle v1,<BR>\n\nVertex_handle v2);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Initializes the vertices with <I>v0, v1, v2</I> and the neighbors \nwith <I>Face_handle()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A> f ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle v0,<BR>\n\nVertex_handle v1,<BR>\n\nVertex_handle v2,<BR>\n\nFace_handle n0,<BR>\n\nFace_handle n1,<BR>\n\nFace_handle n2,<BR>\n\n);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    initializes the vertices with <I> v0,v1, v2</I> and the neighbors with\n<I>n0, n1, n2</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertex6int_i9_const;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.vertex ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vertex <I>i</I> of <I>f</I> .<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 2</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_vertex6Vertex_handle_v9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.has_vertex ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>v</I> is a vertex of <I>f</I> .\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_vertex6Vertex_handle_v+_int__i9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.has_vertex ( Vertex_handle v,  int&amp; i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    as above, and sets <I>i</I> to the index of <I>v</I> in <I>f</I> .\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_vertex_index6Vertex_handle_v9_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.vertex_index ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of <I>v</I> in <I>f</I> .\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_neighbor6int_i9_const;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.neighbor ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the neighbor <I>i</I> of <I>f</I> .<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 2</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_neighbor6Face_handle_n9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.has_neighbor ( Face_handle n)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>n</I> is a neighbor of <I>f</I> .\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_neigbor6Face_handle_n+_int__i9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.has_neigbor ( Face_handle n,  int&amp; i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    as above, and sets i to the index of <I>n</I> in <I>f</I> .\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_face_index6const_Face_handle_n9_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.face_index ( const Face_handle n)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of neighbor <I>n</I> in <I>f</I> .\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Setting</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertex6int_i+_Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.set_vertex ( int i,  Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets vertex <I>i</I> to <I>v</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 2</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertices69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.set_vertices ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the vertices to <I>Vertex_handle()</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertices6Vertex_handle*_v0+_Vertex_handle_v1+_Vertex_handle_v29;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    f.set_vertices ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle* v0,<BR>\n\nVertex_handle v1,<BR>\n\nVertex_handle v2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_neighbor6int_i+_Face_handle_n9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.set_neighbor ( int i,  Face_handle n)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets neighbors <I>i</I> to <I>n</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 2</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_neighbors69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.set_neighbors ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the neighbors to <I>Face_handle()</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_neighbors6Face_handle_n0+_Face_handle_n1+_Face_handle_n29;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    f.set_neighbors ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Face_handle n0,<BR>\n\nFace_handle n1,<BR>\n\nFace_handle n2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the neighbors.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Orientation</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_reorient69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.reorient ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Changes the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of <I>f</I>  by exchanging <I>vertex(0)</I>\nwith <I>vertex(1)</I> and <I>neighbor(0)</I> with <I>neighbor(1)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_ccw_permute69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.ccw_permute ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    preforms a counterclockwise permutation of the\n vertices and neighbors of <I>f</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_cw_permute69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.cw_permute ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    preforms a clockwise permutation of the\n vertices and neighbors of <I>f</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Checking</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.is_valid ( bool verbose = false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    performs any required test on a face.<BR>\n\nIf <I>verbose</I> is set to <I>true</I>, messages are printed to give\na precise indication of the kind of invalidity encountered.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Various</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_*_for_compact_container69_const;\"></A>\nvoid *\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.for_compact_container ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_*___for_compact_container69;\"></A>\nvoid * &amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.for_compact_container ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n\n These member functions are required by <I><A HREF=\"../TriangulationDS_3_ref/Class_Triangulation_data_structure_3.html#Cross_link_anchor_1008\">Triangulation_data_structure_3</A></I>\n  because it uses <I><A HREF=\"../STL_Extension_ref/Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A></I> to store its faces.  See the\n  documentation of <I><A HREF=\"../STL_Extension_ref/Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A></I> for the exact requirements.\n<P>\n\n<H3>I/O</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    istream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     istream&amp; is &gt;&gt;  &amp; f<A NAME=\"Function_istream__operator99_6istream__is+_TriangulationDSFaceBase_2___f9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inputs any non combinatorial information possibly stored in  the face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  f<A NAME=\"Function_ostream__operator66_6ostream__os+_const_TriangulationDSFaceBase_2___f9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Outputs any non combinatorial information possibly stored in  the face.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3><I><A HREF=\"Class_Triangulation_ds_face_base_2.html#Cross_link_anchor_967\">CGAL::Triangulation_ds_face_base_2</A>&lt;Tds&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Traits,Fb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_face_base_2.html#Cross_link_anchor_930\">CGAL::Regular_triangulation_face_base_2</A>&lt;Traits,Fb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Constrained_triangulation_face_base_2.html#Cross_link_anchor_914\">CGAL::Constrained_triangulation_face_base_2</A>&lt;Traits,Fb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_with_info_2.html#Cross_link_anchor_948\">CGAL::Triangulation_face_base_with_info_2</A>&lt;Info,Traits,Fb&gt;</I>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A></I><BR>\n\n<I><A HREF=\"Concept_TriangulationDataStructure_2--Face.html#Cross_link_anchor_962\">TriangulationDataStructure_2::Face</A></I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Concept_TriangulationFaceBase_2.html#Cross_link_anchor_934\">TriangulationFaceBase_2</A></I><BR>\n\n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_TriangulationDataStructure_2--Face.html\"><I>TriangulationDataStructure_2::Face</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_34!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39452.0}