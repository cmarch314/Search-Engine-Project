{"text": "View Javadoc 1 2 Created on Mar 12 2 5 3 4 5 package edu uci isr impromptu pie 6 7 import java awt Color 8 import java awt Point 9 1 import org apache batik util SVGConstants 11 import org w3c dom Element 12 import org w3c dom Text 13 import org w3c dom events Event 14 import org w3c dom events EventListener 15 import org w3c dom svg SVGDocument 16 17 import edu uci isr impromptu security SecurityConstants 18 19 2 A dot for a file Adapted from Ben Pillet s code 21 22 Its coordinate is described by both a relative radius and relative dot 23 24 The radius tells how far the dot is relative to the center of the pie 25 A is at the center a value less than 1 is within the pie and shared 26 and a value larger than 1 is within the private space thus not shared 27 Such a relative radius allows different peers have different dimensions 28 29 The angle tells where within the slice the dot lies So when peers join 3 and leave the dot can remain in a stable position 31 32 These properties are also stored in the repository for future use 33 34 author Jie Ren 35 36 public class Dot implements EventListener 37 38 The owning document 39 private SVGDocument document 4 The group element that represents the whole dot 41 private Element group 42 The radius of the dot circle 43 private double dotRadius 44 The stroke width of the highlight circle 45 private String oldStrokeWidth 46 The element of the circle 47 private Element fileDot 48 The element for the file name 49 private Text fileName 5 The file name for this dot 51 private String name 52 The local file path for the dot Only set for dots in the local slice peer 53 private String localPath null 54 The color of the dot 55 private Color dotColor 56 The color of the outer ring of the dot Set when the file is accessed by others 57 private Color ringColor null 58 The last peer to access this file 59 we need to keep track of this so that we can update dot colors when a peer changes color 6 it is not enough to know the old color in the rare case where two peers can have the same color 61 private SlicePeer lastAccessPeer null 62 The sharing level 63 private int sharingLevel SecurityConstants LEVEL PRIVATE 64 The coordinate of this dot in the pie 65 Keep the Coordinate class as is using an absolute radius 66 but the dot only uses relative radius and relative angle 67 private Coordinate location 68 private SlicePeer owner 69 7 71 Create a new dot 72 73 param document the owning document 74 param fileName the file name of the dot 75 param uColor the color of the dot 76 param owner the owner peer 77 78 public Dot SVGDocument document String fileName Color uColor SlicePeer owner 79 8 document document 81 owner owner 82 83 use the dual purpose template to create a new dot 84 group Element document getElementById Pie ID DRAGGING DELEGATE cloneNode true 85 fileDot Element group getElementsByTagName SVGConstants SVG CIRCLE TAG item 86 Let ourself handle the two mouse events 87 instead of JavaScript so we can save storage space for Batik s js jar 88 All right let the owner pie handle these events so no duplicate processing 89 AbstractNode fileDot addEventListener SVGConstants SVG MOUSEOVER EVENT TYPE 9 this false 91 AbstractNode fileDot addEventListener SVGConstants SVG MOUSEOUT EVENT TYPE 92 this false 93 fileDot setAttributeNS null SVGConstants SVG FILTER ATTRIBUTE FILTER 94 fileDot removeAttribute SVGConstants SVG ID ATTRIBUTE 95 get the template stroke width for later mouse over restoration 96 oldStrokeWidth fileDot getAttribute SVGConstants SVG STROKE WIDTH ATTRIBUTE 97 For normal display no stroke 98 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE Configuration SIZE STROKE WIDTH 99 Element fileLabel Element group getElementsByTagName SVGConstants SVG TEXT TAG item 1 fileLabel removeAttribute SVGConstants SVG ID ATTRIBUTE 1 1 fileName Text fileLabel getFirstChild 1 2 1 3 setFileName fileName 1 4 setColor uColor 1 5 dotRadius Integer parseInt fileDot getAttribute SVGConstants SVG R ATTRIBUTE 1 6 setSize dotRadius 1 7 1 8 group setAttributeNS null SVGConstants SVG STYLE ATTRIBUTE Pie VISIBILITY VISIBLE 1 9 11 111 112 Get the owner peer 113 return the owner peer 114 115 public SlicePeer getOwner 116 return owner 117 118 119 12 Get the last peer to access the file represented by this dot 121 return the last peer to access the dot 122 123 public SlicePeer getLastAccessPeer 124 return lastAccessPeer 125 126 127 128 Set the new file name for the dot 129 param fileName the new file name 13 131 public void setFileName String fileName 132 133 name fileName 134 group setAttribute SVGConstants SVG ID ATTRIBUTE name 135 fileName setData name 136 137 138 139 Get the file name for this dot 14 return the file name 141 142 public String getFileName 143 return name 144 145 146 147 Set the local file path for this dot 148 param localPath the local file path 149 15 public void setLocalPath String localPath 151 localPath localPath 152 153 154 155 Get the local file path for this dot 156 return the local file path Null if this dot belongs to a remote peer 157 158 public String getLocalPath 159 return localPath 16 161 162 163 Open the file represented by the dot from the proxy 164 165 public void openFile 166 167 Platform openFile name 168 169 17 171 Delete the file represented by the dot from the proxy 172 173 public void deleteFile 174 175 Platform deleteFile name 176 177 178 Set when a message is received that this dot s file is modified 179 Used as a secondary indicator since the file system has a delay in 18 getting the latest modification time 181 private boolean fileModified false 182 183 Save the file in the repository back to where it was before it was imported 184 185 186 public void saveFile 187 Platform exportFile name localPath 188 fileModified false 189 19 191 192 Get whether the dot s file has been modifiled 193 194 return true if it is modified false if not Always false for non local dots 195 196 public boolean getFileModified 197 boolean result false 198 if localPath null 199 Only on Windows this isNewer is trustworthy Mac would always return true 2 result Platform isNewer Platform getDestinationPrefix name localPath 2 1 The file system driver does not immediately return the 2 2 current modification time so we use fileModified as a secondary 2 3 indicator 2 4 if result 2 5 result fileModified 2 6 2 7 return result 2 8 2 9 21 211 Mark that the dot s file has been modified Only change local dots 212 213 public void setFileModified 214 if localPath null 215 fileModified true 216 217 218 219 Set the color for the dot 22 param uColor the new color 221 222 public void setColor Color uColor 223 224 dotColor uColor 225 fileDot setAttributeNS null SVGConstants CSS FILL PROPERTY PieUtils getRGBString dotColor 226 227 228 229 Set the color for the outter ring of the dot 23 param rColor the new color of the ring 231 232 public void setRingColor Color rColor 233 234 ringColor rColor 235 fileDot setAttributeNS null SVGConstants CSS STROKE PROPERTY PieUtils getRGBString ringColor 236 if ringColor equals dotColor 237 if this is a different color than the dot color show it 238 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE oldStrokeWidth 239 24 241 242 243 Set the peer that last accessed the dot 244 param lastPeer the last peer to access the dot 245 246 public void setLastAccessPeer SlicePeer lastPeer 247 248 lastAccessPeer lastPeer 249 25 251 252 Set the new size for the dot circle 253 param dotSize the new size 254 255 public void setSize double dotSize 256 dotRadius dotSize 257 fileDot setAttributeNS null SVGConstants SVG R ATTRIBUTE String valueOf dotSize 258 259 26 261 Get the size for the dot circle 262 return the size for the dot 263 264 public double getSize 265 return dotRadius 266 267 268 269 Change the dots size 27 param shrink if true reduce the size by 1 if false enlarge the size by 1 271 272 public void changeSize boolean shrink 273 double newDotRadius 274 if shrink 275 newDotRadius dotRadius 9 1 276 else 277 newDotRadius dotRadius 11 1 278 setSize newDotRadius 279 28 281 282 Get the top level g element 283 return the top g element 284 285 public Element getGroupElement 286 return group 287 288 289 29 Get the circle element 291 return the circle element 292 293 public Element getCircleElement 294 return fileDot 295 296 297 298 Highlight the dot 299 param highlight true to turn on the highlight false to turn off highlight 3 3 1 public void highlightDot boolean highlight 3 2 3 3 group getAttributes getNamedItem SVGConstants CSS OPACITY PROPERTY setNodeValue 3 4 highlight 1 3 5 3 6 3 7 private boolean showSelection false 3 8 3 9 Select the dot 31 311 public void select 312 Just changing the dot color can be confusing if there are other 313 people choosing similar colors Can probably use an opacity filter filter 314 if showSelection 315 fileDot setAttributeNS null SVGConstants CSS FILL PROPERTY Configuration COLOR SELECTED 316 317 318 319 Deselect the dot 32 321 public void deselect 322 fileDot setAttributeNS null SVGConstants CSS FILL PROPERTY PieUtils getRGBString dotColor 323 324 325 326 Tick count for blinking 327 328 private int blinkCount 329 33 blink functions should be synchronized 331 332 start counting for blink 333 334 public synchronized void startBlink int blinkLength 335 blinkCount blinkLength 336 337 338 339 Blink the dot by setting its stroke width on and off 34 341 public synchronized void blink 342 int trick 343 if ringColor null 344 blinking should stop at no ring 345 trick 346 347 else 348 trick 1 349 35 if blinkCount 2 trick 351 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE oldStrokeWidth 352 353 else 354 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE Configuration SIZE STROKE WIDTH 355 356 After blinkCount if it is then blinking stops When there is a ring 357 color we want blinking to stop at a width 358 blinkCount 359 36 361 362 Whether blink has finished 363 return true if blink has finished 364 365 public synchronized boolean blinked 366 defensive in case blinkCount drops below 367 return blinkCount 368 369 37 371 Handle mouse over and mouse out events 372 373 public void handleEvent Event evt 374 String eventType evt getType 375 376 if ringColor null 377 If we have no different ring then when mouse is out we reduce the ring to no width 378 if eventType equals SVGConstants SVG MOUSEOVER EVENT TYPE 379 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE oldStrokeWidth 38 381 else if eventType equals SVGConstants SVG MOUSEOUT EVENT TYPE 382 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE Configuration SIZE STROKE WIDTH 383 384 385 else 386 If we have a different colored ring leave it when the mosue is out 387 if eventType equals SVGConstants SVG MOUSEOVER EVENT TYPE 388 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE Configuration SIZE STROKE WIDTH 389 39 else if eventType equals SVGConstants SVG MOUSEOUT EVENT TYPE 391 fileDot setAttributeNS null SVGConstants SVG STROKE WIDTH ATTRIBUTE oldStrokeWidth 392 393 394 395 396 397 Set the location of this dot with relative coordiante 398 This is supposed to be used to add files from other peers 399 The radius and angle are all relative values 4 param radius the relative radius is the center less than 1 4 1 is within the pie larger than 1 is private 4 2 param angle the relative angle among the slice between and 1 4 3 param peers the number of present peers 4 4 param cardinal the relative position of this peer 4 5 4 6 public void setLocation double radius double angle int peers int cardinal 4 7 location new Coordinate adjustRadius radius Configuration RADIUS angle peers cardinal 4 8 setLocationAttribute 4 9 41 411 412 Set the location of this dot with absolute coordiante 413 This is used to support dropping a file by a local peer 414 param p the x y coordinate 415 param peers the number of present peers 416 param cardinal the relative position of this peer 417 418 public void setLocation Point p int peers int cardinal 419 location new Coordinate adjustPoint p peers cardinal 42 setLocationAttribute 421 422 423 424 Set the transform string of the top level group 425 with the x and y of the coordinate 426 427 private void setLocationAttribute 428 Point point location getAbsolutePoint 429 group setAttributeNS null SVGConstants SVG TRANSFORM ATTRIBUTE 43 PieUtils getTranslateString point getX point getY 431 432 433 434 Update the coordinate of the dot with an absolute coordiante 435 Should be called after a setLocaion method 436 param p the new absolute point 437 438 public void updateLocation Point p 439 location updateCoordinate adjustPoint p 44 setLocationAttribute 441 442 443 444 Update the coordinate of the dot with relative coordiante 445 Should be called after a setLocaion method 446 param radius the new relative radius 447 param angle the new relative angle 448 449 public void updateLocation double radius double angle 45 location updateCoordinate adjustRadius radius Configuration RADIUS angle 451 setLocationAttribute 452 453 454 455 Update the relative position of this dot s owing peer 456 Should be called after a setLocaion method 457 param peers the new number of peers 458 param cardinal the new relative position of this peer 459 46 public void updateCardinal int peers int cardinal 461 location updateCardinal peers cardinal 462 setLocationAttribute 463 464 465 466 Move the dot 467 param distanceX horizontal offset 468 param distanceY vertical offset 469 47 public void move double distanceX double distanceY 471 Point locPoint location getAbsolutePoint 472 double posX locPoint getX distanceX 473 double posY locPoint getY distanceY 474 locPoint setLocation posX posY 475 location updateCoordinate adjustPoint locPoint 476 setLocationAttribute 477 478 479 48 Get a point for the location of this dot relative to the pie 481 return a point for the dot 482 483 public Point getLocation 484 return location getAbsolutePoint 485 486 487 488 Get the sharing level for this dot 489 return the sharing level 49 491 public int getSharingLevel 492 This is a live lazy property which is always updated when it is read 493 calculateSharingLevel 494 return sharingLevel 495 496 497 498 Calculate the sharing level based on the radius of the dot 499 return the sharing level 5 5 1 private int calculateSharingLevel 5 2 sharingLevel PieUtils getSharingLevel location getRadius 5 3 return sharingLevel 5 4 5 5 5 6 5 7 Adjust a radius so it will not let a dot fall on the colorful mark 5 8 5 9 param radius the raw radius 51 return a new radius that will not touch the colorful marker 511 512 private double adjustRadius double radius 513 The coordinate is used as the center of the dot make sure 514 it plus the default dot radius does not touch the colorful 515 marker 516 517 Below are comments when we decided to put this in the coordinate 518 The single more compelling reason that we move it to Dot 519 is that Coordinate deals with absolute coordinates but we 52 are dealing a relative radius 521 522 In Dot this is read from template svg and we can probably 523 change from the consumer side dot But changing from 524 the producer side coordinate sounds tighter control 525 even though it is somewhat twingled with the dot 526 Since we cannot always accommodate arbitrary dot size enlarging 527 dots will touch markers then shall we move the dots 528 so putting it here is reasonable 529 Besides the best place to put this is right after the raw 53 radius is changed which happens here at the above four methods 531 In two such cases the absolute point produces radius 532 which is adjusted which will trigger back updating on 533 the originating absolute points 534 Also take the stroke width into consideration 535 double defaultDotRadius 8 Integer parseInt oldStrokeWidth 2 536 double defaultMargin 1 do not get too close 537 The relative radius of an 8 pixel dot s radius 538 double dotRadiusPercent defaultDotRadius Configuration RADIUS 539 double innerBound edu uci isr impromptu common Configuration LEVEL RADIUS 1 54 double outerBound edu uci isr impromptu common Configuration LEVEL RADIUS 541 double result radius 542 if radius innerBound radius dotRadiusPercent defaultMargin 543 innerBound 544 the radius is inside the marker but too close 545 result innerBound dotRadiusPercent defaultMargin 546 547 if radius innerBound radius dotRadiusPercent defaultMargin 548 outerBound 549 the radius is within or outside the marker but too close 55 treat the marker as private space another instance of secure by default 551 result outerBound dotRadiusPercent defaultMargin 552 553 return result 554 555 556 557 Adjust a radius so it will not let a dot fall on the colorful mark 558 param p the x y coordinate 559 param the adjusted point 56 561 private Point adjustPoint Point p 562 double radiusAbsolute Coordinate calculateRadius p 563 double radiusOriginal radiusAbsolute Configuration RADIUS 564 double radiusAdjusted adjustRadius radiusOriginal 565 double newRatio radiusAdjusted radiusOriginal 566 return new Point int p getX newRatio 567 int p getY newRatio 568 569 57 571 Get the relative radius for this dot 572 return the radius 573 574 public double getRadius 575 return location getRadius Configuration RADIUS 576 577 578 579 Get the relative angle for this dot 58 return the relative angle 581 582 public double getAngle 583 return location getRelativeAngle 584 585 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pie/Dot.html", "title": "dot xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>Dot xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../../apidocs/edu/uci/isr/impromptu/pie/Dot.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Mar 12, 2005</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> *</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> */</em>\n<a name=\"5\" href=\"#5\">5</a>   <strong>package</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/package-summary.html\">edu.uci.isr.impromptu.pie</a>;\n<a name=\"6\" href=\"#6\">6</a>   \n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.awt.Color;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.awt.Point;\n<a name=\"9\" href=\"#9\">9</a>   \n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.batik.util.SVGConstants;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.w3c.dom.Element;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> org.w3c.dom.Text;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> org.w3c.dom.events.Event;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> org.w3c.dom.events.EventListener;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> org.w3c.dom.svg.SVGDocument;\n<a name=\"16\" href=\"#16\">16</a>  \n<a name=\"17\" href=\"#17\">17</a>  <strong>import</strong> edu.uci.isr.impromptu.security.SecurityConstants;\n<a name=\"18\" href=\"#18\">18</a>  \n<a name=\"19\" href=\"#19\">19</a>  <em>/**<em>*</em></em>\n<a name=\"20\" href=\"#20\">20</a>  <em> * A dot, for a file. Adapted from Ben Pillet's code.</em>\n<a name=\"21\" href=\"#21\">21</a>  <em> * </em>\n<a name=\"22\" href=\"#22\">22</a>  <em> * Its coordinate is described by both a relative radius and relative dot.</em>\n<a name=\"23\" href=\"#23\">23</a>  <em> *</em>\n<a name=\"24\" href=\"#24\">24</a>  <em> * The radius tells how far the dot is relative to the center of the pie. </em>\n<a name=\"25\" href=\"#25\">25</a>  <em> * A 0 is at the center, a value less than 1 is within the pie (and shared),</em>\n<a name=\"26\" href=\"#26\">26</a>  <em> * and a value larger than 1 is within the private space (thus not shared).</em>\n<a name=\"27\" href=\"#27\">27</a>  <em> * Such a relative radius allows different peers have different dimensions.</em>\n<a name=\"28\" href=\"#28\">28</a>  <em> * </em>\n<a name=\"29\" href=\"#29\">29</a>  <em> * The angle tells where within the slice the dot lies. So when peers join </em>\n<a name=\"30\" href=\"#30\">30</a>  <em> * and leave the dot can remain in a \"stable\" position.</em>\n<a name=\"31\" href=\"#31\">31</a>  <em> * </em>\n<a name=\"32\" href=\"#32\">32</a>  <em> * These properties are also stored in the repository for future use. </em>\n<a name=\"33\" href=\"#33\">33</a>  <em> * </em>\n<a name=\"34\" href=\"#34\">34</a>  <em> * @author Jie Ren</em>\n<a name=\"35\" href=\"#35\">35</a>  <em> */</em>\n<a name=\"36\" href=\"#36\">36</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> implements EventListener  \n<a name=\"37\" href=\"#37\">37</a>  {\n<a name=\"38\" href=\"#38\">38</a>      <em class=\"comment\">// The owning document</em>\n<a name=\"39\" href=\"#39\">39</a>      <strong>private</strong> SVGDocument \t\tdocument;\n<a name=\"40\" href=\"#40\">40</a>      <em class=\"comment\">// The group element that represents the whole dot</em>\n<a name=\"41\" href=\"#41\">41</a>      <strong>private</strong> Element\t\t\t\tgroup;\n<a name=\"42\" href=\"#42\">42</a>      <em class=\"comment\">// The radius of the dot circle</em>\n<a name=\"43\" href=\"#43\">43</a>      <strong>private</strong> <strong>double</strong> \t\t\t\tdotRadius;\n<a name=\"44\" href=\"#44\">44</a>      <em class=\"comment\">// The stroke width of the highlight circle</em>\n<a name=\"45\" href=\"#45\">45</a>      <strong>private</strong> String\t\t\t\toldStrokeWidth;\n<a name=\"46\" href=\"#46\">46</a>      <em class=\"comment\">// The element of the circle </em>\n<a name=\"47\" href=\"#47\">47</a>      <strong>private</strong> Element \t\t\tfileDot;\n<a name=\"48\" href=\"#48\">48</a>      <em class=\"comment\">// The element for the file name</em>\n<a name=\"49\" href=\"#49\">49</a>      <strong>private</strong> Text \t\t\t\tfileName;\n<a name=\"50\" href=\"#50\">50</a>      <em class=\"comment\">// The file name for this dot</em>\n<a name=\"51\" href=\"#51\">51</a>      <strong>private</strong> String\t\t\t\tname;\n<a name=\"52\" href=\"#52\">52</a>      <em class=\"comment\">// The local file path for the dot. Only set for dots in the local slice peer.</em>\n<a name=\"53\" href=\"#53\">53</a>      <strong>private</strong> String\t\t\t\tlocalPath = <strong>null</strong>;\n<a name=\"54\" href=\"#54\">54</a>      <em class=\"comment\">// The color of the dot</em>\n<a name=\"55\" href=\"#55\">55</a>      <strong>private</strong> Color\t\t\t\tdotColor;\n<a name=\"56\" href=\"#56\">56</a>      <em class=\"comment\">// The color of the outer ring of the dot. Set when the file is accessed by others.</em>\n<a name=\"57\" href=\"#57\">57</a>      <strong>private</strong> Color\t\t\t\tringColor = <strong>null</strong>;  \n<a name=\"58\" href=\"#58\">58</a>      <em class=\"comment\">// The last peer to access this file</em>\n<a name=\"59\" href=\"#59\">59</a>      <em class=\"comment\">//   we need to keep track of this so that we can update dot colors when a peer changes color</em>\n<a name=\"60\" href=\"#60\">60</a>      <em class=\"comment\">//   it is not enough to know the old color in the rare case where two peers can have the same color</em>\n<a name=\"61\" href=\"#61\">61</a>      <strong>private</strong> SlicePeer\t\t\tlastAccessPeer = <strong>null</strong>;\n<a name=\"62\" href=\"#62\">62</a>      <em class=\"comment\">//  The sharing level</em>\n<a name=\"63\" href=\"#63\">63</a>      <strong>private</strong> <strong>int</strong> \t\t\t\tsharingLevel = SecurityConstants.LEVEL_PRIVATE;\n<a name=\"64\" href=\"#64\">64</a>      <em class=\"comment\">// The coordinate of this dot in the pie</em>\n<a name=\"65\" href=\"#65\">65</a>      <em class=\"comment\">// Keep the Coordinate class as is (using an absolute radius), </em>\n<a name=\"66\" href=\"#66\">66</a>      <em class=\"comment\">// but the dot only uses relative radius and relative angle</em>\n<a name=\"67\" href=\"#67\">67</a>      <strong>private</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a> \t\t\tlocation;\n<a name=\"68\" href=\"#68\">68</a>      <strong>private</strong> SlicePeer\t\t\towner;\n<a name=\"69\" href=\"#69\">69</a>      \n<a name=\"70\" href=\"#70\">70</a>      <em>/**<em>*</em></em>\n<a name=\"71\" href=\"#71\">71</a>  <em>     * Create a new dot</em>\n<a name=\"72\" href=\"#72\">72</a>  <em>     * </em>\n<a name=\"73\" href=\"#73\">73</a>  <em>     * @param _document\t\t\tthe owning document</em>\n<a name=\"74\" href=\"#74\">74</a>  <em>     * @param _fileName\t\t\tthe file name of the dot</em>\n<a name=\"75\" href=\"#75\">75</a>  <em>     * @param _uColor\t\t\tthe color of the dot</em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     * @param _owner\t\t\tthe owner peer</em>\n<a name=\"77\" href=\"#77\">77</a>  <em>     */</em>\n<a name=\"78\" href=\"#78\">78</a>      <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a>(SVGDocument _document, String _fileName, Color _uColor, <a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> _owner)\n<a name=\"79\" href=\"#79\">79</a>      {\n<a name=\"80\" href=\"#80\">80</a>          document = _document;\n<a name=\"81\" href=\"#81\">81</a>          owner = _owner;\n<a name=\"82\" href=\"#82\">82</a>  \n<a name=\"83\" href=\"#83\">83</a>          <em class=\"comment\">// use the dual-purpose template to create a new dot </em>\n<a name=\"84\" href=\"#84\">84</a>          group = (Element)document.getElementById(Pie.ID_DRAGGING_DELEGATE).cloneNode(<strong>true</strong>);\n<a name=\"85\" href=\"#85\">85</a>          fileDot = (Element)group.getElementsByTagName(SVGConstants.SVG_CIRCLE_TAG).item(0);\n<a name=\"86\" href=\"#86\">86</a>          <em class=\"comment\">// Let ourself handle the two mouse events, </em>\n<a name=\"87\" href=\"#87\">87</a>          <em class=\"comment\">// \t\tinstead of JavaScript, so we can save storage space for Batik's js.jar</em>\n<a name=\"88\" href=\"#88\">88</a>          <em class=\"comment\">// All right, let the owner pie handle these events so no duplicate processing</em>\n<a name=\"89\" href=\"#89\">89</a>          <em class=\"comment\">//((AbstractNode)fileDot).addEventListener(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE,</em>\n<a name=\"90\" href=\"#90\">90</a>          <em class=\"comment\">//        this, false);</em>\n<a name=\"91\" href=\"#91\">91</a>          <em class=\"comment\">//((AbstractNode)fileDot).addEventListener(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE,</em>\n<a name=\"92\" href=\"#92\">92</a>          <em class=\"comment\">//        this, false);</em>\n<a name=\"93\" href=\"#93\">93</a>          <em class=\"comment\">//fileDot.setAttributeNS(null, SVGConstants.SVG_FILTER_ATTRIBUTE, FILTER);</em>\n<a name=\"94\" href=\"#94\">94</a>          fileDot.removeAttribute(SVGConstants.SVG_ID_ATTRIBUTE);\n<a name=\"95\" href=\"#95\">95</a>          <em class=\"comment\">// get the template stroke width for later mouse over restoration</em>\n<a name=\"96\" href=\"#96\">96</a>          oldStrokeWidth = fileDot.getAttribute(SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE);\n<a name=\"97\" href=\"#97\">97</a>          <em class=\"comment\">// For normal display, no stroke</em>\n<a name=\"98\" href=\"#98\">98</a>          fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, Configuration.SIZE_STROKE_WIDTH);\n<a name=\"99\" href=\"#99\">99</a>          Element fileLabel = (Element)group.getElementsByTagName(SVGConstants.SVG_TEXT_TAG).item(0);\n<a name=\"100\" href=\"#100\">100</a>         fileLabel.removeAttribute(SVGConstants.SVG_ID_ATTRIBUTE);\n<a name=\"101\" href=\"#101\">101</a>         fileName = (Text)fileLabel.getFirstChild();\n<a name=\"102\" href=\"#102\">102</a> \n<a name=\"103\" href=\"#103\">103</a>         setFileName(_fileName);\n<a name=\"104\" href=\"#104\">104</a>         setColor(_uColor);\n<a name=\"105\" href=\"#105\">105</a>         dotRadius = Integer.parseInt(fileDot.getAttribute(SVGConstants.SVG_R_ATTRIBUTE));\n<a name=\"106\" href=\"#106\">106</a>         setSize(dotRadius);\n<a name=\"107\" href=\"#107\">107</a>         \n<a name=\"108\" href=\"#108\">108</a>         group.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STYLE_ATTRIBUTE, Pie.VISIBILITY_VISIBLE);\n<a name=\"109\" href=\"#109\">109</a>     }\n<a name=\"110\" href=\"#110\">110</a>     \n<a name=\"111\" href=\"#111\">111</a>     <em>/**<em>*</em></em>\n<a name=\"112\" href=\"#112\">112</a> <em>     * Get the owner peer</em>\n<a name=\"113\" href=\"#113\">113</a> <em>     * @return the owner peer</em>\n<a name=\"114\" href=\"#114\">114</a> <em>     */</em>\n<a name=\"115\" href=\"#115\">115</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> getOwner() {\n<a name=\"116\" href=\"#116\">116</a>         <strong>return</strong> owner;\n<a name=\"117\" href=\"#117\">117</a>     }\n<a name=\"118\" href=\"#118\">118</a>     \n<a name=\"119\" href=\"#119\">119</a>     <em>/**<em>*</em></em>\n<a name=\"120\" href=\"#120\">120</a> <em>     * Get the last peer to access the file represented by this dot</em>\n<a name=\"121\" href=\"#121\">121</a> <em>     * @return the last peer to access the dot</em>\n<a name=\"122\" href=\"#122\">122</a> <em>     */</em>\n<a name=\"123\" href=\"#123\">123</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> getLastAccessPeer() {\n<a name=\"124\" href=\"#124\">124</a>         <strong>return</strong> lastAccessPeer;\n<a name=\"125\" href=\"#125\">125</a>     }\n<a name=\"126\" href=\"#126\">126</a> \n<a name=\"127\" href=\"#127\">127</a>     <em>/**<em>*</em></em>\n<a name=\"128\" href=\"#128\">128</a> <em>     * Set the new file name for the dot</em>\n<a name=\"129\" href=\"#129\">129</a> <em>     * @param _fileName the new file name</em>\n<a name=\"130\" href=\"#130\">130</a> <em>     */</em>\n<a name=\"131\" href=\"#131\">131</a>     <strong>public</strong> <strong>void</strong> setFileName(String _fileName)\n<a name=\"132\" href=\"#132\">132</a>     {\n<a name=\"133\" href=\"#133\">133</a>         name = _fileName;\n<a name=\"134\" href=\"#134\">134</a>         group.setAttribute(SVGConstants.SVG_ID_ATTRIBUTE, name);\n<a name=\"135\" href=\"#135\">135</a>         fileName.setData(name);\n<a name=\"136\" href=\"#136\">136</a>     }\n<a name=\"137\" href=\"#137\">137</a> \n<a name=\"138\" href=\"#138\">138</a>     <em>/**<em>*</em></em>\n<a name=\"139\" href=\"#139\">139</a> <em>     * Get the file name for this dot</em>\n<a name=\"140\" href=\"#140\">140</a> <em>     * @return the file name</em>\n<a name=\"141\" href=\"#141\">141</a> <em>     */</em>\n<a name=\"142\" href=\"#142\">142</a>     <strong>public</strong> String getFileName() {\n<a name=\"143\" href=\"#143\">143</a>         <strong>return</strong> name;\n<a name=\"144\" href=\"#144\">144</a>     }\n<a name=\"145\" href=\"#145\">145</a> \n<a name=\"146\" href=\"#146\">146</a>     <em>/**<em>*</em></em>\n<a name=\"147\" href=\"#147\">147</a> <em>     * Set the local file path for this dot</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     * @param _localPath the local file path</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     */</em>\n<a name=\"150\" href=\"#150\">150</a>     <strong>public</strong> <strong>void</strong> setLocalPath(String _localPath) {\n<a name=\"151\" href=\"#151\">151</a>         localPath = _localPath;\n<a name=\"152\" href=\"#152\">152</a>     }\n<a name=\"153\" href=\"#153\">153</a>     \n<a name=\"154\" href=\"#154\">154</a>     <em>/**<em>*</em></em>\n<a name=\"155\" href=\"#155\">155</a> <em>     * Get the local file path for this dot </em>\n<a name=\"156\" href=\"#156\">156</a> <em>     * @return the local file path. Null if this dot belongs to a remote peer</em>\n<a name=\"157\" href=\"#157\">157</a> <em>     */</em>\n<a name=\"158\" href=\"#158\">158</a>     <strong>public</strong> String getLocalPath() {\n<a name=\"159\" href=\"#159\">159</a>         <strong>return</strong> localPath;\n<a name=\"160\" href=\"#160\">160</a>     }\n<a name=\"161\" href=\"#161\">161</a> \n<a name=\"162\" href=\"#162\">162</a>     <em>/**<em>*</em></em>\n<a name=\"163\" href=\"#163\">163</a> <em>     * Open the file represented by the dot, from the proxy</em>\n<a name=\"164\" href=\"#164\">164</a> <em>     */</em>\n<a name=\"165\" href=\"#165\">165</a>     <strong>public</strong> <strong>void</strong> openFile()\n<a name=\"166\" href=\"#166\">166</a>     {\n<a name=\"167\" href=\"#167\">167</a>         Platform.openFile(name);\n<a name=\"168\" href=\"#168\">168</a>     }\n<a name=\"169\" href=\"#169\">169</a> \n<a name=\"170\" href=\"#170\">170</a>     <em>/**<em>*</em></em>\n<a name=\"171\" href=\"#171\">171</a> <em>     * Delete the file represented by the dot, from the proxy</em>\n<a name=\"172\" href=\"#172\">172</a> <em>     */</em>\n<a name=\"173\" href=\"#173\">173</a>     <strong>public</strong> <strong>void</strong> deleteFile()\n<a name=\"174\" href=\"#174\">174</a>     {\n<a name=\"175\" href=\"#175\">175</a>         Platform.deleteFile(name);\n<a name=\"176\" href=\"#176\">176</a>     }\n<a name=\"177\" href=\"#177\">177</a> \n<a name=\"178\" href=\"#178\">178</a>     <em class=\"comment\">// Set when a message is received that this dot's file is modified.</em>\n<a name=\"179\" href=\"#179\">179</a>     <em class=\"comment\">// Used as a secondary indicator since the file system has a delay in </em>\n<a name=\"180\" href=\"#180\">180</a>     <em class=\"comment\">//\t\tgetting the latest modification time</em>\n<a name=\"181\" href=\"#181\">181</a>     <strong>private</strong> <strong>boolean</strong>\tfileModified = false;\n<a name=\"182\" href=\"#182\">182</a>     <em>/**<em>*</em></em>\n<a name=\"183\" href=\"#183\">183</a> <em>     * Save the file in the repository back to where it was before it was imported</em>\n<a name=\"184\" href=\"#184\">184</a> <em>     *</em>\n<a name=\"185\" href=\"#185\">185</a> <em>     */</em>\n<a name=\"186\" href=\"#186\">186</a>     <strong>public</strong> <strong>void</strong> saveFile() {\n<a name=\"187\" href=\"#187\">187</a>         Platform.exportFile(name, localPath);\n<a name=\"188\" href=\"#188\">188</a>         fileModified = false;\n<a name=\"189\" href=\"#189\">189</a>     }\n<a name=\"190\" href=\"#190\">190</a>     \n<a name=\"191\" href=\"#191\">191</a>     <em>/**<em>*</em></em>\n<a name=\"192\" href=\"#192\">192</a> <em>     * Get whether the dot's file has been modifiled.</em>\n<a name=\"193\" href=\"#193\">193</a> <em>     * </em>\n<a name=\"194\" href=\"#194\">194</a> <em>     * @return true if it is modified, false if not. Always false for non local dots.</em>\n<a name=\"195\" href=\"#195\">195</a> <em>     */</em>\n<a name=\"196\" href=\"#196\">196</a>     <strong>public</strong> <strong>boolean</strong> getFileModified() {\n<a name=\"197\" href=\"#197\">197</a>         <strong>boolean</strong>\tresult = false;\n<a name=\"198\" href=\"#198\">198</a>         <strong>if</strong> (localPath != <strong>null</strong>) {\n<a name=\"199\" href=\"#199\">199</a>             <em class=\"comment\">// Only on Windows this isNewer is trustworthy. Mac would always return true. </em>\n<a name=\"200\" href=\"#200\">200</a> \t        result = Platform.isNewer(Platform.getDestinationPrefix() + name, localPath);\n<a name=\"201\" href=\"#201\">201</a> \t        <em class=\"comment\">// The file system driver does not immediately return the  </em>\n<a name=\"202\" href=\"#202\">202</a> \t        <em class=\"comment\">// current modification time, so we use fileModified as a secondary </em>\n<a name=\"203\" href=\"#203\">203</a> \t        <em class=\"comment\">// indicator. </em>\n<a name=\"204\" href=\"#204\">204</a>             <strong>if</strong> (!result) \n<a name=\"205\" href=\"#205\">205</a>                 result = fileModified;\n<a name=\"206\" href=\"#206\">206</a>         }\n<a name=\"207\" href=\"#207\">207</a>         <strong>return</strong> result;\n<a name=\"208\" href=\"#208\">208</a>     }\n<a name=\"209\" href=\"#209\">209</a>     \n<a name=\"210\" href=\"#210\">210</a>     <em>/**<em>*</em></em>\n<a name=\"211\" href=\"#211\">211</a> <em>     * Mark that the dot's file has been modified. Only change local dots.</em>\n<a name=\"212\" href=\"#212\">212</a> <em>     */</em>\n<a name=\"213\" href=\"#213\">213</a>     <strong>public</strong> <strong>void</strong> setFileModified() {\n<a name=\"214\" href=\"#214\">214</a>         <strong>if</strong> (localPath != <strong>null</strong>)\n<a name=\"215\" href=\"#215\">215</a>             fileModified = <strong>true</strong>;\n<a name=\"216\" href=\"#216\">216</a>     }\n<a name=\"217\" href=\"#217\">217</a>     \n<a name=\"218\" href=\"#218\">218</a>     <em>/**<em>*</em></em>\n<a name=\"219\" href=\"#219\">219</a> <em>     * Set the color for the dot</em>\n<a name=\"220\" href=\"#220\">220</a> <em>     * @param uColor the new color</em>\n<a name=\"221\" href=\"#221\">221</a> <em>     */</em>\n<a name=\"222\" href=\"#222\">222</a>     <strong>public</strong> <strong>void</strong> setColor(Color uColor)\n<a name=\"223\" href=\"#223\">223</a>     {\n<a name=\"224\" href=\"#224\">224</a>         dotColor = uColor;\n<a name=\"225\" href=\"#225\">225</a>         fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, PieUtils.getRGBString(dotColor));\n<a name=\"226\" href=\"#226\">226</a>     }\n<a name=\"227\" href=\"#227\">227</a> \n<a name=\"228\" href=\"#228\">228</a>     <em>/**<em>*</em></em>\n<a name=\"229\" href=\"#229\">229</a> <em>     * Set the color for the outter ring of the dot</em>\n<a name=\"230\" href=\"#230\">230</a> <em>     * @param rColor the new color of the ring</em>\n<a name=\"231\" href=\"#231\">231</a> <em>     */</em>\n<a name=\"232\" href=\"#232\">232</a>     <strong>public</strong> <strong>void</strong> setRingColor(Color rColor)\n<a name=\"233\" href=\"#233\">233</a>     {\n<a name=\"234\" href=\"#234\">234</a>         ringColor = rColor;\n<a name=\"235\" href=\"#235\">235</a>         fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_STROKE_PROPERTY, PieUtils.getRGBString(ringColor));\n<a name=\"236\" href=\"#236\">236</a>         <strong>if</strong> (!ringColor.equals(dotColor)) {\n<a name=\"237\" href=\"#237\">237</a>             <em class=\"comment\">// if this is a different color than the dot color, show it </em>\n<a name=\"238\" href=\"#238\">238</a> \t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, oldStrokeWidth);\n<a name=\"239\" href=\"#239\">239</a>         }\n<a name=\"240\" href=\"#240\">240</a>     }\n<a name=\"241\" href=\"#241\">241</a>     \n<a name=\"242\" href=\"#242\">242</a>     <em>/**<em>*</em></em>\n<a name=\"243\" href=\"#243\">243</a> <em>     * Set the peer that last accessed the dot</em>\n<a name=\"244\" href=\"#244\">244</a> <em>     * @param lastPeer the last peer to access the dot</em>\n<a name=\"245\" href=\"#245\">245</a> <em>     */</em>\n<a name=\"246\" href=\"#246\">246</a>     <strong>public</strong> <strong>void</strong> setLastAccessPeer(<a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> lastPeer)\n<a name=\"247\" href=\"#247\">247</a>     {\n<a name=\"248\" href=\"#248\">248</a>         lastAccessPeer = lastPeer;\n<a name=\"249\" href=\"#249\">249</a>     }\n<a name=\"250\" href=\"#250\">250</a> \n<a name=\"251\" href=\"#251\">251</a>     <em>/**<em>*</em></em>\n<a name=\"252\" href=\"#252\">252</a> <em>     * Set the new size for the dot circle</em>\n<a name=\"253\" href=\"#253\">253</a> <em>     * @param dotSize the new size</em>\n<a name=\"254\" href=\"#254\">254</a> <em>     */</em>\n<a name=\"255\" href=\"#255\">255</a> \t<strong>public</strong> <strong>void</strong> setSize(<strong>double</strong> dotSize) {\n<a name=\"256\" href=\"#256\">256</a> \t\tdotRadius = dotSize;\n<a name=\"257\" href=\"#257\">257</a> \t\tfileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_R_ATTRIBUTE, String.valueOf(dotSize));\n<a name=\"258\" href=\"#258\">258</a> \t}\n<a name=\"259\" href=\"#259\">259</a> \t\n<a name=\"260\" href=\"#260\">260</a> \t<em>/**<em>*</em></em>\n<a name=\"261\" href=\"#261\">261</a> <em>\t * Get the size for the dot circle</em>\n<a name=\"262\" href=\"#262\">262</a> <em>\t * @return the size for the dot</em>\n<a name=\"263\" href=\"#263\">263</a> <em>\t */</em>\n<a name=\"264\" href=\"#264\">264</a> \t<strong>public</strong> <strong>double</strong> getSize() {\n<a name=\"265\" href=\"#265\">265</a> \t    <strong>return</strong> dotRadius;\n<a name=\"266\" href=\"#266\">266</a> \t}\n<a name=\"267\" href=\"#267\">267</a> \n<a name=\"268\" href=\"#268\">268</a>     <em>/**<em>*</em></em>\n<a name=\"269\" href=\"#269\">269</a> <em>     * Change the dots' size</em>\n<a name=\"270\" href=\"#270\">270</a> <em>     * @param shrink if true, reduce the size (by 10%). if false, enlarge the size (by 10%)</em>\n<a name=\"271\" href=\"#271\">271</a> <em>     */</em>\n<a name=\"272\" href=\"#272\">272</a> \t<strong>public</strong> <strong>void</strong> changeSize(<strong>boolean</strong> shrink) {\n<a name=\"273\" href=\"#273\">273</a> \t    <strong>double</strong>\tnewDotRadius = 0;\n<a name=\"274\" href=\"#274\">274</a> \t    <strong>if</strong> (shrink)\n<a name=\"275\" href=\"#275\">275</a> \t\t    newDotRadius = dotRadius * 9 / 10;\n<a name=\"276\" href=\"#276\">276</a> \t    <strong>else</strong>\n<a name=\"277\" href=\"#277\">277</a> \t        newDotRadius = dotRadius * 11 / 10;\n<a name=\"278\" href=\"#278\">278</a> \t    setSize(newDotRadius);\n<a name=\"279\" href=\"#279\">279</a> \t}\n<a name=\"280\" href=\"#280\">280</a> \t\n<a name=\"281\" href=\"#281\">281</a>     <em>/**<em>*</em></em>\n<a name=\"282\" href=\"#282\">282</a> <em>     * Get the top level g element</em>\n<a name=\"283\" href=\"#283\">283</a> <em>     * @return the top g element</em>\n<a name=\"284\" href=\"#284\">284</a> <em>     */</em>\n<a name=\"285\" href=\"#285\">285</a>     <strong>public</strong> Element getGroupElement() {\n<a name=\"286\" href=\"#286\">286</a>         <strong>return</strong> group;\n<a name=\"287\" href=\"#287\">287</a>     }\n<a name=\"288\" href=\"#288\">288</a>     \n<a name=\"289\" href=\"#289\">289</a>     <em>/**<em>*</em></em>\n<a name=\"290\" href=\"#290\">290</a> <em>     * Get the circle element</em>\n<a name=\"291\" href=\"#291\">291</a> <em>     * @return the circle element</em>\n<a name=\"292\" href=\"#292\">292</a> <em>     */</em>\n<a name=\"293\" href=\"#293\">293</a>     <strong>public</strong> Element getCircleElement() {\n<a name=\"294\" href=\"#294\">294</a>         <strong>return</strong> fileDot; \n<a name=\"295\" href=\"#295\">295</a>     }\n<a name=\"296\" href=\"#296\">296</a> \n<a name=\"297\" href=\"#297\">297</a>     <em>/**<em>*</em></em>\n<a name=\"298\" href=\"#298\">298</a> <em>     * Highlight the dot</em>\n<a name=\"299\" href=\"#299\">299</a> <em>     * @param highlight true to turn on the highlight, false to turn off highlight</em>\n<a name=\"300\" href=\"#300\">300</a> <em>     */</em>\n<a name=\"301\" href=\"#301\">301</a>     <strong>public</strong> <strong>void</strong> highlightDot(<strong>boolean</strong> highlight)\n<a name=\"302\" href=\"#302\">302</a>     {\n<a name=\"303\" href=\"#303\">303</a>         group.getAttributes().getNamedItem(SVGConstants.CSS_OPACITY_PROPERTY).setNodeValue(\n<a name=\"304\" href=\"#304\">304</a>                 highlight ? <span class=\"string\">\"1\"</span> : <span class=\"string\">\"0\"</span>);\n<a name=\"305\" href=\"#305\">305</a>     }\n<a name=\"306\" href=\"#306\">306</a> \n<a name=\"307\" href=\"#307\">307</a>     <strong>private</strong> <strong>boolean</strong> showSelection = false;\n<a name=\"308\" href=\"#308\">308</a>     <em>/**<em>*</em></em>\n<a name=\"309\" href=\"#309\">309</a> <em>     * Select the dot </em>\n<a name=\"310\" href=\"#310\">310</a> <em>     */</em>\n<a name=\"311\" href=\"#311\">311</a>     <strong>public</strong> <strong>void</strong> select() {\n<a name=\"312\" href=\"#312\">312</a>         <em class=\"comment\">// Just changing the dot color can be confusing if there are other </em>\n<a name=\"313\" href=\"#313\">313</a>         <em class=\"comment\">//\tpeople choosing similar colors. Can probably use an opacity filter filter. </em>\n<a name=\"314\" href=\"#314\">314</a>         <strong>if</strong> (showSelection)\n<a name=\"315\" href=\"#315\">315</a>             fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, Configuration.COLOR_SELECTED);\n<a name=\"316\" href=\"#316\">316</a>     }\n<a name=\"317\" href=\"#317\">317</a> \n<a name=\"318\" href=\"#318\">318</a>     <em>/**<em>*</em></em>\n<a name=\"319\" href=\"#319\">319</a> <em>     * Deselect the dot</em>\n<a name=\"320\" href=\"#320\">320</a> <em>     */</em>\n<a name=\"321\" href=\"#321\">321</a>     <strong>public</strong> <strong>void</strong> deselect() {\n<a name=\"322\" href=\"#322\">322</a>         fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, PieUtils.getRGBString(dotColor));\n<a name=\"323\" href=\"#323\">323</a>     }\n<a name=\"324\" href=\"#324\">324</a> \n<a name=\"325\" href=\"#325\">325</a>     <em>/**<em>*</em></em>\n<a name=\"326\" href=\"#326\">326</a> <em>     * Tick count for blinking </em>\n<a name=\"327\" href=\"#327\">327</a> <em>     */</em>\n<a name=\"328\" href=\"#328\">328</a>     <strong>private</strong> <strong>int</strong> blinkCount = 0;\n<a name=\"329\" href=\"#329\">329</a> \n<a name=\"330\" href=\"#330\">330</a>     <em class=\"comment\">// blink functions should be synchronized</em>\n<a name=\"331\" href=\"#331\">331</a>     <em>/**<em>*</em></em>\n<a name=\"332\" href=\"#332\">332</a> <em>     *\tstart counting for blink </em>\n<a name=\"333\" href=\"#333\">333</a> <em>     */</em>\n<a name=\"334\" href=\"#334\">334</a>     <strong>public</strong> <strong>synchronized</strong> <strong>void</strong> startBlink(<strong>int</strong> blinkLength) {\n<a name=\"335\" href=\"#335\">335</a>         blinkCount = blinkLength;\n<a name=\"336\" href=\"#336\">336</a>     }\n<a name=\"337\" href=\"#337\">337</a>     \n<a name=\"338\" href=\"#338\">338</a>     <em>/**<em>*</em></em>\n<a name=\"339\" href=\"#339\">339</a> <em>     * Blink the dot by setting its stroke width on and off</em>\n<a name=\"340\" href=\"#340\">340</a> <em>     */</em>\n<a name=\"341\" href=\"#341\">341</a>     <strong>public</strong> <strong>synchronized</strong> <strong>void</strong> blink() {\n<a name=\"342\" href=\"#342\">342</a>         <strong>int</strong>\t\ttrick;\n<a name=\"343\" href=\"#343\">343</a>         <strong>if</strong> (ringColor==<strong>null</strong>) {\n<a name=\"344\" href=\"#344\">344</a>             <em class=\"comment\">// blinking should stop at no ring</em>\n<a name=\"345\" href=\"#345\">345</a>             trick = 0;\n<a name=\"346\" href=\"#346\">346</a>         }\n<a name=\"347\" href=\"#347\">347</a>         <strong>else</strong> {\n<a name=\"348\" href=\"#348\">348</a>             trick = 1;\n<a name=\"349\" href=\"#349\">349</a>         }\n<a name=\"350\" href=\"#350\">350</a>         <strong>if</strong> (blinkCount % 2 == trick) {\n<a name=\"351\" href=\"#351\">351</a> \t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, oldStrokeWidth);\n<a name=\"352\" href=\"#352\">352</a>         }\n<a name=\"353\" href=\"#353\">353</a>         <strong>else</strong> {\n<a name=\"354\" href=\"#354\">354</a> \t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, Configuration.SIZE_STROKE_WIDTH);\n<a name=\"355\" href=\"#355\">355</a>         }\n<a name=\"356\" href=\"#356\">356</a>         <em class=\"comment\">// After blinkCount--, if it is 0, then blinking stops. When there is a ring </em>\n<a name=\"357\" href=\"#357\">357</a>         <em class=\"comment\">//\tcolor, we want blinking to stop at a width. </em>\n<a name=\"358\" href=\"#358\">358</a>         blinkCount--;\n<a name=\"359\" href=\"#359\">359</a>     }\n<a name=\"360\" href=\"#360\">360</a>     \n<a name=\"361\" href=\"#361\">361</a>     <em>/**<em>*</em></em>\n<a name=\"362\" href=\"#362\">362</a> <em>     * Whether blink has finished</em>\n<a name=\"363\" href=\"#363\">363</a> <em>     * @return true if blink has finished</em>\n<a name=\"364\" href=\"#364\">364</a> <em>     */</em>\n<a name=\"365\" href=\"#365\">365</a>     <strong>public</strong> <strong>synchronized</strong> <strong>boolean</strong> blinked() {\n<a name=\"366\" href=\"#366\">366</a>         <em class=\"comment\">// defensive, in case blinkCount drops below 0</em>\n<a name=\"367\" href=\"#367\">367</a>         <strong>return</strong> blinkCount&lt;=0;\n<a name=\"368\" href=\"#368\">368</a>     }\n<a name=\"369\" href=\"#369\">369</a>     \n<a name=\"370\" href=\"#370\">370</a>     <em>/**<em>*</em></em>\n<a name=\"371\" href=\"#371\">371</a> <em>     * Handle mouse over and mouse out events</em>\n<a name=\"372\" href=\"#372\">372</a> <em>     */</em>\n<a name=\"373\" href=\"#373\">373</a>     <strong>public</strong> <strong>void</strong> handleEvent(Event evt) {\n<a name=\"374\" href=\"#374\">374</a>         String\t\teventType = evt.getType();\n<a name=\"375\" href=\"#375\">375</a> \n<a name=\"376\" href=\"#376\">376</a>         <strong>if</strong> (ringColor==<strong>null</strong>) {\n<a name=\"377\" href=\"#377\">377</a>     \t    <em class=\"comment\">// If we have no different ring, then when mouse is out we reduce the ring to no width.</em>\n<a name=\"378\" href=\"#378\">378</a> \t\t\t<strong>if</strong> (eventType.equals(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE)) {\n<a name=\"379\" href=\"#379\">379</a> \t\t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, oldStrokeWidth);\n<a name=\"380\" href=\"#380\">380</a> \t\t\t}\n<a name=\"381\" href=\"#381\">381</a> \t\t\t<strong>else</strong> <strong>if</strong> (eventType.equals(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE)){\n<a name=\"382\" href=\"#382\">382</a> \t\t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, Configuration.SIZE_STROKE_WIDTH);\n<a name=\"383\" href=\"#383\">383</a> \t\t\t}\n<a name=\"384\" href=\"#384\">384</a>         }\n<a name=\"385\" href=\"#385\">385</a>         <strong>else</strong> {\n<a name=\"386\" href=\"#386\">386</a>     \t    <em class=\"comment\">// If we have a different colored ring, leave it when the mosue is out.</em>\n<a name=\"387\" href=\"#387\">387</a> \t\t\t<strong>if</strong> (eventType.equals(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE)) {\n<a name=\"388\" href=\"#388\">388</a> \t\t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, Configuration.SIZE_STROKE_WIDTH);\n<a name=\"389\" href=\"#389\">389</a> \t\t\t}\n<a name=\"390\" href=\"#390\">390</a> \t\t\t<strong>else</strong> <strong>if</strong> (eventType.equals(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE)){\n<a name=\"391\" href=\"#391\">391</a> \t\t        fileDot.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE, oldStrokeWidth);\n<a name=\"392\" href=\"#392\">392</a> \t\t\t}\n<a name=\"393\" href=\"#393\">393</a>         }\n<a name=\"394\" href=\"#394\">394</a>     }\n<a name=\"395\" href=\"#395\">395</a> \n<a name=\"396\" href=\"#396\">396</a>     <em>/**<em>*</em></em>\n<a name=\"397\" href=\"#397\">397</a> <em>     * Set the location of this dot, with relative coordiante</em>\n<a name=\"398\" href=\"#398\">398</a> <em>     * This is supposed to be used to add files from other peers.</em>\n<a name=\"399\" href=\"#399\">399</a> <em>     * The radius and angle are all relative values. </em>\n<a name=\"400\" href=\"#400\">400</a> <em>     * @param radius\t\tthe relative radius. 0 is the center, less than 1 </em>\n<a name=\"401\" href=\"#401\">401</a> <em>     * \t\t\t\t\t\t\tis within the pie, larger than 1 is private  </em>\n<a name=\"402\" href=\"#402\">402</a> <em>     * @param angle \t\tthe relative angle among the slice between 0 and 1</em>\n<a name=\"403\" href=\"#403\">403</a> <em>     * @param peers\t\t\tthe number of present peers</em>\n<a name=\"404\" href=\"#404\">404</a> <em>     * @param cardinal\t\tthe relative position of this peer</em>\n<a name=\"405\" href=\"#405\">405</a> <em>     */</em>\n<a name=\"406\" href=\"#406\">406</a>     <strong>public</strong> <strong>void</strong> setLocation(<strong>double</strong> radius, <strong>double</strong> angle, <strong>int</strong> peers, <strong>int</strong> cardinal) {\n<a name=\"407\" href=\"#407\">407</a>     \tlocation = <strong>new</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a>(adjustRadius(radius) * Configuration.RADIUS, angle, peers, cardinal);\n<a name=\"408\" href=\"#408\">408</a>     \tsetLocationAttribute();\n<a name=\"409\" href=\"#409\">409</a>     }\n<a name=\"410\" href=\"#410\">410</a> \n<a name=\"411\" href=\"#411\">411</a>     <em>/**<em>*</em></em>\n<a name=\"412\" href=\"#412\">412</a> <em>     * Set the location of this dot, with absolute coordiante</em>\n<a name=\"413\" href=\"#413\">413</a> <em>     * This is used to support dropping a file by a local peer.</em>\n<a name=\"414\" href=\"#414\">414</a> <em>     * @param p \t\t\tthe x,y coordinate</em>\n<a name=\"415\" href=\"#415\">415</a> <em>     * @param peers\t\t\tthe number of present peers</em>\n<a name=\"416\" href=\"#416\">416</a> <em>     * @param cardinal\t\tthe relative position of this peer</em>\n<a name=\"417\" href=\"#417\">417</a> <em>     */</em>\n<a name=\"418\" href=\"#418\">418</a>     <strong>public</strong> <strong>void</strong> setLocation(Po<strong>int</strong> p, <strong>int</strong> peers, <strong>int</strong> cardinal) {\n<a name=\"419\" href=\"#419\">419</a>     \tlocation = <strong>new</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a>(adjustPoint(p), peers, cardinal);\n<a name=\"420\" href=\"#420\">420</a>     \tsetLocationAttribute();\n<a name=\"421\" href=\"#421\">421</a>     }\n<a name=\"422\" href=\"#422\">422</a> \n<a name=\"423\" href=\"#423\">423</a>     <em>/**<em>*</em></em>\n<a name=\"424\" href=\"#424\">424</a> <em>     * Set the transform string of the top level group </em>\n<a name=\"425\" href=\"#425\">425</a> <em>     * with the x and y of the coordinate</em>\n<a name=\"426\" href=\"#426\">426</a> <em>     */</em>\n<a name=\"427\" href=\"#427\">427</a> \t<strong>private</strong> <strong>void</strong> setLocationAttribute() {\n<a name=\"428\" href=\"#428\">428</a>         Point point = location.getAbsolutePoint();\n<a name=\"429\" href=\"#429\">429</a>     \tgroup.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_TRANSFORM_ATTRIBUTE,\n<a name=\"430\" href=\"#430\">430</a>                        PieUtils.getTranslateString(point.getX(), point.getY()));\n<a name=\"431\" href=\"#431\">431</a>     }\n<a name=\"432\" href=\"#432\">432</a> \n<a name=\"433\" href=\"#433\">433</a> \t<em>/**<em>*</em></em>\n<a name=\"434\" href=\"#434\">434</a> <em>\t * Update the coordinate of the dot with an absolute coordiante</em>\n<a name=\"435\" href=\"#435\">435</a> <em>\t * Should be called after a setLocaion method</em>\n<a name=\"436\" href=\"#436\">436</a> <em>\t * @param p\t\tthe new absolute point</em>\n<a name=\"437\" href=\"#437\">437</a> <em>\t */</em>\n<a name=\"438\" href=\"#438\">438</a> \t<strong>public</strong> <strong>void</strong> updateLocation(Point p) {\n<a name=\"439\" href=\"#439\">439</a> \t\tlocation.updateCoordinate(adjustPoint(p));\n<a name=\"440\" href=\"#440\">440</a> \t\tsetLocationAttribute();\n<a name=\"441\" href=\"#441\">441</a> \t}\n<a name=\"442\" href=\"#442\">442</a> \n<a name=\"443\" href=\"#443\">443</a> \t<em>/**<em>*</em></em>\n<a name=\"444\" href=\"#444\">444</a> <em>\t * Update the coordinate of the dot with relative coordiante</em>\n<a name=\"445\" href=\"#445\">445</a> <em>\t * Should be called after a setLocaion method</em>\n<a name=\"446\" href=\"#446\">446</a> <em>\t * @param radius\t\tthe new relative radius</em>\n<a name=\"447\" href=\"#447\">447</a> <em>\t * @param angle\t\t\tthe new relative angle</em>\n<a name=\"448\" href=\"#448\">448</a> <em>\t */</em>\n<a name=\"449\" href=\"#449\">449</a> \t<strong>public</strong> <strong>void</strong> updateLocation(<strong>double</strong> radius, <strong>double</strong> angle) {\n<a name=\"450\" href=\"#450\">450</a> \t\tlocation.updateCoordinate(adjustRadius(radius) * Configuration.RADIUS, angle);\n<a name=\"451\" href=\"#451\">451</a> \t\tsetLocationAttribute();\n<a name=\"452\" href=\"#452\">452</a> \t}\n<a name=\"453\" href=\"#453\">453</a> \n<a name=\"454\" href=\"#454\">454</a> \t<em>/**<em>*</em></em>\n<a name=\"455\" href=\"#455\">455</a> <em>\t * Update the relative position of this dot's owing peer</em>\n<a name=\"456\" href=\"#456\">456</a> <em>\t * Should be called after a setLocaion method</em>\n<a name=\"457\" href=\"#457\">457</a> <em>\t * @param peers\t\tthe new number of peers</em>\n<a name=\"458\" href=\"#458\">458</a> <em>\t * @param cardinal\tthe new relative position of this peer</em>\n<a name=\"459\" href=\"#459\">459</a> <em>\t */</em>\n<a name=\"460\" href=\"#460\">460</a> \t<strong>public</strong> <strong>void</strong> updateCardinal(<strong>int</strong> peers, <strong>int</strong> cardinal) {\n<a name=\"461\" href=\"#461\">461</a> \t\tlocation.updateCardinal(peers, cardinal);\n<a name=\"462\" href=\"#462\">462</a> \t\tsetLocationAttribute();\n<a name=\"463\" href=\"#463\">463</a> \t}\n<a name=\"464\" href=\"#464\">464</a> \n<a name=\"465\" href=\"#465\">465</a> \t<em>/**<em>*</em></em>\n<a name=\"466\" href=\"#466\">466</a> <em>\t * Move the dot</em>\n<a name=\"467\" href=\"#467\">467</a> <em>\t * @param distanceX\t\thorizontal offset</em>\n<a name=\"468\" href=\"#468\">468</a> <em>\t * @param distanceY\t\tvertical offset</em>\n<a name=\"469\" href=\"#469\">469</a> <em>\t */</em>\n<a name=\"470\" href=\"#470\">470</a>     <strong>public</strong> <strong>void</strong> move(<strong>double</strong> distanceX, <strong>double</strong> distanceY) {\n<a name=\"471\" href=\"#471\">471</a>     \tPoint locPoint = location.getAbsolutePoint();\n<a name=\"472\" href=\"#472\">472</a>     \t<strong>double</strong> posX = locPoint.getX() + distanceX;\n<a name=\"473\" href=\"#473\">473</a>         <strong>double</strong> posY = locPoint.getY() + distanceY;\n<a name=\"474\" href=\"#474\">474</a>         locPoint.setLocation(posX, posY);\n<a name=\"475\" href=\"#475\">475</a>         location.updateCoordinate(adjustPoint(locPoint));\n<a name=\"476\" href=\"#476\">476</a> \t\tsetLocationAttribute();\n<a name=\"477\" href=\"#477\">477</a>     }\n<a name=\"478\" href=\"#478\">478</a> \t\n<a name=\"479\" href=\"#479\">479</a> \t<em>/**<em>*</em></em>\n<a name=\"480\" href=\"#480\">480</a> <em>\t * Get a point for the location of this dot, relative to the pie</em>\n<a name=\"481\" href=\"#481\">481</a> <em>\t * @return a point for the dot</em>\n<a name=\"482\" href=\"#482\">482</a> <em>\t */</em>\n<a name=\"483\" href=\"#483\">483</a>     <strong>public</strong> Point getLocation() {\n<a name=\"484\" href=\"#484\">484</a>         <strong>return</strong> location.getAbsolutePoint();\n<a name=\"485\" href=\"#485\">485</a>     }\n<a name=\"486\" href=\"#486\">486</a> \n<a name=\"487\" href=\"#487\">487</a>     <em>/**<em>*</em></em>\n<a name=\"488\" href=\"#488\">488</a> <em>     * Get the sharing level for this dot</em>\n<a name=\"489\" href=\"#489\">489</a> <em>     * @return the sharing level</em>\n<a name=\"490\" href=\"#490\">490</a> <em>     */</em>\n<a name=\"491\" href=\"#491\">491</a>     <strong>public</strong> <strong>int</strong> getSharingLevel() {\n<a name=\"492\" href=\"#492\">492</a>         <em class=\"comment\">// This is a live/lazy property, which is always updated when it is read</em>\n<a name=\"493\" href=\"#493\">493</a>         calculateSharingLevel();\n<a name=\"494\" href=\"#494\">494</a>         <strong>return</strong> sharingLevel;\n<a name=\"495\" href=\"#495\">495</a>     }\n<a name=\"496\" href=\"#496\">496</a> \n<a name=\"497\" href=\"#497\">497</a>     <em>/**<em>*</em></em>\n<a name=\"498\" href=\"#498\">498</a> <em>     * Calculate the sharing level based on the radius of the dot</em>\n<a name=\"499\" href=\"#499\">499</a> <em>     * @return the sharing level</em>\n<a name=\"500\" href=\"#500\">500</a> <em>     */</em>\n<a name=\"501\" href=\"#501\">501</a>     <strong>private</strong> <strong>int</strong> calculateSharingLevel() {\n<a name=\"502\" href=\"#502\">502</a>         sharingLevel = PieUtils.getSharingLevel(location.getRadius());\n<a name=\"503\" href=\"#503\">503</a>     \t<strong>return</strong> sharingLevel; \n<a name=\"504\" href=\"#504\">504</a>     }\n<a name=\"505\" href=\"#505\">505</a> \n<a name=\"506\" href=\"#506\">506</a>     <em>/**<em>*</em></em>\n<a name=\"507\" href=\"#507\">507</a> <em>     * Adjust a radius so it will not let a dot fall on the colorful mark</em>\n<a name=\"508\" href=\"#508\">508</a> <em>     * </em>\n<a name=\"509\" href=\"#509\">509</a> <em>     * @param radius the raw radius</em>\n<a name=\"510\" href=\"#510\">510</a> <em>     * @return a new radius that will not touch the colorful marker</em>\n<a name=\"511\" href=\"#511\">511</a> <em>     */</em>\n<a name=\"512\" href=\"#512\">512</a>     <strong>private</strong> <strong>double</strong> adjustRadius(<strong>double</strong> radius) {\n<a name=\"513\" href=\"#513\">513</a>         <em class=\"comment\">// The coordinate is used as the center of the dot, make sure</em>\n<a name=\"514\" href=\"#514\">514</a>         <em class=\"comment\">// it plus the default dot radius does not touch the colorful</em>\n<a name=\"515\" href=\"#515\">515</a>         <em class=\"comment\">// marker</em>\n<a name=\"516\" href=\"#516\">516</a>         \n<a name=\"517\" href=\"#517\">517</a>         <em class=\"comment\">// Below are comments when we decided to put this in the coordinate.</em>\n<a name=\"518\" href=\"#518\">518</a>         <em class=\"comment\">// \t\tThe single more compelling reason that we move it to Dot</em>\n<a name=\"519\" href=\"#519\">519</a>         <em class=\"comment\">// \t\tis that Coordinate deals with absolute coordinates, but we </em>\n<a name=\"520\" href=\"#520\">520</a>         <em class=\"comment\">//\t\tare dealing a relative radius.</em>\n<a name=\"521\" href=\"#521\">521</a>         <em class=\"comment\">// </em>\n<a name=\"522\" href=\"#522\">522</a>         <em class=\"comment\">// In Dot, this is read from template.svg, and we can probably</em>\n<a name=\"523\" href=\"#523\">523</a>         <em class=\"comment\">//\t\tchange from the consumer side (dot). But changing from</em>\n<a name=\"524\" href=\"#524\">524</a>         <em class=\"comment\">//\t\tthe producer side (coordinate) sounds tighter control,</em>\n<a name=\"525\" href=\"#525\">525</a>         <em class=\"comment\">//\t\teven though it is somewhat twingled, with the dot.</em>\n<a name=\"526\" href=\"#526\">526</a>         <em class=\"comment\">// Since we cannot always accommodate arbitrary dot size (enlarging</em>\n<a name=\"527\" href=\"#527\">527</a>         <em class=\"comment\">//\t\tdots will touch markers, then shall we move the dots?), </em>\n<a name=\"528\" href=\"#528\">528</a>         <em class=\"comment\">//\t\tso putting it here is reasonable.</em>\n<a name=\"529\" href=\"#529\">529</a>         <em class=\"comment\">// Besides, the best place to put this is right after the raw </em>\n<a name=\"530\" href=\"#530\">530</a>         <em class=\"comment\">//\t\tradius is changed, which happens here at the above four methods.</em>\n<a name=\"531\" href=\"#531\">531</a>         <em class=\"comment\">//\t\tIn two such cases, the absolute point produces radius,</em>\n<a name=\"532\" href=\"#532\">532</a>         <em class=\"comment\">//\t\twhich is adjusted, which will trigger back updating  on </em>\n<a name=\"533\" href=\"#533\">533</a>         <em class=\"comment\">//\t\tthe originating absolute points.</em>\n<a name=\"534\" href=\"#534\">534</a>         <em class=\"comment\">// Also take the stroke width into consideration</em>\n<a name=\"535\" href=\"#535\">535</a>         <strong>double</strong>\t\tdefaultDotRadius = 8 + Integer.parseInt(oldStrokeWidth) / 2;\n<a name=\"536\" href=\"#536\">536</a>         <strong>double</strong>\t\tdefaultMargin = 0.001;\t<em class=\"comment\">// do not get too close</em>\n<a name=\"537\" href=\"#537\">537</a>         <em class=\"comment\">// The relative radius of an 8 pixel dot's radius</em>\n<a name=\"538\" href=\"#538\">538</a>         <strong>double</strong>\t\tdotRadiusPercent = defaultDotRadius / Configuration.RADIUS;\n<a name=\"539\" href=\"#539\">539</a>         <strong>double</strong>\t\tinnerBound = edu.uci.isr.impromptu.common.Configuration.LEVEL_RADIUS[1];\n<a name=\"540\" href=\"#540\">540</a>         <strong>double</strong>\t\touterBound = edu.uci.isr.impromptu.common.Configuration.LEVEL_RADIUS[0];\n<a name=\"541\" href=\"#541\">541</a>         <strong>double</strong>\t\tresult = radius;\n<a name=\"542\" href=\"#542\">542</a>         <strong>if</strong> ( radius &lt;= innerBound  &amp;&amp; ( radius + dotRadiusPercent + defaultMargin >\n<a name=\"543\" href=\"#543\">543</a>                 innerBound)) {\n<a name=\"544\" href=\"#544\">544</a>             <em class=\"comment\">// the radius is inside the marker but too close</em>\n<a name=\"545\" href=\"#545\">545</a>             result = innerBound - dotRadiusPercent - defaultMargin;\n<a name=\"546\" href=\"#546\">546</a>         }\n<a name=\"547\" href=\"#547\">547</a>         <strong>if</strong> ( radius >= innerBound  &amp;&amp; ( radius - dotRadiusPercent - defaultMargin &lt;\n<a name=\"548\" href=\"#548\">548</a>                 outerBound)) {\n<a name=\"549\" href=\"#549\">549</a>             <em class=\"comment\">// the radius is within or outside the marker but too close</em>\n<a name=\"550\" href=\"#550\">550</a>             <em class=\"comment\">// treat the marker as private space, another instance of secure by default</em>\n<a name=\"551\" href=\"#551\">551</a>             result = outerBound + dotRadiusPercent + defaultMargin;\n<a name=\"552\" href=\"#552\">552</a>         }\n<a name=\"553\" href=\"#553\">553</a>         <strong>return</strong> result;\n<a name=\"554\" href=\"#554\">554</a>     }\n<a name=\"555\" href=\"#555\">555</a>     \n<a name=\"556\" href=\"#556\">556</a>     <em>/**<em>*</em></em>\n<a name=\"557\" href=\"#557\">557</a> <em>     * Adjust a radius so it will not let a dot fall on the colorful mark</em>\n<a name=\"558\" href=\"#558\">558</a> <em>     * @param p \tthe x,y coordinate</em>\n<a name=\"559\" href=\"#559\">559</a> <em>     * @param the adjusted point</em>\n<a name=\"560\" href=\"#560\">560</a> <em>     */</em>\n<a name=\"561\" href=\"#561\">561</a>     <strong>private</strong> Point\tadjustPoint(Point p) { \n<a name=\"562\" href=\"#562\">562</a>     \t<strong>double</strong> \tradiusAbsolute = Coordinate.calculateRadius(p);\n<a name=\"563\" href=\"#563\">563</a>     \t<strong>double</strong>\tradiusOriginal = radiusAbsolute / Configuration.RADIUS;\n<a name=\"564\" href=\"#564\">564</a>     \t<strong>double</strong>  radiusAdjusted = adjustRadius(radiusOriginal);\n<a name=\"565\" href=\"#565\">565</a>     \t<strong>double</strong>\tnewRatio = radiusAdjusted / radiusOriginal;\n<a name=\"566\" href=\"#566\">566</a>     \t<strong>return</strong> \t<strong>new</strong> Po<strong>int</strong>((<strong>int</strong>)(p.getX() * <strong>new</strong>Ratio), \n<a name=\"567\" href=\"#567\">567</a>     \t        \t\t  (<strong>int</strong>)(p.getY() * newRatio));\n<a name=\"568\" href=\"#568\">568</a>     }\n<a name=\"569\" href=\"#569\">569</a>     \n<a name=\"570\" href=\"#570\">570</a>     <em>/**<em>*</em></em>\n<a name=\"571\" href=\"#571\">571</a> <em>     * Get the relative radius for this dot</em>\n<a name=\"572\" href=\"#572\">572</a> <em>     * @return the radius </em>\n<a name=\"573\" href=\"#573\">573</a> <em>     */</em>\n<a name=\"574\" href=\"#574\">574</a> \t<strong>public</strong> <strong>double</strong> getRadius() {\n<a name=\"575\" href=\"#575\">575</a> \t\t<strong>return</strong> location.getRadius() / Configuration.RADIUS;\n<a name=\"576\" href=\"#576\">576</a> \t}\n<a name=\"577\" href=\"#577\">577</a> \n<a name=\"578\" href=\"#578\">578</a> \t<em>/**<em>*</em></em>\n<a name=\"579\" href=\"#579\">579</a> <em>\t * Get the relative angle for this dot</em>\n<a name=\"580\" href=\"#580\">580</a> <em>\t * @return the relative angle</em>\n<a name=\"581\" href=\"#581\">581</a> <em>\t */</em>\n<a name=\"582\" href=\"#582\">582</a> \t<strong>public</strong> <strong>double</strong> getAngle() {\n<a name=\"583\" href=\"#583\">583</a> \t\t<strong>return</strong> location.getRelativeAngle();\n<a name=\"584\" href=\"#584\">584</a> \t}\n<a name=\"585\" href=\"#585\">585</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34170.0}