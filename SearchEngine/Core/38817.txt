{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL HalfedgeDS const decorator HDS Definition The classes CGAL HalfedgeDS items decorator HDS CGAL HalfedgeDS decorator HDS and CGAL HalfedgeDS const decorator HDS provide additional functions to examine and to modify a halfedge data structure HDS The class CGAL HalfedgeDS items decorator HDS provides additional functions for vertices halfedges and faces of a halfedge data structure without knowing the containing halfedge data structure The class CGAL HalfedgeDS decorator HDS stores a reference to the halfedge data structure and provides functions that modify the halfedge data structure for example Euler operators The class CGAL HalfedgeDS const decorator HDS stores a const reference to the halfedge data structure It contains non modifying functions for example the test for validness of the data structure All these additional functions take care of the different capabilities a halfedge data structure may have or may not have The functions evaluate the type tags of the halfedge data structure to decide on the actions If a particular feature is not supported nothing is done Note that for example the creation of new halfedges is mandatory for all halfedge data structures and will not appear here again include CGAL HalfedgeDS const decorator h Inherits From CGAL HalfedgeDS items decorator HDS Creation HalfedgeDS const decorator HDS D const HDS hds keeps internally a const reference to hds Validness Checks A halfedge data structure has no definition of validness of its own but a useful set of tests is defined with the following levels Level The number of halfedges is even All pointers except the vertex pointer and the face pointer for border halfedges are unequal to their respective default construction value For all halfedges h The opposite halfedge is different from h and the opposite of the opposite is equal to h The next of the previous halfedge is equal to h For all vertices v the incident vertex of the incident halfedge of v is equal to v The halfedges around v starting with the incident halfedge of v form a cycle For all faces f the incident face of the incident halfedge of f is equal to f The halfedges around f starting with the incident halfedge of f form a cycle Redundancies among internal variables are tested e g that iterators enumerate as many items as the related size value indicates Level 1 All tests of level For all halfedges h The incident vertex of h exists and is equal to the incident vertex of the opposite of the next halfedge The incident face or hole of h is equal to the incident face or hole of the next halfedge Level 2 All tests of level 1 The sum of all halfedges that can be reached through the vertices must be equal to the number of all halfedges i e all halfedges incident to a vertex must form a single cycle Level 3 All tests of level 2 The sum of all halfedges that can be reached through the faces must be equal to the number of all halfedges i e all halfedges surrounding a face must form a single cycle no holes in faces Level 4 All tests of level 3 and normalized border is valid bool D is valid bool verbose false int level returns true if the halfedge data structure hds is valid with respect to the level value as defined above If verbose is true statistics are written to cerr bool D normalized border is valid bool verbose false returns true if the border halfedges are in normalized representation which is when enumerating all halfedges with the halfedge iterator the following holds The non border edges precede the border edges For border edges the second halfedge is a border halfedge The first halfedge may or may not be a border halfedge The halfedge iterator border halfedges begin denotes the first border edge If verbose is true statistics are written to cerr See Also CGAL HalfedgeDS items decorator HDS CGAL HalfedgeDS decorator HDS Example The following program fragment illustrates the implementation of a is valid member function for a simplified polyhedron class We assume here that the level three check is the appropriate default for polyhedral surfaces namespace CGAL template class Traits class Polyhedron typedef HalfedgeDS default Traits HDS HDS hds public bool is valid bool verb false int level const Verbose ostream verr verb verr begin Polyhedron is valid verb true level level std endl HalfedgeDS const decorator HDS decorator hds bool valid decorator is valid verb level 3 further checks Next HalfedgeDS decorator HDS Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/HalfedgeDS_ref/Class_HalfedgeDS_const_decorator.html", "title": "halfedgeds_const_decorator&lt;hds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './HalfedgeDS_ref/HalfedgeDS_const_decorator.tex' -->\n<html> <head>  \n<title>HalfedgeDS_const_decorator&lt;HDS&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_878\"></A>\n\n<A NAME=\"Cross_link_anchor_879\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_856\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::HalfedgeDS_const_decorator<HDS>\"></A>\n<h2><I>CGAL::HalfedgeDS_const_decorator&lt;HDS&gt;</I></h2>\n\n\n<A NAME=\"pageHalfedgeDSconstDecoratorRef\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe classes <I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I>,\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I>, and\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> provide additional functions\nto examine and to modify a halfedge data structure <I>HDS</I>. The class\n<I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I> provides additional functions\nfor vertices, halfedges, and faces of a halfedge data structure\nwithout knowing the containing halfedge data structure. The class\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I> stores a reference to the halfedge\ndata structure and provides functions that modify the halfedge data\nstructure, for example Euler-operators. The class\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> stores a const reference to\nthe halfedge data structure. It contains non-modifying functions, for\nexample the test for validness of the data structure.\n<P>\n\nAll these additional functions take care of the different capabilities\na halfedge data structure may have or may not have.  The functions\nevaluate the type tags of the halfedge data structure to decide on the\nactions. If a particular feature is not supported nothing is done.\nNote that for example the creation of new halfedges is mandatory for\nall halfedge data structures and will not appear here again.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/HalfedgeDS_const_decorator.h\">CGAL/HalfedgeDS_const_decorator.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3>\n<P>\n\n<I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_879\">HalfedgeDS_const_decorator</A>&lt;HDS&gt; D ( const HDS&amp; hds);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    keeps internally a const reference to <I>hds</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Validness Checks</H3>\n<P>\n\nA halfedge data structure has no definition of validness of its own,\nbut a useful set of tests is defined with the following levels:\n<DL>\n<DT><B>Level 0</B><DD> \n  The number of halfedges is even. All pointers except\n  the vertex pointer and the face pointer for border halfedges are\n  unequal to their respective default construction value.  For all\n  halfedges <MATH><I>h</I></MATH>: The <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> halfedge is different from <MATH><I>h</I></MATH> and the\n  <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> of the <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> is equal to <MATH><I>h</I></MATH>. The next of the previous\n  halfedge is equal to <MATH><I>h</I></MATH>. For all vertices <MATH><I>v</I></MATH>: the incident vertex\n  of the incident halfedge of <MATH><I>v</I></MATH> is equal to <MATH><I>v</I></MATH>. The halfedges\n  around <MATH><I>v</I></MATH> starting with the incident halfedge of <MATH><I>v</I></MATH> form a cycle.\n  For all faces <MATH><I>f</I></MATH>: the incident face of the incident halfedge of <MATH><I>f</I></MATH>\n  is equal to <MATH><I>f</I></MATH>. The halfedges around <MATH><I>f</I></MATH> starting with the incident\n  halfedge of <MATH><I>f</I></MATH> form a cycle.  Redundancies among internal variables\n  are tested, e.g., that iterators enumerate as many items as the\n  related size value indicates.\n<DT><B>Level 1</B><DD> \n  All tests of level 0. For all halfedges <MATH><I>h</I></MATH>: The\n  incident vertex of <MATH><I>h</I></MATH> exists and is equal to the incident vertex of\n  the <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> of the next halfedge. The incident face (or hole) of\n  <MATH><I>h</I></MATH> is equal to the incident face (or hole) of the next halfedge.\n<DT><B>Level 2</B><DD>\n  All tests of level 1. The sum of all halfedges that can\n  be reached through the vertices must be equal to the number of all\n  halfedges, i.e., all halfedges incident to a vertex must form a single\n  cycle.\n<DT><B>Level 3</B><DD>\n  All tests of level 2. The sum of all halfedges that can\n  be reached through the faces must be equal to the number of all\n  halfedges, i.e., all halfedges surrounding a face must form a single\n  cycle (no holes in faces).\n<DT><B>Level 4</B><DD>\n  All tests of level 3 and <I>normalized_border_is_valid</I>.\n</DL>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6_bool_verbose_=_false+_int_level_=_09_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.is_valid ( bool verbose = false,  int level = 0)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the halfedge data structure <I>hds</I> is\n    valid with respect to the <I>level</I> value as defined above. \n    If <I>verbose</I> is <I>true</I>, statistics are written to <I>cerr</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_normalized_border_is_valid6_bool_verbose_=_false9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.normalized_border_is_valid ( bool verbose = false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the border halfedges are in normalized \n    representation, which is when enumerating all halfedges with the\n    halfedge iterator the following holds: The non-border edges precede the \n    border edges. For border edges, the second halfedge is a border halfedge. \n    (The first halfedge may or may not be a border halfedge.) The halfedge\n    iterator <I>border_halfedges_begin()</I> denotes the first border\n    edge. If <I>verbose</I> is <I>true</I>, statistics are written to <I>cerr</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program fragment illustrates the implementation of a\n<I>is_valid()</I> member function for a simplified polyhedron class.\nWe assume here that the level three check is the appropriate default\nfor polyhedral surfaces.\n<P>\n\n<pre class=\"ExampleCode\">\nnamespace CGAL {\n    template &lt;class Traits&gt;\n    class Polyhedron {\n        typedef <A HREF=\"Class_HalfedgeDS_default.html#Cross_link_anchor_883\">HalfedgeDS_default</A>&lt;Traits&gt; HDS;\n        HDS hds;\n    public:\n        // ...\n        bool is_valid( bool verb = false, int level = 0) const {\n            <A HREF=\"../IOstream_ref/Class_Verbose_ostream.html#Cross_link_anchor_1752\">Verbose_ostream</A> verr(verb);\n            verr &lt;&lt; &quot;begin Polyhedron::is_valid( verb=true, level = &quot; &lt;&lt; level \n                 &lt;&lt; &quot;):&quot; &lt;&lt; std::endl;\n            <A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_879\">HalfedgeDS_const_decorator</A>&lt;HDS&gt; decorator(hds);\n            bool valid = decorator.is_valid( verb, level + 3);\n            // further checks ...\n        }\n    };\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_HalfedgeDS_decorator.html\"><I>HalfedgeDS_decorator&lt;HDS&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_30!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38817.0}