{"text": " Home Trees Indices Help Package CHEM Package Kernel Module BaseKernel Class BaseKernel hide private frames no frames Class BaseKernel Abstract base class for all kernel classes Kernel classes are those that can take a pair of of objects an calculate some similarity score between them for use in a support vector machine SVM style machine learning application These objects need not be of any particular type as far as this interface is concerned They may be a pair of strings molecules OEMolBase vectors etc It is up to the implementing class to make those distinctions Ultimately the scores generated from these kernels will probably be used to build a Gram matrix of scores on a list of source objects against itself This abstract class provides a convenience methods for generating this matrix given an iterator factory for the list outputting it as a tab delimited file Object iterator factories that is an object that can produce fresh iterators over the object list must be used rather than simple iterators because nested loops will be used to iterate over the objects multiple times Thus for example if a file object was used this would be a problem since after the first iteration the end of file would be reached The Common IteratorFactory module contains a couple classes for generating such factories from common source types files arrays oemolistream Instance Methods hide private similarity self obj obj1 Primary abstract method where given two objects should return an appropriate non negative similarity score between the two dictionaryDotProduct self featureDict1 featureDict2 Given two dictionaries treat these like vectors and take the dot product between them dictionaryEuclideanDistanceSquared self featureDict1 featureDict2 Given two dictionaries treat these like vectors and calculate the Euclidean distance between them squared buildFeatureDictionary self obj Optional abstract method getFeatureDictionary self obj objIndex See if a feature dictionary has already been created for the object at the specified objIndex normalizeFeatureDictionary self featureDict Given a dictionary interpret it as a feature vector whose values are some numerical value ensureListCapacity self aList targetSize Ensure that the given list is at least the given size prepareFeatureDictionaryList self objIter Pre processing step outputMatrix self objIterFactory outFile Utility method to calculate a similarity for every pair of objects that come out of the iterators of teh objIterFactory and output them to the outFile as a tab delimited matrix of values Class Variables hide private objIndex1 1 objIndex2 1 Temporary storage for the feature dictionaries calculated for any objects featureDictList CHEM DB rdb search NameRxnPatternMatchingMo Method Details hide private similarity self obj obj1 Primary abstract method where given two objects should return an appropriate non negative similarity score between the two Up to the implementing class to define what this is dictionaryDotProduct self featureDict1 featureDict2 Given two dictionaries treat these like vectors and take the dot product between them That is find all items whose key is found in both dictionaries and expect the item values to be some kind of count or number Then just take the product of those 2 numbers and sum up all such products dictionaryEuclideanDistanceSquared self featureDict1 featureDict2 Given two dictionaries treat these like vectors and calculate the Euclidean distance between them squared That is find all items whose key is found in both dictionaries and expect the item values to be some kind of count or number Sum the square difference between each of these Furthermore if an item exists in one dictionary but not the other treat the other dictionary as having the item but with a value buildFeatureDictionary self obj Optional abstract method Given some object to compare build a dictionary of its important features such that it is easy to compare any two objects feature dictionaries Combined with the getFeatureDictionary and prepareFeatureDictionaryList methods this can save a lot of time as the features need only be calculated once for an object then stored in self featureDictList instead of being recalculated for every similarity call getFeatureDictionary self obj objIndex See if a feature dictionary has already been created for the object at the specified objIndex If so just return that one Otherwise build it and store it for future use If objIndex then it is unused just build and return normalizeFeatureDictionary self featureDict Given a dictionary interpret it as a feature vector whose values are some numerical value In that case the vector can be interpreted to have a magnitude length Divide all elements values by this magnitude to normalize the vector to have a length of 1 ensureListCapacity self aList targetSize Ensure that the given list is at least the given size If it is not currently then keep appending None elements until that size is achieved prepareFeatureDictionaryList self objIter Pre processing step Calculate the feature dictionary for each object and do so only once here Then subsequent calls can just to getFeatureDictionary can just get the stored object from the list instead of recalculating it Class Variable Details hide private objIndex2 Temporary storage for the feature dictionaries calculated for any objects If the members objIndex1 or objIndex2 are set then fill in these values accordingly That way the next time they re needed they can just be accessed directly instead of requiring another calculation Value 1 featureDictList Value None Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 31 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.Kernel.BaseKernel.BaseKernel-class.html", "title": "chem.kernel.basekernel.basekernel", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.Kernel.BaseKernel.BaseKernel</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.Kernel-module.html\">Package&nbsp;Kernel</a> ::\n        <a href=\"CHEM.Kernel.BaseKernel-module.html\">Module&nbsp;BaseKernel</a> ::\n        Class&nbsp;BaseKernel\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class BaseKernel</h1><br /><br />\n<p>Abstract base class for all kernel classes.  Kernel classes are those \n  that can take a pair of of objects an calculate some similarity score \n  between them for use in a support vector machine (SVM) style \n  machine-learning application.</p>\n  <p>These objects need not be of any particular type as far as this \n  interface is concerned.  They may be a pair of strings, molecules \n  (OEMolBase), vectors, etc.  It is up to the implementing class to make \n  those distinctions.</p>\n  <p>Ultimately, the scores generated from these kernels will probably be \n  used to build a &quot;Gram matrix&quot; of scores on a list of source \n  objects against itself. This abstract class provides a convenience \n  methods for generating this matrix given an iterator factory for the \n  list, outputting it as a tab-delimited file.</p>\n  Object iterator factories, that is, an object that can produce fresh \n  iterators over the object list, must be used rather than simple iterators\n  because nested loops will be used to iterate over the objects multiple \n  times.  Thus, for example, if a file object was used, this would be a \n  problem since, after the first iteration, the end-of-file would be \n  reached.  The Common.IteratorFactory module contains a couple classes for\n  generating such factories from common source types (files, arrays, \n  oemolistream).<br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#similarity\" class=\"summary-sig-name\">similarity</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj0</span>,\n        <span class=\"summary-sig-arg\">obj1</span>)</span><br />\n      Primary abstract method where, given two objects, should return an\n      appropriate, non-negative, similarity score between the two.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#dictionaryDotProduct\" class=\"summary-sig-name\">dictionaryDotProduct</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">featureDict1</span>,\n        <span class=\"summary-sig-arg\">featureDict2</span>)</span><br />\n      Given two dictionaries, treat these like vectors and take the \n      &quot;dot-product&quot; between them.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#dictionaryEuclideanDistanceSquared\" class=\"summary-sig-name\">dictionaryEuclideanDistanceSquared</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">featureDict1</span>,\n        <span class=\"summary-sig-arg\">featureDict2</span>)</span><br />\n      Given two dictionaries, treat these like vectors and calculate the\n      Euclidean distance between them, squared.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#buildFeatureDictionary\" class=\"summary-sig-name\">buildFeatureDictionary</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj</span>)</span><br />\n      Optional abstract method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#getFeatureDictionary\" class=\"summary-sig-name\">getFeatureDictionary</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj</span>,\n        <span class=\"summary-sig-arg\">objIndex</span>)</span><br />\n      See if a feature dictionary has already been created for the \n      object at the specified objIndex.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#normalizeFeatureDictionary\" class=\"summary-sig-name\">normalizeFeatureDictionary</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">featureDict</span>)</span><br />\n      Given a dictionary, interpret it as a feature vector, whose values\n      are some numerical value.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#ensureListCapacity\" class=\"summary-sig-name\">ensureListCapacity</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">aList</span>,\n        <span class=\"summary-sig-arg\">targetSize</span>)</span><br />\n      Ensure that the given list is at least the given size.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#prepareFeatureDictionaryList\" class=\"summary-sig-name\">prepareFeatureDictionaryList</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">objIter</span>)</span><br />\n      Pre-processing step.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"outputMatrix\"></a><span class=\"summary-sig-name\">outputMatrix</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">objIterFactory</span>,\n        <span class=\"summary-sig-arg\">outFile</span>)</span><br />\n      Utility method to calculate a similarity for every pair of objects\n      that come out of the iterators of teh objIterFactory and output them \n      to the outFile as a tab-delimited matrix of values.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"objIndex1\"></a><span class=\"summary-name\">objIndex1</span> = <code title=\"-1\">-1</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#objIndex2\" class=\"summary-name\">objIndex2</a> = <code title=\"-1\">-1</code><br />\n      Temporary storage for the feature dictionaries calculated for any \n      objects.\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.Kernel.BaseKernel.BaseKernel-class.html#featureDictList\" class=\"summary-name\">featureDictList</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingMo<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"similarity\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">similarity</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj0</span>,\n        <span class=\"sig-arg\">obj1</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Primary abstract method where, given two objects, should return an \n  appropriate, non-negative, similarity score between the two.  Up to the \n  implementing class to define what this is.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"dictionaryDotProduct\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">dictionaryDotProduct</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">featureDict1</span>,\n        <span class=\"sig-arg\">featureDict2</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given two dictionaries, treat these like vectors and take the \n  &quot;dot-product&quot; between them.  That is, find all items whose key \n  is found in both dictionaries and expect the item values to be some kind \n  of count or number. Then just take the product of those 2 numbers and sum\n  up all such products.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"dictionaryEuclideanDistanceSquared\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">dictionaryEuclideanDistanceSquared</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">featureDict1</span>,\n        <span class=\"sig-arg\">featureDict2</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given two dictionaries, treat these like vectors and calculate the \n  Euclidean distance between them, squared. That is, find all items whose \n  key is found in both dictionaries and expect the item values to be some \n  kind of count or number.  Sum the square difference between each of \n  these.  Furthermore, if an item exists in one dictionary, but not the \n  other, treat the other dictionary as having the item but with a value = \n  0.0.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"buildFeatureDictionary\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">buildFeatureDictionary</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Optional abstract method.  Given some object to compare, build a \n  dictionary of its important features such that it is easy to compare any \n  two objects' feature dictionaries.</p>\n  Combined with the getFeatureDictionary(...) and \n  prepareFeatureDictionaryList(...) methods, this can save a lot of time as\n  the features need only be calculated once for an object, then stored in \n  self.featureDictList instead of being recalculated for every similarity \n  call.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"getFeatureDictionary\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">getFeatureDictionary</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj</span>,\n        <span class=\"sig-arg\">objIndex</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>See if a feature dictionary has already been created for the object at\n  the specified objIndex.  If so, just return that one.  Otherwise build it\n  and store it for future use.</p>\n  If objIndex &lt; 0, then it is unused, just build and return.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"normalizeFeatureDictionary\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">normalizeFeatureDictionary</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">featureDict</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given a dictionary, interpret it as a feature vector, whose values are\n  some numerical value.  In that case, the vector can be interpreted to \n  have a magnitude / length.  Divide all elements (values) by this \n  magnitude to normalize the vector to have a length of 1.0.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"ensureListCapacity\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">ensureListCapacity</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">aList</span>,\n        <span class=\"sig-arg\">targetSize</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Ensure that the given list is at least the given size. If it is not \n  currently, then keep appending None elements until that size is \n  achieved.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"prepareFeatureDictionaryList\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">prepareFeatureDictionaryList</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">objIter</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Pre-processing step.  Calculate the feature dictionary for each \n  object, and do so only once here.  Then, subsequent calls can just to \n  getFeatureDictionary(...) can just get the stored object from the list \n  instead of recalculating it.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== CLASS VARIABLE DETAILS ==================== -->\n<a name=\"section-ClassVariableDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variable Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariableDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"objIndex2\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">objIndex2</h3>\n  Temporary storage for the feature dictionaries calculated for any \n  objects.  If the members objIndex1 or objIndex2 are set, then fill in \n  these values accordingly.  That way, the next time they're needed, they \n  can just be accessed directly instead of requiring another \n  calculation.\n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\n-1\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"featureDictList\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">featureDictList</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:31 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 41197.0}