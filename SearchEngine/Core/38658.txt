{"text": "OEChem C Theory Manual Version 1 3 1 Previous 5 6 Looping over the Up 5 Traversing the Atoms Next 6 Properties of Atoms 5 7 Looping over subsets of Atoms or Bonds It can sometimes be useful to loop over a subset of the atoms or bonds of a molecule Traditionally this can be done with if statements inside a loop but it can sometimes be cleaner and more convenient to subset the members being looped over inside the iterator To do this many of OEChem s iterator generation functions such as OEMolBase GetAtoms can take an argument which determines which subset of the object to loop over these functions are called predicates as detailed in the chapter Predicate Functions below The details of these functions are not important here Instead a programmer can simply use the predefined functors to control their loops The following example shows the use of the predicate OEHasAtomicNum to loop over only carbon atoms in a molecule include oechem h include iostream using namespace OESystem using namespace OEChem using namespace std int main OEMol mol OEParseSmiles mol c1cc O c O cc1CCN OEIter OEAtomBase atom cerr Carbon Atoms endl for atom mol GetAtoms OEHasAtomicNum 6 atom atom cerr Atom atom GetIdx return Download as text Some of the common predefined functors in OEChem are listed below Predicate functions can be trivial such as OEIsHydrogen or quite complex such as Match const char which returns atoms which match the SMARTS string passed to the constructor For a complete listing please see the chapter on predicate functions or the API manual Many predicates take intuitive construction arguments For instance OEHasAtomName has a const char argument which is the atom s name e g mol GetAtoms OEHasAtomName CA Atoms OEHasAtomName const char OEHasAtomicNum unsigned int OEIsHalogen OEIsAromaticAtom OEAtomIsInRing OEIsChiralAtom OEHasResidueNumber unsigned int OEMatchFunc const char Bonds OEHasBondIdx unsigned int OEHasOrder unsigned int OEBondIsInRing OEIsRotor Conformers OEHasConfIdx unsigned int These predicates can be particularly helpful when used in conjunction with functions which take OEIters as arguments as seen in the example below This use of predicates allows factorization of the loop in a way not easily possible with if statements include oechem h include iostream using namespace OESystem using namespace OEChem using namespace std void PrintAtoms OEIter OEAtomBase atom const char title cerr title endl for atom ToFirst atom atom cerr atom GetIdx cerr endl int main OEMol mol OEParseSmiles mol c1c O c O c Cl cc1CCCBr OEIter OEAtomBase atom atom mol GetAtoms OEAtomIsInRing PrintAtoms atom Ring Atoms atom mol GetAtoms OEHasAtomicNum 8 PrintAtoms atom Oxygens atom mol GetAtoms OEIsHalogen PrintAtoms atom Halogens return Download as text While this introduction can help you get some use from predicates details on more complex predicates and how to write your own predicates can be found in the chapter entitled Predicate Functions see below OEChem C Theory Manual Version 1 3 1 Previous 5 6 Looping over the Up 5 Traversing the Atoms Next 6 Properties of Atoms Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node49.html", "title": "5.7 looping over subsets of atoms or bonds", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>5.7 Looping over subsets of Atoms or Bonds</title>\n<META NAME=\"description\" CONTENT=\"5.7 Looping over subsets of Atoms or Bonds\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node48.html\">\n<LINK REL=\"up\" HREF=\"node42.html\">\n<LINK REL=\"next\" HREF=\"node50.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node48.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node42.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node50.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node48.html\">5.6 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node42.html\">5. Traversing the Atoms,</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node50.html\">6. Properties of Atoms</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION008700000000000000000\">\n5.7 Looping over subsets of Atoms or Bonds</A>\n</H1>\n\n<P>\nIt can sometimes be useful to loop over a subset of the atoms or bonds of a\nmolecule.  Traditionally this can be done with \"if\" statements inside a\nloop, but it can sometimes be cleaner and more convenient to subset the\nmembers being looped over inside the iterator.  To do this, many of\nOEChem's iterator generation functions (such as <code>OEMolBase::GetAtoms</code>)\ncan take an argument which determines which subset of the object to loop\nover (these functions are called predicates as detailed in the chapter\n\"Predicate Functions\" below).  The details of these functions are not\nimportant here.  Instead, a programmer can simply use the predefined\nfunctors to control their loops.\n\n<P>\nThe following example shows the use of the predicate <code>OEHasAtomicNum()</code>\nto loop over only carbon atoms in a molecule.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nint main()\n{\n  OEMol mol;\n  OEParseSmiles(mol, \"c1cc(O)c(O)cc1CCN\");\n\n  OEIter&lt;OEAtomBase&gt; atom;\n  cerr &lt;&#60; \"Carbon Atoms:\" &lt;&#60; endl;\n  for (atom=mol.GetAtoms(OEHasAtomicNum(6));atom;++atom)\n  {\n    cerr &lt;&#60; \"Atom: \" &lt;&#60; atom-&gt;GetIdx() &lt;&#60; \" \";\n  }\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-8.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nSome of the common predefined functors in OEChem are listed below.\nPredicate functions can be trivial, such as <code>OEIsHydrogen()</code>, or quite\ncomplex, such as <code>Match(const char*)</code>, which returns atoms which match\nthe SMARTS string passed to the constructor.  For a complete listing,\nplease see the chapter on predicate functions or the API manual.  Many\npredicates take intuitive construction arguments.  For instance,\n<code>OEHasAtomName</code> has a <code>const char*</code> argument which is the atom's\nname (<I>e.g.</I>  <code>mol.GetAtoms(OEHasAtomName(\"CA\"))</code>).\n\n<P>\n<i>Atoms</i>\n<dl><dd><pre class=\"verbatim\">OEHasAtomName(const char *)\nOEHasAtomicNum(unsigned int)\nOEIsHalogen\nOEIsAromaticAtom\nOEAtomIsInRing\nOEIsChiralAtom\nOEHasResidueNumber(unsigned int)\nOEMatchFunc(const char*)\n</pre></dl>\n<i>Bonds</i>\n<dl><dd><pre class=\"verbatim\">OEHasBondIdx(unsigned int)\nOEHasOrder(unsigned int)\nOEBondIsInRing\nOEIsRotor\n</pre></dl>\n<i>Conformers</i>\n<dl><dd><pre class=\"verbatim\">OEHasConfIdx(unsigned int)\n</pre></dl>\n\n<P>\nThese predicates can be particularly helpful when used in conjunction with\nfunctions which take OEIters as arguments as seen in the example below.\nThis use of predicates allows factorization of the loop in a way not easily\npossible with <code>if</code> statements.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nvoid PrintAtoms(OEIter&lt;OEAtomBase&gt; &amp;atom,const char *title)\n{\n  cerr &lt;&#60; title &lt;&#60; \":\" &lt;&#60; endl;\n  for (atom.ToFirst();atom;++atom)\n  {\n    cerr &lt;&#60; atom-&gt;GetIdx() &lt;&#60; \" \";\n  }\n  cerr &lt;&#60; endl;\n}\n\nint main()\n{\n  OEMol mol;\n  OEParseSmiles(mol, \"c1c(O)c(O)c(Cl)cc1CCCBr\");\n\n  OEIter&lt;OEAtomBase&gt; atom;\n  atom = mol.GetAtoms(OEAtomIsInRing());\n  PrintAtoms(atom,\"Ring Atoms\");\n\n  atom = mol.GetAtoms(OEHasAtomicNum(8));\n  PrintAtoms(atom,\"Oxygens\");\n\n  atom = mol.GetAtoms(OEIsHalogen());\n  PrintAtoms(atom,\"Halogens\");\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-9.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nWhile this introduction can help you get some use from predicates, details\non more complex predicates and how to write your own predicates can be\nfound in the chapter entitled <i>Predicate Functions</i> (see below).\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node48.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node42.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node50.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node48.html\">5.6 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node42.html\">5. Traversing the Atoms,</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node50.html\">6. Properties of Atoms</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38658.0}