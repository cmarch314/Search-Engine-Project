{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Hyperplane d Kernel Definition An instance of data type Hyperplane d is an oriented hyperplane in d dimensional space A hyperplane h is represented by coefficients c c1 cd of type RT At least one of c to c d 1 must be non zero The plane equation is i d ci xi cd where x to xd 1 are Cartesian point coordinates For a particular x the sign of i d ci xi cd determines the position of a point x with respect to the hyperplane on the hyperplane on the negative side or on the positive side There are two equality predicates for hyperplanes The weak equality predicate weak equality declares two hyperplanes equal if they consist of the same set of points the strong equality predicate operator requires in addition that the negative halfspaces agree In other words two hyperplanes are strongly equal if their coefficient vectors are positive multiples of each other and they are weakly equal if their coefficient vectors are multiples of each other Types Hyperplane d Kernel RT the ring type Hyperplane d Kernel FT the field type Hyperplane d Kernel LA the linear algebra layer Hyperplane d Kernel Coefficient const iterator a read only iterator for the coefficients Creation Hyperplane d Kernel h introduces a variable h of type Hyperplane d Kernel template class InputIterator Hyperplane d Kernel h int d InputIterator first InputIterator last RT D introduces a variable h of type Hyperplane d Kernel initialized to the hyperplane with coefficients set first last and D Precondition size first last d Requirement The value type of InputIterator is RT template class InputIterator Hyperplane d Kernel h int d InputIterator first InputIterator last introduces a variable h of type Hyperplane d Kernel initialized to the hyperplane with coefficients set first last Precondition size first last d 1 Requirement The value type of InputIterator is RT template class ForwardIterator Hyperplane d Kernel h ForwardIterator first ForwardIterator last Point d Kernel o Oriented side side Oriented side constructs some hyperplane that passes through the points in set first last If side is ON POSITIVE SIDE or ON NEGATIVE SIDE then o is on that side of the constructed hyperplane Precondition A hyperplane with the stated properties must exist Requirement The value type of ForwardIterator is Point d Kernel Hyperplane d Kernel h Point d Kernel p Direction d Kernel dir constructs the hyperplane with normal direction dir that passes through p The direction dir points into the positive side Precondition p dimension dir dimension and dir is not degenerate Hyperplane d Kernel h RT a RT b RT c introduces a variable h of type Hyperplane d Kernel in 2 dimensional space with equation ax by c Hyperplane d Kernel h RT a RT b RT c RT d introduces a variable h of type Hyperplane d Kernel in 3 dimensional space with equation ax by cz d Operations int h dimension returns the dimension of h RT h int i returns the i th coefficient of h Precondition i d RT h coefficient int i returns the i th coefficient of h Precondition i d Coefficient const iterator h coefficients begin returns an iterator pointing to the first coefficient Coefficient const iterator h coefficients end returns an iterator pointing beyond the last coefficient Vector d Kernel h orthogonal vector returns the orthogonal vector of h It points from the negative halfspace into the positive halfspace and its homogeneous coordinates are c cd 1 1 Direction d Kernel h orthogonal direction returns the orthogonal direction of h It points from the negative halfspace into the positive halfspace Oriented side h oriented side Point d Kernel p returns the side of the hyperplane h containing p Precondition h dimension p dimension bool h has on Point d Kernel p returns true iff point p lies on the hyperplane h Precondition h dimension p dimension bool h has on boundary Point d Kernel p returns true iff point p lies on the boundary of hyperplane h Precondition h dimension p dimension bool h has on positive side Point d Kernel p returns true iff point p lies on the positive side of hyperplane h Precondition h dimension p dimension bool h has on negative side Point d Kernel p returns true iff point p lies on the negative side of hyperplane h Precondition h dimension p dimension Hyperplane d Kernel h transform Aff transformation d Kernel t returns t h Precondition h dimension t dimension Non Member Functions bool weak equality h1 h2 test for weak equality Precondition h1 dimension h2 dimension Implementation Hyperplanes are implemented by arrays of integers as an item type All operations like creation initialization tests vector arithmetic input and output on a hyperplane h take time O h dimension coordinate access and dimension take constant time The space requirement is O h dimension Next Sphere d Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_d_ref/Class_Hyperplane_d.html", "title": "hyperplane_d&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_d_ref/Hyperplane_d.tex' -->\n<html> <head>  \n<title>Hyperplane_d&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_498\"></A>\n\n<A NAME=\"Cross_link_anchor_499\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_373\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Hyperplane_d<Kernel>\"></A>\n<h2><I>CGAL::Hyperplane_d&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance of data type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A></I> is an oriented hyperplane\nin <MATH><I>d</I></MATH> - dimensional space. A hyperplane <MATH><I>h</I></MATH> is represented by\ncoefficients <MATH><I>(c<SUB>0</SUB>,c<SUB>1</SUB>,...,c<SUB>d</SUB>)</I></MATH> of type <I>RT</I>. At least one of\n<MATH><I>c<SUB>0</SUB></I></MATH> to <MATH><I>c<SUB> d - 1 </SUB></I></MATH> must be non-zero.  The plane equation is\n<MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=24 ALIGN=MIDDLE SRC=\"cc_sum.gif\"> <SUB> 0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; d </SUB> c<SUB>i</SUB> x<SUB>i</SUB> + c<SUB>d</SUB> = 0</I></MATH>, where <MATH><I>x<SUB>0</SUB></I></MATH> to <MATH><I>x<SUB>d-1</SUB></I></MATH> are\n<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> point coordinates.  For a particular <MATH><I>x</I></MATH> the <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of <MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=24 ALIGN=MIDDLE SRC=\"cc_sum.gif\"> <SUB>\n  0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; d </SUB> c<SUB>i</SUB> x<SUB>i</SUB> + c<SUB>d</SUB></I></MATH> determines the position of a point <MATH><I>x</I></MATH>\nwith respect to the hyperplane (on the hyperplane, on the negative\nside, or on the positive side).\n<P>\n\nThere are two equality predicates for hyperplanes. The (weak) equality\npredicate (<I>weak_equality</I>) declares two hyperplanes equal if they\nconsist of the same set of points, the strong equality predicate\n(<I>operator==</I>) requires in addition that the negative halfspaces\nagree. In other words, two hyperplanes are strongly equal if their\ncoefficient vectors are positive multiples of each other and they are\n(weakly) equal if their coefficient vectors are multiples of each\nother.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the ring type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the field type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::LA\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the linear algebra layer.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::Coefficient_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a read-only iterator for the\n  coefficients.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable\n  <I>h</I> of type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    int d,<BR>\n\nInputIterator first,<BR>\n\nInputIterator last,<BR>\n\nRT D);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a\n  variable <I>h</I> of type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> initialized to the\n  hyperplane with coefficients <I>set [first,last)</I> and <I>D</I>.<BR>\n\n<EM>Precondition: </EM><I>size [first,last) == d</I>.<BR>\n\n<EM>Requirement: </EM>The value type of\n  InputIterator is <I>RT</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( int d,  InputIterator first,  InputIterator last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable\n  <I>h</I> of type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> initialized to the hyperplane\n  with coefficients <I>set [first,last)</I>.<BR>\n\n<EM>Precondition: </EM><I>size     [first,last) == d+1</I>.<BR>\n\n<EM>Requirement: </EM>The value type of InputIterator\n  is <I>RT</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class ForwardIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator first,<BR>\n\nForwardIterator last,<BR>\n\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; o,<BR>\n\n<A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A> side = <A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>(0));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs\n  some hyperplane that passes through the points in <I>set     [first,last)</I>. If <I>side</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I> or\n  <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I> then <I>o</I> is on that side of the\n  constructed hyperplane.<BR>\n\n<EM>Precondition: </EM>A hyperplane with the stated\n  properties must exist.<BR>\n\n<EM>Requirement: </EM>The value type of\n  <I>ForwardIterator</I> is <I><A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Direction_d.html#Cross_link_anchor_491\">Direction_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; dir);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs the hyperplane with normal direction <I>dir</I> that\n  passes through <MATH><I>p</I></MATH>. The direction <I>dir</I> points into the positive\n  side.<BR>\n\n<EM>Precondition: </EM><I>p.dimension()==dir.dimension()</I> and <I>dir</I>\n  is not degenerate.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( RT a,  RT b,  RT c);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a\n  variable <I>h</I> of type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> in <MATH><I>2</I></MATH>-dimensional\n  space with equation <MATH><I>ax+by+c=0</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( RT a,  RT b,  RT c,  RT d);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a\n  variable <I>h</I> of type <I><A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> in <MATH><I>3</I></MATH>-dimensional\n  space with equation <MATH><I>ax+by+cz+d=0</I></MATH>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension of <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     h [ int i]<A NAME=\"Function_RT_operator696int_i9_;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <MATH><I>i</I></MATH>-th coefficient of\n  <I>h</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> d</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_RT_coefficient6int_i9_;\"></A>\nRT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.coefficient ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <MATH><I>i</I></MATH>-th coefficient of\n  <I>h</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> d</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Coefficient_const_iterator_coefficients_begin69_;\"></A>\nCoefficient_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.coefficients_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  an iterator pointing to the first coefficient.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Coefficient_const_iterator_coefficients_end69_;\"></A>\nCoefficient_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.coefficients_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an\n  iterator pointing beyond the last coefficient.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_d6Kernel9_orthogonal_vector69_;\"></A>\n<A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.<A HREF=\"../Kernel_23_ref/Function_orthogonal_vector.html#Cross_link_anchor_245\">orthogonal_vector</A> ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the orthogonal\n  vector of <I>h</I>. It points from the negative halfspace into the\n  positive halfspace and its homogeneous coordinates are <MATH><I>(c<SUB>0</SUB>,\n  ..., c<SUB>d - 1</SUB>,1)</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_d6Kernel9_orthogonal_direction69_;\"></A>\n<A HREF=\"Class_Direction_d.html#Cross_link_anchor_491\">Direction_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.orthogonal_direction ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the\n  orthogonal direction of <I>h</I>. It points from the negative\n  halfspace into the positive halfspace.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_oriented_side6const_Point_d6Kernel9__p9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.oriented_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  the side of the hyperplane <I>h</I> containing <MATH><I>p</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff point\n  <I>p</I> lies on the hyperplane <I>h</I>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_boundary6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on_boundary (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true\n  iff point <I>p</I> lies on the boundary of hyperplane <I>h</I>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_positive_side6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on_positive_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  true iff point <I>p</I> lies on the positive side of hyperplane\n  <I>h</I>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_negative_side6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on_negative_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  true iff point <I>p</I> lies on the negative side of hyperplane\n  <I>h</I>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hyperplane_d6Kernel9_transform6const_Aff_transformation_d6Kernel9__t9_;\"></A>\n<A HREF=\"Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.transform (  <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <MATH><I>t(h)</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>h.dimension() == t.dimension()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Non-Member Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_weak_equality6const_Hyperplane_d6Kernel9__h1+_const_Hyperplane_d6Kernel9__h29_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    weak_equality (  h1,  h2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    test for weak equality.<BR>\n\n<EM>Precondition: </EM><I>h1.dimension() == h2.dimension()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nHyperplanes are implemented by arrays of integers as an item type.\nAll operations like creation, initialization, tests, vector\narithmetic, input and output on a hyperplane <MATH><I>h</I></MATH> take time\n<MATH><I>O(<I>h.dimension()</I>)</I></MATH>. coordinate access and <I>dimension()</I> take\nconstant time.  The space requirement is <MATH><I>O(<I>h.dimension()</I>)</I></MATH>.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Sphere_d.html\"><I>Sphere_d&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37649.0}