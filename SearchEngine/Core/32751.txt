{"text": "View Javadoc 1 package swirl workspace 2 3 import java net InetAddress 4 import java net NetworkInterface 5 import java net UnknownHostException 6 import java util Enumeration 7 import java util HashMap 8 import java util Iterator 9 import java util Map 1 import java util Vector 11 12 import org apache commons httpclient URIException 13 import org apache commons logging Log 14 import org apache commons logging LogFactory 15 import org picocontainer Startable 16 17 import swirl workspace messages MessageSender 18 19 2 Maintains list of known peers for application and manages message 21 information about their joining and leaving 22 23 author bpillet 24 25 public class PeerManager implements Startable 26 27 our own service type 28 public static final String SWIRL TYPE webdav tcp local 29 3 logger for this class 31 private static Log log LogFactory getLog PeerManager class 32 33 cached copy of the local network address 34 private static InetAddress localAddress null 35 36 this map contains everybody in the proximity 37 private Map everybody new HashMap 38 39 message sender for each peer 4 private MessageSender msgSender 41 42 PeerManager listeners 43 private Vector listeners new Vector 44 45 46 Initialize the manager 47 48 param sender a message sender for each peer to send things to 49 5 public PeerManager final MessageSender sender 51 52 this msgSender sender 53 54 55 56 figures out what the IP address is for the first non loopback interface 57 to come up 58 59 return the IP address that is not 127 1 6 61 public static InetAddress getLocalAddress 62 63 if localAddress null 64 65 try 66 67 Enumeration interfaces NetworkInterface getNetworkInterfaces 68 69 while interfaces hasMoreElements 7 71 NetworkInterface inter NetworkInterface interfaces 72 nextElement 73 Enumeration addresses inter getInetAddresses 74 75 while addresses hasMoreElements 76 77 InetAddress address InetAddress addresses 78 nextElement 79 8 if log isDebugEnabled 81 82 log debug address address nhostAddress 83 address getHostAddress 84 canonicalHostName 85 address getCanonicalHostName 86 nhostName address getHostName 87 1 address isAnyLocalAddress 88 2 address isLinkLocalAddress 89 3 address isLoopbackAddress 9 4 address isMCGlobal 5 91 address isMCLinkLocal 6 92 address isMCNodeLocal 7 93 address isMCOrgLocal 8 94 address isMCSiteLocal 9 95 address isMulticastAddress 1 96 address isSiteLocalAddress 97 98 99 if address isLoopbackAddress 1 address isLinkLocalAddress 1 1 address isSiteLocalAddress 1 2 address isMCOrgLocal 1 3 address isMCSiteLocal 1 4 address instanceof java net Inet6Address 1 5 1 6 1 7 1 8 localAddress address 1 9 11 return localAddress 111 112 113 114 115 catch Exception ex 116 117 log error There was a problem figuring out the local IP address 118 ex 119 12 121 122 if the extreme restricted method does not work use the regular way of 123 finding a network card 124 if localAddress null 125 try 126 localAddress java net InetAddress getLocalHost 127 catch UnknownHostException e 128 TODO Auto generated catch block 129 e printStackTrace 13 131 132 return localAddress 133 134 135 136 TODO 137 138 return TODO 139 14 public static String getLocalUserID 141 142 String localUserID PeerManager getLocalAddress getHostAddress 143 App PORT 144 145 return localUserID 146 147 148 149 Get a reference to a peer given itss unique id 15 151 param peerId the peer s unique id 152 153 return the Peer object 154 155 public Peer getPeer final String peerId 156 157 return Peer everybody get peerId 158 159 16 161 Get the peers managed by this manager 162 163 return mapping of uniqueId to peer 164 165 public Map getPeers 166 167 return everybody 168 169 17 171 Get all of the peers managed by this manager 172 173 return list of peers 174 175 public Iterator getPeersIterator 176 177 return everybody values iterator 178 179 18 181 Add a peer to the manager and notify all of the listeners about the 182 event 183 184 param peer the peer to add 185 186 throws URIException if there s a problem getting the peer s id 187 188 public void addPeer final Peer peer throws URIException 189 19 if log isDebugEnabled 191 192 log debug everybody everybody 193 194 195 if log isDebugEnabled 196 197 log debug trying to add peer peer 198 199 2 if everybody containsKey peer getUniqueID 2 1 2 2 everybody put peer getUniqueID peer 2 3 peer addMessageSender msgSender 2 4 if log isDebugEnabled 2 5 2 6 log debug listeners listeners 2 7 2 8 2 9 if listeners isEmpty 21 211 make a copy of the listener list in case 212 anyone adds removes listeners 213 Vector targets 214 215 synchronized this 216 217 targets Vector listeners clone 218 219 22 walk through the listener list and 221 call the receiveMessage method in each 222 Enumeration e targets elements 223 224 while e hasMoreElements 225 226 PeerManagerListener listener PeerManagerListener e 227 nextElement 228 229 if log isDebugEnabled 23 231 log debug calling peerJoined peer 232 on listener listener 233 234 235 listener peerJoined peer 236 237 if log isDebugEnabled 238 239 log debug called peerJoined peer 24 241 242 243 244 245 246 247 Add listener for peer changes 248 249 param listener the listener to add 25 251 public void addPeerManagerListener final PeerManagerListener listener 252 253 if log isDebugEnabled 254 255 log debug addPeerManagerListener listener 256 257 258 listeners add listener 259 26 261 262 Take the peer out of the manager and notify all listeners about the 263 event 264 265 param name the uniqueId of the peer to remove 266 267 public void removePeer final String name 268 269 try 27 271 if log isDebugEnabled 272 273 log debug everybody n everybody 274 275 276 Peer peer Peer everybody remove name 277 278 if log isDebugEnabled 279 28 log debug removed name with peer object peer 281 282 283 if peer null listeners isEmpty 284 285 make a copy of the listener list in case 286 anyone adds removes listeners 287 Vector targets 288 289 synchronized this 29 291 targets Vector listeners clone 292 293 294 walk through the listener list and 295 call the receiveMessage method in each 296 Enumeration e targets elements 297 298 while e hasMoreElements 299 3 PeerManagerListener listener PeerManagerListener e 3 1 nextElement 3 2 3 3 listener peerLeft peer 3 4 3 5 3 6 3 7 catch IllegalArgumentException e 3 8 3 9 log error e 31 311 312 313 314 Remove listener for peer changes 315 316 param listener the listener to remove 317 318 public void removePeerManagerListener final PeerManagerListener listener 319 32 listeners remove listener 321 322 323 324 how many peers are in the list 325 326 return the list size 327 328 public int size 329 33 return everybody size 331 332 333 334 Start the peer manager up 335 336 public void start 337 338 if log isDebugEnabled 339 34 log debug starting PeerManager 341 342 343 if log isDebugEnabled 344 345 log debug started PeerManager 346 347 348 349 35 stop the peermanager for now 351 352 public void stop 353 354 if log isDebugEnabled 355 356 log debug stopping PeerManager 357 358 359 if 36 361 TODO make this stop broadcasting messages too 362 363 log isDebugEnabled 364 365 366 TODO make this stop broadcasting messages too 367 368 log debug stopped PeerManager 369 37 371 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/PeerManager.html", "title": "peermanager xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>PeerManager xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/PeerManager.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.net.InetAddress;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.net.NetworkInterface;\n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> java.net.UnknownHostException;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.util.Enumeration;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.util.HashMap;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.util.Iterator;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> java.util.Map;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> java.util.Vector;\n<a name=\"11\" href=\"#11\">11</a>  \n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> org.apache.commons.httpclient.URIException;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> org.picocontainer.Startable;\n<a name=\"16\" href=\"#16\">16</a>  \n<a name=\"17\" href=\"#17\">17</a>  <strong>import</strong> swirl.workspace.messages.MessageSender;\n<a name=\"18\" href=\"#18\">18</a>  \n<a name=\"19\" href=\"#19\">19</a>  <em>/**<em>*</em></em>\n<a name=\"20\" href=\"#20\">20</a>  <em> * Maintains list of known peers for application and manages message</em>\n<a name=\"21\" href=\"#21\">21</a>  <em> * information about their joining and leaving</em>\n<a name=\"22\" href=\"#22\">22</a>  <em> *</em>\n<a name=\"23\" href=\"#23\">23</a>  <em> * @author bpillet</em>\n<a name=\"24\" href=\"#24\">24</a>  <em> */</em>\n<a name=\"25\" href=\"#25\">25</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> implements Startable\n<a name=\"26\" href=\"#26\">26</a>  {\n<a name=\"27\" href=\"#27\">27</a>      <em>/**<em>* our own service type */</em></em>\n<a name=\"28\" href=\"#28\">28</a>      <strong>public</strong> <strong>static</strong> <strong>final</strong> String SWIRL_TYPE = <span class=\"string\">\"_webdav._tcp.local.\"</span>;\n<a name=\"29\" href=\"#29\">29</a>  \n<a name=\"30\" href=\"#30\">30</a>      <em>/**<em>* logger for this class */</em></em>\n<a name=\"31\" href=\"#31\">31</a>      <strong>private</strong> <strong>static</strong> Log log = LogFactory.getLog(PeerManager.<strong>class</strong>);\n<a name=\"32\" href=\"#32\">32</a>  \n<a name=\"33\" href=\"#33\">33</a>      <em>/**<em>* cached copy of the local network address */</em></em>\n<a name=\"34\" href=\"#34\">34</a>      <strong>private</strong> <strong>static</strong> InetAddress localAddress = <strong>null</strong>;\n<a name=\"35\" href=\"#35\">35</a>  \n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>* this map contains everybody in the proximity */</em></em>\n<a name=\"37\" href=\"#37\">37</a>      <strong>private</strong> Map everybody = <strong>new</strong> HashMap();\n<a name=\"38\" href=\"#38\">38</a>  \n<a name=\"39\" href=\"#39\">39</a>      <em>/**<em>* message sender for each peer */</em></em>\n<a name=\"40\" href=\"#40\">40</a>      <strong>private</strong> <a href=\"../../swirl/workspace/messages/MessageSender.html\">MessageSender</a> msgSender;\n<a name=\"41\" href=\"#41\">41</a>  \n<a name=\"42\" href=\"#42\">42</a>      <em>/**<em>* <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> listeners */</em></em>\n<a name=\"43\" href=\"#43\">43</a>      <strong>private</strong> Vector listeners = <strong>new</strong> Vector();\n<a name=\"44\" href=\"#44\">44</a>  \n<a name=\"45\" href=\"#45\">45</a>      <em>/**<em>*</em></em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     * Initialize the manager</em>\n<a name=\"47\" href=\"#47\">47</a>  <em>     *</em>\n<a name=\"48\" href=\"#48\">48</a>  <em>     * @param sender a message sender for each peer to send things to</em>\n<a name=\"49\" href=\"#49\">49</a>  <em>     */</em>\n<a name=\"50\" href=\"#50\">50</a>      <strong>public</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a>(<strong>final</strong> <a href=\"../../swirl/workspace/messages/MessageSender.html\">MessageSender</a> sender)\n<a name=\"51\" href=\"#51\">51</a>      {\n<a name=\"52\" href=\"#52\">52</a>          <strong>this</strong>.msgSender = sender;\n<a name=\"53\" href=\"#53\">53</a>      }\n<a name=\"54\" href=\"#54\">54</a>  \n<a name=\"55\" href=\"#55\">55</a>      <em>/**<em>*</em></em>\n<a name=\"56\" href=\"#56\">56</a>  <em>     * figures out what the IP address is for the first non-loopback interface</em>\n<a name=\"57\" href=\"#57\">57</a>  <em>     * to come up</em>\n<a name=\"58\" href=\"#58\">58</a>  <em>     *</em>\n<a name=\"59\" href=\"#59\">59</a>  <em>     * @return the IP address that is not 127.0.0.1</em>\n<a name=\"60\" href=\"#60\">60</a>  <em>     */</em>\n<a name=\"61\" href=\"#61\">61</a>      <strong>public</strong> <strong>static</strong> InetAddress getLocalAddress()\n<a name=\"62\" href=\"#62\">62</a>      {\n<a name=\"63\" href=\"#63\">63</a>          <strong>if</strong>(localAddress == <strong>null</strong>)\n<a name=\"64\" href=\"#64\">64</a>          {\n<a name=\"65\" href=\"#65\">65</a>              <strong>try</strong>\n<a name=\"66\" href=\"#66\">66</a>              {\n<a name=\"67\" href=\"#67\">67</a>                  Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\n<a name=\"68\" href=\"#68\">68</a>  \n<a name=\"69\" href=\"#69\">69</a>                  <strong>while</strong>(interfaces.hasMoreElements())\n<a name=\"70\" href=\"#70\">70</a>                  {\n<a name=\"71\" href=\"#71\">71</a>                      NetworkInterface inter = (NetworkInterface)interfaces\n<a name=\"72\" href=\"#72\">72</a>                                               .nextElement();\n<a name=\"73\" href=\"#73\">73</a>                      Enumeration addresses = inter.getInetAddresses();\n<a name=\"74\" href=\"#74\">74</a>  \n<a name=\"75\" href=\"#75\">75</a>                      <strong>while</strong>(addresses.hasMoreElements())\n<a name=\"76\" href=\"#76\">76</a>                      {\n<a name=\"77\" href=\"#77\">77</a>                          InetAddress address = (InetAddress)addresses\n<a name=\"78\" href=\"#78\">78</a>                                                .nextElement();\n<a name=\"79\" href=\"#79\">79</a>  \n<a name=\"80\" href=\"#80\">80</a>                          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"81\" href=\"#81\">81</a>                          {\n<a name=\"82\" href=\"#82\">82</a>                              log.debug(<span class=\"string\">\"address: \"</span> + address + <span class=\"string\">\"\\nhostAddress: \"</span>\n<a name=\"83\" href=\"#83\">83</a>                                        + address.getHostAddress()\n<a name=\"84\" href=\"#84\">84</a>                                        + <span class=\"string\">\" canonicalHostName: \"</span>\n<a name=\"85\" href=\"#85\">85</a>                                        + address.getCanonicalHostName()\n<a name=\"86\" href=\"#86\">86</a>                                        + <span class=\"string\">\"\\nhostName: \"</span> + address.getHostName()\n<a name=\"87\" href=\"#87\">87</a>                                        + <span class=\"string\">\" 1: \"</span> + address.isAnyLocalAddress()\n<a name=\"88\" href=\"#88\">88</a>                                        + <span class=\"string\">\" 2: \"</span> + address.isLinkLocalAddress()\n<a name=\"89\" href=\"#89\">89</a>                                        + <span class=\"string\">\" 3: \"</span> + address.isLoopbackAddress()\n<a name=\"90\" href=\"#90\">90</a>                                        + <span class=\"string\">\" 4: \"</span> + address.isMCGlobal() + <span class=\"string\">\" 5: \"</span>\n<a name=\"91\" href=\"#91\">91</a>                                        + address.isMCLinkLocal() + <span class=\"string\">\" 6: \"</span>\n<a name=\"92\" href=\"#92\">92</a>                                        + address.isMCNodeLocal() + <span class=\"string\">\" 7: \"</span>\n<a name=\"93\" href=\"#93\">93</a>                                        + address.isMCOrgLocal() + <span class=\"string\">\" 8: \"</span>\n<a name=\"94\" href=\"#94\">94</a>                                        + address.isMCSiteLocal() + <span class=\"string\">\" 9: \"</span>\n<a name=\"95\" href=\"#95\">95</a>                                        + address.isMulticastAddress() + <span class=\"string\">\" 10: \"</span>\n<a name=\"96\" href=\"#96\">96</a>                                        + address.isSiteLocalAddress());\n<a name=\"97\" href=\"#97\">97</a>                          }\n<a name=\"98\" href=\"#98\">98</a>  \n<a name=\"99\" href=\"#99\">99</a>                          <strong>if</strong>(!(address.isLoopbackAddress() ||\n<a name=\"100\" href=\"#100\">100</a>         \t\t\t\t\t\taddress.isLinkLocalAddress() ||\n<a name=\"101\" href=\"#101\">101</a>         \t\t\t\t\t\t<em class=\"comment\">/*<em class=\"comment\">address.isSiteLocalAddress() || */</em></em>\n<a name=\"102\" href=\"#102\">102</a>         \t\t\t\t\t\taddress.isMCOrgLocal() ||\n<a name=\"103\" href=\"#103\">103</a>         \t\t\t\t\t\taddress.isMCSiteLocal() || \n<a name=\"104\" href=\"#104\">104</a>         \t\t\t\t\t   (address instanceof java.net.Inet6Address)\n<a name=\"105\" href=\"#105\">105</a>         \t\t\t\t\t) \n<a name=\"106\" href=\"#106\">106</a>         \t\t\t\t  )\n<a name=\"107\" href=\"#107\">107</a>                         {\n<a name=\"108\" href=\"#108\">108</a>                             localAddress = address;\n<a name=\"109\" href=\"#109\">109</a> \n<a name=\"110\" href=\"#110\">110</a>                             <strong>return</strong> localAddress;\n<a name=\"111\" href=\"#111\">111</a>                         }\n<a name=\"112\" href=\"#112\">112</a>                     }\n<a name=\"113\" href=\"#113\">113</a>                 }\n<a name=\"114\" href=\"#114\">114</a>             }\n<a name=\"115\" href=\"#115\">115</a>             <strong>catch</strong>(Exception ex)\n<a name=\"116\" href=\"#116\">116</a>             {\n<a name=\"117\" href=\"#117\">117</a>                 log.error(<span class=\"string\">\"There was a problem figuring out the local IP address\"</span>,\n<a name=\"118\" href=\"#118\">118</a>                           ex);\n<a name=\"119\" href=\"#119\">119</a>             }\n<a name=\"120\" href=\"#120\">120</a>         }\n<a name=\"121\" href=\"#121\">121</a>         \n<a name=\"122\" href=\"#122\">122</a>         <em class=\"comment\">// if the extreme restricted method does not work, use the regular way of</em>\n<a name=\"123\" href=\"#123\">123</a>         <em class=\"comment\">// finding a network card...</em>\n<a name=\"124\" href=\"#124\">124</a>         <strong>if</strong> (localAddress == <strong>null</strong>) {\n<a name=\"125\" href=\"#125\">125</a>         \t<strong>try</strong> {\n<a name=\"126\" href=\"#126\">126</a> \t\t\t\tlocalAddress = java.net.InetAddress.getLocalHost();\n<a name=\"127\" href=\"#127\">127</a> \t\t\t} <strong>catch</strong> (UnknownHostException e) {\n<a name=\"128\" href=\"#128\">128</a> \t\t\t\t<em class=\"comment\">// TODO Auto-generated catch block</em>\n<a name=\"129\" href=\"#129\">129</a> \t\t\t\te.printStackTrace();\n<a name=\"130\" href=\"#130\">130</a> \t\t\t}\n<a name=\"131\" href=\"#131\">131</a>         }\n<a name=\"132\" href=\"#132\">132</a>         <strong>return</strong> localAddress;\n<a name=\"133\" href=\"#133\">133</a>     }\n<a name=\"134\" href=\"#134\">134</a> \n<a name=\"135\" href=\"#135\">135</a>     <em>/**<em>*</em></em>\n<a name=\"136\" href=\"#136\">136</a> <em>     * TODO</em>\n<a name=\"137\" href=\"#137\">137</a> <em>     *</em>\n<a name=\"138\" href=\"#138\">138</a> <em>     * @return TODO</em>\n<a name=\"139\" href=\"#139\">139</a> <em>     */</em>\n<a name=\"140\" href=\"#140\">140</a>     <strong>public</strong> <strong>static</strong> String getLocalUserID()\n<a name=\"141\" href=\"#141\">141</a>     {\n<a name=\"142\" href=\"#142\">142</a>         String localUserID = PeerManager.getLocalAddress().getHostAddress()\n<a name=\"143\" href=\"#143\">143</a>                              + <span class=\"string\">\":\"</span> + App.PORT;\n<a name=\"144\" href=\"#144\">144</a> \n<a name=\"145\" href=\"#145\">145</a>         <strong>return</strong> localUserID;\n<a name=\"146\" href=\"#146\">146</a>     }\n<a name=\"147\" href=\"#147\">147</a> \n<a name=\"148\" href=\"#148\">148</a>     <em>/**<em>*</em></em>\n<a name=\"149\" href=\"#149\">149</a> <em>     * Get a reference to a peer given itss unique id</em>\n<a name=\"150\" href=\"#150\">150</a> <em>     *</em>\n<a name=\"151\" href=\"#151\">151</a> <em>     * @param peerId the peer's unique id</em>\n<a name=\"152\" href=\"#152\">152</a> <em>     *</em>\n<a name=\"153\" href=\"#153\">153</a> <em>     * @return the Peer object</em>\n<a name=\"154\" href=\"#154\">154</a> <em>     */</em>\n<a name=\"155\" href=\"#155\">155</a>     <strong>public</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> getPeer(<strong>final</strong> String peerId)\n<a name=\"156\" href=\"#156\">156</a>     {\n<a name=\"157\" href=\"#157\">157</a>         <strong>return</strong> (Peer)everybody.get(peerId);\n<a name=\"158\" href=\"#158\">158</a>     }\n<a name=\"159\" href=\"#159\">159</a> \n<a name=\"160\" href=\"#160\">160</a>     <em>/**<em>*</em></em>\n<a name=\"161\" href=\"#161\">161</a> <em>     * Get the peers managed by this manager</em>\n<a name=\"162\" href=\"#162\">162</a> <em>     *</em>\n<a name=\"163\" href=\"#163\">163</a> <em>     * @return mapping of uniqueId to peer</em>\n<a name=\"164\" href=\"#164\">164</a> <em>     */</em>\n<a name=\"165\" href=\"#165\">165</a>     <strong>public</strong> Map getPeers()\n<a name=\"166\" href=\"#166\">166</a>     {\n<a name=\"167\" href=\"#167\">167</a>         <strong>return</strong> everybody;\n<a name=\"168\" href=\"#168\">168</a>     }\n<a name=\"169\" href=\"#169\">169</a> \n<a name=\"170\" href=\"#170\">170</a>     <em>/**<em>*</em></em>\n<a name=\"171\" href=\"#171\">171</a> <em>     * Get all of the peers managed by this manager</em>\n<a name=\"172\" href=\"#172\">172</a> <em>     *</em>\n<a name=\"173\" href=\"#173\">173</a> <em>     * @return list of peers</em>\n<a name=\"174\" href=\"#174\">174</a> <em>     */</em>\n<a name=\"175\" href=\"#175\">175</a>     <strong>public</strong> Iterator getPeersIterator()\n<a name=\"176\" href=\"#176\">176</a>     {\n<a name=\"177\" href=\"#177\">177</a>         <strong>return</strong> everybody.values().iterator();\n<a name=\"178\" href=\"#178\">178</a>     }\n<a name=\"179\" href=\"#179\">179</a> \n<a name=\"180\" href=\"#180\">180</a>     <em>/**<em>*</em></em>\n<a name=\"181\" href=\"#181\">181</a> <em>     * Add a peer to the manager and notify all of the listeners about the</em>\n<a name=\"182\" href=\"#182\">182</a> <em>     * event</em>\n<a name=\"183\" href=\"#183\">183</a> <em>     *</em>\n<a name=\"184\" href=\"#184\">184</a> <em>     * @param peer the peer to add</em>\n<a name=\"185\" href=\"#185\">185</a> <em>     *</em>\n<a name=\"186\" href=\"#186\">186</a> <em>     * @throws URIException if there's a problem getting the peer's id</em>\n<a name=\"187\" href=\"#187\">187</a> <em>     */</em>\n<a name=\"188\" href=\"#188\">188</a>     <strong>public</strong> <strong>void</strong> addPeer(<strong>final</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer) throws URIException\n<a name=\"189\" href=\"#189\">189</a>     {\n<a name=\"190\" href=\"#190\">190</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"191\" href=\"#191\">191</a>         {\n<a name=\"192\" href=\"#192\">192</a>             log.debug(<span class=\"string\">\"everybody: \"</span> + everybody);\n<a name=\"193\" href=\"#193\">193</a>         }\n<a name=\"194\" href=\"#194\">194</a> \n<a name=\"195\" href=\"#195\">195</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"196\" href=\"#196\">196</a>         {\n<a name=\"197\" href=\"#197\">197</a>             log.debug(<span class=\"string\">\"trying to add  peer: \"</span> + peer);\n<a name=\"198\" href=\"#198\">198</a>         }\n<a name=\"199\" href=\"#199\">199</a> \n<a name=\"200\" href=\"#200\">200</a>         <strong>if</strong>(!everybody.containsKey(peer.getUniqueID()))\n<a name=\"201\" href=\"#201\">201</a>         {\n<a name=\"202\" href=\"#202\">202</a>             everybody.put(peer.getUniqueID(), peer);\n<a name=\"203\" href=\"#203\">203</a>             peer.addMessageSender(msgSender);\n<a name=\"204\" href=\"#204\">204</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"205\" href=\"#205\">205</a> \t        {\n<a name=\"206\" href=\"#206\">206</a>             \tlog.debug(<span class=\"string\">\"listeners: \"</span> + listeners);\n<a name=\"207\" href=\"#207\">207</a> \t        }\n<a name=\"208\" href=\"#208\">208</a> \n<a name=\"209\" href=\"#209\">209</a>             <strong>if</strong>(!listeners.isEmpty())\n<a name=\"210\" href=\"#210\">210</a>             {\n<a name=\"211\" href=\"#211\">211</a>                 <em class=\"comment\">// make a copy of the listener list in case</em>\n<a name=\"212\" href=\"#212\">212</a>                 <em class=\"comment\">//   anyone adds/removes listeners</em>\n<a name=\"213\" href=\"#213\">213</a>                 Vector targets;\n<a name=\"214\" href=\"#214\">214</a> \n<a name=\"215\" href=\"#215\">215</a>                 <strong>synchronized</strong>(<strong>this</strong>)\n<a name=\"216\" href=\"#216\">216</a>                 {\n<a name=\"217\" href=\"#217\">217</a>                     targets = (Vector)listeners.clone();\n<a name=\"218\" href=\"#218\">218</a>                 }\n<a name=\"219\" href=\"#219\">219</a> \n<a name=\"220\" href=\"#220\">220</a>                 <em class=\"comment\">// walk through the listener list and</em>\n<a name=\"221\" href=\"#221\">221</a>                 <em class=\"comment\">//   call the receiveMessage method in each</em>\n<a name=\"222\" href=\"#222\">222</a>                 Enumeration e = targets.elements();\n<a name=\"223\" href=\"#223\">223</a> \n<a name=\"224\" href=\"#224\">224</a>                 <strong>while</strong>(e.hasMoreElements())\n<a name=\"225\" href=\"#225\">225</a>                 {\n<a name=\"226\" href=\"#226\">226</a>                     <a href=\"../../swirl/workspace/PeerManagerListener.html\">PeerManagerListener</a> listener = (PeerManagerListener)e\n<a name=\"227\" href=\"#227\">227</a>                                                    .nextElement();\n<a name=\"228\" href=\"#228\">228</a> \n<a name=\"229\" href=\"#229\">229</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"230\" href=\"#230\">230</a>                     {\n<a name=\"231\" href=\"#231\">231</a>                         log.debug(<span class=\"string\">\"calling peerJoined: \"</span> + peer\n<a name=\"232\" href=\"#232\">232</a>                                   + <span class=\"string\">\" on listener: \"</span> + listener);\n<a name=\"233\" href=\"#233\">233</a>                     }\n<a name=\"234\" href=\"#234\">234</a> \n<a name=\"235\" href=\"#235\">235</a>                     listener.peerJoined(peer);\n<a name=\"236\" href=\"#236\">236</a> \n<a name=\"237\" href=\"#237\">237</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"238\" href=\"#238\">238</a>                     {\n<a name=\"239\" href=\"#239\">239</a>                         log.debug(<span class=\"string\">\"called peerJoined: \"</span> + peer);\n<a name=\"240\" href=\"#240\">240</a>                     }\n<a name=\"241\" href=\"#241\">241</a>                 }\n<a name=\"242\" href=\"#242\">242</a>             }\n<a name=\"243\" href=\"#243\">243</a>         }\n<a name=\"244\" href=\"#244\">244</a>     }\n<a name=\"245\" href=\"#245\">245</a> \n<a name=\"246\" href=\"#246\">246</a>     <em>/**<em>*</em></em>\n<a name=\"247\" href=\"#247\">247</a> <em>     * Add listener for peer changes</em>\n<a name=\"248\" href=\"#248\">248</a> <em>     *</em>\n<a name=\"249\" href=\"#249\">249</a> <em>     * @param listener the listener to add</em>\n<a name=\"250\" href=\"#250\">250</a> <em>     */</em>\n<a name=\"251\" href=\"#251\">251</a>     <strong>public</strong> <strong>void</strong> addPeerManagerListener(<strong>final</strong> <a href=\"../../swirl/workspace/PeerManagerListener.html\">PeerManagerListener</a> listener)\n<a name=\"252\" href=\"#252\">252</a>     {\n<a name=\"253\" href=\"#253\">253</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"254\" href=\"#254\">254</a>         {\n<a name=\"255\" href=\"#255\">255</a>             log.debug(<span class=\"string\">\"addPeerManagerListener(\"</span> + listener + <span class=\"string\">\")\"</span>);\n<a name=\"256\" href=\"#256\">256</a>         }\n<a name=\"257\" href=\"#257\">257</a> \n<a name=\"258\" href=\"#258\">258</a>         listeners.add(listener);\n<a name=\"259\" href=\"#259\">259</a>     }\n<a name=\"260\" href=\"#260\">260</a> \n<a name=\"261\" href=\"#261\">261</a>     <em>/**<em>*</em></em>\n<a name=\"262\" href=\"#262\">262</a> <em>     * Take the peer out of the manager and notify all listeners about the</em>\n<a name=\"263\" href=\"#263\">263</a> <em>     * event</em>\n<a name=\"264\" href=\"#264\">264</a> <em>     *</em>\n<a name=\"265\" href=\"#265\">265</a> <em>     * @param name the uniqueId of the peer to remove</em>\n<a name=\"266\" href=\"#266\">266</a> <em>     */</em>\n<a name=\"267\" href=\"#267\">267</a>     <strong>public</strong> <strong>void</strong> removePeer(<strong>final</strong> String name)\n<a name=\"268\" href=\"#268\">268</a>     {\n<a name=\"269\" href=\"#269\">269</a>         <strong>try</strong>\n<a name=\"270\" href=\"#270\">270</a>         {\n<a name=\"271\" href=\"#271\">271</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"272\" href=\"#272\">272</a>             {\n<a name=\"273\" href=\"#273\">273</a>                 log.debug(<span class=\"string\">\"everybody:\\n\"</span> + everybody);\n<a name=\"274\" href=\"#274\">274</a>             }\n<a name=\"275\" href=\"#275\">275</a> \n<a name=\"276\" href=\"#276\">276</a>             <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer = (Peer)everybody.remove(name);\n<a name=\"277\" href=\"#277\">277</a> \n<a name=\"278\" href=\"#278\">278</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"279\" href=\"#279\">279</a>             {\n<a name=\"280\" href=\"#280\">280</a>                 log.debug(<span class=\"string\">\"removed \"</span> + name + <span class=\"string\">\" with peer object \"</span> + peer);\n<a name=\"281\" href=\"#281\">281</a>             }\n<a name=\"282\" href=\"#282\">282</a> \n<a name=\"283\" href=\"#283\">283</a>             <strong>if</strong>((peer != <strong>null</strong>) &amp;&amp; !listeners.isEmpty())\n<a name=\"284\" href=\"#284\">284</a>             {\n<a name=\"285\" href=\"#285\">285</a>                 <em class=\"comment\">// make a copy of the listener list in case</em>\n<a name=\"286\" href=\"#286\">286</a>                 <em class=\"comment\">//   anyone adds/removes listeners</em>\n<a name=\"287\" href=\"#287\">287</a>                 Vector targets;\n<a name=\"288\" href=\"#288\">288</a> \n<a name=\"289\" href=\"#289\">289</a>                 <strong>synchronized</strong>(<strong>this</strong>)\n<a name=\"290\" href=\"#290\">290</a>                 {\n<a name=\"291\" href=\"#291\">291</a>                     targets = (Vector)listeners.clone();\n<a name=\"292\" href=\"#292\">292</a>                 }\n<a name=\"293\" href=\"#293\">293</a> \n<a name=\"294\" href=\"#294\">294</a>                 <em class=\"comment\">// walk through the listener list and</em>\n<a name=\"295\" href=\"#295\">295</a>                 <em class=\"comment\">//   call the receiveMessage method in each</em>\n<a name=\"296\" href=\"#296\">296</a>                 Enumeration e = targets.elements();\n<a name=\"297\" href=\"#297\">297</a> \n<a name=\"298\" href=\"#298\">298</a>                 <strong>while</strong>(e.hasMoreElements())\n<a name=\"299\" href=\"#299\">299</a>                 {\n<a name=\"300\" href=\"#300\">300</a>                     <a href=\"../../swirl/workspace/PeerManagerListener.html\">PeerManagerListener</a> listener = (PeerManagerListener)e\n<a name=\"301\" href=\"#301\">301</a>                                                    .nextElement();\n<a name=\"302\" href=\"#302\">302</a> \n<a name=\"303\" href=\"#303\">303</a>                     listener.peerLeft(peer);\n<a name=\"304\" href=\"#304\">304</a>                 }\n<a name=\"305\" href=\"#305\">305</a>             }\n<a name=\"306\" href=\"#306\">306</a>         }\n<a name=\"307\" href=\"#307\">307</a>         <strong>catch</strong>(IllegalArgumentException e)\n<a name=\"308\" href=\"#308\">308</a>         {\n<a name=\"309\" href=\"#309\">309</a>             log.error(e);\n<a name=\"310\" href=\"#310\">310</a>         }\n<a name=\"311\" href=\"#311\">311</a>     }\n<a name=\"312\" href=\"#312\">312</a> \n<a name=\"313\" href=\"#313\">313</a>     <em>/**<em>*</em></em>\n<a name=\"314\" href=\"#314\">314</a> <em>     * Remove listener for peer changes</em>\n<a name=\"315\" href=\"#315\">315</a> <em>     *</em>\n<a name=\"316\" href=\"#316\">316</a> <em>     * @param listener the listener to remove</em>\n<a name=\"317\" href=\"#317\">317</a> <em>     */</em>\n<a name=\"318\" href=\"#318\">318</a>     <strong>public</strong> <strong>void</strong> removePeerManagerListener(<strong>final</strong> <a href=\"../../swirl/workspace/PeerManagerListener.html\">PeerManagerListener</a> listener)\n<a name=\"319\" href=\"#319\">319</a>     {\n<a name=\"320\" href=\"#320\">320</a>         listeners.remove(listener);\n<a name=\"321\" href=\"#321\">321</a>     }\n<a name=\"322\" href=\"#322\">322</a> \n<a name=\"323\" href=\"#323\">323</a>     <em>/**<em>*</em></em>\n<a name=\"324\" href=\"#324\">324</a> <em>     * how many peers are in the list</em>\n<a name=\"325\" href=\"#325\">325</a> <em>     *</em>\n<a name=\"326\" href=\"#326\">326</a> <em>     * @return the list size</em>\n<a name=\"327\" href=\"#327\">327</a> <em>     */</em>\n<a name=\"328\" href=\"#328\">328</a>     <strong>public</strong> <strong>int</strong> size()\n<a name=\"329\" href=\"#329\">329</a>     {\n<a name=\"330\" href=\"#330\">330</a>         <strong>return</strong> everybody.size();\n<a name=\"331\" href=\"#331\">331</a>     }\n<a name=\"332\" href=\"#332\">332</a> \n<a name=\"333\" href=\"#333\">333</a>     <em>/**<em>*</em></em>\n<a name=\"334\" href=\"#334\">334</a> <em>     * Start the peer manager up</em>\n<a name=\"335\" href=\"#335\">335</a> <em>     */</em>\n<a name=\"336\" href=\"#336\">336</a>     <strong>public</strong> <strong>void</strong> start()\n<a name=\"337\" href=\"#337\">337</a>     {\n<a name=\"338\" href=\"#338\">338</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"339\" href=\"#339\">339</a>         {\n<a name=\"340\" href=\"#340\">340</a>             log.debug(<span class=\"string\">\"starting PeerManager\"</span>);\n<a name=\"341\" href=\"#341\">341</a>         }\n<a name=\"342\" href=\"#342\">342</a> \n<a name=\"343\" href=\"#343\">343</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"344\" href=\"#344\">344</a>         {\n<a name=\"345\" href=\"#345\">345</a>             log.debug(<span class=\"string\">\"started PeerManager\"</span>);\n<a name=\"346\" href=\"#346\">346</a>         }\n<a name=\"347\" href=\"#347\">347</a>     }\n<a name=\"348\" href=\"#348\">348</a> \n<a name=\"349\" href=\"#349\">349</a>     <em>/**<em>*</em></em>\n<a name=\"350\" href=\"#350\">350</a> <em>     * stop the peermanager for now</em>\n<a name=\"351\" href=\"#351\">351</a> <em>     */</em>\n<a name=\"352\" href=\"#352\">352</a>     <strong>public</strong> <strong>void</strong> stop()\n<a name=\"353\" href=\"#353\">353</a>     {\n<a name=\"354\" href=\"#354\">354</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"355\" href=\"#355\">355</a>         {\n<a name=\"356\" href=\"#356\">356</a>             log.debug(<span class=\"string\">\"stopping PeerManager\"</span>);\n<a name=\"357\" href=\"#357\">357</a>         }\n<a name=\"358\" href=\"#358\">358</a> \n<a name=\"359\" href=\"#359\">359</a>         <strong>if</strong>(\n<a name=\"360\" href=\"#360\">360</a>         <em>/**<em>*</em></em>\n<a name=\"361\" href=\"#361\">361</a> <em>         * TODO make this stop broadcasting messages too</em>\n<a name=\"362\" href=\"#362\">362</a> <em>         */</em>\n<a name=\"363\" href=\"#363\">363</a>         log.isDebugEnabled())\n<a name=\"364\" href=\"#364\">364</a>         {\n<a name=\"365\" href=\"#365\">365</a>             <em>/**<em>*</em></em>\n<a name=\"366\" href=\"#366\">366</a> <em>             * TODO make this stop broadcasting messages too</em>\n<a name=\"367\" href=\"#367\">367</a> <em>             */</em>\n<a name=\"368\" href=\"#368\">368</a>             log.debug(<span class=\"string\">\"stopped PeerManager\"</span>);\n<a name=\"369\" href=\"#369\">369</a>         }\n<a name=\"370\" href=\"#370\">370</a>     }\n<a name=\"371\" href=\"#371\">371</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32751.0}