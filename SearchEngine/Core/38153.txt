{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 252D Sweep Line of Planar Curves Ester Ezra and Tali Zvi 25 1 Introduction Let C c1 c2 cn be a set of curves for which we want to compute all intersections We want to avoid testing pairs of curves that are far apart To find the intersecting pairs we imagine sweeping a line l from left to right over the plane starting from a position left to all curves While we sweep the plane we keep track of all curves intersecting it This type of algorithm is called a plane sweep algorithm and the line l is called the sweep line The status of the sweep line is the set of curves intersecting it The status changes while the sweep line moves to the right but not continuously The sweep line status is updated at specific points called the event points These points are actually the endpoints of all curves and their intersection points The initial set of event points are only the endpoints of the curves More event points are added as intersection points are calculated This chapter describes the Sweep line 2 class it implements the plane sweep algorithm and can be used to compute the intersection points of a given collection curves the disjoint interior subcurves induced by such a collection and a few other retaled tasks In particular we take advantage of the implemented sweep line algorithm to construct a Planar Map of intersecting curves efficiently See CGAL Pm with intersection for more deatils 25 1 1 Functionality Given a collection C of possibly intersecting not necessarily x monotone 1 curves in a plane the Sweep line 2 class provides the following operations that can be performed on C calculate the intersection points between the curves of C calculate the interior disjoint curves induced by C calculate the intersection points and return a list of curves participating at each intersection point answer the query whether an intersection point between any two curves exists 25 1 2 A Simple Program The simple program listed below computes all sub segments induced by a set of four input segments illustrated in figure The endpoints of the resulting sub segments are printed out Figure Four input segments include CGAL Cartesian h include CGAL MP Float h include CGAL Quotient h include CGAL Arr segment cached traits 2 h include CGAL Sweep line 2 h include vector typedef CGAL Quotient CGAL MP Float NT typedef CGAL Cartesian NT Kernel typedef CGAL Arr segment cached traits 2 Kernel Traits typedef Traits Point 2 Point 2 typedef Traits Curve 2 Curve 2 typedef std list Curve 2 CurveList typedef CurveList iterator CurveListIter typedef CGAL Sweep line 2 CurveListIter Traits Sweep line int main CurveList segments Curve 2 c1 Point 2 1 5 Point 2 8 5 Curve 2 c2 Point 2 1 1 Point 2 8 8 Curve 2 c3 Point 2 3 1 Point 2 3 8 Curve 2 c4 Point 2 8 5 Point 2 8 8 segments push back c1 segments push back c2 segments push back c3 segments push back c4 std list Curve 2 subcurves Sweep line sl sl get subcurves segments begin segments end std back inserter subcurves true for std list Curve 2 iterator scv iter subcurves begin scv iter subcurves end scv iter std cout scv iter std endl return The input segments intersect at three interior points and meet at two endpoints The program results with ten sub segments The output of the program follows 1 1 1 1 147 49 147 49 1 1 5 1 147 49 245 49 3 1 1 1 147 49 147 49 147 49 147 49 147 49 245 49 147 49 245 49 3 1 8 1 147 49 147 49 245 49 245 49 147 49 245 49 245 49 245 49 245 49 245 49 8 1 5 1 245 49 245 49 8 1 8 1 8 1 5 1 8 1 8 1 25 2 Software Design The Sweep line 2 InputIterator Traits class is parameterized with two objects The sequence of input curves are obtained through the InputIterator The type of curves processed by the Sweep line 2 InputIterator Traits class is dictated by the injected traits class a model of the SweepLineTraits concept Inject the suitable traits class to handle your desired family of curves The planar map with intersection comes with a collection of traits classes that handle various types of curves such as segments polylines and conics Naturally users may author new traits classes that handle other types or that possesses different carachteristics 25 2 1 Traits Classes The Sweep line 2 InputIterator Traits class is parameterized by a traits class that defines the abstract interface between the sweep line algorithm and the primitive it uses It must define three types of objects namely Curve 2 X monotone curve 2 and Point 2 where the type of the endpoints of an X monotone curve 2 type curve is Point 2 In addition the traits class must provide a set of operations on these two types The PlanarMapWithIntersectionsTraits 2 concept is a refinement of the SweepLineTraits 2 concept as some of the functions required to perform some of the planar map operations are not needed by the sweep line algorithm Hence all the models of the Planar Map With Intersections Traits PlanarMapWithIntersectionsTraits 2 concept are also models of the SweepLineTraits 2 concept 25 3 Implementation The sweep line algorithm was implemented according to Bentley and Ottmann dBvKOS97 The implementation is robust It supports general curves and handles all degenerate cases including overlapping curves vertical segments and tangency between curves The STL map container is used for the implementation of the event queue and the STL set container is used for the implementation of the status line Additional containers are used to accomodate all intersection points for each input curve ordered from left to right and all the resulting subcurves for each event point The complexity of this algorithm is O nlogn klogn where n is the number of the input curves and k is the number of intersection points induced by these curves Footnotes 1 We stress this fact because some implementation such as Planar map 2 Dcel Traits assume all curves are x monotone in order to gain simplicity and speed Next chapter Sweep line Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Sweep_line_2/Chapter_main.html", "title": "2d sweep line of planar curves", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Sweep_line_2/main.tex' -->\n<html> <head>  \n<title>2D Sweep Line of Planar Curves</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_25\"></a>\n  \n<h1>Chapter 25<BR>2D Sweep Line of Planar Curves</h1>\n\n<A NAME=\"I1_ChapterSweepLine\"></A>\n<EM>Ester Ezra  and Tali Zvi</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>25.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nLet <MATH><I>C:={c<SUB>1</SUB>,c<SUB>2</SUB>, ...c<SUB>n</SUB>}</I></MATH> be a set of curves for which we want \nto compute all intersections. We want to avoid testing pairs of curves \nthat are far apart. To find the intersecting pairs we imagine sweeping  \na line <MATH><I>l</I></MATH> from left to right over the plane, starting from a position \nleft to all curves. While we sweep the plane, we keep track of all \ncurves intersecting it.\n<P>\n\nThis type of algorithm is called a <I>plane sweep algorithm</I> and the line \n<MATH><I>l</I></MATH> is called the <I>sweep line</I>. The <I>status</I> of the sweep line is \nthe set of curves intersecting it. The status changes while the sweep line \nmoves to the right, but not continuously. The sweep line status is updated at \nspecific points called the <I>event points</I>. These points are actually\nthe endpoints of all curves and their <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points. The initial set of \n<I>event points</I> are only the endpoints of the curves. More\n<I>event points</I> are added as <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points are calculated.\n<P>\n\nThis chapter describes the <I><A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> class it implements the\n<I>plane sweep algorithm</I>, and can be used to compute the\n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points of a given collection curves, the disjoint-interior\nsubcurves induced by such a collection, and a few other retaled tasks.\n<P>\n\nIn particular, we take advantage of the implemented sweep line algorithm to\nconstruct a Planar Map of intersecting curves efficiently. See \n<I>CGAL::Pm_with_intersection</I> for more deatils.\n<P>\n\n<h3>25.1.1&nbsp;&nbsp;&nbsp;Functionality</h3>\n\nGiven a collection <MATH><I>C</I></MATH> of possibly intersecting (not necessarily\n<MATH><I>x</I></MATH>-monotone&nbsp;<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>) curves in a plane, the\n<I><A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> class provides the following operations that can be\nperformed on <MATH><I>C</I></MATH>:\n<P>\n\n<UL>\n<LI>calculate the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points between the curves of <MATH><I>C</I></MATH>. \n<LI>calculate the interior-disjoint curves induced by <MATH><I>C</I></MATH>.\n<LI>calculate the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points and return a list of curves \n  participating at each <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point.\n<LI>answer the query whether an <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point between any two curves\n  exists.\n</UL>\n<P>\n\n<h3>25.1.2&nbsp;&nbsp;&nbsp;A Simple Program</h3>\n\nThe simple program listed below computes all sub segments induced by \na set of four input segments illustrated in figure <A HREF=\"Chapter_main.html#SL_sec:simple\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\nThe endpoints of the resulting sub segments are printed out.\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>Four input segments\n<A NAME=\"SL_sec:simple\"></A>\n<P>\n\n<center>\n  <img src=\"sl_simple.gif\" border=0 alt=\"Four Input Segments\">\n</center>\n<P>\n\n<PRE>\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1400\">MP_Float</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1404\">Quotient</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Arrangement_2_ref/Class_Arr_segment_cached_traits_2.html#Cross_link_anchor_839\">Arr_segment_cached_traits_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>.h&gt;\n#include &lt;vector&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1403\">CGAL::Quotient</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A>&gt;                  NT;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;NT&gt;                             <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>;\ntypedef <A HREF=\"../Arrangement_2_ref/Class_Arr_segment_cached_traits_2.html#Cross_link_anchor_838\">CGAL::Arr_segment_cached_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;       Traits;\ntypedef Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                                 <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\ntypedef Traits::Curve_2                                 Curve_2;\ntypedef std::list&lt;Curve_2&gt;                              CurveList;\ntypedef CurveList::iterator                             CurveListIter;\ntypedef <A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_850\">CGAL::Sweep_line_2</A>&lt;CurveListIter, Traits&gt;       Sweep_line;\n\nint main()\n{\n  CurveList  segments;\n  Curve_2 c1(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1,5), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(8,5));\n  Curve_2 c2(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1,1), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(8,8));\n  Curve_2 c3(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(3,1), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(3,8));\n  Curve_2 c4(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(8,5), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(8,8));\n\n  segments.push_back(c1);\n  segments.push_back(c2);\n  segments.push_back(c3);\n  segments.push_back(c4);\n\n  std::list&lt;Curve_2&gt; subcurves;\n  Sweep_line sl;\n  sl.get_subcurves(segments.begin(), segments.end(), \n\t\t   std::back_inserter(subcurves), true);\n  \n  for (std::list&lt;Curve_2&gt;::iterator scv_iter = subcurves.begin(); \n       scv_iter != subcurves.end(); scv_iter++)\n    std::cout &lt;&lt; *scv_iter &lt;&lt; std::endl;\n  return 0;\n}\n</PRE>\n<P>\n\nThe input segments intersect at three interior points and meet at two\nendpoints. The program results with ten sub segments.\nThe output of the program follows:\n<P>\n\n<PRE>\n1/1 1/1 -147/-49 -147/-49\n1/1 5/1 -147/-49 -245/-49\n3/1 1/1 -147/-49 -147/-49\n-147/-49 -147/-49 -147/-49 -245/-49\n-147/-49 -245/-49 3/1 8/1\n-147/-49 -147/-49 245/49 245/49\n-147/-49 -245/-49 245/49 245/49\n245/49 245/49 8/1 5/1\n245/49 245/49 8/1 8/1\n8/1 5/1 8/1 8/1\n</PRE>\n\n<a name=\"Section_2\"></a>\n        \n<h2>25.2&nbsp;&nbsp;&nbsp;Software Design</h2>\n<P>\n\nThe <I><A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;InputIterator,Traits&gt;</I> class is parameterized with\ntwo objects. The sequence of input curves are obtained through the\n<I>InputIterator</I>. The type of curves processed by the\n<I><A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;InputIterator,Traits&gt;</I> class is dictated\nby the injected traits class, a model of the <I>SweepLineTraits</I>\nconcept. Inject the suitable traits class, to handle your desired family of\ncurves. The <I>planar map with <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I> comes with a collection of\ntraits classes that handle various types of curves, such as segments,\npolylines, and conics. Naturally, users may author new traits classes\nthat handle other types or that possesses different carachteristics.\n<P>\n\n<h3>25.2.1&nbsp;&nbsp;&nbsp;Traits Classes</h3>\n\nThe <I><A HREF=\"../Sweep_line_2_ref/Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;InputIterator,Traits&gt;</I> class is parameterized by a\ntraits class, that defines the abstract interface between the sweep-line\nalgorithm and the primitive it uses. It must define three types of objects,\nnamely <I>Curve_2</I>, <I>X_monotone_curve_2</I>, and <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>,\nwhere the type of the endpoints of an <I>X_monotone_curve_2</I>-type curve\nis <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>. In addition, the traits class must provide a set of\noperations on these two types.\n<P>\n\nThe <I><A HREF=\"../Pm_with_intersections_2_ref/Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A></I> concept is a refinement of the \n<I><A HREF=\"../Sweep_line_2_ref/Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A></I> concept, as some of the functions required to\nperform some of the <I>planar map</I> operations are not needed, by the sweep\nline algorithm. Hence, all the models of the\nPlanar Map With Intersections Traits <I><A HREF=\"../Pm_with_intersections_2_ref/Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A></I>\nconcept are also models of the <I><A HREF=\"../Sweep_line_2_ref/Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A></I> concept.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>25.3&nbsp;&nbsp;&nbsp;Implementation</h2>\n<P>\n\nThe sweep line algorithm was implemented according to Bentley and\nOttmann&nbsp;[<A HREF=\"../biblio.html#Biblio_bkos-cgaa-97\">dBvKOS97</A>]. The implementation is robust. It supports general\ncurves and handles all degenerate cases, including overlapping curves,\nvertical segments, and tangency between curves.\n<P>\n\nThe STL <MATH><I>map</I></MATH>-container is used for the implementation of the event queue, and\nthe STL <MATH><I>set</I></MATH>-container is used for the implementation of the status line.\nAdditional containers are used to accomodate all <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points for each\ninput curve ordered from left to right, and all the resulting subcurves for\neach event point.\n<P>\n\nThe complexity of this algorithm is <MATH><I>O(n</I></MATH>log<MATH><I>n + k</I></MATH>log<MATH><I>n)</I></MATH> where <MATH><I>n</I></MATH> is the \nnumber of the input curves and <MATH><I>k</I></MATH> is the number of <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points \ninduced by these curves.\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nWe stress this fact, because some implementation,\nsuch as, <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&lt;Dcel,Traits&gt;</I> assume all curves are <MATH><I>x</I></MATH>-monotone \nin order to gain simplicity and speed.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Sweep_line_2_ref/Chapter_intro.html\">Sweep line</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_25!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38153.0}