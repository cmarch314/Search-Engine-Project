{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Segment tree d Data Window Traits Types Segment tree d Data Window Traits Data container Data Segment tree d Data Window Traits Window container Window Segment tree d Data Window Traits Traits class Traits Creation include CGAL Segment tree d h Segment tree d Data Window Traits s Tree base Data Window sublayer tree A segment tree is defined such that the subtree of each vertex is of the same type prototype sublayer tree is We assume that the dimension of the tree is d This means that sublayer tree is a prototype of a d 1 dimensional tree All data items of the d dimensional segment tree have container type Data The query window of the tree has container type Window Traits provides access to the corresponding data slots of container Data and Window for the d th dimension The traits class Traits must at least provide all functions and type definitions described for example in the reference page for tree point traits The template class described there is fully generic and should fulfill the most requirements one can have In order to generate a one dimensional segment tree instantiate Tree anchor Data Window sublayer tree with the same template parameters Data and Window Segment tree d is defined In order to construct a two dimensional segment tree create Segment tree d with a one dimensional Segment tree d with the corresponding Traits of the first dimension Precondition Traits Data Data and Traits Window Window Operations bool s make tree In it first In it last The tree is constructed according to the data items in the sequence between the element pointed by iterator first and iterator last Precondition This function can only be called once If it is the first call the tree is build and true is returned Otherwise nothing is done but a CGAL warning is given and false returned OutputIterator s window query Window win OutputIterator result win a1 b1 ad bd ai bi Ti 1 i d All elements that intersect the associated d dimensional interval of win are placed in the associated sequence container of OutputIterator and returns an output iterator that points to the last location the function wrote to In order to perform an inverse range query a range query of width has to be performed OutputIterator s enclosing query Window win OutputIterator result All elements that enclose the associated d dimensional interval of win are placed in the associated sequence container of OutputIterator and returns an output iterator that points to the last location the function wrote to bool s is valid The tree structure is checked For each vertex either the sublayer tree is a tree anchor or it stores a possibly empty list of data items In the first case the sublayer tree of the vertex is checked on being valid In the second case each data item is checked weather it contains the associated interval of the vertex and does not contain the associated interval of the parent vertex or not True is returned if the tree structure is valid false otherwise Protected Operations bool s is inside Window win Data object returns true if the interval of object is contained in the interval of win False otherwise bool s is anchor returns false Implementation A d dimensional segment tree is constructed in O nlognd time An inverse range query is performed in time O k logd n where k is the number of reported intervals The tree uses O nlognd storage Next Segment tree k Traits Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/SearchStructures_ref/Class_Segment_tree_d.html", "title": "segment_tree_d&lt;data, window, traits&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './SearchStructures_ref/Segment_tree_d.tex' -->\n<html> <head>  \n<title>Segment_tree_d&lt;Data, Window, Traits&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1262\"></A>\n\n<A NAME=\"Cross_link_anchor_1263\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1329\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Segment_tree_d<Data, Window, Traits>\"></A>\n<h2><I>CGAL::Segment_tree_d&lt;Data, Window, Traits&gt;</I></h2>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A>&lt;Data, Window, Traits&gt;::Data\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    container <I>Data</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A>&lt;Data, Window, Traits&gt;::Window\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    container <I>Window</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A>&lt;Data, Window, Traits&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    class <I>Traits</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Segment_tree_d.h\">CGAL/Segment_tree_d.h</A>&gt;</I>\n<P>\n\n<BR>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A>&lt;Data, Window, Traits&gt; s ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Tree_base&lt;Data, Window&gt; sublayer_tree);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A segment tree is defined, such that the subtree of  each\n  vertex is of the   same type prototype\n<I>sublayer_tree</I> is.<BR>\n\nWe assume that the dimension of the tree is <MATH><I>d</I></MATH>. This means, that\n<I> sublayer_tree</I> is a  prototype of a <MATH><I>d-1</I></MATH>-dimensional\ntree. All data items of the <MATH><I>d</I></MATH>-dimensional segment tree\n  have container type <I>Data</I>. The query window of the\n  tree has container type\n  <I>Window</I>. <I>Traits</I>\n provides access to the corresponding data slots of container\n <I>Data</I> and  <I>Window</I> for the <MATH><I>d</I></MATH>-th\n dimension. The traits  class <I>Traits</I>\n must at least provide all functions and type definitions\n described, for example, in the reference page for\n <I><A HREF=\"Class_tree_point_traits.html#Cross_link_anchor_1274\">tree_point_traits</A></I>.\nThe template class\n described there is fully generic and should fulfill the most\n requirements one can have.\nIn order\n  to generate a one-dimensional segment tree instantiate <I><A HREF=\"Class_Tree_anchor.html#Cross_link_anchor_1276\">Tree_anchor</A>&lt;Data, Window&gt; sublayer_tree</I> with the same template parameters <I>Data</I> and\n  <I>Window</I> <I><A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A></I> is defined. In\n  order to construct a two-dimensional segment tree, create\n  <I><A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A></I> with\n   a one-dimensional <I><A HREF=\"Class_Segment_tree_d.html#Cross_link_anchor_1263\">Segment_tree_d</A></I> with the\n  corresponding <I>Traits</I> of the first dimension.<BR>\n\n<I>Precondition: Traits::Data==Data and     Traits::Window==Window.</I>\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_make_tree6In_it_first+_In_it_last9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.make_tree ( In_it first,  In_it last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The tree is constructed according to the data items in the\n  sequence between the element pointed by iterator <I>first</I> and\n  iterator <I>last</I>.\n        </TD></TR>\n        </TABLE><BR>\n\n<EM>Precondition: </EM>This function can only be called once. If it is the\nfirst call the tree is build and <I>true</I> is\nreturned. Otherwise, nothing is done but a  <I>CGAL   warning</I> is given and <I>false</I>\nreturned.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_window_query6Window_win+_OutputIterator_result9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.window_query ( Window win,  OutputIterator result)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>       win</I><MATH><I>=[a<SUB>1</SUB>,b<SUB>1</SUB>),..., [a<SUB>d</SUB>,b<SUB>d</SUB>)</I></MATH>, <MATH><I>a<SUB>i</SUB>,b<SUB>i</SUB> <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> T<SUB>i</SUB></I></MATH>, <MATH><I>1 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> d</I></MATH>. All elements that\n  intersect the associated <MATH><I>d</I></MATH>-dimensional interval of\n<I>win</I> are placed in the\nassociated sequence container of  <I>OutputIterator</I>  and\nreturns an\noutput iterator that points\nto the last location the function wrote to.\nIn order to perform an inverse range query, a range query of\n<MATH><I><IMG BORDER=0 WIDTH=5 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_epsilon.gif\"></I></MATH> width has to be performed.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_enclosing_query6Window_win+_OutputIterator_result9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.enclosing_query ( Window win,  OutputIterator result)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    All elements that\n  enclose the associated <MATH><I>d</I></MATH>-dimensional interval of\n<I>win</I> are placed in the\nassociated sequence container of  <I>OutputIterator</I>  and returns an output iterator that points\nto the last location the function wrote to.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.is_valid ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The tree structure is checked. For each\n  vertex either the\n  sublayer tree is a tree anchor, or it stores a (possibly empty)\n  list of data items. In the first case, the sublayer tree of the\n  vertex is checked on being valid. In the second case, each data\n  item is checked weather it contains the associated interval of\n  the vertex and does not contain the associated interval of the\n  parent vertex or not. True is returned if the tree structure is valid,\n  false otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<B>Protected Operations</B>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_inside6Window_win+_Data_object9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.is_inside ( Window win,  Data object)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true, if the\n  interval of <I>object</I> is contained in the\n  interval of <I>win</I>. False otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_anchor69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.is_anchor ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns false.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nA <MATH><I>d</I></MATH>-dimensional segment tree is constructed in <MATH><I>O(n</I></MATH>log<MATH><I>n<SUP>d</SUP>)</I></MATH> time.\nAn inverse range query is performed in time <MATH><I>O(k+</I></MATH>log<MATH><I><SUP>d</SUP> n )</I></MATH>, where <MATH><I>k</I></MATH>\nis the number of reported intervals.\nThe tree uses <MATH><I>O(n</I></MATH>log<MATH><I>n<SUP>d</SUP>)</I></MATH> storage.\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Segment_tree_k.html\"><I>Segment_tree_k&lt;Traits&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_60!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39641.0}