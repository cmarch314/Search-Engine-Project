{"text": "ICS 31 David G Kay UC Irvine String Formatting Are you tired of printing dollars and cents amounts in Python that look like 12 Do you want to have precise control over what the text results of your programs look like You re ready to learn string formatting Python like most programming languages provides a rich set of features for specifying the format of text They make it possible to format things into nicely aligned tables or smoothly flowing sentences or even rudimentary text based graphics Formatting specifications aren t conceptually difficult they re not like mutable vs immutable or navigating through lists of namedtuples containing other lists But they are intricate They control the character by character arrangement on the page or screen Since even one extra space can mess up your results string formatting requires us to pay close meticulous attention Suppose we define the Dish namedtuple and some Dish objects as follows from collections import namedtuple Dish namedtuple Dish name price calories d1 Dish Paht Woon Sen 12 5 34 d2 Dish Mee Krob 9 355 d3 Dish Escargots 24 5 95 DL d1 d2 d3 Now suppose we want to display a Dish in this form Paht Woon Sen 12 5 34 cal This text and any text we plan to print consists of constant parts that are the same every time we print the results and variable parts that may change every time depending on the data Here are the variable parts of this string Paht Woon Sen 12 5 34 cal VARIABLE VAR VAR The variable parts are the data values Paht Woon Sen 12 5 and 34 Here are the constant parts of the same string Paht Woon Sen 12 5 34 cal CONST CON CONSTANT The constant parts are the three strings space parenthesis dollar sign parenthesis colon space and cal space c a l period Next we list the names of the variable data parts These might be Python variable names or more complicated Python expressions In this case the names are d1 name d1 price and d1 calories Next we decide whether we need any precise formatting a specific number of digits or other precise spacing We will want these eventually but for now let s say no so we can cover some other issues first Copy the code below paste it into a Python file and run it in IDLE from collections import namedtuple Dish namedtuple Dish name price calories d1 Dish Paht Woon Sen 12 5 34 d2 Dish Mee Krob 9 355 d3 Dish Escargots 24 5 95 DL d1 d2 d3 As we discuss each of the lines of code below copy the line into IDLE and run it First we print the variable and constant parts as usual print d1 name d1 price d1 calories cal This gives us our results but without fancy formatting The print function automatically prints one space to separate each of its arguments that gives us the extra spaces we see when we run the code above Next we try to eliminate the extra spaces using concatenation This will give us an error when we try to concatenate a number into a string Once you run this code and see the message comment out this line or remove it so the subsequent examples run print d1 name d1 price d1 calories cal With concatenation and calls to str we can control the horizontal spacing precisely print d1 name str d1 price str d1 calories cal The print function automatically prints one space to separate each of its arguments we can change that using the sep keyword parameter First we separate the items with the empty string instead of a space print d1 name d1 price d1 calories cal sep This gets the horizontal spacing right As another illustration we can separate the items with any other separator string we care to specify print d1 name d1 price d1 calories cal sep By default i e without our having to give specific instructions print prints a newline at the end of each invocation at the end of each call to print That s what gives us the blank lines each time we call print with no arguments In the code below we see that each call to print prints its arguments followed by a newline print Huey Dewey Louie print Donald print Scrooge print print Daisy print n print Daffy Notice especially the two blank lines between Daisy and Daffy One is for the explicit n and the second is what print automatically provides We can specify different behavior at the end of each call to print by using the end keyword parameter It says what to print instead of the usual newline after the call to print has printed it arguments Saying end for example says Keep whatever is printed next on the same line as what we just printed print print Huey Dewey Louie end print Donald end print Scrooge print As with sep the value of the end parameter can be any string print Donald end Zot Zot Zot print This follows the end string in the previous line We can do a lot with the techniques we already know but the most powerful tool for formatting text is the format method We will use it in these two situations although there are many more that we won t cover Specify a particular number of digits to the right of a decimal point in the example below two digits for dollars and cents amounts Paht Woon Sen 12 5 34 cal Place values into fixed sized fields to line the values up Paht Woon Sen 12 5 34 Mee Krob 9 355 Escargots 24 5 95 Here is the syntax of the format method on strings FORMAT STRING format SERIES OF EXPRESSIONS TO PRINT We wrote above about the constant parts and the variable parts of what we want to print With the format method the constant parts go in the format string the variable parts are the arguments to the method i e they go in the series of expressions Here are the semantics The format method returns a string which we usually print out but we could use the string returned by format in any other context where a string makes sense e g by assigning it to a variable The string is formatted according to the instructions in the format string following this pattern print FORMAT STRING format d1 name d1 price d1 calories The format string looks like the desired output It contains constant parts and variable parts in the format string each variable part is a placeholder or format specification shown below as a dashed line for the eventual data value that will appear in that place cal FMT SPEC FMT SPEC FMT SPEC Each placeholder dashed line is a place where we put a format specification which can tell Python which of the variable parts to print and how to print it Actual format specifications in Python don t use dashed lines Instead they use curly braces We can combine what we ve learned so far into this working Python code which of course you should run print cal format d1 name d1 price d1 calories This code says to print the value of d1 name where the first set of braces appears at the start of the format string then to print space parenthesis dollar sign then to print the value of d1 price where the second set of braces appears then to print a few more characters then the value of d1 calories where the third set of braces appears and then the last few characters in the format string There are three arguments to format they correspond with the three format specifications in the format string To control the formatting further we can say things inside the curly braces The syntax for each format specification has this form ARGUMENT SELECTOR FORMAT CODE To the left of the colon is a value that indicates which of the arguments to format to print in that space Usually we just take them in order but Python allows us to specify them in a different order print 2 1 cal format d1 calories d1 price d1 name It s not that common to want to reorder the appearance of the arguments in the format string normally we ll leave the left side of the colon empty But if we didn t at least mention what could go there format strings would seem even stranger than they do already The code below shows nothing on either side of the colon in the format specifications It behaves just the same as if we d used without the colons print cal format d1 name d1 price d1 calories If we rarely put anything to the left of the colon in a format specification what can we put to the right of the colon That s where we put the field width specifications the instructions to Python for how many characters in the formatted string to devote to each data item The syntax of a field width specification what can go to the right of the colon in a format specification depends on the type of data being formatted Here are the three main types for strings ints and floats respectively FIELD WIDTHs FIELD WIDTHd FIELD WIDTH NUMBER OF DECIMAL PLACESf For example a format specification of 5 2f says Reserve a 5 character field in the result string In that field place a float number with two digits to the right of the decimal point Try running this example print 5 2f cal format d1 name d1 price d1 calories Notice that the 5 character field counts one character for the decimal point itself Note also that there s one colon that s not part of a format specification it s just printed as a character in the result What happens if we use a larger field width than our data requires print 7 2f cal format d1 name d1 price d1 calories We use 5 of the 7 characters for the number with the two extra spaces after the dollar sign and before the first digit of the number What if we specify a narrower field than we need print 3 2f cal format d1 name d1 price d1 calories Python has three choices in this situation It could give us an error message it could chop off the value somehow to make it fit in the specified width field or it could take as many digits as it needs even if that exceeds the specified field width Python takes the latter choice with the reasoning that it s better to see the actual value with messed up formatting than to see only part of the value or not to see it at all So in Python if the field width is too small Python still takes the number of characters it needs In fact if we always want to take up exactly the space we need for the value with no extra spaces we use a field width of zero print 2f cal format d1 name d1 price d1 calories print 2f cal format d1 name 3 5 d1 calories print 2f cal format d1 name 23424234 d1 calories Another use of field width specifications is to line things up in columns like this Paht Woon Sen 12 5 34 Mee Krob 9 355 Escargots 24 5 95 To do this we choose a field width that s large enough to accommodate the largest value we expect in a given column print 2 s 6 2f 4d format d1 name d1 price d1 calories This says to place the dish name in a 2 character field the price in a six character field with two digits to the right of the decimal point and the number of calories in a 4 character field By default strings are aligned with the left edge of their field and numbers are aligned with their rightmost digit this reflects the typical practice in typesetting data in tables We can put this in a loop through our list of dishes for d in DL print 2 s 6 2f 4d format d name d price d calories Finally we can write a function that prints our dish information in tabular format with titles def print dishlist info DL Dish None Just prints Print a table with a row for each dish print Name Price Calories print for d in DL print 2 s 6 2f 4d format d name d price d calories return print print dishlist info DL There are many more features to the format method than we have covered here String formatting is almost a sub language of its own within Python You are welcome to explore at python org or in other reference materials But for the problems or exams in this class you will not need anything beyond what s on this page David G Kay kay uci edu Copyright 2 14 by David G Kay Permission granted for individual nonprofit use in the study of Python programming All other rights reserved ", "_id": "http://www.ics.uci.edu/~kay/courses/31/string-formatting.html", "title": "string formatting", "html": "\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, January 5, 2006 2:39 PM\">\n<TITLE>String Formatting</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D250620B\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"java programming, data structures\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Web references for computer science topics, especially Java programming and data structures.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2006 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\nICS 31 &bull; David G. Kay &bull; UC Irvine</FONT></P>\n<P><B><font size=6>String Formatting</font></B></P>\n<P>&nbsp;</P>\nAre you tired of printing dollars-and-cents \namounts in Python that look like <code>$ 12.0</code> ?\nDo you want to have precise control over what \nthe text results of your programs look like?\nYou're ready to learn <strong>string formatting.</strong>\n<p>\nPython, like most programming languages, provides\na rich set of features for specifying the format of\ntext.  They make it possible to format things into\nnicely aligned tables, or smoothly flowing sentences,\nor even rudimentary text-based graphics.\nFormatting specifications aren't conceptually difficult;\nthey're not like mutable vs. immutable or navigating\nthrough lists of namedtuples containing other lists.\nBut they are intricate: They control the character-by-character\narrangement on the page or screen.  \nSince even one extra space can mess up your results,\nstring formatting requires us to pay close, meticulous attention.\n</p>\n<p>\nSuppose we define the Dish namedtuple and some\nDish objects as follows:\n<pre><code>from collections import namedtuple\nDish = namedtuple('Dish', 'name price calories')\nd1 = Dish(\"Paht Woon Sen\", 12.50, 340)\nd2 = Dish(\"Mee Krob\", 9.00, 355)\nd3 = Dish(\"Escargots\", 24.50, 95)\nDL = [d1, d2, d3]</code></pre>\n<p>\nNow suppose we want to display a Dish in this form:\n<pre><code>Paht Woon Sen ($12.50): 340 cal.</code></pre>\nThis text, and any text we plan to print,\nconsists of constant parts (that are the same\nevery time we print the results) and\nvariable parts (that may change every time,\ndepending on the data).\n</p>\n<p>\nHere are the variable parts of this string:\n<pre><code> Paht Woon Sen ($12.50): 340 cal.\n -------------   -----   ---\n <u><em>VARIABLE</em></u>        <u><em>VAR</em></u>     <u><em>VAR</em></u></code></pre>\nThe variable parts are the data values:\n<code>'Paht Woon Sen'</code>, <code>12.50</code>, \nand <code>340</code>.\n</p>\n<p>\nHere are the constant parts of the same string:\n<pre><code> Paht Woon Sen ($12.50): 340 cal.\n              ---     ---   -----\n            <u><em>CONST.</em></u>    <u><em>CON.</em></u>  <u><em>CONSTANT</em></u><em></em></code></pre>\nThe constant parts are the three strings\n<code>' ($'</code> (space-parenthesis-dollar sign),\n<code>'): '</code> (parenthesis-colon-space), and\n<code>' cal.'</code> (space-c-a-l-period).\n</p><p>\nNext we list the <em>names</em> of the variable/data parts.\nThese might be Python variable names, or more complicated Python expressions.  In this case, the names are\n<code>d1.name</code>, <code>d1.price</code>, \nand <code>d1.calories</code>.\n</p><p>\nNext we decide whether we need any precise formatting (a specific number of digits or other precise spacing).  \nWe will want these eventually, but for now, let's say no so we can cover some other issues first.\n</p>\n<p>\nCopy the code below,\npaste it into a Python file, and run it in IDLE:\n<pre><code>from collections import namedtuple\nDish = namedtuple('Dish', 'name price calories')\nd1 = Dish(\"Paht Woon Sen\", 12.50, 340)\nd2 = Dish(\"Mee Krob\", 9.00, 355)\nd3 = Dish(\"Escargots\", 24.50, 95)\nDL = [d1, d2, d3]</code></p></pre>\n<p>\nAs we discuss each of the lines of code below,\ncopy the line into IDLE and run it.\n</p>\n<p>\nFirst we print the variable and constant parts as usual:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\")</code></pre>\nThis gives us our results, but without fancy formatting.\nThe <code>print()</code> function automatically prints one space\nto separate each of its arguments; that gives us the\nextra spaces we see when we run the code above.\n</p>\n<p>\nNext we try to eliminate the extra spaces using concatenation (+).\n[This will give us an error when we try to concatenate a\nnumber into a string.  Once you run this code and see the message, comment\nout this line or remove it so the subsequent examples run.]\n<pre><code>print(d1.name + \" ($\" + d1.price + \"): \" + d1.calories + \" cal.\")</code>\n</p></pre><p>\nWith concatenation and calls to <code>str()</code>, we can control\nthe horizontal spacing precisely:\n<pre><code>print(d1.name + \" ($\" + str(d1.price) + \"): \" + str(d1.calories) + \" cal.\")</code></pre>\n<p>\nThe <code>print()</code> function automatically prints one space\nto separate each of its arguments; we can change that\nusing the <code>sep=</code> keyword parameter.  First we separate\nthe items with the empty string instead of a space:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\", sep=\"\")</code></pre>\nThis gets the horizontal spacing right.\n</p>\n<p>\nAs another illustration, we can separate the items with\nany other separator string we care to specify:\n<pre><code>print(d1.name, \" ($\", d1.price, \"): \", d1.calories, \" cal.\", sep=\"---\")</code></pre>\n<p>\nBy default (i.e., without our having to give specific instructions), <code>print()</code> prints a newline at the end of each invocation (at the end of each call to <code>print()</code>).  That's what\ngives us the blank lines each time we call <code>print()</code> with no arguments.\nIn the code below, we see that each call to <code>print()</code> prints its arguments followed by a newline:\n<pre><code>print('Huey', 'Dewey', 'Louie')\nprint('Donald')\nprint('Scrooge')\nprint()\nprint('Daisy')\nprint(\"\\n\")\nprint('Daffy')</code></pre><p>\nNotice especially the two blank lines between Daisy and Daffy:  \nOne is for the explicit <code>\"\\n\"</code> and the second is what <code>print()</code> automatically provides.\n</p>\n<p>\nWe can specify different behavior at the end of each\ncall to <code>print()</code> by using the <code>end=</code> \nkeyword parameter.\nIt says what to print (instead of the usual newline) after the call to <code>print()</code> has printed it arguments.\nSaying <code>end=\" \"</code>, for example, says, \"Keep whatever\nis printed next on the same line as what we just printed.\"\n<pre><code>print(\"--------------------------\")\nprint('Huey', 'Dewey', 'Louie', end=\" \")\nprint('Donald', end=\" \")\nprint('Scrooge')\nprint()</code></p></pre>\n<p>\nAs with <code>sep=</code>, the value of the <code>end=</code> \nparameter can be any string:\n<pre><code>print('Donald', end=\"Zot! Zot! Zot!\")\nprint('---> This follows the end= string in the previous line <---')\nprint(\"\\n\")\nprint('Huey', 'Dewey', 'Louie', sep=\" ** \", end=\"End of the line.\\n\")\nprint(\"Hey, Uncle Donald!\")</code></pre><p>\nWe can do a lot with the techniques we already know,\nbut the most powerful tool for formatting text is the\n<code>format()</code> method. \nWe will use it in these two situations (although there\nare many more that we won't cover):\n<ul>\n<li>Specify a particular number of digits to the right of a decimal point (in the example below, two digits, for dollars-and-cents amounts):\n  <pre><code>     Paht Woon Sen ($12.50): 340 cal.</code></pre>\n</li>\n<li>Place values into fixed-sized \"fields\" to line the values up:\n  <pre><code>     Paht Woon Sen  12.50 340\n     Mee Krob        9.00 355\n     Escargots      24.50  95</code>\n</pre>\n</li>\n</ul><p>\nHere is the syntax of the <code>format()</code> method on strings:\n</p>\n<p>\n&nbsp;&nbsp;&nbsp;&nbsp;<u><var><font size=2>FORMAT-STRING</font></var></u><code><strong>.</strong>format(</code><u><var><font size=2>SERIES-OF-EXPRESSIONS-TO-PRINT</font></var></u><code>)</code>\n</p>\n<p>\nWe wrote above about the constant parts and the variable parts of what we\nwant to print.  With the <code>format()</code> method, the constant parts go in the format string; the variable parts are the arguments to the method (i.e., they go in the series of expressions).\n</p>\n<p>\nHere are the semantics:  The <code>format()</code> method returns a string,\nwhich we usually print out (but we could use the string returned by <code>format()</code>\nin any other context where a string makes sense, e.g., by assigning it to a variable).\nThe string is formatted according to the instructions\nin the format-string, following this pattern:</p><p>\n<code>print( </code><u><var><font size=2>FORMAT-STRING</font></var></u><code> <strong>.</strong> format(d1.name, d1.price, d1.calories)</code></p>\n<p>\nThe format string looks like the desired output.\nIt contains constant parts and variable parts; \nin the format string each variable part is a placeholder\nor \"format specification\" (shown below as a dashed line) for the eventual data value\nthat will appear in that place.\n<pre><code>\"-------- ($--------): -------- cal.\"\n <em><u>FMT-SPEC</u></em>   <u><em>FMT-SPEC</em></u>   <u><em>FMT-SPEC</em></u></code></pre><p>\nEach placeholder (dashed line) is a place where we put a\n<strong>format specification</strong>, which can tell Python which of\nthe variable parts to print and how to print it.\nActual format specifications in Python don't use dashed lines.\nInstead they use curly braces:  <code>{ }</code>\n</p>\n<p>\nWe can combine what we've learned so far into this working\nPython code, which of course you should run:\n<pre><code>print(\"{} (${}): {} cal.\".format(d1.name, d1.price, d1.calories)</code></pre>\n<p>\nThis code says to print the value of <code>d1.name</code> where\nthe first set of braces appears (at the start of the format string),\nthen to print space-parenthesis-dollar-sign, then to print the value\nof <code>d1.price</code> where the second set of braces appears,\nthen to print a few more characters, then the value of <code>d1.calories</code>\nwhere the third set of braces appears, and then the last few characters in\nthe format string. \nThere are three arguments to <code>format()</code>; they correspond with\nthe three format specifications (<code>{ }</code>) in the format string.\n</p>\n<p>\nTo control the formatting further, we can say things inside the curly braces.  \nThe syntax for each format specification has this form:\n<p><code>{ </code><u><var><font size=2>ARGUMENT-SELECTOR</font></var></u><code> <strong>:</strong> </code><u><var><font size=2>FORMAT-CODE</font></var></u><code> }</code></p><p>\nTo the left of the colon is a value that indicates\nwhich of the arguments to <code>format()</code> to print in that space.\nUsually we just take them in order, but Python allows us to specify them\nin a different order:\n<pre><code>print(\"{2:} (${1:}): {0:} cal.\".format(d1.calories, d1.price, d1.name)</code></pre>\n<p>\nIt's not that common to want to reorder the appearance of the arguments\nin the format string;\nnormally we'll leave the left side of the colon empty.\n(But if we didn't at least mention what could go there,\nformat strings would seem even stranger than they do already.)\nThe code below shows nothing on either side of the colon\nin the format specifications.  It behaves just the same\nas if we'd used <code>{ }</code> without the colons.\n<pre><code>print(\"{:} (${:}): {:} cal.\".format(d1.name, d1.price, d1.calories))</code></pre>\n<p>\nIf we rarely put anything to the left of the colon in a format specification,\nwhat can we put to the right of the colon?\nThat's where we put the <strong>field width specifications</strong>, the instructions to Python\nfor how many characters in the formatted string to devote to each data item.\nThe syntax of a field width specification (what can go to the right of the colon\nin a format specification) depends on the type of data being formatted.\nHere are the three main types, for strings, ints, and floats respectively:\n</p><p><var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>s</strong></code>\n<br /><var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>d</strong></code>\n<br />\n<var><u><font size=2>FIELD-WIDTH</font></u></var><code><strong>.</strong></code><var><u><font size=2>NUMBER-OF-DECIMAL-PLACES</font></u></var><code><strong>f</strong></code></p>\n<p>\nFor example, a format specification of <code>{:5.2f]</code> says:\n<ul>\n<li>Reserve a 5-character field in the result string.\n</li>\n<li>In that field, place a float number with two digits to the right of the decimal point.\n</li>\n</ul>\n<p>\nTry running this example:\n<pre><code>print(\"{:} (${:5.2f}): {:} cal.\".format(d1.name, d1.price, d1.calories))</code></pre><p>Notice that the 5-character field counts one character for the decimal point itself.  \nNote also that there's one colon that's not part of a format specification; it's just printed as a character in the result.\n</p>\n<p>\nWhat happens if we use a larger field width than our data requires?\n<pre><code>print(\"{:} (${:7.2f}): {:} cal.\".format(d1.name, d1.price, d1.calories))</code>\n</pre>\n<p>\n  We use 5 of the 7 characters for the number, with the two extra spaces after the dollar sign and before the first digit of the number.  \n</p>\n<p>\nWhat if we specify a narrower field than we need?\n<pre><code>print(\"{:} (${:3.2f}): {:} cal.\".format(d1.name, d1.price, d1.calories))</code></pre><p>Python has three choices in this situation:  It could give us an error message;\nit could chop off the value somehow to make it fit in the specified-width field;\nor it could take as many digits as it needs, even if that exceeds the specified\nfield width.  Python takes the latter choice, with the reasoning that it's better\nto see the actual value with messed-up formatting than to see only part of the\nvalue or not to see it at all.\n</p><p>\nSo in Python, if the field width is too small, Python still takes the number of \ncharacters it needs.\n</p>\n<p>\nIn fact, if we always want to take up exactly the space we need for the value,\nwith no extra spaces, we use a field width of zero:\n<pre><code>print(\"{:} (${:0.2f}): {:} cal.\".format(d1.name, d1.price, d1.calories))\nprint(\"{:} (${:0.2f}): {:} cal.\".format(d1.name, 3.50, d1.calories))\nprint(\"{:} (${:0.2f}): {:} cal.\".format(d1.name, 23424234, d1.calories))</code></p></pre>\n<p>\nAnother use of field width specifications is to line things up in columns like this:\n<pre><code>     Paht Woon Sen  12.50 340\n     Mee Krob        9.00 355\n     Escargots      24.50  95</code></pre>\n<p>To do this, we choose a field width that's large\nenough to accommodate the largest value we expect in a given column:\n<pre><code>print(\"{:20s}{:6.2f}{:4d}\".format(d1.name, d1.price, d1.calories))</code></pre><p>This says to place the dish name in a 20-character field,\nthe price in a six-character field (with two digits to the right of the\ndecimal point), and the number of calories in a 4-character field.\n(By default, strings are aligned with the left edge of their field\nand numbers are aligned with their rightmost digit; this reflects the\ntypical practice in typesetting data in tables.)\n\u0005</p>\n<p>\nWe can put this in a loop through our list of dishes:\n<pre><code>for d in DL:\n    print(\"{:20s}{:6.2f}{:4d}\".format(d.name, d.price, d.calories))</code></pre>\n<p>\nFinally, we can write a function that \nprints our dish information in tabular format with titles:\n<pre><code>def print_dishlist_info(DL: [Dish]) -> None:  # Just prints\n    \"\"\" Print a table with a row for each dish \"\"\"\n    print(\"Name                 Price Calories\")\n    print(\"----                 ----- --------\")\n    for d in DL:\n        print(\"{:20s}{:6.2f}{:4d}\".format(d.name, d.price, d.calories))\n    return\nprint()\nprint_dishlist_info(DL)</code></pre><p>\nThere are many more features to the <code>format()</code> method than we have covered here.  String formatting is almost a sub-language of its own within Python.\nYou are welcome to explore at python.org or in other reference materials.\nBut for the problems or exams in this class, you will not need anything beyond \nwhat's on this page.\n</p>\n<HR>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu> kay@uci.edu</A>\n</address>\n<p>Copyright 2014 by David G. Kay.  Permission granted for individual nonprofit use in the study \nof Python programming.  All other rights reserved.</p>\n</BODY>\n</HTML>\n", "id": 1848.0}