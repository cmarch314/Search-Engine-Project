{"text": "View Javadoc 1 2 Created on Dec 2 2 4 3 4 5 6 package swirl workspace viz pie 7 8 import java awt Point 9 1 import org apache commons logging Log 11 import org apache commons logging LogFactory 12 13 import swirl workspace viz SharingLevel 14 15 16 17 author Kari 18 Manages coordinates in both cartesian and polar formats 19 2 21 public class Coordinate 22 23 private double radius 24 private double relativeAngle 25 private int numberOfUsers 26 private int userNumber range 1 numberOfUsers 27 TODO 28 private Log log LogFactory getLog this getClass 29 private Point absolutePoint null for moving 3 31 32 public Coordinate Point point int numberOfUsers int userNumber 33 34 if log isDebugEnabled 35 36 log debug Coordinate Point point int numberOfUsers int userNumber 37 log debug Coordinate constructor point x point getX y point getY 38 log debug number of Users numberOfUsers 39 log debug User Number userNumber 4 41 42 this radius calculateRadius point 43 double theta calculateTheta point 44 if log isDebugEnabled 45 46 log debug Coordinate constructor radius is radius 47 log debug Coordinate constructor theta is theta 48 49 this relativeAngle calculateRelativeAngle theta numberOfUsers userNumber 5 if log isDebugEnabled 51 52 log debug Coordinate constructor relative angle is relativeAngle 53 54 55 this numberOfUsers numberOfUsers 56 this userNumber userNumber 57 58 59 public Coordinate double radius double relativeAngle int numberOfUsers int userNumber 6 61 if log isDebugEnabled 62 63 log debug Coordinate double radius double relativeAngle int numberOfUsers int userNumber 64 log debug number of Users numberOfUsers 65 log debug User Number userNumber 66 67 this radius radius 68 this relativeAngle relativeAngle 69 this numberOfUsers numberOfUsers 7 this userNumber userNumber 71 int level Util getSharingDegree radius 72 73 74 75 public void updateCoordinate Point point 76 77 radius calculateRadius point 78 double theta calculateTheta point 79 8 if log isDebugEnabled 81 82 log debug updateCoordinate radius is radius 83 log debug updateCoordinate theta is theta 84 85 relativeAngle this calculateRelativeAngle theta this numberOfUsers this userNumber 86 if log isDebugEnabled 87 88 log debug updateCoordinate relativeAngle is relativeAngle 89 9 91 92 public void updateCoordinate double radius double relativeAngle 93 94 if log isDebugEnabled 95 96 log debug updateCoordinate double radius double relativeAngle 97 98 this radius radius 99 if log isDebugEnabled 1 1 1 log debug updateCoordinate DD radius is radius 1 2 1 3 this relativeAngle relativeAngle 1 4 if log isDebugEnabled 1 5 1 6 log debug updateCoordinate DD relativeAnge is relativeAngle 1 7 1 8 1 9 11 public void updateNumberOfUsers int numberOfUsers int userNumber 111 112 this numberOfUsers numberOfUsers 113 this userNumber userNumber 114 115 116 take relative point 117 public static double calculateTheta Point point 118 double x point getX 119 double y point getY since in svg Y is from up to down we need to change the direction 12 double theta Math toDegrees Math atan2 y x 121 if theta 122 theta theta 359 8 123 124 return theta 125 126 127 private double calculatePeerArc int numberOfPeers 128 return 36 numberOfPeers 129 13 131 private double calculateTheta double relativeAngle int numberOfUsers int userNumber 132 double peerArc calculatePeerArc numberOfUsers 133 return peerArc userNumber 1 peerArc relativeAngle 134 135 136 137 private double calculateRelativeAngle double theta int numberOfUsers int userIndex 138 139 int n numberOfUsers 14 int idx userIndex 141 142 if it in the persistent space 143 we take the relative angle as only one user exists 144 int level Util getSharingDegree radius 145 if level SharingLevel SHARING LEVEL 146 n 1 147 idx 1 148 149 15 int peerArc int calculatePeerArc n 151 double modAngle theta peerArc 152 if modAngle 153 it s or 1 depending on the user index 154 if peerArc idx 1 theta 155 return 156 else 157 return 1 158 159 16 double relativeAngle modAngle peerArc 161 round to two places 162 double tmp1 relativeAngle 1 163 double tmp2 Math round tmp1 164 double relativeRounded tmp2 1 165 return relativeRounded 166 167 168 take relative point 169 public static double calculateRadius Point point 17 171 double x point getX 172 double y point getY 173 return Math sqrt x x y y 174 175 176 private Point calculatePoint double radius double theta 177 if log isDebugEnabled 178 179 log debug calculatePoint double radius double theta 18 181 double x Math cos Math toRadians theta radius 182 since in svg Y is from up to down we need to change the direction 183 double y Math sin Math toRadians theta radius 184 Point point new Point 185 point setLocation x y 186 if log isDebugEnabled 187 188 log debug point x point getX y point getY 189 19 return point 191 192 193 public double getRelativeAngle 194 195 return relativeAngle 196 197 198 public double getRadius 199 2 return radius 2 1 2 2 2 3 public Point getPoint 2 4 2 5 int n numberOfUsers 2 6 int idx userNumber 2 7 2 8 if it in the persistent space 2 9 we take the relative angle as only one user exists 21 int level Util getSharingDegree radius 211 if level SharingLevel SHARING LEVEL 212 n 1 213 idx 1 214 215 double theta calculateTheta this relativeAngle n idx 216 Point point calculatePoint this radius theta 217 return point 218 219 22 public double getTheta 221 222 return calculateTheta this relativeAngle this numberOfUsers this userNumber 223 224 225 226 return 227 228 public Point getAbsolutePoint 229 if absolutePoint null 23 absolutePoint getPoint 231 232 return absolutePoint 233 234 235 236 param locPoint 237 238 public void setAbsolutePoint Point locPoint 239 absolutePoint locPoint 24 241 242 243 244 245 246 public void updateAbsolutePoint 247 setAbsolutePoint getPoint 248 249 25 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/viz/pie/Coordinate.html", "title": "coordinate xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>Coordinate xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../apidocs/swirl/workspace/viz/pie/Coordinate.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Dec 2, 2004</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> *</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> */</em>\n<a name=\"5\" href=\"#5\">5</a>   \n<a name=\"6\" href=\"#6\">6</a>   <strong>package</strong> <a href=\"../../../../swirl/workspace/viz/pie/package-summary.html\">swirl.workspace.viz.pie</a>;\n<a name=\"7\" href=\"#7\">7</a>   \n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.awt.Point;\n<a name=\"9\" href=\"#9\">9</a>   \n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"12\" href=\"#12\">12</a>  \n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> swirl.workspace.viz.SharingLevel;\n<a name=\"14\" href=\"#14\">14</a>  \n<a name=\"15\" href=\"#15\">15</a>  \n<a name=\"16\" href=\"#16\">16</a>  <em>/**<em>*</em></em>\n<a name=\"17\" href=\"#17\">17</a>  <em> * @author Kari</em>\n<a name=\"18\" href=\"#18\">18</a>  <em> * Manages coordinates in both cartesian and polar formats</em>\n<a name=\"19\" href=\"#19\">19</a>  <em> *</em>\n<a name=\"20\" href=\"#20\">20</a>  <em> */</em>\n<a name=\"21\" href=\"#21\">21</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> {\n<a name=\"22\" href=\"#22\">22</a>  \t\n<a name=\"23\" href=\"#23\">23</a>  \t<strong>private</strong> <strong>double</strong> radius;\n<a name=\"24\" href=\"#24\">24</a>  \t<strong>private</strong> <strong>double</strong> relativeAngle; \n<a name=\"25\" href=\"#25\">25</a>  \t<strong>private</strong> <strong>int</strong> numberOfUsers;\n<a name=\"26\" href=\"#26\">26</a>  \t<strong>private</strong> <strong>int</strong> userNumber;  <em class=\"comment\">// range 1..numberOfUsers;</em>\n<a name=\"27\" href=\"#27\">27</a>  \t<em>/**<em>* TODO */</em></em>\n<a name=\"28\" href=\"#28\">28</a>  \t<strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"29\" href=\"#29\">29</a>  \t<strong>private</strong> Point absolutePoint = <strong>null</strong>;<em class=\"comment\">//for moving</em>\n<a name=\"30\" href=\"#30\">30</a>  \t\n<a name=\"31\" href=\"#31\">31</a>  \t\n<a name=\"32\" href=\"#32\">32</a>  \t<strong>public</strong> <a href=\"../../../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> (Po<strong>int</strong> po<strong>int</strong>, <strong>int</strong> numberOfUsers, <strong>int</strong> userNumber) \n<a name=\"33\" href=\"#33\">33</a>  \t{\n<a name=\"34\" href=\"#34\">34</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"35\" href=\"#35\">35</a>          {\n<a name=\"36\" href=\"#36\">36</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate (Point point, int numberOfUsers, int userNumber)\"</span>);\n<a name=\"37\" href=\"#37\">37</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate constructor point: x:\"</span> + point.getX()  + <span class=\"string\">\"; y:\"</span> + point.getY());\n<a name=\"38\" href=\"#38\">38</a>  \t\t\tlog.debug(<span class=\"string\">\"number of Users: \"</span> + numberOfUsers);\n<a name=\"39\" href=\"#39\">39</a>  \t\t\tlog.debug(<span class=\"string\">\"User Number: \"</span> + userNumber);\n<a name=\"40\" href=\"#40\">40</a>          }\n<a name=\"41\" href=\"#41\">41</a>  \t\t\n<a name=\"42\" href=\"#42\">42</a>  \t\t<strong>this</strong>.radius = calculateRadius(point);\n<a name=\"43\" href=\"#43\">43</a>  \t\t<strong>double</strong> theta = calculateTheta(point);\n<a name=\"44\" href=\"#44\">44</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"45\" href=\"#45\">45</a>          {\n<a name=\"46\" href=\"#46\">46</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate constructor: radius is \"</span> + radius);\n<a name=\"47\" href=\"#47\">47</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate constructor: theta is \"</span> + theta);\n<a name=\"48\" href=\"#48\">48</a>          }\n<a name=\"49\" href=\"#49\">49</a>  \t\t<strong>this</strong>.relativeAngle = calculateRelativeAngle(theta, numberOfUsers, userNumber);\n<a name=\"50\" href=\"#50\">50</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"51\" href=\"#51\">51</a>          {\n<a name=\"52\" href=\"#52\">52</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate constructor: relative angle is \"</span> + relativeAngle);\n<a name=\"53\" href=\"#53\">53</a>          }\n<a name=\"54\" href=\"#54\">54</a>  \t\n<a name=\"55\" href=\"#55\">55</a>  \t\t<strong>this</strong>.numberOfUsers = numberOfUsers;\n<a name=\"56\" href=\"#56\">56</a>  \t\t<strong>this</strong>.userNumber = userNumber;\n<a name=\"57\" href=\"#57\">57</a>  \t}\n<a name=\"58\" href=\"#58\">58</a>  \t\n<a name=\"59\" href=\"#59\">59</a>  \t<strong>public</strong> <a href=\"../../../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> (<strong>double</strong> radius, <strong>double</strong> relativeAngle, <strong>int</strong> numberOfUsers, <strong>int</strong> userNumber) \n<a name=\"60\" href=\"#60\">60</a>  \t{\n<a name=\"61\" href=\"#61\">61</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"62\" href=\"#62\">62</a>          {\n<a name=\"63\" href=\"#63\">63</a>  \t\t\tlog.debug(<span class=\"string\">\"Coordinate (double radius, double relativeAngle, int numberOfUsers, int userNumber)\"</span>);\n<a name=\"64\" href=\"#64\">64</a>  \t\t\tlog.debug(<span class=\"string\">\"number of Users: \"</span> + numberOfUsers);\n<a name=\"65\" href=\"#65\">65</a>  \t\t\tlog.debug(<span class=\"string\">\"User Number: \"</span> + userNumber);\n<a name=\"66\" href=\"#66\">66</a>          }\n<a name=\"67\" href=\"#67\">67</a>  \t\t<strong>this</strong>.radius = radius;\n<a name=\"68\" href=\"#68\">68</a>  \t\t<strong>this</strong>.relativeAngle = relativeAngle;\n<a name=\"69\" href=\"#69\">69</a>  \t\t<strong>this</strong>.numberOfUsers = numberOfUsers;\n<a name=\"70\" href=\"#70\">70</a>  \t\t<strong>this</strong>.userNumber = userNumber;\n<a name=\"71\" href=\"#71\">71</a>  \t\t<strong>int</strong> level = Util.getSharingDegree(radius);\n<a name=\"72\" href=\"#72\">72</a>  \t}\n<a name=\"73\" href=\"#73\">73</a>  \t\n<a name=\"74\" href=\"#74\">74</a>  \n<a name=\"75\" href=\"#75\">75</a>  \t<strong>public</strong> <strong>void</strong> updateCoordinate (Point point) \n<a name=\"76\" href=\"#76\">76</a>  \t{\n<a name=\"77\" href=\"#77\">77</a>  \t\tradius = calculateRadius(point);\n<a name=\"78\" href=\"#78\">78</a>          <strong>double</strong> theta = calculateTheta(point);\n<a name=\"79\" href=\"#79\">79</a>          \n<a name=\"80\" href=\"#80\">80</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"81\" href=\"#81\">81</a>          {\n<a name=\"82\" href=\"#82\">82</a>          \tlog.debug(<span class=\"string\">\"updateCoordinate: radius is \"</span> + radius);\n<a name=\"83\" href=\"#83\">83</a>          \tlog.debug(<span class=\"string\">\"updateCoordinate: theta is \"</span> + theta);\n<a name=\"84\" href=\"#84\">84</a>          }\n<a name=\"85\" href=\"#85\">85</a>  \t\trelativeAngle = <strong>this</strong>.calculateRelativeAngle(theta, <strong>this</strong>.numberOfUsers, <strong>this</strong>.userNumber);\n<a name=\"86\" href=\"#86\">86</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"87\" href=\"#87\">87</a>          {\n<a name=\"88\" href=\"#88\">88</a>  \t\t\tlog.debug(<span class=\"string\">\"updateCoordinate: relativeAngle is \"</span> + relativeAngle);\n<a name=\"89\" href=\"#89\">89</a>          }\n<a name=\"90\" href=\"#90\">90</a>  \t}\n<a name=\"91\" href=\"#91\">91</a>  \t\n<a name=\"92\" href=\"#92\">92</a>  \t<strong>public</strong> <strong>void</strong> updateCoordinate (<strong>double</strong> radius, <strong>double</strong> relativeAngle) \n<a name=\"93\" href=\"#93\">93</a>  \t{\n<a name=\"94\" href=\"#94\">94</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"95\" href=\"#95\">95</a>          {\n<a name=\"96\" href=\"#96\">96</a>  \t\t\tlog.debug(<span class=\"string\">\"updateCoordinate (double radius, double relativeAngle)\"</span>);\n<a name=\"97\" href=\"#97\">97</a>          }\n<a name=\"98\" href=\"#98\">98</a>  \t\t<strong>this</strong>.radius = radius;\n<a name=\"99\" href=\"#99\">99</a>  \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"100\" href=\"#100\">100</a>         {\n<a name=\"101\" href=\"#101\">101</a> \t\t\tlog.debug(<span class=\"string\">\"updateCoordinate DD: radius is \"</span> + radius);\n<a name=\"102\" href=\"#102\">102</a>         }\n<a name=\"103\" href=\"#103\">103</a> \t\t<strong>this</strong>.relativeAngle = relativeAngle;\n<a name=\"104\" href=\"#104\">104</a> \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"105\" href=\"#105\">105</a>         {\n<a name=\"106\" href=\"#106\">106</a> \t\t\tlog.debug(<span class=\"string\">\"updateCoordinate DD: relativeAnge is \"</span> + relativeAngle);\n<a name=\"107\" href=\"#107\">107</a>         }\n<a name=\"108\" href=\"#108\">108</a> \t}\n<a name=\"109\" href=\"#109\">109</a> \t\n<a name=\"110\" href=\"#110\">110</a> \t<strong>public</strong> <strong>void</strong> updateNumberOfUsers (<strong>int</strong> numberOfUsers, <strong>int</strong> userNumber) \n<a name=\"111\" href=\"#111\">111</a> \t{\n<a name=\"112\" href=\"#112\">112</a> \t\t<strong>this</strong>.numberOfUsers = numberOfUsers;\n<a name=\"113\" href=\"#113\">113</a> \t\t<strong>this</strong>.userNumber = userNumber;\n<a name=\"114\" href=\"#114\">114</a> \t}\n<a name=\"115\" href=\"#115\">115</a> \n<a name=\"116\" href=\"#116\">116</a> \t<em class=\"comment\">//take relative point</em>\n<a name=\"117\" href=\"#117\">117</a> \t<strong>public</strong> <strong>static</strong> <strong>double</strong> calculateTheta(Point point){\n<a name=\"118\" href=\"#118\">118</a> \t\t<strong>double</strong> x = point.getX();\n<a name=\"119\" href=\"#119\">119</a> \t\t<strong>double</strong> y = -point.getY();<em class=\"comment\">//since in svg, Y is from up to down, we need to change the direction</em>\n<a name=\"120\" href=\"#120\">120</a> \t\t<strong>double</strong> theta = Math.toDegrees(Math.atan2(y, x));\n<a name=\"121\" href=\"#121\">121</a> \t\t<strong>if</strong> (theta &lt; 0) {\n<a name=\"122\" href=\"#122\">122</a> \t\t\ttheta = theta + 359.8;\n<a name=\"123\" href=\"#123\">123</a> \t\t}\n<a name=\"124\" href=\"#124\">124</a> \t\t<strong>return</strong> theta;\n<a name=\"125\" href=\"#125\">125</a> \t}\n<a name=\"126\" href=\"#126\">126</a> \t\n<a name=\"127\" href=\"#127\">127</a> \t<strong>private</strong> <strong>double</strong> calculatePeerArc (<strong>int</strong> numberOfPeers) {\n<a name=\"128\" href=\"#128\">128</a> \t\t<strong>return</strong> 360.0/numberOfPeers;\n<a name=\"129\" href=\"#129\">129</a> \t}\n<a name=\"130\" href=\"#130\">130</a> \t\n<a name=\"131\" href=\"#131\">131</a> \t<strong>private</strong> <strong>double</strong> calculateTheta(<strong>double</strong> relativeAngle, <strong>int</strong> numberOfUsers, <strong>int</strong> userNumber){\n<a name=\"132\" href=\"#132\">132</a> \t\t<strong>double</strong> peerArc = calculatePeerArc(numberOfUsers);\n<a name=\"133\" href=\"#133\">133</a> \t\t<strong>return</strong> (peerArc * (userNumber-1)) + (peerArc * relativeAngle);\n<a name=\"134\" href=\"#134\">134</a> \t\t\n<a name=\"135\" href=\"#135\">135</a> \t}\n<a name=\"136\" href=\"#136\">136</a> \t\n<a name=\"137\" href=\"#137\">137</a> \t<strong>private</strong> <strong>double</strong> calculateRelativeAngle(<strong>double</strong> theta, <strong>int</strong> numberOfUsers, <strong>int</strong> userIndex) \n<a name=\"138\" href=\"#138\">138</a> \t{\n<a name=\"139\" href=\"#139\">139</a> \t\t<strong>int</strong> n = numberOfUsers;\n<a name=\"140\" href=\"#140\">140</a> \t\t<strong>int</strong> idx = userIndex;\n<a name=\"141\" href=\"#141\">141</a> \t\t\n<a name=\"142\" href=\"#142\">142</a> \t\t<em class=\"comment\">//if it in the persistent space</em>\n<a name=\"143\" href=\"#143\">143</a> \t\t<em class=\"comment\">//we take the relative angle as only one user exists</em>\n<a name=\"144\" href=\"#144\">144</a> \t\t<strong>int</strong> level = Util.getSharingDegree(radius); \n<a name=\"145\" href=\"#145\">145</a> \t\t<strong>if</strong>(level == SharingLevel.SHARING_LEVEL){\n<a name=\"146\" href=\"#146\">146</a> \t\t\tn = 1;\n<a name=\"147\" href=\"#147\">147</a> \t\t\tidx = 1;\n<a name=\"148\" href=\"#148\">148</a> \t\t}\n<a name=\"149\" href=\"#149\">149</a> \t\t\n<a name=\"150\" href=\"#150\">150</a> \t\t<strong>int</strong> peerArc = (<strong>int</strong>)calculatePeerArc(n);\n<a name=\"151\" href=\"#151\">151</a> \t\t<strong>double</strong> modAngle = theta % peerArc;\n<a name=\"152\" href=\"#152\">152</a> \t\t<strong>if</strong> (modAngle == 0) {\n<a name=\"153\" href=\"#153\">153</a> \t\t\t<em class=\"comment\">// it's 0 or 100 depending on the user index</em>\n<a name=\"154\" href=\"#154\">154</a> \t\t\t<strong>if</strong> ((peerArc * (idx-1)) == theta) {\n<a name=\"155\" href=\"#155\">155</a> \t\t\t\t<strong>return</strong> 0.0;\n<a name=\"156\" href=\"#156\">156</a> \t\t\t} <strong>else</strong> {\n<a name=\"157\" href=\"#157\">157</a> \t\t\t\t<strong>return</strong> 1.0;\n<a name=\"158\" href=\"#158\">158</a> \t\t\t}\n<a name=\"159\" href=\"#159\">159</a> \t\t}\n<a name=\"160\" href=\"#160\">160</a> \t\t<strong>double</strong> relativeAngle = (modAngle)/peerArc;\n<a name=\"161\" href=\"#161\">161</a> \t\t<em class=\"comment\">// round to two places</em>\n<a name=\"162\" href=\"#162\">162</a> \t\t<strong>double</strong> tmp1 = relativeAngle * 100;\n<a name=\"163\" href=\"#163\">163</a> \t\t<strong>double</strong> tmp2 = Math.round(tmp1);\n<a name=\"164\" href=\"#164\">164</a> \t\t<strong>double</strong> relativeRounded = tmp2/100;\n<a name=\"165\" href=\"#165\">165</a> \t\t<strong>return</strong> relativeRounded;\n<a name=\"166\" href=\"#166\">166</a> \t}\n<a name=\"167\" href=\"#167\">167</a> \t\n<a name=\"168\" href=\"#168\">168</a> \t<em class=\"comment\">//take relative point</em>\n<a name=\"169\" href=\"#169\">169</a> \t<strong>public</strong> <strong>static</strong> <strong>double</strong> calculateRadius (Point point) \n<a name=\"170\" href=\"#170\">170</a> \t{\n<a name=\"171\" href=\"#171\">171</a> \t\t<strong>double</strong> x = point.getX();\n<a name=\"172\" href=\"#172\">172</a> \t\t<strong>double</strong> y = point.getY();\n<a name=\"173\" href=\"#173\">173</a> \t\t<strong>return</strong> Math.sqrt(x*x + y*y);\n<a name=\"174\" href=\"#174\">174</a> \t}\n<a name=\"175\" href=\"#175\">175</a> \t\n<a name=\"176\" href=\"#176\">176</a> \t<strong>private</strong> Point calculatePoint (<strong>double</strong> radius, <strong>double</strong> theta) {\n<a name=\"177\" href=\"#177\">177</a> \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"178\" href=\"#178\">178</a>         {\n<a name=\"179\" href=\"#179\">179</a> \t\t\tlog.debug(<span class=\"string\">\"calculatePoint (double radius, double theta)\"</span>);\n<a name=\"180\" href=\"#180\">180</a>         }\n<a name=\"181\" href=\"#181\">181</a> \t\t<strong>double</strong> x = Math.cos( Math.toRadians(theta) ) * radius; \n<a name=\"182\" href=\"#182\">182</a> \t\t<em class=\"comment\">//since in svg, Y is from up to down, we need to change the direction</em>\n<a name=\"183\" href=\"#183\">183</a> \t\t<strong>double</strong> y = -Math.sin( Math.toRadians(theta) ) * radius; \n<a name=\"184\" href=\"#184\">184</a> \t\tPoint point = <strong>new</strong> Point();\n<a name=\"185\" href=\"#185\">185</a> \t\tpoint.setLocation(x,y);\n<a name=\"186\" href=\"#186\">186</a> \t\t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"187\" href=\"#187\">187</a>         {\n<a name=\"188\" href=\"#188\">188</a> \t\t\tlog.debug(<span class=\"string\">\"point: x:\"</span> + point.getX()  + <span class=\"string\">\"; y:\"</span> + point.getY());\n<a name=\"189\" href=\"#189\">189</a>         }\n<a name=\"190\" href=\"#190\">190</a> \t\t<strong>return</strong> point;\n<a name=\"191\" href=\"#191\">191</a> \t}\n<a name=\"192\" href=\"#192\">192</a> \t\n<a name=\"193\" href=\"#193\">193</a> \t<strong>public</strong> <strong>double</strong> getRelativeAngle () \n<a name=\"194\" href=\"#194\">194</a> \t{\n<a name=\"195\" href=\"#195\">195</a> \t\t<strong>return</strong> relativeAngle;\n<a name=\"196\" href=\"#196\">196</a> \t}\n<a name=\"197\" href=\"#197\">197</a> \t\n<a name=\"198\" href=\"#198\">198</a> \t<strong>public</strong> <strong>double</strong> getRadius () \n<a name=\"199\" href=\"#199\">199</a> \t{\n<a name=\"200\" href=\"#200\">200</a> \t\t<strong>return</strong> radius;\n<a name=\"201\" href=\"#201\">201</a> \t}\n<a name=\"202\" href=\"#202\">202</a> \t\n<a name=\"203\" href=\"#203\">203</a> \t<strong>public</strong> Point getPoint () \n<a name=\"204\" href=\"#204\">204</a> \t{\n<a name=\"205\" href=\"#205\">205</a> \t\t<strong>int</strong> n = numberOfUsers;\n<a name=\"206\" href=\"#206\">206</a> \t\t<strong>int</strong> idx = userNumber;\n<a name=\"207\" href=\"#207\">207</a> \t\t\n<a name=\"208\" href=\"#208\">208</a> \t\t<em class=\"comment\">//if it in the persistent space</em>\n<a name=\"209\" href=\"#209\">209</a> \t\t<em class=\"comment\">//we take the relative angle as only one user exists</em>\n<a name=\"210\" href=\"#210\">210</a> \t\t<strong>int</strong> level = Util.getSharingDegree(radius); \n<a name=\"211\" href=\"#211\">211</a> \t\t<strong>if</strong>(level == SharingLevel.SHARING_LEVEL){\n<a name=\"212\" href=\"#212\">212</a> \t\t\tn = 1;\n<a name=\"213\" href=\"#213\">213</a> \t\t\tidx = 1;\n<a name=\"214\" href=\"#214\">214</a> \t\t}\n<a name=\"215\" href=\"#215\">215</a> \t\t<strong>double</strong> theta = calculateTheta (<strong>this</strong>.relativeAngle, n, idx);\n<a name=\"216\" href=\"#216\">216</a> \t\tPoint point = calculatePoint (<strong>this</strong>.radius, theta);\n<a name=\"217\" href=\"#217\">217</a> \t\t<strong>return</strong> point;\n<a name=\"218\" href=\"#218\">218</a> \t}\n<a name=\"219\" href=\"#219\">219</a> \t\n<a name=\"220\" href=\"#220\">220</a> \t<strong>public</strong> <strong>double</strong> getTheta()\n<a name=\"221\" href=\"#221\">221</a> \t{\n<a name=\"222\" href=\"#222\">222</a> \t\t<strong>return</strong> calculateTheta (<strong>this</strong>.relativeAngle, <strong>this</strong>.numberOfUsers, <strong>this</strong>.userNumber);\n<a name=\"223\" href=\"#223\">223</a> \t}\n<a name=\"224\" href=\"#224\">224</a> \n<a name=\"225\" href=\"#225\">225</a> \t<em>/**<em>*</em></em>\n<a name=\"226\" href=\"#226\">226</a> <em>\t * @return</em>\n<a name=\"227\" href=\"#227\">227</a> <em>\t */</em>\n<a name=\"228\" href=\"#228\">228</a> \t<strong>public</strong> Point getAbsolutePoint() {\n<a name=\"229\" href=\"#229\">229</a> \t\t<strong>if</strong>(absolutePoint == <strong>null</strong>){\n<a name=\"230\" href=\"#230\">230</a> \t\t\tabsolutePoint = getPoint();\n<a name=\"231\" href=\"#231\">231</a> \t\t}\n<a name=\"232\" href=\"#232\">232</a> \t\t<strong>return</strong> absolutePoint;\n<a name=\"233\" href=\"#233\">233</a> \t}\n<a name=\"234\" href=\"#234\">234</a> \n<a name=\"235\" href=\"#235\">235</a> \t<em>/**<em>*</em></em>\n<a name=\"236\" href=\"#236\">236</a> <em>\t * @param locPoint</em>\n<a name=\"237\" href=\"#237\">237</a> <em>\t */</em>\n<a name=\"238\" href=\"#238\">238</a> \t<strong>public</strong> <strong>void</strong> setAbsolutePoint(Point locPoint) {\n<a name=\"239\" href=\"#239\">239</a> \t\tabsolutePoint = locPoint;\n<a name=\"240\" href=\"#240\">240</a> \t\t\n<a name=\"241\" href=\"#241\">241</a> \t}\n<a name=\"242\" href=\"#242\">242</a> \n<a name=\"243\" href=\"#243\">243</a> \t<em>/**<em>*</em></em>\n<a name=\"244\" href=\"#244\">244</a> <em>\t * </em>\n<a name=\"245\" href=\"#245\">245</a> <em>\t */</em>\n<a name=\"246\" href=\"#246\">246</a> \t<strong>public</strong> <strong>void</strong> updateAbsolutePoint() {\n<a name=\"247\" href=\"#247\">247</a> \t\tsetAbsolutePoint(getPoint());\n<a name=\"248\" href=\"#248\">248</a> \t\t\n<a name=\"249\" href=\"#249\">249</a> \t}\n<a name=\"250\" href=\"#250\">250</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32803.0}