{"text": "Workshop on Cloud Security Donald Bren Hall Room 4 11 3 3 4 15pm Zig zag Sort A Simple Deterministic Data Oblivious Sorting Algorithm Running in O n log n Time Michael Goodrich University of California Irvine We describe and analyze Zig zag Sort a deterministic data oblivious sorting algorithm running in O n log n time that is arguably simpler than previously known algorithms with similar properties which are based on the AKS sorting network Because it is data oblivious and deterministic Zig zag Sort can be implemented as a simple O n log n size sorting network thereby providing a solution to an open problem posed by Incerpi and Sedgewick in 1985 In addition Zig zag Sort is a variant of Shellsort and is in fact the first deterministic Shellsort variant running in O n log n time The existence of such an algorithm was posed as an open problem by Plaxton et al in 1992 and also by Sedgewick in 1996 More relevant for today however is the fact that the existence of a simple data oblivious deterministic sorting algorithm running in O n log n time simplifies the inner loop computation in several proposed oblivious RAM simulation methods which utilize AKS sorting networks and this in turn implies simplified mechanisms for privacy preserving data outsourcing in several cloud computing applications We provide both constructive and non constructive implementations of Zig zag Sort based on the existence of a circuit known as an epsilon halver such that the constant factors in our constructive implementations are orders of magnitude smaller than those for constructive variants of the AKS sorting network which are also based on the use of epsilon halvers ", "_id": "http://www.ics.uci.edu/~theory/workshop/michael.html", "title": "workshop on cloud security, february 18, 2015", "html": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Workshop on Cloud Security, February 18, 2015</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"></a>\n<h2><a href=\"/~theory/workshop/\">Workshop on Cloud Security</a><br>\nDonald Bren Hall, Room 4011\n\n<hr />\n3:30-4:15pm:</h2>\n<h1>\nZig-zag Sort: A Simple Deterministic Data-Oblivious Sorting Algorithm Running in O(n log n)\nTime\n</h1>\n<h2>\nMichael Goodrich, University of California, Irvine\n</h2>\n\n<p>\nWe describe and analyze Zig-zag Sort--a deterministic data-oblivious sorting algorithm\nrunning in O(n log n) time that is arguably simpler than previously known algorithms with\nsimilar properties, which are based on the AKS sorting network. Because it is\ndata-oblivious and deterministic, Zig-zag Sort can be implemented as a simple O(n log\nn)-size sorting network, thereby providing a solution to an open problem posed by Incerpi\nand Sedgewick in 1985. In addition, Zig-zag Sort is a variant of Shellsort, and is, in\nfact, the first deterministic Shellsort variant running in O(n log n) time. The existence\nof such an algorithm was posed as an open problem by Plaxton et al. in 1992 and also by\nSedgewick in 1996. More relevant for today, however, is the fact that the existence of a\nsimple data-oblivious deterministic sorting algorithm running in O(n log n) time\nsimplifies the inner-loop computation in several proposed oblivious-RAM simulation methods\n(which utilize AKS sorting networks), and this, in turn, implies simplified mechanisms for\nprivacy-preserving data outsourcing in several cloud computing applications. We provide\nboth constructive and non-constructive implementations of Zig-zag Sort, based on the\nexistence of a circuit known as an epsilon-halver, such that the constant factors in our\nconstructive implementations are orders of magnitude smaller than those for constructive\nvariants of the AKS sorting network, which are also based on the use of epsilon-halvers.\n</body>\n</html>\n\n", "id": 8716.0}