{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Delaunay mesher 2 CDT Criteria This class implements a 2D mesh generator ParametersThe template parameter CDT should be a model of the concept ConstrainedDelaunayTriangulation 2 and type CDT Face should be a model of the concept MeshFaceBase 2 The geometric traits class of the instance of CDT has to be a model of the concept DelaunayMeshTraits 2 The template parameter Criteria should be a model of the concept MeshingCriteria 2 This traits class defines the shape and size criteria for the triangles of the mesh Criteria Face handle has to be the same as CDT Face handle Using this class The constructor of the class Delaunay mesher 2 CDT Criteria takes a reference to a CDT as an argument A call to the refinement method refine mesh will refine the constrained Delaunay triangulation into a mesh satisfying the size and shape criteria specified in the traits class Note that if during the life time of the Delaunay mesher 2 CDT Criteria object the triangulation is externally modified any further call to its member methods may crash Considere constructing a new Delaunay mesher 2 CDT Criteria object if the triangulation has been modified Meshing domain The domain to be mesh is defined by the constrained edges and a set of seed points The constrained edges divides the plane into several connected components The mesh domain is either the union of the bounded connected components including at least one seed or the union of the bounded connected components that do no contain any seed Note that the unbounded component of the plane is never meshed include CGAL Delaunay mesher 2 h Types typedef CDT Geom traits Geom traits the geometric traits class Delaunay mesher 2 CDT Criteria Seeds iterator const iterator over defined seeds Its value type is Geom traits Point 2 Creation Delaunay mesher 2 CDT Criteria mesher CDT t Criteria criteria Criteria Create a new mesher working on t with meshing criteria criteria Seeds functions The following functions are used to define seeds void mesher clear seeds Sets seeds to the empty set All finite connected components of the constrained triangulation will be refined template class InputIterator void mesher set seeds InputIterator begin InputIterator end const bool mark false Sets seeds to the sequence begin end If mark true the mesh domain is the union of the bounded connected components including at least one seed If mark false the domain is the union of the bounded components including no seed Note that the unbounded component of the plane is never meshed Requirement The value type of begin and end is Geom traits Point 2 Seeds const iterator mesher seeds begin Start of the seeds sequence Seeds const iterator mesher seeds end Past the end of the seeds sequence Meshing methods void mesher refine mesh Refines the constrained Delaunay triangulation into a mesh satisfying the criteria defined by the traits Criteria mesher get criteria Returns a const reference to the criteria traits object void mesher set criteria Criteria criteria Assigns criteria to the criteria traits object advanced The function set criteria scans all faces to recalculate the list of bad faces that are faces not conforming to the meshing criteria This function actually has an optional argument that permits to prevent this recalculation The filling of the list of bad faces can then be done by a call to set bad faces void mesher set criteria Criteria criteria bool recalculate bad faces Assigns criteria to the criteria traits object If recalculate bad faces is false the list of bad faces is let empty and the function set bad faces should be called before refine mesh template class InputIterator void mesher set bad faces InputIterator begin InputIterator end This method permits to set the list of bad triangles directly from the sequence begin end so that the algorithm will not scan the whole set of triangles to find bad ones To use if there is a non naive way to find bad triangles Requirement The value type of begin and end is Face handle advanced advanced Step by step operations The Delaunay mesher 2 CDT Criteria class allows for debugging or demos to play the meshing algorithm step by step using the following methods void mesher init This method must be called just before the first call to the following step by step refinement method that is when all vertices and constrained edges have been inserted into the constrained Delaunay triangulation It must be called again before any subsequent calls to the step by step refinement method if new vertices or constrained edges have been inserted since the last call bool mesher is refinement done Tests if the step by step refinement algorithm is done If it returns true the following calls to step by step refine mesh will not insert any points until some new constrained segments or points are inserted in the triangulation and init is called again bool mesher step by step refine mesh Applies one step of the algorithm by inserting one point if the algorithm is not done Returns false iff no point has been inserted because the algorithm is done advanced Next Delaunay mesh criteria 2 CDT Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Mesh_2_ref/Class_Delaunay_mesher_2.html", "title": "delaunay_mesher_2&lt;cdt, criteria&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Mesh_2_ref/Delaunay_mesher_2.tex' -->\n<html> <head>  \n<title>Delaunay_mesher_2&lt;CDT, Criteria&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1091\"></A>\n\n<A NAME=\"Cross_link_anchor_1092\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_996\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Delaunay_mesher_2<CDT, Criteria>\"></A>\n<h2><I>CGAL::Delaunay_mesher_2&lt;CDT, Criteria&gt;</I></h2>\n<P>\n\nThis class implements a 2D mesh generator.\n<P>\n\n<H3>Parameters</H3>The template parameter <I>CDT</I> should be a model of the\nconcept <I>ConstrainedDelaunayTriangulation_2</I>, and type <I>CDT::Face</I>\nshould be a model of the concept <I>MeshFaceBase_2</I>.\n<P>\n\nThe geometric traits class of the instance of <I>CDT</I> has to be\na model of the concept <I><A HREF=\"Concept_DelaunayMeshTraits_2.html#Cross_link_anchor_1086\">DelaunayMeshTraits_2</A></I>.\n<P>\n\nThe template parameter <I>Criteria</I> should be a model of the concept\n<I><A HREF=\"Concept_MeshingCriteria_2.html#Cross_link_anchor_1087\">MeshingCriteria_2</A></I>. This traits class defines the shape and size\ncriteria for the triangles of the mesh. <I>Criteria::Face_handle</I> has to\nbe the same as <I>CDT::Face_handle</I>.\n<P>\n\n<H3>Using this class</H3>\n<P>\n\nThe constructor of the class <I><A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt;</I> takes a reference to a <I>CDT</I>\nas an argument. A call to the refinement method <I>refine_mesh()</I> will\nrefine the constrained Delaunay triangulation into a mesh satisfying the\nsize and shape criteria specified in the traits class. Note that if, during\nthe life time of the <I><A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt;</I> object, the triangulation is externally\nmodified, any further call to its member methods may crash. Considere\nconstructing a new <I><A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt;</I> object if the triangulation has been\nmodified.\n<P>\n\n<H3>Meshing domain</H3>\n<P>\n\nThe domain to be mesh is defined by the constrained edges and a set of seed\npoints. The constrained edges divides the plane into several connected\ncomponents.  The mesh domain is either the union of the bounded connected\ncomponents including at least one seed, or the union of the bounded\nconnected components that do no contain any seed. Note that the unbounded\ncomponent of the plane is never meshed.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Delaunay_mesher_2.h\">CGAL/Delaunay_mesher_2.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Geom_traits\"></A>\n<A NAME=\"Typedef_Geom_traits\"></A>\ntypedef CDT::Geom_traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Geom_traits;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the geometric traits class.\n        </TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt;::Seeds_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    const iterator over defined seeds. Its\n  value type is <I>Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt; mesher ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    CDT&amp; t,<BR>\n\nCriteria criteria = Criteria());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Create a new mesher, working on <I>t</I>, with meshing criteria\n  <I>criteria</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Seeds functions</H3>\n<P>\n\nThe following functions are used to define seeds.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear_seeds_69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.clear_seeds ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets seeds to the empty set. All\n  finite connected components of the constrained triangulation will be \n  refined.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_seeds6InputIterator_begin+_InputIterator_end+_const_bool_mark=false9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    mesher.set_seeds ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator begin,<BR>\n\nInputIterator end,<BR>\n\nconst bool mark=false)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets seeds to the sequence [<I>begin</I>,\n                         <I>end</I>]. If <I>mark=true</I>, the mesh domain\n                         is the union of the bounded connected\n                         components including at least one seed. If\n                         <I>mark=false</I>, the domain is the union of\n                         the bounded components including no seed. Note\n                         that the unbounded component of the plane is\n                         never meshed.<BR>\n\n<EM>Requirement: </EM>The <I>value_type</I> of\n                         <I>begin</I> and <I>end</I> is\n                         <I>Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Seeds_const_iterator_seeds_begin_69_const;\"></A>\nSeeds_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.seeds_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Start of the seeds sequence.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Seeds_const_iterator_seeds_end_69_const;\"></A>\nSeeds_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.seeds_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past the end of the seeds sequence.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Meshing methods</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_refine_mesh69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.refine_mesh ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Refines the constrained Delaunay triangulation into a mesh\n  satisfying the criteria defined by the traits.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Criteria__get_criteria69;\"></A>\n Criteria\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.get_criteria ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a const reference to the criteria traits object.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_criteria6Criteria_criteria9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.set_criteria ( Criteria criteria)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assigns <I>criteria</I> to the criteria traits object.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n  The function <I>set_criteria</I> scans all faces to recalculate the list of\n  <I>bad faces</I>, that are faces not conforming to the meshing criteria.\n  This function actually has an optional argument that permits to prevent\n  this recalculation. The filling of the list of bad faces can then be done\n  by a call to <I>set_bad_faces</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_criteria6Criteria_criteria+_bool_recalculate_bad_faces9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    mesher.set_criteria ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Criteria criteria,<BR>\n\nbool recalculate_bad_faces)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assigns <I>criteria</I> to the criteria traits object. If\n    <I>recalculate_bad_faces</I> is <I>false</I>, the list of bad faces is\n    let empty and the function <I>set_bad_faces</I> should be called before\n    <I>refine_mesh</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_bad_faces6InputIterator_begin+_InputIterator_end9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    mesher.set_bad_faces ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator begin,<BR>\n\nInputIterator end)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This method permits to set the list of bad triangles\n                     directly, from the sequence [begin, end], so that the\n                     algorithm will not scan the whole set of triangles to\n                     find bad ones. To use if there is a non-naive way to\n                     find bad triangles.<BR>\n\n<EM>Requirement: </EM>The <I>value_type</I>\n                     of <I>begin</I> and <I>end</I> is <I>Face_handle</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Step by step operations</H3>\n<P>\n\nThe <I><A HREF=\"Class_Delaunay_mesher_2.html#Cross_link_anchor_1092\">Delaunay_mesher_2</A>&lt;CDT, Criteria&gt;</I> class allows, for debugging or demos, to play the\nmeshing algorithm step by step, using the following methods.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_init69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    mesher.init ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This method must be called just before the first\n             call to the following step by step refinement method,\n             that is when all vertices and constrained edges have been\n             inserted into the constrained Delaunay triangulation. It\n             must be called again before any subsequent calls to the\n             step by step refinement method if new vertices or constrained\n             edges have been inserted since the last call.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_refinement_done69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.is_refinement_done ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Tests if the step by step refinement algorithm is done. If it returns\n  <I>true</I>, the following calls to <I>step_by_step_refine_mesh</I> will\n  not insert any points, until some new constrained segments or points are\n  inserted in the triangulation and <I>init</I> is called again.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_step_by_step_refine_mesh69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    mesher.step_by_step_refine_mesh ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Applies one step of the algorithm, by inserting one point, if the\n  algorithm is not done. Returns <I>false</I> iff no point has been inserted\n  because the algorithm is done.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Delaunay_mesh_criteria_2.html\"><I>Delaunay_mesh_criteria_2&lt;CDT&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_48!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38586.0}