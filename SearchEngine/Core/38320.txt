{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Arrangement 2 Dcel Traits Base node DefinitionAn object arr of the class Arrangement 2 Dcel Traits Base node represents the planar subdivision induced by a set of curves that are not necessarily x monotone and possibly intersecting This class extends the class Planar map 2 Dcel Traits which handles x monotone pairwise interior disjoint curves This class also provides additional methods to traverse the resulting planar map along curves inserted into the arrangement note that a single curve in the arrangement might correspond to several edges of the planar map include CGAL Arrangement 2 h The base class of Halfedge has additional properties apart from the ones defined for planar maps Types Arrangement 2 Dcel Traits Base node Curve node represents a curve inserted into the arrangement which possibly intersects other curves in the arrangement and is not necessarily x monotone Arrangement 2 Dcel Traits Base node Subcurve node represents a subcurve of the curve inserted into the arrangement It is created by invoking a user defined split function on the original curve or on another curve By default a subcurve is created from the original curve by invoking the function Traits curve make x monotone Arrangement 2 Dcel Traits Base node Edge node represents a subcurve of the curve inserted into the arrangement which is created by an intersection with another curve It holds a curve which is disjoint in its interior from the other curves in the arrangement and holds a cross reference to the Halfedge in the planar map representing it Arrangement 2 Dcel Traits Base node Vertex represents a vertex of the planar map induced by the arrangement Arrangement 2 Dcel Traits Base node Halfedge represents a halfedge of the planar map induced by the arrangement It has additional methods see class definition of Arrangement 2 Dcel Traits Base node Halfedge Arrangement 2 Dcel Traits Base node Face represents a face of the planar map induced by the arrangement The following handles iterators and circulators have appropriate constant counterparts The mutable types are assignable to their constant counterparts All circulators are assignable to the Halfedge iterator The iterators are assignable to the respective handle types Wherever the handles appear in function parameter lists the appropriate iterator can be used as well Arrangement 2 Dcel Traits Base node Curve iterator A bidirectional iterator over all Curve nodes of the arrangement Its value type is Curve node Arrangement 2 Dcel Traits Base node Subcurve iterator a bidirectional iterator over all the subcurves which were created from the same original curve Its value type is Subcurve node Arrangement 2 Dcel Traits Base node Edge iterator a bidirectional iterator over all the Edge nodes which were created from the same original curve Its value type is Edge node Arrangement 2 Dcel Traits Base node Vertex handle handle to vertex Arrangement 2 Dcel Traits Base node Halfedge handle handle to halfedge Arrangement 2 Dcel Traits Base node Face iterator handle to face Arrangement 2 Dcel Traits Base node Vertex iterator a bidirectional iterator over the vertices of the arrangement Its value type is Vertex Arrangement 2 Dcel Traits Base node Halfedge iterator a bidirectional iterator over the halfedges of the arrangement Its value type is Halfedge Arrangement 2 Dcel Traits Base node Face iterator a bidirectional iterator over the faces of the arrangement Its value type is Face Arrangement 2 Dcel Traits Base node Ccb halfedge circulator a forward circulator over the edges of a CCB connected components of the boundary Its value type is Halfedge Arrangement 2 Dcel Traits Base node Halfedge around vertex circulator a forward circulator over the half edges which have the vertex as their source The half edges are traversed in their clockwise order around the vertex Its value type is Halfedge Arrangement 2 Dcel Traits Base node Holes iterator a bidirectional iterator to traverse all the holes i e inner CCBs of a face Holes iterator is the next hole in the face Its value type is Ccb halfedge circulator Arrangement 2 Dcel Traits Base node Overlap circulator a bidirectional circulator over the overlapping edge nodes that correspond to a single pair of halfedges Its value type is Edge node and it can be cast to an Edge iterator typedef Planar map 2 Dcel Traits Planar map the planar map type of the arrangement Arrangement 2 Dcel Traits Base node Locate type same as the planar map locate type typedef typename Traits Point 2 Point 2 the point type of the arrangement typedef typename Traits Curve 2 Curve 2 the curve type of the arrangement Objects of this type are inserted to the arrangement typedef typename Traits X monotone curve 2 X monotone curve 2 the x monotone curve type of the arrangement The input curves of type Curve 2 are divided into x monotone subcurves Creation Arrangement 2 Dcel Traits Base node arr create an empty arrangement with the default point location strategy Arrangement 2 Dcel Traits Base node arr Pm point location base Planar map pl create an empty arrangement with pl as the point location strategy Arrangement 2 Dcel Traits Base node arr Traits tr Pm point location base Planar map pl create an empty arrangement with tr as the traits class and pl as the point location strategy Operations void arr clear clears the arrangement Curve iterator arr insert Curve 2 cv inserts the curve cv into the arrangement It uses the Traits curve make x monotone function to cut the curve into x monotone subcurves and inserts them to the hierarchy tree If the arrangement is in update mode the default mode then the curves are inserted into the planar map Precondition cv is not equivalent to a point template class InputIterator void arr insert InputIterator begin InputIterator end insert the curves from a container iterated by InputIterator from begin to end into the arrangement This function uses the sweep line algorithm to perform the aggregated insertion advanced template class F iterator Curve iterator arr insert Curve 2 cv F iterator F begin F iterator F end insert the curve cv into the arrangement F begin and F end are iterators that refer to split function pointers or pointers to split function objects The insert function uses the split functions to cut the curve into subcurves and inserts them in the hierarchy tree every split function creates one level of the hierarchy tree If the arrangement is in update mode the default mode then the curves are inserted into the planar map The split function should get as input a curve and a reference to a list of curves where the subcurves will be stored its return value is void See Section and Section for examples of user defined functions The functions are called with the following syntax F begin const Curve 2 c list Curve 2 l advanced advanced Reading Arrangement bool arr read istream in reading Arrangement 2 Dcel Traits Base node from a given input stream The input stream should support the extractor operator for the Point 2 and Curve 2 types of Arrangement template class Scanner bool arr read istream in Scanner scanner reading Arrangement 2 Dcel Traits Base node from a given input stream when taking the scanner class as a parameter The input stream should support the extractor operator for the Point 2 and Curve 2 types of Arrangement advanced void arr set update bool u sets update mode to u If update mode is true then every curve inserted into the arrangement is also inserted into the planar map induced by it i e it is intersected with the rest of the curves in the arrangement If update mode is false then the curve is only split into x monotone curves and inserted into the hierarchy tree without the edge level which is not constructed If update mode is changed from false to true then the planar map is updated with all the curves inserted into the arrangement since the last time update was true Curve iterator arr curve node begin returns the begin iterator of the curves i e the curves that were inserted to arr Curve iterator arr curve node end returns the past the end iterator of the curves void arr remove curve Curve iterator cit removes the curve and all it s subcurves from the arrangement The following operations have the same functionality as their counterparts in the planar map Vertex iterator arr vertices begin Vertex iterator arr vertices end Size arr number of vertices Halfedge iterator arr halfedges begin Halfedge iterator arr halfedges end Size arr number of halfedges Face iterator arr faces begin Face iterator arr faces end Size arr number of faces Halfedge handle arr split edge Halfedge handle e X monotone curve 2 c1 X monotone curve 2 c2 Halfedge handle arr locate Point 2 p Locate type lt Halfedge handle arr vertical ray shoot Point 2 p Locate type lt bool up Face handle arr unbounded face bool arr is valid bool verbose false checks the validity of many features of the arrangements First checks the validity of the arrangement s planar map Then checks for the correctness of the hierarchy tree Finally some geometric properties are verified e g each edge s end point is the start point of its next edge if the verboseparameter is true then a verbose description of the validity check is sent to the output The planar map operations merge edge and remove edge are not implemented in the arrangement level since they can cause inconsistencies between the hierarchy tree and the planar map If it is necessary for the users to perform these operations they can still achieve this For example if the users need to remove an edge they can remove the curve and insert the two subcurves that are created after the edge is removed instead of the original curve Next ArrangementBaseNode 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Arrangement_2_ref/Class_Arrangement_2.html", "title": "arrangement_2&lt;dcel,traits,base_node&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Arrangement_2_ref/Arrangement_2.tex' -->\n<html> <head>  \n<title>Arrangement_2&lt;Dcel,Traits,Base_node&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_820\"></A>\n\n<A NAME=\"Cross_link_anchor_821\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_814\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Arrangement_2<Dcel,Traits,Base_node>\"></A>\n<h2><I>CGAL::Arrangement_2&lt;Dcel,Traits,Base_node&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object <I>arr</I> of the class\n    <I><A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;</I> represents the planar\n    subdivision induced by a set of curves that are not necessarily \n    <MATH><I>x</I></MATH>-monotone and possibly intersecting. \n    This class extends\n    the class <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&lt;Dcel,Traits&gt;</I>\n    which handles <MATH><I>x</I></MATH>-monotone pairwise interior disjoint\n    curves.\n<P>\n\nThis class also provides additional methods to traverse the\n    resulting planar-map along curves inserted into the arrangement\n    (note that a single curve in the arrangement might correspond to\n    several edges of the planar map).\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Arrangement_2.h\">CGAL/Arrangement_2.h</A>&gt;</I>\n<P>\n\nThe base class of <I>Halfedge</I> has additional\n    properties apart from the ones defined for planar maps.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2-Dcel-Traits-Base_node---Curve_node.html#Cross_link_anchor_828\">Arrangement_2&lt;Dcel,Traits,Base_node&gt;::Curve_node</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a curve inserted into the \n       arrangement, which possibly intersects other curves in the arrangement,\n       and is not necessarily <MATH><I>x</I></MATH>-monotone.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2-Dcel-Traits-Base_node---Subcurve_node.html#Cross_link_anchor_826\">Arrangement_2&lt;Dcel,Traits,Base_node&gt;::Subcurve_node</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a subcurve of the curve inserted \n       into the arrangement. It is created by invoking a user defined \n       <I>split_function</I> on the original curve, or on another curve. By\n       default a subcurve is created from the original curve by invoking\n       the function <I>Traits::curve_make_x_monotone()</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2-Dcel-Traits-Base_node---Edge_node.html#Cross_link_anchor_830\">Arrangement_2&lt;Dcel,Traits,Base_node&gt;::Edge_node</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a subcurve of the curve inserted \n       into the arrangement which is created by an <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> with\n       another curve. It holds a curve which is disjoint in its interior\n       from the other curves in the arrangement, and holds a cross reference\n       to the <I>Halfedge</I> in the planar map representing it.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a vertex of the planar map induced by the\n       arrangement.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2-Dcel-Traits-Base_node---Halfedge.html#Cross_link_anchor_832\">Arrangement_2&lt;Dcel,Traits,Base_node&gt;::Halfedge</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a halfedge of the planar map induced by\n       the arrangement. It has additional methods, see class definition\n       of <I><A HREF=\"Class_Arrangement_2-Dcel-Traits-Base_node---Halfedge.html#Cross_link_anchor_832\">Arrangement_2&lt;Dcel,Traits,Base_node&gt;::Halfedge</A></I>\n       .\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Face\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a face of the planar map induced by\n       the arrangement.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe following handles, iterators and circulators have appropriate\n    constant\ncounterparts.\n    The mutable types are assignable to their\n    constant counterparts. All circulators are assignable to the \n    <I>Halfedge_iterator</I>. The iterators are assignable to the\n    respective handle types. Wherever the handles appear in function parameter\n    lists, the appropriate iterator can be used as well.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Curve_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A bidirectional iterator over \n       all Curve nodes of the arrangement. Its value-type is \n       <I>Curve_node</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Subcurve_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over all\n       the subcurves which were created from the same original curve.\n       Its value-type is \n       <I>Subcurve_node</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Edge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over all\n       the <I>Edge_nodes</I> which were created from the same original curve.\n       Its value-type is \n       <I>Edge_node</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to vertex.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Halfedge_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to halfedge.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Face_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to face\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       vertices of the arrangement. Its value-type is\n       <I>Vertex</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Halfedge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       halfedges of the arrangement.  Its value-type is <I>Halfedge</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Face_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       faces of the arrangement.  Its value-type is <I>Face</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Ccb_halfedge_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a forward circulator over the\n       edges of a CCB (connected components of the boundary).  Its\n       value-type is <I>Halfedge</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Halfedge_around_vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a forward circulator over\n       the half-edges which have  the vertex as their source.  \n       The half-edges are traversed in\n       their clockwise order around the vertex. Its value-type is\n       <I>Halfedge</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Holes_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator to\n       traverse all the holes (i.e., inner CCBs) of a face \n       (<I>Holes_iterator++</I> is the next hole in the face).\n       Its value type is\n       <I>Ccb_halfedge_circulator</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::Overlap_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional circulator over\n       the overlapping edge nodes that correspond to a single pair of\n       halfedges. Its value-type is <I>Edge_node</I> and it can be\n       cast to an <I>Edge_iterator</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Planar_map\"></A>\n<A NAME=\"Typedef_Planar_map\"></A>\ntypedef <A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&lt;Dcel,Traits&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Planar_map;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the planar map\n       type of the arrangement.\n        </TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;::<A HREF=\"../Planar_map_ref/Class_Planar_map_2#Enum_Locate_type\">Locate_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    same as the planar map locate type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2\"></A>\n<A NAME=\"Typedef_Point_2\"></A>\ntypedef typename Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the point type\n       of the arrangement\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Curve_2\"></A>\n<A NAME=\"Typedef_Curve_2\"></A>\ntypedef typename Traits::Curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Curve_2;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the curve type\n      of the arrangement. Objects of this type are inserted to the\n      arrangement.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_X_monotone_curve_2\"></A>\n<A NAME=\"Typedef_X_monotone_curve_2\"></A>\ntypedef typename Traits::X_monotone_curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    X_monotone_curve_2;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the <MATH><I>x</I></MATH>-monotone curve type of the arrangement. The input curves of\n       type <I>Curve_2</I> are divided into <MATH><I>x</I></MATH>-monotone subcurves.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt; arr;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    create an empty arrangement with the default point location strategy.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt; arr ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Pm_point_location_base&lt;Planar_map&gt; *pl);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    create an empty arrangement with <I>*pl</I> as the point location \n       strategy.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt; arr ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Traits tr,<BR>\n\nPm_point_location_base&lt;Planar_map&gt; *pl);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    create an empty arrangement with <I>tr</I> as the traits class and \n       <I>*pl</I> as the point location strategy.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    arr.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    clears the arrangement.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Curve_iterator_insert6const_Curve_2__cv9;\"></A>\nCurve_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.insert (  Curve_2 cv)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the curve <I>cv</I> into the arrangement. It uses the\n       <I>Traits::curve_make_x_monotone</I> function to cut the curve into \n       <MATH><I>x</I></MATH>-monotone subcurves and inserts them to the hierarchy tree.<BR>\n\nIf the arrangement is in <I>update</I> mode (the default mode) \n       then the curves are inserted into the planar map.<BR>\n\n<EM>Precondition: </EM><I>cv</I> is not equivalent to a point. \n        </TD></TR>\n        </TABLE>\n<P>\n\n<I>template &lt;class InputIterator&gt;</I><BR>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_6InputIterator_begin+_InputIterator_end_9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.insert ( InputIterator begin,  InputIterator end)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    insert the curves from a container iterated by <I>InputIterator</I> \n     from <I>begin</I> to <I>end</I> into the arrangement. This function\n     uses the sweep-line algorithm to perform the aggregated insertion.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class F_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Curve_iterator_insert6const_Curve_2__cv+_F_iterator_F_begin+_F_iterator_F_end9;\"></A>\nCurve_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    arr.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Curve_2 cv,<BR>\n\nF_iterator F_begin,<BR>\n\nF_iterator F_end)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    insert the curve <I>cv</I>\n           into the arrangement. <I>F_begin</I> and <I>F_end</I> are iterators\n           that refer to <I>split-function</I> pointers\n           (or pointers to split-function objects).\n           The insert function uses the split-functions\n           to cut the curve into subcurves and inserts\n           them in the hierarchy tree (every split-function \n           creates one level of the hierarchy tree).\n           If the arrangement is in <I>update</I>\n           mode (the default mode) then the curves are inserted into the\n           planar map.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe split-function should get as input a curve and a reference to\n        a list of curves (where the subcurves will be stored), its return\n        value is <I>void</I>. See Section&nbsp;<A HREF=\"../Arrangement_2/Chapter_main.html#ssec:example4\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>\n        and Section&nbsp;<A HREF=\"../Arrangement_2/Chapter_main.html#ssec:example5\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A> for examples\n        of user-defined functions.\n        The functions are called with the following\n        syntax:\n<P>\n\n<I>(*(*F_begin))(const Curve_2&amp; c, list&lt;Curve_2&gt;&amp; l);</I>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Reading Arrangement</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_read_6istream__in9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.read ( istream &amp;in)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reading <I><A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;</I> from a given input stream.\n The input stream should support the extractor operator (<I>&gt;&gt;</I>) for the \n <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> and <I>Curve_2</I> types of <I>Arrangement</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<I>template &lt;class Scanner&gt;</I>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_read_6istream__in+_Scanner__scanner9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.read ( istream &amp;in,  Scanner&amp; scanner)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reading <I><A HREF=\"Class_Arrangement_2.html#Cross_link_anchor_821\">Arrangement_2</A>&lt;Dcel,Traits,Base_node&gt;</I> from a given input stream when taking the scanner class \n as a parameter.\n The input stream should support the extractor operator (<I>&gt;&gt;</I>) for the \n <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> and <I>Curve_2</I> types of <I>Arrangement</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_update6bool_u9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.set_update ( bool u)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets update mode to <I>u</I>. If\n       update mode is true then every curve inserted into the\n       arrangement is also inserted into the planar map induced by it (i.e.,\n       it is intersected with the rest of the curves in the arrangement).\n       If update mode is false then the curve is only split into <MATH><I>x</I></MATH>-monotone\n       curves and inserted into the hierarchy tree (without the edge level\n       which is not constructed). If update mode is changed from false to true\n       then the planar map is updated with all the curves inserted into\n       the arrangement since the last time update was true.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Curve_iterator_curve_node_begin69;\"></A>\nCurve_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.curve_node_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the begin iterator of the curves (i.e., the\n       curves that were inserted to <I>arr</I>).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Curve_iterator_curve_node_end69;\"></A>\nCurve_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.curve_node_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of the curves.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_curve6Curve_iterator_cit9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.remove_curve ( Curve_iterator cit)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the curve and all it's subcurves from the arrangement.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe following operations have the same functionality as their\n    counterparts in the planar map.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_begin69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.vertices_begin ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_end69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.vertices_end ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_vertices69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.number_of_vertices ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_begin69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.halfedges_begin ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_end69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.halfedges_end ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_halfedges69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.number_of_halfedges ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_begin69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.faces_begin ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_end69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.faces_end ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_faces69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.number_of_faces ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_split_edge6Halfedge_handle_e+_const_X_monotone_curve_2__c1+_const_X_monotone_curve_2__c29;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    arr.split_edge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle e,<BR>\n\nX_monotone_curve_2 c1,<BR>\n\nX_monotone_curve_2 c2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_locate6const_Point_2__p+_Locate_type__lt9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.locate (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,  <A HREF=\"../Planar_map_ref/Class_Planar_map_2#Enum_Locate_type\">Locate_type</A>&amp; lt)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_vertical_ray_shoot6const_Point_2__p+_Locate_type__lt+_bool_up9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    arr.vertical_ray_shoot ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\n<A HREF=\"../Planar_map_ref/Class_Planar_map_2#Enum_Locate_type\">Locate_type</A>&amp; lt,<BR>\n\nbool up)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_unbounded_face69;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.unbounded_face ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose=false9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    arr.is_valid ( bool verbose=false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks the validity of many features of the arrangements. First,\n      checks the validity of the arrangement's planar map. Then, checks\n      for the correctness of the hierarchy tree. Finally, some geometric\n      properties are verified, e.g., each edge's end point is the start\n      point of its next edge. if the <I>verbose</I>parameter\n      is <I>true</I> then a verbose description of the validity check\n      is sent to the output.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe planar map operations: <I>merge_edge</I> and <I>remove_edge</I> are\n    not implemented in the arrangement level,\n    since they can cause inconsistencies\n    between the hierarchy tree and the planar map.\n    If it is necessary for the users to perform these operations\n    they can still achieve this. For example, if the users need to remove an\n    edge they can remove the curve and insert the two subcurves that are\n    created after the edge is removed,\n    instead of the original curve.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_ArrangementBaseNode_2.html\"><I>ArrangementBaseNode_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_24!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38320.0}