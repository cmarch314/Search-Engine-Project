{"text": "Main Page Modules Data Structures File List Data Fields Globals Related Pages vcsm hGo to the documentation of this file 1 5 ifndef VCSM H 51 define VCSM H 52 53 Generic headers 54 include maloc maloc h 55 include apbs vhal h 56 include apbs valist h 57 58 Specific headers 59 include mc mc h 6 65 void Gem setExternalUpdateFunction 66 Gem thee 67 void externalUpdate SS simps int num 7 71 76 struct sVcsm 77 78 Valist alist 79 int natom 81 Gem gm 84 int sqm 91 int nsqm 92 int nsimp 94 int msimp 96 int qsm 98 int nqsm 99 int initFlag 1 1 Vmem vmem 1 3 1 4 1 9 typedef struct sVcsm Vcsm 11 111 112 Class Vcsm Inlineable methods vcsm c 114 115 if defined VINLINE VCSM 116 122 Valist Vcsm getValist 123 Vcsm thee 124 125 131 int Vcsm getNumberAtoms 132 Vcsm thee 133 int isimp 134 135 141 Vatom Vcsm getAtom 142 Vcsm thee 143 int iatom 144 int isimp 145 146 152 int Vcsm getAtomIndex 153 Vcsm thee 154 int iatom 155 int isimp 156 157 163 int Vcsm getNumberSimplices 164 Vcsm thee 165 int iatom 166 167 173 SS Vcsm getSimplex 174 Vcsm thee 175 int isimp 176 int iatom 177 178 184 int Vcsm getSimplexIndex 185 Vcsm thee 186 int isimp 187 int iatom 188 189 196 unsigned long int Vcsm memChk 197 Vcsm thee 198 199 2 else if defined VINLINE VCSM 2 1 define Vcsm getValist thee thee alist 2 2 define Vcsm getNumberAtoms thee isimp thee nsqm isimp 2 3 define Vcsm getAtom thee iatom isimp Valist getAtom thee alist thee sqm isimp iatom 2 4 define Vcsm getAtomIndex thee iatom isimp thee sqm isimp iatom 2 5 define Vcsm getNumberSimplices thee iatom thee nqsm iatom 2 6 define Vcsm getSimplex thee isimp iatom Gem SS thee gm thee qsm iatom isimp 2 7 define Vcsm getSimplexIndex thee isimp iatom thee qsm iatom isimp 2 8 define Vcsm memChk thee Vmem bytes thee vmem 2 9 endif if defined VINLINE VCSM 21 211 212 Class Vcsm Non Inlineable methods vcsm c 214 223 Vcsm Vcsm ctor 224 Valist alist 225 Gem gm 226 227 236 int Vcsm ctor2 237 Vcsm thee 238 Valist alist 239 Gem gm 24 241 246 void Vcsm dtor 247 Vcsm thee 248 249 254 void Vcsm dtor2 255 Vcsm thee 256 257 264 void Vcsm init 265 Vcsm thee 266 267 274 int Vcsm update 275 Vcsm thee 276 SS simps 281 int num 282 283 284 endif ifndef VCSM H 285 Generated on Tue Dec 6 1 5 31 2 5 for APBS by 1 3 5", "_id": "http://www.ics.uci.edu/~dock/manuals/apbs/html/programmer/vcsm_8h-source.html", "title": "apbs: vcsm.h source file", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">\n<title>APBS: vcsm.h Source File</title>\n<link href=\"apbs.css\" rel=\"stylesheet\" type=\"text/css\">\n</head><body>\n<!-- Generated by Doxygen 1.3.5 -->\n<div class=\"qindex\"><a class=\"qindex\" href=\"index.html\">Main&nbsp;Page</a> | <a class=\"qindex\" href=\"modules.html\">Modules</a> | <a class=\"qindex\" href=\"annotated.html\">Data&nbsp;Structures</a> | <a class=\"qindex\" href=\"files.html\">File&nbsp;List</a> | <a class=\"qindex\" href=\"functions.html\">Data&nbsp;Fields</a> | <a class=\"qindex\" href=\"globals.html\">Globals</a> | <a class=\"qindex\" href=\"pages.html\">Related&nbsp;Pages</a></div>\n<h1>vcsm.h</h1><a href=\"vcsm_8h.html\">Go to the documentation of this file.</a><div class=\"fragment\"><pre>00001 \n00050 <span class=\"preprocessor\">#ifndef _VCSM_H_</span>\n00051 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#define _VCSM_H_</span>\n00052 <span class=\"preprocessor\"></span>\n00053 <span class=\"comment\">/* Generic headers */</span>\n00054 <span class=\"preprocessor\">#include \"maloc/maloc.h\"</span>\n00055 <span class=\"preprocessor\">#include \"<a class=\"code\" href=\"vhal_8h.html\">apbs/vhal.h</a>\"</span>\n00056 <span class=\"preprocessor\">#include \"<a class=\"code\" href=\"valist_8h.html\">apbs/valist.h</a>\"</span>\n00057 \n00058 <span class=\"comment\">/* Specific headers */</span>\n00059 <span class=\"preprocessor\">#include \"mc/mc.h\"</span>\n00060 \n00065 <span class=\"keywordtype\">void</span> <a class=\"code\" href=\"group__Vcsm.html#ga1\">Gem_setExternalUpdateFunction</a>(\n00066         Gem *thee, \n00067         <span class=\"keywordtype\">void</span> (*externalUpdate)(SS **simps, <span class=\"keywordtype\">int</span> num) \n00070         );\n00071 \n<a name=\"l00076\"></a><a class=\"code\" href=\"structsVcsm.html\">00076</a> <span class=\"keyword\">struct </span><a class=\"code\" href=\"structsVcsm.html\">sVcsm</a> { \n00077 \n<a name=\"l00078\"></a><a class=\"code\" href=\"structsVcsm.html#o0\">00078</a>   <a class=\"code\" href=\"structsValist.html\">Valist</a> *<a class=\"code\" href=\"structsVcsm.html#o0\">alist</a>;      \n<a name=\"l00079\"></a><a class=\"code\" href=\"structsVcsm.html#o1\">00079</a>   <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"structsVcsm.html#o1\">natom</a>;          \n<a name=\"l00081\"></a><a class=\"code\" href=\"structsVcsm.html#o2\">00081</a>   Gem *<a class=\"code\" href=\"structsVcsm.html#o2\">gm</a>;            \n<a name=\"l00084\"></a><a class=\"code\" href=\"structsVcsm.html#o3\">00084</a>   <span class=\"keywordtype\">int</span> **<a class=\"code\" href=\"structsVcsm.html#o3\">sqm</a>;          \n<a name=\"l00091\"></a><a class=\"code\" href=\"structsVcsm.html#o4\">00091</a>   <span class=\"keywordtype\">int</span> *<a class=\"code\" href=\"structsVcsm.html#o4\">nsqm</a>;          \n<a name=\"l00092\"></a><a class=\"code\" href=\"structsVcsm.html#o5\">00092</a>   <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"structsVcsm.html#o5\">nsimp</a>;          \n<a name=\"l00094\"></a><a class=\"code\" href=\"structsVcsm.html#o6\">00094</a>   <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"structsVcsm.html#o6\">msimp</a>;          \n<a name=\"l00096\"></a><a class=\"code\" href=\"structsVcsm.html#o7\">00096</a>   <span class=\"keywordtype\">int</span> **<a class=\"code\" href=\"structsVcsm.html#o7\">qsm</a>;          \n<a name=\"l00098\"></a><a class=\"code\" href=\"structsVcsm.html#o8\">00098</a>   <span class=\"keywordtype\">int</span> *<a class=\"code\" href=\"structsVcsm.html#o8\">nqsm</a>;          \n<a name=\"l00099\"></a><a class=\"code\" href=\"structsVcsm.html#o9\">00099</a>   <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"structsVcsm.html#o9\">initFlag</a>;       \n<a name=\"l00101\"></a><a class=\"code\" href=\"structsVcsm.html#o10\">00101</a>   Vmem *<a class=\"code\" href=\"structsVcsm.html#o10\">vmem</a>;         \n00103 };\n00104 \n<a name=\"l00109\"></a><a class=\"code\" href=\"group__Vcsm.html#ga0\">00109</a> <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span><a class=\"code\" href=\"structsVcsm.html\">sVcsm</a> <a class=\"code\" href=\"group__Vcsm.html#ga0\">Vcsm</a>;\n00110 \n00111 <span class=\"comment\">/* ///////////////////////////////////////////////////////////////////////////</span>\n00112 <span class=\"comment\">// Class Vcsm: Inlineable methods (vcsm.c)</span>\n00114 <span class=\"comment\"></span>\n00115 <span class=\"comment\">#if !defined(VINLINE_VCSM)</span>\n00116 <span class=\"comment\"></span>\n00122 <span class=\"comment\">    Valist* Vcsm_getValist(</span>\n00123 <span class=\"comment\">            Vcsm *thee </span>\n00124 <span class=\"comment\">            );</span>\n00125 <span class=\"comment\"></span>\n00131 <span class=\"comment\">    int Vcsm_getNumberAtoms(</span>\n00132 <span class=\"comment\">            Vcsm *thee,  </span>\n00133 <span class=\"comment\">            int isimp  </span>\n00134 <span class=\"comment\">            );</span>\n00135 <span class=\"comment\"></span>\n00141 <span class=\"comment\">    Vatom* Vcsm_getAtom(</span>\n00142 <span class=\"comment\">            Vcsm *thee,  </span>\n00143 <span class=\"comment\">            int iatom,  </span>\n00144 <span class=\"comment\">            int isimp  </span>\n00145 <span class=\"comment\">            );</span>\n00146 <span class=\"comment\"></span>\n00152 <span class=\"comment\">    int Vcsm_getAtomIndex(</span>\n00153 <span class=\"comment\">            Vcsm *thee,  </span>\n00154 <span class=\"comment\">            int iatom,  </span>\n00155 <span class=\"comment\">            int isimp  </span>\n00156 <span class=\"comment\">            );</span>\n00157 <span class=\"comment\"></span>\n00163 <span class=\"comment\">    int Vcsm_getNumberSimplices(</span>\n00164 <span class=\"comment\">            Vcsm *thee,  </span>\n00165 <span class=\"comment\">            int iatom  </span>\n00166 <span class=\"comment\">            );</span>\n00167 <span class=\"comment\"></span>\n00173 <span class=\"comment\">    SS* Vcsm_getSimplex(</span>\n00174 <span class=\"comment\">            Vcsm *thee,  </span>\n00175 <span class=\"comment\">            int isimp,  </span>\n00176 <span class=\"comment\">            int iatom  </span>\n00177 <span class=\"comment\">            );</span>\n00178 <span class=\"comment\"></span>\n00184 <span class=\"comment\">    int Vcsm_getSimplexIndex(</span>\n00185 <span class=\"comment\">            Vcsm *thee,  </span>\n00186 <span class=\"comment\">            int isimp,  </span>\n00187 <span class=\"comment\">            int iatom  </span>\n00188 <span class=\"comment\">            );</span>\n00189 <span class=\"comment\"></span>\n00196 <span class=\"comment\">    unsigned long int Vcsm_memChk(</span>\n00197 <span class=\"comment\">            Vcsm *thee </span>\n00198 <span class=\"comment\">            );</span>\n00199 <span class=\"comment\"></span>\n00200 <span class=\"comment\">#else /* if defined(VINLINE_VCSM) */</span>\n00201 <span class=\"preprocessor\">#   define Vcsm_getValist(thee) ((thee)-&gt;alist)</span>\n00202 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getNumberAtoms(thee, isimp) ((thee)-&gt;nsqm[isimp])</span>\n00203 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getAtom(thee, iatom, isimp) (Valist_getAtom((thee)-&gt;alist, ((thee)-&gt;sqm)[isimp][iatom]))</span>\n00204 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getAtomIndex(thee, iatom, isimp) (((thee)-&gt;sqm)[isimp][iatom])</span>\n00205 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getNumberSimplices(thee, iatom) (((thee)-&gt;nqsm)[iatom])</span>\n00206 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getSimplex(thee, isimp, iatom) (Gem_SS((thee)-&gt;gm, ((thee)-&gt;qsm)[iatom][isimp]))</span>\n00207 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_getSimplexIndex(thee, isimp, iatom) (((thee)-&gt;qsm)[iatom][isimp])</span>\n00208 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#   define Vcsm_memChk(thee) (Vmem_bytes((thee)-&gt;vmem))</span>\n00209 <span class=\"preprocessor\"></span><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* if !defined(VINLINE_VCSM) */</span>\n00210 \n00211 <span class=\"comment\">/* ///////////////////////////////////////////////////////////////////////////</span>\n00212 <span class=\"comment\">// Class Vcsm: Non-Inlineable methods (vcsm.c)</span>\n00214 <span class=\"comment\"></span>\n00223 <span class=\"comment\">Vcsm* Vcsm_ctor(</span>\n00224 <span class=\"comment\">        Valist *alist,  </span>\n00225 <span class=\"comment\">        Gem *gm  </span>\n00226 <span class=\"comment\">        );</span>\n00227 <span class=\"comment\"></span>\n00236 <span class=\"comment\">int Vcsm_ctor2(</span>\n00237 <span class=\"comment\">        Vcsm *thee,  </span>\n00238 <span class=\"comment\">        Valist *alist,  </span>\n00239 <span class=\"comment\">        Gem *gm  </span>\n00240 <span class=\"comment\">        );</span>\n00241 <span class=\"comment\"></span>\n00246 <span class=\"comment\">void Vcsm_dtor(</span>\n00247 <span class=\"comment\">        Vcsm **thee  </span>\n00248 <span class=\"comment\">        );</span>\n00249 <span class=\"comment\"></span>\n00254 <span class=\"comment\">void Vcsm_dtor2(</span>\n00255 <span class=\"comment\">        Vcsm *thee </span>\n00256 <span class=\"comment\">        );</span>\n00257 <span class=\"comment\"></span>\n00264 <span class=\"comment\">void Vcsm_init(</span>\n00265 <span class=\"comment\">        Vcsm *thee </span>\n00266 <span class=\"comment\">        );</span>\n00267 <span class=\"comment\"></span>\n00274 <span class=\"comment\">int Vcsm_update(</span>\n00275 <span class=\"comment\">        Vcsm *thee, </span>\n00276 <span class=\"comment\">        SS **simps, </span>\n00281 <span class=\"comment\">        int num </span>\n00282 <span class=\"comment\">        );</span>\n00283 <span class=\"comment\"></span>\n00284 <span class=\"comment\">#endif /* ifndef _VCSM_H_ */</span>\n00285 \n</pre></div><hr size=\"1\"><address style=\"align: right;\"><small>Generated on Tue Dec 6 10:05:31 2005 for APBS by\n<a href=\"http://www.doxygen.org/index.html\">\n<img src=\"doxygen.png\" alt=\"doxygen\" align=\"middle\" border=0 > \n</a>1.3.5 </small></address>\n</body>\n</html>\n", "id": 39634.0}