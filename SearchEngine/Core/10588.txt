{"text": "GoogleTest Installation for Eclipse C Instructions These instructions review how to install the GoogleTest unit testing framework library folder googletestlib in Eclipse C Then they explain how to create a project that uses the library At various times during the quarter you will be supplied with unit tests to run on the code you are writing We often grade programs using these unit tests may be asked to replace various hpp or cpp files and recompile the library Googletestlib Installation Quick PC Download and unzip the googletestlib zip file the result is a googletestlib folder Macs Download and unzip the googletestlibmac zip file the result is a googletestlibmac folder Rename the folder to be googletestlib Locate the workspace folder typically C Users yourname workspace for PCs and put the googletestlib folder you downloaded and unzipped into this workspace folder This folder contains a files groups of o files that allow us to perform unit tests easily on the code that we develop That s all there is to do If you are using the more general instructions ultimately you need to have a folder with the correct files in the include and make folders for your system which the above downloads supply Creating a Project that Uses the Googletestlib Download and unzip the test googletest zip file the result is a googletest folder Put the googletest folder you downloaded and unzipped into the workspace folder mentioned above Create a project from this folder Normally you will perform the steps needed to ensure this program uses the courselib correctly but this simple test does not require these steps so they are not included in this document Right click the test googletest icon in the Project Explorer tab Select Properties which appears at the bottom as follows In the Properties for test googletest popup window Under type filter text disclose C C Build and select Tool Chain Editor In the Current builder pull down list select Gnu Make Builder The Properties for test googletest popup window should appear as shown below Click Apply Under type filter text disclose C C Build and select Settings Under the Tool Settings tab under GCC C Compiler select Miscellaneous In the Other flags textbox type std gnu 11 at the end Click Apply Under the Tool Settings tab under GCC C Compiler select Includes In the Include paths I pane click the add icon In the Add directory path popup window click the File system button In the Browse For Folder popup window navigate to and select the include folder in the googletestlib folder in the Eclipse workspace Click OK in the Browse For Folder popup window Click OK in the Add directory path popup window The Properties for test googletest popup window should appear as follows your folder names may be a bit different Click Apply Under the Tool Settings tab under MinGW C Linker select Libraries In the Libraries l pane click the add icon In the Enter Value popup window enter gtest in the textbox Click OK in the Enter Value popup window In the Library search path L pane click the add icon In the Add directory path popup window click the File system button In the Browse For Folder popup window navigate to and select the make folder in the googletestlib folder in the Eclipse workspace Click OK in the Browse For Folder popup window Click OK in the Add directory path popup window The Properties for test googletest popup window should appear as follows your folder names may be a bit different Click Apply Elide C C Build then select C C Build In the Builder section uncheck the Use default build command In the Builder section in the Build command textbox enter mingw32 make replacing make The Properties for test googletest popup window should appear as follows Click Apply Click OK Disclose the test googletest icon in the Project Explorer Disclose the src icon in the Project Explorer which appears as follows Examine the counter files both hpp and cpp which describe a trivial class The test counter cpp is the code that is run by GoogleTest Double click the test counter cpp icon The test counter cpp editor tab appears as follows ignore the errors Either click the Hammer icon or right click in the test googletest icon in the Project Explorer tabl and select Build Project The Console window should show the following Either click the Run icon or right click in the test counter cpp editor tab and select select Run As 1 Local C C Application illustrated below The program should begin running and the Console window should show the following The output shows passed and failed tests Examine the counter files both hpp and cpp which describe a trivial class and the test counter cpp which contains the code that is run by GoogleTest to see why the first test passed and the second one failed ", "_id": "http://www.ics.uci.edu/~pattis/common/modules46/googletest.html", "title": "googletest installation and use in eclipse/c++ instructions", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>GoogleTest Installation and Use in Eclipse/C++ Instructions</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>GoogleTest Installation for Eclipse/C++ Instructions</h1>\r\n<p>\r\n</center>\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\nThese instructions review how to install the GoogleTest unit testing\r\n  framework library folder (<b>googletestlib</b>) in Eclipse/C++.\r\nThen they explain how to create a project that uses the library.\r\nAt various times during the quarter you will be supplied with unit tests to\r\n  run on the code you are writing.\r\nWe often grade programs using these unit tests may be asked to replace various\r\n  <b>.hpp</b> or <b>.cpp</b> files and recompile the library.\r\n<p>\r\n<hr align=\"left\" width=\"100%\">\r\n\r\n<h3>Googletestlib Installation (Quick!)</h3>\r\n<ol>\r\n<li>PC:<br>Download and unzip the\r\n      <a href=\"googletestlib.zip\"><b>googletestlib.zip</b></a> file;\r\n    the result is a <b>googletestlib</b> folder.\r\n    <p>\r\n    Macs:<br>Download and unzip the\r\n      <a href=\"googletestlibmac.zip\"><b>googletestlibmac.zip</b></a> file;\r\n    the result is a <b>googletestlibmac</b> folder.\r\n    Rename the folder to be <b>googletestlib</b>.\r\n\r\n<p>\r\n\r\n<li>Locate the workspace folder \r\n      (typically <b>C:\\Users\\<i>yourname</i>\\workspace</b> for PCs)\r\n      and put the <b>googletestlib</b> folder you downloaded and unzipped into\r\n      this workspace folder.\r\n    This folder contains <b>.a</b> files (groups of <b>.o</b> files) that allow\r\n      us to perform unit tests easily on the code that we develop.\r\n</ol>\r\nThat's all there is to do!\r\nIf you are using the more general instructions, ultimately you need to have a\r\n  folder with the correct files in the <b>include</b> and <b>make</b> folders\r\n  for your system (which the above downloads supply).\r\n<p>\r\n\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\n\r\n<h3>Creating a Project that Uses the Googletestlib</h3>\r\n<ol>\r\n<li>Download and unzip the\r\n      <a href=\"test_googletest.zip\"><b>test_googletest.zip</b></a> file;\r\n    the result is a <b>googletest</b> folder.\r\n<p>\r\n\r\n<li>Put the <b>googletest</b> folder you downloaded and unzipped into\r\n     the workspace folder (mentioned above).\r\n\r\n<p>\r\n<li>Create a project from this folder.\r\nNormally you will perform the steps needed to ensure this program uses the\r\n  <b>courselib</b> correctly, but this simple test does not require these \r\n steps, so they are not included in this document.\r\n<p>\r\n\r\n<li>Right-click the <b>test_googletest</b> icon in the <b>Project Explorer</b>\r\n      tab.\r\n    <br>\r\n   Select <b>Properties</b> which appears at the bottom as follows.\r\n<p>\r\n\r\n<li>In the <b>Properties for test_googletest</b> popup window\r\n  <ul>\r\n    <li>Under <b>type filter text</b>, disclose <b>C/C++ Build</b> and\r\n          select <b>Tool Chain Editor</b>.\r\n    <li>In the <b>Current builder:</b> pull-down list, select\r\n          <b>Gnu Make Builder</b>.\r\n    <li>The <b>Properties for test_googletest</b> popup window should\r\n           appear as shown below.\r\n    <p>\r\n    <img src=\"images/gnubuilder.jpg\">\r\n    <p>\r\n    <li>Click <b>Apply</b>.\r\n    <p>\r\n\r\n    <li>Under <b>type filter text</b>, disclose <b>C/C++ Build</b> and\r\n          select <b>Settings</b>.\r\n    <li>Under the <b>Tool Settings</b> tab, under <b>GCC C++ Compiler</b>\r\n          select <b>Miscellaneous</b>.\r\n    <li>In the <b>Other flags</b> textbox, type <b>-std=gnu++11</b> at the\r\n          end.\r\n    <li>Click <b>Apply</b>.\r\n    <p>\r\n\r\n    <li>Under the <b>Tool Settings</b> tab, under <b>GCC C++ Compiler</b>\r\n          select <b>Includes</b>.\r\n    <li>In the <b>Include paths (-I)</b> pane,\r\n          click the <b>add</b> icon <img src=\"images/addicon.jpg\">.\r\n    <li>In the <b>Add directory path</b> popup window,\r\n          click the <b>File system...</b> button.\r\n    <li>In the <b>Browse For Folder</b> popup window,\r\n          navigate to and select the <b>include</b> folder in the\r\n          <b>googletestlib</b> folder in the Eclipse workspace.\r\n    <li>Click <b>OK</b> in the <b>Browse For Folder</b> popup window.\r\n    <li>Click <b>OK</b> in the <b>Add directory path</b> popup window.\r\n    <li>The <b>Properties for test_googletest</b> popup window should\r\n          appear as follows (your folder names may be a bit different).\r\n         <p>\r\n         <img src=\"images/includes3.jpg\">\r\n         <p>\r\n    <li>Click <b>Apply</b>.\r\n    <p>\r\n    <li>Under the <b>Tool Settings</b> tab, under <b>MinGW C++ Linker</b>\r\n          select <b>Libraries</b>.\r\n    <li>In the <b>Libraries (-l)</b> pane,\r\n          click the <b>add</b> icon <img src=\"images/addicon.jpg\">.\r\n    <li>In the <b>Enter Value</b> popup window,\r\n          enter <b>gtest</b> in the textbox.\r\n    <li>Click <b>OK</b> in the <b>Enter Value</b> popup window.\r\n    <p>\r\n    <li>In the <b>Library search path (-L)</b> pane,\r\n          click the <b>add</b> icon <img src=\"images/addicon.jpg\">.\r\n    <li>In the <b>Add directory path</b> popup window,\r\n         click the <b>File system...</b> button.\r\n    <li>In the <b>Browse For Folder</b> popup window,\r\n          navigate to and select the <b>make</b> folder in the\r\n          <b>googletestlib</b> folder in the Eclipse workspace.\r\n    <li>Click <b>OK</b> in the <b>Browse For Folder</b> popup window.\r\n    <li>Click <b>OK</b> in the <b>Add directory path</b> popup window.\r\n    <li>The <b>Properties for test_googletest</b> popup window should\r\n          appear as follows (your folder names may be a bit different).\r\n          <p>\r\n          <img src=\"images/libraries3.jpg\">\r\n          <p>\r\n        <li>Click <b>Apply</b>.\r\n    <p>\r\n        \r\n    <li>Elide <b>C/C++ Build</b> then select <b>C/C++ Build</b>.\r\n    <li>In the Builder section, uncheck the \"Use default build command\".\r\n    <li>In the Builder section, in the <b>Build command:</b> textbox\r\n          enter <b>mingw32-make</b> (replacing <b>make</b>).\r\n    <li>The <b>Properties for test_googletest</b> popup window should\r\n          appear as follows.\r\n        <p>\r\n        <img src=\"images/nodefaultbuild.jpg\">\r\n        <p>\r\n     <li>Click <b>Apply</b>.\r\n     <li>Click <b>OK</b>.\r\n  </ul>\r\n<p>\r\n\r\n<li>Disclose the <b>test_googletest</b> icon in the <b>Project Explorer</b>.<br>\r\n    Disclose the <b>src</b> icon in the <b>Project Explorer</b>,  which appears\r\n       as follows.\r\n    <p>\r\n    <img src=\"images/testgoogletestdisclosed.jpg\">\r\n    <p>\r\n    Examine the <b>counter</b> files (both <b>.hpp</b> and <b>.cpp</b>), which\r\n      describe a trivial class.\r\n    The <b>test_counter.cpp</b> is the code that is run by GoogleTest.\r\n\r\n<li>Double-click the <b>test_counter.cpp</b> icon.\r\nThe <b>test_counter.cpp</b> editor tab appears as follows (ignore the errors).\r\n    <p>\r\n    <img src=\"images/testeditor.jpg\">\r\n    <p>\r\n\r\n\r\n<li>Either click the <b>Hammer</b> icon <img src=\"images/hammer.jpg\"> or \r\n      right-click in the <b>test_googletest</b> icon in the\r\n      <b>Project Explorer</b>\r\n      tabl and select <b>Build Project</b>.\r\n    The Console window should show the following.\r\n    <p>\r\n    <img src=\"images/buildresultsprogram2.jpg\">\r\n    <p>\r\n\r\n<li>Either click the <b>Run</b> icon <img src=\"images/run.jpg\"> or \r\n      right-click in the <b>test_counter.cpp</b> editor tab and select\r\n      select <b>Run As | 1 Local C/C++ Application</b> illustrated below.\r\n    <br>\r\n    <img src=\"images/runas.jpg\">\r\n    <p>\r\n    The program should begin running and the Console window should show the\r\n      following.\r\n    <p>\r\n    <img src=\"images/googletestrun.jpg\">\r\n    <p>\r\n    The output shows passed and failed tests.\r\n    Examine the <b>counter</b> files (both <b>.hpp</b> and <b>.cpp</b>), which\r\n      describe a trivial class, and the <b>test_counter.cpp</b> which contains\r\n      the code that is run by GoogleTest to see why the first test passed and\r\n      the second one failed.\r\n</ol>\r\n<p>\r\n<hr align=\"left\" width=\"100%\">\r\n<p>\r\n\r\n</body>\r\n</html>\r\n\r\n", "id": 10588.0}