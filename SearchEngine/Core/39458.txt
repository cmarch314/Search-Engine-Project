{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Filtered predicate EP FP C2E C2F Definition Filtered predicate EP FP C2E C2F is an adaptor for predicate function objects that allows one to produce efficient and exact predicates It is used to build CGAL Filtered kernel CK EK FK C2E C2F and can be used for other predicates too EP is the exact but supposedly slow predicate that is able to evaluate the predicate correctly It will be called only when the filtering predicate FP cannot compute the correct result This failure of FP must be done by throwing an exception To convert the geometric objects that are the arguments of the predicate we use the function objects C2E and C2F which must be of the form Cartesian converter or Homogeneous converter include CGAL Filtered predicate h Types typedef FP result type result type The return type of the function operators It must also be the same type as EP result type Creation Filtered predicate EP FP C2E C2F fo Default constructor Operations template class A1 result type fo operator A1 a1 The unary function operator for unary predicates template class A1 class A2 result type fo operator A1 a1 A2 a2 The binary function operator for binary predicates Similar function operators are defined for up to 7 arguments Example The following example defines an efficient and exact version of the orientation predicate over three points using the Cartesian representation with double coordinates and without reference counting Simple cartesian double Point 2 Of course the orientation predicate can already be found in the kernel but you can follow this example to filter your own predicates It uses the fast but inexact predicate based on interval arithmetic for filtering and the slow but exact predicate based on multi precision floats when the filtering predicate fails include CGAL Simple cartesian h include CGAL Filtered predicate h include CGAL MP Float h include CGAL Cartesian converter h typedef CGAL Simple cartesian double K typedef CGAL Simple cartesian CGAL Interval nt advanced FK typedef CGAL Simple cartesian CGAL MP Float EK typedef CGAL Cartesian converter K EK C2E typedef CGAL Cartesian converter K FK C2F Define my predicate parameterized by a kernel template typename K struct My orientation 2 typedef typename K RT RT typedef typename K Point 2 Point 2 CGAL Orientation operator const Point 2 p const Point 2 q const Point 2 r const RT prx p x r x RT pry p y r y RT qrx q x r x RT qry q y r y return static cast CGAL Orientation CGAL sign prx qry qrx pqy typedef CGAL Filtered predicate My orientation 2 EK My orientation 2 FK C2E C2F Orientation 2 int main K Point 2 p 1 2 q 2 3 r 3 4 Orientation 2 orientation orientation p q r return Next Homogeneous RingNumberType Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Filtered_predicate.html", "title": "filtered_predicate&lt;ep, fp, c2e, c2f&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Filtered_predicate.tex' -->\n<html> <head>  \n<title>Filtered_predicate&lt;EP, FP, C2E, C2F&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_15\"></A>\n\n<A NAME=\"Cross_link_anchor_16\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_29\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Filtered_predicate<EP, FP, C2E, C2F>\"></A>\n<h2><I>CGAL::Filtered_predicate&lt;EP, FP, C2E, C2F&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\n<I><A HREF=\"Class_Filtered_predicate.html#Cross_link_anchor_16\">Filtered_predicate</A>&lt;EP, FP, C2E, C2F&gt;</I>is an adaptor for predicate function objects that allows\none to produce efficient and exact predicates.  It is used to build\n<I><A HREF=\"Class_Filtered_kernel.html#Cross_link_anchor_11\">CGAL::Filtered_kernel</A>&lt;CK, EK, FK, C2E, C2F&gt;</I> and can be used for other\npredicates too.\n<P>\n\n<I>EP</I> is the exact but supposedly slow predicate that is able to evaluate\nthe predicate correctly.  It will be called only when the filtering predicate,\n<I>FP</I>, cannot compute the correct result.  This failure of <I>FP</I> must be\ndone by throwing an exception.\n<P>\n\nTo convert the geometric objects that are the arguments of the predicate,\nwe use the function objects <I>C2E</I> and <I>C2F</I>, which must be of the form\n<I><A HREF=\"Class_Cartesian_converter.html#Cross_link_anchor_8\">Cartesian_converter</A></I> or <I><A HREF=\"Class_Homogeneous_converter.html#Cross_link_anchor_20\">Homogeneous_converter</A></I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Filtered_predicate.h\">CGAL/Filtered_predicate.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_result_type\"></A>\n<A NAME=\"Typedef_result_type\"></A>\ntypedef FP::result_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    result_type;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The return type of the function operators.\n  It must also be the same type as <I>EP::result_type</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Filtered_predicate.html#Cross_link_anchor_16\">Filtered_predicate</A>&lt;EP, FP, C2E, C2F&gt; fo;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Default constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class A1&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    result_type<A NAME=\"Function_result_type_operator696A1_a19;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    fo.operator() ( A1 a1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The unary function operator for unary predicates.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class A1, class A2&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    result_type<A NAME=\"Function_result_type_operator696A1_a1+_A2_a29;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    fo.operator() ( A1 a1,  A2 a2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The binary function operator for binary predicates.\n        </TD></TR>\n        </TABLE>\n<P>\n\nSimilar function operators are defined for up to 7 arguments.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following example defines an efficient and exact version of the\n<A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A> predicate over three points using the <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> representation\nwith double coordinates and without reference counting\n(<I><A HREF=\"Class_Simple_cartesian.html#Cross_link_anchor_30\">Simple_cartesian</A>&lt;double&gt;::<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>).\nOf course, the <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A> predicate can already be found in the kernel, but\nyou can follow this example to filter your own predicates.\nIt uses the fast but inexact predicate based on interval arithmetic for\nfiltering and the slow but exact predicate based on multi-precision floats\nwhen the filtering predicate fails.\n<P>\n\n<pre class=\"Verbatim\">\n#include &lt;CGAL/<A HREF=\"Class_Simple_cartesian.html#Cross_link_anchor_30\">Simple_cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Filtered_predicate.html#Cross_link_anchor_16\">Filtered_predicate</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1400\">MP_Float</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Cartesian_converter.html#Cross_link_anchor_8\">Cartesian_converter</A>.h&gt;\n\ntypedef <A HREF=\"Class_Simple_cartesian.html#Cross_link_anchor_29\">CGAL::Simple_cartesian</A>&lt;double&gt; K;\ntypedef <A HREF=\"Class_Simple_cartesian.html#Cross_link_anchor_29\">CGAL::Simple_cartesian</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_Interval_nt_advanced.html#Cross_link_anchor_1367\">CGAL::Interval_nt_advanced</A>&gt; FK;\ntypedef <A HREF=\"Class_Simple_cartesian.html#Cross_link_anchor_29\">CGAL::Simple_cartesian</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A>&gt; EK;\ntypedef <A HREF=\"Class_Cartesian_converter.html#Cross_link_anchor_7\">CGAL::Cartesian_converter</A>&lt;K, EK&gt; C2E;\ntypedef <A HREF=\"Class_Cartesian_converter.html#Cross_link_anchor_7\">CGAL::Cartesian_converter</A>&lt;K, FK&gt; C2F;\n\n// Define my predicate, parameterized by a kernel.\ntemplate &lt; typename K &gt;\nstruct My_orientation_2\n{\n  typedef typename K::RT       RT;\n  typedef typename K::<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\n\n  <A HREF=\"Enum_Orientation.html#Cross_link_anchor_113\">CGAL::Orientation</A>\n  operator()(const <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &amp;p, const <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &amp;q, const <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &amp;r) const\n  {\n    RT prx = p.x() - r.x();\n    RT pry = p.y() - r.y();\n    RT qrx = q.x() - r.x();\n    RT qry = q.y() - r.y();\n    return static_cast&lt;<A HREF=\"Enum_Orientation.html#Cross_link_anchor_113\">CGAL::Orientation</A>&gt; ( <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1409\">CGAL::sign</A>( prx*qry - qrx*pqy ) );\n  }\n};\n\ntypedef <A HREF=\"Class_Filtered_predicate.html#Cross_link_anchor_15\">CGAL::Filtered_predicate</A>&lt;My_orientation_2&lt;EK&gt;,\n                                 My_orientation_2&lt;FK&gt;, C2E, C2F&gt; Orientation_2;\n\nint main()\n{\n  K::<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p(1,2), q(2,3), r(3,4);\n  Orientation_2 <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A>;\n  <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A>(p, q, r);\n  return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Homogeneous.html\"><I>Homogeneous&lt;RingNumberType&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39458.0}