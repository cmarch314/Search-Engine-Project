{"text": "Main Page Modules Data Structures File List Data Fields Globals Related Pages routines h File ReferenceHeader file for front end auxiliary routines More include apbscfg h include apbs apbs h include apbs nosh h include apbs mgparm h include apbs pbeparm h include apbs femparm h Include dependency graph for routines h Go to the source code of this file Data Structuresstruct AtomForce Structure to hold atomic forces More Defines define APBSRC 13 Return code for APBS during failure define USEHB 1 Set this macro to 1 for hierarchical basis for normal solver Typedefs typedef AtomForce AtomForce Define AtomForce type Functionsint loadMolecules NOsh nosh Valist alist NOSH MAXMOL Load the molecules given in NOsh into atom lists void killMolecules NOsh nosh Valist alist NOSH MAXMOL Destroy the loaded molecules int loadDielMaps NOsh nosh Vgrid dielXMap NOSH MAXMOL Vgrid dielYMap NOSH MAXMOL Vgrid dielZMap NOSH MAXMOL Load the dielectric maps given in NOsh into grid objects void killDielMaps NOsh nosh Vgrid dielXMap NOSH MAXMOL Vgrid dielYMap NOSH MAXMOL Vgrid dielZMap NOSH MAXMOL Destroy the loaded dielectric int loadKappaMaps NOsh nosh Vgrid kappa NOSH MAXMOL Load the kappa maps given in NOsh into grid objects void killKappaMaps NOsh nosh Vgrid kappa NOSH MAXMOL Destroy the loaded kappa maps int loadChargeMaps NOsh nosh Vgrid charge NOSH MAXMOL Load the charge maps given in NOsh into grid objects void killChargeMaps NOsh nosh Vgrid charge NOSH MAXMOL Destroy the loaded charge maps void printPBEPARM PBEparm pbeparm Print out generic PBE params loaded from input void printMGPARM MGparm mgparm double realCenter 3 Print out MG specific params loaded from input int initMG int icalc NOsh nosh MGparm mgparm PBEparm pbeparm double realCenter 3 Vpbe pbe NOSH MAXCALC Valist alist NOSH MAXMOL Vgrid dielXMap NOSH MAXMOL Vgrid dielYMap NOSH MAXMOL Vgrid dielZMap NOSH MAXMOL Vgrid kappaMap NOSH MAXMOL Vgrid chargeMap NOSH MAXMOL Vpmgp pmgp NOSH MAXCALC Vpmg pmg NOSH MAXCALC Initialize an MG calculation void killMG NOsh nosh Vpbe pbe NOSH MAXCALC Vpmgp pmgp NOSH MAXCALC Vpmg pmg NOSH MAXCALC Kill structures initialized during an MG calculation int solveMG NOsh nosh Vpmg pmg MGparm CalcType type Solve the PBE with MG int setPartMG NOsh nosh MGparm mgparm Vpmg pmg Set MG partitions for calculating observables and performing I O int energyMG NOsh nosh int icalc Vpmg pmg int nenergy double totEnergy double qfEnergy double qmEnergy double dielEnergy Calculate electrostatic energies from MG solution int npenergyMG NOsh nosh int icalc Vpmg pmg int nenergy double npEnergy Calculate apolar energies from MG solution void killEnergy Kill arrays allocated for energies int forceMG Vmem mem NOsh nosh PBEparm pbeparm MGparm mgparm Vpmg pmg int nforce AtomForce atomForce Valist alist NOSH MAXMOL Calculate forces from MG solution void killForce Vmem mem NOsh nosh int nforce NOSH MAXCALC AtomForce atomForce NOSH MAXCALC Free memory from MG force calculation int writedataMG int rank NOsh nosh PBEparm pbeparm Vpmg pmg Write out observables from MG calculation to file int writematMG int rank NOsh nosh PBEparm pbeparm Vpmg pmg Write out operator matrix from MG calculation to file int printEnergy Vcom com NOsh nosh double totEnergy NOSH MAXCALC int i Combine and pretty print energy data int printForce Vcom com NOsh nosh int nforce NOSH MAXCALC AtomForce atomForce NOSH MAXCALC int i Combine and pretty print force data void startVio Wrapper to start MALOC Vio layer void printFEPARM int icalc NOsh nosh FEMparm feparm Vfetk fetk NOSH MAXCALC Print out FE specific params loaded from input int energyFE NOsh nosh int icalc Vfetk fetk NOSH MAXCALC int nenergy double totEnergy double qfEnergy double qmEnergy double dielEnergy Calculate electrostatic energies from FE solution int initFE int icalc NOsh nosh FEMparm feparm PBEparm pbeparm Vpbe pbe NOSH MAXCALC Valist alist NOSH MAXMOL Vfetk fetk NOSH MAXCALC Initialize FE solver objects int preRefineFE int i NOsh nosh FEMparm feparm Vfetk fetk NOSH MAXCALC Pre refine mesh before solve int partFE int i NOsh nosh FEMparm feparm Vfetk fetk NOSH MAXCALC Partition mesh if applicable int solveFE int i NOsh nosh PBEparm pbeparm FEMparm feparm Vfetk fetk NOSH MAXCALC Solve estimate refine int postRefineFE int icalc NOsh nosh FEMparm feparm Vfetk fetk NOSH MAXCALC Estimate error mark mesh and refine mesh after solve int writedataFE int rank NOsh nosh PBEparm pbeparm Vfetk fetk Write FEM data to files Detailed Description Header file for front end auxiliary routines Author Nathan Baker Version Idroutines h v 1 26 2 4 1 19 21 1 3 apbs Exp Attention APBS Adaptive Poisson Boltzmann Solver Nathan A Baker baker biochem wustl edu Dept of Biochemistry and Molecular Biophysics Center for Computational Biology Washington University in St Louis Additional contributing authors listed in the code documentation Copyright c 2 2 2 5 Washington University in St Louis All Rights Reserved Portions Copyright c 1999 2 2 The Regents of the University of California Portions Copyright c 1995 Michael Holst This file is part of APBS APBS is free software you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 2 of the License or at your option any later version APBS is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU General Public License for more details You should have received a copy of the GNU General Public License along with APBS if not write to the Free Software Foundation Inc 59 Temple Place Suite 33 Boston MA 2111 13 7 USA Generated on Tue Dec 6 1 5 37 2 5 for APBS by 1 3 5", "_id": "http://www.ics.uci.edu/~dock/manuals/apbs/html/programmer/routines_8h.html", "title": "apbs: routines.h file reference", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">\n<title>APBS: routines.h File Reference</title>\n<link href=\"apbs.css\" rel=\"stylesheet\" type=\"text/css\">\n</head><body>\n<!-- Generated by Doxygen 1.3.5 -->\n<div class=\"qindex\"><a class=\"qindex\" href=\"index.html\">Main&nbsp;Page</a> | <a class=\"qindex\" href=\"modules.html\">Modules</a> | <a class=\"qindex\" href=\"annotated.html\">Data&nbsp;Structures</a> | <a class=\"qindex\" href=\"files.html\">File&nbsp;List</a> | <a class=\"qindex\" href=\"functions.html\">Data&nbsp;Fields</a> | <a class=\"qindex\" href=\"globals.html\">Globals</a> | <a class=\"qindex\" href=\"pages.html\">Related&nbsp;Pages</a></div>\n<h1>routines.h File Reference</h1>Header file for front end auxiliary routines.  \n<a href=\"#_details\">More...</a>\n<p>\n<code>#include \"apbscfg.h\"</code><br>\n<code>#include \"<a class=\"el\" href=\"apbs_8h-source.html\">apbs/apbs.h</a>\"</code><br>\n<code>#include \"<a class=\"el\" href=\"nosh_8h-source.html\">apbs/nosh.h</a>\"</code><br>\n<code>#include \"<a class=\"el\" href=\"mgparm_8h-source.html\">apbs/mgparm.h</a>\"</code><br>\n<code>#include \"<a class=\"el\" href=\"pbeparm_8h-source.html\">apbs/pbeparm.h</a>\"</code><br>\n<code>#include \"<a class=\"el\" href=\"femparm_8h-source.html\">apbs/femparm.h</a>\"</code><br>\n\n<p>\nInclude dependency graph for routines.h:<p><center><img src=\"routines_8h__incl.png\" border=\"0\" usemap=\"#routines.h_map\" alt=\"Include dependency graph\"></center>\n<map name=\"routines.h_map\">\n<area href=\"apbs_8h.html\" shape=\"rect\" coords=\"296,157,389,181\" alt=\"\">\n<area href=\"femparm_8h.html\" shape=\"rect\" coords=\"116,8,233,32\" alt=\"\">\n<area href=\"nosh_8h.html\" shape=\"rect\" coords=\"212,83,305,107\" alt=\"\">\n<area href=\"mgparm_8h.html\" shape=\"rect\" coords=\"412,8,527,32\" alt=\"\">\n<area href=\"pbeparm_8h.html\" shape=\"rect\" coords=\"271,8,388,32\" alt=\"\">\n</map>\n\n<p>\n<a href=\"routines_8h-source.html\">Go to the source code of this file.</a><table border=0 cellpadding=0 cellspacing=0>\n<tr><td></td></tr>\n<tr><td colspan=2><br><h2>Data Structures</h2></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>struct &nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"structAtomForce.html\">AtomForce</a></td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Structure to hold atomic forces. </em> <a href=\"structAtomForce.html#_details\">More...</a><em><br><br></td></tr>\n<tr><td colspan=2><br><h2>Defines</h2></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top><a class=\"anchor\" name=\"ga33\" doxytag=\"routines.h::APBSRC\" ></a>\n#define&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga33\">APBSRC</a>&nbsp;&nbsp;&nbsp;13</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Return code for APBS during failure. <br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top><a class=\"anchor\" name=\"ga34\" doxytag=\"routines.h::USEHB\" ></a>\n#define&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga34\">USEHB</a>&nbsp;&nbsp;&nbsp;1</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Set this macro to 1 for hierarchical basis, 0 for normal solver. <br><br></td></tr>\n<tr><td colspan=2><br><h2>Typedefs</h2></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top><a class=\"anchor\" name=\"ga0\" doxytag=\"routines.h::AtomForce\" ></a>\ntypedef <a class=\"el\" href=\"structAtomForce.html\">AtomForce</a>&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga0\">AtomForce</a></td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Define <a class=\"el\" href=\"structAtomForce.html\">AtomForce</a> type. <br><br></td></tr>\n<tr><td colspan=2><br><h2>Functions</h2></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga1\">loadMolecules</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsValist.html\">Valist</a> *alist[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Load the molecules given in NOsh into atom lists.  <a href=\"group__Frontend.html#ga1\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga2\">killMolecules</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsValist.html\">Valist</a> *alist[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Destroy the loaded molecules.  <a href=\"group__Frontend.html#ga2\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga3\">loadDielMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielXMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielYMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielZMap[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Load the dielectric maps given in NOsh into grid objects.  <a href=\"group__Frontend.html#ga3\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga4\">killDielMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielXMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielYMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielZMap[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Destroy the loaded dielectric.  <a href=\"group__Frontend.html#ga4\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga5\">loadKappaMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *kappa[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Load the kappa maps given in NOsh into grid objects.  <a href=\"group__Frontend.html#ga5\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga6\">killKappaMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *kappa[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Destroy the loaded kappa maps.  <a href=\"group__Frontend.html#ga6\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga7\">loadChargeMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *charge[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Load the charge maps given in NOsh into grid objects.  <a href=\"group__Frontend.html#ga7\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga8\">killChargeMaps</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *charge[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Destroy the loaded charge maps.  <a href=\"group__Frontend.html#ga8\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga9\">printPBEPARM</a> (<a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Print out generic PBE params loaded from input.  <a href=\"group__Frontend.html#ga9\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga10\">printMGPARM</a> (<a class=\"el\" href=\"structsMGparm.html\">MGparm</a> *mgparm, double realCenter[3])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Print out MG-specific params loaded from input.  <a href=\"group__Frontend.html#ga10\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga11\">initMG</a> (int icalc, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsMGparm.html\">MGparm</a> *mgparm, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, double realCenter[3], <a class=\"el\" href=\"structsVpbe.html\">Vpbe</a> *pbe[NOSH_MAXCALC], <a class=\"el\" href=\"structsValist.html\">Valist</a> *alist[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielXMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielYMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *dielZMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *kappaMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVgrid.html\">Vgrid</a> *chargeMap[NOSH_MAXMOL], <a class=\"el\" href=\"structsVpmgp.html\">Vpmgp</a> *pmgp[NOSH_MAXCALC], <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Initialize an MG calculation.  <a href=\"group__Frontend.html#ga11\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga12\">killMG</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVpbe.html\">Vpbe</a> *pbe[NOSH_MAXCALC], <a class=\"el\" href=\"structsVpmgp.html\">Vpmgp</a> *pmgp[NOSH_MAXCALC], <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Kill structures initialized during an MG calculation.  <a href=\"group__Frontend.html#ga12\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga13\">solveMG</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg, <a class=\"el\" href=\"group__MGparm.html#ga0\">MGparm_CalcType</a> type)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Solve the PBE with MG.  <a href=\"group__Frontend.html#ga13\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga14\">setPartMG</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsMGparm.html\">MGparm</a> *mgparm, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Set MG partitions for calculating observables and performing I/O.  <a href=\"group__Frontend.html#ga14\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga15\">energyMG</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, int icalc, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg, int *nenergy, double *totEnergy, double *qfEnergy, double *qmEnergy, double *dielEnergy)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Calculate electrostatic energies from MG solution.  <a href=\"group__Frontend.html#ga15\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga16\">npenergyMG</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, int icalc, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg, int *nenergy, double *npEnergy)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Calculate apolar energies from MG solution.  <a href=\"group__Frontend.html#ga16\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga17\">killEnergy</a> ()</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Kill arrays allocated for energies.  <a href=\"group__Frontend.html#ga17\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga18\">forceMG</a> (Vmem *mem, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsMGparm.html\">MGparm</a> *mgparm, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg, int *nforce, <a class=\"el\" href=\"structAtomForce.html\">AtomForce</a> **atomForce, <a class=\"el\" href=\"structsValist.html\">Valist</a> *alist[NOSH_MAXMOL])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Calculate forces from MG solution.  <a href=\"group__Frontend.html#ga18\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga19\">killForce</a> (Vmem *mem, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, int nforce[NOSH_MAXCALC], <a class=\"el\" href=\"structAtomForce.html\">AtomForce</a> *atomForce[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Free memory from MG force calculation.  <a href=\"group__Frontend.html#ga19\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga20\">writedataMG</a> (int rank, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Write out observables from MG calculation to file.  <a href=\"group__Frontend.html#ga20\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga21\">writematMG</a> (int rank, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsVpmg.html\">Vpmg</a> *pmg)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Write out operator matrix from MG calculation to file.  <a href=\"group__Frontend.html#ga21\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga22\">printEnergy</a> (Vcom *com, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, double totEnergy[NOSH_MAXCALC], int i)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Combine and pretty-print energy data.  <a href=\"group__Frontend.html#ga22\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga23\">printForce</a> (Vcom *com, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, int nforce[NOSH_MAXCALC], <a class=\"el\" href=\"structAtomForce.html\">AtomForce</a> *atomForce[NOSH_MAXCALC], int i)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Combine and pretty-print force data.  <a href=\"group__Frontend.html#ga23\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga24\">startVio</a> ()</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Wrapper to start MALOC Vio layer.  <a href=\"group__Frontend.html#ga24\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>void&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga25\">printFEPARM</a> (int icalc, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Print out FE-specific params loaded from input.  <a href=\"group__Frontend.html#ga25\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga26\">energyFE</a> (<a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, int icalc, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC], int *nenergy, double *totEnergy, double *qfEnergy, double *qmEnergy, double *dielEnergy)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Calculate electrostatic energies from FE solution.  <a href=\"group__Frontend.html#ga26\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga27\">initFE</a> (int icalc, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsVpbe.html\">Vpbe</a> *pbe[NOSH_MAXCALC], <a class=\"el\" href=\"structsValist.html\">Valist</a> *alist[NOSH_MAXMOL], <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Initialize FE solver objects.  <a href=\"group__Frontend.html#ga27\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga28\">preRefineFE</a> (int i, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Pre-refine mesh before solve.  <a href=\"group__Frontend.html#ga28\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga29\">partFE</a> (int i, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Partition mesh (if applicable).  <a href=\"group__Frontend.html#ga29\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga30\">solveFE</a> (int i, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Solve-estimate-refine.  <a href=\"group__Frontend.html#ga30\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga31\">postRefineFE</a> (int icalc, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsFEMparm.html\">FEMparm</a> *feparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk[NOSH_MAXCALC])</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Estimate error, mark mesh, and refine mesh after solve.  <a href=\"group__Frontend.html#ga31\"></a><br><br></td></tr>\n<tr><td class=\"memItemLeft\" nowrap align=right valign=top>int&nbsp;</td><td class=\"memItemRight\" valign=bottom><a class=\"el\" href=\"group__Frontend.html#ga32\">writedataFE</a> (int rank, <a class=\"el\" href=\"structsNOsh.html\">NOsh</a> *nosh, <a class=\"el\" href=\"structsPBEparm.html\">PBEparm</a> *pbeparm, <a class=\"el\" href=\"structsVfetk.html\">Vfetk</a> *fetk)</td></tr>\n\n<tr><td class=\"mdescLeft\">&nbsp;</td><td class=\"mdescRight\">Write FEM data to files.  <a href=\"group__Frontend.html#ga32\"></a><br><br></td></tr>\n</table>\n<hr><a name=\"_details\"></a><h2>Detailed Description</h2>\nHeader file for front end auxiliary routines. \n<p>\n<dl compact><dt><b>Author:</b></dt><dd>Nathan Baker </dd></dl>\n<dl compact><dt><b>Version:</b></dt><dd><dl compact><dt><b>Id</b></dt><dd><a class=\"el\" href=\"routines_8h.html\">routines.h</a>,v 1.26 2004/01/19 21:01:30 apbs Exp </dd></dl>\n</dd></dl>\n<dl compact><dt><b>Attention:</b></dt><dd><div class=\"fragment\"><pre>\n *\n * APBS -- Adaptive Poisson-Boltzmann Solver\n *\n * Nathan A. Baker (baker@biochem.wustl.edu)\n * Dept. of Biochemistry and Molecular Biophysics\n * Center for Computational Biology\n * Washington University in St. Louis\n *\n * Additional contributing authors listed in the code documentation.\n *\n * Copyright (c) 2002-2005.  Washington University in St. Louis.\n * All Rights Reserved.\n * Portions Copyright (c) 1999-2002.  The Regents of the University of\n * California.  \n * Portions Copyright (c) 1995.  Michael Holst.\n *\n * This file is part of APBS.\n *\n * APBS is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * APBS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with APBS; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA\n *\n * </pre></div></dd></dl>\n<hr size=\"1\"><address style=\"align: right;\"><small>Generated on Tue Dec 6 10:05:37 2005 for APBS by\n<a href=\"http://www.doxygen.org/index.html\">\n<img src=\"doxygen.png\" alt=\"doxygen\" align=\"middle\" border=0 > \n</a>1.3.5 </small></address>\n</body>\n</html>\n", "id": 40168.0}