{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src zope interface interfaces py View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 23 5 KB Line 1 2 3 Copyright c 2 2 Zope Corporation and Contributors 4 All Rights Reserved 5 6 This software is subject to the provisions of the Zope Public License 7 Version 2 1 ZPL A copy of the ZPL should accompany this distribution 8 THIS SOFTWARE IS PROVIDED AS IS AND ANY AND ALL EXPRESS OR IMPLIED9 WARRANTIES ARE DISCLAIMED INCLUDING BUT NOT LIMITED TO THE IMPLIED1 WARRANTIES OF TITLE MERCHANTABILITY AGAINST INFRINGEMENT AND FITNESS11 FOR A PARTICULAR PURPOSE 12 13 14 Interface Package Interfaces1516 Id interfaces py 678 3 2 6 5 1 15 2 47Z jim 17 18 docformat restructuredtext 192 21from zope interface import Interface22from zope interface interface import Attribute2324class IElement Interface 25 Objects that have basic documentation and tagged values 26 2728 name Attribute name The object name 29 doc Attribute doc The object doc string 3 31 def getTaggedValue tag 32 Returns the value associated with tag 3334 Raise a KeyError of the tag isn t set 35 3637 def queryTaggedValue tag default None 38 Returns the value associated with tag 394 Return the default value of the tag isn t set 41 4243 def getTaggedValueTags 44 Returns a list of all tags 4546 def setTaggedValue tag value 47 Associates value with key 48495 class IAttribute IElement 51 Attribute descriptors 5253 interface Attribute interface 54 Stores the interface instance in which the 55 attribute is located 565758class IMethod IAttribute 59 Method attributes 6 61 def getSignatureInfo 62 Returns the signature information 6364 This method returns a dictionary with the following keys 6566 o positional All positional arguments 6768 o required A list of all required arguments 697 o optional A list of all optional arguments 7172 o varargs The name of the varargs argument 7374 o kwargs The name of the kwargs argument 75 7677 def getSignatureString 78 Return a signature string suitable for inclusion in documentation 798 This method returns the function signature string For example if you81 have func a b c 1 d f then the signature string is a b 82 c 1 d f 83 8485class ISpecification Interface 86 Object Behavioral specifications 8788 def extends other strict True 89 Test whether a specification extends another9 91 The specification extends other if it has other as a base92 interface or if one of it s bases extends other 9394 If strict is false then the specification extends itself 95 9697 def isOrExtends other 98 Test whether the specification is or extends another99 1 1 1 def weakref callback None 1 2 Return a weakref to the specification1 31 4 This method is regrettably needed to allow weakrefs to be1 5 computed to security proxied specifications While the1 6 zope interface package does not require zope security or1 7 zope proxy it has to be able to coexist with it 1 81 9 11 111 bases Attribute Base specifications112113 A tuple if specifications from which this specification is114 directly derived 115116 117118 sro Attribute Specification resolution order11912 A tuple of the specification and all of it s ancestor121 specifications from most specific to least specific 122123 This is similar to the method resolution order for new style classes 124 125126 def get name default None 127 Look up the description for a name128129 If the named attribute is not defined the default is13 returned 131 132133134class IInterface ISpecification IElement 135 Interface objects136137 Interface objects describe the behavior of an object by containing138 useful information about the object This information includes 13914 o Prose documentation about the object In Python terms this141 is called the doc string of the interface In this element 142 you describe how the object works in prose language and any143 other useful information about the object 144145 o Descriptions of attributes Attribute descriptions include146 the name of the attribute and prose documentation describing147 the attributes usage 148149 o Descriptions of methods Method descriptions can include 15 151 Prose doc string documentation about the method and its152 usage 153154 A description of the methods arguments how many arguments155 are expected optional arguments and their default values 156 the position or arguments in the signature whether the157 method accepts arbitrary arguments and whether the method158 accepts arbitrary keyword arguments 15916 o Optional tagged data Interface objects and their attributes and161 methods can have optional application specific tagged data162 associated with them Examples uses for this are examples 163 security assertions pre post conditions and other possible164 information you may want to associate with an Interface or its165 attributes 166167 Not all of this information is mandatory For example you may168 only want the methods of your interface to have prose169 documentation and not describe the arguments of the method in17 exact detail Interface objects are flexible and let you give or171 take any of these components 172173 Interfaces are created with the Python class statement using174 either Interface Interface or another interface as in 175176 from zope interface import Interface177178 class IMyInterface Interface 179 Interface documentation 18 181 def meth arg1 arg2 182 Documentation for meth 183184 Note that there is no self argument185186 class IMySubInterface IMyInterface 187 Interface documentation 188189 def meth2 19 Documentation for meth2 191192 You use interfaces in two ways 193194 o You assert that your object implement the interfaces 195196 There are several ways that you can assert that an object197 implements an interface 198199 1 Call zope interface implements in your class definition 2 2 1 2 Call zope interfaces directlyProvides on your object 2 22 3 3 Call zope interface classImplements to assert that instances2 4 of a class implement an interface 2 52 6 For example 2 72 8 from zope interface import classImplements2 921 classImplements some class some interface 211212 This approach is useful when it is not an option to modify213 the class source Note that this doesn t affect what the214 class itself implements but only what its instances215 implement 216217 o You query interface meta data See the IInterface methods and218 attributes for details 21922 221222 def providedBy object 223 Test whether the interface is implemented by the object224225 Return true of the object asserts that it implements the226 interface including asserting that it implements an extended227 interface 228 22923 def implementedBy class 231 Test whether the interface is implemented by instances of the class232233 Return true of the class asserts that its instances implement the234 interface including asserting that they implement an extended235 interface 236 237238 def names all False 239 Get the interface attribute names24 241 Return a sequence of the names of the attributes including242 methods included in the interface definition 243244 Normally only directly defined attributes are included If245 a true positional or keyword argument is given then246 attributes defined by base classes will be included 247 248249 def namesAndDescriptions all False 25 Get the interface attribute names and descriptions251252 Return a sequence of the names and descriptions of the253 attributes including methods as name value pairs included254 in the interface definition 255256 Normally only directly defined attributes are included If257 a true positional or keyword argument is given then258 attributes defined by base classes will be included 259 26 261 def getitem name 262 Get the description for a name263264 If the named attribute is not defined a KeyError is raised 265 266267 def direct name 268 Get the description for the name if it was defined by the interface26927 If the interface doesn t define the name returns None 271 272273 def validateInvariants obj errors None 274 Validate invariants275276 Validate object to defined invariants If errors is None 277 raises first Invalid error if errors is a list appends all errors278 to list then raises Invalid with the errors as the first element279 of the args tuple 28 281 def contains name 282 Test whether the name is defined by the interface 283284 def iter 285 Return an iterator over the names defined by the interface286287 The names iterated include all of the names defined by the288 interface directly and indirectly by base interfaces 289 29 291 module Attribute The name of the module defining the interface 292293class IDeclaration ISpecification 294 Interface declaration295296 Declarations are used to express the interfaces implemented by297 classes or provided by objects 298 2993 def contains interface 3 1 Test whether an interface is in the specification3 23 3 Return true if the given interface is one of the interfaces in3 4 the specification and false otherwise 3 5 3 63 7 def iter 3 8 Return an iterator for the interfaces in the specification3 9 31 311 def flattened 312 Return an iterator of all included and extended interfaces313314 An iterator is returned for all interfaces either included in315 or extended by interfaces included in the specifications316 without duplicates The interfaces are in interface317 resolution order The interface resolution order is such that318 base interfaces are listed after interfaces that extend them319 and otherwise interfaces are included in the order that they32 were defined in the specification 321 322323 def sub interfaces 324 Create an interface specification with some interfaces excluded325326 The argument can be an interface or an interface327 specifications The interface or interfaces given in a328 specification are subtracted from the interface specification 32933 Removing an interface that is not in the specification does331 not raise an error Doing so has no effect 332333 Removing an interface also removes sub interfaces of the interface 334335 336337 def add interfaces 338 Create an interface specification with some interfaces added33934 The argument can be an interface or an interface341 specifications The interface or interfaces given in a342 specification are added to the interface specification 343344 Adding an interface that is already in the specification does345 not raise an error Doing so has no effect 346 347348 def nonzero 349 Return a true value of the interface specification is non empty35 351352class IInterfaceDeclaration Interface 353 Declare and check the interfaces of objects354355 The functions defined in this interface are used to declare the356 interfaces that objects provide and to query the interfaces that have357 been declared 358359 Interfaces can be declared for objects in two ways 36 361 Interfaces are declared for instances of the object s class362363 Interfaces are declared for the object directly 364365 The interfaces declared for an object are therefore the union of366 interfaces declared for the object directly and the interfaces367 declared for instances of the object s class 368369 Note that we say that a class implements the interfaces provided37 by it s instances An instance can also provide interfaces371 directly The interfaces provided by an object are the union of372 the interfaces provided directly and the interfaces implemented by373 the class 374 375376 def providedBy ob 377 Return the interfaces provided by an object378379 This is the union of the interfaces directly provided by an38 object and interfaces implemented by it s class 381382 The value returned is an IDeclaration 383 384385 def implementedBy class 386 Return the interfaces implemented for a class instances387388 The value returned is an IDeclaration 389 39 391 def classImplements class interfaces 392 Declare additional interfaces implemented for instances of a class393394 The arguments after the class are one or more interfaces or395 interface specifications IDeclaration objects 396397 The interfaces given including the interfaces in the398 specifications are added to any interfaces previously399 declared 4 4 1 Consider the following example 4 24 3 class C A B 4 4 4 54 6 classImplements C I1 I2 4 74 84 9 Instances of C provide I1 I2 and whatever interfaces41 instances of A and B provide 411 412413 def implementer interfaces 414 Create a decorator for declaring interfaces implemented by a facory415416 A callable is returned that makes an implements declaration on417 objects passed to it 418 41942 def classImplementsOnly class interfaces 421 Declare the only interfaces implemented by instances of a class422423 The arguments after the class are one or more interfaces or424 interface specifications IDeclaration objects 425426 The interfaces given including the interfaces in the427 specifications replace any previous declarations 428429 Consider the following example 43 431 class C A B 432 433434 classImplements C IA IB IC 435 classImplementsOnly C I1 I2 436437 Instances of C provide only I1 I2 and regardless of438 whatever interfaces instances of A and B implement 439 44 441 def directlyProvidedBy object 442 Return the interfaces directly provided by the given object443444 The value returned is an IDeclaration 445 446447 def directlyProvides object interfaces 448 Declare interfaces declared directly for an object44945 The arguments after the object are one or more interfaces or451 interface specifications IDeclaration objects 452453 The interfaces given including the interfaces in the454 specifications replace interfaces previously455 declared for the object 456457 Consider the following example 458459 class C A B 46 461462 ob C 463 directlyProvides ob I1 I2 464465 The object ob provides I1 I2 and whatever interfaces466 instances have been declared for instances of C 467468 To remove directly provided interfaces use directlyProvidedBy and469 subtract the unwanted interfaces For example 47 471 directlyProvides ob directlyProvidedBy ob I2 472473 removes I2 from the interfaces directly provided by474 ob The object ob no longer directly provides I2 475 although it might still provide I2 if it s class476 implements I2 477478 To add directly provided interfaces use directlyProvidedBy and479 include additional interfaces For example 48 481 directlyProvides ob directlyProvidedBy ob I2 482483 adds I2 to the interfaces directly provided by ob 484 485486 def alsoProvides object interfaces 487 Declare additional interfaces directly for an object 488489 alsoProvides ob I1 49 491 is equivalent to 492493 directivelyProvides ob directlyProvidedBy ob I1 494 495496 def noLongerProvides object interface 497 Remove an interface from the list of an object s directly498 provided interfaces 4995 noLongerProvides ob I1 5 15 2 is equivalent to 5 35 4 directlyProvides ob directlyProvidedBy ob I1 5 55 6 with the exception that if I1 is an interface that is5 7 provided by ob through the class s implementation 5 8 ValueError is raised 5 9 51 511 def implements interfaces 512 Declare interfaces implemented by instances of a class513514 This function is called in a class definition 515516 The arguments are one or more interfaces or interface517 specifications IDeclaration objects 518519 The interfaces given including the interfaces in the52 specifications are added to any interfaces previously521 declared 522523 Previous declarations include declarations for base classes524 unless implementsOnly was used 525526 This function is provided for convenience It provides a more527 convenient way to call classImplements For example 528529 implements I1 53 531 is equivalent to calling 532533 classImplements C I1 534535 after the class has been created 536537 Consider the following example 538539 class C A B 54 implements I1 I2 541542543 Instances of C implement I1 I2 and whatever interfaces544 instances of A and B implement 545 546547 def implementsOnly interfaces 548 Declare the only interfaces implemented by instances of a class54955 This function is called in a class definition 551552 The arguments are one or more interfaces or interface553 specifications IDeclaration objects 554555 Previous declarations including declarations for base classes556 are overridden 557558 This function is provided for convenience It provides a more559 convenient way to call classImplementsOnly For example 56 561 implementsOnly I1 562563 is equivalent to calling 564565 classImplementsOnly I1 566567 after the class has been created 568569 Consider the following example 57 571 class C A B 572 implementsOnly I1 I2 573574575 Instances of C implement I1 I2 regardless of what576 instances of A and B implement 577 578579 def classProvides interfaces 58 Declare interfaces provided directly by a class581582 This function is called in a class definition 583584 The arguments are one or more interfaces or interface585 specifications IDeclaration objects 586587 The given interfaces including the interfaces in the588 specifications are used to create the class s direct object589 interface specification An error will be raised if the module59 class has an direct interface specification In other words it is591 an error to call this function more than once in a class592 definition 593594 Note that the given interfaces have nothing to do with the595 interfaces implemented by instances of the class 596597 This function is provided for convenience It provides a more598 convenient way to call directlyProvides for a class For example 5996 classProvides I1 6 16 2 is equivalent to calling 6 36 4 directlyProvides theclass I1 6 56 6 after the class has been created 6 7 6 86 9 def moduleProvides interfaces 61 Declare interfaces provided by a module611612 This function is used in a module definition 613614 The arguments are one or more interfaces or interface615 specifications IDeclaration objects 616617 The given interfaces including the interfaces in the618 specifications are used to create the module s direct object619 interface specification An error will be raised if the module62 already has an interface specification In other words it is621 an error to call this function more than once in a module622 definition 623624 This function is provided for convenience It provides a more625 convenient way to call directlyProvides for a module For example 626627 moduleImplements I1 628629 is equivalent to 63 631 directlyProvides sys modules name I1 632 633634 def Declaration interfaces 635 Create an interface specification636637 The arguments are one or more interfaces or interface638 specifications IDeclaration objects 63964 A new interface specification IDeclaration with641 the given interfaces is returned 642 643644class IAdapterRegistry Interface 645 Provide an interface based registry for adapters646647 This registry registers objects that are in some sense from a648 sequence of specification to an interface and a name 64965 No specific semantics are assumed for the registered objects 651 however the most common application will be to register factories652 that adapt objects providing required specifications to a provided653 interface 654 655656 def register required provided name value 657 Register a value658659 A value is registered for a sequence of required specifications a66 provided interface and a name 661 662663 def registered required provided name u 664 Return the component registered for the given interfaces and name665666 Unlike the lookup method this methods won t retrieve667 components registered for more specific required interfaces or668 less specific provided interfaces 66967 If no component was registered exactly for the given671 interfaces and name then None is returned 672 673 674 675 def lookup required provided name default None 676 Lookup a value677678 A value is looked up based on a sequence of required679 specifications a provided interface and a name 68 681682 def queryMultiAdapter objects provided name u default None 683 Adapt a sequence of objects to a named provided interface684 685686 def lookup1 required provided name u default None 687 Lookup a value using a single required interface688689 A value is looked up based on a single required69 specifications a provided interface and a name 691 692693 def queryAdapter object provided name u default None 694 Adapt an object using a registered adapter factory 695 696697 def adapter hook provided object name u default None 698 Adapt an object using a registered adapter factory 699 7 7 1 def lookupAll required provided 7 2 Find all adapters from the required to the provided interfaces7 37 4 An iterable object is returned that provides name value two tuples 7 5 7 67 7 def names required provided 7 8 Return the names for which there are registered objects7 9 71 711 def subscribe required provided subscriber name u 712 Register a subscriber713714 A subscriber is registered for a sequence of required715 specifications a provided interface and a name 716717 Multiple subscribers may be registered for the same or718 equivalent interfaces 719 72 721 def subscriptions required provided name u 722 Get a sequence of subscribers723724 Subscribers for a sequence of required interfaces and a provided725 interface are returned 726 727728 def subscribers objects provided name u 729 Get a sequence of subscription adapters73 Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py", "title": "\n      interfaces.py in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/zope/interface\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      interfaces.py in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\" type=\"application/x-python; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/zope/interface/interfaces.py?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope?order=name\" title=\"View zope\">zope</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface?order=name\" title=\"View interface\">interface</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py?order=name\" title=\"View interfaces.py\">interfaces.py</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/zope/interface/interfaces.py\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"24032 bytes\">23.5 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td><span class=\"c\">##############################################################################</span></td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td><span class=\"c\"># Copyright (c) 2002 Zope Corporation and Contributors.</span></td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td><span class=\"c\"># All Rights Reserved.</span></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td><span class=\"c\"># This software is subject to the provisions of the Zope Public License,</span></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td><span class=\"c\"># Version 2.1 (ZPL).\u00a0 A copy of the ZPL should accompany this distribution.</span></td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td><span class=\"c\"># THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED</span></td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td><span class=\"c\"># WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td><span class=\"c\"># WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS</span></td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td><span class=\"c\"># FOR A PARTICULAR PURPOSE.</span></td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td><span class=\"c\">##############################################################################</span></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td><span class=\"sd\">\"\"\"Interface Package Interfaces</span></td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td><span class=\"sd\">$Id: interfaces.py 67803 2006-05-01 15:20:47Z jim $</span></td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td>__docformat__ <span class=\"o\">=</span>\u00a0<span class=\"s\">'restructuredtext'</span></td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td></td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">zope.interface</span>\u00a0<span class=\"kn\">import</span>\u00a0Interface</td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">zope.interface.interface</span>\u00a0<span class=\"kn\">import</span>\u00a0Attribute</td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td></td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IElement</span><span class=\"p\">(</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Objects that have basic documentation and tagged values.</span></td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td></td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td>\u00a0 \u00a0 __name__ <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">'__name__'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'The object name'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td>\u00a0 \u00a0 __doc__\u00a0 <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">'__doc__'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'The object doc string'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td></td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getTaggedValue</span><span class=\"p\">(</span>tag<span class=\"p\">):</span></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Returns the value associated with `tag`.</span></td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Raise a `KeyError` of the tag isn't set.</span></td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td></td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">queryTaggedValue</span><span class=\"p\">(</span>tag<span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Returns the value associated with `tag`.</span></td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return the default value of the tag isn't set.</span></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getTaggedValueTags</span><span class=\"p\">():</span></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Returns a list of all tags.\"\"\"</span></td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">setTaggedValue</span><span class=\"p\">(</span>tag<span class=\"p\">,</span>\u00a0value<span class=\"p\">):</span></td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Associates `value` with `key`.\"\"\"</span></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td></td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td></td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IAttribute</span><span class=\"p\">(</span>IElement<span class=\"p\">):</span></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Attribute descriptors\"\"\"</span></td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td></td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td>\u00a0 \u00a0 interface <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">'interface'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">'Stores the interface instance in which the '</span></td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">'attribute is located.'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td></td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IMethod</span><span class=\"p\">(</span>IAttribute<span class=\"p\">):</span></td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Method attributes\"\"\"</span></td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getSignatureInfo</span><span class=\"p\">():</span></td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Returns the signature information.</span></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This method returns a dictionary with the following keys:</span></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 o `positional` - All positional arguments.</span></td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 o `required` - A list of all required arguments.</span></td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 o `optional` - A list of all optional arguments.</span></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 o `varargs` - The name of the varargs argument.</span></td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 o `kwargs` - The name of the kwargs argument.</span></td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td></td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getSignatureString</span><span class=\"p\">():</span></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return a signature string suitable for inclusion in documentation.</span></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This method returns the function signature string. For example, if you</span></td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 have `func(a, b, c=1, d='f')`, then the signature string is `(a, b,</span></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 c=1, d='f')`.</span></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">ISpecification</span><span class=\"p\">(</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Object Behavioral specifications\"\"\"</span></td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td></td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">extends</span><span class=\"p\">(</span>other<span class=\"p\">,</span>\u00a0strict<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether a specification extends another</span></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The specification extends other if it has other as a base</span></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface or if one of it's bases extends other.</span></td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If strict is false, then the specification extends itself.</span></td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">isOrExtends</span><span class=\"p\">(</span>other<span class=\"p\">):</span></td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether the specification is or extends another</span></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td></td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">weakref</span><span class=\"p\">(</span>callback<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return a weakref to the specification</span></td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This method is, regrettably, needed to allow weakrefs to be</span></td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 computed to security-proxied specifications.\u00a0 While the</span></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 zope.interface package does not require zope.security or</span></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 zope.proxy, it has to be able to coexist with it.</span></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td>\u00a0 \u00a0 __bases__ <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">\"\"\"Base specifications</span></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td><span class=\"s\"></span></td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td><span class=\"s\">\u00a0 \u00a0 A tuple if specifications from which this specification is</span></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td><span class=\"s\">\u00a0 \u00a0 directly derived.</span></td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td><span class=\"s\"></span></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td><span class=\"s\">\u00a0 \u00a0 \"\"\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td></td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td>\u00a0 \u00a0 __sro__ <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">\"\"\"Specification-resolution order</span></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td><span class=\"s\"></span></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td><span class=\"s\">\u00a0 \u00a0 A tuple of the specification and all of it's ancestor</span></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td><span class=\"s\">\u00a0 \u00a0 specifications from most specific to least specific.</span></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td><span class=\"s\"></span></td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td><span class=\"s\">\u00a0 \u00a0 (This is similar to the method-resolution order for new-style classes.)</span></td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td><span class=\"s\">\u00a0 \u00a0 \"\"\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">get</span><span class=\"p\">(</span>name<span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Look up the description for a name</span></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the named attribute is not defined, the default is</span></td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 returned.</span></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td></td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td></td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IInterface</span><span class=\"p\">(</span>ISpecification<span class=\"p\">,</span>\u00a0IElement<span class=\"p\">):</span></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Interface objects</span></td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td><span class=\"sd\">\u00a0 \u00a0 Interface objects describe the behavior of an object by containing</span></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td><span class=\"sd\">\u00a0 \u00a0 useful information about the object.\u00a0 This information includes:</span></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 o Prose documentation about the object.\u00a0 In Python terms, this</span></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is called the \"doc string\" of the interface.\u00a0 In this element,</span></td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 you describe how the object works in prose language and any</span></td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 other useful information about the object.</span></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 o Descriptions of attributes.\u00a0 Attribute descriptions include</span></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the name of the attribute and prose documentation describing</span></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the attributes usage.</span></td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 o Descriptions of methods.\u00a0 Method descriptions can include:</span></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 - Prose \"doc string\" documentation about the method and its</span></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 usage.</span></td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 - A description of the methods arguments; how many arguments</span></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 are expected, optional arguments and their default values,</span></td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 the position or arguments in the signature, whether the</span></td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 method accepts arbitrary arguments and whether the method</span></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 accepts arbitrary keyword arguments.</span></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 o Optional tagged data.\u00a0 Interface objects (and their attributes and</span></td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 methods) can have optional, application specific tagged data</span></td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 associated with them.\u00a0 Examples uses for this are examples,</span></td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 security assertions, pre/post conditions, and other possible</span></td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 information you may want to associate with an Interface or its</span></td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 attributes.</span></td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td><span class=\"sd\">\u00a0 \u00a0 Not all of this information is mandatory.\u00a0 For example, you may</span></td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td><span class=\"sd\">\u00a0 \u00a0 only want the methods of your interface to have prose</span></td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td><span class=\"sd\">\u00a0 \u00a0 documentation and not describe the arguments of the method in</span></td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td><span class=\"sd\">\u00a0 \u00a0 exact detail.\u00a0 Interface objects are flexible and let you give or</span></td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td><span class=\"sd\">\u00a0 \u00a0 take any of these components.</span></td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td><span class=\"sd\">\u00a0 \u00a0 Interfaces are created with the Python class statement using</span></td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td><span class=\"sd\">\u00a0 \u00a0 either Interface.Interface or another interface, as in::</span></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 from zope.interface import Interface</span></td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 class IMyInterface(Interface):</span></td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 '''Interface documentation'''</span></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def meth(arg1, arg2):</span></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '''Documentation for meth'''</span></td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 # Note that there is no self argument</span></td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0class IMySubInterface(IMyInterface):</span></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 '''Interface documentation'''</span></td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def meth2():</span></td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '''Documentation for meth2'''</span></td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td><span class=\"sd\">\u00a0 \u00a0 You use interfaces in two ways:</span></td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td><span class=\"sd\">\u00a0 \u00a0 o You assert that your object implement the interfaces.</span></td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 There are several ways that you can assert that an object</span></td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 implements an interface:</span></td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 1. Call zope.interface.implements in your class definition.</span></td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 2. Call zope.interfaces.directlyProvides on your object.</span></td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 3. Call 'zope.interface.classImplements' to assert that instances</span></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0of a class implement an interface.</span></td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0For example::</span></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0from zope.interface import classImplements</span></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0classImplements(some_class, some_interface)</span></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0This approach is useful when it is not an option to modify</span></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0the class source.\u00a0 Note that this doesn't affect what the</span></td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0class itself implements, but only what its instances</span></td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0implement.</span></td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td><span class=\"sd\">\u00a0 \u00a0 o You query interface meta-data. See the IInterface methods and</span></td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 attributes for details.</span></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">providedBy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether the interface is implemented by the object</span></td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return true of the object asserts that it implements the</span></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface, including asserting that it implements an extended</span></td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface.</span></td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td></td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">implementedBy</span><span class=\"p\">(</span>class_<span class=\"p\">):</span></td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether the interface is implemented by instances of the class</span></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return true of the class asserts that its instances implement the</span></td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface, including asserting that they implement an extended</span></td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface.</span></td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td></td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">names</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span></td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get the interface attribute names</span></td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return a sequence of the names of the attributes, including</span></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 methods, included in the interface definition.</span></td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Normally, only directly defined attributes are included. If</span></td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 a true positional or keyword argument is given, then</span></td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 attributes defined by base classes will be included.</span></td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">namesAndDescriptions</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span></td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get the interface attribute names and descriptions</span></td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return a sequence of the names and descriptions of the</span></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 attributes, including methods, as name-value pairs, included</span></td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 in the interface definition.</span></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Normally, only directly defined attributes are included. If</span></td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 a true positional or keyword argument is given, then</span></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 attributes defined by base classes will be included.</span></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td></td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__getitem__</span><span class=\"p\">(</span>name<span class=\"p\">):</span></td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get the description for a name</span></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the named attribute is not defined, a KeyError is raised.</span></td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td></td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">direct</span><span class=\"p\">(</span>name<span class=\"p\">):</span></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get the description for the name if it was defined by the interface</span></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the interface doesn't define the name, returns None.</span></td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td></td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">validateInvariants</span><span class=\"p\">(</span>obj<span class=\"p\">,</span>\u00a0errors<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Validate invariants</span></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Validate object to defined invariants.\u00a0 If errors is None,</span></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 raises first Invalid error; if errors is a list, appends all errors</span></td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 to list, then raises Invalid with the errors as the first element</span></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 of the \"args\" tuple.\"\"\"</span></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td></td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__contains__</span><span class=\"p\">(</span>name<span class=\"p\">):</span></td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether the name is defined by the interface\"\"\"</span></td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__iter__</span><span class=\"p\">():</span></td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return an iterator over the names defined by the interface</span></td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The names iterated include all of the names defined by the</span></td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface directly and indirectly by base interfaces.</span></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td></td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td>\u00a0 \u00a0 __module__ <span class=\"o\">=</span>\u00a0Attribute<span class=\"p\">(</span><span class=\"s\">\"\"\"The name of the module defining the interface\"\"\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IDeclaration</span><span class=\"p\">(</span>ISpecification<span class=\"p\">):</span></td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Interface declaration</span></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td><span class=\"sd\">\u00a0 \u00a0 Declarations are used to express the interfaces implemented by</span></td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td><span class=\"sd\">\u00a0 \u00a0 classes or provided by objects.</span></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__contains__</span><span class=\"p\">(</span>interface<span class=\"p\">):</span></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Test whether an interface is in the specification</span></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return true if the given interface is one of the interfaces in</span></td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the specification and false otherwise.</span></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td></td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__iter__</span><span class=\"p\">():</span></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return an iterator for the interfaces in the specification</span></td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td></td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">flattened</span><span class=\"p\">():</span></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return an iterator of all included and extended interfaces</span></td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 An iterator is returned for all interfaces either included in</span></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 or extended by interfaces included in the specifications</span></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 without duplicates. The interfaces are in \"interface</span></td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 resolution order\". The interface resolution order is such that</span></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 base interfaces are listed after interfaces that extend them</span></td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 and, otherwise, interfaces are included in the order that they</span></td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 were defined in the specification.</span></td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__sub__</span><span class=\"p\">(</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Create an interface specification with some interfaces excluded</span></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The argument can be an interface or an interface</span></td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications.\u00a0 The interface or interfaces given in a</span></td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specification are subtracted from the interface specification.</span></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Removing an interface that is not in the specification does</span></td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 not raise an error. Doing so has no effect.</span></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Removing an interface also removes sub-interfaces of the interface.</span></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td></td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__add__</span><span class=\"p\">(</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Create an interface specification with some interfaces added</span></td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The argument can be an interface or an interface</span></td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications.\u00a0 The interface or interfaces given in a</span></td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specification are added to the interface specification.</span></td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Adding an interface that is already in the specification does</span></td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 not raise an error. Doing so has no effect.</span></td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td></td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__nonzero__</span><span class=\"p\">():</span></td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return a true value of the interface specification is non-empty</span></td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td></td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IInterfaceDeclaration</span><span class=\"p\">(</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare and check the interfaces of objects</span></td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td><span class=\"sd\">\u00a0 \u00a0 The functions defined in this interface are used to declare the</span></td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td><span class=\"sd\">\u00a0 \u00a0 interfaces that objects provide and to query the interfaces that have</span></td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td><span class=\"sd\">\u00a0 \u00a0 been declared.</span></td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td><span class=\"sd\">\u00a0 \u00a0 Interfaces can be declared for objects in two ways:</span></td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Interfaces are declared for instances of the object's class</span></td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Interfaces are declared for the object directly.</span></td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td><span class=\"sd\">\u00a0 \u00a0 The interfaces declared for an object are, therefore, the union of</span></td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td><span class=\"sd\">\u00a0 \u00a0 interfaces declared for the object directly and the interfaces</span></td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td><span class=\"sd\">\u00a0 \u00a0 declared for instances of the object's class.</span></td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td><span class=\"sd\">\u00a0 \u00a0 Note that we say that a class implements the interfaces provided</span></td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td><span class=\"sd\">\u00a0 \u00a0 by it's instances.\u00a0 An instance can also provide interfaces</span></td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td><span class=\"sd\">\u00a0 \u00a0 directly.\u00a0 The interfaces provided by an object are the union of</span></td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td><span class=\"sd\">\u00a0 \u00a0 the interfaces provided directly and the interfaces implemented by</span></td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td><span class=\"sd\">\u00a0 \u00a0 the class.</span></td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td></td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">providedBy</span><span class=\"p\">(</span>ob<span class=\"p\">):</span></td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return the interfaces provided by an object</span></td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is the union of the interfaces directly provided by an</span></td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 object and interfaces implemented by it's class.</span></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The value returned is an IDeclaration.</span></td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td></td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">implementedBy</span><span class=\"p\">(</span>class_<span class=\"p\">):</span></td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return the interfaces implemented for a class' instances</span></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The value returned is an IDeclaration.</span></td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td></td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">classImplements</span><span class=\"p\">(</span>class_<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare additional interfaces implemented for instances of a class</span></td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments after the class are one or more interfaces or</span></td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The interfaces given (including the interfaces in the</span></td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) are added to any interfaces previously</span></td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 declared.</span></td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Consider the following example::</span></td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class C(A, B):</span></td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0...</span></td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classImplements(C, I1, I2)</span></td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Instances of ``C`` provide ``I1``, ``I2``, and whatever interfaces</span></td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 instances of ``A`` and ``B`` provide.</span></td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td></td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">implementer</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Create a decorator for declaring interfaces implemented by a facory</span></td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A callable is returned that makes an implements declaration on</span></td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 objects passed to it.</span></td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td></td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">classImplementsOnly</span><span class=\"p\">(</span>class_<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare the only interfaces implemented by instances of a class</span></td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments after the class are one or more interfaces or</span></td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The interfaces given (including the interfaces in the</span></td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) replace any previous declarations.</span></td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Consider the following example::</span></td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class C(A, B):</span></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0...</span></td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classImplements(C, IA, IB. IC)</span></td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classImplementsOnly(C. I1, I2)</span></td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Instances of ``C`` provide only ``I1``, ``I2``, and regardless of</span></td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 whatever interfaces instances of ``A`` and ``B`` implement.</span></td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td></td></tr><tr><th id=\"L441\"><a href=\"#L441\">441</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">directlyProvidedBy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span></td></tr><tr><th id=\"L442\"><a href=\"#L442\">442</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return the interfaces directly provided by the given object</span></td></tr><tr><th id=\"L443\"><a href=\"#L443\">443</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L444\"><a href=\"#L444\">444</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The value returned is an IDeclaration.</span></td></tr><tr><th id=\"L445\"><a href=\"#L445\">445</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L446\"><a href=\"#L446\">446</a></th><td></td></tr><tr><th id=\"L447\"><a href=\"#L447\">447</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">directlyProvides</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L448\"><a href=\"#L448\">448</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare interfaces declared directly for an object</span></td></tr><tr><th id=\"L449\"><a href=\"#L449\">449</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L450\"><a href=\"#L450\">450</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments after the object are one or more interfaces or</span></td></tr><tr><th id=\"L451\"><a href=\"#L451\">451</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L452\"><a href=\"#L452\">452</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L453\"><a href=\"#L453\">453</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The interfaces given (including the interfaces in the</span></td></tr><tr><th id=\"L454\"><a href=\"#L454\">454</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) replace interfaces previously</span></td></tr><tr><th id=\"L455\"><a href=\"#L455\">455</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 declared for the object.</span></td></tr><tr><th id=\"L456\"><a href=\"#L456\">456</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L457\"><a href=\"#L457\">457</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Consider the following example::</span></td></tr><tr><th id=\"L458\"><a href=\"#L458\">458</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L459\"><a href=\"#L459\">459</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class C(A, B):</span></td></tr><tr><th id=\"L460\"><a href=\"#L460\">460</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0...</span></td></tr><tr><th id=\"L461\"><a href=\"#L461\">461</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L462\"><a href=\"#L462\">462</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ob = C()</span></td></tr><tr><th id=\"L463\"><a href=\"#L463\">463</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(ob, I1, I2)</span></td></tr><tr><th id=\"L464\"><a href=\"#L464\">464</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L465\"><a href=\"#L465\">465</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The object, ``ob`` provides ``I1``, ``I2``, and whatever interfaces</span></td></tr><tr><th id=\"L466\"><a href=\"#L466\">466</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 instances have been declared for instances of ``C``.</span></td></tr><tr><th id=\"L467\"><a href=\"#L467\">467</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L468\"><a href=\"#L468\">468</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 To remove directly provided interfaces, use ``directlyProvidedBy`` and</span></td></tr><tr><th id=\"L469\"><a href=\"#L469\">469</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 subtract the unwanted interfaces. For example::</span></td></tr><tr><th id=\"L470\"><a href=\"#L470\">470</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L471\"><a href=\"#L471\">471</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(ob, directlyProvidedBy(ob)-I2)</span></td></tr><tr><th id=\"L472\"><a href=\"#L472\">472</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L473\"><a href=\"#L473\">473</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 removes I2 from the interfaces directly provided by</span></td></tr><tr><th id=\"L474\"><a href=\"#L474\">474</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 ``ob``. The object, ``ob`` no longer directly provides ``I2``,</span></td></tr><tr><th id=\"L475\"><a href=\"#L475\">475</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 although it might still provide ``I2`` if it's class</span></td></tr><tr><th id=\"L476\"><a href=\"#L476\">476</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 implements ``I2``.</span></td></tr><tr><th id=\"L477\"><a href=\"#L477\">477</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L478\"><a href=\"#L478\">478</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 To add directly provided interfaces, use ``directlyProvidedBy`` and</span></td></tr><tr><th id=\"L479\"><a href=\"#L479\">479</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 include additional interfaces.\u00a0 For example::</span></td></tr><tr><th id=\"L480\"><a href=\"#L480\">480</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L481\"><a href=\"#L481\">481</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(ob, directlyProvidedBy(ob), I2)</span></td></tr><tr><th id=\"L482\"><a href=\"#L482\">482</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L483\"><a href=\"#L483\">483</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 adds I2 to the interfaces directly provided by ob.</span></td></tr><tr><th id=\"L484\"><a href=\"#L484\">484</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L485\"><a href=\"#L485\">485</a></th><td></td></tr><tr><th id=\"L486\"><a href=\"#L486\">486</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">alsoProvides</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L487\"><a href=\"#L487\">487</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare additional interfaces directly for an object::</span></td></tr><tr><th id=\"L488\"><a href=\"#L488\">488</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L489\"><a href=\"#L489\">489</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 alsoProvides(ob, I1)</span></td></tr><tr><th id=\"L490\"><a href=\"#L490\">490</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L491\"><a href=\"#L491\">491</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to::</span></td></tr><tr><th id=\"L492\"><a href=\"#L492\">492</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L493\"><a href=\"#L493\">493</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directivelyProvides(ob, directlyProvidedBy(ob), I1)</span></td></tr><tr><th id=\"L494\"><a href=\"#L494\">494</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L495\"><a href=\"#L495\">495</a></th><td></td></tr><tr><th id=\"L496\"><a href=\"#L496\">496</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">noLongerProvides</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span>\u00a0interface<span class=\"p\">):</span></td></tr><tr><th id=\"L497\"><a href=\"#L497\">497</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Remove an interface from the list of an object's directly</span></td></tr><tr><th id=\"L498\"><a href=\"#L498\">498</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 provided interfaces::</span></td></tr><tr><th id=\"L499\"><a href=\"#L499\">499</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L500\"><a href=\"#L500\">500</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 noLongerProvides(ob, I1)</span></td></tr><tr><th id=\"L501\"><a href=\"#L501\">501</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L502\"><a href=\"#L502\">502</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to::</span></td></tr><tr><th id=\"L503\"><a href=\"#L503\">503</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L504\"><a href=\"#L504\">504</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(ob, directlyProvidedBy(ob)-I1)</span></td></tr><tr><th id=\"L505\"><a href=\"#L505\">505</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L506\"><a href=\"#L506\">506</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 with the exception that if ``I1`` is an interface that is</span></td></tr><tr><th id=\"L507\"><a href=\"#L507\">507</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 provided by ``ob`` through the class's implementation,</span></td></tr><tr><th id=\"L508\"><a href=\"#L508\">508</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 ValueError is raised.</span></td></tr><tr><th id=\"L509\"><a href=\"#L509\">509</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L510\"><a href=\"#L510\">510</a></th><td></td></tr><tr><th id=\"L511\"><a href=\"#L511\">511</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">implements</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L512\"><a href=\"#L512\">512</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare interfaces implemented by instances of a class</span></td></tr><tr><th id=\"L513\"><a href=\"#L513\">513</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L514\"><a href=\"#L514\">514</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is called in a class definition.</span></td></tr><tr><th id=\"L515\"><a href=\"#L515\">515</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L516\"><a href=\"#L516\">516</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments are one or more interfaces or interface</span></td></tr><tr><th id=\"L517\"><a href=\"#L517\">517</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L518\"><a href=\"#L518\">518</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L519\"><a href=\"#L519\">519</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The interfaces given (including the interfaces in the</span></td></tr><tr><th id=\"L520\"><a href=\"#L520\">520</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) are added to any interfaces previously</span></td></tr><tr><th id=\"L521\"><a href=\"#L521\">521</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 declared.</span></td></tr><tr><th id=\"L522\"><a href=\"#L522\">522</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L523\"><a href=\"#L523\">523</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Previous declarations include declarations for base classes</span></td></tr><tr><th id=\"L524\"><a href=\"#L524\">524</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 unless implementsOnly was used.</span></td></tr><tr><th id=\"L525\"><a href=\"#L525\">525</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L526\"><a href=\"#L526\">526</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is provided for convenience. It provides a more</span></td></tr><tr><th id=\"L527\"><a href=\"#L527\">527</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 convenient way to call classImplements. For example::</span></td></tr><tr><th id=\"L528\"><a href=\"#L528\">528</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L529\"><a href=\"#L529\">529</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 implements(I1)</span></td></tr><tr><th id=\"L530\"><a href=\"#L530\">530</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L531\"><a href=\"#L531\">531</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to calling::</span></td></tr><tr><th id=\"L532\"><a href=\"#L532\">532</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L533\"><a href=\"#L533\">533</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classImplements(C, I1)</span></td></tr><tr><th id=\"L534\"><a href=\"#L534\">534</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L535\"><a href=\"#L535\">535</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 after the class has been created.</span></td></tr><tr><th id=\"L536\"><a href=\"#L536\">536</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L537\"><a href=\"#L537\">537</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Consider the following example::</span></td></tr><tr><th id=\"L538\"><a href=\"#L538\">538</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L539\"><a href=\"#L539\">539</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class C(A, B):</span></td></tr><tr><th id=\"L540\"><a href=\"#L540\">540</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 implements(I1, I2)</span></td></tr><tr><th id=\"L541\"><a href=\"#L541\">541</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L542\"><a href=\"#L542\">542</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L543\"><a href=\"#L543\">543</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Instances of ``C`` implement ``I1``, ``I2``, and whatever interfaces</span></td></tr><tr><th id=\"L544\"><a href=\"#L544\">544</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 instances of ``A`` and ``B`` implement.</span></td></tr><tr><th id=\"L545\"><a href=\"#L545\">545</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L546\"><a href=\"#L546\">546</a></th><td></td></tr><tr><th id=\"L547\"><a href=\"#L547\">547</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">implementsOnly</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L548\"><a href=\"#L548\">548</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare the only interfaces implemented by instances of a class</span></td></tr><tr><th id=\"L549\"><a href=\"#L549\">549</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L550\"><a href=\"#L550\">550</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is called in a class definition.</span></td></tr><tr><th id=\"L551\"><a href=\"#L551\">551</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L552\"><a href=\"#L552\">552</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments are one or more interfaces or interface</span></td></tr><tr><th id=\"L553\"><a href=\"#L553\">553</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L554\"><a href=\"#L554\">554</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L555\"><a href=\"#L555\">555</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Previous declarations including declarations for base classes</span></td></tr><tr><th id=\"L556\"><a href=\"#L556\">556</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 are overridden.</span></td></tr><tr><th id=\"L557\"><a href=\"#L557\">557</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L558\"><a href=\"#L558\">558</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is provided for convenience. It provides a more</span></td></tr><tr><th id=\"L559\"><a href=\"#L559\">559</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 convenient way to call classImplementsOnly. For example::</span></td></tr><tr><th id=\"L560\"><a href=\"#L560\">560</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L561\"><a href=\"#L561\">561</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 implementsOnly(I1)</span></td></tr><tr><th id=\"L562\"><a href=\"#L562\">562</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L563\"><a href=\"#L563\">563</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to calling::</span></td></tr><tr><th id=\"L564\"><a href=\"#L564\">564</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L565\"><a href=\"#L565\">565</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classImplementsOnly(I1)</span></td></tr><tr><th id=\"L566\"><a href=\"#L566\">566</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L567\"><a href=\"#L567\">567</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 after the class has been created.</span></td></tr><tr><th id=\"L568\"><a href=\"#L568\">568</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L569\"><a href=\"#L569\">569</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Consider the following example::</span></td></tr><tr><th id=\"L570\"><a href=\"#L570\">570</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L571\"><a href=\"#L571\">571</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class C(A, B):</span></td></tr><tr><th id=\"L572\"><a href=\"#L572\">572</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 implementsOnly(I1, I2)</span></td></tr><tr><th id=\"L573\"><a href=\"#L573\">573</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L574\"><a href=\"#L574\">574</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L575\"><a href=\"#L575\">575</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Instances of ``C`` implement ``I1``, ``I2``, regardless of what</span></td></tr><tr><th id=\"L576\"><a href=\"#L576\">576</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 instances of ``A`` and ``B`` implement.</span></td></tr><tr><th id=\"L577\"><a href=\"#L577\">577</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L578\"><a href=\"#L578\">578</a></th><td></td></tr><tr><th id=\"L579\"><a href=\"#L579\">579</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">classProvides</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L580\"><a href=\"#L580\">580</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare interfaces provided directly by a class</span></td></tr><tr><th id=\"L581\"><a href=\"#L581\">581</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L582\"><a href=\"#L582\">582</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is called in a class definition.</span></td></tr><tr><th id=\"L583\"><a href=\"#L583\">583</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L584\"><a href=\"#L584\">584</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments are one or more interfaces or interface</span></td></tr><tr><th id=\"L585\"><a href=\"#L585\">585</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L586\"><a href=\"#L586\">586</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L587\"><a href=\"#L587\">587</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The given interfaces (including the interfaces in the</span></td></tr><tr><th id=\"L588\"><a href=\"#L588\">588</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) are used to create the class's direct-object</span></td></tr><tr><th id=\"L589\"><a href=\"#L589\">589</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface specification.\u00a0 An error will be raised if the module</span></td></tr><tr><th id=\"L590\"><a href=\"#L590\">590</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 class has an direct interface specification.\u00a0 In other words, it is</span></td></tr><tr><th id=\"L591\"><a href=\"#L591\">591</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 an error to call this function more than once in a class</span></td></tr><tr><th id=\"L592\"><a href=\"#L592\">592</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 definition.</span></td></tr><tr><th id=\"L593\"><a href=\"#L593\">593</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L594\"><a href=\"#L594\">594</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Note that the given interfaces have nothing to do with the</span></td></tr><tr><th id=\"L595\"><a href=\"#L595\">595</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interfaces implemented by instances of the class.</span></td></tr><tr><th id=\"L596\"><a href=\"#L596\">596</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L597\"><a href=\"#L597\">597</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is provided for convenience. It provides a more</span></td></tr><tr><th id=\"L598\"><a href=\"#L598\">598</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 convenient way to call directlyProvides for a class. For example::</span></td></tr><tr><th id=\"L599\"><a href=\"#L599\">599</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L600\"><a href=\"#L600\">600</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 classProvides(I1)</span></td></tr><tr><th id=\"L601\"><a href=\"#L601\">601</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L602\"><a href=\"#L602\">602</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to calling::</span></td></tr><tr><th id=\"L603\"><a href=\"#L603\">603</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L604\"><a href=\"#L604\">604</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(theclass, I1)</span></td></tr><tr><th id=\"L605\"><a href=\"#L605\">605</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L606\"><a href=\"#L606\">606</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 after the class has been created.</span></td></tr><tr><th id=\"L607\"><a href=\"#L607\">607</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L608\"><a href=\"#L608\">608</a></th><td></td></tr><tr><th id=\"L609\"><a href=\"#L609\">609</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">moduleProvides</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L610\"><a href=\"#L610\">610</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Declare interfaces provided by a module</span></td></tr><tr><th id=\"L611\"><a href=\"#L611\">611</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L612\"><a href=\"#L612\">612</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is used in a module definition.</span></td></tr><tr><th id=\"L613\"><a href=\"#L613\">613</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L614\"><a href=\"#L614\">614</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments are one or more interfaces or interface</span></td></tr><tr><th id=\"L615\"><a href=\"#L615\">615</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L616\"><a href=\"#L616\">616</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L617\"><a href=\"#L617\">617</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The given interfaces (including the interfaces in the</span></td></tr><tr><th id=\"L618\"><a href=\"#L618\">618</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications) are used to create the module's direct-object</span></td></tr><tr><th id=\"L619\"><a href=\"#L619\">619</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface specification.\u00a0 An error will be raised if the module</span></td></tr><tr><th id=\"L620\"><a href=\"#L620\">620</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 already has an interface specification.\u00a0 In other words, it is</span></td></tr><tr><th id=\"L621\"><a href=\"#L621\">621</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 an error to call this function more than once in a module</span></td></tr><tr><th id=\"L622\"><a href=\"#L622\">622</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 definition.</span></td></tr><tr><th id=\"L623\"><a href=\"#L623\">623</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L624\"><a href=\"#L624\">624</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function is provided for convenience. It provides a more</span></td></tr><tr><th id=\"L625\"><a href=\"#L625\">625</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 convenient way to call directlyProvides for a module. For example::</span></td></tr><tr><th id=\"L626\"><a href=\"#L626\">626</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L627\"><a href=\"#L627\">627</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 moduleImplements(I1)</span></td></tr><tr><th id=\"L628\"><a href=\"#L628\">628</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L629\"><a href=\"#L629\">629</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is equivalent to::</span></td></tr><tr><th id=\"L630\"><a href=\"#L630\">630</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L631\"><a href=\"#L631\">631</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 directlyProvides(sys.modules[__name__], I1)</span></td></tr><tr><th id=\"L632\"><a href=\"#L632\">632</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L633\"><a href=\"#L633\">633</a></th><td></td></tr><tr><th id=\"L634\"><a href=\"#L634\">634</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">Declaration</span><span class=\"p\">(</span><span class=\"o\">*</span>interfaces<span class=\"p\">):</span></td></tr><tr><th id=\"L635\"><a href=\"#L635\">635</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Create an interface specification</span></td></tr><tr><th id=\"L636\"><a href=\"#L636\">636</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L637\"><a href=\"#L637\">637</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The arguments are one or more interfaces or interface</span></td></tr><tr><th id=\"L638\"><a href=\"#L638\">638</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications (IDeclaration objects).</span></td></tr><tr><th id=\"L639\"><a href=\"#L639\">639</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L640\"><a href=\"#L640\">640</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A new interface specification (IDeclaration) with</span></td></tr><tr><th id=\"L641\"><a href=\"#L641\">641</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the given interfaces is returned.</span></td></tr><tr><th id=\"L642\"><a href=\"#L642\">642</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L643\"><a href=\"#L643\">643</a></th><td></td></tr><tr><th id=\"L644\"><a href=\"#L644\">644</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IAdapterRegistry</span><span class=\"p\">(</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L645\"><a href=\"#L645\">645</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Provide an interface-based registry for adapters</span></td></tr><tr><th id=\"L646\"><a href=\"#L646\">646</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L647\"><a href=\"#L647\">647</a></th><td><span class=\"sd\">\u00a0 \u00a0 This registry registers objects that are in some sense \"from\" a</span></td></tr><tr><th id=\"L648\"><a href=\"#L648\">648</a></th><td><span class=\"sd\">\u00a0 \u00a0 sequence of specification to an interface and a name.</span></td></tr><tr><th id=\"L649\"><a href=\"#L649\">649</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L650\"><a href=\"#L650\">650</a></th><td><span class=\"sd\">\u00a0 \u00a0 No specific semantics are assumed for the registered objects,</span></td></tr><tr><th id=\"L651\"><a href=\"#L651\">651</a></th><td><span class=\"sd\">\u00a0 \u00a0 however, the most common application will be to register factories</span></td></tr><tr><th id=\"L652\"><a href=\"#L652\">652</a></th><td><span class=\"sd\">\u00a0 \u00a0 that adapt objects providing required specifications to a provided</span></td></tr><tr><th id=\"L653\"><a href=\"#L653\">653</a></th><td><span class=\"sd\">\u00a0 \u00a0 interface.</span></td></tr><tr><th id=\"L654\"><a href=\"#L654\">654</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L655\"><a href=\"#L655\">655</a></th><td></td></tr><tr><th id=\"L656\"><a href=\"#L656\">656</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">register</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0value<span class=\"p\">):</span></td></tr><tr><th id=\"L657\"><a href=\"#L657\">657</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Register a value</span></td></tr><tr><th id=\"L658\"><a href=\"#L658\">658</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L659\"><a href=\"#L659\">659</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A value is registered for a *sequence* of required specifications, a</span></td></tr><tr><th id=\"L660\"><a href=\"#L660\">660</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 provided interface, and a name.</span></td></tr><tr><th id=\"L661\"><a href=\"#L661\">661</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L662\"><a href=\"#L662\">662</a></th><td></td></tr><tr><th id=\"L663\"><a href=\"#L663\">663</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">registered</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">):</span></td></tr><tr><th id=\"L664\"><a href=\"#L664\">664</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return the component registered for the given interfaces and name</span></td></tr><tr><th id=\"L665\"><a href=\"#L665\">665</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L666\"><a href=\"#L666\">666</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Unlike the lookup method, this methods won't retrieve</span></td></tr><tr><th id=\"L667\"><a href=\"#L667\">667</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 components registered for more specific required interfaces or</span></td></tr><tr><th id=\"L668\"><a href=\"#L668\">668</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 less specific provided interfaces.</span></td></tr><tr><th id=\"L669\"><a href=\"#L669\">669</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L670\"><a href=\"#L670\">670</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If no component was registered exactly for the given</span></td></tr><tr><th id=\"L671\"><a href=\"#L671\">671</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interfaces and name, then None is returned.</span></td></tr><tr><th id=\"L672\"><a href=\"#L672\">672</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 </span></td></tr><tr><th id=\"L673\"><a href=\"#L673\">673</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L674\"><a href=\"#L674\">674</a></th><td>\u00a0 </td></tr><tr><th id=\"L675\"><a href=\"#L675\">675</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">lookup</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">''</span><span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L676\"><a href=\"#L676\">676</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Lookup a value</span></td></tr><tr><th id=\"L677\"><a href=\"#L677\">677</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L678\"><a href=\"#L678\">678</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A value is looked up based on a *sequence* of required</span></td></tr><tr><th id=\"L679\"><a href=\"#L679\">679</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications, a provided interface, and a name.</span></td></tr><tr><th id=\"L680\"><a href=\"#L680\">680</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L681\"><a href=\"#L681\">681</a></th><td></td></tr><tr><th id=\"L682\"><a href=\"#L682\">682</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">queryMultiAdapter</span><span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L683\"><a href=\"#L683\">683</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Adapt a sequence of objects to a named, provided, interface</span></td></tr><tr><th id=\"L684\"><a href=\"#L684\">684</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L685\"><a href=\"#L685\">685</a></th><td></td></tr><tr><th id=\"L686\"><a href=\"#L686\">686</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">lookup1</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L687\"><a href=\"#L687\">687</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Lookup a value using a single required interface</span></td></tr><tr><th id=\"L688\"><a href=\"#L688\">688</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L689\"><a href=\"#L689\">689</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A value is looked up based on a single required</span></td></tr><tr><th id=\"L690\"><a href=\"#L690\">690</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications, a provided interface, and a name.</span></td></tr><tr><th id=\"L691\"><a href=\"#L691\">691</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L692\"><a href=\"#L692\">692</a></th><td></td></tr><tr><th id=\"L693\"><a href=\"#L693\">693</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">queryAdapter</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L694\"><a href=\"#L694\">694</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Adapt an object using a registered adapter factory.</span></td></tr><tr><th id=\"L695\"><a href=\"#L695\">695</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L696\"><a href=\"#L696\">696</a></th><td></td></tr><tr><th id=\"L697\"><a href=\"#L697\">697</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">adapter_hook</span><span class=\"p\">(</span>provided<span class=\"p\">,</span>\u00a0<span class=\"nb\">object</span><span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">,</span>\u00a0default<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L698\"><a href=\"#L698\">698</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Adapt an object using a registered adapter factory.</span></td></tr><tr><th id=\"L699\"><a href=\"#L699\">699</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L700\"><a href=\"#L700\">700</a></th><td></td></tr><tr><th id=\"L701\"><a href=\"#L701\">701</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">lookupAll</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">):</span></td></tr><tr><th id=\"L702\"><a href=\"#L702\">702</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Find all adapters from the required to the provided interfaces</span></td></tr><tr><th id=\"L703\"><a href=\"#L703\">703</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L704\"><a href=\"#L704\">704</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 An iterable object is returned that provides name-value two-tuples.</span></td></tr><tr><th id=\"L705\"><a href=\"#L705\">705</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L706\"><a href=\"#L706\">706</a></th><td></td></tr><tr><th id=\"L707\"><a href=\"#L707\">707</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">names</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">):</span></td></tr><tr><th id=\"L708\"><a href=\"#L708\">708</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return the names for which there are registered objects</span></td></tr><tr><th id=\"L709\"><a href=\"#L709\">709</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L710\"><a href=\"#L710\">710</a></th><td></td></tr><tr><th id=\"L711\"><a href=\"#L711\">711</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">subscribe</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0subscriber<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">):</span></td></tr><tr><th id=\"L712\"><a href=\"#L712\">712</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Register a subscriber</span></td></tr><tr><th id=\"L713\"><a href=\"#L713\">713</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L714\"><a href=\"#L714\">714</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A subscriber is registered for a *sequence* of required</span></td></tr><tr><th id=\"L715\"><a href=\"#L715\">715</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specifications, a provided interface, and a name.</span></td></tr><tr><th id=\"L716\"><a href=\"#L716\">716</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L717\"><a href=\"#L717\">717</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Multiple subscribers may be registered for the same (or</span></td></tr><tr><th id=\"L718\"><a href=\"#L718\">718</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 equivalent) interfaces.</span></td></tr><tr><th id=\"L719\"><a href=\"#L719\">719</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L720\"><a href=\"#L720\">720</a></th><td></td></tr><tr><th id=\"L721\"><a href=\"#L721\">721</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">subscriptions</span><span class=\"p\">(</span>required<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">):</span></td></tr><tr><th id=\"L722\"><a href=\"#L722\">722</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get a sequence of subscribers</span></td></tr><tr><th id=\"L723\"><a href=\"#L723\">723</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L724\"><a href=\"#L724\">724</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Subscribers for a *sequence* of required interfaces, and a provided</span></td></tr><tr><th id=\"L725\"><a href=\"#L725\">725</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 interface are returned.</span></td></tr><tr><th id=\"L726\"><a href=\"#L726\">726</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L727\"><a href=\"#L727\">727</a></th><td></td></tr><tr><th id=\"L728\"><a href=\"#L728\">728</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">subscribers</span><span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0provided<span class=\"p\">,</span>\u00a0name<span class=\"o\">=</span><span class=\"s\">u''</span><span class=\"p\">):</span></td></tr><tr><th id=\"L729\"><a href=\"#L729\">729</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Get a sequence of subscription adapters</span></td></tr><tr><th id=\"L730\"><a href=\"#L730\">730</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/interfaces.py\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44207.0}