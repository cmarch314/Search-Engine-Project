{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 4 Reading and Writing Up 4 Reading and Writing Next 4 2 Reading Molecules with 4 1 Using OEChem oemolstreams The previous example demonstrated reading and writing SMILES strings from the command line This requires the programmer to perform the I O explicitly While this may be reasonable for SMILES strings that can be read on a single line it is unsuitable for more complex file formats To ease this task OEChem provides the molstream abstraction The classes oemolistream and oemolostream allow input and output of molecules from files or strings The first interface to stream I O uses functions to read and write molecules This is provided by the functions OEReadMolecule and OEWriteMolecule that both take a molstream and a OEMolBase as arguments As a high level function OEReadMolecule calls mol Clear automatically for each incoming molecule usr bin env python ch4 1 py from openeye oechem import ifs oemolistream ofs oemolostream mol OEGraphMol while OEReadMolecule ifs mol 1 OEWriteMolecule ofs mol Download as text In this example the script will read molecules from stdin in SMILES format and write them to stdout in absolute SMILES format Notice that in this example there s no need to call the Clear method to reset the molecule or OEAssignAromaticFlags to normalize aromaticity This is done automatically by the OEReadMolecule method OEChem Python Theory Manual Version 1 3 1 Previous 4 Reading and Writing Up 4 Reading and Writing Next 4 2 Reading Molecules with Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node17.html", "title": "4.1 using oechem oemolstreams", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>4.1 Using OEChem oemolstreams</title>\n<META NAME=\"description\" CONTENT=\"4.1 Using OEChem oemolstreams\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node18.html\">\n<LINK REL=\"previous\" HREF=\"node16.html\">\n<LINK REL=\"up\" HREF=\"node16.html\">\n<LINK REL=\"next\" HREF=\"node18.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node18.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node18.html\">4.2 Reading Molecules with</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION006100000000000000000\">\n4.1 Using OEChem oemolstreams</A>\n</H1>\n\n<P>\nThe previous example demonstrated reading and writing SMILES strings\nfrom the command line. This requires the programmer to perform the I/O\nexplicitly. While this may be reasonable for SMILES strings that can\nbe read on a single line, it is unsuitable for more complex file\nformats. To ease this task, OEChem provides the ``molstream''\nabstraction. The classes <code>oemolistream</code> and <code>oemolostream</code>\nallow input and output of molecules from files or strings.\n\n<P>\nThe first interface to stream I/O uses functions to read and write\nmolecules. This is provided by the functions OEReadMolecule and\nOEWriteMolecule that both take a molstream and a OEMolBase as\narguments. As a high-level function OEReadMolecule calls <code>mol.Clear()</code>\nautomatically for each incoming molecule.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch4-1.py\nfrom openeye.oechem import *\n\nifs = oemolistream()\nofs = oemolostream()\n\nmol = OEGraphMol()\n\nwhile (OEReadMolecule(ifs, mol) == 1):\n    OEWriteMolecule(ofs, mol)\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-1.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nIn this example, the script will read molecules from <code>stdin</code> in SMILES\nformat and write them to <code>stdout</code> in (absolute) SMILES format. Notice\nthat in this example, there's no need to call the Clear method\nto reset the molecule, or OEAssignAromaticFlags to normalize\naromaticity.  This is done automatically by the OEReadMolecule method.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node18.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node18.html\">4.2 Reading Molecules with</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37551.0}