{"text": "OEChem C Theory Manual Version 1 3 1 Previous 2 3 Creating a Molecule Up 2 Manipulating Molecules Next 3 Reading and Writing 2 4 Generating a SMILES from a Molecule To produce a SMILES string from a molecule use OEChem s OECreateCanSmiString OECreateCanSmiString converts the given OEMolBase into a canonical SMILES string and returns the result in a C string as defined by C s STL Note the slight asymmetry Many OEChem functions take const char as incoming arguments but return STL strings as results This usage makes the ownership of the strings explicit The should never be a difficulty as C and C strings may be easily inter converted using standard STL functions include oechem h include iostream include string using namespace OEChem using namespace std int main string str OEMol mol if OEParseSmiles mol c1ccccc1 OEAssignAromaticFlags mol OECreateCanSmiString str mol cout Canonical SMILES is str endl else cerr SMILES string was invalid endl return Download as text The following slightly more complicated example reads SMILES from cin and writes their canonical SMILES to cout include oechem h include iostream include string using namespace OEChem using namespace std int main char buffer 1 24 string str OEMol mol while cin getline buffer 1 24 mol Clear if OEParseSmiles mol buffer OEAssignAromaticFlags mol OECreateCanSmiString str mol cout str endl else cerr buffer is an invalid SMILES endl return Download as text Notice that this example makes use of the OEMolBase Clear function to reuse the molecule The behavior of OEParseSmiles is to add the given smiles to the current molecule If the line mol Clear were removed from the program the output would contain longer and longer SMILES containing disconnected fragments The above program could also have been written to construct and destruct molecules and strings include oechem h include iostream include string using namespace OEChem using namespace std int main char buffer 1 24 while cin getline buffer 1 24 OEMol mol if OEParseSmiles mol buffer string str OEAssignAromaticFlags mol OECreateCanSmiString str mol cout str endl else cerr buffer is an invalid SMILES endl return Download as text OEChem C Theory Manual Version 1 3 1 Previous 2 3 Creating a Molecule Up 2 Manipulating Molecules Next 3 Reading and Writing Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node13.html", "title": "2.4 generating a smiles from a molecule", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>2.4 Generating a SMILES from a Molecule</title>\n<META NAME=\"description\" CONTENT=\"2.4 Generating a SMILES from a Molecule\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node12.html\">\n<LINK REL=\"up\" HREF=\"node9.html\">\n<LINK REL=\"next\" HREF=\"node14.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node12.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node9.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node12.html\">2.3 Creating a Molecule</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node9.html\">2. Manipulating Molecules</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node14.html\">3. Reading and Writing</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION005400000000000000000\">\n2.4 Generating a SMILES from a Molecule</A>\n</H1>\n\n<P>\nTo produce a SMILES string from a molecule, use OEChem's\nOECreateCanSmiString. OECreateCanSmiString converts the given OEMolBase\ninto a canonical SMILES string and returns the result in a C++ string\n(as defined by C++'s STL).  Note the slight asymmetry: Many OEChem\nfunctions take <code>const char *</code> as incoming arguments, but return STL\n<code>strings</code> as results.  This usage makes the ownership of the strings\nexplicit.  The should never be a difficulty as C and C++ strings may be\neasily inter-converted using standard STL functions.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace OEChem;\nusing namespace std;\n\nint main()\n{\n  string str;\n  OEMol mol;\n\n  if (OEParseSmiles(mol,\"c1ccccc1\"))\n  {\n    OEAssignAromaticFlags(mol);\n    OECreateCanSmiString(str,mol);\n    cout &lt;&#60; \"Canonical SMILES is \" &lt;&#60; str &lt;&#60; endl;\n  }\n  else cerr &lt;&#60; \"SMILES string was invalid!\" &lt;&#60; endl;\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-7.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe following slightly more complicated example reads SMILES from cin\nand writes their canonical SMILES to cout.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace OEChem;\nusing namespace std;\n\nint main()\n{\n  char buffer[1024];\n  string str;\n  OEMol mol;\n\n  while (cin.getline(buffer,1024))\n  {\n    mol.Clear();\n    if (OEParseSmiles(mol,buffer))\n    {\n      OEAssignAromaticFlags(mol);\n      OECreateCanSmiString(str,mol);\n      cout &lt;&#60; str &lt;&#60; endl;\n    }\n    else cerr &lt;&#60; buffer &lt;&#60; \" is an invalid SMILES!\" &lt;&#60; endl;\n  }\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-8.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nNotice that this example makes use of the <code>OEMolBase::Clear</code> function to\nreuse the molecule.  The behavior of OEParseSmiles is to <i>add</i> the given\nsmiles to the current molecule.  If the line <code>mol.Clear()</code> were removed\nfrom the program, the output would contain longer and longer SMILES\ncontaining disconnected fragments.\n\n<P>\nThe above program could also have been written to construct and destruct\nmolecules and strings:\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace OEChem;\nusing namespace std;\n\nint main()\n{\n  char buffer[1024];\n\n  while (cin.getline(buffer,1024))\n  {\n    OEMol mol;\n    if (OEParseSmiles(mol,buffer))\n    {\n      string str;\n      OEAssignAromaticFlags(mol);\n      OECreateCanSmiString(str,mol);\n      cout &lt;&#60; str &lt;&#60; endl;\n    }\n    else cerr &lt;&#60; buffer &lt;&#60; \" is an invalid SMILES!\" &lt;&#60; endl;\n  }\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-9.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node12.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node9.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node12.html\">2.3 Creating a Molecule</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node9.html\">2. Manipulating Molecules</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node14.html\">3. Reading and Writing</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38769.0}