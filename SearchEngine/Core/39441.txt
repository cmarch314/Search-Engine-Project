{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Circle 2 Kernel Definition An object of type Circle 2 Kernel is a circle in the two dimensional Euclidean plane 2 The circle is oriented i e its boundary has clockwise or counterclockwise orientation The boundary splits 2 into a positive and a negative side where the positive side is to the left of the boundary The boundary also splits 2 into a bounded and an unbounded side Note that the circle can be degenerated i e the squared radius may be zero Creation Circle 2 Kernel c Point 2 Kernel center Kernel FT squared radius Orientation ori COUNTERCLOCKWISE introduces a variable c of type Circle 2 Kernel It is initialized to the circle with center center squared radius squared radius and orientation ori Precondition ori COLLINEAR and further squared radius Circle 2 Kernel c Point 2 Kernel p Point 2 Kernel q Point 2 Kernel r introduces a variable c of type Circle 2 Kernel It is initialized to the unique circle which passes through the points p q and r The orientation of the circle is the orientation of the point triple p q r Precondition p q and r are not collinear Circle 2 Kernel c Point 2 Kernel p Point 2 Kernel q Orientation ori COUNTERCLOCKWISE introduces a variable c of type Circle 2 Kernel It is initialized to the circle with diameter pq and orientation ori Precondition ori COLLINEAR Circle 2 Kernel c Point 2 Kernel center Orientation ori COUNTERCLOCKWISE introduces a variable c of type Circle 2 Kernel It is initialized to the circle with center center squared radius zero and orientation ori Precondition ori COLLINEAR Postcondition c is degenerate true Access Functions Point 2 Kernel c center returns the center of c Kernel FT c squared radius returns the squared radius of c Orientation c orientation returns the orientation of c bool c operator circle2 returns true iff c and circle2 are equal i e if they have the same center same squared radius and same orientation bool c operator circle2 returns true iff c and circle2 are not equal Predicates bool c is degenerate returns true iff c is degenerate i e if c has squared radius zero Oriented side c oriented side Point 2 Kernel p returns either the constant ON ORIENTED BOUNDARY ON POSITIVE SIDE or ON NEGATIVE SIDE iff p lies on the boundary properly on the positive side or properly on the negative side of c resp Bounded side c bounded side Point 2 Kernel p returns ON BOUNDED SIDE ON BOUNDARY or ON UNBOUNDED SIDE iff p lies properly inside on the boundary or properly outside of c resp bool c has on positive side Point 2 Kernel p bool c has on negative side Point 2 Kernel p bool c has on boundary Point 2 Kernel p bool c has on bounded side Point 2 Kernel p bool c has on unbounded side Point 2 Kernel p Miscellaneous Circle 2 Kernel c opposite returns the circle with the same center and squared radius as c but with opposite orientation Circle 2 Kernel c orthogonal transform Aff transformation 2 Kernel at returns the circle obtained by applying at on c Precondition at is an orthogonal transformation Bbox 2 c bbox returns a bounding box containing c See Also Kernel Circle 2 Next Direction 2 Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Circle_2.html", "title": "circle_2&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Circle_2.tex' -->\n<html> <head>  \n<title>Circle_2&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_43\"></A>\n\n<A NAME=\"Cross_link_anchor_44\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_43\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Circle_2<Kernel>\"></A>\n<h2><I>CGAL::Circle_2&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn object of type <I><A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> is a circle in the\ntwo-dimensional Euclidean plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH>. The circle is oriented, i.e. \nits boundary has clockwise or counterclockwise \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n. The\nboundary splits <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH> into a positive and a negative side, where the\npositive side is to the left of the boundary. The boundary also\nsplits <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH> into a bounded and an unbounded side. Note that the\ncircle can be degenerated, i.e. the squared radius may be zero.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; c ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; center,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT <A HREF=\"Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A>,<BR>\n\n<A HREF=\"Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> ori = <A HREF=\"Constant_COUNTERCLOCKWISE.html#Cross_link_anchor_123\">COUNTERCLOCKWISE</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>c</I> of type <I><A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n        It is initialized to the circle with center <I>center</I>,\n        squared radius <I><A HREF=\"Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A></I> and \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n\n        <I>ori</I>.<BR>\n\n<EM>Precondition: </EM><I>ori</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC=\"cc_neq.gif\"> </I></MATH> <I><A HREF=\"Constant_COLLINEAR.html#Cross_link_anchor_125\">COLLINEAR</A></I>, and further,\n                   <I><A HREF=\"Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A></I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> </I></MATH> 0.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; c ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,<BR>\n\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; q,<BR>\n\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; r);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>c</I> of type <I><A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n        It is initialized to the unique circle which passes through\n        the points <I>p</I>, <I>q</I> and <I>r</I>. The \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n of\n        the circle is the \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n of the point triple <I>p</I>,\n        <I>q</I>, <I>r</I>.<BR>\n\n<EM>Precondition: </EM><I>p</I>, <I>q</I>, and <I>r</I> are not <A HREF=\"Function_collinear.html#Cross_link_anchor_167\">collinear</A>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; c ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,<BR>\n\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; q,<BR>\n\n<A HREF=\"Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> ori = <A HREF=\"Constant_COUNTERCLOCKWISE.html#Cross_link_anchor_123\">COUNTERCLOCKWISE</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>c</I> of type <I><A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n        It is initialized to the circle with diameter \n        <MATH><I>pq</I></MATH>\n        and \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n <I>ori</I>.<BR>\n\n<EM>Precondition: </EM><I>ori</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC=\"cc_neq.gif\"> </I></MATH> <I><A HREF=\"Constant_COLLINEAR.html#Cross_link_anchor_125\">COLLINEAR</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; c ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; center,<BR>\n\n<A HREF=\"Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> ori = <A HREF=\"Constant_COUNTERCLOCKWISE.html#Cross_link_anchor_123\">COUNTERCLOCKWISE</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>c</I> of type <I><A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n        It is initialized to the circle with center <I>center</I>, squared\n        radius zero and \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n <I>ori</I>.<BR>\n\n<EM>Precondition: </EM><I>ori</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC=\"cc_neq.gif\"> </I></MATH> <I><A HREF=\"Constant_COLLINEAR.html#Cross_link_anchor_125\">COLLINEAR</A></I>.<BR>\n\n<EM>Postcondition: </EM><I>c</I>.<I>is_degenerate()</I> = <I>true</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_const__center6_9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    c.center ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the center of <I>c</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_const__squared_radius6_9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.<A HREF=\"Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A> ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the squared radius of <I>c</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Orientation_const__orientation6_9_const;\"></A>\n<A HREF=\"Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    c.<A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n of <I>c</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator_==_6_Circle_26Kernel9_const__circle29_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.operator == (  circle2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>c</I> and <I>circle2</I> are equal,\n        i.e. if they have the same center, same squared radius and\n        same \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator_!=_6_Circle_26Kernel9_const__circle29_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.operator != (  circle2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>c</I> and <I>circle2</I> are not equal.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate6_9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    c.is_degenerate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>c</I> is degenerate, i.e.         if <I>c</I> has squared radius zero.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_oriented_side6_Point_26Kernel9_const__p9_const;\"></A>\n<A HREF=\"Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.oriented_side ( <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns either the constant <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I>, \n        <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I>, or <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I>,\n        iff <I>p</I> lies on the boundary, properly on the\n        positive side, or properly on the negative side\n        of <I>c</I>, resp.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bounded_side_bounded_side6_Point_26Kernel9_const__p9_const;\"></A>\n<A HREF=\"Enum_Bounded_side.html#Cross_link_anchor_99\">Bounded_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.bounded_side ( <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I><A HREF=\"Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A></I>,\n        <I><A HREF=\"Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A></I>, or <I><A HREF=\"Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A></I>\n        iff <I>p</I> lies properly inside, on the boundary, or properly\n        outside of <I>c</I>, resp.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_positive_side6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.has_on_positive_side (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_negative_side6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.has_on_negative_side (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_boundary6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.has_on_boundary (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_bounded_side6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.has_on_bounded_side (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_unbounded_side6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    c.has_on_unbounded_side (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Circle_26Kernel9_opposite69_const;\"></A>\n<A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    c.<A HREF=\"Function_opposite.html#Cross_link_anchor_243\">opposite</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the circle with the same center and squared radius as\n        <I>c</I> but with \n<!-- REMOVE_LINKS_BEGIN -->\nopposite\n<!-- REMOVE_LINKS_END -->\n \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Circle_26Kernel9_orthogonal_transform6_Aff_transformation_26Kernel9_const__at9_const;\"></A>\n<A HREF=\"Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    c.orthogonal_transform ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; at)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the circle obtained by applying <MATH><I>at</I></MATH> on <I>c</I>.<BR>\n\n<EM>Precondition: </EM><I>at</I> is an orthogonal transformation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bbox_2_bbox69_const;\"></A>\n<A HREF=\"Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    c.bbox ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a bounding box containing <I>c</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Concept_Kernel--Circle_2.html#Cross_link_anchor_288\">Kernel::Circle_2</A></I><BR>\n\n\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Direction_2.html\"><I>Direction_2&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39441.0}