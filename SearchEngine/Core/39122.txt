{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Delaunay triangulation 2 Traits Tds Definition The class Delaunay triangulation 2 Traits Tds is designed to represent the Delaunay triangulation of a set of points in a plane A Delaunay triangulation of a set of points is a triangulation of the sets of points that fulfills the following empty circle property also called Delaunay property the circumscribing circle of any facet of the triangulation contains no point of the set in its interior For a point set with no case of cocircularity of more than three points the Delaunay triangulation is unique it is the dual of the Voronoi diagram of the points Inherits FromTriangulation 2 Traits Tds ParametersThe template parameter Tds is to be instantiated with a model of TriangulationDataStructure 2 CGALprovides a default instantiation for this parameter which is the class CGAL Triangulation data structure 2 CGAL Triangulation vertex base 2 Traits CGAL Triangulation face base 2 Traits The geometric traits Traits is to be instantiated with a model of DelaunayTriangulationTraits 2 The concept DelaunayTriangulationTraits 2 refines the concept TriangulationTraits 2 providing a predicate type to check the empty circle property Changing this predicate type allows to build Delaunay triangulations for different metrics such that L1 or L or any metric defined by a convex object However the user of an exotic metric must be careful that the constructed triangulation has to be a triangulation of the convex hull which means that convex hull edges have to be Delaunay edges This is granted for any smooth convex metric like L2 and can be ensured for other metrics like L by the addition to the point set of well chosen sentinel points The concept of DelaunayTriangulationTraits 2 is described When dealing with a large triangulations the user is advised to encapsulate the Delanay triangulation class into a triangulation hierarchy which means to use the class Triangulation hierarchy 2 Tr with the template parameter instantiated with Delaunay triangulation 2 Traits Tds The triangulation hierachy will then offer the same functionalities but be much more for efficient for locations and insertions include CGAL Delaunay triangulation 2 h Inherits From Triangulation 2 Traits Tds TypesInherits all the types defined in Triangulation 2 Traits Tds Creation Delaunay triangulation 2 Traits Tds dt Traits gt Traits default constructor Delaunay triangulation 2 Traits Tds dt tr copy constructor All the vertices and faces are duplicated Insertion and Removal The following insertion and removal functions overwrite the functions inherited from the class Triangulation 2 Traits Tds to maintain the Delaunay property Vertex handle dt insert Point p Face handle f Face handle inserts point p If point p coincides with an already existing vertex this vertex is returned and the triangulation is not updated Optional parameter f is used to initialize the location of p Vertex handle dt insert Point p Locate type lt Face handle loc int li inserts a point p the location of which is supposed to be given by lt loc li see the description of member function locate in class Triangulation 2 Traits Tds Vertex handle dt push back Point p equivalent to insert p template class InputIterator int dt insert InputIterator first InputIterator last inserts the points in the range first last Returns the number of inserted points Precondition The value type of first and last is Point void dt remove Vertex handle v removes the vertex from the triangulation Note that the other modifier functions of Triangulation 2 Traits Tds are not overwritten Thus a call to insert in face insert in edge insert outside convex hull insert outside affine hull or flip on a valid Delaunay triangulation might lead to a triangulation which is no longer a Delaunay triangulation Queries Vertex handle dt nearest vertex Point p Face handle f Face handle returns any nearest vertex of p The implemented function begins with a location step and f may be used to initialize the location template class OutputItFaces class OutputItBoundaryEdges std pair OutputItFaces OutputItBoundaryEdges dt get conflicts and boundary Point p OutputItFaces fit OutputItBoundaryEdges eit Face handle start OutputItFaces is an output iterator with Face handle as value type OutputItBoundaryEdges stands for an output iterator with Edge as value type This members function outputs in the container pointed to by fit the faces which are in conflict with point p i e the faces whose circumcircle contains p It outputs in the container pointed to by eit the the boundary of the zone in conflict with p The boundary edges of the conflict zone are ouput in counter clockwise order and each edge is described through its incident face which is not in conflict with p The function returns in a std pair the resulting output iterators template class OutputItFaces OutputItFaces dt get conflicts Point p OutputItFaces fit Face handle start same as above except that only the faces in conflict with p are output The function returns the resulting output iterator template class OutputItBoundaryEdges OutputItBoundaryEdges dt get boundary of conflicts Point p OutputItBoundaryEdges eit Face handle start OutputItBoundaryEdges stands for an output iterator with Edge as value type This function outputs in the container pointed to by eit the boundary of the zone in conflict with p The boundary edges of the conflict zone are ouput in counterclockwise order and each edge is described through the incident face which is not in conflict with p The function returns the resulting output iterator Voronoi diagram The following member functions provide the elements of the dual Voronoi diagram Point dt dual Face handle f Returns the center of the circle circumscribed to face f Precondition f is not infinite Object dt dual Edge e returns a segment a ray or a line supported by the bisector of the endpoints of e If faces incident to e are both finite a segment whose endpoints are the duals of each incident face is returned If only one incident face is finite a ray whose endpoint is the dual of the finite incident face is returned Otherwise both incident faces are infinite and the bisector line is returned Object dt dual Edge circulator ec Idem Object dt dual Edge iterator ei Idem template class Stream Stream dt draw dual Stream ps output the dual voronoi diagram to stream ps Predicates Oriented side dt side of oriented circle Face handle f Point p Returns the side of p with respect to the circle circumscribing the triangle associated with f advanced Miscellaneous The checking function is valid is also overwritten to additionally test the empty circle property bool dt is valid bool verbose false int level tests the validity of the triangulation as a Triangulation 2 and additionally tests the Delaunay property This method is mainly useful for debugging Delaunay triangulation algorithms designed by the user advanced See Also CGAL Triangulation 2 Traits Tds TriangulationDataStructure 2 DelaunayTriangulationTraits 2 Triangulation hierarchy 2 Tr Implementation Insertion is implemented by inserting in the triangulation then performing a sequence of Delaunay flips The number of flips is O d if the new vertex is of degree d in the new triangulation For points distributed uniformly at random insertion takes time O 1 on average Removal calls the removal in the triangulation and then retriangulates the hole in such a way that the Delaunay criterion is satisfied Removal of a vertex of degree d takes time O d 2 The degree d is O 1 for a random vertex in the triangulation After a point location step the nearest neighbor is found in time O n in the worst case but in time O 1 for vertices distributed uniformly at random and any query point Next Triangulation 2 Traits Tds Locate type Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Triangulation_2_ref/Class_Delaunay_triangulation_2.html", "title": "delaunay_triangulation_2&lt;traits,tds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Triangulation_2_ref/Delaunay_triangulation_2.tex' -->\n<html> <head>  \n<title>Delaunay_triangulation_2&lt;Traits,Tds&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_919\"></A>\n\n<A NAME=\"Cross_link_anchor_920\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_881\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Delaunay_triangulation_2<Traits,Tds>\"></A>\n<h2><I>CGAL::Delaunay_triangulation_2&lt;Traits,Tds&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;Traits,Tds&gt;</I> is designed to represent\nthe Delaunay triangulation of a set of points in a plane.\nA  Delaunay triangulation of a set of points\nis a triangulation of the sets of points that fulfills\nthe following <I>empty circle property</I> \n(also called <I>Delaunay property</I>): the circumscribing\ncircle of any facet\nof the triangulation contains no point of the set in its interior.\nFor a point set with no case of cocircularity \nof more than three points,\nthe Delaunay triangulation is unique, it is  the dual\nof the Voronoi diagram of the points.\n<P>\n\n<H3>Inherits From</H3><I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I>.\n<P>\n\n<H3>Parameters</H3>The template parameter <I>Tds</I>\nis to be instantiated with a model of\n<I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>.\nC<SMALL>GAL</SMALL>provides a default instantiation for this parameter,\nwhich is the class \n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A> &lt;                        <A HREF=\"Class_Triangulation_vertex_base_2.html#Cross_link_anchor_954\">CGAL::Triangulation_vertex_base_2</A>&lt;Traits&gt;,                        <A HREF=\"Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Traits&gt; &gt;</I>.\n<P>\n\nThe geometric traits <I>Traits</I> \nis to be instantiated with a model of\n<I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I>.\nThe concept <I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I> refines the\nconcept <I><A HREF=\"Concept_TriangulationTraits_2.html#Cross_link_anchor_936\">TriangulationTraits_2</A></I>, providing\na predicate type \nto check the empty circle property.\n<P>\n\nChanging this predicate type\nallows to build Delaunay triangulations for different metrics\nsuch that <MATH><I>L<SUB>1</SUB></I></MATH> or <MATH><I>L<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> or any metric defined by a\nconvex object. However, the user of an exotic metric\nmust be careful that the constructed triangulation \nhas to be a triangulation of the convex hull\nwhich means that convex hull edges have to be Delaunay edges.\nThis is granted for any smooth convex metric (like <MATH><I>L<SUB>2</SUB></I></MATH>)\nand can be ensured for other metrics (like  <MATH><I>L<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>)\nby the addition to the point set of well chosen sentinel points\nThe concept of <I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I> is  described\n.\n<P>\n\nWhen dealing\nwith a large triangulations, the user is advised to \nencapsulate  the Delanay triangulation class into a\ntriangulation hierarchy, which means to use  the class\n<I><A HREF=\"Class_Triangulation_hierarchy_2.html#Cross_link_anchor_951\">Triangulation_hierarchy_2</A>&lt;Tr&gt;</I>\nwith the template parameter instantiated with <I><A HREF=\"Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;Traits,Tds&gt;</I> .\nThe triangulation hierachy will then  offer the same \nfunctionalities  but be much more for efficient \nfor locations and insertions.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Delaunay_triangulation_2.h\">CGAL/Delaunay_triangulation_2.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3>\n<P>\n\n<I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I>\n<P>\n\n<H3>Types</H3>Inherits all the types defined in  <I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I>.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;Traits,Tds&gt; dt (  Traits gt = Traits());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;Traits,Tds&gt; dt (  tr);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    copy constructor. All the vertices and faces are duplicated.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion and Removal</H3>\n<P>\n\nThe following insertion and removal  functions overwrite\nthe functions inherited from the class\n<I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I> to maintain the Delaunay property.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point__p+_Face_handle_f=Face_handle699;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.insert (  Point p,  Face_handle f=Face_handle())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts  point <I>p</I>.\nIf point <I>p</I> coincides with an already existing vertex, this \nvertex is returned and the triangulation is not updated.\nOptional parameter <I>f</I> is used to initialize the location of <I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point__p+_Locate_type__lt+_Face_handle_loc+_int_li_9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    dt.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\n<A HREF=\"Enum_Triangulation_2-Traits-Tds---Locate_type#Enum_Locate_type\">Locate_type</A>&amp; lt,<BR>\n\nFace_handle loc,<BR>\n\nint li)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts a point <I>p</I>, the location of which is supposed to be\ngiven by <I>(lt,loc,li)</I>, see the description of member function\n<I>locate</I> in class <I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_push_back6const_Point__p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.push_back (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    equivalent to <I>insert(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_insert6InputIterator_first+_InputIterator_last9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.insert ( InputIterator first,  InputIterator last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the points in the range\n <MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>.\n Returns the number of inserted points.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and <I>last</I>\n is <I>Point</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.remove ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the vertex from the triangulation.\n        </TD></TR>\n        </TABLE>\n<P>\n\nNote that the other modifier functions  of\n<I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I> are not overwritten.\nThus a  call to <I>insert_in_face</I>\n<I>insert_in_edge</I>, <I>insert_outside_convex_hull</I>,\n<I>insert_outside_affine_hull</I>  or <I>flip</I>\non a valid Delaunay triangulation might lead to a triangulation\nwhich is no longer a Delaunay triangulation.\n<P>\n\n<H3>Queries</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_vertex6const_Point__p+_Face_handle_f=Face_handle699;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    dt.nearest_vertex ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nFace_handle f=Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns any nearest vertex of <I>p</I>. The implemented function\nbegins with a location step and\n<I>f</I> may be used to initialize the location.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItFaces, class OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6OutputItFaces+OutputItBoundaryEdges9_get_conflicts_and_boundary6const_Point__p+_OutputItFaces_fit+_OutputItBoundaryEdges_eit+_Face_handle_start9_const;\"></A>\nstd::pair&lt;OutputItFaces,OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    dt.get_conflicts_and_boundary ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItFaces fit,<BR>\n\nOutputItBoundaryEdges eit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>OutputItFaces</I> is an output iterator with <I>Face_handle</I> as value type.\n<I>OutputItBoundaryEdges</I> stands for an output iterator with <I>Edge</I> as value type.\nThis members function outputs in the container pointed to by <I>fit</I>\nthe faces which are in conflict with point <I>p</I>\ni. e. the faces whose circumcircle contains <I>p</I>.\nIt outputs in the container pointed to by <I>eit</I> the \nthe boundary of the zone in conflict with <I>p</I>.\nThe boundary edges\nof the conflict  zone are ouput in counter-clockwise order\nand each edge is described  through its incident face\nwhich is not in conflict with <I>p</I>.\nThe function returns in a std::pair the resulting output iterators.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItFaces&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputItFaces_get_conflicts_6const_Point__p+_OutputItFaces_fit+_Face_handle_start9_const;\"></A>\nOutputItFaces\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    dt.get_conflicts ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItFaces fit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    same as above except that only the faces in conflict with <I>p</I>\nare output. The function returns the resulting output iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_OutputItBoundaryEdges_get_boundary_of_conflicts6const_Point__p+_OutputItBoundaryEdges_eit+_Face_handle_start9_const;\"></A>\nOutputItBoundaryEdges\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    dt.get_boundary_of_conflicts ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItBoundaryEdges eit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>OutputItBoundaryEdges</I> stands for an output iterator with \n<I>Edge</I> as value\ntype.\n This function  outputs in the container pointed to by <I>eit</I>,\nthe boundary of the zone in conflict with <I>p</I>. The boundary edges\nof the conflict  zone are ouput in counterclockwise order\nand each edge is described  through the incident face\nwhich is not in conflict with <I>p</I>.\nThe function returns the resulting output iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Voronoi diagram</H3>\n\n \n     \n<A NAME=\"Index_anchor_882\"></A> \n \n   \n\nThe following member functions provide the elements of the\ndual Voronoi diagram.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_dual6const_Face_handle__f9_const;\"></A>\nPoint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.dual (  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the center of the circle circumscribed to face <I>f</I>.<BR>\n\n<EM>Precondition: </EM><I>f</I> is not infinite\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_dual6const_Edge__e9_const;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_88\">Object</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    dt.dual (  Edge e)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a segment, a ray or a line supported by the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of the\nendpoints of <I>e</I>.\nIf faces incident to <I>e</I> are both finite, a segment whose endpoints are the\nduals of each incident face is returned. If only one incident face is\nfinite, a\nray whose endpoint is the dual of the finite incident face is returned.\nOtherwise both incident faces\nare infinite and the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> line is returned.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_dual6const_Edge_circulator__ec9_const;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_88\">Object</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.dual (  Edge_circulator ec)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Idem\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_dual6const_Edge_iterator__ei9_const;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_88\">Object</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.dual (  Edge_iterator ei)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Idem\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Stream&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual6Stream___ps9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.draw_dual ( Stream &amp; ps)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    output the dual voronoi diagram to stream ps.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_side_of_oriented_circle6Face_handle_f+_const_Point__p9_const;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.<A HREF=\"../Kernel_23_ref/Function_side_of_oriented_circle.html#Cross_link_anchor_261\">side_of_oriented_circle</A> ( Face_handle f,  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the side of <I>p</I> with respect to the circle circumscribing\n the triangle associated with <I>f</I>\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Miscellaneous</H3>\n<P>\n\nThe checking function <I>is_valid()</I> is also overwritten\nto additionally test the empty circle property.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false+_int_level_=_09_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    dt.is_valid ( bool verbose = false,  int level = 0)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    tests the validity of the triangulation as a <I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A></I>\nand additionally tests the Delaunay property. This method is\n mainly  useful for debugging Delaunay triangulation algorithms designed by\n the user.\n        </TD></TR>\n        </TABLE>\n\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_938\">CGAL::Triangulation_2</A>&lt;Traits,Tds&gt;</I>,<BR>\n\n<I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>,<BR>\n\n<I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I>,<BR>\n\n<I><A HREF=\"Class_Triangulation_hierarchy_2.html#Cross_link_anchor_951\">Triangulation_hierarchy_2</A>&lt;Tr&gt;</I>.\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nInsertion is implemented by inserting in the triangulation, then\nperforming a sequence of Delaunay flips. The number of flips is O(d)\nif the new vertex is of degree d in the new triangulation. For\npoints distributed uniformly at random, insertion takes time O(1) on\naverage.\n<P>\n\nRemoval calls the removal in the triangulation and then retriangulates\nthe hole in such a way that  the Delaunay criterion is satisfied. Removal of a\nvertex of degree d takes time O(d^2).\nThe degree d is O(1) for a random\nvertex in the triangulation.\n<P>\n\nAfter a point location step, the nearest neighbor \nis found in time O(n) in the\nworst case, but in time O(1)\nfor vertices distributed uniformly at random  and any query point.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Enum_Triangulation_2-Traits-Tds---Locate_type.html\"><I>Triangulation_2&lt;Traits,Tds&gt;::Locate_type</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_32!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39122.0}