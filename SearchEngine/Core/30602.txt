{"text": "Coding Style Introduction to Computer Science I III ICS 21 22 23 Introduction This lecture discusses coding style including why using good style while writing our programs can help us debug them faster We will discuss in detail four important aspects of style names alignment locality and comments Most decisions that we make about formating our programs closely involve one of these four aspects You should also start reading in Vermeulen The Elements of Java Style Specifically this lecture covers items 5 15 25 26 and 32 37 which appear on pages 5 18 25 26 and 31 36 in Vermeulen s book Coding Style Programmers spend an enormous amount of time reading and studying code when they are writing testing and debugging their programs Using good programming style allows this process to proceed much more easily When writing a program using iterative enhancement it is an excellent idea to beautify your code at the end of each enhancement before proceding to the next one each enhancement should result in the best code possible before continuing to the next enhancement Ultimately this strategy will save you time compared to the strategy often used by students ignore style until the program is completely written This is a penny wise pound foolish strategy It is much harder to finish a poorly styled program because it is harder to read and understand it software engineers must learn to practice techniques that overcome human nature this is one example In the real world companies have their own style guidelines which all their programmers must follow see Vermuelen s book or Scott Ambler s Java Coding Standards In this way code written by different programmers is consistent and therefore more easily readable by other programmers So it is not unreasonable for me to ask you to write in a certain style as consistently as you can We will use four general principles to discuss issues in programming style backwards they are the acronym CLAN Names Alignment Locality Comments Good Names Programmers get to choose identifiers that name variables and as we will see later in this course methods parameters classes exceptions etc We should choose descriptive names Yes we should also try to choose short names but descriptiveness is more important A long descriptive name is better than a short unclear one Of course a short descriptive name is optimal Beginning programmers typically choose names that are too short they abbreviate too much or use just single letter names Rather than declaring int qs qs means quarters declare a variable named quarters and then if necessary comment on some other aspect of the name like its units Using longer names requires a bit more typing which costs some time and takes longer to read ditto but it makes it much easier for you to understand your program as you are enhancing debugging it which saves much much much more time Examine the names that I use in my sample and solution programs and mimic them So far we have learned the following Java naming conventions Names of Variable start with lower case letters and use upper case letters at the start of each word in the name camel style e g dartsInCircle Names of classes start with upper case letters and use use other upper case letters at the start of each word in the name e g StringTokenizer Names of public static final fields are written in all upper case and use underscores to separate each word in the name e g PI SPEED OF LIGHT Alignment indenting Generally we use whitespace to present our programs to humans not computers in an easy to read and understand form Remember that adding extra whitespace doesn t affect the meaning of our programs the sequence of tokens is still the same but it does affect how a program is displayed in the editor while we are reading it Using extra whitespace will make the program longer but easier to read In fact in one early style of written English scriptio continua words were strung together with no intervening whitespace Itwasstillreadablebutveryslowanddifficulttocomprehend Sometimes smaller isn t simpler Alignment involves mostly using horizontal whitespace The most important use of alignment is showing which statements are controlled by which control structures with the controlled statements indented to appear inside the statements that control them This relationship is the essence of using control structures so highlighting it is critical There is a pattern in how we write control structures For example in the block after main all statements are indented at the same level public static void main String args statement1 statement2 statementn A typical indentation for these statements and others inside control structures illustrated below is 2 4 spaces one space is too little and more than four is too much the Goldilocks principle again In fact the indent icons in the editor red left arrow followed by text or red right arrow followed by text make it easy to select multiple lines of text and indent or outdent them 2 spaces at a time Likewise in an if statement we use the following forms depending on whether or not the statement contolled by the if is a block if test statementT if test statementT1 statementT2 statementTn For an if else statement there are four possiblities based on the absence or presense of blocks From simplest to most complicated they are if test statementT else statementF if test statementT else statementF1 statementFn if test statementT1 statementTn else statementF if test statementT1 statementTn else statementF1 statementFn I like to write else on the same line but Vermeulen likes to write else Many programmers adopt a style that ALWAYS use blocks in if statements and loops even if they contain just ONE statement On the positive side such an approach makes it very easy to add remove statements when debugging enhancing programs because the block is already there otherwise going from one to more statements requires adding a block and going from multiple to one statement requires removing the block On the negative side blocks when they are unneccessary make the program a harder to read So choose whichever of these options you think is better but be consistent with your choice I like blocks where necessary but Vermeulen likes always blocks Finally identically to if statements we align a for loop by indenting the statement that is their body for statement for statement1 statement2 statementn Almost all interesting loops use a block for their bodies Very few have trivially simple loops and loops that have one try catch statement in their bodies try catch has most of its code in its try block I cannot overemphasize how important it is to use proper alignment in control structures A major source of programming errors for beginners is not understanding which statements are controlled by which control structures these can get tricky with expression statements inside if statements inside loops Proper alignment makes such relationships much simpler to see I have seen students spend 2 hours trying to debug a program at which point then finally spend 1 minutes aligning its statements because I refuse to help them until they do and then they solve their problem by themselves in 1 minute If you expect to debug your programs it is imperative that you use proper alignment whenever you add remove code to from them You can get Eclipse to automatically indent your code select the code to be aligned and then select the Source pull down menu and the Correct Indentation option A faster way to do this is ctrl a then ctrl i the first selects all the code in a file the second realigns it Use this feature repeatedly as you write your code to make sure it is always clearly indented so you can see which control structures control which statements You can even change how Eclipse does indentation and more generally presents your program in an editor by changing information in Windows Preferences but doing so is beyond the scope of this course but feel free to disclose Java CodeStyle and Java Editor and experiment Another use of alignment occurs when declaring a sequence of variables rather than doing so haphazardly we can align the types names initial values and comments int game Current game being played int maxGames 1 Limit on games for one customer int winCount For statistics see WL Ratio too int loseCount double winLoseRatio Calculated at the end of a session Some programmers think that this kind of alignment is too much trouble because if you add remove declarations you must realign them I think the effort is worth it So please examine all the alignment that I use in my sample and solution programs and mimic them Locality paragraphing Locality is the most subjective of the style rules It involves mostly adding extra vertical whitespace blank lines By grouping statements together and then placing blank lines between groups we create the programming equivalent of paragraphs in prose writing where each paragraph contains related sentences In a written paper students would never put all the sentences into one long paragraph likewise students would never make every sentence into its own paragraph So we should always use a more reasonable grouping some number of related lines for paragraphing in our programs Typically each code group should contain a half dozen statements The magic number 7 2 is also used for psychological reasons it represents the number of items typically usable in the brain s short term memory Whenever a large number of statements appear in a block of code use blank lines to group them into a smaller number of related sequences We can write a preface comment see below that acts as a topic sentence for the paragraph of code A for loop and try catch almost always start their own group so do complicated if statements Locality is more art than rules I encourage you to examine the groupings that I use in my sample and solution programs and try to critique and ultimately emulate them Comments We document our programs with comments While we try to express ourselves as well as we can with Java code there is always other useful information about a program that we would like communicate to programmers reading our code including ourself while debugging it or at some future date when we are enhancing our code Such information is for programmers not the computer not the instructions saying HOW the code works that is for the programmer and computer but WHAT the program does and WHY it does it that way We supply this information in comments There are a few different categories of comments that frequently reappear Preface comments act as a topic sentence describing a group of related statements that directly follow the comment Use the locality principle with such comments there should be more blank lines separating the comment from the code before it which it doesn t describe than blank lines separating the comment from the code after it which it does describe Taken together and indented appropriately these commments provide an outline of the program Every loop should have a preface comment for other statements comment them as necessary Sidebar comments appear on the same line after some statement They help explain that statement sometimes a series of sidebar comments will also help outline the computation Use alignment so that all the sidebar comments are aligned that makes it very easy to have the code separated from the comments more use of the locality rule Sandwhich comments directly preface and suffix some statement with no blank lines lines Use a sandwhich comment to make the if break statements terminating a long loop easy to locate if index maxIndex break Avoid mingling comments within code separate them horizontally or vertically for clarity In the following example use the FORMER side bar comment not the latter code both have the same tokens when comments are treated as white space d v t distance velocity times time d distance v velocity t time Like the other rules of good style comments are best included while the program is being written not after it is working I find and correct many errors while writing comments because I am focusing on the code while writing about it Again many students approach writing comments as something to do AFTER the program is complete which ultimately slows them down Examine the comments that I use in my sample and solution programs and try to critique and ultimately emulate them Miscellaneous Style Rules Finally here are some miscellaneous style rules Use local variables whenever they clarify the code keeping expression sizes managable use the goldilocks principle Don t reuse variable names for more than one purpose Choose the types for variables carefully If a variable stores only integral values declare it to be an int use explicit conversion if you need to use it as a double in some expression s Initialize variables when they are declared but don t initialize them at all if the next use of the variable is to store something into it Use about 8 characters per line remember that a carriage return is whitespace so don t write huge lines of code Good style is cumulative each style improvement may marginally improve a program but many can dramatically improve it Write code to be easily readable and understandable Don t obfuscate code because you think it will make the code run faster Compilers do amazing optimizations Problem Set To ensure that you understand all the material in this lecture please solve the the announced problems after you read the lecture If you get stumped on any problem go back and read the relevant part of the lecture If you still have questions please get help from the Instructor a CA or any other student Each of the following blocks computes the average of the scores entered by the user Notice the difference between where score is declared and initialized Which code do you think is best Explain why int count int sum int score for score Prompt forInt Enter score 1 to terminate if score 1 break count sum score System out println Average sum count int count int sum for int score Prompt forInt Enter score 1 to terminate if score 1 break count sum score System out println Average sum count Does Java allow any of the following code fragments with a redeclaration of v If so what values are printed a int v System out println v int v 1 System out println v System out println v b int v System out println v int v System out println v c int v System out println v System out println v int v System out println v d int v System out println v System out println v int v System out println v ", "_id": "http://www.ics.uci.edu/~pattis/ICS-21/lectures/style/lecture.html", "title": "coding style", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Coding Style</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Coding Style</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I-III\r\n<br>\r\nICS-21/-22/-23</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  This lecture discusses coding style, including why using good style while\r\n    writing our programs can help us debug them faster.\r\n  We will discuss in detail four important aspects of style:\r\n    names, alignment, locality, and comments.\r\n  Most decisions that we make about formating our programs closely involve one\r\n    of these four aspects.\r\n  You should also start reading in Vermeulen,\r\n    <i>The Elements of Java Style</i>.\r\n  Specifically, this lecture covers <b>items</b> 5-15, 25-26, and 32-37 (which\r\n    appear  on pages 5-18, 25-26, and 31-36 in Vermeulen's book).\r\n\r\n\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Style -->\r\n\r\n<a name=\"Style\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Coding Style</b></td>\r\n<td width =\"80%\">\r\n  Programmers spend an enormous amount of time reading and studying code when\r\n    they are writing, testing, and debugging their programs.\r\n  Using good programming style allows this process to proceed much more easily.\r\n  When writing a program using iterative-enhancement, it is an excellent idea\r\n    to beautify your code at the end of each enhancement, before proceding to\r\n    the next one; each enhancement should result in the best code possible,\r\n    before continuing to the next enhancement.\r\n  Ultimately, this strategy will save you time compared to the strategy often\r\n    used by students: ignore style until the program is completely written.\r\n  This is a penny-wise, pound-foolish strategy.\r\n  It is much harder to \"finish\" a  poorly-styled program, because it is harder\r\n    to read and understand it; (software) engineers must learn to practice\r\n    techniques that overcome human nature; this is one example.\r\n  <p>\r\n  In the real world, companies have their own style guidelines, which all their\r\n    programmers must follow (see Vermuelen's book or Scott Ambler's\r\n    <a href=\"../../../common/handouts/javaCodingStandards.pdf\">Java Coding\r\n    Standards</a>).\r\n  In this way, code written by different programmers is consistent (and \r\n    therefore more easily readable by other programmers).\r\n  So, it is not unreasonable for me to ask you to write in a certain style, as\r\n    consistently as you can.\r\n  <p>\r\n  We will use four general principles to discuss issues in programming style (backwards, they\r\n    are the acronym CLAN).\r\n  <ul>\r\n    <li>Names\r\n    <li>Alignment\r\n    <li>Locality\r\n    <li>Comments\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Good Names -->\r\n\r\n<a name=\"Names\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Good Names</b></td>\r\n<td width =\"80%\">\r\n  Programmers get to choose identifiers that name variables (and as we will\r\n    see later in this course methods, parameters, classes, exceptions, etc).\r\n  We should choose descriptive names.\r\n  Yes, we should also try to choose short names, but descriptiveness is more\r\n    important.\r\n  A long descriptive name is better than a short unclear one.\r\n  Of course, a short descriptive name is optimal.\r\n  <p>\r\n  Beginning programmers typically choose names that are too short: they\r\n    abbreviate too much, or use just single letter names.\r\n  Rather than declaring <b><pre>int qs; //qs means quarters</pre></b> declare\r\n    a variable named <b>quarters</b> (and then, if necessary, comment on some\r\n    other aspect of the name -like its units).\r\n  Using longer names requires a bit more typing (which costs some time) and\r\n    takes longer to read (ditto) but it makes it much easier for you to\r\n    <b>understand</b> your program as you are enhancing/debugging it (which\r\n    saves much much much more time).\r\n  Examine the names that I use in my sample and solution programs and mimic\r\n    them.\r\n  <p>\r\n  So far, we have learned the following Java naming conventions.\r\n  <ul>\r\n    <li>Names of Variable start with lower-case letters, and use upper-case \r\n          letters at the start of each word in the name (\"camel-style\"):\r\n          e.g., <b>dartsInCircle</b>.\r\n    <li>Names of classes start with upper-case letters,and use use other\r\n          upper-case letters at the start of each word in the name: e.g.,\r\n          <b>StringTokenizer</b>.\r\n    <li>Names of <b>public static final<b> fields are written in all\r\n          upper-case, and use underscores to separate each word in the name:\r\n          e.g., <b>PI</b>, <b>SPEED_OF_LIGHT</b>.\r\n  </ul>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Alignment/Indenting -->\r\n\r\n<a name=\"Alignment\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Alignment<br>(indenting)</b></td>\r\n<td width =\"80%\">\r\n  Generally, we use whitespace to present our programs (to humans, not\r\n    computers) in an easy to  read and understand form.\r\n  Remember that adding extra whitespace doesn't affect the meaning of our\r\n    programs (the sequence of tokens is still the same), but it does affect\r\n    how a program is displayed in the editor while we are reading it.\r\n  <p>\r\n  Using extra whitespace will make the program \"longer\" but easier to read.\r\n  In fact, in one early style of written English (scriptio continua), words\r\n    were strung together with no intervening whitespace.\r\n  Itwasstillreadablebutveryslowanddifficulttocomprehend.\r\n  Sometimes smaller isn't simpler.\r\n  <p>\r\n  Alignment involves mostly using horizontal whitespace.\r\n  The most important use of alignment is showing which statements are\r\n    controlled by which control structures, with the controlled statements\r\n    indented to appear <i>inside</i> the statements that control them.\r\n  This relationship is the essence of using control structures, so\r\n    highlighting it is critical.\r\n  <p>\r\n  There is a pattern in how we write control structures.\r\n  For example in the block after <b>main()</b>, all statements are indented at the same level.\r\n  <b><pre>  public static void main (String[] args) {\r\n     statement<sub>1</sub>\r\n     statement<sub>2</sub>\r\n     ...\r\n     statement<sub>n</sub>\r\n  }</pre></b>\r\n  A typical indentation for these statements (and others inside control\r\n    structures, illustrated below) is 2-4 spaces: one space is too little and\r\n     more than four is too much (the Goldilocks principle again).\r\n  In fact, the indent icons in the editor (red left-arrow followed by text or\r\n    red right-arrow followed by text) make it easy to select multiple lines of\r\n    text and indent (or outdent) them 2 spaces at a time.\r\n  <p>\r\n  Likewise, in an <b>if</b> statement we use the following forms (depending on\r\n    whether or not the statement contolled by the <b>if</b> is a block)\r\n  <b><pre>  if (test)\r\n    statement<sub>T</sub>\r\n\r\n  if (test) {\r\n    statement<sub>T1</sub>\r\n    statement<sub>T2</sub>\r\n    ...\r\n    statement<sub>Tn</sub>\r\n  }</pre></b>\r\n  For an <b>if/else</b> statement, there are four possiblities (based on the\r\n    absence or presense of blocks).\r\n  From simplest to most complicated, they are:\r\n  <b><pre>  if (test)\r\n    statement<sub>T</sub>\r\n  else\r\n    statement<sub>F</sub>\r\n\r\n\r\n  if (test)\r\n    statement<sub>T</sub>\r\n  else{\r\n    statement<sub>F1</sub>\r\n    ...\r\n    statement<sub>Fn</sub>\r\n  }\r\n\r\n\r\n  if (test) {\r\n    statement<sub>T1</sub>\r\n    ...\r\n    statement<sub>Tn</sub>\r\n  }else\r\n    statement<sub>F</sub>\r\n\r\n\r\n  if (test) {\r\n    statement<sub>T1</sub>\r\n    ...\r\n    statement<sub>Tn</sub>\r\n  }else{\r\n    statement<sub>F1</sub>\r\n    ...\r\n    statement<sub>Fn</sub>\r\n  }</pre></b>\r\n  I like to write <b>}else{</b> on the same line, but Vermeulen likes to write\r\n<b><pre>  }\r\n  else{</pre></b>\r\n  <p>\r\n  Many programmers adopt a style that ALWAYS use blocks in <b>if</b>\r\n    statements (and loops), even if they  contain just ONE statement.\r\n  On the positive side, such an approach makes it very easy to add/remove\r\n    statements (when debugging/enhancing programs), because the block is\r\n    already there; otherwise going from one to more statements requires\r\n    adding a block, and going from multiple to one statement requires removing\r\n    the block.\r\n  On the negative side, blocks, when they are unneccessary, make the program a\r\n    harder to read.\r\n  So, choose whichever of these options you think is better, but be consistent\r\n    with your choice.\r\n  I like \"blocks where necessary\" but Vermeulen likes \"always blocks\".\r\n  <p>\r\n  Finally, identically to <b>if</b> statements, we align a <b>for</b> loop by\r\n    indenting the statement that is their body.\r\n  <b><pre>  for (;;)\r\n     statement\r\n\r\n  for (;;) {\r\n    statement<sub>1</sub>\r\n    statement<sub>2</sub>\r\n    ...\r\n    statement<sub>n</sub>\r\n  }</pre></b>\r\n  Almost all interesting loops use a block for their bodies.\r\n  Very few have trivially simple loops, and loops that have one\r\n    <b>try-catch</b> statement in their bodies (<b>try-catch</b> has most of\r\n    its code in its <b>try</b> block.\r\n  <p>\r\n  I cannot overemphasize how important it is to use proper alignment in control\r\n    structures.\r\n  A major source of programming errors for beginners is not understanding which\r\n    statements are controlled by which control structures: these can get\r\n    tricky with expression statements inside <b>if</b> statements inside loops.\r\n  Proper alignment makes such relationships much simpler to see.\r\n  I have seen students spend 2 hours trying to debug a program; at which point\r\n    then finally spend 10 minutes aligning its statements (because I refuse to\r\n    help them until they do), and then they solve their problem by themselves \r\n    in 1 minute.\r\n  If you expect to debug your programs, it is imperative that you use proper\r\n    alignment whenever you add/remove code to/from them.\r\n  <p>\r\n  You can get Eclipse to automatically indent your code:\r\n    select the code to be aligned and then select the <b>Source</b>\r\n    pull-down menu and the <b>Correct Indentation</b> option.\r\n  (A faster way to do this is ctrl/a then ctrl/i: the first selects\r\n   all the code in a file, the second realigns it.)\r\n  Use this feature repeatedly as you write your code, to make sure it is\r\n    always clearly indented, so you can see which control structures\r\n    control which statements.\r\n  You can even change how Eclipse does indentation (and more generally\r\n    presents your program in an editor) by changing information in\r\n    <b>Windows | Preferences</b>, but doing so is beyond the scope of\r\n    this course (but feel free to disclose <b>Java | CodeStyle</b> and\r\n     <b>Java | Editor</b>) and experiment.\r\n  <p>\r\n  Another use of alignment occurs when declaring a sequence of variables;\r\n    rather than doing so haphazardly, we can align the types, names, initial\r\n    values, and comments.\r\n  <b><pre>  int    game      =  0;    //Current game being played\r\n  int    maxGames  = 10;    //Limit on games for one customer\r\n  int    winCount  =  0;    //For statistics (see WL_Ratio too)\r\n  int    loseCount =  0;\r\n  double winLoseRatio;      //Calculated at the end of a session</pre></b>\r\n  Some programmers think that this kind of alignment is too much trouble,\r\n    because if you add/remove declarations, you must realign them; I think the\r\n    effort is worth it.\r\n  So please examine all the alignment that I use in my sample and solution\r\n    programs and mimic them.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Locality -->\r\n\r\n<a name=\"Locality\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Locality<br>(paragraphing)</b></td>\r\n<td width =\"80%\">\r\n  Locality is the most subjective of the style rules.\r\n  It involves mostly adding extra vertical whitespace (blank lines).\r\n  By grouping statements together and then placing blank lines between groups,\r\n    we create the programming equivalent of paragraphs in prose writing (where\r\n    each paragraph contains related sentences).\r\n  In a written paper, students would never put all the sentences into one long\r\n    paragraph; likewise, students would never make every sentence into its own\r\n    paragraph.\r\n  So, we should always use a more reasonable grouping (some number of related\r\n    lines) for paragraphing in our programs.\r\n  <p>\r\n  Typically, each code group should contain a half-dozen statements.\r\n  The magic number 7+/-2 is also used for psychological reasons: it represents\r\n    the number of items typically usable in the brain's short-term memory.\r\n  Whenever a large number of statements appear in a block of code, use blank\r\n    lines to group them into a smaller number of related sequences.\r\n  We can write a preface comment (see below) that acts as a topic sentence for\r\n     the paragraph of code.\r\n  <p>\r\n  A <b>for</b> loop and <b>try-catch</b> almost always start their own group;\r\n    so do complicated <b>if</b> statements.\r\n  Locality is more art than rules; I encourage you to examine the groupings\r\n    that I use in my sample and solution programs and try to critique and\r\n    ultimately emulate them.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Comments -->\r\n\r\n<a name=\"Comments\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Comments</b></td>\r\n<td width =\"80%\">\r\n  We document our programs with comments.\r\n  While we try to express ourselves as well as we can with Java code, there is\r\n     always other useful information about a program that we would like \r\n     communicate to programmers reading our code (including ourself, while\r\n     debugging it, or at some future date when we are enhancing our code).\r\n  Such information is for programmers, not the computer: not the instructions \r\n    saying HOW the code works (that is for the programmer and computer), but \r\n    WHAT the program does and WHY it does it (that way).\r\n  We supply this information in comments. \r\n  <p>\r\n  There are a few different categories of comments that frequently reappear.\r\n  <ul>\r\n    <li>Preface comments act as a topic-sentence, describing a group of related\r\n         statements that directly follow the comment.\r\n        Use the locality principle with such comments:\r\n        there should be more blank lines separating the comment from the code\r\n           before it (which it doesn't describe) than blank lines separating\r\n           the comment from the code after it (which it does describe).\r\n        Taken together, and indented appropriately, these commments provide an\r\n          outline of the program.\r\n        Every loop should have a preface comment; for other statements, comment\r\n          them as necessary.\r\n    <p>\r\n    <li>Sidebar comments appear on the same line, after some statement.\r\n        They help explain that statement; sometimes a series of sidebar\r\n           comments will also help outline the computation.\r\n        Use alignment so that all the sidebar comments are aligned: that makes\r\n          it very easy to have the code separated from the comments (more use \r\n          of the locality rule).\r\n    <p>\r\n    <li>\"Sandwhich comments\" directly preface and suffix some statement (with\r\n          no blank lines lines).\r\n        Use a sandwhich comment to make the <b>if/break;</b> statements\r\n          terminating a long loop easy to locate.\r\n <pre><b>  //////////////////////\r\n  if (index == maxIndex)\r\n    break;\r\n  //////////////////////</b></pre>\r\n     <p>\r\n     <li>Avoid mingling comments within code; separate them (horizontally or\r\n           vertically) for clarity.\r\n         In the following example use the FORMER side-bar comment, not the\r\n         latter, code (both have the same tokens, when comments are treated\r\n         as white-space).\r\n <pre><b>  d = v*t;  //distance = velocity times time\r\n  d /*distance*/ = v /*velocity*/ * t /*time*/;</b>\r\n  </ul>\r\n  Like the other rules of good style, comments are best included while the\r\n     program is being written, not after it is working.\r\n  I find and correct many errors while writing comments, because I am focusing\r\n     on the code while writing about it.\r\n  Again, many students approach writing comments as something to do AFTER the\r\n    program is complete, which ultimately slows them down.\r\n  Examine the comments that I use in my sample and solution programs and try\r\n    to critique and ultimately emulate them.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Misc -->\r\n\r\n<a name=\"Misc\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Miscellaneous Style Rules</b></td>\r\n<td width =\"80%\">\r\n  Finally, here are some miscellaneous style rules\r\n  <ul>\r\n    <li>Use local variables whenever they clarify the code, keeping expression\r\n          sizes managable; use the goldilocks principle\r\n    <li>Don't reuse variable names for more than one purpose.\r\n    <li>Choose the types for variables carefully.\r\n        If a variable stores only integral values, declare it to be an\r\n          <b>int</b>; use explicit conversion if you need to use it as a\r\n          <b>double</b> in some expression(s).\r\n    <li>Initialize variables when they are declared; but don't initialize\r\n          them at all if the next use of the variable is to store something\r\n          into it.\r\n    <li>Use about 80 characters per line; remember that a carriage return\r\n          is whitespace, so don't write huge lines of code.\r\n    <li>Good style is cumulative: each style improvement may marginally\r\n          improve a program; but many can dramatically improve it.\r\n  </ul>\r\n  Write code to be easily readable and understandable.\r\n  Don't obfuscate code because you think it will make the code run faster.\r\n  Compilers do amazing optimizations.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Problem Set -->\r\n\r\n<a name=\"ProblemSet\"><hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem Set</b></td>\r\n<td width =\"80%\">\r\n  To ensure that you understand all the material in this lecture, please solve\r\n    the the announced problems after you read the lecture.\r\n  <p>\r\n  If you get stumped on any problem, go back and read the relevant part of the\r\n     lecture.\r\n  If you still have questions, please get help from the Instructor, a CA, \r\n    or any other student.\r\n  <ol> \r\n    <li>Each of the following blocks computes the average of the scores entered by the\r\n          user.\r\n        Notice the difference between where <b>score</b> is declared and initialized.\r\n        Which code do you think is best? Explain why.\r\n<pre><b>  int count = 0;\r\n  int sum   = 0;\r\n  int score;\r\n  for (;;) {\r\n    score = Prompt.forInt(\"Enter score (-1 to terminate)\");\r\n    if (score == -1)\r\n      break;\r\n    count++;\r\n    sum += score;\r\n  }\r\n  System.out.println(\"Average = \" + sum/count);\r\n\r\n\r\n  int count = 0;\r\n  int sum   = 0;\r\n  for (;;) {\r\n    int score = Prompt.forInt(\"Enter score (-1 to terminate)\");\r\n    if (score == -1)\r\n      break;\r\n    count++;\r\n    sum += score;\r\n  }\r\n  System.out.println(\"Average = \" + sum/count);</b></pre>\r\n\r\n  <p>\r\n    <li>Does Java allow any of the following code fragments (with a redeclaration\r\n          of <b>v</b>).\r\n        If so, what values are printed.\r\n<pre><b>\r\n<b>a)</b>{\r\n    int v = 0;\r\n    System.out.println(v);\r\n    {\r\n      int v = 1;\r\n      System.out.println(v);\r\n    }\r\n    System.out.println(v);\r\n  }\r\n\r\n\r\n\r\n<b>b)</b>{\r\n    {\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n    {\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n  }\r\n\r\n\r\n<b>c)</b>{\r\n    {\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n    System.out.println(v);\r\n\r\n    {\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n }\r\n\r\n\r\n<b>d)</b>{\r\n    {\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n    {\r\n      System.out.println(v);\r\n      int v = 0;\r\n      System.out.println(v);\r\n    }\r\n\r\n  }</b></pre>\r\n  </ol>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n</body>\r\n</html>\r\n", "id": 30602.0}