{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Apollonius graph 2 Gt Agds Definition The class Apollonius graph 2 Gt Agds represents the Apollonius graph It supports insertions and deletions of sites It is templated by two template arguments Gt which must be a model of ApolloniusGraphTraits 2 and Agds which must be a model of ApolloniusGraphDataStructure 2 The second template argument defaults to CGAL Triangulation data structure 2 CGAL Apollonius graph vertex base 2 Gt true CGAL Triangulation face base 2 Gt include CGAL Apollonius graph 2 h Types typedef Agds Data structure A type for the underlying data structure typedef Gt Geom traits A type for the geometric traits typedef Gt Point 2 Point 2 A type for the point defined in the geometric traits typedef Gt Site 2 Site 2 A type for the Apollonius site defined in the geometric traits The vertices and faces of the Apollonius graph are accessed through handles iterators and circulators The iterators and circulators are all bidirectional and non mutable The circulators and iterators are assignable to the corresponding handle types and they are also convertible to the corresponding handles The edges of the Apollonius graph can also be visited through iterators and circulators the edge circulators and iterators are also bidirectional and non mutable In the following we call infinite any face or edge incident to the infinite vertex and the infinite vertex itself Any other feature face edge or vertex of the Apollonius graph is said to be finite Some iterators the All iterators allow to visit finite or infinite features while the others the Finite iterators visit only finite features Circulators visit both infinite and finite features typedef Data structure Edge Edge the edge type The Edge f i is the edge common to faces f and f neighbor i It is also the edge joining the vertices vertex cw i and vertex ccw i of f Precondition i must be 1 or 2 typedef Data structure Vertex handle Vertex handle A type for a handle to a vertex typedef Data structure Face handle Face handle A type for a handle to a face typedef Data structure Vertex circulator Vertex circulator A type for a circulator over vertices incident to a given vertex typedef Data structure Face circulator Face circulator A type for a circulator over faces incident to a given vertex typedef Data structure Edge circulator Edge circulator A type for a circulator over edges incident to a given vertex typedef Data structure All vertices iterator All vertices iterator A type for an iterator over all vertices typedef Data structure Finite vertices iterator Finite vertices iterator A type for an iterator over finite vertices typedef Data structure All faces iterator All faces iterator A type for an iterator over all faces typedef Data structure Finite faces iterator Finite faces iterator A type for an iterator over finite faces typedef Data structure All edges iterator All edges iterator A type for an iterator over all edges typedef Data structure Finite edges iterator Finite edges iterator A type for an iterator over finite edges typedef Data structure size type size type An unsigned integral type In addition to iterators and circulators for vertices and faces iterators for sites are provided In particular there are iterators for the entire set of sites the hidden sites and the visible sites of the Apollonius graph Apollonius graph 2 Gt Agds Sites iterator A type for an iterator over all sites Apollonius graph 2 Gt Agds Visible sites iterator A type for an iterator over all visible sites Apollonius graph 2 Gt Agds Hidden sites iterator A type for an iterator over all hidden sites Creation Apollonius graph 2 Gt Agds ag Gt gt Gt Creates an Apollonius graph using gt as geometric traits template class Input iterator Apollonius graph 2 Gt Agds ag Input iterator first Input iterator beyond Gt gt Gt Creates an Apollonius graph using gt as geometric traits and inserts all sites in the range first beyond Precondition Input iterator must be a model of InputIterator The value type of Input iterator must be Site 2 Apollonius graph 2 Gt Agds ag other Copy constructor All faces and vertices are duplicated After the construction ag and other refer to two different Apollonius graphs if other is modified ag is not Apollonius graph 2 Gt Agds ag other Assignment If ag and other are the same object nothing is done Otherwise all the vertices and faces are duplicated After the assignment ag and other refer to different Apollonius graphs if other is modified ag is not Access Functions Geom traits ag geom traits Returns a reference to the Apollonius graph traits object int ag dimension Returns the dimension of the Apollonius graph size type ag number of vertices Returns the number of finite vertices size type ag number of visible sites Returns the number of visible sites size type ag number of hidden sites Returns the number of hidden sites size type ag number of faces Returns the number of faces both finite and infinite of the Apollonius graph Face handle ag infinite face Returns a face incident to the infinite vertex Vertex handle ag infinite vertex Returns the infinite vertex Vertex handle ag finite vertex Returns a vertex distinct from the infinite vertex Precondition The number of visible vertices in the Apollonius graph must be at least one Traversal of the Apollonius graph An Apollonius graph can be seen as a container of faces and vertices Therefore the Apollonius graph provides several iterators and circulators that allow to traverse it completely or partially Face Edge and Vertex Iterators The following iterators allow respectively to visit finite faces finite edges and finite vertices of the Apollonius graph These iterators are non mutable bidirectional and their value types are respectively Face Edge and Vertex They are all invalidated by any change in the Apollonius graph Finite vertices iterator ag finite vertices begin Starts at an arbitrary finite vertex Finite vertices iterator ag finite vertices end Past the end iterator Finite edges iterator ag finite edges begin Starts at an arbitrary finite edge Finite edges iterator ag finite edges end Past the end iterator Finite faces iterator ag finite faces begin Starts at an arbitrary finite face Finite faces iterator ag finite faces end Past the end iterator The following iterators allow respectively to visit all both finite and infinite faces edges and vertices of the Apollonius graph These iterators are non mutable bidirectional and their value types are respectively Face Edge and Vertex They are all invalidated by any change in the Apollonius graph All vertices iterator ag all vertices begin Starts at an arbitrary vertex All vertices iterator ag all vertices end Past the end iterator All edges iterator ag all edges begin Starts at an arbitrary edge All edges iterator ag all edges end Past the end iterator All faces iterator ag all faces begin Starts at an arbitrary face All faces iterator ag all faces end Past the end iterator Site iterators The following iterators allow respectively to visit all sites the visible sites and the hidden sites These iterators are non mutable bidirectional and their value type is Site 2 They are all invalidated by any change in the Apollonius graph Sites iterator ag sites begin Starts at an arbitrary site Sites iterator ag sites end Past the end iterator Visible sites iterator ag visible sites begin Starts at an arbitrary visible site Visible sites iterator ag visible sites end Past the end iterator Hidden sites iterator ag hidden sites begin Starts at an arbitrary hidden site Hidden sites iterator ag hidden sites end Past the end iterator Face Edge and Vertex Circulators The Apollonius graph also provides circulators that allow to visit respectively all faces or edges incident to a given vertex or all vertices adjacent to a given vertex These circulators are non mutable and bidirectional The operator operator moves the circulator counterclockwise around the vertex while the operator moves clockwise A face circulator is invalidated by any modification of the face pointed to An edge circulator is invalidated by any modification in one of the two faces incident to the edge pointed to A vertex circulator is invalidated by any modification in any of the faces adjacent to the vertex pointed to Face circulator ag incident faces Vertex handle v Starts at an arbitrary face incident to v Face circulator ag incident faces Vertex handle v Face handle f Starts at face f Precondition Face f is incident to vertex v Edge circulator ag incident edges Vertex handle v Starts at an arbitrary edge incident to v Edge circulator ag incident edges Vertex handle v Face handle f Starts at the first edge of f incident to v in counterclockwise order around v Precondition Face f is incident to vertex v Vertex circulator ag incident vertices Vertex handle v Starts at an arbitrary vertex incident to v Vertex circulator ag incident vertices Vertex handle v Face handle f Starts at the first vertex of f adjacent to v in counterclockwise order around v Precondition Face f is incident to vertex v Traversal of the Convex Hull Applied on the infinite vertex the above functions allow to visit the vertices on the convex hull and the infinite edges and faces Note that a counterclockwise traversal of the vertices adjacent to the infinite vertex is a clockwise traversal of the convex hull Vertex circulator ag incident vertices ag infinite vertex Vertex circulator ag incident vertices ag infinite vertex Face handle f Face circulator ag incident faces ag infinite vertex Face circulator ag incident faces ag infinite vertex Face handle f Edge circulator ag incident edges ag infinite vertex Edge circulator ag incident edges ag infinite vertex Face handle f PredicatesThe class Apollonius graph 2 Gt Agds provides methods to test the finite or infinite character of any feature bool ag is infinite Vertex handle v true iff v is the infinite vertex bool ag is infinite Face handle f true iff face f is infinite bool ag is infinite Face handle f int i true iff edge f i is infinite bool ag is infinite Edge e true iff edge e is infinite bool ag is infinite Edge circulator ec true iff edge ec is infinite Insertion template class Input iterator unsigned int ag insert Input iterator first Input iterator beyond Inserts the sites in the range first beyond The number of sites in the range first beyond is returned Precondition Input iterator must be a model of InputIterator and its value type must be Site 2 Vertex handle ag insert Site 2 s Inserts the site s in the Apollonius graph If s is visible then the vertex handle of s is returned otherwise Vertex handle NULL is returned Vertex handle ag insert Site 2 s Vertex handle vnear Inserts s in the Apollonius graph using the site associated with vnear as an estimate for the nearest neighbor of the center of s If s is visible then the vertex handle of s is returned otherwise Vertex handle NULL is returned Removal void ag remove Vertex handle v Removes the site associated to the vertex handle v from the Apollonius graph Precondition v must correspond to a valid finite vertex of the Apollonius graph Nearest neighbor location Vertex handle ag nearest neighbor Point 2 p Finds the nearest neighbor of the point p In other words it finds the site whose Apollonius cell contains p Ties are broken arbitrarily and one of the nearest neighbors of p is returned If there are no visible sites in the Apollonius diagram Vertex handle NULL is returned Vertex handle ag nearest neighbor Point 2 p Vertex handle vnear Finds the nearest neighbor of the point p using the site associated with vnear as an estimate for the nearest neighbor of p Ties are broken arbitrarily and one of the nearest neighbors of p is returned If there are no visible sites in the Apollonius diagram Vertex handle NULL is returned Access to the dual The Apollonius graph 2 class provides access to the duals of the faces of the graph The dual of a face of the Apollonius graph is a site If the originating face is infinite its dual is a site with center at infinity or equivalently with infinite weight which means that it can be represented geometrically as a line If the originating face is finite its dual is a site with finite center and weight In the following three methods the returned object is assignable to either Site 2 or Gt Line 2 depending on whether the corresponding face of the Apollonius graph is finite or infinite respectively Gt Object 2 ag dual Face handle f Returns the dual corresponding to the face handle f The returned object can be assignable to one of the following Site 2 Gt Line 2 Gt Object 2 ag dual All faces iterator it Returns the dual of the face to which it points to The returned object can be assignable to one of the following Site 2 Gt Line 2 Gt Object 2 ag dual Finite faces iterator it Returns the dual of the face to which it points to The returned object can be assignable to one of the following Site 2 Gt Line 2 I O template class Stream Stream ag draw primal Stream str Draws the Apollonius graph to the stream str Precondition The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 template class Stream Stream ag draw dual Stream str Draws the dual of the Apollonius graph i e the Apollonius diagram to the stream str Precondition The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 template class Stream Stream ag draw primal edge Edge e Stream str Draws the edge e of the Apollonius graph to the stream str Precondition The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 template class Stream Stream ag draw dual edge Edge e Stream str Draws the dual of the edge e to the stream str The dual of e is an edge of the Apollonius diagram Precondition The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 Validity check bool ag is valid bool verbose false int level 1 Checks the validity of the Apollonius graph If verbose is true a short message is sent to std cerr If level is only the data structure is validated If level is 1 then both the data structure and the Apollonius graph are validated Negative values of level always return true and values greater then 1 are equivalent to level being 1 Miscellaneous void ag clear Clears all contents of the Apollonius graph void ag swap other The Apollonius graphs other and ag are swapped ag swap other should be preferred to ag other or to ag other if other is deleted afterwards See AlsoApolloniusGraphTraits 2 ApolloniusGraphDataStructure 2 ApolloniusGraphVertexBase 2 TriangulationFaceBase 2 CGAL Apollonius graph traits 2 K Method tag CGAL Apollonius graph filtered traits 2 CK CM EK EM FK FM CGAL Triangulation data structure 2 Vb Fb CGAL Apollonius graph vertex base 2 Gt StoreHidden CGAL Triangulation face base 2 Gt Next ApolloniusSite 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Apollonius_graph_2_ref/Class_Apollonius_graph_2.html", "title": "apollonius_graph_2&lt;gt,agds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Apollonius_graph_2_ref/Apollonius_graph_2.tex' -->\n<html> <head>  \n<title>Apollonius_graph_2&lt;Gt,Agds&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1066\"></A>\n\n<A NAME=\"Cross_link_anchor_1067\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_979\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Apollonius_graph_2<Gt,Agds>\"></A>\n<h2><I>CGAL::Apollonius_graph_2&lt;Gt,Agds&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> represents the\nApollonius graph. It supports insertions and deletions of sites.\nIt is templated by two template arguments <I>Gt</I>, which\nmust be a model of <I><A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A></I>, and <I>Agds</I>,\nwhich must be a model of <I><A HREF=\"Concept_ApolloniusGraphDataStructure_2.html#Cross_link_anchor_1071\">ApolloniusGraphDataStructure_2</A></I>.\nThe second template argument defaults to\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;  <A HREF=\"Class_Apollonius_graph_vertex_base_2.html#Cross_link_anchor_1073\">CGAL::Apollonius_graph_vertex_base_2</A>&lt;Gt,true&gt;, <A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Gt&gt; &gt;</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Apollonius_graph_2.h\">CGAL/Apollonius_graph_2.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Data_structure\"></A>\n<A NAME=\"Typedef_Data_structure\"></A>\ntypedef Agds\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Data_structure;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the underlying\ndata structure.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Geom_traits\"></A>\n<A NAME=\"Typedef_Geom_traits\"></A>\ntypedef Gt\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Geom_traits;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the geometric traits.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2\"></A>\n<A NAME=\"Typedef_Point_2\"></A>\ntypedef Gt::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the\npoint defined in the geometric traits.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Site_2\"></A>\n<A NAME=\"Typedef_Site_2\"></A>\ntypedef Gt::Site_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Site_2;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the Apollonius site, defined in the geometric traits.\n        </TD></TR>\n        </TABLE>\n\n\n<P>\n\nThe vertices and faces of the Apollonius graph are accessed\nthrough <I>handles</I>, \n<I>iterators</I> and <I>circulators</I>. \nThe iterators and circulators\nare all bidirectional and non-mutable.\nThe circulators and iterators are assignable to the \ncorresponding handle types, and they are also convertible to the\ncorresponding handles.\nThe edges of the Apollonius graph can also be visited through iterators\nand circulators,\nthe edge circulators and iterators\nare also bidirectional and non-mutable.\nIn the following, we call <I>infinite</I> any face or edge \nincident  to the infinite vertex and the infinite vertex itself.\nAny other feature (face, edge or vertex) of the Apollonius graph is said \nto be <I>finite</I>.\nSome iterators (the <I>All</I> iterators ) allow to visit finite or \ninfinite features while the others (the <I>Finite</I> iterators) visit only\nfinite features. Circulators visit both infinite and finite features.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Edge\"></A>\n<A NAME=\"Typedef_Edge\"></A>\ntypedef Data_structure::Edge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Edge;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the edge type.\nThe <I>Edge(f,i)</I> is the edge common to faces <I>f</I> and \n<I>f.neighbor(i)</I>. It is also the edge joining the vertices\n<I>vertex(cw(i))</I> and <I>vertex(ccw(i))</I> of <I>f</I>.<BR>\n\n<EM>Precondition: </EM><I>i</I> must be <I>0</I>, <I>1</I> or <I>2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle\"></A>\n<A NAME=\"Typedef_Vertex_handle\"></A>\ntypedef Data_structure::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Vertex_handle;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a handle to a vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle\"></A>\n<A NAME=\"Typedef_Face_handle\"></A>\ntypedef Data_structure::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Face_handle;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a handle to a face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator\"></A>\n<A NAME=\"Typedef_Vertex_circulator\"></A>\ntypedef Data_structure::Vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Vertex_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over vertices incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator\"></A>\n<A NAME=\"Typedef_Face_circulator\"></A>\ntypedef Data_structure::Face_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Face_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over faces incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator\"></A>\n<A NAME=\"Typedef_Edge_circulator\"></A>\ntypedef Data_structure::Edge_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Edge_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over edges incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator\"></A>\n<A NAME=\"Typedef_All_vertices_iterator\"></A>\ntypedef Data_structure::All_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    All_vertices_iterator;\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_vertices_iterator\"></A>\n<A NAME=\"Typedef_Finite_vertices_iterator\"></A>\ntypedef Data_structure::Finite_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Finite_vertices_iterator;\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over finite vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator\"></A>\n<A NAME=\"Typedef_All_faces_iterator\"></A>\ntypedef Data_structure::All_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    All_faces_iterator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_faces_iterator\"></A>\n<A NAME=\"Typedef_Finite_faces_iterator\"></A>\ntypedef Data_structure::Finite_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Finite_faces_iterator;\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over finite faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator\"></A>\n<A NAME=\"Typedef_All_edges_iterator\"></A>\ntypedef Data_structure::All_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    All_edges_iterator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all edges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edges_iterator\"></A>\n<A NAME=\"Typedef_Finite_edges_iterator\"></A>\ntypedef Data_structure::Finite_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Finite_edges_iterator;\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over finite edges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_size_type\"></A>\n<A NAME=\"Typedef_size_type\"></A>\ntypedef Data_structure::size_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    size_type;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    An unsigned integral type.\n        </TD></TR>\n        </TABLE>\n<P>\n\nIn addition to iterators and circulators for vertices and faces,\niterators for sites are provided. In particular there are iterators\nfor the entire set of sites, the hidden sites and the visible sites of\nthe Apollonius graph.\n<P>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;::Sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over all sites.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;::Visible_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over all visible sites.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;::Hidden_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over all hidden sites.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt; ag ( Gt gt=Gt());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates an\nApollonius graph using <I>gt</I> as geometric traits.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt; ag ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond,<BR>\n\nGt gt=Gt());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates an Apollonius graph using <I>gt</I> as\ngeometric traits and inserts all sites in the range\n[<I>first</I>, <I>beyond</I>).<BR>\n\n<EM>Precondition: </EM><I>Input_iterator</I> must be a model of\n<I>InputIterator</I>. The value type of\n<I>Input_iterator</I> must be <I>Site_2</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt; ag (  other);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor. All faces and vertices are duplicated. After the\n  construction, \n  <I>ag</I> and <I>other</I> refer to two different Apollonius graphs&nbsp;: if\n  <I>other</I> is modified, <I>ag</I> is not.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     ag =  other<A NAME=\"Function_Apollonius_graph_26Gt+Agds9_operator=6const_Apollonius_graph_26Gt+Agds9__other9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assignment. If <I>ag</I> and <I>other</I> are the same object\n  nothing is done. Otherwise, all the vertices and faces are\n  duplicated. After the assignment, <I>ag</I> and <I>other</I> refer to\n  different Apollonius graphs&nbsp;: if <I>other</I> is modified, <I>ag</I> is\n  not.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Geom_traits_geom_traits69;\"></A>\nGeom_traits\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.geom_traits ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a reference to the Apollonius graph traits object.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the dimension of the Apollonius graph.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_vertices69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.number_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of finite vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_visible_sites69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.number_of_visible_sites ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of visible sites.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_hidden_sites69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.number_of_hidden_sites ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of hidden sites.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_faces69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.number_of_faces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of faces (both finite and infinite) of the\n           Apollonius graph.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_infinite_face69;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.infinite_face ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a  face incident to the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_infinite_vertex69;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.infinite_vertex ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_finite_vertex69;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_vertex ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a vertex distinct from  the <I>infinite_vertex</I>.<BR>\n\n<EM>Precondition: </EM>The number of (visible) vertices in the Apollonius graph must\n  be at least one.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Traversal of the Apollonius graph</H3>\n<P>\n\nAn Apollonius graph can be seen as a container of faces and vertices.\nTherefore the Apollonius graph provides several iterators and circulators\nthat allow to traverse it (completely or partially).\n<P>\n\n<H3>Face, Edge and Vertex Iterators</H3>\n<P>\n\nThe following iterators allow respectively to visit \nfinite faces,  finite edges and  finite vertices\nof the Apollonius graph. These iterators are non-mutable,\nbidirectional and their value types are respectively\n<I>Face</I>, <I>Edge</I> and <I>Vertex</I>. \nThey are all invalidated by any change in the Apollonius graph.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_vertices_iterator_finite_vertices_begin69;\"></A>\nFinite_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_vertices_iterator_finite_vertices_end69;\"></A>\nFinite_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edges_iterator_finite_edges_begin69;\"></A>\nFinite_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_edges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edges_iterator_finite_edges_end69;\"></A>\nFinite_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_edges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_faces_iterator_finite_faces_begin69;\"></A>\nFinite_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_faces_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_faces_iterator_finite_faces_end69_const;\"></A>\nFinite_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.finite_faces_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe following iterators allow respectively to visit all\n(both finite and infinite) faces, edges and vertices\nof the Apollonius graph. These iterators are non-mutable, bidirectional\nand their value types are respectively\n<I>Face</I>, <I>Edge</I> and <I>Vertex</I>. \nThey are all invalidated by any change in the Apollonius graph.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator_all_vertices_begin69;\"></A>\nAll_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary  vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator_all_vertices_end69;\"></A>\nAll_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator_all_edges_begin69;\"></A>\nAll_edges_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_edges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator_all_edges_end69;\"></A>\nAll_edges_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_edges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator_all_faces_begin69;\"></A>\nAll_faces_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_faces_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator_all_faces_end69;\"></A>\nAll_faces_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.all_faces_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Site iterators</H3>\n<P>\n\nThe following iterators allow respectively to visit \nall sites, the visible sites and the hidden sites.\nThese iterators are non-mutable, bidirectional and their value type\nis <I>Site_2</I>. They are all invalidated by any change in the\nApollonius graph.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Sites_iterator_sites_begin69;\"></A>\nSites_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.sites_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary site.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Sites_iterator_sites_end69;\"></A>\nSites_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.sites_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Visible_sites_iterator_visible_sites_begin69;\"></A>\nVisible_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.visible_sites_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary visible site.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Visible_sites_iterator_visible_sites_end69;\"></A>\nVisible_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.visible_sites_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hidden_sites_iterator_hidden_sites_begin69;\"></A>\nHidden_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.hidden_sites_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary hidden site.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hidden_sites_iterator_hidden_sites_end69;\"></A>\nHidden_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.hidden_sites_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Face, Edge and Vertex Circulators</H3>\n<P>\n\nThe Apollonius graph also provides circulators that allow to visit \nrespectively all faces or edges incident to a given vertex\nor all vertices adjacent to a given vertex.\nThese circulators are non-mutable and bidirectional.\n The operator <I>operator++</I> moves the circulator\ncounterclockwise around the vertex while\nthe <I>operator--</I> moves clockwise.\nA face circulator is invalidated by any modification of the face\npointed to.\nAn edge circulator is invalidated by any modification\nin one of the two faces incident to the edge pointed to.\nA vertex circulator is invalidated by any modification\nin any of the faces adjacent to the vertex pointed to.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6Vertex_handle_v9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_faces ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary face incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6Vertex_handle_v+_Face_handle_f9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_faces ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at face <I>f</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6Vertex_handle_v9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_edges ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary edge incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6Vertex_handle_v+_Face_handle_f9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_edges ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at the first edge of <I>f</I> incident to \n<I>v</I>, in counterclockwise order around <I>v</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6Vertex_handle_v9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_vertices ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary  vertex incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6Vertex_handle_v+_Face_handle_f9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_vertices ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at the first vertex of <I>f</I> adjacent  to <I>v</I>\nin  counterclockwise order around <I>v</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Traversal of the Convex Hull</H3>\n<P>\n\nApplied on the <I>infinite_vertex</I>\nthe above  functions  allow to visit the vertices on the convex hull and\nthe infinite edges and faces. Note that a counterclockwise\ntraversal of the vertices adjacent to the <I>infinite_vertex</I> is\na clockwise traversal of the convex hull.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6ag+infinite_vertex699;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_vertices ( ag.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6ag+infinite_vertex69+_Face_handle_f9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.incident_vertices ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6ag+infinite_vertex699;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_faces ( ag.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6ag+infinite_vertex69+_Face_handle_f9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.incident_faces ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6ag+infinite_vertex699;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.incident_edges ( ag.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6ag+infinite_vertex69+_Face_handle_f9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.incident_edges ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>The class <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> provides methods to test\nthe finite or infinite character of any feature.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Vertex_handle_v9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_infinite ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff <I>v</I> is the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Face_handle_f9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_infinite ( Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff face <I>f</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Face_handle_f+_int_i9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_infinite ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>(f,i)</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Edge_e9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_infinite ( Edge e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>e</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Edge_circulator_ec9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_infinite ( Edge_circulator ec)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>*ec</I> is infinite.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_unsigned_int_insert6Input_iterator_first+_Input_iterator_beyond9;\"></A>\nunsigned int\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ag.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the sites in the range\n[<I>first</I>,<I>beyond</I>). The number of sites in the range\n  [<I>first</I>, <I>beyond</I>) is returned.<BR>\n\n<EM>Precondition: </EM><I>Input_iterator</I> must be a model of\n  <I>InputIterator</I> and its value type must be\n  <I>Site_2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.insert ( Site_2 s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the\nsite <I>s</I> in the Apollonius graph. If <I>s</I> is visible then the\nvertex handle of <I>s</I> is returned, otherwise \n<I>Vertex_handle(NULL)</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.insert ( Site_2 s,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts <I>s</I> in the Apollonius graph using the site\nassociated with <I>vnear</I> as an estimate for the nearest neighbor of\nthe center of <I>s</I>. If <I>s</I> is visible then the vertex handle of\n<I>s</I> is returned, otherwise <I>Vertex_handle(NULL)</I> is\nreturned.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Removal</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.remove ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Removes the site\nassociated to the vertex handle <I>v</I> from the Apollonius\ngraph.<BR>\n\n<EM>Precondition: </EM><I>v</I> must correspond to a valid finite\nvertex of the Apollonius graph.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Nearest neighbor location</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_2_p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point <I>p</I>. In other words it\nfinds the site whose Apollonius cell contains <I>p</I>. Ties are broken\narbitrarily and one of the nearest neighbors of <I>p</I> is\nreturned. If there are no visible sites in the Apollonius diagram\n<I>Vertex_handle(NULL)</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_2_p+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point\n<I>p</I> using the site associated with <I>vnear</I> as an\nestimate for the nearest neighbor of <I>p</I>. Ties are broken\narbitrarily and one of the nearest neighbors of <I>p</I> is\nreturned. If there are no visible sites in the Apollonius diagram\n<I>Vertex_handle(NULL)</I> is returned.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access to the dual</H3>\n<P>\n\nThe <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A></I> class provides access to the duals of\nthe faces of the graph. The dual of a face of the Apollonius graph is\na site. If the originating face is infinite, its dual is a site with\ncenter at infinity (or equivalently with infinite weight), which means\nthat it can be represented geometrically as a line. If the\noriginating face is finite, its dual is a site with finite center and\nweight. In the following three methods the returned object is\nassignable to either <I>Site_2</I> or <I>Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>, depending on\nwhether the corresponding face of the Apollonius graph is finite or\ninfinite, respectively.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Gt::Object_2_dual6Face_handle_f9_const;\"></A>\nGt::Object_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.dual ( Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the\ndual corresponding to the face handle <I>f</I>. The returned object can\nbe assignable to one of the following: <I>Site_2</I>, <I>Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Gt::Object_2_dual6All_faces_iterator_it9_const;\"></A>\nGt::Object_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.dual ( All_faces_iterator it)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the\ndual of the face to which <I>it</I> points to. The returned object can\nbe assignable to one of the following: <I>Site_2</I>, <I>Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Gt::Object_2_dual6Finite_faces_iterator_it9_const;\"></A>\nGt::Object_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.dual ( Finite_faces_iterator it)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns\n  the dual of the face to which <I>it</I> points to. The returned\n  object can be assignable to one of the following: <I>Site_2</I>,\n  <I>Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>I/O</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_primal6Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.draw_primal ( Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the Apollonius graph to\nthe stream <I>str</I>.<BR>\n\n<EM>Precondition: </EM>The following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual6Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.draw_dual ( Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the dual of the\nApollonius graph, i.e., the Apollonius diagram, to the stream\n<I>str</I>.<BR>\n\n<EM>Precondition: </EM>The following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_primal_edge6Edge_e+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.draw_primal_edge ( Edge e,  Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the edge\n  <I>e</I> of the Apollonius graph to the stream <I>str</I>.<BR>\n\n<EM>Precondition: </EM>The following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual_edge6Edge_e+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.draw_dual_edge ( Edge e,  Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the dual of the\n  edge <I>e</I> to the stream <I>str</I>. The dual of <I>e</I> is an edge\n  of the Apollonius diagram.<BR>\n\n<EM>Precondition: </EM>The following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I>,<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Validity check</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false+_int_level_=_19;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ag.is_valid ( bool verbose = false,  int level = 1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Checks the validity of the Apollonius graph. If <I>verbose</I> is\n<I>true</I> a short message is sent to <I>std::cerr</I>. If <I>level</I>\nis 0, only the data structure is validated. If <I>level</I> is 1, then\nboth the data structure and the Apollonius graph are\nvalidated. Negative values of <I>level</I> always return true, and\nvalues greater then 1 are equivalent to <I>level</I> being 1.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clears all contents of the Apollonius graph.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_swap6Apollonius_graph_26Gt+Agds9_other9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ag.swap (  other)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The Apollonius graphs\n<I>other</I> and <I>ag</I> are swapped. <I>ag</I>.<I>swap(other)</I> should\nbe preferred to <I>ag</I><I> = other</I> or to <I>ag</I><I>(other)</I> if\n<I>other</I> is deleted afterwards.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ApolloniusGraphDataStructure_2.html#Cross_link_anchor_1071\">ApolloniusGraphDataStructure_2</A></I><BR>\n\n<I><A HREF=\"Concept_ApolloniusGraphVertexBase_2.html#Cross_link_anchor_1072\">ApolloniusGraphVertexBase_2</A></I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Concept_TriangulationFaceBase_2.html#Cross_link_anchor_934\">TriangulationFaceBase_2</A></I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_traits_2.html#Cross_link_anchor_1076\">CGAL::Apollonius_graph_traits_2</A>&lt;K,Method_tag&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_filtered_traits_2.html#Cross_link_anchor_1078\">CGAL::Apollonius_graph_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_vertex_base_2.html#Cross_link_anchor_1073\">CGAL::Apollonius_graph_vertex_base_2</A>&lt;Gt,StoreHidden&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Gt&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_ApolloniusSite_2.html\"><I>ApolloniusSite_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_46!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39056.0}