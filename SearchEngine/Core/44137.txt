{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src zope interface adapter txt View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 14 1 KB Line 1 2Adapter Registry3 45Adapter registries provide a way to register objects that depend on6one or more interface specifications and provide perhaps indirectly 7some interface In addition the registrations have names You can8think of the names as qualifiers of the provided interfaces 91 The term interface specification refers both to interfaces and to11interface declarations such as declarations of interfaces implemented12by a class 131415Single Adapters16 1718Let s look at a simple example using a single required specification 192 from zope interface adapter import AdapterRegistry21 import zope interface2223 class IR1 zope interface Interface 24 pass25 class IP1 zope interface Interface 26 pass27 class IP2 IP1 28 pass293 registry AdapterRegistry 3132We ll register an object that depends on IR1 and provides IP2 3334 registry register IR1 IP2 12 3536Given the registration we can look it up again 3738 registry lookup IR1 IP2 39 124 41Note that we used an integer in the example In real applications 42one would use some objects that actually depend on or provide43interfaces The registry doesn t care about what gets registered so44we ll use integers and strings to keep the examples simple There is45one exception Registering a value of None unregisters any46previously registered value 4748If an object depends on a specification it can be looked up with a49specification that extends the specification that it depends on 5 51 class IR2 IR1 52 pass53 registry lookup IR2 IP2 54 125556We can use a class implementation specification to look up the object 5758 class C2 59 zope interface implements IR2 6 61 registry lookup zope interface implementedBy C2 IP2 62 12636465and it can be looked up for interfaces that its provided interface66extends 6768 registry lookup IR1 IP1 69 127 registry lookup IR2 IP1 71 127273But if you require a specification that doesn t extend the specification the74object depends on you won t get anything 7576 registry lookup zope interface Interface IP1 7778By the way you can pass a default value to lookup 798 registry lookup zope interface Interface IP1 42 81 428283If you try to get an interface the object doesn t provide you also84won t get anything 8586 class IP3 IP2 87 pass88 registry lookup IR1 IP3 899 You also won t get anything if you use the wrong name 9192 registry lookup IR1 IP1 bob 93 registry register IR1 IP2 bob Bob s 12 94 registry lookup IR1 IP1 bob 95 Bob s 12 9697You can leave the name off when doing a lookup 9899 registry lookup IR1 IP1 1 121 11 2If we register an object that provides IP1 1 31 4 registry register IR1 IP1 11 1 51 6then that object will be prefered over O 12 1 71 8 registry lookup IR1 IP1 1 9 1111 111Also if we register an object for IR2 then that will be prefered112when using IR2 113114 registry register IR2 IP1 21 115 registry lookup IR2 IP1 116 21117118Finding out what if anything is registered119 12 121We can ask if there is an adapter registered for a collection of122interfaces This is different than lookup because it looks for an123exact match 124125 print registry registered IR1 IP1 126 11127128 print registry registered IR1 IP2 129 1213 131 print registry registered IR1 IP2 bob 132 Bob s 12133 134135 print registry registered IR2 IP1 136 21137138 print registry registered IR2 IP2 139 None14 141In the last example None was returned because nothing was registered142exactly for the given interfaces 143144lookup1145 146147Lookup of single adapters is common enough that there is a specialized148version of lookup that takes a single required interface 14915 registry lookup1 IR2 IP1 151 21152 registry lookup1 IR2 IP1 153 21154155Actual Adaptation156 157158The adapter registry is intended to support adaptation where one159object that implements an interface is adapted to another object that16 supports a different interface The adapter registry supports the161computation of adapters In this case we have to register adapter162factories 163164 class IR zope interface Interface 165 pass166167 class X 168 zope interface implements IR 169 17 class Y 171 zope interface implements IP1 172 def init self context 173 self context context174175 registry register IR IP1 Y 176177In this case we registered a class as the factory Now we can call178 queryAdapter to get the adapted object 17918 x X 181 y registry queryAdapter x IP1 182 y class name 183 Y 184 y context is x185 True186187We can register and lookup by name too 188189 class Y2 Y 19 pass191192 registry register IR IP1 bob Y2 193 y registry queryAdapter x IP1 bob 194 y class name 195 Y2 196 y context is x197 True198199When the adapter factory produces None then this is treated as if no2 adapter has been found This allows us to prevent adaptation when desired 2 1and let the adapter factory determine whether adaptation is possible based on2 2the state of the object being adapted 2 32 4 def factory context 2 5 if context name object 2 6 return adapter 2 7 return None2 82 9 class Object object 21 zope interface implements IR 211 name object 212213 registry register IR IP1 conditional factory 214 obj Object 215 registry queryAdapter obj IP1 conditional 216 adapter 217 obj name no object 218 registry queryAdapter obj IP1 conditional is None219 True22 registry queryAdapter obj IP1 conditional default 221 default 222223An alternate method that provides the same function as queryAdapter is224 adapter hook 225226 y registry adapter hook IP1 x 227 y class name 228 Y 229 y context is x23 True231 y registry adapter hook IP1 x bob 232 y class name 233 Y2 234 y context is x235 True236237The adapter hook simply switches the order of the object and238interface arguments It is used to hook into the interface call239mechanism 24 241242Default Adapters243 244 245Sometimes you want to provide an adapter that will adapt anything 246For that provide None as the required interface 247248 registry register None IP1 1 249 25 then we can use that adapter for interfaces we don t have specific251adapters for 252253 class IQ zope interface Interface 254 pass255 registry lookup IQ IP1 256 1257258Of course specific adapters are still used when applicable 25926 registry lookup IR2 IP1 261 21262263Class adapters264 265266You can register adapters for class declarations which is almost the267same as registering them for a class 268269 registry register zope interface implementedBy C2 IP1 C21 27 registry lookup zope interface implementedBy C2 IP1 271 C21 272273Dict adapters274 275276At some point it was impossible to register dictionary based adapters due a277bug Let s make sure this works now 278279 adapter 28 registry register IQ adapter 281 registry lookup IQ is adapter282 True283284Unregistering285 286287You can unregister by registering None rather than an object 288289 registry register zope interface implementedBy C2 IP1 None 29 registry lookup zope interface implementedBy C2 IP1 291 21292293Of course this means that None can t be registered This is an294exception to the statement made earlier that the registry doesn t295care what gets registered 296297Multi adapters298 2993 You can adapt multiple specifications 3 13 2 registry register IR1 IQ IP2 1q2 3 3 registry lookup IR1 IQ IP2 3 4 1q2 3 5 registry lookup IR2 IQ IP1 3 6 1q2 3 73 8 class IS zope interface Interface 3 9 pass31 registry lookup IR2 IS IP1 311312 class IQ2 IQ 313 pass314315 registry lookup IR2 IQ2 IP1 316 1q2 317318 registry register IR1 IQ2 IP2 1q22 319 registry lookup IR2 IQ2 IP1 32 1q22 321322Multi adaptation323 324325You can adapt multiple objects 326327 class Q 328 zope interface implements IQ 32933 As with single adapters we register a factory which is often a class 331332 class IM zope interface Interface 333 pass334 class M 335 zope interface implements IM 336 def init self x q 337 self x self q x q338 registry register IR IQ IM M 33934 And then we can call queryMultiAdapter to compute an adapter 341342 q Q 343 m registry queryMultiAdapter x q IM 344 m class name 345 M 346 m x is x and m q is q347 True348349and of course we can use names 35 351 class M2 M 352 pass353 registry register IR IQ IM bob M2 354 m registry queryMultiAdapter x q IM bob 355 m class name 356 M2 357 m x is x and m q is q358 True359 36 Default Adapters361 362363As with single adapters you can define default adapters by specifying364None for the first specification 365366 registry register None IQ IP2 q2 367 registry lookup IS IQ IP2 368 q2 36937 Null Adapters371 372373You can also adapt no specification 374375 registry register IP2 2 376 registry lookup IP2 377 2378 registry lookup IP1 379 238 381Listing named adapters382 383384Adapters are named Sometimes it s useful to get all of the named385adapters for given interfaces 386387 adapters list registry lookupAll IR1 IP1 388 adapters sort 389 adapters39 u 11 u bob Bob s 12 391392This works for multi adapters too 393394 registry register IR1 IQ2 IP2 bob 1q2 for bob 395 adapters list registry lookupAll IR2 IQ2 IP1 396 adapters sort 397 adapters398 u 1q22 u bob 1q2 for bob 3994 And even null adapters 4 14 2 registry register IP2 bob 3 4 3 adapters list registry lookupAll IP1 4 4 adapters sort 4 5 adapters4 6 u 2 u bob 3 4 74 8Subscriptions4 9 41 411Normally we want to look up an object that most closely matches a412specification Sometimes we want to get all of the objects that413match some specification We use subscriptions for this We414subscribe objects against specifications and then later find all of415the subscribed objects 416417 registry subscribe IR1 IP2 sub12 1 418 registry subscriptions IR1 IP2 419 sub12 1 42 421Note that unlike regular adapters subscriptions are unnamed 422423You can have multiple subscribers for the same specification 424425 registry subscribe IR1 IP2 sub12 2 426 registry subscriptions IR1 IP2 427 sub12 1 sub12 2 428429If subscribers are registered for the same required interfaces they43 are returned in the order of definition 431432You can register subscribers for all specifications using None 433434 registry subscribe None IP1 sub 1 435 registry subscriptions IR2 IP1 436 sub 1 sub12 1 sub12 2 437438Note that the new subscriber is returned first Subscribers defined439for more general required interfaces are returned before subscribers44 for more general interfaces 441442Subscriptions may be combined over multiple compatible specifications 443444 registry subscriptions IR2 IP1 445 sub 1 sub12 1 sub12 2 446 registry subscribe IR1 IP1 sub11 447 registry subscriptions IR2 IP1 448 sub 1 sub12 1 sub12 2 sub11 449 registry subscribe IR2 IP2 sub22 45 registry subscriptions IR2 IP1 451 sub 1 sub12 1 sub12 2 sub11 sub22 452 registry subscriptions IR2 IP2 453 sub12 1 sub12 2 sub22 454455Subscriptions can be on multiple specifications 456457 registry subscribe IR1 IQ IP2 sub1q2 458 registry subscriptions IR1 IQ IP2 459 sub1q2 46 461As with single subscriptions and non subscription adapters you can462specify None for the first required interface to specify a default 463464 registry subscribe None IQ IP2 sub q2 465 registry subscriptions IS IQ IP2 466 sub q2 467 registry subscriptions IR1 IQ IP2 468 sub q2 sub1q2 46947 You can have subscriptions that are indepenent of any specifications 471 472 list registry subscriptions IP1 473 474475 registry subscribe IP2 sub2 476 registry subscriptions IP1 477 sub2 478 registry subscribe IP1 sub1 479 registry subscriptions IP1 48 sub2 sub1 481 registry subscriptions IP2 482 sub2 483484Unregistering subscribers485 486487We can unregister subscribers When unregistering a subscriber we488can unregister a specific subscriber 48949 registry unsubscribe IR1 IP1 sub11 491 registry subscriptions IR1 IP1 492 sub 1 sub12 1 sub12 2 493494If we don t specify a value then all subscribers matching the given495interfaces will be unsubscribed 496497 registry unsubscribe IR1 IP2 498 registry subscriptions IR1 IP1 499 sub 1 5 5 15 2Subscription adapters5 3 5 45 5We normally register adapter factories which then allow us to compute5 6adapters but with subscriptions we get multiple adapters Here s an5 7example of multiple object subscribers 5 85 9 registry subscribe IR IQ IM M 51 registry subscribe IR IQ IM M2 511512 subscribers registry subscribers x q IM 513 len subscribers 514 2515 class names s class name for s in subscribers 516 class names sort 517 class names518 M M2 519 s x is x and s q is q for s in subscribers 52 True True 521522adapter factory subcribers can t return None values523524 def M3 x y 525 return None526527 registry subscribe IR IQ IM M3 528 subscribers registry subscribers x q IM 529 len subscribers 53 2531532Handlers533 534535A handler is a subscriber factory that doesn t produce any normal536output It returns None A handler is unlike adapters in that it does537all of its work when the factory is called 538539To register a handler simply provide None as the provided interface 54 541 def handler event 542 print handler event543544 registry subscribe IR1 None handler 545 registry subscriptions IR1 None handler 546 True Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt", "title": "\n      adapter.txt in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/zope/interface\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      adapter.txt in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\" type=\"text/plain; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/zope/interface/adapter.txt?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope?order=name\" title=\"View zope\">zope</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface?order=name\" title=\"View interface\">interface</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt?order=name\" title=\"View adapter.txt\">adapter.txt</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/zope/interface/adapter.txt\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"14483 bytes\">14.1 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td>================</td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td>Adapter Registry</td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td>================</td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td>Adapter registries provide a way to register objects that depend on</td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td>one or more interface specifications and provide (perhaps indirectly)</td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td>some interface.\u00a0 In addition, the registrations have names. (You can</td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td>think of the names as qualifiers of the provided interfaces.)</td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td>The term \"interface specification\" refers both to interfaces and to</td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td>interface declarations, such as declarations of interfaces implemented</td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td>by a class.</td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td></td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td>Single Adapters</td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td>===============</td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td>Let's look at a simple example, using a single required specification::</td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td>\u00a0 &gt;&gt;&gt; from zope.interface.adapter import AdapterRegistry</td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td>\u00a0 &gt;&gt;&gt; import zope.interface</td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td></td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td>\u00a0 &gt;&gt;&gt; class IR1(zope.interface.Interface):</td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td>\u00a0 &gt;&gt;&gt; class IP1(zope.interface.Interface):</td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td>\u00a0 &gt;&gt;&gt; class IP2(IP1):</td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td></td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td>\u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td>We'll register an object that depends on IR1 and \"provides\" IP2::</td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1], IP2, '', 12)</td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td>Given the registration, we can look it up again::</td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP2, '')</td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td>\u00a0 12</td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td>Note that we used an integer in the example.\u00a0 In real applications,</td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td>one would use some objects that actually depend on or provide</td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td>interfaces. The registry doesn't care about what gets registered, so</td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td>we'll use integers and strings to keep the examples simple. There is</td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td>one exception.\u00a0 Registering a value of None unregisters any</td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td>previously-registered value.</td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td>If an object depends on a specification, it can be looked up with a</td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td>specification that extends the specification that it depends on::</td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td>\u00a0 &gt;&gt;&gt; class IR2(IR1):</td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2], IP2, '')</td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td>\u00a0 12</td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td>We can use a class implementation specification to look up the object::</td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td>\u00a0 &gt;&gt;&gt; class C2:</td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IR2)</td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.implementedBy(C2)], IP2, '')</td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td>\u00a0 12</td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td>and it can be looked up for interfaces that its provided interface</td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td>extends::</td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP1, '')</td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td>\u00a0 12</td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2], IP1, '')</td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td>\u00a0 12</td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td></td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td>But if you require a specification that doesn't extend the specification the</td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td>object depends on, you won't get anything::</td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.Interface], IP1, '')</td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td>By the way, you can pass a default value to lookup::</td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.Interface], IP1, '', 42)</td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td>\u00a0 42</td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td>If you try to get an interface the object doesn't provide, you also</td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td>won't get anything::</td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td>\u00a0 &gt;&gt;&gt; class IP3(IP2):</td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP3, '')</td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td>You also won't get anything if you use the wrong name::</td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP1, 'bob')</td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1], IP2, 'bob', \"Bob's 12\")</td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP1, 'bob')</td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td>\u00a0 \"Bob's 12\"</td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td>You can leave the name off when doing a lookup::</td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP1)</td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td>\u00a0 12</td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td></td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td>If we register an object that provides IP1::</td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1], IP1, '', 11)</td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td>then that object will be prefered over O(12)::</td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1], IP1, '')</td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td>\u00a0 11</td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td>Also, if we register an object for IR2, then that will be prefered</td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td>when using IR2::</td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR2], IP1, '', 21)</td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2], IP1, '')</td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td>\u00a0 21</td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td></td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td>Finding out what, if anything, is registered</td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td>--------------------------------------------</td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td>We can ask if there is an adapter registered for a collection of</td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td>interfaces. This is different than lookup, because it looks for an</td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td>exact match.</td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td>\u00a0 &gt;&gt;&gt; print registry.registered([IR1], IP1)</td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td>\u00a0 11</td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td>\u00a0 &gt;&gt;&gt; print registry.registered([IR1], IP2)</td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td>\u00a0 12</td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td>\u00a0 &gt;&gt;&gt; print registry.registered([IR1], IP2, 'bob')</td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td>\u00a0 Bob's 12</td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td>\u00a0 </td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td>\u00a0 &gt;&gt;&gt; print registry.registered([IR2], IP1)</td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td>\u00a0 21</td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td>\u00a0 &gt;&gt;&gt; print registry.registered([IR2], IP2)</td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td>\u00a0 None</td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td>In the last example, None was returned because nothing was registered</td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td>exactly for the given interfaces.</td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td>lookup1</td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td>-------</td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td>Lookup of single adapters is common enough that there is a specialized</td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td>version of lookup that takes a single required interface::</td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup1(IR2, IP1, '')</td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td>\u00a0 21</td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup1(IR2, IP1)</td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td>\u00a0 21</td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td>Actual Adaptation</td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td>-----------------</td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td>The adapter registry is intended to support adaptation, where one</td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td>object that implements an interface is adapted to another object that</td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td>supports a different interface.\u00a0 The adapter registry supports the</td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td>computation of adapters. In this case, we have to register adapter</td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td>factories::</td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td></td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td>\u00a0 \u00a0&gt;&gt;&gt; class IR(zope.interface.Interface):</td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td>\u00a0 \u00a0...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td>\u00a0 \u00a0&gt;&gt;&gt; class X:</td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td>\u00a0 \u00a0...\u00a0 \u00a0 \u00a0zope.interface.implements(IR)</td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td>\u00a0 \u00a0&gt;&gt;&gt; class Y:</td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td>\u00a0 \u00a0...\u00a0 \u00a0 \u00a0zope.interface.implements(IP1)</td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td>\u00a0 \u00a0...\u00a0 \u00a0 \u00a0def __init__(self, context):</td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td>\u00a0 \u00a0...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0self.context = context</td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR], IP1, '', Y)</td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td></td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td>In this case, we registered a class as the factory. Now we can call</td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>`queryAdapter` to get the adapted object::</td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td>\u00a0 &gt;&gt;&gt; x = X()</td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td>\u00a0 &gt;&gt;&gt; y = registry.queryAdapter(x, IP1)</td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td>\u00a0 &gt;&gt;&gt; y.__class__.__name__</td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td>\u00a0 'Y'</td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td>\u00a0 &gt;&gt;&gt; y.context is x</td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td>\u00a0 True</td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td>We can register and lookup by name too::</td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td>\u00a0 &gt;&gt;&gt; class Y2(Y):</td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR], IP1, 'bob', Y2)</td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td>\u00a0 &gt;&gt;&gt; y = registry.queryAdapter(x, IP1, 'bob')</td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td>\u00a0 &gt;&gt;&gt; y.__class__.__name__</td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td>\u00a0 'Y2'</td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td>\u00a0 &gt;&gt;&gt; y.context is x</td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td>\u00a0 True</td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td>When the adapter factory produces `None`, then this is treated as if no</td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td>adapter has been found. This allows us to prevent adaptation (when desired)</td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td>and let the adapter factory determine whether adaptation is possible based on</td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td>the state of the object being adapted.</td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td>\u00a0 &gt;&gt;&gt; def factory(context):</td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0if context.name == 'object':</td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0return 'adapter'</td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0return None</td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td>\u00a0 &gt;&gt;&gt; class Object(object):</td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IR)</td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0name = 'object'</td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR], IP1, 'conditional', factory) </td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td>\u00a0 &gt;&gt;&gt; obj = Object()</td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td>\u00a0 &gt;&gt;&gt; registry.queryAdapter(obj, IP1, 'conditional')</td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td>\u00a0 'adapter'</td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td>\u00a0 &gt;&gt;&gt; obj.name = 'no object'</td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td>\u00a0 &gt;&gt;&gt; registry.queryAdapter(obj, IP1, 'conditional') is None</td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td>\u00a0 True</td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td>\u00a0 &gt;&gt;&gt; registry.queryAdapter(obj, IP1, 'conditional', 'default')</td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td>\u00a0 'default'</td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td>An alternate method that provides the same function as `queryAdapter()` is</td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td>`adapter_hook()`::</td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td>\u00a0 &gt;&gt;&gt; y = registry.adapter_hook(IP1, x)</td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td>\u00a0 &gt;&gt;&gt; y.__class__.__name__</td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td>\u00a0 'Y'</td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td>\u00a0 &gt;&gt;&gt; y.context is x</td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td>\u00a0 True</td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td>\u00a0 &gt;&gt;&gt; y = registry.adapter_hook(IP1, x, 'bob')</td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td>\u00a0 &gt;&gt;&gt; y.__class__.__name__</td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td>\u00a0 'Y2'</td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td>\u00a0 &gt;&gt;&gt; y.context is x</td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td>\u00a0 True</td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td>The `adapter_hook()` simply switches the order of the object and</td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td>interface arguments.\u00a0 It is used to hook into the interface call</td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td>mechanism.</td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td>Default Adapters</td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td>----------------</td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td>\u00a0 </td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td>Sometimes, you want to provide an adapter that will adapt anything.</td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td>For that, provide None as the required interface::</td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td></td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([None], IP1, '', 1)</td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td>\u00a0 </td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td>then we can use that adapter for interfaces we don't have specific</td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td>adapters for::</td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td>\u00a0 &gt;&gt;&gt; class IQ(zope.interface.Interface):</td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IQ], IP1, '')</td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td>\u00a0 1</td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td>Of course, specific adapters are still used when applicable::</td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2], IP1, '')</td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td>\u00a0 21</td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td>Class adapters</td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td>--------------</td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td>You can register adapters for class declarations, which is almost the</td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td>same as registering them for a class::</td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([zope.interface.implementedBy(C2)], IP1, '', 'C21')</td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.implementedBy(C2)], IP1, '')</td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td>\u00a0 'C21'</td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td></td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td>Dict adapters</td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td>-------------</td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td></td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td>At some point it was impossible to register dictionary-based adapters due a</td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td>bug. Let's make sure this works now:</td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td>\u00a0 &gt;&gt;&gt; adapter = {}</td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td>\u00a0 &gt;&gt;&gt; registry.register((), IQ, '', adapter)</td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup((), IQ, '') is adapter</td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td>\u00a0 True</td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td>Unregistering</td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td>-------------</td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td>You can unregister by registering None, rather than an object::</td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([zope.interface.implementedBy(C2)], IP1, '', None)</td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.implementedBy(C2)], IP1, '')</td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td>\u00a0 21</td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td>Of course, this means that None can't be registered. This is an</td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td>exception to the statement, made earlier, that the registry doesn't</td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td>care what gets registered.</td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td></td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td>Multi-adapters</td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td>==============</td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td>You can adapt multiple specifications::</td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1, IQ], IP2, '', '1q2')</td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR1, IQ], IP2, '')</td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td>\u00a0 '1q2'</td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2, IQ], IP1, '')</td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>\u00a0 '1q2'</td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td>\u00a0 &gt;&gt;&gt; class IS(zope.interface.Interface):</td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2, IS], IP1, '')</td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td>\u00a0 &gt;&gt;&gt; class IQ2(IQ):</td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2, IQ2], IP1, '')</td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td>\u00a0 '1q2'</td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1, IQ2], IP2, '', '1q22')</td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IR2, IQ2], IP1, '')</td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td>\u00a0 '1q22'</td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td>Multi-adaptation</td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td>----------------</td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td>You can adapt multiple objects::</td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td></td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td>\u00a0 &gt;&gt;&gt; class Q:</td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IQ)</td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td>As with single adapters, we register a factory, which is often a class::</td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td>\u00a0 &gt;&gt;&gt; class IM(zope.interface.Interface):</td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td>\u00a0 &gt;&gt;&gt; class M:</td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IM)</td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0def __init__(self, x, q):</td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0self.x, self.q = x, q</td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR, IQ], IM, '', M)</td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td>And then we can call `queryMultiAdapter` to compute an adapter::</td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td></td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td>\u00a0 &gt;&gt;&gt; q = Q()</td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td>\u00a0 &gt;&gt;&gt; m = registry.queryMultiAdapter((x, q), IM)</td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td>\u00a0 &gt;&gt;&gt; m.__class__.__name__</td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td>\u00a0 'M'</td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td>\u00a0 &gt;&gt;&gt; m.x is x and m.q is q</td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td>\u00a0 True</td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td></td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td>and, of course, we can use names::</td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td></td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td>\u00a0 &gt;&gt;&gt; class M2(M):</td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0pass</td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR, IQ], IM, 'bob', M2)</td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td>\u00a0 &gt;&gt;&gt; m = registry.queryMultiAdapter((x, q), IM, 'bob')</td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td>\u00a0 &gt;&gt;&gt; m.__class__.__name__</td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td>\u00a0 'M2'</td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td>\u00a0 &gt;&gt;&gt; m.x is x and m.q is q</td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td>\u00a0 True</td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td>\u00a0 </td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td>Default Adapters</td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td>----------------</td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td></td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td>As with single adapters, you can define default adapters by specifying</td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td>None for the *first* specification::</td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td></td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([None, IQ], IP2, '', 'q2')</td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([IS, IQ], IP2, '')</td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td>\u00a0 'q2'</td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td></td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td>Null Adapters</td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td>=============</td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td></td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td>You can also adapt no specification::</td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td></td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([], IP2, '', 2)</td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([], IP2, '')</td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td>\u00a0 2</td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td>\u00a0 &gt;&gt;&gt; registry.lookup([], IP1, '')</td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td>\u00a0 2</td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td>Listing named adapters</td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td>----------------------</td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td></td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td>Adapters are named. Sometimes, it's useful to get all of the named</td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>adapters for given interfaces::</td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td>\u00a0 &gt;&gt;&gt; adapters = list(registry.lookupAll([IR1], IP1))</td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td>\u00a0 &gt;&gt;&gt; adapters.sort()</td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td>\u00a0 &gt;&gt;&gt; adapters</td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td>\u00a0 [(u'', 11), (u'bob', \"Bob's 12\")]</td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td></td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td>This works for multi-adapters too::</td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([IR1, IQ2], IP2, 'bob', '1q2 for bob')</td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td>\u00a0 &gt;&gt;&gt; adapters = list(registry.lookupAll([IR2, IQ2], IP1))</td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td>\u00a0 &gt;&gt;&gt; adapters.sort()</td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td>\u00a0 &gt;&gt;&gt; adapters</td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td>\u00a0 [(u'', '1q22'), (u'bob', '1q2 for bob')]</td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td></td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td>And even null adapters::</td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td></td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td>\u00a0 &gt;&gt;&gt; registry.register([], IP2, 'bob', 3)</td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td>\u00a0 &gt;&gt;&gt; adapters = list(registry.lookupAll([], IP1))</td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td>\u00a0 &gt;&gt;&gt; adapters.sort()</td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td>\u00a0 &gt;&gt;&gt; adapters</td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td>\u00a0 [(u'', 2), (u'bob', 3)]</td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td></td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td>Subscriptions</td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td>=============</td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td></td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td>Normally, we want to look up an object that most-closely matches a</td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td>specification.\u00a0 Sometimes, we want to get all of the objects that</td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td>match some specification.\u00a0 We use subscriptions for this.\u00a0 We</td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td>subscribe objects against specifications and then later find all of</td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td>the subscribed objects::</td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td></td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR1], IP2, 'sub12 1')</td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1], IP2)</td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td>\u00a0 ['sub12 1']</td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td></td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td>Note that, unlike regular adapters, subscriptions are unnamed.</td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td>You can have multiple subscribers for the same specification::</td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR1], IP2, 'sub12 2')</td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1], IP2)</td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td>\u00a0 ['sub12 1', 'sub12 2']</td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td></td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td>If subscribers are registered for the same required interfaces, they</td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td>are returned in the order of definition.</td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td>You can register subscribers for all specifications using None::</td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([None], IP1, 'sub_1')</td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR2], IP1)</td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td>\u00a0 ['sub_1', 'sub12 1', 'sub12 2']</td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td></td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td>Note that the new subscriber is returned first.\u00a0 Subscribers defined</td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td>for more general required interfaces are returned before subscribers</td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td>for more general interfaces.</td></tr><tr><th id=\"L441\"><a href=\"#L441\">441</a></th><td></td></tr><tr><th id=\"L442\"><a href=\"#L442\">442</a></th><td>Subscriptions may be combined over multiple compatible specifications::</td></tr><tr><th id=\"L443\"><a href=\"#L443\">443</a></th><td></td></tr><tr><th id=\"L444\"><a href=\"#L444\">444</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR2], IP1)</td></tr><tr><th id=\"L445\"><a href=\"#L445\">445</a></th><td>\u00a0 ['sub_1', 'sub12 1', 'sub12 2']</td></tr><tr><th id=\"L446\"><a href=\"#L446\">446</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR1], IP1, 'sub11')</td></tr><tr><th id=\"L447\"><a href=\"#L447\">447</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR2], IP1)</td></tr><tr><th id=\"L448\"><a href=\"#L448\">448</a></th><td>\u00a0 ['sub_1', 'sub12 1', 'sub12 2', 'sub11']</td></tr><tr><th id=\"L449\"><a href=\"#L449\">449</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR2], IP2, 'sub22')</td></tr><tr><th id=\"L450\"><a href=\"#L450\">450</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR2], IP1)</td></tr><tr><th id=\"L451\"><a href=\"#L451\">451</a></th><td>\u00a0 ['sub_1', 'sub12 1', 'sub12 2', 'sub11', 'sub22']</td></tr><tr><th id=\"L452\"><a href=\"#L452\">452</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR2], IP2)</td></tr><tr><th id=\"L453\"><a href=\"#L453\">453</a></th><td>\u00a0 ['sub12 1', 'sub12 2', 'sub22']</td></tr><tr><th id=\"L454\"><a href=\"#L454\">454</a></th><td></td></tr><tr><th id=\"L455\"><a href=\"#L455\">455</a></th><td>Subscriptions can be on multiple specifications::</td></tr><tr><th id=\"L456\"><a href=\"#L456\">456</a></th><td></td></tr><tr><th id=\"L457\"><a href=\"#L457\">457</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR1, IQ], IP2, 'sub1q2')</td></tr><tr><th id=\"L458\"><a href=\"#L458\">458</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1, IQ], IP2)</td></tr><tr><th id=\"L459\"><a href=\"#L459\">459</a></th><td>\u00a0 ['sub1q2']</td></tr><tr><th id=\"L460\"><a href=\"#L460\">460</a></th><td>\u00a0 </td></tr><tr><th id=\"L461\"><a href=\"#L461\">461</a></th><td>As with single subscriptions and non-subscription adapters, you can</td></tr><tr><th id=\"L462\"><a href=\"#L462\">462</a></th><td>specify None for the first required interface, to specify a default::</td></tr><tr><th id=\"L463\"><a href=\"#L463\">463</a></th><td></td></tr><tr><th id=\"L464\"><a href=\"#L464\">464</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([None, IQ], IP2, 'sub_q2')</td></tr><tr><th id=\"L465\"><a href=\"#L465\">465</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IS, IQ], IP2)</td></tr><tr><th id=\"L466\"><a href=\"#L466\">466</a></th><td>\u00a0 ['sub_q2']</td></tr><tr><th id=\"L467\"><a href=\"#L467\">467</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1, IQ], IP2)</td></tr><tr><th id=\"L468\"><a href=\"#L468\">468</a></th><td>\u00a0 ['sub_q2', 'sub1q2']</td></tr><tr><th id=\"L469\"><a href=\"#L469\">469</a></th><td></td></tr><tr><th id=\"L470\"><a href=\"#L470\">470</a></th><td>You can have subscriptions that are indepenent of any specifications::</td></tr><tr><th id=\"L471\"><a href=\"#L471\">471</a></th><td>\u00a0 </td></tr><tr><th id=\"L472\"><a href=\"#L472\">472</a></th><td>\u00a0 &gt;&gt;&gt; list(registry.subscriptions([], IP1))</td></tr><tr><th id=\"L473\"><a href=\"#L473\">473</a></th><td>\u00a0 []</td></tr><tr><th id=\"L474\"><a href=\"#L474\">474</a></th><td></td></tr><tr><th id=\"L475\"><a href=\"#L475\">475</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([], IP2, 'sub2')</td></tr><tr><th id=\"L476\"><a href=\"#L476\">476</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([], IP1)</td></tr><tr><th id=\"L477\"><a href=\"#L477\">477</a></th><td>\u00a0 ['sub2']</td></tr><tr><th id=\"L478\"><a href=\"#L478\">478</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([], IP1, 'sub1')</td></tr><tr><th id=\"L479\"><a href=\"#L479\">479</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([], IP1)</td></tr><tr><th id=\"L480\"><a href=\"#L480\">480</a></th><td>\u00a0 ['sub2', 'sub1']</td></tr><tr><th id=\"L481\"><a href=\"#L481\">481</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([], IP2)</td></tr><tr><th id=\"L482\"><a href=\"#L482\">482</a></th><td>\u00a0 ['sub2']</td></tr><tr><th id=\"L483\"><a href=\"#L483\">483</a></th><td></td></tr><tr><th id=\"L484\"><a href=\"#L484\">484</a></th><td>Unregistering subscribers</td></tr><tr><th id=\"L485\"><a href=\"#L485\">485</a></th><td>-------------------------</td></tr><tr><th id=\"L486\"><a href=\"#L486\">486</a></th><td></td></tr><tr><th id=\"L487\"><a href=\"#L487\">487</a></th><td>We can unregister subscribers.\u00a0 When unregistering a subscriber, we</td></tr><tr><th id=\"L488\"><a href=\"#L488\">488</a></th><td>can unregister a specific subscriber:</td></tr><tr><th id=\"L489\"><a href=\"#L489\">489</a></th><td></td></tr><tr><th id=\"L490\"><a href=\"#L490\">490</a></th><td>\u00a0 &gt;&gt;&gt; registry.unsubscribe([IR1], IP1, 'sub11')</td></tr><tr><th id=\"L491\"><a href=\"#L491\">491</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1], IP1)</td></tr><tr><th id=\"L492\"><a href=\"#L492\">492</a></th><td>\u00a0 ['sub_1', 'sub12 1', 'sub12 2']</td></tr><tr><th id=\"L493\"><a href=\"#L493\">493</a></th><td></td></tr><tr><th id=\"L494\"><a href=\"#L494\">494</a></th><td>If we don't specify a value, then all subscribers matching the given</td></tr><tr><th id=\"L495\"><a href=\"#L495\">495</a></th><td>interfaces will be unsubscribed:</td></tr><tr><th id=\"L496\"><a href=\"#L496\">496</a></th><td></td></tr><tr><th id=\"L497\"><a href=\"#L497\">497</a></th><td>\u00a0 &gt;&gt;&gt; registry.unsubscribe([IR1], IP2)</td></tr><tr><th id=\"L498\"><a href=\"#L498\">498</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1], IP1)</td></tr><tr><th id=\"L499\"><a href=\"#L499\">499</a></th><td>\u00a0 ['sub_1']</td></tr><tr><th id=\"L500\"><a href=\"#L500\">500</a></th><td></td></tr><tr><th id=\"L501\"><a href=\"#L501\">501</a></th><td></td></tr><tr><th id=\"L502\"><a href=\"#L502\">502</a></th><td>Subscription adapters</td></tr><tr><th id=\"L503\"><a href=\"#L503\">503</a></th><td>---------------------</td></tr><tr><th id=\"L504\"><a href=\"#L504\">504</a></th><td></td></tr><tr><th id=\"L505\"><a href=\"#L505\">505</a></th><td>We normally register adapter factories, which then allow us to compute</td></tr><tr><th id=\"L506\"><a href=\"#L506\">506</a></th><td>adapters, but with subscriptions, we get multiple adapters.\u00a0 Here's an</td></tr><tr><th id=\"L507\"><a href=\"#L507\">507</a></th><td>example of multiple-object subscribers::</td></tr><tr><th id=\"L508\"><a href=\"#L508\">508</a></th><td></td></tr><tr><th id=\"L509\"><a href=\"#L509\">509</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR, IQ], IM, M)</td></tr><tr><th id=\"L510\"><a href=\"#L510\">510</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR, IQ], IM, M2)</td></tr><tr><th id=\"L511\"><a href=\"#L511\">511</a></th><td></td></tr><tr><th id=\"L512\"><a href=\"#L512\">512</a></th><td>\u00a0 &gt;&gt;&gt; subscribers = registry.subscribers((x, q), IM)</td></tr><tr><th id=\"L513\"><a href=\"#L513\">513</a></th><td>\u00a0 &gt;&gt;&gt; len(subscribers)</td></tr><tr><th id=\"L514\"><a href=\"#L514\">514</a></th><td>\u00a0 2</td></tr><tr><th id=\"L515\"><a href=\"#L515\">515</a></th><td>\u00a0 &gt;&gt;&gt; class_names = [s.__class__.__name__ for s in subscribers]</td></tr><tr><th id=\"L516\"><a href=\"#L516\">516</a></th><td>\u00a0 &gt;&gt;&gt; class_names.sort()</td></tr><tr><th id=\"L517\"><a href=\"#L517\">517</a></th><td>\u00a0 &gt;&gt;&gt; class_names</td></tr><tr><th id=\"L518\"><a href=\"#L518\">518</a></th><td>\u00a0 ['M', 'M2']</td></tr><tr><th id=\"L519\"><a href=\"#L519\">519</a></th><td>\u00a0 &gt;&gt;&gt; [(s.x is x and s.q is q) for s in subscribers]</td></tr><tr><th id=\"L520\"><a href=\"#L520\">520</a></th><td>\u00a0 [True, True]</td></tr><tr><th id=\"L521\"><a href=\"#L521\">521</a></th><td></td></tr><tr><th id=\"L522\"><a href=\"#L522\">522</a></th><td>adapter factory subcribers can't return None values</td></tr><tr><th id=\"L523\"><a href=\"#L523\">523</a></th><td></td></tr><tr><th id=\"L524\"><a href=\"#L524\">524</a></th><td>\u00a0 &gt;&gt;&gt; def M3(x, y):</td></tr><tr><th id=\"L525\"><a href=\"#L525\">525</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0return None</td></tr><tr><th id=\"L526\"><a href=\"#L526\">526</a></th><td></td></tr><tr><th id=\"L527\"><a href=\"#L527\">527</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR, IQ], IM, M3)</td></tr><tr><th id=\"L528\"><a href=\"#L528\">528</a></th><td>\u00a0 &gt;&gt;&gt; subscribers = registry.subscribers((x, q), IM)</td></tr><tr><th id=\"L529\"><a href=\"#L529\">529</a></th><td>\u00a0 &gt;&gt;&gt; len(subscribers)</td></tr><tr><th id=\"L530\"><a href=\"#L530\">530</a></th><td>\u00a0 2</td></tr><tr><th id=\"L531\"><a href=\"#L531\">531</a></th><td></td></tr><tr><th id=\"L532\"><a href=\"#L532\">532</a></th><td>Handlers</td></tr><tr><th id=\"L533\"><a href=\"#L533\">533</a></th><td>--------</td></tr><tr><th id=\"L534\"><a href=\"#L534\">534</a></th><td></td></tr><tr><th id=\"L535\"><a href=\"#L535\">535</a></th><td>A handler is a subscriber factory that doesn't produce any normal</td></tr><tr><th id=\"L536\"><a href=\"#L536\">536</a></th><td>output.\u00a0 It returns None.\u00a0 A handler is unlike adapters in that it does</td></tr><tr><th id=\"L537\"><a href=\"#L537\">537</a></th><td>all of its work when the factory is called.</td></tr><tr><th id=\"L538\"><a href=\"#L538\">538</a></th><td></td></tr><tr><th id=\"L539\"><a href=\"#L539\">539</a></th><td>To register a handler, simply provide None as the provided interface::</td></tr><tr><th id=\"L540\"><a href=\"#L540\">540</a></th><td></td></tr><tr><th id=\"L541\"><a href=\"#L541\">541</a></th><td>\u00a0 &gt;&gt;&gt; def handler(event):</td></tr><tr><th id=\"L542\"><a href=\"#L542\">542</a></th><td>\u00a0 ...\u00a0 \u00a0 \u00a0print 'handler', event</td></tr><tr><th id=\"L543\"><a href=\"#L543\">543</a></th><td></td></tr><tr><th id=\"L544\"><a href=\"#L544\">544</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscribe([IR1], None, handler)</td></tr><tr><th id=\"L545\"><a href=\"#L545\">545</a></th><td>\u00a0 &gt;&gt;&gt; registry.subscriptions([IR1], None) == [handler]</td></tr><tr><th id=\"L546\"><a href=\"#L546\">546</a></th><td>\u00a0 True</td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/adapter.txt\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44137.0}