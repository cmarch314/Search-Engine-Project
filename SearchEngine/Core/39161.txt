{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 8Timers Hash Map Union find Modifiers Lutz Kettner Matthias B sken Sylvain Pion and Micheal Seel 8 1 Timers CGAL provides classes for measuring the user process time and the real time The class CGAL Timer is the version for the user process time and the class CGAL Real timer is the version for the real time Instantiations of both classes are objects with a state The state is either running or it is stopped The state of an object t is controlled with t start and t stop The timer counts the time elapsed since its creation or last reset It counts only the time where it is in the running state The time information is given in seconds The timer counts also the number of intervals it was running i e it counts the number of calls of the start member function since the last reset If the reset occurs while the timer is running it counts as the first interval 8 2 Memory Size CGAL provides access to the memory size used by the program with the CGAL Memory sizer class Both the virtual memory size and the resident size are available the resident size does not account for swapped out memory nor for the memory which is not yet paged in 8 3 Unique Hash Map The class Unique hash map implements an injective mapping between a set of unique keys and a set of data values This is implemented using a chained hashing scheme and access operations take O 1 expected time Such a mapping is useful for example when keys are pointers handles iterators or circulators that refer to unique memory locations In this case the default hash function is Handle hash function 8 4 Union find CGAL also provides a class Union find that implements a partition of values into disjoint sets This is implemented with union by rank and path compression The running time for m set operations on n elements is O n m n where m n is the extremely slowly growing inverse of Ackermann s function 8 5 Protected Access to Internal Representations High level data structures typically maintain integrity of an internal data representation which they protect from the user A minimal while complete interface of the data structure allows manipulations in the domain of valid representations Additional operations might benefit from being allowed to access the internal data representation directly An example are intermediate steps within an algorithm where the internal representation would be invalid We present a general method to accomplish access in a safe manner such that the high level data structures can guarantee validity after the possibly compromising algorithm has finished its work An example are polyhedral surfaces in the Basic Library where a construction process like for a file scanner could be performed more efficiently on the internal halfedge data structure than by using the high level Euler operators of the polyhedron Figure Class diagram for the modifier It illustrates the safe access to an internal representation through an high level interface The solution provided here is inspired by the strategy pattern GHJV95 though it serves a different intent see Figure The abstract base class Modifier base R declares a pure virtual member function operator that accepts a single reference parameter of the internal representation type The member function delegate of the high level interface calls this operator with its internal representation An actual modifier implements this virtual function thus gaining access to the internal representation Once the modifier has finished its work the member function delegate is back in control and can check the validity of the internal representation Summarizing a user can implement and apply arbitrary functions based on the internal representation and keeps the benefit if a protected high level interface User provided modifiers must in any case return a valid internal representation or the checker in the high level interface is allowed and supposed to abort the program The indirection via the virtual function invocation is negligible for operations that consists of more than a pointer update or integer addition Next chapter Timers Hash Map Union find Modifiers Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Miscellany/Chapter_main.html", "title": "timers, hash map, union-find, modifiers", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Miscellany/main.tex' -->\n<html> <head>  \n<title>Timers, Hash Map, Union-find, Modifiers</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_8\"></a>\n  \n<h1>Chapter 8<BR>Timers, Hash Map, Union-find, Modifiers</h1>\n\n<A NAME=\"chapterTimer\"></A>\n<A NAME=\"chap:Miscellany\"></A>\n<EM>Lutz Kettner, Matthias B&auml;sken, Sylvain Pion, and\n  Micheal Seel</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>8.1&nbsp;&nbsp;&nbsp;Timers</h2>\n<P>\n\nC<SMALL>GAL</SMALL> provides classes for measuring the user process time and the real time.\nThe class <I><A HREF=\"../Timer_ref/Class_Timer.html#Cross_link_anchor_1719\">CGAL::Timer</A></I> is the version for the user process time and\nthe class <I><A HREF=\"../Timer_ref/Class_Real_timer.html#Cross_link_anchor_1717\">CGAL::Real_timer</A></I> is the version for the real time.\n<P>\n\nInstantiations of both classes are objects with a state. The state is\neither <I>running</I> or it is <I>stopped</I>. The state of an object\n<I>t</I> is controlled\nwith <I>t.start()</I> and <I>t.stop()</I> . The timer counts the\ntime elapsed since its creation or last reset. It counts only the time\nwhere it is in the running state. The time information is given in seconds.\nThe timer counts also the number of intervals it was running, i.e. it \ncounts the number of calls of the <I>start()</I> member function since the \nlast reset. If the reset occurs while the timer is running it counts as the\nfirst interval.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>8.2&nbsp;&nbsp;&nbsp;Memory Size</h2>\n<P>\n\nC<SMALL>GAL</SMALL> provides access to the memory size used by the program with the\n<I><A HREF=\"../Timer_ref/Class_Memory_sizer.html#Cross_link_anchor_1713\">CGAL::Memory_sizer</A></I> class.  Both the virtual memory size and the\nresident size are available (the resident size does not account for\nswapped out memory nor for the memory which is not yet paged-in).\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>8.3&nbsp;&nbsp;&nbsp;Unique Hash Map</h2>\n<P>\n\nThe class <I><A HREF=\"../Hash_map_ref/Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A></I> implements an injective mapping between\na set of unique keys and a set of data values.  This is implemented using\na chained hashing scheme and access operations take <MATH><I>O(1)</I></MATH> expected time.\nSuch a mapping is useful, for example, when keys are pointers, \nhandles, iterators or circulators that refer to unique memory locations.\nIn this case, the default hash function is <I><A HREF=\"../Hash_map_ref/Class_Handle_hash_function.html#Cross_link_anchor_1712\">Handle_hash_function</A></I>.\n<P>\n\n<a name=\"Section_4\"></a>\n        \n<h2>8.4&nbsp;&nbsp;&nbsp;Union-find</h2>\n<P>\n\nC<SMALL>GAL</SMALL> also provides a class <I><A HREF=\"../Union_find_ref/Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A></I> that implements a partition\nof values into disjoint sets.  This is implemented with union by rank and\npath compression.  The running time for <MATH><I>m</I></MATH> set operations on <MATH><I>n</I></MATH> elements\nis <MATH><I>O(n<IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">(m,n))</I></MATH> where <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">(m,n)</I></MATH> is the extremely slowly growing\ninverse of Ackermann's function.\n<P>\n\n<a name=\"Section_5\"></a>\n        \n<h2>8.5&nbsp;&nbsp;&nbsp;Protected Access to Internal Representations</h2>\n<P>\n\nHigh level data structures typically maintain integrity of an internal\ndata representation, which they protect from the user. A minimal while\ncomplete interface of the data structure allows manipulations in the\ndomain of valid representations. Additional operations might benefit\nfrom being allowed to access the internal data representation\ndirectly. An example are intermediate steps within an algorithm where\nthe internal representation would be invalid. We present a general\nmethod to accomplish access in a safe manner, such that the high level\ndata structures can guarantee validity after the possibly compromising\nalgorithm has finished its work. An example are polyhedral surfaces in\nthe Basic Library, where a construction process like for\na file scanner could be performed more efficiently on the internal\nhalfedge data structure than by using the high-level Euler operators\nof the polyhedron.\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>Class diagram for the modifier. It illustrates the\n             safe access to an internal representation through an\n             high-level interface.\n    <A NAME=\"figureModifierDesign\"></A>\n<P>\n\n<CENTER>\n    <A HREF=\"modifier.gif\">\n        <img src=\"modifier_small.gif\" alt=\"Modifier Class Diagram\"></A><BR>\n\n</CENTER>\n<P>\n\nThe solution provided here is inspired by the strategy\npattern&nbsp;[<A HREF=\"../biblio.html#Biblio_cgal:ghjv-dpero-95\">GHJV95</A>], though it serves a different intent, see\nFigure&nbsp;<A HREF=\"Chapter_main.html#figureModifierDesign\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.  The abstract base class\n<I><A HREF=\"../Modifier_ref/Class_Modifier_base.html#Cross_link_anchor_1716\">Modifier_base</A>&lt;R&gt;</I> declares a pure virtual member function\n<I>operator()</I> that accepts a single reference parameter of the\ninternal representation type. The member function <I>delegate()</I> of\nthe high-level interface calls this <I>operator()</I> with its internal\nrepresentation.  An actual modifier implements this virtual function,\nthus gaining access to the internal representation. Once, the modifier\nhas finished its work, the member function <I>delegate()</I> is back in\ncontrol and can check the validity of the internal representation.\nSummarizing, a user can implement and apply arbitrary functions based\non the internal representation and keeps the benefit if a protected\nhigh-level interface. User provided modifiers must in any case return\na valid internal representation or the checker in the high-level\ninterface is allowed (and supposed) to abort the program. The\nindirection via the virtual function invocation is negligible for\noperations that consists of more than a pointer update or integer\naddition.\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Miscellany_ref/Chapter_intro.html\">Timers, Hash Map, Union-find, Modifiers</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_8!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39161.0}