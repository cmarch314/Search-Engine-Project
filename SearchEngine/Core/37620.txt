{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 4 6 Compressed Molecule Input Up 4 Reading and Writing Next 4 8 Flavored Reading and 4 7 Format control from the command line Using the methods outlined above it is possible to allow the stream format to be controlled from the command line OEChem s oemolstreams control the format by interpreting the input and output file names The following is a simple example of using command line arguments to allow OEChem programs to support many file formats at run time usr bin env python ch4 7 py from openeye oechem import import sys if len sys argv 3 print usage ch4 7 py infile outfile sys exit ifs oemolistream sys argv 1 ofs oemolostream sys argv 2 for mol in ifs GetOEMols OEWriteMolecule ofs mol Download as text The example above allows a user to specify the input and output files and formats from the command line For instance if the above listing is a program called foo py prompt foo py file1 sdf file1 smi will convert file1 sdf from MDL s SD format to Daylight s SMILES format A first extension of this idea allows access to stdin and stdout via the filename For instance prompt foo py file2 mol2 This command will read file2 mol2 in MOL2 format and write the molecules to stdout in SMILES the default format Thus if you have another program GetFromDatabase which gets molecules from a database and writes them in SMILES format you can chain it with any OEChem program Using your operating system s redirection commands e g Unix pipe or redirect you can move molecules directly from GetFromDatabase to foo py without a temporary file prompt GetFromDatabase foo py file3 sdf This convert command will take the SMILES format output from GetFromDatabase send it to foo py on stdin with the default format of OEFormat SMI and generate an SD format file However to make this concept of using stdin and stdout for piping data really useful one needs to be able to control the format of stdin and stdout similarly to the way it would be controlled for temporary files To facilitate this oemolstreams interpret filenames which are ONLY format extensions to indicate format control for stdin and stdout Now using our program foo py from listing 4 7 above prompt foo py smi mol2 This command opens stdin with SMILES format and opens stdout with MOL2 format Now we have complete format control of stdin and stdout from the command line If we have a program GenerateStructures which only writes MOL2 format and another program GenerateData which only reads SD format we can use them from the command line with any OEChem program which uses command line arguments for file specification prompt GenerateStructures foo py mol2 sd GenerateData This command demonstrates how any OEChem program with command line file specification can be used to pipe formatted input and output OEChem Python Theory Manual Version 1 3 1 Previous 4 6 Compressed Molecule Input Up 4 Reading and Writing Next 4 8 Flavored Reading and Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node23.html", "title": "4.7 format control from the command line", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>4.7 Format control from the command line</title>\n<META NAME=\"description\" CONTENT=\"4.7 Format control from the command line\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node24.html\">\n<LINK REL=\"previous\" HREF=\"node22.html\">\n<LINK REL=\"up\" HREF=\"node16.html\">\n<LINK REL=\"next\" HREF=\"node24.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node22.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node24.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node22.html\">4.6 Compressed Molecule Input</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node24.html\">4.8 Flavored Reading and</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION006700000000000000000\">\n4.7 Format control from the command line</A>\n</H1>\n\n<P>\nUsing the methods outlined above, it is possible to allow the stream format\nto be controlled from the command line.  OEChem's oemolstreams control\nthe format by interpreting the input and output file names.\n\n<P>\nThe following is a simple example of using command-line arguments to allow\nOEChem programs to support many file formats at run-time.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n#ch4-7.py\n\nfrom openeye.oechem import *\nimport sys\n\nif len(sys.argv)!=3:\n    print \"usage: ch4-7.py &lt;infile&gt; &lt;outfile&gt;\"\n    sys.exit()\n\nifs = oemolistream(sys.argv[1])\nofs = oemolostream(sys.argv[2])\n\nfor mol in ifs.GetOEMols():\n    OEWriteMolecule(ofs, mol)\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-7.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe example above allows a user to specify the input and output files and\nformats from the command line.\n\n<P>\nFor instance, if the above listing is a program called <code>foo.py</code>:\nprompt&gt;foo.py file1.sdf file1.smi\n\n<P>\nwill convert <code>file1.sdf</code> from MDL's SD format to Daylight's SMILES\nformat.\n\n<P>\nA first extension of this idea allows access to <code>stdin</code> and\n<code>stdout</code> via the \"-\" filename.\n\n<P>\nFor instance:\n<dl><dd><pre class=\"verbatim\">prompt&gt;foo.py file2.mol2 -\n</pre></dl>\n\n<P>\nThis command will read <code>file2.mol2</code> in MOL2 format and write the\nmolecules to <code>stdout</code> in SMILES, the default format.\n\n<P>\nThus if you have another program <code>GetFromDatabase</code> which gets\nmolecules from a database and writes them in SMILES format, you can chain\nit with any OEChem program.  Using your operating system's redirection\ncommands (e.g. - Unix pipe <code>\"|\"</code> or redirect <code>\"&gt;\"</code>) you can move\nmolecules directly from <code>GetFromDatabase</code> to <code>foo.py</code> without a\ntemporary file.\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt;GetFromDatabase | foo.py - file3.sdf\n</pre></dl>\n\n<P>\nThis convert command will take the SMILES format output from\n<code>GetFromDatabase</code>, send it to foo.py on <code>stdin</code> with the\ndefault format of OEFormat_SMI and generate an SD format file.\n\n<P>\nHowever, to make this concept of using <code>stdin</code> and <code>stdout</code>\nfor piping data really useful, one needs to be able to control the\nformat of <code>stdin</code> and <code>stdout</code> similarly to the way it would\nbe controlled for temporary files.  To facilitate this, oemolstreams\ninterpret filenames which are ONLY format extensions to indicate\nformat control for <code>stdin</code> and <code>stdout</code>.\n\n<P>\nNow, using our program <code>foo.py</code> from listing 4.7 above:\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt;foo.py .smi .mol2\n</pre></dl>\n\n<P>\nThis command opens <code>stdin</code> with SMILES format and opens\n<code>stdout</code> with MOL2 format.\n\n<P>\nNow we have complete format control of <code>stdin</code> and <code>stdout</code>\nfrom the command line.  If we have a program\n<code>GenerateStructures</code>, which only writes MOL2 format and another\nprogram <code>GenerateData</code>, which only reads SD format, we can use\nthem from the command line with any OEChem program which uses\ncommand-line arguments for file specification.\n\n<P>\n<dl><dd><pre class=\"verbatim\">prompt&gt; GenerateStructures | foo.py .mol2 .sd | GenerateData\n</pre></dl>\n\n<P>\nThis command demonstrates how any OEChem program with command-line file\nspecification can be used to pipe formatted input and output.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node22.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node24.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node22.html\">4.6 Compressed Molecule Input</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node24.html\">4.8 Flavored Reading and</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37620.0}