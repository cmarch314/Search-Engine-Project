{"text": "Research Projects News Notes CV Projects Lambda Calculus Interpreter in Scheme April 2 12 to April 2 12 So this was a cool class project that I worked on where we were to implement a lambda calculus interpreter in any language of our choice It just seemed too natural to do this in Scheme It attempts to implement both alpha and beta reductions The following code for the interpreter is also available as a gist with test cases https gist github com VijayKrishna 518 292 js UCI Class Project INF212 Analysis of Programming Languages Nicholas DiGiuseppe and Vijay Krishna Palepu 1 interpreter is not case sensitive 2 interpreter lives in the world of symbols and lists 3 interpreter requires proper parenthesis 4 does not work with numbers such as 1 2 3 reference http matt might net articles implementing a programming language original 7 lines eval takes an expression and an environment to a value define eval e env display evaluating display e display with display env newline cond symbol e begin display option 1 display if boolean assq e env e cadr assq e env newline if boolean assq e env e cadr assq e env 1 length e begin display option 2 display cons e env newline eval car e env eq car e begin display option 3 display cons e env newline cons e env else begin display option 4 display e newline iterApply e env apply eval car e env eval cadr e env apply takes a function and an argument to a value define apply f x display applying display x display to display f newline if symbol f if it is not pair begin list f x let chek lambdaCheck f cond chek list list f x chek list list car f x else eval cddr car f cons list cadr car f find f x cdr f additions define interpret e env display e interpret display e newline if pair e let e eval e env cond symbol e e consider doing a not pair e instead of symbol e 1 length e car e and 2 length e symbol car e e 2 length e let env list cadr e e car e itrate e env 2 length e let env cdr e e car e itrate e env e define itrate l nl env if null l nl begin itrate cdr l append nl list interpret car l env env begin alpha reduction define flatten l nl if null l nl begin cond symbol car l flatten cdr l append nl list car l pair car l flatten cdr l append nl flatten car l define find l al let nl flatten l cond null nl al eq car nl begin find cddr nl replace al cadr nl else find cdr nl al define replace l var nl if null l nl begin if symbol l cond eq l var string symbol string append symbol string var 1 not eq l var l replace cdr l var append nl cond and symbol car l eq car l var list string symbol string append symbol string var 1 and symbol car l not eq car l var list car l pair car l list replace car l var end alpha reduction define lambdaCheck l count cond null l count and symbol car l and count 1 eq car l 1 and symbol car l not eq car l count else lambdaCheck car l 1 count TL DR Lamba Calculus interpreter in Scheme Tags scheme lambda calculus interpreter Related Posts 11 Jan 2 15 Part of Winning Team UCI Data Science Hackathon28 Dec 2 14 Having Fun with Java Bytecode11 Dec 2 14 PL241 Compiler home bitbucket com Linkedin Instagram medium stackoverflow gist github com archives Background Photo Credit Sudha Palepu", "_id": "http://www.ics.uci.edu/~vpalepu/2012/04/16/Lambda-Calculus-Interpreter.html", "title": "lambda calculus interpreter in scheme", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en-us\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Vijay Krishna Palepu\" />\n  <link rel=\"shortcut icon\" href=\"http://www.ics.uci.edu/~vpalepu/images/favicon.gif\" />\n  <title>Lambda Calculus Interpreter in Scheme</title>\n  \n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/bootstrap.min.css\" type=\"text/css\" /> -->\n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/bootstrap-theme.min.css\" type=\"text/css\" /> -->\n  <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/screen.css\" type=\"text/css\" />\n  <!-- syntax highlighting CSS -->\n  <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/syntax.css\" type=\"text/css\" />\n  <link href='http://fonts.googleapis.com/css?family=Andada' rel='stylesheet' type='text/css'>\n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/pygments.css\" type=\"text/css\" > -->\n</head>\n<body >   \n  <!-- <img id=\"hover1\" class=\"pos\" src=\"http://www.ics.uci.edu/~vpalepu/images/brain.png\"> -->\n  <div class=\"container\">\n\n    <div class=\"plain stretch\">\n      \n      <span class=\"regular\">\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/research.html\" style=\"margin:20px;margin-left:0\">Research</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\" style=\"margin:20px\">Projects</a>\n        \n        \n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/news.html\" style=\"margin:20px\">News</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\" style=\"margin:20px\">Notes</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/cv.html\" style=\"margin:20px\">CV</a>\n        \n      </span>\n      <!-- <hr class=\"thinblue\" /> -->\n      <br>\n    </div>\n\n    <div class=\"plain stretch\" style=\"padding-bottom:5px\">  \n      \n        <span class=\"huge\">\n          <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\" class=\"icon-home\"></a> /\n          \n            <a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\">Projects</a> / Lambda Calculus Interpreter in Scheme\n          \n        </span>\n                 \n\n    </div>\n\n<!--     <div class=\"plain stretch\" >\n      <span class=\"huge\"> \n      \n        Vijay Krishna <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\"><b>Palepu</b></a>\n      \n        \n      </span>\n      <small>\n        vpalepu [at] uci [dot] edu &bull;\n        5243 Bren Hall,\n        <a href=\"http://www.spideruci.org\" target=\"_blank\">Spider Lab</a>,\n        <a href=\"http://www.uci.edu/\" target=\"_blank\">University of California, Irvine</a>, CA 92697-3440\n\n      </small>      \n\n      \n\n\n\n    \n\n    \n      \n        <hr class=\"thinblue\" />\n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/research.html\" style=\"margin:20px;margin-left:0\">Research</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\" style=\"margin:20px\">Projects</a>\n        \n        \n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/news.html\" style=\"margin:20px\">News</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\" style=\"margin:20px\">Notes</a>\n        \n\n        <a href=\"http://www.ics.uci.edu/~vpalepu/cv.html\" style=\"margin:20px\">CV</a>\n            \n    \n\n    </div> -->\n    \n    <title>Lambda Calculus Interpreter in Scheme</title>\n<div class=\"plain stretch\">\n<!-- <p>\n  <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\" class=\"icon-home\" ></a> /\n\t<a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\">Projects</a> /\n  Lambda Calculus Interpreter in Scheme\n</p> -->\n\n<div id=\"post\">\n  <span class=\"tags\">\n    April 2012 to April 2012\n  </span>\n  \n  \n<p>So this was a cool class project that I worked on where we were to implement a lambda calculus interpreter in any language of our choice. It just seemed too natural to do this in <a href=\"http://en.wikipedia.org/wiki/Scheme_(programming_language)\">Scheme</a>. :)</p>\n\n<p>It attempts to implement both alpha and beta reductions.</p>\n\n<p>The following code for the interpreter is also available as a gist, with test cases: <a href=\"https://gist.github.com/VijayKrishna/5180292.js\">https://gist.github.com/VijayKrishna/5180292.js</a></p>\n\n<div class=\"highlight\"><pre><code class=\"language-scheme\" data-lang=\"scheme\"><span class=\"c1\">;;UCI Class Project - INF212 Analysis of Programming Languages</span>\n<span class=\"c1\">;;Nicholas DiGiuseppe and Vijay Krishna Palepu</span>\n<span class=\"c1\">;;1.interpreter is not case sensitive.</span>\n<span class=\"c1\">;;2.interpreter lives in the world of symbols and lists.</span>\n<span class=\"c1\">;;3.interpreter requires proper parenthesis.</span>\n<span class=\"c1\">;;4.does not work with numbers such as 1 2 3...</span>\n<span class=\"c1\">;;reference: http://matt.might.net/articles/implementing-a-programming-language/</span>\n\n<span class=\"c1\">;;original 7 lines</span>\n<span class=\"c1\">; eval takes an expression and an environment to a value</span>\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;evaluating &quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot; with &quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">env</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n    <span class=\"p\">((</span><span class=\"nb\">symbol? </span><span class=\"nv\">e</span><span class=\"p\">)</span>       \n     <span class=\"p\">(</span><span class=\"k\">begin </span>\n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;option 1 &quot;</span><span class=\"p\">)</span> \n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">boolean? </span><span class=\"p\">(</span><span class=\"nb\">assq </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">))</span> <span class=\"nv\">e</span> <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"p\">(</span><span class=\"nb\">assq </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">))))</span> \n       <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span> \n       <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">boolean? </span><span class=\"p\">(</span><span class=\"nb\">assq </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">))</span> <span class=\"nv\">e</span> <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"p\">(</span><span class=\"nb\">assq </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">)))</span>\n       <span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n    <span class=\"p\">((</span><span class=\"nb\">= </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">length </span><span class=\"nv\">e</span><span class=\"p\">))</span>\n     <span class=\"p\">(</span><span class=\"nf\">begin</span>\n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;option 2 &quot;</span><span class=\"p\">)</span> \n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">))</span> \n       <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n    <span class=\"p\">((</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"err\">\u03bb</span><span class=\"p\">)</span>  \n     <span class=\"p\">(</span><span class=\"k\">begin </span>\n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;option 3 &quot;</span><span class=\"p\">)</span> \n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">))</span> \n       <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span> \n       <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">else </span>\n     <span class=\"p\">(</span><span class=\"k\">begin </span>\n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;option 4 &quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">e</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span> \n       <span class=\"c1\">;(iterApply e env)</span>\n       <span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"nv\">env</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"nv\">env</span><span class=\"p\">))</span>\n       <span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"c1\">; apply takes a function and an argument to a value</span>\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">f</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot;applying &quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot; to &quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"c1\">;if it is not pair</span>\n      <span class=\"p\">(</span><span class=\"k\">begin </span><span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"nv\">f</span> <span class=\"nv\">x</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">chek</span> <span class=\"p\">(</span><span class=\"nf\">lambdaCheck</span> <span class=\"nv\">f</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nf\">cond</span>\n          <span class=\"p\">((</span><span class=\"nb\">= </span><span class=\"mi\">0</span> <span class=\"nv\">chek</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"nv\">f</span> <span class=\"nv\">x</span><span class=\"p\">)))</span>\n          <span class=\"p\">((</span><span class=\"nb\">&lt; </span><span class=\"mi\">0</span> <span class=\"nv\">chek</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"nv\">x</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\">else </span><span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"p\">(</span><span class=\"nb\">cddr </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">f</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">cons </span><span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">f</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">find</span> <span class=\"nv\">f</span> <span class=\"nv\">x</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">f</span><span class=\"p\">))))</span>\n          <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"c1\">;;additions</span>\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">interpret</span> <span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"s\">&quot; e(interpret): &quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">display </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">newline</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">pair? </span><span class=\"nv\">e</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">e</span> <span class=\"p\">(</span><span class=\"nb\">eval </span><span class=\"nv\">e</span> <span class=\"nv\">env</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nf\">cond</span>\n          <span class=\"p\">((</span><span class=\"nb\">symbol? </span><span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"nv\">e</span><span class=\"p\">)</span> <span class=\"c1\">;consider doing a (not (pair? e)) instead of (symbol? e)</span>\n          <span class=\"p\">((</span><span class=\"nb\">= </span><span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\">length </span><span class=\"nv\">e</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">))</span>\n          <span class=\"p\">((</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">length </span><span class=\"nv\">e</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)))</span> <span class=\"nv\">e</span><span class=\"p\">)</span>\n          <span class=\"p\">((</span><span class=\"nb\">= </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">length </span><span class=\"nv\">e</span><span class=\"p\">))</span>\n           <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">env</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">e</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"nf\">e</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)))</span>\n             <span class=\"p\">(</span><span class=\"nf\">itrate</span> <span class=\"nv\">e</span> <span class=\"o\">&#39;</span><span class=\"p\">()</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n             <span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n          <span class=\"p\">((</span><span class=\"nb\">&lt; </span><span class=\"mi\">2</span> <span class=\"p\">(</span><span class=\"nb\">length </span><span class=\"nv\">e</span><span class=\"p\">))</span>\n           <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">env</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">e</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">e</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">e</span><span class=\"p\">)))</span>\n             <span class=\"p\">(</span><span class=\"nf\">itrate</span> <span class=\"nv\">e</span> <span class=\"o\">&#39;</span><span class=\"p\">()</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n             <span class=\"p\">))</span>\n          <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"nv\">e</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">itrate</span> <span class=\"nv\">l</span> <span class=\"nv\">nl</span> <span class=\"nv\">env</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">null? </span><span class=\"nv\">l</span><span class=\"p\">)</span>\n      <span class=\"nv\">nl</span>\n      <span class=\"p\">(</span><span class=\"k\">begin </span>\n        <span class=\"p\">(</span><span class=\"nf\">itrate</span> \n         <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">l</span><span class=\"p\">)</span> \n         <span class=\"p\">(</span><span class=\"nb\">append </span>\n          <span class=\"nv\">nl</span> \n          <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">interpret</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">env</span><span class=\"p\">))</span>\n          <span class=\"p\">)</span>\n         <span class=\"nv\">env</span>\n         <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"c1\">;begin alpha reduction</span>\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"nv\">l</span> <span class=\"nv\">nl</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">null? </span><span class=\"nv\">l</span><span class=\"p\">)</span>\n      <span class=\"nv\">nl</span>\n      <span class=\"p\">(</span><span class=\"nf\">begin</span>\n        <span class=\"p\">(</span><span class=\"nf\">cond</span>\n          <span class=\"p\">((</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"nv\">nl</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)))))</span>\n          <span class=\"p\">((</span><span class=\"nb\">pair? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"nv\">nl</span> <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"p\">()))))</span>\n          <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">find</span> <span class=\"nv\">l</span> <span class=\"nv\">al</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">((</span><span class=\"nf\">nl</span> <span class=\"p\">(</span><span class=\"nf\">flatten</span> <span class=\"nv\">l</span> <span class=\"o\">&#39;</span><span class=\"p\">())))</span>\n    <span class=\"p\">(</span><span class=\"nf\">cond</span>\n      <span class=\"p\">((</span><span class=\"nb\">null? </span><span class=\"nv\">nl</span><span class=\"p\">)</span> <span class=\"nv\">al</span><span class=\"p\">)</span>\n      <span class=\"p\">((</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">nl</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"err\">\u03bb</span><span class=\"p\">)</span>\n       <span class=\"p\">(</span><span class=\"k\">begin </span>\n         <span class=\"p\">(</span><span class=\"nf\">find</span> <span class=\"p\">(</span><span class=\"nb\">cddr </span><span class=\"nv\">nl</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">replace</span> <span class=\"nv\">al</span> <span class=\"p\">(</span><span class=\"nb\">cadr </span><span class=\"nv\">nl</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"p\">()))</span>\n         <span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\">else </span><span class=\"p\">(</span><span class=\"nf\">find</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">nl</span><span class=\"p\">)</span> <span class=\"nv\">al</span><span class=\"p\">))</span>   \n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">replace</span> <span class=\"nv\">l</span> <span class=\"nv\">var</span> <span class=\"nv\">nl</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">null? </span><span class=\"nv\">l</span><span class=\"p\">)</span>\n      <span class=\"nv\">nl</span>\n      <span class=\"p\">(</span><span class=\"nf\">begin</span>\n        <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"nv\">l</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">cond</span>\n              <span class=\"p\">((</span><span class=\"nb\">eq? </span><span class=\"nv\">l</span> <span class=\"nv\">var</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">string-&gt;symbol </span><span class=\"p\">(</span><span class=\"nb\">string-append </span><span class=\"p\">(</span><span class=\"nb\">symbol-&gt;string </span><span class=\"nv\">var</span><span class=\"p\">)</span> <span class=\"s\">&quot;1&quot;</span><span class=\"p\">)))</span>\n              <span class=\"p\">((</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">eq? </span><span class=\"nv\">l</span> <span class=\"nv\">var</span><span class=\"p\">))</span> <span class=\"nv\">l</span><span class=\"p\">)</span>\n              <span class=\"p\">)</span>\n            \n            <span class=\"p\">(</span><span class=\"nf\">replace</span> <span class=\"p\">(</span><span class=\"nb\">cdr </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">var</span> \n                     <span class=\"p\">(</span><span class=\"nb\">append </span><span class=\"nv\">nl</span>\n                             <span class=\"p\">(</span><span class=\"k\">cond </span>\n                               <span class=\"p\">((</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">var</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">string-&gt;symbol </span><span class=\"p\">(</span><span class=\"nb\">string-append </span><span class=\"p\">(</span><span class=\"nb\">symbol-&gt;string </span><span class=\"nv\">var</span><span class=\"p\">)</span> <span class=\"s\">&quot;1&quot;</span><span class=\"p\">))))</span>\n                               <span class=\"p\">((</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">var</span><span class=\"p\">)))</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)))</span>\n                               <span class=\"p\">((</span><span class=\"nb\">pair? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">replace</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">var</span> <span class=\"o\">&#39;</span><span class=\"p\">())))</span>\n                               <span class=\"p\">)</span>\n                             <span class=\"p\">)</span>\n                     <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"c1\">;end alpha reduction</span>\n\n<span class=\"p\">(</span><span class=\"k\">define </span><span class=\"p\">(</span><span class=\"nf\">lambdaCheck</span> <span class=\"nv\">l</span> <span class=\"nv\">count</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">cond</span>\n    <span class=\"p\">((</span><span class=\"nb\">null? </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"nv\">count</span><span class=\"p\">)</span>\n    <span class=\"p\">((</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">count</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"err\">\u03bb</span><span class=\"p\">))</span> <span class=\"mi\">-1</span><span class=\"p\">))</span>\n    <span class=\"p\">((</span><span class=\"k\">and </span><span class=\"p\">(</span><span class=\"nb\">symbol? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">eq? </span><span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"o\">&#39;</span><span class=\"err\">\u03bb</span><span class=\"p\">)))</span> <span class=\"nv\">count</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">else </span><span class=\"p\">(</span><span class=\"nf\">lambdaCheck</span> <span class=\"p\">(</span><span class=\"nb\">car </span><span class=\"nv\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"nv\">count</span><span class=\"p\">)))</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span></code></pre></div>\n\n</div>\n\n<div><i>TL;DR</i> - Lamba Calculus interpreter in Scheme. </div>\n\n<div style=\"margin-bottom: 10px\">\n\t<br>\n\t<b class=\"label\">Tags:</b>\n\t\n\t\t<span class=\"tags\">scheme</span>\n\t\t\n\t\t\t<span> </span>\n\t\t\n\t\n\t\t<span class=\"tags\">lambda-calculus</span>\n\t\t\n\t\t\t<span> </span>\n\t\t\n\t\n\t\t<span class=\"tags\">interpreter</span>\n\t\t\n\t\n</div>\n</div>\n\n<div class=\"plain stretch\">\n  <h2>Related Posts</h2>\n  <ul class=\"posts\">\n    \n      <li><span>11 Jan 2015</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2015/01/11/Won-Data-Science-Hackathon.html\">Part of Winning Team @ UCI Data Science Hackathon</a></li>\n    \n      <li><span>28 Dec 2014</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2014/12/28/Having-Fun-with-Java-Bytecode.html\">Having Fun with Java Bytecode</a></li>\n    \n      <li><span>11 Dec 2014</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2014/12/11/PL241-Compiler.html\">PL241-Compiler</a></li>\n    \n  </ul>\n</div>\n\n\n    <div class=\"plain stretch\" style=\"background:rgba(255, 255, 255, 0.85)\">  \n      <small>\n        <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\">home</a> &bull;\n        <a href=\"https://bitbucket.com/vpalepu\">@<b>bitbucket</b>.com</a> &bull;\n        <a href=\"http://www.linkedin.com/in/palepuvijaykrishna\" target=\"_blank\">@Linked<b>in</b></a> &bull;\n        <a href=\"http://instagram.com/vpalepu\" target=\"_blank\">@Instagram</a> &bull;\n        <a href=\"https://medium.com/@vkrishnapalepu\" target=\"_blank\">@medium</a> &bull;\n        <a href=\"http://stackoverflow.com/users/1481262/vijay\">@stack<b>overflow</b></a> &bull;\n        <a href=\"https://gist.github.com/VijayKrishna\">@<b>gist</b>.github.com</a>  &bull;\n        <a href=\"http://www.ics.uci.edu/~vpalepu/archives.html\"><b>arch</b>ives</a>\n        &bull;\n        Background Photo Credit: <a href=\"http://sudhapalepu.wordpress.com/\" target=\"_blank\">Sudha Palepu</a>\n      </small>\n    </div>    \n  </div>\n  </div> <!-- end of main -->\n  <!-- <div class=\"header\"></div> -->\n</body>\n</html>\n", "id": 4622.0}