{"text": "David Eppstein Publications IEEE Symp Foundations of Computer Science FOCS I was on the program committee for the 34th Symposium 1993 The Hypertext Bibliography Project at MIT also includes listings of my FOCS papers Speeding up dynamic programming D Eppstein Z Galil and R Giancarlo 29th IEEE Symp Foundations of Comp Sci White Plains New York 1988 pp 488 496 Worksh Algorithms for Molecular Genetics Bethesda Maryland 1988 Tech Rep CUCS 379 88 Computer Science Dept Columbia University 1988 Appeared as Efficient algorithms with applications to molecular biology in Int Advanced Workshop on Sequences Positano Italy 1988 Sequences Combinatorics Compression Security Transmission R M Capocelli ed Springer Verlag 199 pp 59 74 The FOCS and Positano versions of this paper merged my results on a dynamic program used for RNA secondary structure prediction with Raffaele s on sequence comparison The Bethesda talk and the TR version both used the longer title Speeding up dynamic programming with application to the computation of RNA structure and included only the RNA result which used a mild convexity assumption on certain costs to save two orders of magnitude in total time This work incited a boom in computational biology within the theory community that is still going strong But the RNA results were quickly improved by a log factor Aggarwal et al at the same FOCS and never made it into a journal paper Bibtex Positano FOCS Citations Citations of Efficient algorithms MIT hypertext bibliography CiteSeer Provably good mesh generation M Bern D Eppstein and J Gilbert 31st IEEE Symp Foundations of Comp Sci St Louis Missouri 199 pp 231 241 J Comp Sys Sci 48 384 4 9 1994 special issue for 31st FOCS In this paper we construct triangulations of point sets and polygons by using quadtrees to add extra vertices to the input As a result we can guarantee that all triangles have angles bounded away from zero using a number of triangles within a constant of optimal this was the first paper to provide simultaneous bounds on mesh element quality and mesh complexity of this form and therefore the first to provide finite element mesh generation algorithms that guarantee both the robustness of the algorithm against unexpected input geometries and the quality of its output In the same paper we also use quadtrees to triangulate planar point sets so that all angles are non obtuse using linearly many triangles and to triangulate higher dimensional point sets with no small solid angles and a number of simplices within a constant of optimal Also we can augment any higher dimensional point set so the Delaunay triangulation has linear complexity In later follow up work I showed that the same technique can also be used to find a triangulation whose edges have total length within a constant factor of optimal Bern Mitchell and Ruppert showed that alternative methods can be used to triangulate any polygon without obtuse angles see Faster circle packing with application to nonobtuse triangulation for an algorithmic improvement to their technique Additionally with Bern Chew and Ruppert we showed that any point set in higher dimensions can be triangulated with nonobtuse simplices Bern and I surveyed these and related results in our paper Mesh generation and optimal triangulation BibTeX Citations Preliminary copy of journal version MIT hypertext bibliography CiteSeer ACM DL JCSS Dynamic three dimensional linear programming D Eppstein Tech Rep 91 53 ICS UCI 1991 32nd IEEE Symp Foundations of Comp Sci San Juan Puerto Rico 1991 pp 488 494 ORSA J Computing 4 36 368 1992 special issue on computational geometry Uses Dobkin Kirkpatrick hierarchies to perform linear programming queries in the intersection of several convex polyhedra By maintaining a collection of halfspaces as several subsets represented by polyhedra this leads to algorithms for a dynamic linear program in which updates change the set of constraints The fully dynamic results have largely been subsumed by Agarwal and Matou ek but this paper also includes polylog time results for semi online problems and uses them to give a fast randomized algorithm for the planar 2 center problem later improved by various authors most recently in Faster Construction of Planar Two Centers which re uses the data structures described here BibTeX Citations CiteSeer ACM DL Dynamic algorithms for half space reporting proximity problems and geometric minimum spanning trees P K Agarwal D Eppstein and J Matou ek 33rd IEEE Symp Foundations of Comp Sci Pittsburgh 1992 pp 8 89 This conference paper merged my results from Dynamic Euclidean minimum spanning trees with results of my co authors on nearest neighbors and halfspace range searching BibTeX Citations Sparsification A technique for speeding up dynamic graph algorithms D Eppstein Z Galil G F Italiano and A Nissenzweig 33rd IEEE Symp Foundations of Comp Sci Pittsburgh 1992 pp 6 69 Tech Rep RC 19272 839 7 IBM 1993 Tech Rep CS96 11 Univ Ca Foscari di Venezia Oct 1996 J ACM 44 5 669 696 1997 Uses a divide and conquer on the edge set of a graph together with the idea of replacing subgraphs by sparser certificates to make various dynamic algorithms as fast on dense graphs as they are on sparse graphs Applications include random generation of spanning trees as well as finding the k minimum weight spanning trees for a given parameter k BibTeX Citations MIT hypertext bibliography ACM DL Finding the k shortest paths D Eppstein 35th IEEE Symp Foundations of Comp Sci Santa Fe 1994 pp 154 165 Tech Rep 94 26 ICS UCI 1994 SIAM J Computing 28 2 652 673 1998 This paper presents an algorithm that finds multiple short paths connecting two terminals in a graph allowing repeated vertices and edges in the paths in constant time per path after a preprocessing stage dominated by a single source shortest path computation The paths it finds are the k shortest in the graph where k is a parameter given as input to the algorithm The k shortest paths problem has many important applications for finding alternative solutions to geographic path planning problems network routing hypothesis generation in computational linguistics and sequence alignment and metabolic pathway finding in bioinformatics Although there have been many papers on the k shortest paths problem before and after this one it has become frequently cited in those application areas Additionally it marks a boundary in the theoretical study of the problem prior theoretical work largely concerned how quickly the problem could be solved a line of research that was closed off by the optimal time bounds of this paper Subsequent work has focused instead on devising efficient algorithms for more complex alternative formulations of the problem that avoid the repeated vertices and other shortcomings of the alternative paths produced by this formulation BibTeX Full paper Citations Graehl implementation Jim nez Marzal implementations Shibuya implementation Martins implementation CiteSeer TR 94 SJC 98 ACM DL 3 Coloring in time O 1 3446n a no MIS algorithm R Beigel and D Eppstein Tech Rep 95 33 Electronic Coll Computational Complexity 1995 36th IEEE Symp Foundations of Comp Sci 1995 pp 444 453 DIMACS Worksh Faster Exact Solutions for NP Hard Problems 2 Speeds up 3 coloring by solving a harder problem constraint satisfaction in which each variable can take on one of three values and each constraint forbids a pair of variable assignments The detailed solution involves several long hairy case analyses Similar methods apply also to 3 list coloring 3 edge coloring and 3 SAT The 3 SAT algorithm is fixed parameter tractible in that it is polynomial time when the number of 3 variable clauses is O log n Merged into 3 coloring in time O 1 3289 n for the journal version BibTeX Citations DIMACS abstract and slides CiteSeer Parametric and kinetic minimum spanning trees P K Agarwal D Eppstein L J Guibas and M R Henzinger 39th IEEE Symp Foundations of Comp Sci 1998 pp 596 6 5 We describe algorithms for maintaining the minimum spanning tree in a graph in which the edge weights are piecewise linear functions of time that may change unpredictably We solve the problem in time O n2 3 polylog n per combinatorial change to the tree for general graphs and in time O n1 4 polylog n per combinatorial change to the tree for planar graphs BibTeX FOCS 98 talk slides Citations CiteSeer ACM DL Setting parameters by example D Eppstein arXiv cs DS 99 7 1 4 th IEEE Symp Foundations of Comp Sci 1999 pp 3 9 318 SIAM J Computing 32 3 643 653 2 3 We introduce a class of inverse parametric optimization problems in which one is given both a parametric optimization problem and a desired optimal solution the task is to determine parameter values that lead to the given solution We use low dimensional linear programming and geometric sampling techniques to solve such problems for minimum spanning trees shortest paths and other optimal subgraph problems and discuss applications in multicast routing vehicle path planning resource allocation and board game programming BibTeX Citations ACM DL FOCS ACM DL SJC Conferences Publications David Eppstein Theory Group Inf Comp Sci UC Irvine Semi automatically filtered from a common source file ", "_id": "http://www.ics.uci.edu/~eppstein/pubs/c-focs.html", "title": "david eppstein - publications", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html><head>\n<title>David Eppstein - Publications</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body bgcolor=\"#ffffff\" text=\"#000000\">\n<h1>David Eppstein - Publications</h1>\n<hr><p>\n<h2>\nIEEE Symp. Foundations of Computer Science (FOCS)\n</h2>\nI was on the program committee for the 34th Symposium, 1993.\n<p>\nThe <a href=\"http://theory.lcs.mit.edu/~dmjones/hbp/\">\nHypertext Bibliography Project</a> at MIT\nalso includes\n<a href=\"http://theory.lcs.mit.edu/~dmjones/FOCS/Authors/eppsteindavid.html\">\nlistings of my FOCS papers</a>.\n<p>\n<ul>\n<li><b>Speeding up dynamic programming</b>.<br>\nD. Eppstein,\n<a href=\"http://www.cs.columbia.edu/~galil/\">Z. Galil</a>,\nand\n<a href=\"http://hpdma2.math.unipa.it/giancarl/source.html\">R. Giancarlo</a>.<br>\n<a href=\"EppGalGia-FOCS-88.pdf\"><i>29th IEEE Symp. Foundations of\nComp. Sci.,</i> White Plains, New York, 1988, pp. 488-496</a>.<br>\n<i>Worksh. Algorithms for Molecular Genetics,</i> Bethesda, Maryland, 1988.<br>\nTech. Rep. CUCS-379-88, Computer Science Dept., Columbia University, 1988.<br>\nAppeared as \"Efficient algorithms with applications to molecular biology\" in\n<i>Int. Advanced Workshop on Sequences,</i> Positano, Italy, 1988.<br>\n<i>Sequences: Combinatorics, Compression, Security, Transmission,</i>\nR.M. Capocelli, ed., Springer-Verlag, 1990, pp. 59-74.\n<p>\nThe FOCS and Positano versions of this paper merged my results\non a dynamic program used for RNA secondary structure prediction,\nwith Raffaele's on sequence comparison.\nThe Bethesda talk and the TR version both used the longer title\n\"Speeding up dynamic programming\nwith application to the computation of RNA structure\", and included only\nthe RNA result, which\nused a mild convexity assumption on certain costs\nto save two orders of magnitude in total time.\nThis work incited a boom in computational biology within the theory\ncommunity that is still going strong.\nBut the RNA results were quickly improved by a log factor\n[Aggarwal et al. at the same FOCS] and never made it into a journal paper.\n<p>(Bibtex: <a href=\"/~eppstein/bibs/eppstein.html#Efficient algorithms for sequence analysis\">Positano</a>,\n<a href=\"/~eppstein/bibs/eppstein.html#Speeding up dynamic programming\">FOCS</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Speeding-up-dynamic-programming.html\">Citations</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Efficient-algorithms-with-applications-to-molecular-biology.html\">Citations of \"Efficient algorithms...\"</a> --\n<a href=\"http://theory.lcs.mit.edu/~dmjones/FOCS/References/eppsteingg1988:488.html\">MIT hypertext bibliography</a> --\n<a href=\"http://citeseer.ist.psu.edu/eppstein88speeding.html\">CiteSeer</a>)\n<p>\n<li><b>Provably good mesh generation</b>.<br>\n<a href=\"http://www.parc.xerox.com/csl/members/bern/\">M. Bern</a>,\nD. Eppstein, and \n<a href=\"http://sandbox.parc.xerox.com/gilbert/\">\nJ. Gilbert</a>.<br>\n<i>31st IEEE Symp. Foundations of Comp. Sci.,</i>\nSt. Louis, Missouri, 1990, pp. 231-241.<br>\n<i>J. Comp. Sys. Sci.</i> 48:384-409, 1994 (special issue for 31st FOCS).\n<p>\nIn this paper, we construct triangulations of point sets and polygons by\nusing quadtrees to add extra vertices to the input. As a result we can\nguarantee that all triangles have angles bounded\naway from zero, using a number of triangles within a constant of\noptimal; this was the first paper to provide simultaneous bounds on mesh\nelement quality and mesh complexity of this form, and therefore the\nfirst to provide finite element mesh generation algorithms that\nguarantee both the robustness of the algorithm against unexpected input\ngeometries and the quality of its output.\n<p>\nIn the same paper we also use quadtrees to triangulate planar point sets\nso that all angles are non-obtuse, using linearly many triangles, and to\ntriangulate higher dimensional point sets with no small solid angles and\na number of simplices within a constant of optimal.  Also, we can\naugment any higher dimensional point set so the Delaunay triangulation\nhas linear complexity.\n<p>\nIn later follow-up work, I showed that the same\ntechnique can also be used to find a triangulation whose edges have <a\nhref=\"p-mwst.html\">total length within a constant factor of\noptimal</a>. Bern, Mitchell, and Ruppert\nshowed that alternative methods can be used to triangulate any polygon\nwithout obtuse angles; see \"<a href=\"p-cpack.html\">Faster circle packing\nwith application to nonobtuse triangulation</a>\" for an algorithmic\nimprovement to their technique. Additionally, with Bern, Chew, and\nRuppert, we showed that <a href-\"p=dihedral.html\">any point set in\nhigher dimensions can be triangulated with nonobtuse simplices</a>.\nBern and I surveyed these and related results in our paper \"<a\nhref=\"p-meshgen.html\">Mesh generation and optimal triangulation</a>\".\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Provably good mesh generation\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Provably-good-mesh-generation.html\">Citations</a> --\n<a href=\"BerEppGil-JCSS-94.pdf\">Preliminary copy of journal version</a> --\n<a href=\"http://theory.lcs.mit.edu/~dmjones/FOCS/References/berneg1990:231.html\">MIT hypertext bibliography</a> --\n<a href=\"http://citeseer.ist.psu.edu/bern90provably.html\">CiteSeer</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=183122\">ACM DL (JCSS)</a>)\n<p>\n<li><b>Dynamic three-dimensional linear programming</b>.<br>\nD. Eppstein.<br>\n<a href=\"Epp-TR-91-53.pdf\">Tech. Rep. 91-53</a>, ICS, UCI, 1991.<br>\n<i>32nd IEEE Symp. Foundations of Comp. Sci.,</i>\nSan Juan, Puerto Rico, 1991, pp. 488-494.<br>\n<i>ORSA J. Computing</i> 4:360-368, 1992\n(special issue on computational geometry).\n<p>\nUses Dobkin-Kirkpatrick hierarchies to perform\n<a href=\"geom-lp.html\">linear programming</a>\nqueries in the intersection of several convex polyhedra.\nBy maintaining a collection of halfspaces as several subsets,\nrepresented by polyhedra, this leads to algorithms for a dynamic\nlinear program in which updates change the set of constraints.\nThe fully dynamic results have largely been subsumed\nby Agarwal and Matou&#353;ek, but this paper also includes\npolylog time results for semi-online problems,\nand uses them to give a fast randomized algorithm for the planar\n2-center problem (later improved by various authors, most recently\nin \"<a href=\"p-2c.html\">Faster Construction of Planar Two-Centers</a>\",\nwhich re-uses the data structures described here).\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Dynamic three-dimensional linear programming\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Dynamic-three-dimensional-linear-programming.html\">Citations</a> --\n<a href=\"http://citeseer.ist.psu.edu/eppstein92dynamic.html\">CiteSeer</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=123359\">ACM DL</a>)\n<p>\n<li><b>Dynamic algorithms for half-space reporting, proximity problems, and\ngeometric minimum spanning trees</b>.<br>\n<a href=\"http://www.cs.duke.edu/~pankaj/\">P.K. Agarwal</a>,\nD. Eppstein, and\n<a href=\"http://www.ms.mff.cuni.cz/acad/kam/matousek/\">J. Matou&#353;ek</a>.<br>\n<a href=\"AgaEppMat-FOCS-92.pdf\"><i>33rd IEEE Symp. Foundations of\nComp. Sci.,</i> Pittsburgh, 1992, pp. 80-89</a>.\n<p>\nThis conference paper merged my results from\n\"<a href=\"p-dynmst.html\">Dynamic Euclidean minimum\nspanning trees</a>\" with results of my co-authors on nearest neighbors\nand halfspace range searching.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Dynamic algorithms for half-space reporting, proximity problems, and geometric minimum spanning trees\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Dynamic-algorithms-for-half-space-reporting-proximity-problems-and-geometric-minimum-spanning-trees.html\">Citations</a>)\n<p>\n<li><b>Sparsification--A technique for speeding up dynamic graph algorithms</b>.<br>\nD. Eppstein,\n<a href=\"http://www.cs.columbia.edu/~galil/\">Z. Galil</a>, \n<a href=\"http://www.info.uniroma2.it/~italiano/\">\nG.F. Italiano</a>, and A. Nissenzweig.<br>\n<i>33rd IEEE Symp. Foundations of Comp. Sci.,</i> Pittsburgh, 1992, pp. 60-69.<br>\nTech. Rep. RC 19272 (83907), IBM, 1993.<br>\nTech. Rep. CS96-11, Univ. Ca' Foscari di Venezia, Oct. 1996.<br>\n<a href=\"http://doi.acm.org/10.1145/265910.265914\"><i>J. ACM</i> 44(5):669-696, 1997</a>.\n<p>\nUses a divide and conquer on the edge set of a graph, together with the\nidea of replacing subgraphs by sparser certificates, to make various\ndynamic algorithms as fast on dense graphs as they are on sparse graphs.\nApplications include random generation of spanning trees\nas well as finding the <i>k</i>\n<a href=\"mst.html\">minimum weight spanning trees</a>\nfor a given parameter <i>k.</i>\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Sparsification --- A technique for speeding up dynamic graph algorithms\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Sparsification-A-technique-for-speeding-up-dynamic-graph-algorithms.html\">Citations</a> --\n<a href=\"http://theory.lcs.mit.edu/~dmjones/FOCS/References/eppsteingin1992:60.html\">MIT hypertext bibliography</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=265914\">ACM DL</a>)\n<p>\n<li><b>Finding the <i>k</i> shortest paths</b>.<br>\nD. Eppstein.<br>\n<i>35th IEEE Symp. Foundations of Comp. Sci.,</i> Santa Fe, 1994, pp. 154-165.<br>\n<a href=\"Epp-TR-94-26.pdf\">Tech. Rep. 94-26</a>, ICS, UCI, 1994.<br>\n<a href=\"http://dx.doi.org/10.1137/S0097539795290477\">\n<i>SIAM J. Computing</i> 28(2):652-673, 1998</a>.\n<p>\nThis paper presents an algorithm that finds multiple short paths connecting\ntwo terminals in a graph\n(allowing repeated vertices and edges in the paths)\nin constant time per path after a preprocessing stage\ndominated by a single-source shortest path computation.\nThe paths it finds are the <i>k</i> shortest in the graph, where <i>k</i> is a\nparameter given as input to the algorithm.\n<p>\nThe <i>k</i> shortest paths problem has many important applications for finding\nalternative solutions to geographic path planning problems, network\nrouting, hypothesis generation in computational linguistics, and\nsequence alignment and metabolic pathway finding in\nbioinformatics. Although there have been many papers on the\n<i>k</i> shortest paths problem before and after this one, it has become\nfrequently cited in those application areas.\nAdditionally, it marks a boundary in the theoretical study of the problem:\nprior theoretical work largely concerned how quickly the problem could\nbe solved, a line of research that was closed off by the optimal time\nbounds of this paper. Subsequent work has focused instead\non devising efficient algorithms for more complex alternative\nformulations of the problem that avoid the repeated\nvertices and other shortcomings of the alternative paths produced by\nthis formulation.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Finding the $k$ shortest paths\">BibTeX</a> --\n<a href=\"Epp-SJC-98.pdf\">Full paper</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Finding-the-k-shortest-paths.html\">Citations</a> --\n<a href=\"graehl.zip\">Graehl implementation</a> --\n<a href=\"http://terra.act.uji.es/REA/\">Jim&eacute;nez-Marzal implementations</a> --\n<a href=\"Shibuya.tar.gz\">Shibuya implementation</a> --\n<a href=\"http://www.mat.uc.pt/~eqvm/cientificos/research.html\">Martins implementation</a> --\nCiteSeer:\n<a href=\"http://citeseer.ist.psu.edu/eppstein94finding.html\">TR '94</a>,\n<a href=\"http://citeseer.ist.psu.edu/eppstein98finding.html\">SJC '98</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=299886\">ACM DL</a>)\n<p>\n<li><b>3-Coloring in time O(1.3446<sup><i>n</i></sup>): a no-MIS algorithm</b>.<br>\n<a href=\"http://www.cis.temple.edu/~beigel/\">R. Beigel</a>\nand D. Eppstein.<br>\n<a href=\"ftp://ftp.eccc.uni-trier.de/pub/eccc/reports/1995/TR95-033/index.html\">\nTech. Rep. 95-033</a>, Electronic Coll. Computational Complexity, 1995.<br>\n<i>36th IEEE Symp. Foundations of Comp. Sci.</i>, 1995, pp. 444-453.<br>\n<a href=\"http://www.cis.temple.edu/~beigel/FESNP/\">DIMACS\nWorksh. Faster Exact Solutions for NP-Hard Problems</a>, 2000.\n<p>\nSpeeds up 3-coloring by solving a harder problem:\nconstraint satisfaction in which each variable can take on\none of three values and each constraint forbids a pair of\nvariable assignments.  The detailed solution involves\nseveral long hairy case analyses.\nSimilar methods apply also to 3-list-coloring,\n3-edge-coloring, and 3-SAT.  The 3-SAT algorithm is fixed-parameter tractible in that it is polynomial time when the number of 3-variable clauses is O(log n).\nMerged into\n<a href=\"p-3color2.html\">3-coloring in time O(1.3289^n)</a>\nfor the journal version.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#3-coloring in time $O(1.3446^n)$: a no-MIS algorithm\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/3-coloring-in-time-O(1.3446^n)-a-no-MIS-algorithm.html\">Citations</a> --\n<a href=\"http://1013seopc.eecs.uic.edu/FESNP/abstracts.html#eppstein\">DIMACS\nabstract</a> and <a href=\"BeiEpp-DIMACS-00.pdf\">slides</a> --\n<a href=\"http://citeseer.ist.psu.edu/beigel95coloring.html\">CiteSeer</a>)\n<p>\n<li><b>Parametric and kinetic minimum spanning trees</b>.<br>\n<a href=\"http://www.cs.duke.edu/~pankaj/\">P. K. Agarwal</a>,\nD. Eppstein,\n<a href=\"http://robotics.stanford.edu/users/guibas/bio.html\">L. J. Guibas</a>,\nand\n<a href=\"http://www.henzinger.com/monika/\">M. R. Henzinger</a>.<br>\n<a href=\"AgaEppGui-FOCS-98.pdf\">\n<i>39th IEEE Symp. Foundations of Comp. Sci.</i>, 1998, pp. 596-605.</a>.\n<p>\nWe describe algorithms for maintaining the\n<a href=\"mst.html\">minimum spanning tree</a> in a graph\nin which the edge weights are piecewise linear functions of time that\nmay change unpredictably.  We solve the problem in time\nO(n<sup>2/3</sup> polylog n)\nper combinatorial change to the tree for general graphs, and in time\nO(n<sup>1/4</sup> polylog n) per combinatorial change to the tree for planar graphs.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Parametric and kinetic minimum spanning trees\">BibTeX</a> --\n<a href=\"AgaEppGui-FOCS-98-slides.pdf\">FOCS '98 talk slides</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Parametric-and-kinetic-minimum-spanning-trees.html\">Citations</a> --\n<a href=\"http://citeseer.ist.psu.edu/agarwal98parametric.html\">CiteSeer</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=796402\">ACM DL</a>)\n<p>\n<li><b>Setting parameters by example</b>.<br>\nD. Eppstein.<br>\n<a href=\"http://arXiv.org/abs/cs.DS/9907001\">arXiv:cs.DS/9907001</a>.<br>\n<a href=\"http://www.computer.org/proceedings/focs/0409/04090309abs.htm\"><i>40th\nIEEE Symp. Foundations of Comp. Sci.</i>, 1999, pp. 309-318</a>.<br>\n<a href=\"http://dx.doi.org/10.1137/S0097539700370084\">\n<i>SIAM J. Computing</i> 32(3):643-653, 2003</a>.\n<p>\nWe introduce a class of \"inverse parametric optimization\"\nproblems, in which one is given both a parametric optimization problem\nand a desired optimal solution; the task is to determine parameter\nvalues that lead to the given solution.  We use\n<a href=\"geom-lp.html\">low-dimensional linear programming</a>\nand geometric sampling techniques to solve\nsuch problems for\n<a href=\"mst.html\">minimum spanning trees</a>,\n<a href=\"graph-path.html\">shortest paths</a>, and\nother optimal subgraph problems, and discuss applications in\nmulticast routing, vehicle path planning, resource allocation, and board\ngame programming.\n<p>(<a href=\"/~eppstein/bibs/eppstein.html#Setting parameters by\nexample\">BibTeX</a> --\n<a href=\"http://fano.ics.uci.edu/cites/Document/Setting-parameters-by-example.html\">Citations</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=796502\">ACM DL (FOCS)</a> --\n<a href=\"http://portal.acm.org/citation.cfm?id=639091\">ACM DL (SJC)</a>)\n<p>\n</ul>\n\n<hr><p>\n<a href=\"conf.html\">Conferences</a> --\n<a href=\"/~eppstein/pubs/\">Publications</a> --\n<a href=\"/~eppstein/\">David Eppstein</a> --\n<a href=\"/~theory/\">Theory Group</a> --\n<a href=\"/\">Inf. &amp; Comp. Sci.</a> --\n<a href=\"http://www.uci.edu/\">UC Irvine</a>\n<p>\n<small>Semi-automatically <a href=\"filter.html\">filtered</a>\nfrom a common source file.</small>\n</body></html>\n", "id": 13065.0}