{"text": "View Javadoc 1 package swirl workspace 2 3 import org apache commons logging Log 4 import org apache commons logging LogFactory 5 6 7 DOCUMENT ME 8 9 author bpillet 1 11 public class HostPathCodecImpl implements HostPathCodec 12 13 marker in href to separate the original href from the encoded host 14 static final String SEPARATOR on 15 16 commons logging log that maps to this class 17 private Log log LogFactory getLog this getClass 18 19 the encoded peer s host in the client s href 2 private String host 21 22 the encoded peer s path in the client s href 23 private String path 24 25 the original path sent by the client 26 private String servletPath 27 28 29 Constructs a new codec given the requested path from the client and the 3 path of the swirl servlet 31 32 table 33 tr td 34 POST some path html HTTP 1 1 35 td td 36 some path html 37 td tr 38 tr td 39 GET http foo bar a html HTTP 1 4 td td 41 a html 42 td tr 43 tr td 44 HEAD xyz a b HTTP 1 1 45 td td 46 xyz 47 td tr 48 table 49 5 param servPath the path of the swirl servlet 51 52 public HostPathCodecImpl final String servPath 53 54 this servletPath servPath 55 56 if log isDebugEnabled 57 58 log debug servletPath servletPath 59 6 61 decodeHost 62 decodePath 63 64 65 66 Extract the peer host from a uri that has a peer hostname encoded in it 67 If no host is encoded this method will return 68 69 return the actual host of the peer 7 71 public String decodeHost 72 73 if host null 74 75 int position servletPath lastIndexOf SEPARATOR 76 77 if log isDebugEnabled 78 79 log debug position position 8 81 82 if position 1 83 84 host servletPath substring position SEPARATOR length 85 if log isDebugEnabled 86 87 log debug host1 host 88 89 9 int slash host indexOf 91 92 if slash 1 93 94 host host substring slash 95 96 97 98 if host null 99 1 host 1 1 1 2 1 3 if log isDebugEnabled 1 4 1 5 log debug decodeHost servletPath nreturning host 1 6 1 7 1 8 1 9 return host 11 111 112 113 Extract the path from a uri that has a peer hostname encoded in it The 114 path will be to an underlying slide server on the peer 115 116 return the actual path on the peer 117 118 public String decodePath 119 12 if path null 121 122 path SwirlCommand SLIDE servletPath 123 124 if log isDebugEnabled 125 126 log debug host host pathBeforeReplaceAll path 127 128 129 path path replaceAll SEPARATOR host 13 131 if log isDebugEnabled 132 133 log debug host host pathAfterReplaceAll path 134 log debug decodePath servletPath nreturning path 135 136 137 138 return path 139 14 141 142 Utility method that encodes a host URL in an href The format is 143 the href some file on host 144 145 param href the href to hide the host in 146 param encodeHost the peer to get the host from 147 148 return the encoded href 149 15 public String encodeHostInPath final String href final String encodeHost 151 152 if log isDebugEnabled 153 154 log debug modifyHref href encodeHost encodeHost 155 156 157 String ret href substring SwirlCommand SLIDE length 158 159 if log isDebugEnabled 16 161 log debug href without slide path ret 162 163 164 if ret length 1 165 166 if ret endsWith 167 168 ret ret substring ret length 1 169 ret SEPARATOR encodeHost 17 171 else 172 173 ret SEPARATOR encodeHost 174 175 176 177 ret SwirlCommand SWIRL ret 178 179 if log isDebugEnabled 18 181 log debug ret ret 182 183 184 return ret 185 186 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/HostPathCodecImpl.html", "title": "hostpathcodecimpl xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>HostPathCodecImpl xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/HostPathCodecImpl.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"5\" href=\"#5\">5</a>   \n<a name=\"6\" href=\"#6\">6</a>   <em>/**<em>*</em></em>\n<a name=\"7\" href=\"#7\">7</a>   <em> * DOCUMENT ME!</em>\n<a name=\"8\" href=\"#8\">8</a>   <em> *</em>\n<a name=\"9\" href=\"#9\">9</a>   <em> * @author bpillet</em>\n<a name=\"10\" href=\"#10\">10</a>  <em> */</em>\n<a name=\"11\" href=\"#11\">11</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../swirl/workspace/HostPathCodecImpl.html\">HostPathCodecImpl</a> implements <a href=\"../../swirl/workspace/HostPathCodec.html\">HostPathCodec</a>\n<a name=\"12\" href=\"#12\">12</a>  {\n<a name=\"13\" href=\"#13\">13</a>      <em>/**<em>* marker in href to separate the original href from the encoded host */</em></em>\n<a name=\"14\" href=\"#14\">14</a>      <strong>static</strong> <strong>final</strong> String SEPARATOR = <span class=\"string\">\"_on_\"</span>;\n<a name=\"15\" href=\"#15\">15</a>  \n<a name=\"16\" href=\"#16\">16</a>      <em>/**<em>* commons-logging log that maps to this class */</em></em>\n<a name=\"17\" href=\"#17\">17</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"18\" href=\"#18\">18</a>  \n<a name=\"19\" href=\"#19\">19</a>      <em>/**<em>* the encoded peer's host in the client's href */</em></em>\n<a name=\"20\" href=\"#20\">20</a>      <strong>private</strong> String host;\n<a name=\"21\" href=\"#21\">21</a>  \n<a name=\"22\" href=\"#22\">22</a>      <em>/**<em>* the encoded peer's path in the client's href */</em></em>\n<a name=\"23\" href=\"#23\">23</a>      <strong>private</strong> String path;\n<a name=\"24\" href=\"#24\">24</a>  \n<a name=\"25\" href=\"#25\">25</a>      <em>/**<em>* the original path sent by the client */</em></em>\n<a name=\"26\" href=\"#26\">26</a>      <strong>private</strong> String servletPath;\n<a name=\"27\" href=\"#27\">27</a>  \n<a name=\"28\" href=\"#28\">28</a>      <em>/**<em>*</em></em>\n<a name=\"29\" href=\"#29\">29</a>  <em>     * Constructs a new codec given the requested path from the client and the</em>\n<a name=\"30\" href=\"#30\">30</a>  <em>     * path of the swirl servlet</em>\n<a name=\"31\" href=\"#31\">31</a>  <em>     *</em>\n<a name=\"32\" href=\"#32\">32</a>  <em>     * &lt;table></em>\n<a name=\"33\" href=\"#33\">33</a>  <em>     * &lt;tr>&lt;td></em>\n<a name=\"34\" href=\"#34\">34</a>  <em>     * POST /some/path.html HTTP/1.1</em>\n<a name=\"35\" href=\"#35\">35</a>  <em>     * &lt;/td>&lt;td></em>\n<a name=\"36\" href=\"#36\">36</a>  <em>     * /some/path.html</em>\n<a name=\"37\" href=\"#37\">37</a>  <em>     * &lt;/td>&lt;/tr></em>\n<a name=\"38\" href=\"#38\">38</a>  <em>     * &lt;tr>&lt;td></em>\n<a name=\"39\" href=\"#39\">39</a>  <em>     * GET <a href=\"http://foo.bar/a.html\" target=\"alexandria_uri\">http://foo.bar/a.html</a> HTTP/1.0</em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     * &lt;/td>&lt;td></em>\n<a name=\"41\" href=\"#41\">41</a>  <em>     * /a.html</em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     * &lt;/td>&lt;/tr></em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * &lt;tr>&lt;td></em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     * HEAD /xyz?a=b HTTP/1.1</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     * &lt;/td>&lt;td></em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     * /xyz</em>\n<a name=\"47\" href=\"#47\">47</a>  <em>     * &lt;/td>&lt;/tr></em>\n<a name=\"48\" href=\"#48\">48</a>  <em>     * &lt;/table></em>\n<a name=\"49\" href=\"#49\">49</a>  <em>     *</em>\n<a name=\"50\" href=\"#50\">50</a>  <em>     * @param servPath the path of the swirl servlet</em>\n<a name=\"51\" href=\"#51\">51</a>  <em>     */</em>\n<a name=\"52\" href=\"#52\">52</a>      <strong>public</strong> <a href=\"../../swirl/workspace/HostPathCodecImpl.html\">HostPathCodecImpl</a>(<strong>final</strong> String servPath)\n<a name=\"53\" href=\"#53\">53</a>      {\n<a name=\"54\" href=\"#54\">54</a>          <strong>this</strong>.servletPath = servPath;\n<a name=\"55\" href=\"#55\">55</a>  \n<a name=\"56\" href=\"#56\">56</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"57\" href=\"#57\">57</a>          {\n<a name=\"58\" href=\"#58\">58</a>              log.debug(<span class=\"string\">\"servletPath: \"</span> + servletPath);\n<a name=\"59\" href=\"#59\">59</a>          }\n<a name=\"60\" href=\"#60\">60</a>  \n<a name=\"61\" href=\"#61\">61</a>          decodeHost();\n<a name=\"62\" href=\"#62\">62</a>          decodePath();\n<a name=\"63\" href=\"#63\">63</a>      }\n<a name=\"64\" href=\"#64\">64</a>  \n<a name=\"65\" href=\"#65\">65</a>      <em>/**<em>*</em></em>\n<a name=\"66\" href=\"#66\">66</a>  <em>     * Extract the peer host from a uri that has a peer hostname encoded in it.</em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     * If no host is encoded, this method will return \"\"</em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     *</em>\n<a name=\"69\" href=\"#69\">69</a>  <em>     * @return the actual host of the peer</em>\n<a name=\"70\" href=\"#70\">70</a>  <em>     */</em>\n<a name=\"71\" href=\"#71\">71</a>      <strong>public</strong> String decodeHost()\n<a name=\"72\" href=\"#72\">72</a>      {\n<a name=\"73\" href=\"#73\">73</a>          <strong>if</strong>(host == <strong>null</strong>)\n<a name=\"74\" href=\"#74\">74</a>          {\n<a name=\"75\" href=\"#75\">75</a>              <strong>int</strong> position = servletPath.lastIndexOf(SEPARATOR);\n<a name=\"76\" href=\"#76\">76</a>  \n<a name=\"77\" href=\"#77\">77</a>              <strong>if</strong>(log.isDebugEnabled())\n<a name=\"78\" href=\"#78\">78</a>  \t        {\n<a name=\"79\" href=\"#79\">79</a>              \tlog.debug(<span class=\"string\">\"position: \"</span> + position);\n<a name=\"80\" href=\"#80\">80</a>  \t        }\n<a name=\"81\" href=\"#81\">81</a>  \n<a name=\"82\" href=\"#82\">82</a>              <strong>if</strong>(position != -1)\n<a name=\"83\" href=\"#83\">83</a>              {\n<a name=\"84\" href=\"#84\">84</a>                  host = servletPath.substring(position + SEPARATOR.length());\n<a name=\"85\" href=\"#85\">85</a>                  <strong>if</strong>(log.isDebugEnabled())\n<a name=\"86\" href=\"#86\">86</a>      \t        {\n<a name=\"87\" href=\"#87\">87</a>                  \tlog.debug(<span class=\"string\">\"host1: \"</span> + host);\n<a name=\"88\" href=\"#88\">88</a>      \t        }\n<a name=\"89\" href=\"#89\">89</a>  \n<a name=\"90\" href=\"#90\">90</a>                  <strong>int</strong> slash = host.indexOf('/');\n<a name=\"91\" href=\"#91\">91</a>  \n<a name=\"92\" href=\"#92\">92</a>                  <strong>if</strong>(slash != -1)\n<a name=\"93\" href=\"#93\">93</a>                  {\n<a name=\"94\" href=\"#94\">94</a>                      host = host.substring(0, slash);\n<a name=\"95\" href=\"#95\">95</a>                  }\n<a name=\"96\" href=\"#96\">96</a>              }\n<a name=\"97\" href=\"#97\">97</a>  \n<a name=\"98\" href=\"#98\">98</a>              <strong>if</strong>(host == <strong>null</strong>)\n<a name=\"99\" href=\"#99\">99</a>              {\n<a name=\"100\" href=\"#100\">100</a>                 host = <span class=\"string\">\"\"</span>;\n<a name=\"101\" href=\"#101\">101</a>             }\n<a name=\"102\" href=\"#102\">102</a> \n<a name=\"103\" href=\"#103\">103</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"104\" href=\"#104\">104</a> \t        {\n<a name=\"105\" href=\"#105\">105</a>             \tlog.debug(<span class=\"string\">\"decodeHost: \"</span> + servletPath + <span class=\"string\">\"\\nreturning \"</span> + host);\n<a name=\"106\" href=\"#106\">106</a> \t        }\n<a name=\"107\" href=\"#107\">107</a>         }\n<a name=\"108\" href=\"#108\">108</a> \n<a name=\"109\" href=\"#109\">109</a>         <strong>return</strong> host;\n<a name=\"110\" href=\"#110\">110</a>     }\n<a name=\"111\" href=\"#111\">111</a> \n<a name=\"112\" href=\"#112\">112</a>     <em>/**<em>*</em></em>\n<a name=\"113\" href=\"#113\">113</a> <em>     * Extract the path from a uri that has a peer hostname encoded in it. The</em>\n<a name=\"114\" href=\"#114\">114</a> <em>     * path will be to an underlying slide server on the peer</em>\n<a name=\"115\" href=\"#115\">115</a> <em>     *</em>\n<a name=\"116\" href=\"#116\">116</a> <em>     * @return the actual path on the peer</em>\n<a name=\"117\" href=\"#117\">117</a> <em>     */</em>\n<a name=\"118\" href=\"#118\">118</a>     <strong>public</strong> String decodePath()\n<a name=\"119\" href=\"#119\">119</a>     {\n<a name=\"120\" href=\"#120\">120</a>         <strong>if</strong>(path == <strong>null</strong>)\n<a name=\"121\" href=\"#121\">121</a>         {\n<a name=\"122\" href=\"#122\">122</a>             path = SwirlCommand.SLIDE + servletPath;\n<a name=\"123\" href=\"#123\">123</a> \n<a name=\"124\" href=\"#124\">124</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"125\" href=\"#125\">125</a> \t        {\n<a name=\"126\" href=\"#126\">126</a>             \tlog.debug(<span class=\"string\">\"host: \"</span> + host + <span class=\"string\">\"  pathBeforeReplaceAll: \"</span> + path);\n<a name=\"127\" href=\"#127\">127</a> \t        }\n<a name=\"128\" href=\"#128\">128</a> \n<a name=\"129\" href=\"#129\">129</a>             path = path.replaceAll(SEPARATOR + host, <span class=\"string\">\"\"</span>);\n<a name=\"130\" href=\"#130\">130</a> \n<a name=\"131\" href=\"#131\">131</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"132\" href=\"#132\">132</a> \t        {\n<a name=\"133\" href=\"#133\">133</a>             \tlog.debug(<span class=\"string\">\"host: \"</span> + host + <span class=\"string\">\"  pathAfterReplaceAll: \"</span> + path);\n<a name=\"134\" href=\"#134\">134</a>             \tlog.debug(<span class=\"string\">\"decodePath: \"</span> + servletPath + <span class=\"string\">\"\\nreturning: \"</span> + path);\n<a name=\"135\" href=\"#135\">135</a> \t        }\n<a name=\"136\" href=\"#136\">136</a>         }\n<a name=\"137\" href=\"#137\">137</a> \n<a name=\"138\" href=\"#138\">138</a>         <strong>return</strong> path;\n<a name=\"139\" href=\"#139\">139</a>     }\n<a name=\"140\" href=\"#140\">140</a> \n<a name=\"141\" href=\"#141\">141</a>     <em>/**<em>*</em></em>\n<a name=\"142\" href=\"#142\">142</a> <em>     * Utility method that encodes a host URL in an href. The format is</em>\n<a name=\"143\" href=\"#143\">143</a> <em>     * /the_href/some.file_on_host</em>\n<a name=\"144\" href=\"#144\">144</a> <em>     *</em>\n<a name=\"145\" href=\"#145\">145</a> <em>     * @param href the href to hide the host in</em>\n<a name=\"146\" href=\"#146\">146</a> <em>     * @param encodeHost the peer to get the host from</em>\n<a name=\"147\" href=\"#147\">147</a> <em>     *</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     * @return the encoded href</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     */</em>\n<a name=\"150\" href=\"#150\">150</a>     <strong>public</strong> String encodeHostInPath(<strong>final</strong> String href, <strong>final</strong> String encodeHost)\n<a name=\"151\" href=\"#151\">151</a>     {\n<a name=\"152\" href=\"#152\">152</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"153\" href=\"#153\">153</a>         {\n<a name=\"154\" href=\"#154\">154</a>             log.debug(<span class=\"string\">\"modifyHref: \"</span> + href + <span class=\"string\">\"  encodeHost: \"</span> + encodeHost);\n<a name=\"155\" href=\"#155\">155</a>         }\n<a name=\"156\" href=\"#156\">156</a> \n<a name=\"157\" href=\"#157\">157</a>         String ret = href.substring(SwirlCommand.SLIDE.length());\n<a name=\"158\" href=\"#158\">158</a> \n<a name=\"159\" href=\"#159\">159</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"160\" href=\"#160\">160</a>         {\n<a name=\"161\" href=\"#161\">161</a>             log.debug(<span class=\"string\">\"href without slide path: *\"</span> + ret + <span class=\"string\">\"*\"</span>);\n<a name=\"162\" href=\"#162\">162</a>         }\n<a name=\"163\" href=\"#163\">163</a> \n<a name=\"164\" href=\"#164\">164</a>         <strong>if</strong>(ret.length() > 1)\n<a name=\"165\" href=\"#165\">165</a>         {\n<a name=\"166\" href=\"#166\">166</a>             <strong>if</strong>(ret.endsWith(<span class=\"string\">\"/\"</span>))\n<a name=\"167\" href=\"#167\">167</a>             {\n<a name=\"168\" href=\"#168\">168</a>                 ret = ret.substring(0, ret.length() - 1);\n<a name=\"169\" href=\"#169\">169</a>                 ret += (SEPARATOR + encodeHost + '/');\n<a name=\"170\" href=\"#170\">170</a>             }\n<a name=\"171\" href=\"#171\">171</a>             <strong>else</strong>\n<a name=\"172\" href=\"#172\">172</a>             {\n<a name=\"173\" href=\"#173\">173</a>                 ret += (SEPARATOR + encodeHost);\n<a name=\"174\" href=\"#174\">174</a>             }\n<a name=\"175\" href=\"#175\">175</a>         }\n<a name=\"176\" href=\"#176\">176</a> \n<a name=\"177\" href=\"#177\">177</a>         ret = SwirlCommand.SWIRL + ret;\n<a name=\"178\" href=\"#178\">178</a> \n<a name=\"179\" href=\"#179\">179</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"180\" href=\"#180\">180</a>         {\n<a name=\"181\" href=\"#181\">181</a>             log.debug(<span class=\"string\">\"ret: \"</span> + ret);\n<a name=\"182\" href=\"#182\">182</a>         }\n<a name=\"183\" href=\"#183\">183</a> \n<a name=\"184\" href=\"#184\">184</a>         <strong>return</strong> ret;\n<a name=\"185\" href=\"#185\">185</a>     }\n<a name=\"186\" href=\"#186\">186</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32843.0}