{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 6 3 Looping over the Up 6 Traversing the Atoms Next 6 5 Using OEChem C 6 4 Looping over subsets of Atoms or Bonds It can sometimes be useful to loop over a subset of the atoms or bonds of a molecule Traditionally this can be done with if statements inside a loop but it can sometimes be cleaner and more convenient to subset the members being looped over inside the iterator To do this many of OEChem s iterator generation functions such as OEMolBase GetAtoms can take an argument which determines which subset of the object to loop over these functions are called predicates as detailed in the chapter Predicate Functions below The details of these functions are not important here Instead a programmer can simply use the predefined functors to control their loops The following example shows the use of the predicate HasAtomicNum to loop over only carbon atoms in a molecule usr bin env python ch6 5 py from openeye oechem import mol OEGraphMol OEParseSmiles mol c1ccccc1CCCBr print Carbon atoms for atom in mol GetAtoms IsCarbon print atom GetIdx print Download as text Some of the common predefined functors in OEChem are listed below Predicate functions can be trivial such as IsHydrogen or quite complex such as Match string which returns atoms which match the SMARTS string passed to the constructor For a complete listing please see the chapter on predicate functions or the API manual Many predicates take intuitive construction arguments For instance HasAtomName has a string argument which is the atom s name e g mol GetAtoms HasAtomName CA Atoms HasAtomName string HasAtomicNum int IsHalogen IsAromaticAtom AtomIsInRing IsChiralAtom HasResidueNumber int Match string Bonds HasBondIdx int HasOrder int BondIsInRing IsRotor Conformers HasConfIdx unsigned int These predicates can be particularly helpful when used in conjunction with functions which take OEIters as arguments as seen in the example below This use of predicates allows factorization of the loop in a way not easily possible with if statements OEChem Python Theory Manual Version 1 3 1 Previous 6 3 Looping over the Up 6 Traversing the Atoms Next 6 5 Using OEChem C Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node49.html", "title": "6.4 looping over subsets of atoms or bonds", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>6.4 Looping over subsets of Atoms or Bonds</title>\n<META NAME=\"description\" CONTENT=\"6.4 Looping over subsets of Atoms or Bonds\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node50.html\">\n<LINK REL=\"previous\" HREF=\"node48.html\">\n<LINK REL=\"up\" HREF=\"node45.html\">\n<LINK REL=\"next\" HREF=\"node50.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node48.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node45.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node50.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node48.html\">6.3 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node45.html\">6. Traversing the Atoms</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node50.html\">6.5 Using OEChem C++</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION008400000000000000000\">\n6.4 Looping over subsets of Atoms or Bonds</A>\n</H1>\n\n<P>\nIt can sometimes be useful to loop over a subset of the atoms or bonds of a\nmolecule.  Traditionally this can be done with \"if\" statements inside a\nloop, but it can sometimes be cleaner and more convenient to subset the\nmembers being looped over inside the iterator.  To do this, many of\nOEChem's iterator generation functions (such as OEMolBase::GetAtoms) can\ntake an argument which determines which subset of the object to loop over\n(these functions are called predicates as detailed in the chapter\n\"Predicate Functions\" below).  The details of these functions are not\nimportant here.  Instead, a programmer can simply use the predefined\nfunctors to control their loops.\n\n<P>\nThe following example shows the use of the predicate HasAtomicNum() to loop\nover only carbon atoms in a molecule.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch6-5.py\nfrom openeye.oechem import *\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"c1ccccc1CCCBr\")\n\nprint \"Carbon atoms:\",\nfor atom in mol.GetAtoms(IsCarbon()):\n    print atom.GetIdx(),\nprint\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-5.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nSome of the common predefined functors in OEChem are listed below.\nPredicate functions can be trivial, such as <code>IsHydrogen()</code>, or quite\ncomplex, such as <code>Match(string)</code>, which returns atoms which match\nthe SMARTS string passed to the constructor.  For a complete listing,\nplease see the chapter on predicate functions or the API manual.  Many\npredicates take intuitive construction arguments.  For instance,\n<code>HasAtomName</code> has a <code>string</code> argument which is the atom's\nname (e.g.  <code>mol.GetAtoms(HasAtomName(\"CA\"))</code>).\n\n<P>\n<i>Atoms</i>\n<dl><dd><pre class=\"verbatim\">HasAtomName(string)\nHasAtomicNum(int)\nIsHalogen\nIsAromaticAtom\nAtomIsInRing\nIsChiralAtom\nHasResidueNumber(int)\nMatch(string)\n</pre></dl>\n<i>Bonds</i>\n<dl><dd><pre class=\"verbatim\">HasBondIdx(int)\nHasOrder(int)\nBondIsInRing\nIsRotor\n</pre></dl>\n<i>Conformers</i>\n<dl><dd><pre class=\"verbatim\">HasConfIdx(unsigned int)\n</pre></dl>\n\n<P>\nThese predicates can be particularly helpful when used in conjunction with\nfunctions which take OEIters as arguments as seen in the example below.\nThis use of predicates allows factorization of the loop in a way not easily\npossible with <code>if</code> statements.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node48.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node45.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node50.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node48.html\">6.3 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node45.html\">6. Traversing the Atoms</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node50.html\">6.5 Using OEChem C++</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37658.0}