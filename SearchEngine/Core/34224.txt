{"text": "View Javadoc 1 2 Copyright c 2 3 Regents of the University of California 3 All rights reserved 4 5 6 The Apache Software License Version 1 1 7 8 Redistribution and use in source and binary forms with or without 9 modification are permitted provided that the following conditions 1 are met 11 12 1 Redistributions of source code must retain the above copyright 13 notice this list of conditions and the following disclaimer 14 15 2 Redistributions in binary form must reproduce the above copyright 16 notice this list of conditions and the following disclaimer in 17 the documentation and or other materials provided with the 18 distribution 19 2 3 The end user documentation included with the redistribution if 21 any must include the following acknowledgment 22 This product includes software developed by 23 the Institute for Software Research at 24 University of California Irvine 25 Alternately this acknowledgment may appear in the software 26 itself if and wherever such third party acknowledgments normally 27 appear 28 29 4 The names YANCEES Institute for Software Research and 3 University of California must not be used to 31 endorse or promote products derived from this software without 32 prior written permission For written permission please contact 33 rsilvafi ics uci edu or redmiles ics uci edu 34 35 5 Products derived from this software may not be called 36 YANCEES nor may YANCEES appear in their name without 37 prior written permission of the University of California Regents 38 39 THIS SOFTWARE IS PROVIDED AS IS AND ANY EXPRESSED OR IMPLIED 4 WARRANTIES INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF 41 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED 42 IN NO EVENT SHALL THE INSTITUTE FOR SOFTWARE RESEARCH AT THE UNIVERSITY 43 OF CALIFORNIA IRVINE OR ITS CONTRIBUTORS BE LIABLE FOR 44 ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR 45 CONSEQUENTIAL DAMAGES INCLUDING BUT NOT LIMITED TO PROCUREMENT OF 46 SUBSTITUTE GOODS OR SERVICES LOSS OF USE DATA OR PROFITS OR 47 BUSINESS INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF 48 LIABILITY WHETHER IN CONTRACT STRICT LIABILITY OR TORT INCLUDING 49 NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS 5 SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE 51 52 53 54 package edu uci isr impromptu pocketpc 55 56 import java awt Color 57 import java util HashMap 58 import java util Iterator 59 import java util Map 6 61 import edu uci isr impromptu common MessageProcessor 62 import edu uci isr impromptu common PeerManager 63 import edu uci isr impromptu pie PieUtils 64 import edu uci isr impromptu repository RepositoryPeer 65 import edu uci isr yancees server filter peerpublisher PeerPublisherInputFilter 66 67 68 Responds to events requesting a current snapshot of all the peers and their 69 files This is used by the pocket PC to inquire about the existing peers and 7 their files at bootstrap 71 72 This class is currently instantiated inside the ProxyFilter the PeerManager 73 passed in the constructor 74 75 author rsilvafi class created at Jul 27 2 5 76 77 78 public class PeerQueryServer implements MessageProcessor 79 8 public static boolean print true 81 82 PeerManager pm null keeps information about this peer 83 84 public PeerQueryServer PeerManager peerMan 85 pm peerMan 86 pm getConnectorReference addMessageProcessor this 87 88 89 9 Receives messages from YANCEES connector and check for peer query requests 91 In case of a request generates a response and publishes it back to YANCEES 92 93 public void processMessage Map message 94 95 if print 96 System out print n PeerQueryServer Message 97 for Iterator iter message keySet iterator iter hasNext 98 String key String iter next 99 Object element message get key 1 System out print key element toString 1 1 1 2 1 3 System out println n 1 4 1 5 1 6 If the message received is a request 1 7 if message containsKey PeerQueryProtocol MESSAGE TYPE 1 8 String message get PeerQueryProtocol MESSAGE TYPE 1 9 equals PeerQueryProtocol REQ MESSAGE TYPE 11 111 if message containsKey PeerQueryProtocol QUERY COMMAND 112 String message get PeerQueryProtocol QUERY COMMAND 113 equals PeerQueryProtocol CMD LIST GLOBAL FILES 114 115 String sessionId String message get PeerQueryProtocol SESSION ID 116 117 Map event generateListGlobalFilesRESPONSE sessionId 118 pm getConnectorReference send event 119 12 121 122 123 124 125 126 127 We pack a list of files with their owners name and their sharing level 128 in order to send the results back to the requestor 129 13 param sessionId 131 is the identifier of the request that will issue in this 132 response 133 return a list of existing peers and their files in the format of a hashMap 134 the peer name comes cateated with each attribute name i e file name together with the 135 current sharing level as the attribute value 136 137 protected Map generateListGlobalFilesRESPONSE String sessionId 138 Map response new HashMap 139 14 generates a response to certain session id 141 response put PeerQueryProtocol MESSAGE TYPE PeerQueryProtocol RESP MESSAGE TYPE 142 response put PeerQueryProtocol SESSION ID sessionId 143 144 145 If we are using a simple client only this prevents the response to be 146 propagated to the other peers in the network 147 148 response put PeerPublisherInputFilter PUBLISH TO PEERS PeerPublisherInputFilter FALSE 149 15 String currentPeerName 151 RepositoryPeer repPeer 152 Map peerMap pm getPeers 153 154 155 if print 156 System out println PeerQueryServer generating response 157 for Iterator iter peerMap keySet iterator iter hasNext 158 currentPeerName String iter next 159 repPeer RepositoryPeer peerMap get currentPeerName 16 161 Adds the peer color as the attribute of the peerName 162 Color color PieUtils getColorFromServiceInfo repPeer getServiceInfo 163 if color null 164 color PieUtils getColorForName currentPeerName 165 166 167 response put PeerQueryProtocol PEER currentPeerName PieUtils getRGBString color 168 Map filesMap repPeer getOwnedFiles 169 17 for Iterator iterator filesMap keySet iterator iterator 171 hasNext 172 String fileName String iterator next 173 Integer sharingLevel Integer filesMap get fileName 174 175 response put PeerQueryProtocol FILE currentPeerName fileName sharingLevel 176 toString 177 178 if print 179 System out println currentPeerName fileName 18 sharing level is sharingLevel 181 182 183 184 185 return response 186 187 188 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pocketpc/PeerQueryServer.html", "title": "peerqueryserver xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>PeerQueryServer xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../../apidocs/edu/uci/isr/impromptu/pocketpc/PeerQueryServer.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Copyright (c) 2003, Regents of the University of California.</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> * All rights reserved.</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> * </em>\n<a name=\"5\" href=\"#5\">5</a>   <em class=\"comment\"> * ===================================================================</em>\n<a name=\"6\" href=\"#6\">6</a>   <em class=\"comment\"> * The Apache Software License, Version 1.1</em>\n<a name=\"7\" href=\"#7\">7</a>   <em class=\"comment\"> * </em>\n<a name=\"8\" href=\"#8\">8</a>   <em class=\"comment\"> * Redistribution and use in source and binary forms, with or without</em>\n<a name=\"9\" href=\"#9\">9</a>   <em class=\"comment\"> * modification, are permitted provided that the following conditions</em>\n<a name=\"10\" href=\"#10\">10</a>  <em class=\"comment\"> * are met:</em>\n<a name=\"11\" href=\"#11\">11</a>  <em class=\"comment\"> * </em>\n<a name=\"12\" href=\"#12\">12</a>  <em class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</em>\n<a name=\"13\" href=\"#13\">13</a>  <em class=\"comment\"> *    notice, this list of conditions and the following disclaimer.</em>\n<a name=\"14\" href=\"#14\">14</a>  <em class=\"comment\"> * </em>\n<a name=\"15\" href=\"#15\">15</a>  <em class=\"comment\"> * 2. Redistributions in binary form must reproduce the above copyright</em>\n<a name=\"16\" href=\"#16\">16</a>  <em class=\"comment\"> *    notice, this list of conditions and the following disclaimer in</em>\n<a name=\"17\" href=\"#17\">17</a>  <em class=\"comment\"> *    the documentation and/or other materials provided with the</em>\n<a name=\"18\" href=\"#18\">18</a>  <em class=\"comment\"> *    distribution.</em>\n<a name=\"19\" href=\"#19\">19</a>  <em class=\"comment\"> * </em>\n<a name=\"20\" href=\"#20\">20</a>  <em class=\"comment\"> * 3. The end-user documentation included with the redistribution, if</em>\n<a name=\"21\" href=\"#21\">21</a>  <em class=\"comment\"> *    any, must include the following acknowledgment:</em>\n<a name=\"22\" href=\"#22\">22</a>  <em class=\"comment\"> *       \"This product includes software developed by</em>\n<a name=\"23\" href=\"#23\">23</a>  <em class=\"comment\"> *        the Institute for Software Research at  </em>\n<a name=\"24\" href=\"#24\">24</a>  <em class=\"comment\"> *        University of California, Irvine\"</em>\n<a name=\"25\" href=\"#25\">25</a>  <em class=\"comment\"> *    Alternately, this acknowledgment may appear in the software</em>\n<a name=\"26\" href=\"#26\">26</a>  <em class=\"comment\"> *    itself, if and wherever such third-party acknowledgments normally</em>\n<a name=\"27\" href=\"#27\">27</a>  <em class=\"comment\"> *    appear.</em>\n<a name=\"28\" href=\"#28\">28</a>  <em class=\"comment\"> * </em>\n<a name=\"29\" href=\"#29\">29</a>  <em class=\"comment\"> * 4. The names \"YANCEES\", \"Institute for Software Research\" and</em>\n<a name=\"30\" href=\"#30\">30</a>  <em class=\"comment\"> *    \"University of California\" must not be used to</em>\n<a name=\"31\" href=\"#31\">31</a>  <em class=\"comment\"> *    endorse or promote products derived from this software without</em>\n<a name=\"32\" href=\"#32\">32</a>  <em class=\"comment\"> *    prior written permission. For written permission, please contact</em>\n<a name=\"33\" href=\"#33\">33</a>  <em class=\"comment\"> *    rsilvafi@ics.uci.edu or redmiles@ics.uci.edu.</em>\n<a name=\"34\" href=\"#34\">34</a>  <em class=\"comment\"> * </em>\n<a name=\"35\" href=\"#35\">35</a>  <em class=\"comment\"> * 5. Products derived from this software may not be called</em>\n<a name=\"36\" href=\"#36\">36</a>  <em class=\"comment\"> *    \"YANCEES\", nor may \"YANCEES\" appear in their name, without</em>\n<a name=\"37\" href=\"#37\">37</a>  <em class=\"comment\"> *    prior written permission of the University of California Regents.</em>\n<a name=\"38\" href=\"#38\">38</a>  <em class=\"comment\"> * </em>\n<a name=\"39\" href=\"#39\">39</a>  <em class=\"comment\"> * THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY EXPRESSED OR IMPLIED</em>\n<a name=\"40\" href=\"#40\">40</a>  <em class=\"comment\"> * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF</em>\n<a name=\"41\" href=\"#41\">41</a>  <em class=\"comment\"> * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.</em>\n<a name=\"42\" href=\"#42\">42</a>  <em class=\"comment\"> * IN NO EVENT SHALL THE INSTITUTE FOR SOFTWARE RESEARCH AT THE UNIVERSITY</em>\n<a name=\"43\" href=\"#43\">43</a>  <em class=\"comment\"> * OF CALIFORNIA, IRVINE, OR ITS CONTRIBUTORS BE LIABLE FOR</em>\n<a name=\"44\" href=\"#44\">44</a>  <em class=\"comment\"> * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</em>\n<a name=\"45\" href=\"#45\">45</a>  <em class=\"comment\"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</em>\n<a name=\"46\" href=\"#46\">46</a>  <em class=\"comment\"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR</em>\n<a name=\"47\" href=\"#47\">47</a>  <em class=\"comment\"> * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</em>\n<a name=\"48\" href=\"#48\">48</a>  <em class=\"comment\"> * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</em>\n<a name=\"49\" href=\"#49\">49</a>  <em class=\"comment\"> * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</em>\n<a name=\"50\" href=\"#50\">50</a>  <em class=\"comment\"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</em>\n<a name=\"51\" href=\"#51\">51</a>  <em class=\"comment\"> * ====================================================================</em>\n<a name=\"52\" href=\"#52\">52</a>  <em class=\"comment\"> */</em>\n<a name=\"53\" href=\"#53\">53</a>  \n<a name=\"54\" href=\"#54\">54</a>  <strong>package</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pocketpc/package-summary.html\">edu.uci.isr.impromptu.pocketpc</a>;\n<a name=\"55\" href=\"#55\">55</a>  \n<a name=\"56\" href=\"#56\">56</a>  <strong>import</strong> java.awt.Color;\n<a name=\"57\" href=\"#57\">57</a>  <strong>import</strong> java.util.HashMap;\n<a name=\"58\" href=\"#58\">58</a>  <strong>import</strong> java.util.Iterator;\n<a name=\"59\" href=\"#59\">59</a>  <strong>import</strong> java.util.Map;\n<a name=\"60\" href=\"#60\">60</a>  \n<a name=\"61\" href=\"#61\">61</a>  <strong>import</strong> edu.uci.isr.impromptu.common.MessageProcessor;\n<a name=\"62\" href=\"#62\">62</a>  <strong>import</strong> edu.uci.isr.impromptu.common.PeerManager;\n<a name=\"63\" href=\"#63\">63</a>  <strong>import</strong> edu.uci.isr.impromptu.pie.PieUtils;\n<a name=\"64\" href=\"#64\">64</a>  <strong>import</strong> edu.uci.isr.impromptu.repository.RepositoryPeer;\n<a name=\"65\" href=\"#65\">65</a>  <strong>import</strong> edu.uci.isr.yancees.server.filter.peerpublisher.PeerPublisherInputFilter;\n<a name=\"66\" href=\"#66\">66</a>  \n<a name=\"67\" href=\"#67\">67</a>  <em>/**<em>*</em></em>\n<a name=\"68\" href=\"#68\">68</a>  <em> * Responds to events requesting a current snapshot of all the peers and their</em>\n<a name=\"69\" href=\"#69\">69</a>  <em> * files. This is used by the pocket PC to inquire about the existing peers and</em>\n<a name=\"70\" href=\"#70\">70</a>  <em> * their files, at bootstrap.</em>\n<a name=\"71\" href=\"#71\">71</a>  <em> * </em>\n<a name=\"72\" href=\"#72\">72</a>  <em> * This class is currently instantiated inside the ProxyFilter, the PeerManager</em>\n<a name=\"73\" href=\"#73\">73</a>  <em> * passed in the constructor. </em>\n<a name=\"74\" href=\"#74\">74</a>  <em> * </em>\n<a name=\"75\" href=\"#75\">75</a>  <em> * @author rsilvafi class created at Jul 27, 2005</em>\n<a name=\"76\" href=\"#76\">76</a>  <em> * </em>\n<a name=\"77\" href=\"#77\">77</a>  <em> */</em>\n<a name=\"78\" href=\"#78\">78</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pocketpc/PeerQueryServer.html\">PeerQueryServer</a> implements <a href=\"../../../../../edu/uci/isr/impromptu/common/MessageProcessor.html\">MessageProcessor</a> {\n<a name=\"79\" href=\"#79\">79</a>  \n<a name=\"80\" href=\"#80\">80</a>  \t<strong>public</strong> <strong>static</strong> <strong>boolean</strong> print = <strong>true</strong>;\n<a name=\"81\" href=\"#81\">81</a>  \t\n<a name=\"82\" href=\"#82\">82</a>  \tPeerManager pm = <strong>null</strong>; <em class=\"comment\">// keeps information about this peer</em>\n<a name=\"83\" href=\"#83\">83</a>  \n<a name=\"84\" href=\"#84\">84</a>  \t<strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pocketpc/PeerQueryServer.html\">PeerQueryServer</a>(<a href=\"../../../../../edu/uci/isr/impromptu/common/PeerManager.html\">PeerManager</a> peerMan) {\n<a name=\"85\" href=\"#85\">85</a>  \t\tpm = peerMan;\n<a name=\"86\" href=\"#86\">86</a>  \t\tpm.getConnectorReference().addMessageProcessor(<strong>this</strong>);\n<a name=\"87\" href=\"#87\">87</a>  \t}\n<a name=\"88\" href=\"#88\">88</a>  \n<a name=\"89\" href=\"#89\">89</a>  \t<em>/**<em>*</em></em>\n<a name=\"90\" href=\"#90\">90</a>  <em>\t * Receives messages from YANCEES connector and check for peer query requests</em>\n<a name=\"91\" href=\"#91\">91</a>  <em>\t * In case of a request, generates a response and publishes it back to YANCEES</em>\n<a name=\"92\" href=\"#92\">92</a>  <em>\t */</em>\n<a name=\"93\" href=\"#93\">93</a>  \t<strong>public</strong> <strong>void</strong> processMessage(Map message) {\n<a name=\"94\" href=\"#94\">94</a>  \n<a name=\"95\" href=\"#95\">95</a>  \t\t<strong>if</strong> (print) {\n<a name=\"96\" href=\"#96\">96</a>  \t\t\tSystem.out.print(<span class=\"string\">\"\\n PeerQueryServer: Message: [\"</span>);\n<a name=\"97\" href=\"#97\">97</a>  \t\t\t<strong>for</strong> (Iterator iter = message.keySet().iterator(); iter.hasNext();) {\n<a name=\"98\" href=\"#98\">98</a>  \t\t\t\tString key = (String) iter.next();\n<a name=\"99\" href=\"#99\">99</a>  \t\t\t\tObject element = message.get(key);\n<a name=\"100\" href=\"#100\">100</a> \t\t\t\tSystem.out.print(key + <span class=\"string\">\" = \"</span> + element.toString() + <span class=\"string\">\", \"</span>);\n<a name=\"101\" href=\"#101\">101</a> \n<a name=\"102\" href=\"#102\">102</a> \t\t\t}\n<a name=\"103\" href=\"#103\">103</a> \t\t\tSystem.out.println(<span class=\"string\">\"] \\n\"</span>);\n<a name=\"104\" href=\"#104\">104</a> \t\t}\n<a name=\"105\" href=\"#105\">105</a> \n<a name=\"106\" href=\"#106\">106</a> \t\t<em class=\"comment\">// If the message received is a request</em>\n<a name=\"107\" href=\"#107\">107</a> \t\t<strong>if</strong> (message.containsKey(PeerQueryProtocol.MESSAGE_TYPE)\n<a name=\"108\" href=\"#108\">108</a> \t\t\t\t&amp;&amp; ((String) message.get(PeerQueryProtocol.MESSAGE_TYPE))\n<a name=\"109\" href=\"#109\">109</a> \t\t\t\t\t\t.equals(PeerQueryProtocol.REQ_MESSAGE_TYPE)) {\n<a name=\"110\" href=\"#110\">110</a> \n<a name=\"111\" href=\"#111\">111</a> \t\t\t<strong>if</strong> (message.containsKey(PeerQueryProtocol.QUERY_COMMAND)\n<a name=\"112\" href=\"#112\">112</a> \t\t\t\t\t&amp;&amp; ((String) message.get(PeerQueryProtocol.QUERY_COMMAND))\n<a name=\"113\" href=\"#113\">113</a> \t\t\t\t\t\t\t.equals(PeerQueryProtocol.CMD_LIST_GLOBAL_FILES)) {\n<a name=\"114\" href=\"#114\">114</a> \n<a name=\"115\" href=\"#115\">115</a> \t\t\t\tString sessionId = (String) message.get(PeerQueryProtocol.SESSION_ID);\n<a name=\"116\" href=\"#116\">116</a> \n<a name=\"117\" href=\"#117\">117</a> \t\t\t\tMap event = generateListGlobalFilesRESPONSE(sessionId);\n<a name=\"118\" href=\"#118\">118</a> \t\t\t\tpm.getConnectorReference().send(event);\n<a name=\"119\" href=\"#119\">119</a> \t\t\t}\n<a name=\"120\" href=\"#120\">120</a> \t\t}\n<a name=\"121\" href=\"#121\">121</a> \n<a name=\"122\" href=\"#122\">122</a> \t}\n<a name=\"123\" href=\"#123\">123</a> \n<a name=\"124\" href=\"#124\">124</a> \t\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a> \t<em>/**<em>*</em></em>\n<a name=\"127\" href=\"#127\">127</a> <em>\t * We pack a list of files, with their owners/name, and their sharing level</em>\n<a name=\"128\" href=\"#128\">128</a> <em>\t * in order to send the results back to the requestor.</em>\n<a name=\"129\" href=\"#129\">129</a> <em>\t * </em>\n<a name=\"130\" href=\"#130\">130</a> <em>\t * @param sessionId</em>\n<a name=\"131\" href=\"#131\">131</a> <em>\t *            is the identifier of the request that will issue in this</em>\n<a name=\"132\" href=\"#132\">132</a> <em>\t *            response</em>\n<a name=\"133\" href=\"#133\">133</a> <em>\t * @return a list of existing peers and their files in the format of a hashMap.</em>\n<a name=\"134\" href=\"#134\">134</a> <em>\t * the peer name comes cateated with each attribute name (i.e. file name), together with the </em>\n<a name=\"135\" href=\"#135\">135</a> <em>\t * current sharing level as the attribute value.</em>\n<a name=\"136\" href=\"#136\">136</a> <em>\t */</em>\n<a name=\"137\" href=\"#137\">137</a> \t<strong>protected</strong> Map generateListGlobalFilesRESPONSE(String sessionId) {\n<a name=\"138\" href=\"#138\">138</a> \t\tMap response = <strong>new</strong> HashMap();\n<a name=\"139\" href=\"#139\">139</a> \n<a name=\"140\" href=\"#140\">140</a> \t\t<em class=\"comment\">// generates a response to certain session id.</em>\n<a name=\"141\" href=\"#141\">141</a> \t\tresponse.put(PeerQueryProtocol.MESSAGE_TYPE, PeerQueryProtocol.RESP_MESSAGE_TYPE);\n<a name=\"142\" href=\"#142\">142</a> \t\tresponse.put(PeerQueryProtocol.SESSION_ID, sessionId);\n<a name=\"143\" href=\"#143\">143</a> \t\t\n<a name=\"144\" href=\"#144\">144</a> \t\t<em class=\"comment\">/*</em>\n<a name=\"145\" href=\"#145\">145</a> <em class=\"comment\">\t\t * If we are using a simple client only, this prevents the response to be</em>\n<a name=\"146\" href=\"#146\">146</a> <em class=\"comment\">\t\t * propagated to the other peers in the network.</em>\n<a name=\"147\" href=\"#147\">147</a> <em class=\"comment\">\t\t */</em>\n<a name=\"148\" href=\"#148\">148</a> \t\tresponse.put(PeerPublisherInputFilter.PUBLISH_TO_PEERS, PeerPublisherInputFilter.FALSE);\n<a name=\"149\" href=\"#149\">149</a> \t\t\n<a name=\"150\" href=\"#150\">150</a> \t\tString currentPeerName;\n<a name=\"151\" href=\"#151\">151</a> \t\tRepositoryPeer repPeer;\n<a name=\"152\" href=\"#152\">152</a> \t\tMap peerMap = pm.getPeers();\n<a name=\"153\" href=\"#153\">153</a> \t\t\t\n<a name=\"154\" href=\"#154\">154</a> \t\t\n<a name=\"155\" href=\"#155\">155</a> \t\t<strong>if</strong> (print)\n<a name=\"156\" href=\"#156\">156</a> \t\t\tSystem.out.println(<span class=\"string\">\"PeerQueryServer: generating response...\"</span>);\n<a name=\"157\" href=\"#157\">157</a> \t\t<strong>for</strong> (Iterator iter = peerMap.keySet().iterator(); iter.hasNext();) {\n<a name=\"158\" href=\"#158\">158</a> \t\t\tcurrentPeerName = (String) iter.next();\n<a name=\"159\" href=\"#159\">159</a> \t\t\trepPeer = (RepositoryPeer) peerMap.get(currentPeerName);\n<a name=\"160\" href=\"#160\">160</a> \t\t\t\n<a name=\"161\" href=\"#161\">161</a> \t\t\t<em class=\"comment\">// Adds the peer color as the attribute of the peerName</em>\n<a name=\"162\" href=\"#162\">162</a> \t\t\tColor color = PieUtils.getColorFromServiceInfo(repPeer.getServiceInfo());\n<a name=\"163\" href=\"#163\">163</a> \t        <strong>if</strong> (color == <strong>null</strong>) {\n<a name=\"164\" href=\"#164\">164</a> \t        \tcolor = PieUtils.getColorForName(currentPeerName);\n<a name=\"165\" href=\"#165\">165</a> \t        }\n<a name=\"166\" href=\"#166\">166</a> \t\t\n<a name=\"167\" href=\"#167\">167</a> \t\t\tresponse.put(PeerQueryProtocol.PEER+currentPeerName, PieUtils.getRGBString(color));\n<a name=\"168\" href=\"#168\">168</a> \t\t\tMap filesMap = repPeer.getOwnedFiles();\n<a name=\"169\" href=\"#169\">169</a> \n<a name=\"170\" href=\"#170\">170</a> \t\t\t<strong>for</strong> (Iterator iterator = filesMap.keySet().iterator(); iterator\n<a name=\"171\" href=\"#171\">171</a> \t\t\t\t\t.hasNext();) {\n<a name=\"172\" href=\"#172\">172</a> \t\t\t\tString fileName = (String) iterator.next();\n<a name=\"173\" href=\"#173\">173</a> \t\t\t\tInteger sharingLevel = (Integer) filesMap.get(fileName);\n<a name=\"174\" href=\"#174\">174</a> \n<a name=\"175\" href=\"#175\">175</a> \t\t\t\tresponse.put(PeerQueryProtocol.FILE+currentPeerName + <span class=\"string\">\"/\"</span> + fileName, sharingLevel\n<a name=\"176\" href=\"#176\">176</a> \t\t\t\t\t\t.toString());\n<a name=\"177\" href=\"#177\">177</a> \n<a name=\"178\" href=\"#178\">178</a> \t\t\t\t<strong>if</strong> (print)\n<a name=\"179\" href=\"#179\">179</a> \t\t\t\t\tSystem.out.println(currentPeerName + <span class=\"string\">\"/\"</span> + fileName\n<a name=\"180\" href=\"#180\">180</a> \t\t\t\t\t\t\t+ <span class=\"string\">\" sharing level is \"</span> + sharingLevel);\n<a name=\"181\" href=\"#181\">181</a> \n<a name=\"182\" href=\"#182\">182</a> \t\t\t}\n<a name=\"183\" href=\"#183\">183</a> \t\t}\n<a name=\"184\" href=\"#184\">184</a> \n<a name=\"185\" href=\"#185\">185</a> \t\t<strong>return</strong> response;\n<a name=\"186\" href=\"#186\">186</a> \t}\n<a name=\"187\" href=\"#187\">187</a> \n<a name=\"188\" href=\"#188\">188</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34224.0}