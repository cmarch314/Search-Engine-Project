{"text": "Informatics 41 Fall 2 9 David G Kay UC Irvine ANSWERS TO SAMPLE QUESTIONS Below are some questions of the sort that could appear on our final exam This is not a sample exam it s not the same length it doesn t have the same mix of questions it doesn t cover all the topics But these questions will help you review some important concepts and most of them have appeared on exams in the past Try to do them by yourself but then compare your answers with your classmates Do this long enough in advance that you ll have a chance to ask us if there are issues you can t resolve yourself a 1 Write a definition for the function vector list Hints Remember that vectors are zero based Be careful not to produce a reverse order list Use an auxiliary function vector list vector list Return a list containing the same elements as the vector argument in the same order vector list vector 1 2 3 returns list 1 2 3 define vector list V vtl help V vector length V empty define vtl help V i list so far cond i list so far else vtl help V sub1 i cons vector ref V sub1 i list so far Scoring Deduct a point if they don t deal with the vector being zero based though they don t have to subtract 1 in the same place the solution above does Deduct a point if they count upwards and thereby produce a reverse order list a 2 Write a definition for the function list vector Hint You can do this without an auxiliary function and without vector set but you may use them if you need to list vector list vector Return a vector containing the same elements as the list argument in the same order list vector list 1 2 3 returns vector 1 2 3 define list vector L build vector length L lambda n list ref L n That s the nice way but here s the other way define list to vector L ltv help L build vector length L lambda n 1 define ltv help L V i cond empty L V else begin vector set V i first L ltv help rest L V add1 i b Consider the following function define DoSomething a b assume b cond b a else DoSomething sub1 a sub1 b b 1 What is returned by each of the following statements DoSomething 3 1 2 DoSomething 6 2 4 DoSomething 29 5 24 DoSomething 25 23 2 b 2 In one English word or in mathematical notation describe the value this function returns in terms of its arguments Subtraction a b b 3 Now look at this function define DoSomethingElse a b assume b cond b a else sub1 DoSomethingElse a sub1 b Does DoSomethingElse produce the same results as DoSomething If not explain how the results differ Yes they produce the same results b 4 Which of these routines are tail recursive DoSomething DoSomethingElse neither or both For any non tail recursive routine indicate by circling it which specific operation in its code makes it non tail recursive DoSomethingElse is not tail recursive because of the last subtraction which is done after returning from the recursive call c A set is a collection of distinct objects i e without duplicates Suppose you have the following operations defined on sets empty set is a constant representing the empty set empty S returns true if the set S is empty and false otherwise element S E returns true if E is an element of the set S and false otherwise insert S E returns the set S if E is already in S or returns S with E added otherwise intersection S1 S2 returns a set containing only the elements that are in both S1 and S2 subtract S1 S2 returns a set containing the elements of S1 that are not in S2 union S1 S2 returns a set containing every element in either S1 or S2 without duplicates of course c 1 Using any of the above routines where appropriate but using no list processing functions define a Scheme function called ski trip that takes the following four sets as arguments friends the set of all your friends early risers the set of people you know perhaps including people who aren t your friends who will wake up early enough to get out on the slopes when the lifts open rowdy people the set of people who are likely to get too excited and wreck your cabin fun folks the set of people who really know how to party and returns the set of people you d like to invite on your ski trip over winter break all your friends who are early risers and fun folks but not rowdy people define ski trip friends early risers rowdy people fun folks subtract intersection intersection friends early risers fun folks rowdy people c 2 Assuming we implement sets as normal Scheme lists write a definition for the function union define union lambda s1 s2 cond empty s1 s2 element s2 first s1 union rest s1 s2 else cons first s1 union rest s1 s2 c 3 Using the operations map filter foldr and or for each and without using any explicit recursion write a definition for the function intersection Hint This can be quite short define intersection lambda s1 s2 filter lambda E element s1 E s2 c 4 Write a definition for subtract and rewrite a definition for union using the operations map filter foldr and or for each and no explicit recursion define subtract lambda s1 s2 filter lambda E not element s2 E s1 define union lambda s1 s2 foldr insert s1 subtract s2 s1 d In the restaurants program a copy of which is provided define the following function that could be used at the top level of the program i e without knowing whether the collection is implemented as a list a BST a vector or whatever that means you have to call collection change increase price for cuisine collection number symbol collection The symbol is the name of a cuisine the number is a number of dollars to add to the price of each restaurant serving that cuisine Return the collection with those price changes define increase price for cuisine lambda RC amount c collection change RC lambda r eq rrant cuisine r c lambda r make rrant rrant name r rrant cuisine r rrant phone r rrant dish r amount rrant price r e This one is tough towards the end probably tougher than would be on the test Anteater Airlines stores each of its scheduled flights in a structure with five fields origin the three letter airport code e g LAX departure the departure time destination a three letter airport code arrival the arrival time passengers a list of passengers each of whom is represented by a string e g Jane Jones e 1 Define the structure flight with the field names given above define struct flight origin departure destination arrival passengers The parentheses here have to be correct In general all the parentheses have to be correct except for counting the parentheses at the end of a definition e 2 Complete the following definition for the predicate function valid flight which takes an expression and checks whether it appears to be a valid flight define valid flight lambda X and and like can take more than 2 arguments X is it a flight structure at all flight airport code valid flight origin X time valid X is the departure time valid flight departure airport code valid flight destination X time valid X is the arrival time valid flight arrival list of strings flight passengers X e 3 Assume that you have already defined the variable airport code list which is a list of all the valid three letter airport abbreviations e g LAX SFO SNA Write a definition for the predicate function airport code valid which takes a symbol an atom and returns true if the symbol is contained in airport code list Hint You can do this without recursion if you use a function we defined in class and in the book define airport code valid lambda c member c airport code list Okay if the order of arguments to member is switched Don t deduct but make a note if they use a cond to explicitly return t or f It s also okay if they write it out recursively and don t use member e 4 The predefined predicate string takes a single argument and returns true t if and only if the argument is a string Write a definition for the predicate list of strings which takes a list and returns true if and only if every element of the list is a string or if the list is empty define list of strings lambda L cond null L t string first L list of strings rest L else f This can also be done in just two cond clauses with the second using AND e 5 Define the predicate flight goes to which takes two arguments a flight structure and a symbol representing an airport code and returns true if the flight s destination matches that symbol define flight goes to lambda F d equal flight destination F d Okay to use eq or symbol instead of equal e 6 Anteater Airlines stores all of its scheduled flights in a list of flight structures the same flight structure you defined in the previous problem Write a definition for the function first flight to which takes a flight list and a symbol representing an airport code and returns the first flight on the list whose destination matches that symbol or the null list if there s no match Use flight goes to as described above whether or not your definition was correct define first flight to lambda L d cond null L flight goes to first L d first L else first flight to rest L d e 7 Write a definition for the function keep flights to which takes a flight list and a symbol representing an airport code and returns a list of flights containing only those flights in the original list whose destination matches that symbol define keep flights to lambda L d cond null L flight goes to first L d cons first L keep flights to rest L d else keep flights to rest L d e 8 To enhance security an anonymous air marshal will be assigned to every Anteater Airlines flight Write a definition of add marshals which takes a flight list and a code name and adds that code name at the beginning of the passenger list of each flight Hint First write a function to take a single flight and add the name then call that function from your definition of add marshals define add marshals lambda L name cond null L else cons enhance first L name add marshals rest L name define enhance lambda F codename make flight flight origin F flight departure F flight destination F flight arrival F cons codename flight passengers F e 9 Write a definition for complete passengers list which takes a flight list and returns a list of strings containing all the passengers from all the flights on the list with no duplications You may assume that all the passengers on a single flight are unique define complete passengers list lambda L cond null L else add unique flight passengers first L complete passengers list rest L define add unique lambda one flights list master passengers list cond null one flights list master passengers list member first one flights list master passengers list add unique rest one flights list master passengers list else cons first one flights list add unique rest one flights list master passengers list e 1 5 points Write the function average passengers that takes a flight list and returns the average number of passengers on the flights on the flight list define average passengers lambda L total passengers L length L define total passengers lambda L cond null L else length flight passengers first L total passengers rest L e 11 Rewrite average passengers to make it tail recursive If your answer for part a is already tail recursive just write I did this already and if you did it correctly you ll get full credit define average passengers lambda L total passengers L length L define total passengers lambda L acc cond null L acc else total passengers rest L acc length flight passengers first L e 12 Anteater Airlines plans to merge with Aardvark Airlines to form a new airline AAAir Luckily and incredibly both airlines store their flights in a list of flight structures as described above Write the function merge flight lists which takes two flight lists and returns a flight list containing all the flights from both arguments except that when a flight from the first list matches a flight from the second list i e they have the same origin departure time destination and arrival time the merged list contains just one flight with the two matching flights passenger lists combined You may assume that you have already defined flights match which takes two flight structures and returns true if they match as described above and merge lists which takes two lists and returns a list that contains all the elements of both arguments You may also assume that the names on any single passenger list are unique and that within each of the original flight lists no flights match Hint Be careful and consistent about what types of data come into and go out of each function define merge flight lists lambda F G cond null F G else merge flight lists rest F merge a flight first F G define merge a flight lambda f L cond null L list f flights match f first L cons merge flights f first L rest L else cons first L merge a flight f rest L define merge flights lambda f g make flight flight origin f flight departure f flight destination f flight arrival f merge lists flight passengers f flight passengers g f Evaluate each of the following expressions That is what does the Scheme interpreter DrScheme in our case display when each of these expressions is executed f 1 15 4 4 4 11 1 point f 2 55 5 12 f or false 1 point f 3 1 cond 5 1 2 37 else 6 137 2 points g 1 True or false The features and capabilities of Scheme make it the best choice for the great majority of programming tasks False g 2 True or false A programmer with a knowledge of Java can be sure that his or her knowledge will be enough to sustain a productive and innovative 4 year career False h Students in the course Applied Epistemology 1 1 are graded on two items a midterm and a final exam each of which has 1 points possible The midterm s weight 4 of the course grade the final is worth 6 Write the function AE1 1 score that takes two arguments a student s midterm score and final exam score and returns that student s overall weighted score in the class in the range to 1 Write two constant definitions for the weights a contract a brief purpose statement the Scheme function definition and two tests in the form of boolean expressions that should return true if the function works correctly define MT WEIGHT 4 Could also be 4 if the arithmetic later is right define FINAL WEIGHT 6 Could be 6 1 point for defining both correctly AE1 1 score number number number 1 point part credit if midterm e g for number Compute weighted score given midterm and final scores all 1 1 2 if missing or blatantly untrue define AE1 1 score lambda midterm final midterm MT WEIGHT final FINAL WEIGHT Tests AE1 1 score 1 AE1 1 score 1 1 1 point for both correct tests returning a boolean SCORING THE CODE 1 point for correct form of define define AE1 1 score lambda ANYTHING or def A s ANYTHING 1 point for correct parameter list two names in parentheses with AE1 1 score if using Indiana style 1 point for any attempt to add something involving both arguments 1 point for completely correct arithmetic 1 point for everything else correct Parentheses must be right except for counting all the trailing ones i Complete the definition of the function between below between number number number boolean Return true if the first argument s value is between the second and the third inclusive Examples between 7 1 is true between 3 3 4 is true between 1 2 3 is false define between 1 point for right form compare value to low and compare value to high lambda value low high 1 pt for correctness going right way on not switching low and high and value low value high Parens around comparisons must be right or 1 2 trailing parens don t matter here j Complete the definition of item on list below item on list expression list boolean Return true if the expression occurs on the list define item on list lambda item L cond empty L false equal item first L true else item on list item rest L Scoring 2 points for empty case 1 for test 1 for returning false 2 points for matching case 1 for test 1 for returning true 2 points for recursive case 1 for attempt at recursive call 1 for getting it all correct It s okay if they use some other comparison besides equal but note it It s okay if they split this into nested conds as they do in the book Minus 3 if they cross out the cond and just call member correctly If anybody uses member without deleting the cond e g cond true member item L else whatever I want to hear about it They should get credit You may deduct points for nontrivial syntax problems but beware of double jeopardy Some answers may be right but not follow the pattern of the rubric Score as appropriate and consult with me as necessary k A date is a structure make date month day year where month is a symbol Jan Feb and so on day is a number from 1 to 31 and year is a number from 1 to 3 k 1 Define the structure date with the field names given above define struct date month day year The parentheses here have to be correct In general all the parentheses have to be correct except for counting the parentheses at the end of a definition If they get any field names wrong deduct 1 2 point k 2 Define a date object called TODAY with the appropriate values define TODAY make date Oct 19 2 4 If the day is off by 1 or 2 I don t think I care k 3 Complete the following definition for the predicate function valid date which takes an expression and checks whether it appears to be a valid date Use the functions you defined in the previous problems where necessary valid date anything boolean define MONTHLIST list Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec define valid date lambda D line 1 1 point for date line 2 1 point for date month 1 point for MONTHLIST and line 3 4 1 point for both between s line 4 1 point for 1 3 D is it a date structure at all item on list D is the month valid date day D 1 31 is the day valid date year D is the year valid k 4 Define the predicate function all valid dates all valid dates list boolean Return true if all the items on the list are valid dates If the list is empty return true define all valid dates lambda L cond empty L true valid date first L all valid dates rest L else false 1 point for correct define lambda cond 5 points for the rest Any logically equivalent version e g one with and is okay You might give a point each for the empty and non matching cases and three points for the recursive case l Suppose you wish to write a spelling checker that takes a string of text as input and returns a list of the misspelled words in that string Because the input may contain white space and punctuation we will need to extract the words from the string where a word is a string of characters that are separated from the next word by white space or punctuation The precise characters that count as white space or punctuation we won t worry about here Define the function spell check which takes a string and returns a list of the words in the string that are misspelled more precisely words that don t occur in the dictionary of all correctly spelled words You should use each of the following in your definition first word a function that takes a string and returns the first word in that string rest of words a function that takes a string and returns a copy of that string with the first word removed string empty a function that takes a string and returns true if it s empty or if it contains only white space and punctuation DICTIONARY a long list of correctly spelled words where each word is a string spell check string list of strings Return a list of the words in the input string that aren t in the dictionary define spell check 1 point Correct define lambda and argument list lambda s 1 point Dividing the problem into 3 cases that relate somehow to the arg cond 1 point Correctly identifying the empty base case continued below string empty s empty item on list first word s DICTIONARY spell check rest of words s else cons first word s spell check rest of words s 1 point Correctly returning empty in the empty base case 1 point Attempt to use both first word and rest of words to traverse list 1 point Correct use of first word and rest of words in at least one case to traverse list 1 point Traversal of list using first word and rest of words completely correct in both cases 1 point Attempt to find first word in DICTIONARY 1 point Correct location of first word in DICTIONARY item on list or member 1 2 for rewriting it 1 point Correct case where first word is in the dictionary no word added to return list 1 point Correct case where first word isn t in dictionary consing first word onto return list 1 point Everything else correct m In this problem you may not use the predefined functions member or list ref You may use other functions defined earlier in this exam and you may lose points if you re implement here something that was already described above m 1 Define the function position on list position on list any list of any number Return the place on the list where the first input occurs or zero if list is empty Examples position on list a a b c is 1 position on list 1 empty is position on list 3 2 3 4 is 2 define position on list lambda item L cond empty L equal item first L 1 else 1 position on list item rest L SCORING 1 for empty case 2 for matching case 3 for increment recursive case m 2 Define the function item at position item at position number list of any any From the input list return the item specified by the input number or empty if out of range Examples item at position 3 a b c is c item at position 7 a b is empty item at position 3 4 is empty define item at position lambda n L cond empty L empty n empty n 1 first L else item at position n 1 rest L SCORING 1 for handling empty input list 1 for handling index not checking negative is okay 3 for recognizing the item at the right position and returning it 3 for the correct recursive case Partial credit as warranted m 3 Define next on list You may wish to use the predefined function length which returns the number of items on a list Hint Use prior definitions not recursion next on list any list of any any Return the item on the input list that follows the first input or empty if none Examples next on list b a b c is c next on list c a b c is empty next on list x a b c is empty next on list a empty is empty define next on list lambda item L cond position on list item L empty length L position on list item L empty else item at position 1 position on list item L L SCORING 2 points for correctly recognizing input not on list and returning empty 2 points for correctly recognizing last item on list and returning empty 3 points for returning correct next item otherwise m 4 Define next on circular list next on circular list expression list expression Like next on list but the item after the last on the list is the first item again Example next on circular list c a b c is a define next on circular list lambda item L cond position on list item L empty length L position on list item L first L else item at position 1 position on list item L L SCORING 3 points for correctly handling the circular case 2 points for everything else right Don t deduct for the same mistakes as in the previous part but do deduct if they messed something new up m 5 Define the function next month that uses the constant MONTHLIST see Problem k to take in a symbol Jan Feb representing a month and return the symbol for the following month next month symbol symbol Take a month name Jan Feb and return the name of the following month define next month lambda this month next on circular list this month MONTHLIST m 6 Define the function advance a month that takes a date see Problem k and returns that date moved one month into the future advance a month date date Advance the input date by one month on the same day define advance one month lambda d make date next month date month d date day d cond eq date month d Dec 1 date year d else date year d SCORING 2 points for returning a date call to make date with three arguments 2 points for correct call to next month 3 points for handling December correctly 1 point for everything else correct m 7 Suppose you have a list of dates representing events on your calendar but you decide to take a month s skiing vacation in February You ll need to postpone all the events scheduled in February perhaps moving them one month later Generalize this to the function clear the month clear the month symbol list of dates list of dates Return the input list after advancing by one month every date whose month matches the input symbol define clear the month lambda m L cond empty L empty eq date month first L m cons advance one month first L clear the month m rest L else cons first L clear the month m rest L SCORING 1 point for empty case 4 points for matching month case 1 point for non matching case m 8 Define this function days to start of month symbol number Return the number of days from January 1 to the start of the named month in non leap years Examples days to start of month Jan is days to start of month Feb is 31 define DAYSINMONTH 31 28 31 3 31 3 31 31 3 31 3 31 this will be useful No key currently available m 9 Define this function days from jan1 date number Return number of days from January 1 of the same year to the specified date inclusive Examples days from jan1 make date Jan 3 2 5 3 days from jan1 make date Feb 1 2 5 32 No key currently available n For each of the two sets of data shown below draw the binary search tree that results from inserting the items in the order shown Distinguish left branches clearly from right branches n 1a 13 19 22 7 17 1 2 n 1b Scheme Python Java Fortran C Basic Balanced 2 points Linear to the left 2 points n 2 For each of the trees above if you traverse the tree in order printing each node what is the result n 2a result of n 1a 2 7 1 13 17 19 22 n 2b result of n 1b Basic C Fortran Java Python Scheme o Evaluate each of the following Scheme expressions o 1 local define make checker lambda threshold lambda n n threshold define a1 filter make checker 6 3 1 4 1 5 9 2 6 define a2 filter make checker 4 3 1 4 1 5 9 2 6 list a1 a2 3 1 4 1 5 2 3 1 1 2 Correct numbers and order but list structure wrong 1 Branching the wrong way on equality another 1 o 2 local define make checker lambda comparison op threshold lambda n comparison op n threshold define b1 filter make checker 1 3 1 4 1 5 9 2 6 define b2 filter make checker 3 3 1 4 1 5 9 2 6 list b1 b2 1 1 3 4 5 9 6 Don t deduct again for problems mentioned above p This problem involves the restaurant collection program For each part below indicate your answer by making any additions changes or deletions to the table of data shown in that part p 1 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 remove Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 remove Thai Touch Thai 242 2424 Larb Guy 9 95 remove Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result returned by the following code Show your results by making changes to the table above change values cross lines out add new lines as appropriate define Thai lambda R equal rrant cuisine R Thai collection remove C Thai p 2 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 remove Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 remove What is the result of the following expression collection remove C lambda R equal rrant cuisine R Japanese p 3 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 remove Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 remove Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 remove Thai Touch Thai 242 2424 Larb Guy 9 95 remove Kitayama Japanese 335 3535 Okonomiyaki 8 5 remove What is the result of the following expression collection remove C lambda R or Thai R equal rrant cuisine R Japanese p 4 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 11 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 9 75 Thai Touch Thai 242 2424 Larb Guy 9 95 1 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression define raise price lambda R make rrant rrant name R rrant cuisine R rrant phone R rrant dish R 1 rrant price R collection change C Thai raise price p 5 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 remove was 11 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 remove Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 9 75 Thai Touch Thai 242 2424 Larb Guy 9 95 remove was 1 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression collection remove collection change C Thai raise price raise price is defined above lambda R rrant price R 1 p 6 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 8 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 1 Mitsuki Japanese 232 5353 Edamame 4 5 remove Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 remove Thai Touch Thai 242 2424 Larb Guy 9 95 7 95 Kitayama Japanese 335 3535 Okonomiyaki 9 5 What is the result of the following expression collection change collection remove C lambda R rrant price R 9 lambda R or equal rrant cuisine R Pizza equal rrant cuisine R Thai lambda R make rrant rrant name R rrant cuisine R rrant phone R rrant dish R rrant price R 2 q Below are the definitions of five functions q 1 Write R next to each of the five routines below that is recursive q 2 Write T next to each of the five routines that is tail recursive Some routines may be both R and T some may be neither Consider each function independently of the others i e pay no attention to the other functions a given function calls define print stars A R lambda N cond zero N newline else begin do these two things in the order shown print stars A N 1 print n 1 stars display print out a star define print stars B RT lambda N cond zero N newline else begin do these two things in the order shown display print out a star print stars B N 1 print n 1 stars define keep matches A R lambda L X cond null L empty equal X first L cons first L keep matches A rest L X else keep matches A rest L X define keep matches B neither lambda L X keep matches help L X define keep matches B help RT lambda L X list so far cond null L list so far equal X first L keep matches B help rest L X cons first L list so far else keep matches B help rest L X list so far r Suppose we have a list called RL of restaurants with menus according to the usual definitions define struct rrant name cuisine phone menu where menu is a list of dishes define struct dish name price Define the following function name and phone serving dish listof rrant string listof name phone list Returns a list of the names and phone numbers of all the restaurants that serve the dish named in the second input Each name phone number pair should be in its own list for example Cobras and Matadors 343 3434 La Cote Basque 344 3334 define name and phone serving dish lambda RL dishname map make name phone filter lambda R rrant serves dish R dishname RL Probably the best way to handle this is to define functions like these individually first menu includes menu string boolean This appears above Return true if string is the name of a dish on menu define menu includes M s length filter lambda D string dish name D s M rrant serves dish rrant string boolean Return true if string is the name of any menu item in rrant define rrant serves dish R s menu includes rrant menu R s make name phone rrant list Returns list containing rrant s name and phone define make name phone R list rrant name R rrant phone R Determining whether a given restaurant serves the specified dish 3 points 2 points for examining the menu and 1 point for extracting the menu from the restaurant In my solution the 2 points are captured by menu includes if they rewrote the same thing they wrote for b 2 rather than just calling it they should lose a point if they did the task some different way that s okay The 1 point is captured by rrant serves dish but again it s okay if they achieve this some other way Selecting restaurants from the list that pass some test ideally the test is whether the restaurant serves the dish in question but for this point credit if they select some restaurants from the list using any criterion 1 point Specifying the correct restaurant choice criterion i e correctly applying the equivalent of rrant serves dish to the list 1 point Returning a list of name phone pairs two element lists not technically pairs 2 points In my solution this is captured in make name phone but they could get the same result some other way Everything else correct including not using explicit recursion 2 points So this says if they coded it right using recursion they can get 7 9 s Below are definitions of map and filter define map f L define filter p L cond cond empty L empty empty L empty else cons f first L p first L map f rest L cons first L filter p rest L else filter p rest L s 1 Write a definition for the function process that abstracts both map and filter Hint You may find it useful to think about these two functions define always true x true and define no change x x define process f p L cond empty L empty p first L cons f first L process f p rest L else process f p rest L s 2 Write new one line definitions for map and filter that call process define map2 f L process f always true L define filter2 p L process no change p L t A nested list of items NL is either 1 empty 2 cons item NL or 3 cons NL NL Write a definition for the function deep unique as described below deep unique NL list of items Return a list of all the items that occur in the input no matter how deeply nested with no duplications Order of result doesn t matter Example deep unique 3 17 3 Huey Huey 17 returns 3 17 Huey You may assume that the predicate list is already defined to return true if its argument is a list and false otherwise define deep unique L deep unique aux L empty define deep unique aux L unique list cond empty L unique list list first L deep unique aux rest L deep unique aux first L unique list member first L unique list deep unique aux rest L unique list else deep unique aux rest L cons first L unique list produces reverse order fwd or rev OK Written by David G Kay 1995 2 4 Corrections to some solutions by Felix Morariu Fall 2 5 David G Kay kay uci edu Wednesday November 23 2 5 8 4 AM", "_id": "http://www.ics.uci.edu/~kay/courses/i41/answers.html", "title": "answers to sample questions", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, December 8, 2005 9:45 AM\" />\n<TITLE>Answers to Sample Questions</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D20F328F\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"final exam review\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Final exam details and review topics for Informatics 41, the first quarter of the Informatics Core Course in the Department of Informatics, Donald Bren School of Information and Computer Sciences, University of California, Irvine.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2004 by David G. Kay.  All rights reserved.\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\n  <FONT FACE=\"Goudy Old Style\">Informatics 41 * Fall 2009 * David G. Kay *\nUC Irvine</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\" SIZE=6><B>A<FONT SIZE=5>NSWERS TO </FONT>S<FONT SIZE=5>AMPLE\n</FONT>Q<FONT SIZE=5>UESTIONS</FONT></B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Below are some questions of the sort that could\nappear on our final exam.  This is not a sample exam--it&#39;s not the same\nlength, it doesn&#39;t have the same mix of questions, it doesn&#39;t cover\nall the topics.  But these questions will help you review some important\nconcepts and most of them have appeared on exams in the past.  Try to do\nthem by yourself, but then compare your answers with your classmates. Do\nthis long enough in advance that you&#39;ll have a chance to ask us if there\nare issues you can&#39;t resolve yourself.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.1)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">vector-&gt;list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hints:  Remember that vectors are zero-based.  Be careful not to produce\na reverse-order list.  Use an auxiliary function.)<A NAME=\"_14_819\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; vector-&gt;list: vector  -&gt;  list</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; Return a list containing the same elements\nas the vector argument, in the same order.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; (vector-&gt;list (vector 1 2 3) returns\n(list 1 2 3)<A NAME=\"_14_995\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (vector-&gt;list\nV)\n<BR />\n&#160; (vtl-help V (vector-length V) empty))\n<BR />\n(define (vtl-help V i list-so-far)\n<BR />\n&#160; (cond\n<BR />\n&#160;   ((= i 0) list-so-far)\n<BR />\n&#160;   (else (vtl-help V \n<BR />\n&#160;                   (sub1 i) \n<BR />\n&#160;                   (cons (vector-ref V (sub1 i)) list-so-far)))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">; Scoring:  Deduct\na point if they don't deal with the vector being zero-based (though they\ndon't have to subtract 1 in the same place the solution above does).</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">; Deduct a point if\nthey count upwards and thereby produce a reverse-order list.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.2)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">list-&gt;vector</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You can do this without an auxiliary function and without </FONT><FONT FACE=\"Courier New\">vector-set!</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nbut you may use them if you need to.)<A NAME=\"_14_1694\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; list-&gt;vector: list  -&gt;  vector</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; Return a vector containing the same elements\nas the list argument, in the same order.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; (list-&gt;vector (list 1 2 3) returns\n(vector 1 2 3)<A NAME=\"_14_1871\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (list-&gt;vector\nL)\n<BR />\n&#160; (build-vector (length L) (lambda (n) (list-ref L n))))\n<BR />\n; --------------------------------------------------------------- That&#39;s\nthe nice way, but here&#39;s the other way:\n<BR />\n(define (list-to-vector L)\n<BR />\n&#160; (ltv-help L (build-vector (length L) (lambda (n) 1)) 0))\n<BR />\n(define (ltv-help L V i)\n<BR />\n&#160; (cond\n<BR />\n&#160;   ((empty? L) V)\n<BR />\n&#160;   (else (begin\n<BR />\n&#160;           (vector-set! V i (first L))\n<BR />\n&#160;           (ltv-help (rest L) V (add1 i))))))</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B>  Consider the following function:<A NAME=\"_14_2364\"></A></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define (DoSomething a b)  ; assume b &gt;=\n0</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   ((= b 0) a)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   (else (DoSomething (sub1 a) (sub1\nb)))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.1)</B> What is returned by each of the\nfollowing statements?</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 3 1)<A NAME=\"_14_2568\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">2</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 6 2)<A NAME=\"_14_2598\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">4</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 29 5)<A NAME=\"_14_2629\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">24</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 25000 23000)<A NAME=\"_14_2668\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">2000</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.2)</B> In one English word (or in mathematical\nnotation), describe the value this function returns in terms of its arguments.<A NAME=\"_14_2811\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Subtraction:   a -\nb</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.3)</B>  Now look at this function:<A NAME=\"_14_2880\"></A></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define (DoSomethingElse a b)  ; assume\nb &gt;= 0</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   ((= b 0) a)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   (else (sub1 (DoSomethingElse a\n(sub1 b))))))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Does </FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nproduce the same results as </FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>?\n If not, explain how the results differ.<A NAME=\"_14_3129\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Yes, they produce\nthe same results.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.4)</B>  Which of these routines are\ntail recursive--</FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nneither, or both?  For any non-tail-recursive routine, indicate (by circling\nit) which specific operation in its code makes it non-tail-recursive.<A NAME=\"_14_3418\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">DoSomethingElse is\nnot tail-recursive because of the last subtraction (which is done after\nreturning from the recursive call). </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c)</B>  A set is a collection of distinct\nobjects (i.e., without duplicates).  Suppose you have the following operations\ndefined on sets:\n<BR />\n</FONT><FONT FACE=\"Courier New\">empty-set</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a constant representing the empty set.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(empty? S)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns true if the set S is empty and false otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(element? S E)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns true if E is an element of the set S, and false otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(insert S E)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns the set S if E is already in S, or returns S with E added otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(intersection S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing only the elements that are in both S1 and S2.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(subtract S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing the elements of S1 that are not in S2.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(union S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing every element in either S1 or S2 (without  &#160;\nduplicates, of course).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.1)</B>  Using any of the above routines\nwhere appropriate, but using no list processing functions, define a Scheme\nfunction called </FONT><FONT FACE=\"Courier New\">ski-trip</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes the following four sets as arguments</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">friends</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of all your friends;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">early-risers</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people you know (perhaps including people who aren&#39;t your\nfriends) who will wake up early enough to get out on the slopes when the\nlifts open;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">rowdy-people</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people who are likely to get too excited and wreck your cabin;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">fun-folks</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people who really know how to party</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>and returns the set of people you&#39;d like\nto invite on your ski trip over winter break:  all your friends who are\nearly risers and fun folks, but not rowdy people.<A NAME=\"_14_5069\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (ski-trip\nfriends early-risers rowdy-people fun-folks)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160; (subtract\n(intersection (intersection friends early-risers) fun-folks) rowdy-people))</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.2)</B>  Assuming we implement sets as\nnormal Scheme lists, write a definition for the function </FONT><FONT FACE=\"Courier New\">union</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_5342\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define union\n<BR />\n&#160;&#160; (lambda (s1 s2)\n<BR />\n&#160;&#160;  &#160; (cond\n<BR />\n&#160;&#160;  &#160; ((empty? s1) s2)\n<BR />\n&#160;&#160;  &#160; ((element? s2 (first s1)) (union (rest s1) s2))\n<BR />\n&#160;&#160;  &#160; (else (cons (first s1) (union (rest s1) s2))))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.3)</B>  Using the operations </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">foldr</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand/or </FONT><FONT FACE=\"Courier New\">for-each</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand without using any explicit recursion, write a definition for the function\n</FONT><FONT FACE=\"Courier New\">intersection</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  This can be quite short.)<A NAME=\"_14_5741\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define intersection\n<BR />\n&#160;&#160; (lambda (s1 s2)\n<BR />\n&#160;&#160;  &#160; (filter (lambda (E) (element? s1 E)) s2)))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.4)</B>  Write a definition for </FONT><FONT FACE=\"Courier New\">subtract</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand rewrite a definition for </FONT><FONT FACE=\"Courier New\">union</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nusing the operations </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">foldr</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand/or </FONT><FONT FACE=\"Courier New\">for-each</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand no explicit recursion.<A NAME=\"_14_6037\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define subtract\n<BR />\n&#160;&#160; (lambda (s1 s2)\n<BR />\n&#160;&#160;  &#160; (filter (lambda (E) (not (element? s2 E))) s1)))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define union\n<BR />\n&#160;&#160; (lambda (s1 s2)\n<BR />\n&#160;&#160;  &#160; (foldr insert s1 (subtract (s2 s1)))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(d)</B>  In the <A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.html\">restaurants program</A>\n(a copy of which is provided), define the following function that could\nbe used at the top level of the program (i.e., without knowing whether the\ncollection is implemented as a list, a BST, a vector, or whatever; that\nmeans you have to call </FONT><FONT FACE=\"Courier New\">collection-change</FONT><FONT FACE=\"AGaramond\" SIZE=4>).<A NAME=\"_14_6499\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; increase-price-for-cuisine: collection\nnumber symbol -&gt; collection\n<BR />\n;; The symbol is the name of a cuisine; the number is a number of dollars\n<BR />\n;; to add to the price of each restaurant serving that cuisine.  Return\nthe\n<BR />\n;; collection with those price changes.<A NAME=\"_14_6765\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define increase-price-for-cuisine\n<BR />\n&#160; (lambda (RC amount c)\n<BR />\n&#160;   (collection-change RC \n<BR />\n&#160;                   (lambda (r) (eq? (rrant-cuisine r) c))\n<BR />\n&#160;                   (lambda (r) (make-rrant (rrant-name r) (rrant-cuisine\nr) (rrant-phone r)\n<BR />\n&#160;                            (rrant-dish r) (+ amount (rrant-price\nr))))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e)</B>  [This one is tough towards the\nend, probably tougher than would be on the test.]\n<BR />\nAnteater Airlines stores each of its scheduled flights in a structure with\nfive fields:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>origin (the three-letter airport code, e.g..\n</FONT><FONT FACE=\"Courier New\">&#39;LAX</FONT><FONT FACE=\"AGaramond\" SIZE=4>)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>departure (the departure time)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>destination (a three-letter airport code)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>arrival (the arrival time)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>passengers (a list of passengers, each of\nwhom is represented by a string, e.g.,</FONT><FONT FACE=\"Courier New\"> &quot;Jane\nJones&quot;</FONT><FONT FACE=\"AGaramond\" SIZE=4>)</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.1)</B>  Define the structure </FONT><FONT FACE=\"Courier New\">flight</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the field names given above.<A NAME=\"_14_7608\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define-struct flight\n(origin departure destination arrival passengers))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">The parentheses here\nhave to be correct.  In general, all the parentheses have to be correct,\nexcept for counting the parentheses at the end of a definition.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.2)</B>  Complete the following definition\nfor the predicate function </FONT><FONT FACE=\"Courier New\">valid-flight?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes an expression and checks whether it appears to be a valid flight.\n <A NAME=\"_14_8026\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define valid-flight?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160; &#160; (lambda (X)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and              \n                ; and, like +, can take more than 2 arguments</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\nX)           ; is it a flight structure at all?  <A NAME=\"_14_8219\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">flight?<A NAME=\"_14_8232\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (airport-code-valid?\n(flight-origin X))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (time-valid?\n(________________ X)) ; is the departure time valid?<A NAME=\"_14_8351\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">flight-departure<A NAME=\"_14_8373\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (airport-code-valid?\n(flight-destination X))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (time-valid?\n(________________ X)) ; is the arrival time valid?    <A NAME=\"_14_8499\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\nflight-arrival<A NAME=\"_14_8520\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (list-of-strings?\n(flight-passengers X))))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.3)</B>  Assume that you have already\ndefined the variable </FONT><FONT FACE=\"Courier New\">airport-code-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich is a list of all the valid three-letter airport abbreviations (e.g.,\nLAX, SFO, SNA).  Write a definition for the predicate function </FONT><FONT FACE=\"Courier New\">airport-code-valid?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a symbol (an atom) and returns true if the symbol is contained\nin </FONT><FONT FACE=\"Courier New\">airport-code-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You can do this without recursion if you use a function we defined\nin class and in the book.)<A NAME=\"_14_9039\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define airport-code-valid?\n<BR />\n&#160;&#160; (lambda (c)\n<BR />\n&#160;&#160;  &#160; (member? c airport-code-list)))\n<BR />\n; Okay if the order of arguments to member? is switched.  Don&#39;t deduct\nbut make a note if they use a cond to explicitly return #t or #f.  It&#39;s\nalso okay if they write it out recursively and don&#39;t use member?</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.4)</B>  The predefined predicate </FONT><FONT FACE=\"Courier New\">string?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\ntakes a single argument and returns true (</FONT><FONT FACE=\"Courier New\">#t</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\nif and only if the argument is a string.  Write a definition for the predicate\n</FONT><FONT FACE=\"Courier New\">list-of-strings?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a list and returns true if and only if every element of the\nlist is a string (or if the list is empty).<A NAME=\"_14_9655\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define list-of-strings?\n<BR />\n&#160;&#160; (lambda (L)\n<BR />\n&#160;&#160;  &#160; (cond\n<BR />\n&#160;&#160;  &#160;    ((null? L) #t)\n<BR />\n&#160;&#160;  &#160;    ((string? (first L)) (list-of-strings? (rest L)))\n<BR />\n&#160;&#160;  &#160;    (else #f))))\n<BR />\nThis can also be done in just two cond clauses, with the second using AND.</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.5)</B>  Define the predicate </FONT><FONT FACE=\"Courier New\">flight-goes-to?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two arguments, a flight structure and a symbol (representing\nan airport code), and returns true if the flight&#39;s destination matches\nthat symbol.<A NAME=\"_14_10095\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define flight-goes-to?\n<BR />\n&#160;&#160; (lambda (F d)\n<BR />\n&#160;&#160;  &#160; (equal? (flight-destination F) d)))\n<BR />\n; Okay to use eq? or symbol=? instead of equal?</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.6)  </B>Anteater Airlines stores all\nof its scheduled flights in a list of flight structures--the same flight\nstructure you defined in the previous problem. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write a definition for the function </FONT><FONT FACE=\"Courier New\">first-flight-to</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a symbol (representing an airport code) and\nreturns the first flight on the list whose destination matches that symbol\n(or the null list if there&#39;s no match).  Use </FONT><FONT FACE=\"Courier New\">flight-goes-to?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nas described above, whether or not your definition was correct.<A NAME=\"_14_10736\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define first-flight-to\n<BR />\n&#160; (lambda (L d)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) &#39;())\n<BR />\n&#160;&#160;  &#160; ((flight-goes-to? (first L) d) (first L))\n<BR />\n&#160;&#160;  &#160; (else (first-flight-to (rest L) d))))</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.7)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">keep-flights-to</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a symbol (representing an airport code) and\nreturns a list of flights containing only those flights in the original\nlist whose destination matches that symbol.<A NAME=\"_14_11160\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define keep-flights-to\n<BR />\n&#160; (lambda (L d)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) &#39;())\n<BR />\n&#160;&#160;  &#160; ((flight-goes-to? (first L) d) (cons (first L) (keep-flights-to\n(rest L) d)))\n<BR />\n&#160;&#160;  &#160; (else (keep-flights-to (rest L) d))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.8)</B>  To enhance security, an anonymous\nair marshal will be assigned to every Anteater Airlines flight.  Write a\ndefinition of </FONT><FONT FACE=\"Courier New\">add-marshals</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a code name and adds that code name at the\nbeginning of the passenger list of each flight.  (Hint:  First write a function\nto take a single flight and add the name; then call that function from your\ndefinition of </FONT><FONT FACE=\"Courier New\">add-marshals</FONT><FONT FACE=\"AGaramond\" SIZE=4>.)<A NAME=\"_14_11777\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define add-marshals\n<BR />\n&#160; (lambda (L name)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) &#39;())\n<BR />\n&#160;&#160;  &#160; (else (cons (enhance (first L) name) (add-marshals\n(rest L) name)))))\n<BR />\n(define enhance \n<BR />\n&#160; (lambda (F codename)\n<BR />\n&#160;&#160; (make-flight (flight-origin F) (flight-departure F) (flight-destination\nF) (flight-arrival F)\n<BR />\n&#160;&#160;  &#160; (cons codename (flight-passengers F)))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.9)</B>  Write a definition for </FONT><FONT FACE=\"Courier New\">complete-passengers-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and returns a list of strings containing all the\npassengers from all the flights on the list, with no duplications.  (You\nmay assume that all the passengers on a single flight are unique.)<A NAME=\"_14_12390\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define complete-passengers-list\n<BR />\n&#160; (lambda (L)\n<BR />\n&#160;&#160; (cond \n<BR />\n&#160;&#160;  &#160; ((null? L) &#39;())\n<BR />\n&#160;&#160;  &#160; (else (add-unique (flight-passengers (first L)) (complete-passengers-list\n(rest L))))))\n<BR />\n(define add-unique \n<BR />\n&#160; (lambda (one-flights-list master-passengers-list)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? one-flights-list) master-passengers-list)\n<BR />\n&#160;&#160;  &#160; ((member? (first one-flights-list) master-passengers-list)\n<BR />\n&#160;&#160;  &#160;  &#160; (add-unique (rest one-flights-list) master-passengers-list))\n<BR />\n&#160;&#160;  &#160; (else (cons (first one-flights-list) (add-unique (rest\none-flights-list) master-passengers-list)))))</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.10)</B>  (5 points)  Write the function\n</FONT><FONT FACE=\"Courier New\">average-passengers</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes a flight list and returns the average number of passengers on\nthe flights on the flight list. <A NAME=\"_14_13100\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define average-passengers\n<BR />\n&#160; (lambda (L)\n<BR />\n&#160;&#160; (/ (total-passengers L) (length L))))\n<BR />\n(define total-passengers\n<BR />\n&#160; (lambda (L)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) 0)\n<BR />\n&#160;&#160;  &#160; (else (+ (length (flight-passengers (first L))) (total-passengers\n(rest L)))))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.11)</B>  Rewrite average-passengers\nto make it tail-recursive.  (If your answer for part <B>(a)</B> is already\ntail-recursive, just write &quot;I did this already,&quot; and if you did\nit correctly, you&#39;ll get full credit.)<A NAME=\"_14_13552\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define average-passengers\n<BR />\n&#160; (lambda (L)\n<BR />\n&#160;&#160; (/ (total-passengers L 0) (length L))))\n<BR />\n(define total-passengers\n<BR />\n&#160; (lambda (L acc)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) acc)\n<BR />\n&#160;&#160;  &#160; (else (total-passengers\n<BR />\n&#160;&#160;  &#160;              (rest L)\n<BR />\n&#160;&#160;  &#160;              (+ acc (length (flight-passengers (first\nL)))))))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.12)  </B>Anteater Airlines plans to\nmerge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and\nincredibly), both airlines store their flights in a list of flight structures\nas described above.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">merge-flight-lists</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two flight lists and returns a flight list containing all the\nflights from both arguments, except that when a flight from the first list\nmatches a flight from the second list (i.e., they have the same origin,\ndeparture time, destination, and arrival time), the merged list contains\njust one flight with the two matching flights&#39; passenger lists combined.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You may assume that you have already defined\n</FONT><FONT FACE=\"Courier New\">flights-match?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two flight structures and returns true if they match as described\nabove, and </FONT><FONT FACE=\"Courier New\">merge-lists</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two lists and returns a list that contains all the elements\nof both arguments.  You may also assume that the names on any single passenger\nlist are unique and that within each of the original flight lists, no flights\nmatch.  (Hint:  Be careful and consistent about what types of data come\ninto and go out of each function.)<A NAME=\"_14_14970\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define merge-flight-lists\n<BR />\n&#160; (lambda (F G)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? F) G)\n<BR />\n&#160;&#160;  &#160; (else (merge-flight-lists (rest F) (merge-a-flight\n(first F) G))))))\n<BR />\n(define merge-a-flight\n<BR />\n&#160; (lambda (f L)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((null? L) (list f))\n<BR />\n&#160;&#160;  &#160; ((flights-match? f (first L)) (cons (merge-flights\nf (first L)) (rest L))\n<BR />\n&#160;&#160;  &#160; (else (cons (first L) (merge-a-flight (f (rest L)))))))\n<BR />\n(define merge-flights\n<BR />\n&#160; (lambda (f g)\n<BR />\n&#160;&#160; (make-flight (flight-origin f) (flight-departure f) (flight-destination\nf) (flight-arrival f)\n<BR />\n&#160;&#160;  &#160;  (merge-lists (flight-passengers f) (flight-passengers\ng)))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f)  </B>Evaluate each of the following\nexpressions.  That is, what does the Scheme interpreter (DrScheme in our\ncase) display when each of these expressions is executed? </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.1)</B> </FONT><FONT FACE=\"Courier New\">(*\n(- 15 4) (/ 40 4))<A NAME=\"_14_15728\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">110 (1 point)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.2)</B> </FONT><FONT FACE=\"Courier New\">(&gt;\n(/ 55 5) 12)<A NAME=\"_14_15784\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">#f or false (1 point)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.3)</B> </FONT><FONT FACE=\"Courier New\">(+\n100\n<BR />\n&#160;&#160;  &#160;  (cond\n<BR />\n&#160;&#160;  &#160;    ((&gt;= 5 (/ 10 2)) 37)\n<BR />\n&#160;&#160;  &#160;    (else 6)))<A NAME=\"_14_15892\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">137 (2 points)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(g.1)</B>  True or false:  The features\nand capabilities of Scheme make it the best choice for the great majority\nof programming tasks.  <A NAME=\"_14_16057\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">False</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(g.2)</B>  True or false:  A programmer\nwith a knowledge of Java can be sure that his or her knowledge will be enough\nto sustain a productive and innovative 40-year career.  <A NAME=\"_14_16247\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">False</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(h)  </B>Students in the course Applied\nEpistemology 101 are graded on two items, a midterm and a final exam, each\nof which has 100 points possible.  The midterm&#39;s weight 40% of the course\ngrade; the final is worth 60%.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">AE101-score</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes two arguments--a student&#39;s midterm score and final exam score--and\nreturns that student&#39;s overall weighted score in the class (in the range\n0 to 100).  Write two constant definitions for the weights, a contract,\na brief purpose statement, the Scheme function definition, and two tests\nin the form of boolean expressions that should return true if the function\nworks correctly.<A NAME=\"_14_16911\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define MT-WEIGHT\n0.40) ; Could also be 40, if the arithmetic later is right\n<BR />\n(define FINAL-WEIGHT 0.60) ; Could be 60.  [ 1 point for defining both correctly]\n<BR />\n;; AE101-score: number number -&gt; number [1 point; part credit if &quot;midterm&quot;,\ne.g., for &quot;number&quot;]\n<BR />\n;; Compute weighted score given midterm and final scores (all 0-100) [-1/2\nif missing or blatantly untrue]\n<BR />\n(define AE101-score\n<BR />\n&#160; (lambda (midterm final)\n<BR />\n&#160;  (+ (* midterm MT-WEIGHT) (* final FINAL-WEIGHT))))\n<BR />\n;; Tests\n<BR />\n(= 0 (AE101-score 0 0))\n<BR />\n(= 100 (AE101-score 100 100))  [1 point for both correct tests, returning\na boolean]</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING THE CODE:\n<BR />\n&#160; 1 point for correct form of define:  (define AE101-score (lambda\n(ANYTHING..., or (def (A-s ANYTHING) ...)\n<BR />\n&#160; 1 point for correct parameter list---two names in parentheses (with\nAE101-score if using Indiana style)\n<BR />\n&#160; 1 point for any attempt to add something involving both arguments\n<BR />\n&#160; 1 point for completely correct arithmetic\n<BR />\n&#160; 1 point for everything else correct.  Parentheses must be right except\nfor counting all the trailing ones.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i)  </B>Complete the definition of the\nfunction </FONT><FONT FACE=\"Courier New\">between?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nbelow.<A NAME=\"_14_18033\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; between?:  number number number -&gt;\nboolean\n<BR />\n;; Return true if the first argument&#39;s value is between the second and\nthe third, inclusive\n<BR />\n;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between\n1 2 3) is false</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define between?   <A NAME=\"_14_18290\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n                   ;; 1 point for right form:  compare value to low and\ncompare value to high<A NAME=\"_14_18390\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (value low high) <A NAME=\"_14_18423\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">;;\n1 pt for correctness:  going right way on =, not switching low and high<A NAME=\"_14_18503\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and<A NAME=\"_14_18516\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n(&gt;= value low) (&lt;= value high))))</FONT><FONT FACE=\"Courier\" SIZE=2><TT>\n <A NAME=\"_14_18564\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">;;\nParens around comparisons must be right (or -1/2);  &#160;  &#160;  &#160;\n &#160;                         ;; trailing parens don&#39;t matter here.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(j)  </B>Complete the definition of </FONT><FONT FACE=\"Courier New\">item-on-list?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nbelow.  <A NAME=\"_14_18762\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; item-on-list?:  expression list -&gt;\nboolean\n<BR />\n;; Return true if the expression occurs on the list</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define item-on-list?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (item L)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (cond<A NAME=\"_14_18915\"></A></TT></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160;  &#160;\n   ((empty? L) false)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160;  &#160;\n   ((equal? item (first L)) true)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160;  &#160;\n   (else (item-on-list? item (rest L))))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Scoring:  2 points\nfor empty case---1 for test, 1 for returning false\n<BR />\n&#160;&#160;  &#160;    2 points for matching case---1 for test, 1 for returning\ntrue\n<BR />\n&#160;&#160;  &#160;    2 points for recursive case---1 for attempt at recursive\ncall, 1 for getting it all correct.</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">It&#39;s okay if they\nuse some other comparison besides equal?, but note it.  It&#39;s okay if\nthey split this into nested conds as they do in the book.  Minus 3 if they\ncross out the cond and just call member? (correctly). [If anybody uses member?\nwithout deleting the cond--e.g. (cond (true (member? item L))(else &#39;whatever))--I\nwant to hear about it.  They should get credit.] ** You may deduct points\nfor nontrivial syntax problems, but beware of &quot;double jeopardy.&quot;\n** Some answers may be right but not follow the pattern of the rubric. \nScore as appropriate and consult with me as necessary.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k)  </B>A </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a structure </FONT><FONT FACE=\"Courier New\">(make-date month day year)</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhere </FONT><FONT FACE=\"Courier New\">month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a symbol (</FONT><FONT FACE=\"Courier New\">&#39;Jan</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;Feb</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand so on), </FONT><FONT FACE=\"Courier New\">day</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a number from 1 to 31, and </FONT><FONT FACE=\"Courier New\">year</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a number from 1000 to 3000.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.1)</B>  Define the structure </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the field names given above.<A NAME=\"_14_20162\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define-struct date\n(month day year))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">The parentheses here\nhave to be correct.  In general, all the parentheses have to be correct,\nexcept for counting the parentheses at the end of a definition.  If they\nget any field names wrong, deduct 1/2 point.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.2)</B> Define a </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nobject called </FONT><FONT FACE=\"Courier New\">TODAY</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the appropriate values.<A NAME=\"_14_20507\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define TODAY (make-date\n&#39;Oct 19 2004))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">If the day is off\nby 1 or 2, I don&#39;t think I care.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.3)</B>  Complete the following definition\nfor the predicate function </FONT><FONT FACE=\"Courier New\">valid-date?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes an expression and checks whether it appears to be a valid </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n Use the functions you defined in the previous problems where necessary.<A NAME=\"_14_20854\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; valid-date<A NAME=\"_14_20871\"></A>?:\n anything -&gt; boolean</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define MONTHLIST (list &#39;Jan &#39;Feb\n&#39;Mar &#39;Apr &#39;May &#39;Jun &#39;Jul &#39;Aug &#39;Sep &#39;Oct\n&#39;Nov &#39;Dec))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define valid-date<A NAME=\"_14_21001\"></A>?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (D) <A NAME=\"_14_21017\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(line\n1) 1 point for date?; (line 2) 1 point for date-month, 1 point for MONTHLIST;<A NAME=\"_14_21106\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and     <A NAME=\"_14_21124\"></A></TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(line\n3/4) 1 point for both between?s; (line 4) 1 point for 1000 &amp; 3000<A NAME=\"_14_21201\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\nD)                             ; is it a date<A NAME=\"_14_21275\"></A> structure\nat all?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (item-on-list?\n(________________ D)________________)        ; is the month valid?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\n(date<A NAME=\"_14_21407\"></A>-day D) 1 31)</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n                                                    <A NAME=\"_14_21480\"></A></FONT><FONT FACE=\"Courier\" SIZE=2><TT>;\nis the day valid?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\n(date<A NAME=\"_14_21533\"></A>-year D) ________  ________))))      ; is the\nyear valid?</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.4)</B>  Define the predicate function\n</FONT><FONT FACE=\"Courier New\">all-valid-dates?</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_21661\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; all-valid-date<A NAME=\"_14_21682\"></A>s?:\n list -&gt; boolean\n<BR />\n;; Return true if all the items on the list are valid date<A NAME=\"_14_21766\"></A>s.\n If the list is empty, return true.<A NAME=\"_14_21807\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nall-valid-dates?\n<BR />\n&#160; (lambda (L)\n<BR />\n&#160;&#160; (cond\n<BR />\n&#160;&#160;  &#160; ((empty? L) true)\n<BR />\n&#160;&#160;  &#160; ((valid-date? (first L)) (all-valid-dates? (rest L)))\n<BR />\n&#160;&#160;  &#160; (else false))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">1 point for correct\ndefine/lambda/cond</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">5 points for the rest.\nAny logically equivalent version (e.g., one with and) is okay.  You might\ngive a point each for the empty and non-matching cases and three points\nfor the recursive case.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(l)  </B>Suppose you wish to write a spelling\nchecker that takes a string of text as input and returns a list of the misspelled\nwords in that string.  Because the input may contain white space and punctuation,\nwe will need to extract the words from the string, where a word is a string\nof characters that are separated from the next word by white space or punctuation.\n (The precise characters that count as white space or punctuation we won&#39;t\nworry about here.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Define the function </FONT><FONT FACE=\"Courier New\">spell-check</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a string and returns a list of the words in the string that\nare misspelled (more precisely, words that don&#39;t occur in the dictionary\nof all correctly spelled words).  You should use each of the following in\nyour definition:\n<BR />\n* </FONT><FONT FACE=\"Courier New\">first-word</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns the first word in that string\n<BR />\n* </FONT><FONT FACE=\"Courier New\">rest-of-words</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns a copy of that string with the\nfirst word removed\n<BR />\n* </FONT><FONT FACE=\"Courier New\">string-empty?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns true if it&#39;s empty or if\nit contains only white space and punctuation\n<BR />\n* </FONT><FONT FACE=\"Courier New\">DICTIONARY</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na (long) list of correctly spelled words, where each word is a string.<A NAME=\"_14_23366\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; spell-check: string -&gt; list-of-strings\n<BR />\n;; Return a list of the words in the input string that aren&#39;t in the\ndictionary.<A NAME=\"_14_23494\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nspell-check &#160; 1 point -- Correct define, lambda, and argument list\n<BR />\n&#160;&#160; (lambda (s) &#160; 1 point -- Dividing the problem into 3 cases\nthat relate somehow to the arg\n<BR />\n&#160;&#160;  &#160; (cond &#160; 1 point -- Correctly identifying the empty/base\ncase [continued below]\n<BR />\n&#160;&#160;  &#160;   ((string-empty? s) empty)\n<BR />\n&#160;&#160;  &#160;   ((item-on-list? (first-word s) DICTIONARY) (spell-check\n(rest-of-words s)))\n<BR />\n&#160;&#160;  &#160;   (else \n<BR />\n(cons (first-word s) (spell-check (rest-of-words s)))))))\n<BR />\n1 point -- Correctly returning empty in the empty/base case\n<BR />\n1 point -- Attempt to use both first-word and rest-of-words to traverse\nlist\n<BR />\n1 point -- Correct use of first-word and rest-of-words in at least one case\nto traverse list\n<BR />\n1 point -- Traversal of list using first-word and rest-of-words completely\ncorrect in both cases\n<BR />\n1 point -- Attempt to find first-word in DICTIONARY\n<BR />\n1 point -- Correct location of first-word in DICTIONARY (item-on-list? or\nmember?; -1/2 for rewriting it)\n<BR />\n1 point -- Correct case where first-word is in the dictionary (no word added\nto return list)\n<BR />\n1 point -- Correct case where first-word isn&#39;t in dictionary (consing\nfirst-word onto return list)\n<BR />\n1 point -- Everything else correct</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m)  </B>In this problem you may not use\nthe predefined functions </FONT><FONT FACE=\"Courier New\">member</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nor </FONT><FONT FACE=\"Courier New\">list-ref</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n You may use other functions defined earlier in this exam (and you may lose\npoints if you re-implement here something that was already described above).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.1)</B>  Define the function </FONT><FONT FACE=\"Courier New\">position-on-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_24941\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; position-on-list: any list-of-any -&gt;\nnumber\n<BR />\n;; Return the place on the list where the first input occurs, or zero if\nlist is empty\n<BR />\n;; Examples:  (position-on-list &#39;a &#39;(a b c)) is 1; (position-on-list\n1 empty) is 0;\n<BR />\n;;            (position-on-list 3 &#39;(2 3 4)) is 2<A NAME=\"_14_25219\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nposition-on-list\n<BR />\n&#160; (lambda (item L)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     ((empty? L) 0)\n<BR />\n&#160;     ((equal? item (first L)) 1)\n<BR />\n&#160;     (else (+ 1 (position-on-list item (rest L)))))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING:  1 for empty\ncase,  2 for matching case, 3 for increment/recursive case.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.2)</B>  Define the function </FONT><FONT FACE=\"Courier New\">item-at-position</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_25536\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; item-at-position: number list-of-any\n-&gt; any\n<BR />\n;; From the input list, return the item specified by the input number, or\nempty if out of range\n<BR />\n;; Examples:  (item-at-position 3 &#39;(a b c)) is c; (item-at-position\n7 &#39;(a b)) is empty; \n<BR />\n;;            (item-at-position 0 &#39;(3 4)) is empty<A NAME=\"_14_25828\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nitem-at-position\n<BR />\n&#160; (lambda (n L)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     ((empty? L) empty)\n<BR />\n&#160;     ((&lt;= n 0) empty)\n<BR />\n&#160;     ((= n 1) (first L))\n<BR />\n&#160;     (else (item-at-position (- n 1) (rest L))))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING: 1 for handling\nempty input list; 1 for handling index &lt;= 0 (not checking negative is\nokay);  3 for recognizing the item at the right position and returning it;\n3 for the correct recursive case.  Partial credit as warranted.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.3)</B>  Define </FONT><FONT FACE=\"Courier New\">next-on-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n You may wish to use the predefined function </FONT><FONT FACE=\"Courier New\">length</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich returns the number of items on a list.  [Hint:  Use prior definitions,\nnot recursion.]<A NAME=\"_14_26443\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-on-list: any list-of-any -&gt; any\n<BR />\n;; Return the item on the input list that follows the first input, or empty\nif none\n<BR />\n;; Examples:  (next-on-list &#39;b &#39;(a b c)) is c; (next-on-list &#39;c\n(a b c)) is empty;\n<BR />\n;;            (next-on-list &#39;x &#39;(a b c)) is empty; (next-on-list\n&#39;a empty) is empty<A NAME=\"_14_26740\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nnext-on-list\n<BR />\n&#160; (lambda (item L)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     ((= 0 (position-on-list item L)) empty)\n<BR />\n&#160;     ((= (length L) (position-on-list item L)) empty)\n<BR />\n&#160;     (else (item-at-position (+ 1 (position-on-list item L)) L)))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING:  2 points\nfor correctly recognizing input not on list and returning empty; 2 points\nfor correctly recognizing last item on list and returning empty; 3 points\nfor returning correct next item otherwise.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.4)</B>  Define </FONT><FONT FACE=\"Courier New\">next-on-circular-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_27233\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-on-circular-list: expression list\n-&gt; expression\n<BR />\n;; Like next-on-list, but the item after the last on the list is the first\nitem again\n<BR />\n;; Example:  (next-on-circular-list &#39;c &#39;(a b c)) is a.<A NAME=\"_14_27437\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nnext-on-circular-list\n<BR />\n&#160; (lambda (item L)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     ((= 0 (position-on-list item L)) empty)\n<BR />\n&#160;     ((= (length L) (position-on-list item L)) (first L))\n<BR />\n&#160;     (else (item-at-position (+ 1 (position-on-list item L)) L)))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING:  3 points\nfor correctly handling the circular case; 2 points for everything else right.\n Don&#39;t deduct for the same mistakes as in the previous part, but do\ndeduct if they messed something new up.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.5)</B>  Define the function </FONT><FONT FACE=\"Courier New\">next-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat uses the constant </FONT><FONT FACE=\"Courier New\">MONTHLIST</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n(see Problem <B>(k)</B>) to take in a symbol (</FONT><FONT FACE=\"Courier New\">&#39;Jan</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;Feb</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n...) representing a month and return the symbol for the following month.<A NAME=\"_14_28112\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-month:  symbol -&gt; symbol\n<BR />\n;; Take a month name (&#39;Jan, &#39;Feb, ...) and return the name of the\nfollowing month.<A NAME=\"_14_28231\"></A></TT></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define next-month</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160; (lambda (this-month)\n<BR />\n&#160;   (next-on-circular-list this-month MONTHLIST)))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.6)</B>  Define the function </FONT><FONT FACE=\"Courier New\">advance-a-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes a </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n(see Problem <B>(k)</B>) and returns that date moved one month into the\nfuture.<A NAME=\"_14_28486\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; advance-a-month: date -&gt; date\n<BR />\n;; Advance the input date by one month (on the same day)<A NAME=\"_14_28581\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nadvance-one-month\n<BR />\n&#160; (lambda (d)\n<BR />\n&#160;   (make-date (next-month (date-month d)) (date-day d)\n<BR />\n&#160;&#160;  &#160;  &#160; (cond ((eq? (date-month d) &#39;Dec) (+ 1 (date-year\nd)))\n<BR />\n&#160;&#160;  &#160;  &#160;           (else (date-year d))))))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">SCORING:  2 points\nfor returning a date (call to make-date with three arguments);  2 points\nfor correct call to next-month; 3 points for handling December correctly;\n1 point for everything else correct.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.7)</B>  Suppose you have a list of dates\nrepresenting events on your calendar, but you decide to take a month&#39;s\nskiing vacation in February.  You&#39;ll need to postpone all the events\nscheduled in February, perhaps moving them one month later.  Generalize\nthis to the function </FONT><FONT FACE=\"Courier New\">clear-the-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_29288\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; clear-the-month: symbol list-of-dates\n-&gt; list-of-dates\n<BR />\n;; Return the input list after advancing by one month \n<BR />\n;; every date whose month matches the input symbol.<A NAME=\"_14_29458\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define\nclear-the-month\n<BR />\n&#160; (lambda (m L)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     ((empty? L) empty)\n<BR />\n&#160;     ((eq? (date-month (first L)) m) (cons (advance-one-month (first\nL)) (clear-the-month m (rest L))))\n<BR />\n&#160;     (else (cons (first L) (clear-the-month m (rest L)))))))\n<BR />\nSCORING:  1 point for empty case; 4 points for matching-month case; 1 point\nfor non-matching case.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.8)</B>   Define this function:<A NAME=\"_14_29846\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; days-to-start-of-month: symbol\n-&gt; number\n<BR />\n;; Return the number of days from January 1 to the start of the named month\nin non-leap years\n<BR />\n;; Examples:  (days-to-start-of-month &#39;Jan) is 0; (days-to-start-of-month\n&#39;Feb) is 31\n<BR />\n(define DAYSINMONTH  &#39;(31 28 31 30 31 30 31 31 30 31 30 31)) ; this\nwill be useful<A NAME=\"_14_30159\"></A>\n<BR />\n</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">No key\ncurrently available.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.9)</B></FONT><FONT FACE=\"Goudy Old Style\">\n </FONT><FONT FACE=\"AGaramond\" SIZE=4>Define this function:<A NAME=\"_14_30242\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; days-from-jan1: date -&gt; number\n<BR />\n;; Return number of days from January 1 of the same year to the specified\ndate, inclusive\n<BR />\n;; Examples: (days-from-jan1 (make-date &#39;Jan 3 2005)) = 3; (days-from-jan1\n(make-date &#39;Feb 1 2005)) = 32<A NAME=\"_14_30477\"></A></TT></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">No key currently available.</FONT></P>\n<BR /><BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n)</B></FONT><FONT FACE=\"Goudy Old Style\"><B>\n</B></FONT><FONT FACE=\"AGaramond\" SIZE=4>  For each of the two sets of data\nshown below, draw the binary search tree that results from inserting the\nitems in the order shown.  Distinguish left branches clearly from right\nbranches.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.1a)</B> </FONT><FONT FACE=\"Courier New\">\n(13 19 22 7 17 10 2) &#160; </FONT><FONT FACE=\"AGaramond\" SIZE=4><B>(n.1b)</B>\n </FONT><FONT FACE=\"Courier New\">(Scheme Python Java Fortran C Basic)<A NAME=\"_14_30822\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;           \n Balanced (2 points)                        &#160;              Linear to\nthe left (2 points)</FONT></P>\n<BR /><BR /><BR /><BR /><BR /><BR /><BR /><BR /><BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.2) </B> For each of the trees above,\nif you traverse the tree in order, printing each node, what is the result?</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.2a) </B>[result of <B>(n.1a)</B>]  <A NAME=\"_14_31085\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">2\n7 10 13 17 19 22 &#160; </FONT><FONT FACE=\"AGaramond\" SIZE=4><B>(n.2b)</B>\n[result of <B>(n.1b)</B>]<A NAME=\"_14_31145\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\nBasic C Fortran Java Python Scheme</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o)  </B>Evaluate each of the following\nScheme expressions:</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o.1)<A NAME=\"_14_31277\"></A></B></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(local  &#160; ((define make-checker </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; (lambda\n(threshold)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;     &#160;  &#160;\n &#160; (lambda (n) (&lt; n threshold))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  (define a1\n(filter (make-checker 6) &#39;(3 1 4 1 5 9 2 6)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  (define a2\n(filter (make-checker 4) &#39;(3 1 4 1 5 9 2 6))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (list a1 a2))<A NAME=\"_14_31511\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">((3 1 4 1 5 2) (3\n1 1 2)) -- Correct numbers and order, but list structure wrong: -1. </FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Branching the wrong\nway on equality: another -1</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o.2)</B> <A NAME=\"_14_31666\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(local  &#160; ((define make-checker</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160; (lambda\n(comparison-op threshold)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;     &#160;  &#160;\n &#160; (lambda (n) (comparison-op n threshold))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  (define b1\n(filter (make-checker = 1) &#39;(3 1 4 1 5 9 2 6)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  (define b2\n(filter (make-checker &gt;= 3) &#39;(3 1 4 1 5 9 2 6))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (list b1 b2))<A NAME=\"_14_31931\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">((1 1) (3 4 5 9 6))\n-- Don&#39;t deduct again for problems mentioned above.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p)</B>  This problem involves the <A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.scm\">restaurant collection program</A>.\n For each part below, indicate your answer by making any additions, changes,\nor deletions to the table of data shown in that part.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.1)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95<A NAME=\"_14_32299\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria &#160; Pizza\n&#160; 343-3434 &#160; Goat Cheese Pizza &#160; 12.00\n<BR />\nMitsuki &#160; Japanese &#160; 232-5353 &#160; Edamame &#160; 4.50\n<BR />\nTommy Tang&#39;s &#160; Thai &#160; 454-4545 &#160; Paht Woon Sen &#160;\n8.75<A NAME=\"_14_32462\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Thai Touch &#160; Thai &#160; 242-2424\n&#160; Larb Guy &#160; 9.95<A NAME=\"_14_32522\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Kitayama &#160; Japanese &#160; 335-3535\n&#160; Okonomiyaki &#160; 8.50</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result returned by the following\ncode?  (Show your results by making changes to the table above--change values,\ncross lines out, add new lines, as appropriate.)<A NAME=\"_14_32766\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(define Thai? &#160;  &#160;  &#160;\n &#160;  &#160; \n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (equal? (rrant-<A NAME=\"_14_-32713\"></A>cuisine R)\n&#39;Thai)))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C Thai?) </TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.2)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95\n<BR />\nJacopo&#39;s Pizzeria &#160; Pizza &#160; 343-3434 &#160; Goat Cheese Pizza\n&#160; 12.00\n<BR />\nMitsuki &#160; Japanese &#160; 232-5353 &#160; Edamame &#160; 4.50<A NAME=\"_14_-32441\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s &#160; Thai &#160;\n454-4545 &#160; Paht Woon Sen &#160; 8.75\n<BR />\nThai Touch &#160; Thai &#160; 242-2424 &#160; Larb Guy &#160; 9.95\n<BR />\nKitayama &#160; Japanese &#160; 335-3535 &#160; Okonomiyaki &#160; 8.50<A NAME=\"_14_-32291\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?\n<A NAME=\"_14_-32214\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C (lambda (R) (equal?\n(rrant-<A NAME=\"_14_-32162\"></A>cuisine R) &#39;Japanese)))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.3)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95<A NAME=\"_14_-32016\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria &#160; Pizza\n&#160; 343-3434 &#160; Goat Cheese Pizza &#160; 12.00\n<BR />\nMitsuki &#160; Japanese &#160; 232-5353 &#160; Edamame &#160; 4.50<A NAME=\"_14_-31899\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s &#160; Thai &#160;\n454-4545 &#160; Paht Woon Sen &#160; 8.75<A NAME=\"_14_-31832\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Thai Touch &#160; Thai &#160; 242-2424\n&#160; Larb Guy &#160; 9.95<A NAME=\"_14_-31772\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Kitayama &#160; Japanese &#160; 335-3535\n&#160; Okonomiyaki &#160; 8.50<A NAME=\"_14_-31707\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_-31631\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C \n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (or (Thai? R) (equal? (rrant-<A NAME=\"_14_-31557\"></A>cuisine\nR) &#39;Japanese))))</TT></FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.4)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95<A NAME=\"_14_-31404\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n11.95\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria &#160; Pizza\n&#160; 343-3434 &#160; Goat Cheese Pizza &#160; 12.00\n<BR />\nMitsuki &#160; Japanese &#160; 232-5353 &#160; Edamame &#160; 4.50\n<BR />\nTommy Tang&#39;s &#160; Thai &#160; 454-4545 &#160; Paht Woon Sen &#160;\n8.75<A NAME=\"_14_-31242\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n9.75\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Thai Touch &#160; Thai &#160; 242-2424\n&#160; Larb Guy &#160; 9.95<A NAME=\"_14_-31184\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n10.95\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Kitayama &#160; Japanese &#160; 335-3535\n&#160; Okonomiyaki &#160; 8.50</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_-31065\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(define raise-price\n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (make-rrant<A NAME=\"_14_-31011\"></A> (rrant-<A NAME=\"_14_-30997\"></A>name\nR) (rrant-cuisine<A NAME=\"_14_-30969\"></A> R) (rrant-<A NAME=\"_14_-30952\"></A>phone\nR) &#160;  &#160;  &#160;  &#160;  &#160;    (rrant-<A NAME=\"_14_-30923\"></A>dish\nR) (+ 1.00 (rrant-<A NAME=\"_14_-30894\"></A>price R)))))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-change C Thai? raise-price)</TT></FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.5)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95<A NAME=\"_14_-30712\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove (was 11.95)\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria &#160; Pizza\n&#160; 343-3434 &#160; Goat Cheese Pizza &#160; 12.00<A NAME=\"_14_-30622\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--\nremove \n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Mitsuki &#160; Japanese &#160; 232-5353\n&#160; Edamame &#160; 4.50\n<BR />\nTommy Tang&#39;s &#160; Thai &#160; 454-4545 &#160; Paht Woon Sen &#160;\n8.75<A NAME=\"_14_-30515\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n9.75\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Thai Touch &#160; Thai &#160; 242-2424\n&#160; Larb Guy &#160; 9.95<A NAME=\"_14_-30457\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--remove\n(was 10.95)\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Kitayama &#160; Japanese &#160; 335-3535\n&#160; Okonomiyaki &#160; 8.50</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_-30326\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove (collection-change\nC Thai? raise-price) ; raise-price is defined above\n<BR />\n&#160;&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  (lambda (R) (&gt;\n(rrant-<A NAME=\"_14_-30199\"></A>price R) 10.00)))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.6)</B> Suppose the collection C contains\nthe information shown below.\n<BR />\nThai Dishes &#160; Thai &#160; 434-3434 &#160; Mee Krob &#160; 10.95<A NAME=\"_14_-30055\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n8.95\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria &#160; Pizza\n&#160; 343-3434 &#160; Goat Cheese Pizza &#160; 12.00<A NAME=\"_14_-29979\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;10.00\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Mitsuki &#160; Japanese &#160; 232-5353\n&#160; Edamame &#160; 4.50<A NAME=\"_14_-29921\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--remove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s &#160; Thai &#160;\n454-4545 &#160; Paht Woon Sen &#160; 8.75<A NAME=\"_14_-29854\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&lt;--remove\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Thai Touch &#160; Thai &#160; 242-2424\n&#160; Larb Guy &#160; 9.95<A NAME=\"_14_-29794\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">--&gt;\n7.95\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>Kitayama &#160; Japanese &#160; 335-3535\n&#160; Okonomiyaki &#160; 9.50</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_-29676\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-change </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (collection-remove C (lambda\n(R) (&lt; (rrant<A NAME=\"_14_-29609\"></A>-price R) 9.00))) &#160; \n<BR />\n&#160;&#160; (lambda (R) (or (equal? (rrant<A NAME=\"_14_-29557\"></A>-cuisine\nR) &#39;Pizza) &#160; (equal? (rrant-cuisine R) &#39;Thai))) &#160; (lambda\n(R) (make-rrant<A NAME=\"_14_-29477\"></A> (rrant-name R) (rrant-cuisine R)\n(rrant-phone R) &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; \n&#160;  &#160;  &#160;  &#160; (rrant<A NAME=\"_14_-29409\"></A>-dish R) (-\n(rrant-price R) 2.00))))</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q)  </B>Below are the definitions of five\nfunctions.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q.1)</B>  Write &quot;R&quot; next to\neach of the five routines below that is recursive.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q.2)</B>  Write &quot;T&quot; next to\neach of the five routines that is tail-recursive.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Some routines may be both &quot;R&quot; and\n&quot;T&quot;; some may be neither.  Consider each function independently\nof the others (i.e., pay no attention to the other functions a given function\ncalls).<A NAME=\"_14_-28970\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define print-stars-A   <A NAME=\"_14_-28934\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">R<A NAME=\"_14_-28927\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (N)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     [(zero? N) (newline)]\n<BR />\n&#160;     [else (begin        &#160;  &#160;        ; do these two things,\nin the order shown:\n<BR />\n&#160;&#160;  &#160;  &#160; (print-stars-A (- N 1))     ; print n-1 stars\n<BR />\n&#160;        (display &quot;*&quot;))])))          ; print out a star</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define print-stars-B   <A NAME=\"_14_-28660\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">RT<A NAME=\"_14_-28652\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (N)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     [(zero? N) (newline)]\n<BR />\n&#160;     [else (begin  &#160;  &#160;  &#160;            ; do these two\nthings, in the order shown:\n<BR />\n&#160;&#160;  &#160;  &#160; (display &quot;*&quot;) &#160;  &#160;  &#160;\n        ; print out a star \n<BR />\n&#160;        (print-stars-B (- N 1)))]))) ; print n-1 stars</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-A   <A NAME=\"_14_-28387\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">R<A NAME=\"_14_-28380\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (L X)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     [(null? L) empty]\n<BR />\n&#160;     [(equal? X (first L)) (cons (first L) (keep-matches-A (rest L)\nX))]\n<BR />\n&#160;     [else (keep-matches-A (rest L) X)])))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-B   <A NAME=\"_14_-28178\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">neither<A NAME=\"_14_-28165\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (L X)\n<BR />\n&#160;   (keep-matches-help L X '()))) &#160; </FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-B-help   <A NAME=\"_14_-28075\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">RT<A NAME=\"_14_-28067\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>&#160; (lambda (L X list-so-far)\n<BR />\n&#160;   (cond\n<BR />\n&#160;     [(null? L) list-so-far]\n<BR />\n&#160;     [(equal? X (first L)) (keep-matches-B-help (rest L) \n<BR />\n&#160;&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;                    X \n<BR />\n&#160;&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;                    (cons (first L) list-so-far))]\n<BR />\n&#160;     [else (keep-matches-B-help (rest L) X list-so-far)]))) </FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(r) </B>Suppose we have a list called RL\nof restaurants with menus, according to the usual definitions:<A NAME=\"_14_-27669\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define-struct rrant (name cuisine phone\nmenu))\n<BR />\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>where menu is a list of dishes<A NAME=\"_14_-27582\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define-struct dish (name price))</TT></FONT><FONT FACE=\"Goudy Old Style\">.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Define the following function:<A NAME=\"_14_-27502\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; name-and-phone-serving-dish: (listof\nrrant) string -&gt; (listof name-phone-list)\n<BR />\n;; Returns a list of the names and phone numbers of all the restaurants\nthat \n<BR />\n;; serve the dish named in the second input.  Each name/phone-number pair\n<BR />\n;; should be in its own list; for example \n<BR />\n;; ((&quot;Cobras and Matadors&quot; &quot;343-3434&quot;) (&quot;La Cote\nBasque&quot; &quot;344-3334&quot;)).<A NAME=\"_14_-27148\"></A></TT></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define name-and-phone-serving-dish\n<BR />\n&#160; (lambda (RL dishname)\n<BR />\n&#160;&#160; (map make-name-phone\n<BR />\n&#160;&#160;  &#160; (filter (lambda (R) (rrant-serves-dish? R dishname))\nRL))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Probably the best\nway to handle this is to define functions like these individually first:\n<BR />\n;; menu-includes?: menu string -&gt; boolean [This appears above]\n<BR />\n;; Return true if string is the name of a dish on menu</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (menu-includes?\nM s)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160; (&gt; (length\n(filter (lambda (D) (string=? (dish-name D) s)) M)) 0))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">;; rrant-serves-dish?:\nrrant string -&gt;boolean\n<BR />\n;; Return true if string is the name of any menu item in rrant</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (rrant-serves-dish?\nR s)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160; (menu-includes?\n(rrant-menu R) s))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">;; make-name-phone:\nrrant -&gt; list\n<BR />\n;; Returns list containing rrant&#39;s name and phone</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (make-name-phone\nR)</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;&#160; (list\n(rrant-name R) (rrant-phone R)))</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Determining whether\na given restaurant serves the specified dish:  3 points (2 points for examining\nthe menu and 1 point for extracting the menu from the restaurant).  In my\nsolution, the 2 points are captured by menu-includes?; if they rewrote the\n same thing they wrote for (b.2), rather than just calling it, they should\nlose a point; if they did the task some different way, that's okay.  The\n1 point is captured by rrant-serves-dish?, but again, it's okay if they\nachieve this some other way.</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Selecting restaurants\nfrom the list that pass some test [ideally, the test is whether the restaurant\nserves the dish in question, but for this point, credit if they select some\nrestaurants from the list using any criterion]:  1 point</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Specifying the correct\nrestaurant-choice criterion [i.e., correctly applying the equivalent of\n rrant-serves-dish? to the list]:  1 point</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Returning a list of\nname/phone pairs [two-element lists---not technically pairs]:  2 points.\n In my solution, this is captured in make-name-phone, but they could get\nthe same result some other way.</FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">Everything else correct\n(including not using explicit recursion):  2 points [So this says if they\ncoded it right using recursion, they can get 7/9]</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s)  </B>Below are definitions of </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_-25060\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define (map f L) &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (define (filter p? L)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160; (cond &#160;    &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (cond</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;   ((empty? L) empty) &#160;     \n&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ((empty? L) empty)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;   (else (cons (f (first L)) &#160;\n &#160;  &#160;  &#160;  &#160;  &#160; ((p? (first L)) </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;            (map f (rest\nL)))))) &#160;  &#160;      (cons (first L) (filter p? (rest L))))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160;      &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; (else (filter p? (rest L)))))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s.1)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">process</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat abstracts both </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You may find it useful to think about these two functions:  \n<BR />\n</FONT><FONT FACE=\"Courier New\">(define (always-true x) true)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">(define (no-change x) x)</FONT><FONT FACE=\"AGaramond\" SIZE=4>.)<A NAME=\"_14_-24484\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (process\nf p? L)\n<BR />\n&#160; (cond\n<BR />\n&#160;   ((empty? L) empty)\n<BR />\n&#160;   ((p? (first L)) (cons (f (first L)) (process f p? (rest L))))\n<BR />\n&#160;   (else (process f p? (rest L)))))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s.2)</B>  Write new one-line definitions\nfor </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat call </FONT><FONT FACE=\"Courier New\">process</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_-24215\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (map2\nf L) (process f always-true L))\n<BR />\n(define (filter2 p? L) (process no-change p? L))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(t) </B>A nested list of items (NL) is\neither</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>1.  empty &#160; </FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n        </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>2.  (cons item NL), or</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>3.  (cons NL NL). &#160;  &#160; </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write a definition for the function deep-unique\nas described below.<A NAME=\"_14_-23909\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>; deep-unique:  NL -&gt; list-of-items\n<BR />\n; Return a list of all the items that occur in the input, no matter how\ndeeply nested,\n<BR />\n;    with no duplications.  Order of result doesn&#39;t matter.\n<BR />\n; Example:  (deep-unique &#39;(3 17 (3 Huey) Huey ((17)))) returns (3 17\nHuey)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You may assume that the predicate </FONT><FONT FACE=\"Courier New\">list?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis already defined to return true if its argument is a list and false otherwise.<A NAME=\"_14_-23514\"></A>\n<BR />\n</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">(define (deep-unique\nL) (deep-unique-aux L empty))\n<BR />\n(define (deep-unique-aux L unique-list) \n<BR />\n&#160; (cond</FONT><FONT FACE=\"AGaramond\" SIZE=4> &#160; <A NAME=\"_14_-23402\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">((empty?\nL) unique-list)\n<BR />\n</FONT><FONT FACE=\"AGaramond\" SIZE=4>&#160;<A NAME=\"_14_-23364\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n&#160;  &#160; ((list? (first L)) (deep-unique-aux (rest L) (deep-unique-aux\n(first L) unique-list)))\n<BR />\n&#160;&#160;  &#160; ((member? (first L) unique-list) (deep-unique-aux (rest\nL) unique-list))\n<BR />\n&#160;&#160;  &#160; (else (deep-unique-aux (rest L) (cons (first L) unique-list)))))\n; produces reverse order, fwd or rev OK</FONT><BR />\n</P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, 1995-2004.  Corrections\nto some solutions by Felix Morariu, Fall 2005.</FONT><BR CLEAR=ALL />\n</P>\n<HR />\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu><font face=\"Goudy Old Style\"> </font>kay@uci.edu</A>\n</address>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Wednesday, November 23, 2005 -- 8:40 AM</FONT></P>\n</BODY>\n</HTML>\n", "id": 10441.0}