{"text": "OverviewDownloadPerformanceNewsPublicationsTalksTeamSponsorsContact Performance Benchmark Setup Execution Time Scalability Throughput Physical Flexibility Single Machine Performance Benchmark Setup We ran the benchmark on a 32 node Linux IBM x365 cluster with one additional master machine of the same configuration Nodes are connected with a Gigabit Ethernet switch Each node has one Intel Xeon processor E552 2 26GHz with four cores 8GB of RAM and two 1TB 7 2K RPM hard disks In our benchmark we leverage two real world graph based datasets The first is the Webmap dataset taken from a crawl of the web in the year 2 2 The second is the BTC dataset which is a undirected semantic graph converted from the original Billion Triple Challenge 2 9 RDF dataset We run PageRank using the Webmap datasets and run SSSP single source shortest paths and CC connected components using the BTC datasets The following tables show statistics for these graph datasets including the full dataset as well as several down samples and scale ups NameSize Vertice EdgeAvg DegreeLarge71 82GB1 413 511 39 8 5 112 1695 69Medium31 78GB7 9 673 6222 947 6 3 9244 15Small14 5GB143 6 9131 47 129 8721 27X Small9 99GB75 6 5 3881 82 93 48314 31Tiny2 93GB25 37 77318 823 77912 2 Statistics of the Webmap datasets NameSize Vertice EdgeAvg DegreeLarge66 48GB69 621 9166 177 86 168 94Medium49 86GB517 966 4374 632 814 5128 94Small33 24GB345 31 9583 88 543 88 94X Small16 62GB172 655 4791 544 271 5 48 94Tiny7 4GB1 7 7 6 28 6 7 5 9 7665 64 Statistics of the BTC datasets Below are the steps we used to run GraphLab confirmed by Dr Joseph Gonzalez GraphX Execution Time The above figures show that while Pregelix scales to out of core workloads Giraph fails to run the three algorithms once the relative dataset size exceeds 15 even with its out of core setting enabled When the computation has sufficient memory Pregelix offers comparable execution time to Giraph for message intensive workloads like PageRank up to 2x slower on small datasets but up to 2x faster on large datasets and CC similarly fast for all cases Pregelix default plan offers 3 5x overall speedup and 7x per iteration speedup over Giraph for message sparse workloads like SSSP All figures show that for in memory workloads when the relative dataset size is less than 15 Giraph has steeper worse scaling curves than Pregelix GraphLab GraphX and Hama even fail earlier than Giraph with even steeper scaling curves GraphLab has the best average iteration time on small datasets e g 85 5x faster than Pregelix 76 12x faster than Giraph on Webmap Tiny and BTC Tiny but performs worse than Giraph and Pregelix on larger datasets GraphX fails to load BTC Tiny therefore its results for SSSP and CC are missing Scalability The parallel speedup is done on the dataset Webmap X Small The parallel speedup of Pregelix is very close to the ideal line where there is no network communication while Giraph GraphLab GraphX all exhibit even better speedup than the ideal line The apparent super liner parallel speedup of Giraph GraphLab and GraphX is consistent with the fact that they perform super linearly worse when the data volume assigned to each slave machine increases Hama can only run the smallest dataset on the largest cluster so we cannot measure its parallel speedup Throughput we compare the job throughput of Hama GraphLab GraphX Giraph and Pregelix in a concurrent usage setting We ran PageRank jobs on the 32 machine cluster using four different samples of the Webmap dataset X Small Small Medium and Large with various levels of job concurrency The above figures report how the number of completed jobs per hour jph changes with the number of concurrent jobs Physical Flexibility We ran the two join plans for the three Pregel graph algorithms As one can see in the following figures for message sparse algorithms like SSSP the left outer join Pregelix plan is much faster than the full outer join plan However for message intensive algorithms like PageRank the full outer join plan is the winner The CC algorithm s execution starts with intensive messages but the volume of messages decreases significantly in the last few of supersteps and hence the two join plans result in similar performance The fourth figure compares GraphLab GraphX Giraph Hama and Pregelix s left outer join plan as shown in the figure SSSP on Pregelix can be up to 15x faster than on Giraph for the average per iteration execution time and even faster than other systems Single Machine Performance For the PageRank algorithm when the input dataset size relative to the machine s RAM size is less than 2 5 Pregelix offers better performance otherwise GraphChi is more efficient when both systems are limited to one machine This is to be expected given that GraphChi focuses on fast single machine secondary storage access methods and does not have the overhead introduced by the network stack For the PageRank algorithm when the input dataset size relative to the machine s RAM size is less than 2 5 Pregelix offers better performance otherwise GraphChi is more efficient when both systems are limited to one machine This is to be expected given that GraphChi focuses on fast single machine secondary storage access methods and does not have the overhead introduced by the network stack pregelix ics uci edu 2 14 Design by Free CSS Templates", "_id": "http://pregelix.ics.uci.edu/performance.html", "title": "pregelix", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n<title>Pregelix</title>\r\n<meta property=\"og:image\" content=\"images/pregelix.png\"/>\r\n<link rel=\"stylesheet\" href=\"css/styles.css\" type=\"text/css\" />\r\n<script src=\"js/jquery.min.js\"></script>\r\n<script>\r\n$(document).ready(function(){\r\n    $(\"#index\").addClass(\"selected\");\r\n});\r\n</script>\r\n\r\n</head>\r\n\r\n<body>\r\n<div id=\"container\">\r\n    <script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-50915345-1', 'uci.edu');\n  ga('send', 'pageview');\n\n</script>\n\n<!-- Facebook Like button script -->\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/all.js#xfbml=1\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div id=\"header\">\n    <table>\n        <tr>\n            <td align=\"left\">\n                <a href=\"\"><img src=\"logo.svg\" width=\"300\"></img></a>\n            </td>\n\t    <td align=\"left\">\n                <a href=\"\"><img src=\"images/lead.png\" width=\"300\"></img></a>\n            </td>\n            <td align=\"right\" valign=\"bottom\">\n\t\t\t\t<table style=\"text-align:right;\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td style=\"padding-bottom:5px;\">\n\t\t\t\t\t\t<div style=\"float: right\">\n\t\t\t\t\t\t\t<g:plusone size=\"medium\" align=\"right\" href=\"http://pregelix.ics.uci.edu/\"></g:plusone>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<!--<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<div class=\"fb-like\" data-href=\"http://pregelix.ics.uci.edu\" data-send=\"false\" data-layout=\"button_count\" data-width=\"450\" data-show-faces=\"false\" data-font=\"arial\"></div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr style=\"float:right;\">\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<a target=\"_blank\" href=\"https://twitter.com/ASTERIXUCI\"><img src=\"images/twitter.png\" title=\"AsterixDB Twitter\"></img></a>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<a target=\"_blank\" href=\"https://www.facebook.com/AsterixDB\"><img src=\"images/facebook.png\" title=\"AsterixDB Facebook\"></img></a>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t-->\n\t\t\t\t</table>\n            </td>\n\t<td>\n\t</td>\n        </tr>   \n    </table>\n</div>  \n\n<!-- Google+ +1 button script -->\n<script type=\"text/javascript\">\n  (function() {\n    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;\n    po.src = 'https://apis.google.com/js/plusone.js';\n    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);\n  })();\n</script>\n\n<div id=\"navigation\">\n    <ul>\n        <li id=\"index\"><a href=\"index.html\">Overview</a></li>\n        <!--<li id=\"ecosystem\"><a href=\"ecosystem.html\">Ecosystem</a></li> -->\n        <li id=\"download\"><a href=\"download.html\">Download</a></li>\n\t<li id=\"pubs\"><a href=\"performance.html\">Performance</a></li>\n        <!--<li><a href=\"./documentation/index.html\" target=\"_blank\">Documentation</a></li>-->\n        <li id=\"news\"><a href=\"news.html\">News</a></li>\n        <li id=\"pubs\"><a href=\"publications.html\">Publications</a></li>\n\t<li id=\"talks\"><a href=\"talks.html\">Talks</a></li>     \n        <li id=\"team\"><a href=\"team.html\">Team</a></li>\n        <li id=\"sponsors\"><a href=\"sponsors.html\">Sponsors</a></li>\n        <li id=\"contact\"><a href=\"contact.html\">Contact</a></li>\n    </ul>\n</div>\n \r\n    <div id=\"body\">\r\n    \t\r\n        \r\n        <div id=\"content\"> \r\n\r\n<p>\r\n <h1>Performance</h1>\r\n </br>\r\n <a href=\"#setup\"><h4>Benchmark Setup</h4></a>\r\n <a href=\"#time\"><h4>Execution Time</h4></a>\r\n <a href=\"#scalability\"><h4>Scalability</h4></a>\r\n <a href=\"#throughput\"><h4>Throughput</h4></a>\r\n <a href=\"#flexibility\"><h4>Physical Flexibility</h4></a>\r\n <a href=\"#singlemachineperformance\"><h4>Single Machine Performance</h4></a>\r\n</p>\r\n\r\n<h3><a name=\"setup\">Benchmark Setup</a></h3>\r\n<p>\r\nWe ran the benchmark on a 32-node Linux IBM x3650 cluster with one\r\nadditional master machine of the same configuration. Nodes are connected with\r\na Gigabit Ethernet switch.  Each node has one Intel Xeon processor E5520\r\n2.26GHz with four cores, 8GB of RAM, and two 1TB, 7.2K RPM hard disks.  \r\n</p>\r\n\r\n<p>\r\nIn our benchmark, we leverage two real-world graph-based datasets.  The\r\nfirst is the Webmap dataset taken from a crawl of the web in the\r\nyear 2002.  The second is the BTC\r\ndataset, which is a\r\nundirected semantic graph converted from the original Billion Triple Challenge 2009 RDF\r\ndataset.  \r\nWe run PageRank using the Webmap datasets and run SSSP (single source shortest paths) and CC (connected components) using the BTC datasets.\r\nThe following tables show statistics for these graph datasets, including the full dataset as well as several down-samples and scale-ups.\r\n</p>\r\n\r\n\r\n\r\n<table style=\"display:inline\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tr>\r\n  <td><FONT SIZE=2>Name</FONT></td>\r\n  <td><FONT SIZE=2>Size</FONT></td>\t\t\r\n  <td><FONT SIZE=2>#Vertice</FONT></td>\r\n  <td><FONT SIZE=2>#Edge</FONT></td>\r\n  <td><FONT SIZE=2>Avg. Degree</FONT></td>\r\n</tr>\r\n<tr>\r\n   <td><FONT SIZE=2>Large</FONT></td>\r\n   <td><FONT SIZE=2>71.82GB</FONT></td>\t\t\r\n   <td><FONT SIZE=2>1,413,511,390</FONT></td>\r\n   <td><FONT SIZE=2>8,050,112,169</FONT></td>\r\n   <td><FONT SIZE=2>5.69</FONT></td>\r\n</tr>\r\n<tr>\r\n   <td><FONT SIZE=2>Medium</FONT></td>\r\n   <td><FONT SIZE=2>31.78GB</FONT></td>\r\n   <td><FONT SIZE=2>709,673,622</FONT></td>\r\n   <td><FONT SIZE=2>2,947,603,924</FONT></td>\r\n   <td><FONT SIZE=2>4.15</FONT></td>\r\n</tr>\r\n<tr>\r\n   <td><FONT SIZE=2>Small</FONT></td>\r\n   <td><FONT SIZE=2>14.05GB</FONT></td>\r\n   <td><FONT SIZE=2>143,060,913</FONT></td>\r\n   <td><FONT SIZE=2>1,470,129,872</FONT></td>\r\n   <td><FONT SIZE=2>10.27</FONT></td>\r\n</tr>\r\n<tr>\r\n   <td>X-Small</td>\r\n   <td>9.99GB</td>\r\n   <td>75,605,388</td>\r\n   <td>1,082,093,483</td>\r\n   <td>14.31</td>\r\n</tr>\r\n<tr>\r\n   <td>Tiny</td>\r\n   <td>2.93GB</td>\r\n   <td>25,370,077</td>\r\n   <td>318,823,779</td>\r\n   <td>12.02</td>\r\n</tr>\r\n</table>\r\n<strong>Statistics of the Webmap datasets</strong>\r\n<p/>\r\n\r\n<table style=\"display:inline\"  border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tr>\r\n  <td>Name</td>\r\n  <td>Size</td>         \r\n  <td>#Vertice</td>\r\n  <td>#Edge</td>\r\n  <td>Avg. Degree</td>\r\n</tr>\r\n<tr>\r\n  <td>Large</td>\r\n  <td>66.48GB</td>             \r\n  <td>690,621,916</td>\r\n  <td>6,177,086,016</td>\r\n  <td>8.94</td>\r\n</tr>\r\n<tr>\r\n  <td>Medium</td>\r\n  <td>49.86GB</td>\r\n  <td>517,966,437</td>\r\n  <td>4,632,814,512</td>\r\n  <td>8.94</td>\r\n</tr>\r\n<tr>\r\n  <td>Small</td>\r\n  <td>33.24GB</td>\r\n  <td>345,310,958</td>\r\n  <td>3,088,543,008</td>\r\n  <td>8.94</td>\r\n</tr>\r\n<tr>\r\n  <td>X-Small</td>\r\n  <td>16.62GB</td>\r\n  <td>172,655,479</td>\r\n  <td>1,544,271,504</td>\r\n  <td>8.94</td>\r\n</tr>\r\n<tr>\r\n  <td>Tiny</td>\r\n  <td>7.04GB</td>\r\n  <td>107,706,280</td>\r\n  <td>607,509,766</td>\r\n  <td>5.64</td>\r\n</tr>\r\n</table>\r\n<strong>Statistics of the BTC datasets</strong> \r\n<p/>\r\n\r\n<p>\r\nBelow  are the steps we used to run:\r\n</br>\r\n<a href=\"graphlab.html\">GraphLab</a> (confirmed by <a href=\"http://www.cs.berkeley.edu/~jegonzal/\">Dr. Joseph Gonzalez</a>)</br>\r\n<a href=\"graphx.html\">GraphX</a>\r\n</p>\r\n\r\n<h3><a name=\"time\">Execution Time</a></h3>\r\n<center>\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1831148727&zx=svsn7oxf06k7\"><img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1831148727&zx=svsn7oxf06k7\" width=\"45%\"/></a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1670600966&zx=5c59dfwe72s5\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1670600966&zx=5c59dfwe72s5\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1438500213&zx=rc8c6yun9ul\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1438500213&zx=rc8c6yun9ul\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=174953487&zx=b4c1ksf26stg\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=174953487&zx=b4c1ksf26stg\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=248295890&zx=5nayj55g6321\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=248295890&zx=5nayj55g6321\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=585341924&zx=yfa0fci4otse\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=585341924&zx=yfa0fci4otse\" width=\"45%\"/>\r\n</a>\r\n</center>\r\n<p>\r\nThe above figures show that while Pregelix scales to out-of-core workloads, Giraph fails to run\r\nthe three algorithms once the relative dataset size exceeds 0.15, even with its out-of-core\r\nsetting enabled.\r\n\r\nWhen the computation has sufficient memory, Pregelix offers comparable\r\nexecution time to Giraph for message-intensive workloads like PageRank (up to 2x slower on small datasets but up to 2x faster on large datasets) and CC (similarly fast for all cases). Pregelix default plan offers\r\n3.5x overall speedup and 7x per-iteration speedup over Giraph for\r\nmessage-sparse workloads like SSSP.  All figures show that for in-memory workloads (when the relative dataset size is less than 0.15), Giraph has steeper (worse) scaling curves than Pregelix. \r\nGraphLab, GraphX, and Hama even fail earlier than Giraph, with even steeper scaling curves. GraphLab has the best average-iteration time on small datasets (e.g., 0.85--5x faster than Pregelix, 0.76--12x faster than Giraph, on Webmap-Tiny and BTC-Tiny), but performs worse than Giraph and Pregelix on larger datasets. GraphX fails to load BTC-Tiny, therefore its results for SSSP and CC are missing.\r\n</p>\r\n</br>\r\n\r\n<h3><a name=\"scalability\">Scalability</a></h3>\r\n<center>\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=979327222&zx=ev1oz3yjw5sc\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=979327222&zx=ev1oz3yjw5sc\" width=\"45%\"/></a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1846744135&zx=e6cc29imklc6\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1846744135&zx=e6cc29imklc6\" width=\"45%\"/></a>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1850958687&zx=noygiwgorbzr\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1850958687&zx=noygiwgorbzr\" width=\"45%\"/></a>\r\n</a>\r\n</center>\r\n<p>\r\nThe parallel speedup is done on the dataset Webmap-X-Small.\r\nThe parallel speedup of Pregelix is very close to the ideal line where there is no network communication, while Giraph, GraphLab, GraphX all exhibit\r\neven better speedup than the ideal line. The apparent super-liner parallel speedup of Giraph, GraphLab, and GraphX\r\nis consistent with the fact that they perform super-linearly worse \r\nwhen the data volume assigned to each slave machine increases.\r\nHama can only run the smallest dataset on the largest cluster, so we cannot measure its parallel speedup.\r\n</p>\r\n\r\n<h3><a name=\"throughput\">Throughput</a></h3>  \r\n<center>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=678366277&zx=t0qwgpl8vjos\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=678366277&zx=t0qwgpl8vjos\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1344537051&zx=2anj17bkdh3y\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1344537051&zx=2anj17bkdh3y\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1491366125&zx=ali2lxbdt2ci\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1491366125&zx=ali2lxbdt2ci\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=454668287&zx=aazeytzc5aiy\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=454668287&zx=aazeytzc5aiy\" width=\"45%\"/>\r\n</a>\r\n</center>\r\n\r\n<p>\r\nwe compare the job throughput of Hama, GraphLab, GraphX, Giraph, and Pregelix in a concurrent usage setting.\r\nWe ran PageRank jobs on the 32-machine cluster using four different samples of the Webmap dataset (X-Small, Small, Medium, and Large)\r\nwith various levels of job concurrency.  The above figures report\r\nhow the number of completed jobs per hour (<strong>jph</strong>) changes with the number of concurrent jobs.\r\n</p>\r\n\r\n\r\n<h3><a name=\"flexibility\">Physical Flexibility</a></h3>\r\n<p>\r\nWe ran the two join plans  for the three Pregel graph algorithms. \r\nAs one can see in the following figures,  for message-sparse algorithms like SSSP, the left outer join Pregelix plan is much faster than the full outer join\r\nplan. However, for message-intensive algorithms like PageRank, the full outer join plan is the winner. \r\nThe CC algorithm's execution starts with intensive messages but the volume of messages decreases significantly in the last few of supersteps, and hence the two join plans\r\nresult in similar performance.\r\nThe fourth figure compares GraphLab, GraphX, Giraph, Hama, and Pregelix's left outer join plan, as shown in the figure, SSSP on Pregelix can be up to <strong>15x</strong> faster than on Giraph for the \r\naverage per-iteration execution time, and even faster than other systems. \r\n</p>\r\n\r\n<center>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1707778719&zx=h90f5mj5rm6y\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1707778719&zx=h90f5mj5rm6y\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1745079086&zx=vjdq6so5szt\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1745079086&zx=vjdq6so5szt\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=286876413&zx=v079d12rkyuu\"/>\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=286876413&zx=v079d12rkyuu\" width=\"45%\"/>\r\n</a>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=160630574&zx=q4prpb2d4lej\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=160630574&zx=q4prpb2d4lej\" width=\"45%\"/>\r\n</a>\r\n</center>\r\n\r\n</p>\r\n\r\n<h3><a name=\"singlemachineperformance\">Single Machine Performance</a></h3>\r\n<p>\r\nFor the PageRank algorithm, when the input dataset size relative to the machine's RAM size is less than 2.5, Pregelix offers better performance; otherwise, GraphChi is more efficient when both systems are limited to one machine. This is to be expected given that GraphChi focuses on fast (single machine) secondary storage access methods and does not have the overhead introduced by the network stack.For the PageRank algorithm, when the input dataset size relative to the machine's RAM size is less than 2.5, Pregelix offers better performance; otherwise, GraphChi is more efficient when both systems are limited to one machine. This is to be expected given that GraphChi focuses on fast (single machine) secondary storage access methods and does not have the overhead introduced by the network stack.\r\n</p>\r\n\r\n<center>\r\n\r\n<a href=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1869443242&zx=580yhqd6vvba\">\r\n<img src=\"https://docs.google.com/spreadsheets/d/1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4/embed/oimg?id=1ZPi-0gPrts-JpA6qdSpui2UBJXv-L6kwc7udkmYfGO4&oid=1869443242&zx=580yhqd6vvba\" width=\"50%\"/>\r\n</a>\r\n\r\n</center>\r\n\r\n     </div>\r\n    \r\n        <div class=\"clear\"></div> </div> <div id=\"footer\">\n    <table>\n    <tr>\n    <td align=\"left\" width=\"220\">\n        <a href=\"http://www.isg.ics.uci.edu\" target=\"_blank\"><img src=\"images/isg.png\" height=\"75\" width=\"75\" align=\"left\" style=\"background-color : #fff;\"></img></a>\n    </td>\n    <td align=\"center\">\n        <p>&copy; pregelix.ics.uci.edu 2014.</br><font style=\"font-size:xx-small;\">Design by <a href=\"http://www.spyka.net\">Free CSS Templates</a></font></p>\n    </td>\n    <td align=\"right\" width=\"220\">\n        <a href=\"http://www.uci.edu\" target=\"_blank\"><img src=\"images/uci_white.png\" height=\"75\" width=\"75\"></img></a>\n        <a href=\"http://www.ucla.edu\" target=\"_blank\"><img src=\"images/ucla_black.gif\" height=\"75\" width=\"75\"></img></a>\n    </td>\n    </tr>\n    </table>\n</div>\n\r\n\r\n</div>\r\n</body>\r\n</html>\r\n", "id": 4488.0}