{"text": "SIP A Tool for Generating Python Bindings for C and C Libraries Reference Guide Contact info riverbankcomputing co ukVersion 4 1Copyright Copyright c 2 4 Riverbank Computing Limited Contents 1 Introduction1 1 License1 2 Features1 3 SIP v3 x1 4 SIP Components 2 Installing SIP2 1 Downloading SIP2 2 Configuring SIP2 2 1 Configuring SIP Using MinGW2 2 2 Configuring SIP Using the Borland C Compiler 2 3 Building SIP 3 Using SIP3 1 A Simple C Example3 2 A Simple C Example3 3 A More Complex C Example3 4 Ownership of Objects 4 The SIP Command Line5 SIP Specification Files5 1 Syntax Definition5 2 Additional SIP Types5 2 1 SIP PYCALLABLE5 2 2 SIP PYDICT5 2 3 SIP PYLIST5 2 4 SIP PYOBJECT5 2 5 SIP PYTUPLE5 2 6 SIP PYSLICE5 2 7 SIP QOBJECT5 2 8 SIP RXOBJ CON5 2 9 SIP RXOBJ DIS5 2 1 SIP SIGNAL5 2 11 SIP SLOT5 2 12 SIP SLOT CON 5 2 13 SIP SLOT DIS 6 SIP Directives6 1 AccessCode6 2 CModule6 3 ConvertFromTypeCode6 4 ConvertToSubClassCode6 5 ConvertToTypeCode6 6 Copying6 7 Doc6 8 End6 9 ExportedDoc6 1 Feature6 11 If6 12 Import6 13 Include6 14 License6 15 MappedType6 16 MethodCode6 17 Module6 18 ModuleCode6 19 ModuleHeaderCode6 2 OptionalInclude6 21 Platforms6 22 PostInitialisationCode6 23 Timeline6 24 TypeCode6 25 TypeHeaderCode6 26 VirtualCatcherCode 7 SIP Annotations7 1 Argument Annotations7 1 1 AllowNone7 1 2 Array7 1 3 ArraySize7 1 4 Constrained7 1 5 GetWrapper7 1 6 In7 1 7 Out7 1 8 Transfer7 1 9 TransferBack7 1 1 TransferThis 7 2 Function Annotations7 2 1 AutoGen7 2 2 Default7 2 3 Factory7 2 4 NewThread7 2 5 PostHook7 2 6 PreHook7 2 7 PyName7 2 8 ReleaseGIL 7 3 License Annotations7 3 1 Licensee7 3 2 Signature7 3 3 Timestamp7 3 4 Type 8 SIP API for Handwritten Code8 1 SIP API MAJOR NR8 2 SIP API MINOR NR8 3 SIP BUILD8 4 SIP VERSION8 5 SIP VERSION STR8 6 sipBadCatcherResult 8 7 sipBadLengthForSlice 8 8 sipBuildResult 8 9 sipCallMethod 8 1 sipClassName 8 11 sipConnectRx 8 12 sipConvertFromSequenceIndex 8 13 sipConvertFromSliceObject 8 14 sipConvertToCpp 8 15 sipDisconnectRx 8 16 sipEmitSignal 8 17 sipFree 8 18 sipGetSender 8 19 sipGetWrapper 8 2 sipIntTypeClassMap8 21 sipIsSubClassInstance 8 22 sipMalloc 8 23 sipMapIntToClass 8 24 sipMapStringToClass 8 25 sipParseResult 8 26 sipStringTypeClassMap8 27 sipTransfer 8 28 sipWrapperType8 29 Generated Type Convertors8 3 Generated Type Objects8 31 Generated Derived Classes 9 Using the SIP Module in Applications1 The SIP Build System1 1 sipconfig Functions1 2 sipconfig Classes 1 Introduction This is the reference guide for SIP 4 1 SIP is a tool for automatically generating Python bindings for C and C libraries SIP was originally developed in 1998 for PyQt the Python bindings for the Qt GUI toolkit but is suitable for generating bindings for any C or C library This version of SIP generates bindings for Python v2 3 or later If you want to generate bindings for earlier versions of Python going back as far as Python v1 5 then you need to use SIP v3 x There are many other similar tools available One of the original such tools is SWIG and in fact SIP is so called because it started out as a small SWIG Unlike SWIG SIP is specifically designed for bringing together Python and C C and goes to great lengths to make the integration as tight as possible The homepage for SIP is http www riverbankcomputing co uk sip Here you will always find the latest stable version current development snapshots and the latest version of this documentation 1 1 License SIP is licensed under the same terms as Python itself SIP places no restrictions on the license you may apply to the bindings you create 1 2 Features SIP and the bindings it produces have the following features bindings are fast to load and minimise memory consumption especially when only a small sub set of a large library is being usedautomatic conversion between standard Python and C C data typesoverloading of functions and methods with different argument signaturesaccess to a C class s protected methodsthe ability to define a Python class that is a sub class of a C class including abstract C classessupport for ordinary C functions class methods static class methods virtual class methods and abstract class methodsthe ability to re implement C virtual and abstract methods in Pythonsupport for global and class variablessupport for C namespacessupport for C exceptions and wrapping them as Python exceptionsthe ability to define mappings between C classes and similar Python data types that are automatically invokedthe ability to automatically exploit any available run time type information to ensure that the class of a Python instance object matches the class of the corresponding C instancefull support of the Python interpreter lock including the ability to specify that a C function of method may block therefore allowing the lock to be released and other Python threads to runsupport for the concept of ownership of a C instance i e what part of the code is responsible for calling the instance s destructor and how the ownership may change during the execution of an applicationthe ability to generate bindings for a C class library that itself is built on another C class library which also has had bindings generated so that the different bindings integrate and share code properlya sophisticated versioning system that allows the full lifetime of a C class library including any platform specific or optional features to be described in a single set of specification filesthe ability to include documentation in the specification files which can be extracted and subsequently processed by external toolsthe ability to include copyright notices and licensing information in the specification files that is automatically included in all generated source codea build system written in Python that you can extend to configure compile and install your own bindings without worrying about platform specific issuesSIP and the bindings it produces runs under UNIX Linux Windows and MacOS X SIP also understands the signal slot type safe callback mechanism implemented by Qt SIP allows new Python signals to be defined and allows any Python callable object to be used as a slot 1 3 SIP v3 x SIP v3 x differs from current versions in the following respects It uses Python s classic classes to wrap C classes and so generated bindings can be built against any version of Python It does not support the creation of bindings for C libraries It does not generate bindings that will work on MacOS X It is not formally documented However most of this document does apply to SIP v3 x just don t be surprised if you come across something that doesn t New releases of SIP v3 x may be made in the future but no significant development will be done 1 4 SIP Components SIP comprises a number of different components The SIP code generator sip or sip exe This processes sip specification files and generates C or C bindings It is covered in detail in Using SIP The SIP header file sip h This contains definitions and data structures needed by the generated C and C code The SIP module sip so or sip pyd This is a Python extension module that is imported automatically by SIP generated bindings and provides them with some common utility functions See also Using the SIP Module in Applications The SIP build system sipconfig py This is a pure Python module that is created when SIP is configured and encapsulates all the necessary information about your system including relevant directory names compiler and linker flags and version numbers It also includes several Python classes and functions which help you write configuration scripts for your own bindings It is covered in detail in The SIP Build System 2 Installing SIP 2 1 Downloading SIP You can get the latest release of the SIP source code from http www riverbankcomputing co uk sip download php SIP is also included with all of the major Linux distributions However it may be a version or two out of date You may also find more up to date pre compiled binaries on SourceForge 2 2 Configuring SIP After unpacking the source package either a tar gz or a zip file depending on your platform you should then check for any README files that relate to your platform Next you need to configure SIP by executing the configure py script For example python configure py This assumes that the Python interpreter is on your path Something like the following may be appropriate on Windows c python23 python configure py If you have multiple versions of Python installed then make sure you use the interpreter for which you wish SIP to generate bindings for Qt support is automatically enabled if the QTDIR environment variable is set Use the x command line option to disable it The full set of command line options is hDisplay a help message b dirThe SIP code generator will be installed in the directory dir d dirThe SIP module will be installed in the directory dir e dirThe SIP header file will be installed in the directory dir kThe SIP module will be built as a static library This is useful when building the SIP module as a Python builtin l libExplicitly specify the type of Qt library to use either qt qt mt qtmt or qte This is useful if for example you have the non threaded qt and threaded qt mt versions of the Qt library installed in the same directory p platformExplicitly specify the platform compiler to be used by the build system If Qt support is enabled then the platform compiler used to build Qt will be used otherwise a platform specific default will be used The h option will display all the supported platform compilers and the default uThe SIP module will be built with debugging symbols v dirBy default sip files will be installed in the directory dir xDisable the SIP module s support for Qt Support is automatically disabled if the QTDIR environment variables isn t set The configure py script takes many other options that allows the build system to be finely tuned These are of the form name value or name value The h option will display each supported name although not all are applicable to all platforms The name value form means that value will replace the existing value of name The name value form means that value will be appended to the existing value of name For example the following will reduce the size of module binaries compiled with GCC python configure py CXXFLAGS fno exceptions LFLAGS s A pure Python module called sipconfig py is generated by configure py This defines each name and its corresponding value Looking at it will give you a good idea of how the build system uses the different options It is covered in detail in The SIP Build System 2 2 1 Configuring SIP Using MinGW SIP and the modules it generates can be built with MinGW the Windows port of GCC If you have Qt installed and built with MinGW then configure py will automatically select the correct configuration If you do not have Qt installed or you are disabling support for it then you must use the p command line option to specify the correct platform For example c python23 python configure py p win32 g You must also make sure you have a MinGW compatible version of the Python library See http sebsauvage net python mingw html for instructions to do this 2 2 2 Configuring SIP Using the Borland C Compiler SIP and the modules it generates can be built with the free Borland C compielr If you have Qt installed and built with the Borland compiler then configure py will automatically select the correct configuration If you do not have Qt installed or you are disabling support for it then you must use the p command line option to specify the correct platform For example c python23 python configure py p win32 borland You must also make sure you have a Borland compatible version of the Python library If you are using the standard Python distribution built using the Microsoft compiler then you must convert the format of the Python library For example coff2omf python23 lib python23 bcpp lib 2 3 Building SIP The next step is to build SIP by running your platform s make command For example make The final step is to install SIP by running the following command make install Depending on your system you may require root or administrator privileges This will install the various SIP components 3 Using SIP Bindings are generated by the SIP code generator from a number of specification files typically with a sip extension Specification files look very similar to C and C header files but often with additional information in the form of a directive or an annotation and code so that the bindings generated can be finely tuned 3 1 A Simple C Example We start with a simple but complete example Let s say you have a C library that implements a single class called Word The class has one constructor that takes a terminated character string as its single argument The class has one method called reverse which takes no arguments and returns a terminated character string The interface to the class is defined in a header file called word h which might look something like this Define the interface to the word library class Word const char the word public Word const char w char reverse const The corresponding SIP specification file would then look something like this Define the SIP wrapper to the word library Module word class Word TypeHeaderCode include word h End public Word const char char reverse const Obviously a SIP specification file looks very much like a C or C header file but SIP does not include a full C parser Let s look at the differences between the two files The Module directive has been added 1 This is used to name the Python module that is being created and to give it a generation number In this example these are word and respectively The generation number is effectively the version number of the module The TypeHeaderCode directive has been added The text between this and the following End directive is included literally in the code that SIP generates Normally it is used as in this case to include the corresponding C or C header file 2 The declaration of the private variable this word has been removed SIP does not support access to either private or protected instance variables The name of the argument to the constructor has been removed SIP does not support named arguments 3 If we want to we can now generate the C code in the current directory by running the following command sip c word sip However that still leaves us with the task of compiling the generated code and linking it against all the necessary libraries It s much easier to use the SIP build system to do the whole thing Using the SIP build system is simply a matter of writing a small Python script In this simple example we will assume that the word library we are wrapping and it s header file are installed in standard system locations and will be found by the compiler and linker without having to specify any additional flags In a more realistic example your Python script may take command line options or search a set of directories to deal with different configurations and installations This is the simplest script conventionally called configure py import os import sipconfig The name of the SIP build file generated by SIP and used by the build system build file word sbf Get the SIP configuration information config sipconfig Configuration Run SIP to generate the code os system join config sip bin c b build file word sip Create the Makefile makefile sipconfig SIPModuleMakefile config build file Add the library we are wrapping The name doesn t include any platform specific prefixes or extensions e g the lib prefix on UNIX or the dll extension on Windows makefile extra libs word Generate the Makefile itself makefile generate Hopefully this script is self documenting The key parts are the Configuration and SIPModuleMakefile classes The build system contains other Makefile classes for example to build programs or to call other Makefiles in sub directories After running the script using the Python interpreter the extension module is being created for the generated C code and Makefile will be in the current directory To compile and install the extension module just run the following commands 4 make make install That s all there is to it 1 All SIP directives start with a as the first non whitespace character of a line 2 SIP includes many code directives like this They differ in where the supplied code is placed by SIP in the generated code 3 It is planned that a future version of SIP will allow arguments to be named and that the names will be used as Python keyword arguments 4 On Windows you might run nmake or mingw32 make instead 3 2 A Simple C Example Let s now look at a very similar example of wrapping a C library Define the interface to the word library struct Word const char the word struct Word create word const char w char reverse struct Word word The corresponding SIP specification file would then look something like this Define the SIP wrapper to the word library CModule word struct Word TypeHeaderCode include word h End const char the word struct Word create word const char char reverse struct Word Again let s look at the differences between the two files The CModule directive has been added This has the same syntax as the Module directive used in the previous example but tells SIP that the library being wrapped is implemented in C rather than C The TypeHeaderCode directive has been added The names of the arguments to the functions have been removed The configure py build system script described in the previous example can be used for this example without change 3 3 A More Complex C Example In this last example we will wrap a C library that contains a class that is derived from a Qt class This will demonstrate how SIP allows a class hierarchy to be split across multiple Python extension modules and will introduce SIP s versioning system The library contains a single C class called Hello which is derived from Qt s QLabel class It behaves just like QLabel except that the text in the label is hard coded to be Hello World To make the example more interesting we ll also say that the library only supports Qt v3 and later and also includes a function called setDefault that is not implemented in the Windows version of the library The hello h header file looks something like this Define the interface to the hello library include qlabel h include qwidget h include qstring h class Hello public QLabel This is needed by the Qt Meta Object Compiler Q OBJECT public Hello QWidget parent const char name WFlags f private Prevent instances from being copied Hello const Hello Hello operator const Hello if defined Q OS WIN void setDefault const QString def endif The corresponding SIP specification file would then look something like this Define the SIP wrapper to the hello library Module hello Import qt qtmod sip If Qt 3 class Hello QLabel TypeHeaderCode include hello h End public Hello QWidget TransferThis const char WFlags private Hello const Hello If WS WIN void setDefault const QString End End Again we look at the differences but we ll skip those that we ve looked at in previous examples The Import directive has been added to specify that we are extending the class hierarchy defined in the file qt qtmod sip This file is part of PyQt The build system will take care of finding the file s exact location The If directive has been added to specify that everything 5 up to the matching End directive only applies to Qt v3 and later Qt 3 is a tag defined in qtmod sip 6 using the Timeline directive Timeline is used to define a tag for each version of a library s API you are wrapping allowing you to maintain all the different versions in a single SIP specification The build system provides support to configure py scripts for working out the correct tags to use according to which version of the library is actually installed The public keyword used in defining the super classes has been removed This is not supported by SIP The TransferThis annotation has been added to the first argument of the constructor It specifies that if the argument is not i e the Hello instance being constructed has a parent then ownership of the instance is transferred from Python to C It is needed because Qt maintains objects i e instances derived from the QObject class in a hierachy When an object is destroyed all of its children are also automatically destroyed It is important therefore that the Python garbage collector doesn t also try and destroy them This is covered in more detail in Ownership of Objects SIP provides many other annotations that can be applied to arguments functions and classes Multiple annotations are separated by commas Annotations may have values The operator has been removed This operator is not supported by SIP The If directive has been added to specify that everything up to the matching End directive does not apply to Windows WS WIN is another tag defined by PyQt this time using the Platforms directive Tags defined by the Platforms directive are mutually exclusive i e only one may be valid at a time 7 One question you might have at this point is why bother to define the private copy constructor when it can never be called from Python The answer is to prevent the automatic generation of a public copy constructor We now look at the configure py script This is a little different to the script in the previous examples for two related reasons Firstly PyQt includes a pure Python module called pyqtconfig that extends the SIP build system for modules like our example that build on top of PyQt It deals with the details of which version of Qt is being used i e it determines what the correct tags are and where it is installed This is called a module s configuration module Secondly we generate a configuration module called helloconfig for our own hello module There is no need to do this but if there is a chance that somebody else might want to extend your C library then it would make life easier for them Now we have two scripts First the configure py script import os import sipconfig import pyqtconfig The name of the SIP build file generated by SIP and used by the build system build file hello sbf Get the PyQt configuration information config pyqtconfig Configuration Get the extra SIP flags needed by the imported qt module Note that this normally only includes those flags x and t that relate to SIP s versioning system qt sip flags config pyqt qt sip flags Run SIP to generate the code Note that we tell SIP where to find the qt module s specification files using the I flag os system join config sip bin c b build file I config pyqt sip dir qt sip flags hello sip We are going to install the SIP specification file for this module and its configuration module installs installs append hello sip os path join config default sip dir hello installs append helloconfig py config default mod dir Create the Makefile The QtModuleMakefile class provided by the pyqtconfig module takes care of all the extra preprocessor compiler and linker flags needed by the Qt library makefile pyqtconfig QtModuleMakefile configuration config build file build file installs installs Add the library we are wrapping The name doesn t include any platform specific prefixes or extensions e g the lib prefix on UNIX or the dll extension on Windows makefile extra libs hello Generate the Makefile itself makefile generate Now we create the configuration module This is done by merging a Python dictionary whose values are normally determined dynamically with a static template content Publish where the SIP specifications for this module will be installed hello sip dir config default sip dir Publish the set of SIP flags needed by this module As these are the same flags needed by the qt module we could leave it out but this allows us to change the flags at a later date without breaking scripts that import the configuration module hello sip flags qt sip flags This create the helloconfig py module from the helloconfig py in template and the dictionary sipconfig create config module helloconfig py helloconfig py in content Next we have the helloconfig py in template script import pyqtconfig These are installation specific values created when Hello was configured The following line will be replaced when this template is used to create the final configuration module SIP CONFIGURATION class Configuration pyqtconfig Configuration The class that represents Hello configuration values def init self sub cfg None Initialise an instance of the class sub cfg is the list of sub class configurations It should be None when called normally This is all standard code to be copied verbatim except for the name of the module containing the super class if sub cfg cfg sub cfg else cfg cfg append pkg config pyqtconfig Configuration init self cfg class HelloModuleMakefile pyqtconfig QtModuleMakefile The Makefile class for modules that Import hello def finalise self Finalise the macros Make sure our C library is linked self extra libs append hello Let the super class do what it needs to pyqtconfig QtModuleMakefile finalise self Again we hope that the scripts are self documenting 5 Some parts of a SIP specification aren t subject to version control 6 Actually in versions sip PyQt uses the Include directive to split the SIP specification for Qt across a large number of separate sip files 7 Tags can also be defined by the Feature directive These tags are not mutually exclusive i e any number may be valid at a time 3 4 Ownership of Objects When a C instance is wrapped a corresponding Python object is created The Python object behaves as you would expect in regard to garbage collection it is garbage collected when its reference count reaches zero What then happens to the corresponding C instance The obvious answer might be that the instance s destructor is called However the library API may say that when the instance is passed to a particular function the library takes ownership of the instance i e responsibility for calling the instance s destructor is transferred from the SIP generated module to the library The TransferThis Transfer and TransferBack annotations are used to specify where and it what direction transfers of ownership happen It is very important that these are specified correctly to avoid crashes where both Python and C call the destructor and memory leaks where neither Python and C call the destructor This applies equally to C structures where the structure is returned to the heap using the free function See also sipTransfer 4 The SIP Command Line The syntax of the SIP command line is sip options specification specification is the name of the specification file for the module If it is omitted then stdin is used The full set of command line options is hDisplay a help message VDisplay the SIP version number a fileThe name of the Scintilla API file to generate This file contains a description of the module API in a form that the Scintilla editor component can use for auto completion and call tips By default the file is not generated b fileThe name of the build file to generate This file contains the information about the module needed by the SIP build system to generate a platform and compiler specific Makefile for the module By default the file is not generated c dirThe name of the directory which must exist into which all of the generated C or C code is placed By default no code is generated d fileThe name of the documentation file to generate Documentation is included in specification files using the Doc and ExportedDoc directives By default the file is not generated eSupport for C exceptions is enabled The causes all calls to C code to be enclosed in try catch blocks and C exceptions converted to Python exceptions By default exception support is disabled gThe GIL is always released when making calls to C or C code and reacquired on return This is the SIP v3 x behaviour By default the enhanced GIL management functions described in PEP 311 are used so that the GIL is released only when necessary I dirThe directory is added to the list of directories searched when looking for a specification file given in an Include or Import directive This option may be given any number of times j numberThe generated code is split into the given number of files This make it easier to use the parallel build facility of most modern implementations of make By default 1 file is generated for each C structure or C class rDebugging statements that trace the execution of the bindings are automatically generated By default the statements are not generated s suffixThe suffix to use for generated C or C source files By default c is used for C and cpp for C t tagThe SIP version tag declared using the Timeline directive or the SIP platform tag declared using the Platforms directive to generate code for This option may be given any number of times so long as the tags do not conflict wThe display of warning messages is enabled By default warning messages are disabled x featureThe feature declared using the Feature directive is disabled z fileThe name of a file containing more command line options 5 SIP Specification Files A SIP specification consists of some C C type and function declarations and some directives The declarations may contain annotations which provide SIP with additional information that cannot be expressed in C C SIP does not include a full C C parser It is important to understand that a SIP specification describes the Python API i e the API available to the Python programmer when they import the generated module It does not have to accurately represent the underlying C C library There is nothing wrong with omitting functions that make little sense in a Python context or adding functions implemented with handwritten code that have no C C equivalent It is even possible and sometimes necessary to specify a different super class hierarchy for a C class All that matters is that the generated code compiles properly In most cases the Python API matches the C C API In some cases handwritten code see MethodCode is used to map from one to the other without SIP having to know the details itself However there are a few cases where SIP generates a thin wrapper around a C method or constructor see Generated Derived Classes and needs to know the exact C signature To deal with these cases SIP allows two signatures to be specified For example class Klass public The Python signature is a tuple but the underlying C signature is a 2 element array Klass SIP PYTUPLE int MethodCode int iarr 2 if PyArg ParseTuple a ii iarr iarr 1 Note that we use the SIP generated derived class constructor Py BEGIN ALLOW THREADS sipCpp new sipKlass iarr Py END ALLOW THREADS End 5 1 Syntax Definition The following is a semi formal description of the syntax of a specification file specification module statement module statement module directive statement module directive CModule Copying Doc ExportedDoc Feature Import Include License MappedType Module ModuleCode ModuleHeaderCode OptionalInclude Platforms PostInitialisationCode Timeline statement class statement function variable class statement If class enum namespace opaque class struct typedef class class name super classes class line super classes name super classes class line class statement ConvertToSubClassCode ConvertToTypeCode TypeCode TypeHeaderCode constructor destructor method static method virtual method special method operator class variable public public slots protected protected slots private private slots signals constructor name argument list exceptions function annotations c constructor signature MethodCode c constructor signature argument list destructor virtual name exceptions function annotations MethodCode VirtualCatcherCode method type name argument list const exceptions function annotations c signature MethodCode c signature type argument list static method static function virtual method virtual type name argument list const exceptions function annotations c signature MethodCode VirtualCatcherCode special method type special method name argument list function annotations MethodCode special method name add and call cmp contains delitem div eq ge getitem gt iadd iand idiv ilshift imod imul int invert ior irshift isub ixor le len lshift lt mod mul ne neg nonzero or repr rshift setitem str sub unicode xor operator type operator operator name argument list const exceptions function annotations MethodCode operator name class variable static variable enum enum name enum line enum line If name function type name argument list exceptions function annotations MethodCode namespace namespace name namespace line namespace line statement opaque class class scoped name struct struct name class line typedef typedef type name variable type name AccessCode exceptions throw exception list exception list scoped name exception list argument list argument argument list argument type argument annotations default value SIP QOBJECT SIP RXOBJ CON SIP RXOBJ DIS SIP SIGNAL SIP SLOT SIP SLOT CON SIP SLOT DIS default value expression expression value value binary operator expression value unary operator simple value simple value scoped name function call real value integer value boolean value string value character value function call scoped name value list value list value value list real value a floating point number integer value a number boolean value true false string value character character value character unary operator binary operator function annotations see Function Annotations argument annotations see Argument Annotations type const base type type list type type list base type scoped name template struct scoped name short unsigned short int unsigned unsigned int long unsigned long float double bool char unsigned char void SIP PYCALLABLE SIP PYDICT SIP PYLIST SIP PYOBJECT SIP PYTUPLE SIP PYSLICE scoped name name scoped name template scoped name type list name A Za z A Za z 9 Here is a short list of differences between C and the subset supported by SIP that might trip you up SIP does not support the use of in types Use pointers instead operator can only be used in a class Variables declared outside of a class are effectively read only Functions and methods do not support argument names A class s list of super classes doesn t not include any access specifier e g public 5 2 Additional SIP Types SIP supports a number of additional data types that can be used in Python signatures 5 2 1 SIP PYCALLABLE This is a PyObject that is a Python callable object 5 2 2 SIP PYDICT This is a PyObject that is a Python dictionary object 5 2 3 SIP PYLIST This is a PyObject that is a Python list object 5 2 4 SIP PYOBJECT This is a PyObject of any Python type 5 2 5 SIP PYTUPLE This is a PyObject that is a Python tuple object 5 2 6 SIP PYSLICE This is a PyObject that is a Python slice object 5 2 7 SIP QOBJECT This is a QObject that is a C instance of a class derived from Qt s QObject class 5 2 8 SIP RXOBJ CON This is a QObject that is a C instance of a class derived from Qt s QObject class It is used as the type of the receiver instead of const QObject in functions that implement a connection to a slot 5 2 9 SIP RXOBJ DIS This is a QObject that is a C instance of a class derived from Qt s QObject class It is used as the type of the receiver instead of const QObject in functions that implement a disconnection from a slot 5 2 1 SIP SIGNAL This is a const char that is used as the type of the signal instead of const char in functions that implement the connection or disconnection of an explicitly generated signal to a slot 5 2 11 SIP SLOT This is a const char that is used as the type of the member instead of const char in functions that implement the connection or disconnection of an explicitly generated signal to a slot 5 2 12 SIP SLOT CON This is a const char that is used as the type of the member instead of const char in functions that implement the connection of an internally generated signal to a slot The type includes a comma separated list of types that is the C signature of of the signal To take an example QAccel connectItem connects an internally generated signal to a slot The signal is emitted when the keyboard accelerator is activated and it has a single integer argument that is the ID of the accelerator The C signature is bool connectItem int id const QObject receiver const char member The corresponding SIP specification is bool connectItem int SIP RXOBJ CON SIP SLOT CON int 5 2 13 SIP SLOT DIS This is a const char that is used as the type of the member instead of const char in functions that implement the disconnection of an internally generated signal to a slot The type includes a comma separated list of types that is the C signature of of the signal 6 SIP Directives In this section we describe each of the directives that can be used in specification files All directives begin with as the first non whitespace character in a line Some directives have arguments or contain blocks of code or documentation In the following descriptions these are shown in italics Optional arguments are enclosed in brackets Some directives are used to specify handwritten code Handwritten code must not define names that start with the prefix sip 6 1 AccessCode AccessCode code End This directive is used immediately after the declaration of an instance of a wrapped class or structure or a pointer to such an instance You use it to provide handwritten code that overrides the default behaviour For example class Klass Klass klassInstance AccessCode In this contrived example the C library we are wrapping defines klassInstance as Klass which SIP doesn t support so we explicitly dereference it if klassInstance klassInstance return klassInstance This will get converted to None return End 6 2 CModule CModule name version This directive is used to identify that the library being wrapped is a C library and to define the name of the module and it s optional version number See the Module directive for an explanation of the version number For example CModule dbus 1 6 3 ConvertFromTypeCode ConvertFromTypeCode code End This directive is used as part of the MappedType directive to specify the handwritten code that converts an instance of a mapped type to a Python object The following variables are made available to the handwritten code type sipCppThis is a pointer to the instance of the mapped type to be converted It may be zero The handwritten code must explicitly return a PyObject If there was an error then a Python exception must be raised and NULL returned The following example converts a QValueList int instance to a Python list of numbers ConvertFromTypeCode Handle the case where the C instance is if sipCpp return PyList New PyObject l Create the Python list of the correct length if l PyList New sipCpp count NULL return NULL Go through each int in the C instance and convert it to a number for uint i i sipCpp count i if PyList SetItem l i PyInt FromLong sipCpp i There was an error so garbage collect the Python list Py DECREF l return NULL Return the Python list return l End 6 4 ConvertToSubClassCode ConvertToSubClassCode code End When SIP needs to wrap a C class instance it first checks to make sure it hasn t already done so If it has then it just returns a new reference to the corresponding Python object Otherwise it creates a new Python object of the appropriate type In C a function may be defined to returned an instance of a certain class but can often return a sub class instead This directive is used to specify handwritten code that exploits any available real time type information RTTI to see if there is a more specific Python type that can be used when wrapping the C instance The RTTI may be provided by the compiler or by the C instance itself The directive is included in the specification of one of the classes that the handwritten code handles the type conversion for It doesn t matter which one but a sensible choice would be the one at the root of that class hierarchy in the module Note that if a class hierarchy extends over a number of modules then this directive should be used in each of those modules to handle the part of the hierarchy defined in that module SIP will ensure that the different pieces of code are called in the right order to determine the most specific Python type to use The following variables are made available to the handwritten code type sipCppThis is a pointer to the C class instance sipWrapperType sipClassThe handwritten code must set this to the SIP generated Python type object that corresponds to the class instance The type object for class Klass is sipClass Klass If the RTTI of the class instance isn t recognised then sipClass must be set to NULL The handwritten code must not explicitly return The following example shows the sub class conversion code for QEvent based class hierarchy in PyQt class QEvent ConvertToSubClassCode QEvent sub classes provide a unique type ID switch sipCpp type case QEvent Timer sipClass sipClass QTimerEvent break case QEvent KeyPress case QEvent KeyRelease sipClass sipClass QKeyEvent break Skip the remaining event types the keep the example short default We don t recognise the type sipClass NULL End The rest of the class specification The SIP API includes the sipMapIntToClass and sipMapStringToClass functions that convert integer and string based RTTI to Python type objects based on ordered lookup tables 6 5 ConvertToTypeCode ConvertToTypeCode code End This directive is used to specify the handwritten code that converts a Python object to a mapped type instance It is used as part of the MappedType directive and as part of a class specification The code is also called to determine if the Python object is of the correct type prior to conversion When used as part of a class specification is can automatically convert additional types of Python object For example PyQt uses it in the specification of the QString class to allow Python string objects and Unicode objects to be used wherever QString instances are expected The following variables are made available to the handwritten code int sipIsErrIf this is NULL then the code is being asked to check the type of the Python object The check must not have any side effects Otherwise the code is being asked to convert the Python object and a non zero value should be returned through this pointer if an error occurred during the conversion PyObject sipPyThis is the Python object to be converted type sipCppPtrThis is a pointer through which the address of the mapped type instance or zero if appropriate is returned Its value is undefined if sipIsErr is NULL The handwritten code must explicitly return an int that is either zero or non zero Its meaning depends on the value of sipIsErr If sipIsErr is NULL then a non zero value is returned if the Python object has a type that can be converted to the mapped type Otherwise zero is returned If sipIsErr is not NULL then a non zero value is returned if the mapped type instance returned through sipCppPtr was created on the heap Otherwise zero is returned The following example converts a Python list of numbers to a QValueList int instance ConvertToTypeCode See if we are just being asked to check the type of the Python object if sipIsErr NULL return PyList Check sipPy We map None to a pointer if sipPy Py None sipCppPtr There is nothing on the heap return Create the instance on the heap QValueList int qvl new QValueList int PyErr Clear for int i i PyList GET SIZE sipPy i qvl append PyInt AsLong PyList GET ITEM sipPy i if PyErr Occurred NULL Tidy up delete qvl Set the error flag sipIsErr 1 There is nothing on the heap return Return the instance on the heap sipCppPtr qvl The result is a pointer to an instance on the heap return 1 End 6 6 Copying Copying text End This directive is used to specify some arbitrary text that will be included at the start of all source files generated by SIP It is normally used to include copyright and licensing terms For example Copying Copyright c 2 4 Riverbank Computing Limited End 6 7 Doc Doc text End This directive is used to specify some arbitrary text that will be extracted by SIP when the d command line option is used The directive can be specified any number of times and SIP will concatenate all the separate pieces of text in the order that it sees them Documentation that is specified using this directive is local to the module in which it appears It is ignored by modules that Import it Use the ExportedDoc directive for documentation that should be included by all modules that Import this one For example Doc h1 An Example h1 p This fragment of documentation is HTML and is local to the module in which it is defined p End 6 8 End This isn t a directive in itself but is used to terminate a number of directives that allow a block of handwritten code or text to be specified 6 9 ExportedDoc ExportedDoc text End This directive is used to specify some arbitrary text that will be extracted by SIP when the d command line option is used The directive can be specified any number of times and SIP will concatenate all the separate pieces of text in the order that it sees them Documentation that is specified using this directive will also be included by modules that Import it For example ExportedDoc An Example This fragment of documentation is reStructuredText and will appear in the module in which it is defined and all modules that Import it End 6 1 Feature Feature name This directive is used to declare a feature Features along with Platforms and Timeline are used by the If directive to control whether or not parts of a specification are processed or ignored Features are mutually independent of each other any combination of features may be enabled or disable By default all features are enabled The SIP x command line option is used to disable a feature If a feature is enabled then SIP will automatically generate a corresponding C preprocessor symbol for use by handwritten code The symbol is the name of the feature prefixed by SIP FEATURE For example Feature FOO SUPPORT If FOO SUPPORT void foo End 6 11 If If expression specification End where expression ored qualifiers range ored qualifiers qualifier qualifier ored qualifiers qualifier feature platform range version version This directive is used in conjunction with features see Feature platforms see Platforms and versions see Timeline to control whether or not parts of a specification are processed or not A range of versions means all versions starting with the lower bound up to but excluding the upper bound If the lower bound is omitted then it is interpreted as being before the earliest version If the upper bound is omitted then it is interpreted as being after the latest version For example Feature SUPPORT FOO Platforms WIN32 PLATFORM POSIX PLATFORM MACOS PLATFORM Timeline V1 V1 1 V2 V3 If SUPPORT FOO Process this if the SUPPORT FOO feature is disabled End If POSIX PLATFORM MACOS PLATFORM Process this if either the POSIX PLATFORM or MACOS PLATFORM platforms are enabled End If V1 V2 Process this if either V1 or V1 1 is enabled End If V2 Process this if either V2 or V3 is enabled End If Always process this End Note that this directive is not implemented as a preprocessor Only the following parts of a specification are affected by it class ConvertFromTypeCode ConvertToSubClassCode ConvertToTypeCodeenumfunctions If MappedType MethodCode ModuleCode ModuleHeaderCodenamespacestructtypedef TypeCode TypeHeaderCodevariables VirtualCatcherCode Also note that the only way to specify the logical and of qualifiers is to use nested If directives 6 12 Import Import filename This directive is used to import the specification of another module This is needed if the current module makes use of any types defined in the imported module e g as an argument to a function or to sub class If filename cannot be opened then SIP prepends filename with the name of the directory containing the current specification file i e the one containing the Import directive and tries again If this also fails then SIP prepends filename with each of the directories in turn specified by the I command line option For example Import qt qtmod sip 6 13 Include Include filename This directive is used to include contents of another file as part of the specification of the current module It is the equivalent of the C preprocessor s include directive and is used to structure a large module specification into manageable pieces Include follows the same search process as Import when trying to open filename For example Include qwidget sip 6 14 License License license annotations This directive is used to specify the contents of an optional license dictionary The license dictionary is called license and is stored in the module dictionary The elements of the dictionary are specified using the Licensee Signature Timestamp and Type annotations Only the Type annotation is compulsory Note that this directive isn t an attempt to impose any licensing restrictions on a module It is simply a method for easily embedding licensing information in a module so that it is accessible to Python scripts For example License Type GPL 6 15 MappedType MappedType type header code convert to code convert from code This directive is used to define an automatic mapping between a C or C type and a Python type The C C type being mapped must be either a structure a class or a template Mapped types are the only way SIP supports templates header code is the TypeHeaderCode used to specify the library interface to the type being mapped convert to code is the ConvertToTypeCode used to specify the handwritten code that converts a Python object to an instance of the mapped type convert from code is the ConvertFromTypeCode used to specify the handwritten code that converts an instance of the mapped type to a Python object For example MappedType QValueList int TypeHeaderCode Include the library interface to the type being mapped include qvaluelist h End ConvertToTypeCode See the ConvertToTypeCode example for the code that converts a Python list of numbers to a QValueList int instance End ConvertFromTypeCode See the ConvertFromTypeCode example for the code that converts a QValueList int instance to a Python list of numbers End In this example we can use QValueList int throughout the module s specification files and in any module that imports this one The generated code will automatically map this to and from a Python list of numbers when appropriate 6 16 MethodCode MethodCode code End This directive is used as part of the specification of a global function class method operator constructor or destructor to specify handwritten code that replaces the normally generated call to the function being wrapped It is usually used to handle argument types and results that SIP cannot deal with automatically The specified code is embedded in line after the function s arguments have been successfully converted from Python objects to their C or C equivalents The specified code must not include any return statements The the context of a destructor the specified code is embedded in line in the Python type s deallocation function The specified code must also handle the Python Global Interpreter Lock GIL If compatibility with SIP v3 x is required then the GIL must be released immediately before the C call and reacquired immediately afterwards as shown in this example fragment Py BEGIN ALLOW THREADS sipCpp foo Py END ALLOW THREADS If compatibility with SIP v3 x is not required then this is optional but should be done if the C function might block the current thread or take a significant amount of time to execute See the ReleaseGIL annotation The following variables are made available to the handwritten code type a There is a variable for each argument of the Python signature excluding any self argument named a a1 etc The type of the variable is the same as the type defined in the specification with the following exceptions if the argument is only used to return a value e g it is an int without an In annotation then the type has one less level of indirection e g it will be an int if the argument is a structure or class or a reference or a pointer to a structure or class then type will always be a pointer to the structure or class Note that handwritten code for destructors never has any arguments PyObject a WrapperThis variable is made available only if the corresponding argument wraps a C structure or C class instance and the GetWrapper annotation is specified The variable is a pointer to the Python object that wraps the argument type sipCppIf the directive is used in the context of a class constructor then this must be set by the handwritten code to the constructed instance In any other class context then this is a pointer to the class instance Its type is a pointer to the structure or class int sipIsErrThe handwritten code should set this to a non zero value and raise an appropriate Python exception if an error is detected sipIsErr is not provided for destructors type sipResThe handwritten code should set this to the result to be returned The type of the variable is the same as the type defined in the Python signature in the specification with the following exception if the argument is a structure or class or a reference or a pointer to a structure or class then type will always be a pointer to the structure or class sipRes is not provided for inplace operators e g or imul as their results are handled automatically nor for class constructors PyObject sipSelfIf the directive is used in the context of a class method then this is the Python object that wraps the the structure or class instance i e self For example class Klass public int foo SIP PYTUPLE MethodCode The C API takes a 2 element array of integers but passing a two element tuple is more Pythonic int iarr 2 if PyArg ParseTuple a ii iarr iarr 1 Py BEGIN ALLOW THREADS sipRes sipCpp Klass foo iarr Py END ALLOW THREADS else PyArg ParseTuple will have raised the exception sipIsErr 1 End Note the use of the fully scoped method name in the example i e Klass foo rather than just foo This is required for virtual methods 8 in order to avoid virtual call loops but is a good habit to get into for all public methods If a method is in the protected section of a C class then the call should instead be sipRes sipCpp sipProtect foo iarr 8 See VirtualCatcherCode for a description of how SIP generated code handles the reimplementation of C virtual methods in Python 6 17 Module Module name version This directive is used to identify that the library being wrapped is a C library and to define the name of the module and it s optional version number The optional version number is useful if you or others might create other modules that build on this module i e if another module might Import this module Under the covers a module exports an API that is used by modules that Import it and the API is given a version number A module built on that module knows the version number of the API that it is expecting If when the modules are imported at run time the version numbers do not match then a Python exception is raised The dependent module must then be re built using the correct specification files for the base module The version number should be incremented whenever a module is changed Some changes don t affect the exported API but it is good practice to change the version number anyway For example Module qt 5 6 18 ModuleCode ModuleCode code End This directive is used to specify handwritten code typically the implementations of utility functions that can be called by other handwritten code in the module For example ModuleCode Print an object on stderr for debugging purposes void dump object PyObject o PyObject Print o stderr fprintf stderr n End See also ModuleHeaderCode 6 19 ModuleHeaderCode ModuleHeaderCode code End This directive is used to specify handwritten code typically the declarations of utility functions that is placed in a header file that is included by all generated code For example ModuleHeaderCode void dump object PyObject o End See also ModuleCode 6 2 OptionalInclude OptionalInclude filename This directive is identical to the Include directive except that SIP silently continues processing if filename could not be opened For example OptionalInclude license sip 6 21 Platforms Platforms name name This directive is used to declare a set of platforms Platforms along with Feature and Timeline are used by the If directive to control whether or not parts of a specification are processed or ignored Platforms are mutually exclusive only one platform can be enabled at a time By default all platforms are disabled The SIP t command line option is used to enable a platform For example Platforms WIN32 PLATFORM POSIX PLATFORM MACOS PLATFORM If WIN32 PLATFORM void undocumented End If POSIX PLATFORM void documented End 6 22 PostInitialisationCode PostInitialisationCode code End This directive is used to specify handwritten code that is embedded in line at the very end of the generated module initialisation code For example PostInitialisationCode The code will be executed when the module is first imported and after all other initialisation has been completed End 6 23 Timeline Timeline name name This directive is used to declare a set of versions released over a period of time Versions along with Feature and Platforms are used by the If directive to control whether or not parts of a specification are processed or ignored Versions are mutually exclusive only one version can be enabled at a time By default all versions are disabled The SIP t command line option is used to enable a version For example Timeline V1 V1 1 V2 V3 If V1 V2 void foo End If V2 void foo int End 6 24 TypeCode TypeCode code End This directive is used as part of the specification of a C structure or a C class to specify handwritten code typically the implementations of utility functions that can be called by other handwritten code in the structure or class For example class Klass TypeCode Print an instance on stderr for debugging purposes static void dump klass const Klass k fprintf stderr Klass s at p n k name k End The rest of the class specification Because the scope of the code is normally within the generated file that implements the type any utility functions would normally be declared static However a naming convention should still be adopted to prevent clashes of function names within a module in case the SIP j command line option is used 6 25 TypeHeaderCode TypeHeaderCode code End This directive is used to specify handwritten code that defines the interface to a C or C type being wrapped either a structure a class or a template It is used within a class definition or a MappedType directive Normally code will be a pre processor include statement For example Wrap the Klass class class Klass TypeHeaderCode include klass h End The rest of the class specification 6 26 VirtualCatcherCode VirtualCatcherCode code End For most classes there are corresponding generated derived classes that contain reimplementations of the class s virtual methods These methods which SIP calls catchers determine if there is a corresponding Python reimplementation and call it if so If there is no Python reimplementation then the method in the original class is called instead This directive is used to specify handwritten code that replaces the normally generated call to the Python reimplementation and the handling of any returned results It is usually used to handle argument types and results that SIP cannot deal with automatically This directive can also be used in the context of a class destructor to specify handwritten code that is embedded in line in the internal derived class s destructor In the context of a method the Python Global Interpreter Lock GIL is automatically acquired before the specified code is executed and automatically released afterwards In the context of a destructor the specified code must handle the GIL The GIL must be acquired before any calls to the Python API and released after the last call as shown in this example fragment SIP BLOCK THREADS Py DECREF obj SIP UNBLOCK THREADS The following variables are made available to the handwritten code in the context of a method type a There is a variable for each argument of the C signature named a a1 etc The type of the variable is the same as the type defined in the specification int sipIsErrThe handwritten code should set this to a non zero value and raise an appropriate Python exception if an error is detected PyObject sipMethodThis object is the Python reimplementation of the virtual C method It is normally passed to sipCallMethod type sipResThe handwritten code should set this to the result to be returned The type of the variable is the same as the type defined in the C signature in the specification No variables are made available in the context of a destructor For example class Klass public virtual int foo SIP PYTUPLE int int MethodCode The C API takes a 2 element array of integers but passing a two element tuple is more Pythonic int iarr 2 if PyArg ParseTuple a ii iarr iarr 1 Py BEGIN ALLOW THREADS sipRes sipCpp Klass foo iarr Py END ALLOW THREADS else PyArg ParseTuple will have raised the exception sipIsErr 1 End VirtualCatcherCode Convert the 2 element array of integers to the two element tuple PyObject itup if itup Py BuildValue ii a a 1 NULL Call the Python method and get the result object PyObject result sipCallMethod sipIsErr R itup if result NULL Convert the result to the C type sipParseResult sipIsErr i sipRes Py DECREF result Py DECREF itup else Py BuildValue will have raised the exception sipIsErr 1 End 7 SIP Annotations In this section we describe each of the annotations that can be used in specification files Annotations can either be argument annotations function annotations or license annotations depending on the context in which they can be used Annotations are placed between forward slashes Multiple annotations are comma separated within the slashes Annotations have a type and possibly a value The type determines the format of the value The name of an annotation and its value are separated by Annotations can have one of the following types booleanThis type of annotation has no value and is implicitly true nameThe value is a name that is compatible with a C C identifier In some cases the value is optional stringThe value is a double quoted string The following example shows argument and function annotations void exec QWidget Transfer ReleaseGIL PyName call exec Note that the current version of SIP does not complain about unknown annotations or annotations used out of their correct context 7 1 Argument Annotations 7 1 1 AllowNone This boolean annotation specifies that the value of the corresponding argument which should be either SIP PYDICT SIP PYLIST SIP PYSLICE or SIP PYTUPLE may be None 7 1 2 Array This boolean annotation specifies that the corresponding argument which should be either char or unsigned char refers to an array rather than a terminated string There must be a corresponding argument with the ArraySize annotation specified The annotation may only be specified once in a list of arguments 7 1 3 ArraySize This boolean annotation specifies that the corresponding argument which should be either short unsigned short int unsigned long or unsigned long refers to the size of an array There must be a corresponding argument with the Array annotation specified The annotation may only be specified once in a list of arguments 7 1 4 Constrained Python will automatically convert between certain compatible types For example if a floating pointer number is expected and an integer supplied then the integer will be converted appropriately This can cause problems when wrapping C or C functions with similar signatures For example The wrapper for this function will also accept an integer argument which Python will automatically convert to a floating point number void foo double The wrapper for this function will never get used void foo int This boolean annotation specifies that the corresponding argument which should be either int float or double must match the type without any automatic conversions The following example gets around the above problem The wrapper for this function will only accept floating point numbers void foo double Constrained The wrapper for this function will be used for anything that Python can convert to an integer except for floating point numbers void foo int 7 1 5 GetWrapper This boolean annotation is only ever used in conjunction with handwritten code specified with the MethodCode directive It causes an extra variable to be generated for the corresponding argument which should be a wrapped C structure or C class instance which is a pointer to the Python object that wraps the argument See the MethodCode directive for more detail 7 1 6 In This boolean annotation is used to specify that the corresponding argument which should be a pointer type is used to pass a value to the function For pointers to wrapped C structures or C class instances char and unsigned char then this annotation is assumed unless the Out annotation is specified For pointers to other types then this annotation must be explicitly specified if required The argument will be dereferenced to obtain the actual value Both In and Out may be specified for the same argument 7 1 7 Out This boolean annotation is used to specify that the corresponding argument which should be a pointer type is used by the function to return a value as an element of a tuple For pointers to wrapped C structures or C class instances char and unsigned char then this annotation must be explicitly specified if required For pointers to other types then this annotation is assumed unless the In annotation is specified Both In and Out may be specified for the same argument 7 1 8 Transfer This boolean annotation is used to specify that ownership of the corresponding argument which should be a wrapped C structure or C class instance is transferred from Python to C See Ownership of Objects for more detail 7 1 9 TransferBack This boolean annotation is used to specify that ownership of the corresponding argument which should be a wrapped C structure or C class instance is transferred back to Python from C Note that this can also be used as a function annotation In this context ownership of the value returned by the function is transferred back to Python See Ownership of Objects for more detail 7 1 1 TransferThis This boolean annotation is only used in C constructors It specifies that ownership of the instance being constructed is transferred from Python to C if the corresponding argument which should be a wrapped C structure or C class instance is not None See Ownership of Objects for more detail 7 2 Function Annotations 7 2 1 AutoGen This optional name annotation is used with class methods to specify that the method be automatically included in all sub classes The value is the name of a feature specified using the Feature directive which must be enabled for the method to be generated 7 2 2 Default This boolean annotation is only used with C constructors Sometimes SIP needs to create a class instance By default it uses a constructor with no compulsory arguments if one is specified SIP will automatically generate a constructor with no arguments if no constructors are specified This annotation is used to explicitly specify which constructor to use Zero is passed as the value of any arguments to the constructor 7 2 3 Factory This boolean annotation specifies that the value returned by the function which should be a wrapped C structure or C class instance is owned by Python see Ownership of Objects Normally returned values unless they are new references to already wrapped values are owned by C 7 2 4 NewThread This boolean annotation specifies that the function will create a new thread 7 2 5 PostHook This name annotation is used to specify the name of a Python builtin that is called immediately after call to the underlying C or C function or any handwritten code The builtin is not called if an error occurred It is primarily used to integrate with debuggers 7 2 6 PreHook This name annotation is used to specify the name of a Python builtin that is called immediately after the function s arguments have been successfully parsed and before the call to the underlying C or C function or any handwritten code It is primarily used to integrate with debuggers 7 2 7 PyName Python keywords cannot be used as Python function or method names This name annotation specifies an alternative name for the function being wrapped which is used when calling the function from Python 7 2 8 ReleaseGIL This boolean annotation specifies that the Python Global Interpreter Lock GIL is automatically released before the call to the underlying C or C function and reacquired afterwards It should be used for functions that might block or take a significant amount of time to execute 7 3 License Annotations 7 3 1 Licensee This optional string annotation specifies the license s licensee No restrictions are placed on the contents of the string See the License directive 7 3 2 Signature This optional string annotation specifies the license s signature No restrictions are placed on the contents of the string See the License directive 7 3 3 Timestamp This optional string annotation specifies the license s timestamp No restrictions are placed on the contents of the string See the License directive 7 3 4 Type This string annotation specifies the license s type No restrictions are placed on the contents of the string See the License directive 8 SIP API for Handwritten Code In this section we describe the API that can be used by handwritten code in specification files 8 1 SIP API MAJOR NR This is a C preprocessor symbol that defines the major number of the SIP API Its value is a number There is no direct relationship between this and the SIP version number 8 2 SIP API MINOR NR This is a C preprocessor symbol that defines the minor number of the SIP API Its value is a number There is no direct relationship between this and the SIP version number 8 3 SIP BUILD This is a C preprocessor symbol that defines a unique SIP build identifier represented as a string 8 4 SIP VERSION This is a C preprocessor symbol that defines the SIP version number represented as a 3 part hexadecimal number e g v4 is represented as x 4 8 5 SIP VERSION STR This is a C preprocessor symbol that defines the SIP version number represented as a string For development snapshots it will start with snapshot 8 6 sipBadCatcherResult void sipBadCatcherResult PyObject method This is raises a Python exception when the result of a Python reimplementation of a C method doesn t have the expected type It is normally called by handwritten code specified with the VirtualCatcherCode directive method is the Python method and would normally be the supplied sipMethod 8 7 sipBadLengthForSlice void sipBadLengthForSlice int seqlen int slicelen This raises a Python exception when the length of a slice object is inappropriate for a sequence like object It is normally called by handwritten code specified for setitem methods seqlen is the length of the sequence slicelen is the length of the slice 8 8 sipBuildResult PyObject sipBuildResult int iserr char format This creates a Python object based on a format string and associated values in a similar way to the Python Py BuildValue function If there was an error then NULL is returned and a Python exception is raised If iserr is not NULL then the location it points to is set to a non zero value format is the string of format characters If format begins and ends with parentheses then a tuple of objects is created If format contains more than one format character then parentheses must be specified In the following description the first letter is the format character the entry in parentheses is the Python object type that the format character will create and the entry in brackets are the types of the C C values to be passed a string char int Convert a C C character array and its length to a Python string If the character array is NULL then the length is ignored and the result is Py None b boolean int Convert a C C int to a Python boolean c string char Convert a C C char to a Python string d float double Convert a C C double to a Python floating point number e integer enum Convert a C C enum to a Python integer f float float Convert a C C float to a Python floating point number h integer short Convert a C C short to a Python integer i integer int Convert a C C int to a Python integer l integer long Convert a C C long to a Python integer s string char Convert a C C terminated string to a Python string If the string pointer is NULL then the result is Py None M wrapped instance type sipWrapperType Convert a C structure or a C class instance to a Python class instance object If the structure or class instance has already been wrapped then the result is a new reference to the existing class instance object The Python class is influenced by any applicable ConvertToSubClassCode code N wrapped instance type sipWrapperType Convert a C structure or a C class instance to a Python class instance object This should not be used if the structure or class instance might already have been wrapped The Python class is influenced by any applicable ConvertToSubClassCode code It is recommended that handwritten code use the M format character instead O wrapped instance type sipWrapperType Convert a C structure or a C class instance to a Python class instance object If the structure or class instance has already been wrapped then the result is a new reference to the existing class instance object It is recommended that handwritten code use the M format character instead P wrapped instance type sipWrapperType Convert a C structure or a C class instance to a Python class instance object This should not be used if the structure or class instance might already have been wrapped It is recommended that handwritten code use the M format character instead R object PyObject The result is value passed without any conversions The reference count is unaffected i e a reference is taken S object PyObject The result is value passed without any conversions The reference count is incremented T object void PyObject void cppptr Convert a C structure or a C class instance to a Python object using a convertor function See Generated Type Convertors V sip voidptr void Convert a C C void Python sip voidptr object 8 9 sipCallMethod PyObject sipCallMethod int iserr PyObject method char format This calls a Python method passing a tuple of arguments based on a format string and associated values in a similar way to the Python PyObject CallObject function If there was an error then NULL is returned and a Python exception is raised If iserr is not NULL then the location it points to is set to a non zero value method is the Python bound method to call format is the string of format characters see sipBuildResult This is normally called by handwritten code specified with the VirtualCatcherCode directive with method being the supplied sipMethod 8 1 sipClassName PyObject sipClassName PyObject obj This returns the class name of a wrapped instance as a Python string It comes with a reference 8 11 sipConnectRx PyObject sipConnectRx PyObject sender const char signal PyObject receiver const char slot This connects a signal to a signal or slot and returns Py True if the signal was connected or Py False if not If there was some other error then a Python exception is raised and NULL is returned sender is the wrapped QObject derived instance that emits the signal signal is the typed name of the signal receiver is the wrapped QObject derived instance or Python callable that the signal is connected to slot is the typed name of the slot or NULL if receiver is a Python callable It is normally only used by PyQt to implement QObject connect This is only available if Qt support is enabled 8 12 sipConvertFromSequenceIndex int sipConvertFromSequenceIndex int idx int len This converts a Python sequence index i e where a negative value refers to the offset from the end of the sequence to a C C array index If the index was out of range then a negative value is returned and a Python exception raised 8 13 sipConvertFromSliceObject int sipConvertFromSliceObject PyObject slice int length int start int stop int step int slicelength This is a thin wrapper around the Python PySlice GetIndicesEx function provided to make it easier to write handwritten code that is compatible with SIP v3 x and versions of Python earlier that v2 3 8 14 sipConvertToCpp void sipConvertToCpp PyObject obj sipWrapperType type int iserr This extracts the pointer to the C structure or C class instance from a wrapped instance object obj is the wrapped instance object if it is Py None then NULL is returned type is generated type corresponding to the C C type returned It may be any class in the object s class hierarchy If there is an error then the location iserr points to is set to a non zero value 8 15 sipDisconnectRx PyObject sipDisconnectRx PyObject sender const char signal PyObject receiver const char slot This disconnects a signal from a signal or slot and returns Py True if the signal was disconnected or Py False if not If there was some other error then a Python exception is raised and NULL is returned sender is the wrapped QObject derived instance that emits the signal signal is the typed name of the signal receiver is the wrapped QObject derived instance or Python callable that the signal is connected to slot is the typed name of the slot or NULL if receiver is a Python callable It is normally only used by PyQt to implement QObject disconnect This is only available if Qt support is enabled 8 16 sipEmitSignal int sipEmitSignal PyObject txobj const char signal PyObject args This emits a signal and returns zero if there was no error If there was an error then a Python exception is raised and a negative value is returned txobj is the wrapped QObject derived instance that emits the signal signal is the typed name of the signal args is a Python tuple of the signal arguments It is normally only used by PyQt to implement QObject emit This is only available if Qt support is enabled 8 17 sipFree void sipFree void mem This returns an area of memory allocated by sipMalloc to the heap mem is a pointer to the area of memory 8 18 sipGetSender void sipGetSender This returns a pointer to the last QObject instance that emitted a Qt signal It is normally only used by PyQt to implement QObject sender This is only available if Qt support is enabled 8 19 sipGetWrapper PyObject sipGetWrapper void cppptr sipWrapperType type This returns a borrowed reference to the wrapped instance object for a C structure or C class instance If the structure or class instance hasn t been wrapped then NULL is returned and no Python exception is raised cppptr is the pointer to the structure or class instance type is the generated type corresponding to the C C type 8 2 sipIntTypeClassMap This C structure is used with sipMapIntToClass to define a mapping between integer based RTTI and generated type objects The structure elements are as follows int typeIntThe integer RTTI sipWrapperType pyType A pointer to the corresponding Python type object 8 21 sipIsSubClassInstance int sipIsSubClassInstance PyObject obj sipWrapperType type This is a thin wrapper around the Python PyObject TypeCheck function provided to make it easier to write handwritten code that is compatible with SIP v3 x and versions of Python earlier that v2 2 8 22 sipMalloc void sipMalloc size t nbytes This allocates an area of memory of size nytes on the heap using the Python PyMem Malloc function If there was an error then NULL is returned and a Python exception raised See sipFree 8 23 sipMapIntToClass sipWrapperType sipMapIntToClass int type const sipIntTypeClassMap map int maplen This is used in ConvertToSubClassCode code as a convenient way of converting integer based RTTI to the corresponding Python type object type is the RTTI map is the table of known RTTI and the corresponding type objects see sipIntTypeClassMap The entries in the table must be sorted in ascending order of RTTI maplen is the number of entries in the table The corresponding Python type object is returned or NULL if type wasn t in map 8 24 sipMapStringToClass sipWrapperType sipMapStringToClass char type const sipStringTypeClassMap map int maplen This is used in ConvertToSubClassCode code as a convenient way of converting terminated string based RTTI to the corresponding Python type object type is the RTTI map is the table of known RTTI and the corresponding type objects see sipStringTypeClassMap The entries in the table must be sorted in ascending order of RTTI maplen is the number of entries in the table The corresponding Python type object is returned or NULL if type wasn t in map 8 25 sipParseResult int sipParseResult int iserr PyObject method PyObject result char format This converts a Python object usually returned by a method to C C based on a format string and associated values in a similar way to the Python PyArg ParseTuple function If there was an error then NULL is returned and a Python exception is raised If iserr is not NULL then the location it points to is set to a non zero value method is the Python bound method that returned the result object format is the string of format characters This is normally called by handwritten code specified with the VirtualCatcherCode directive with method being the supplied sipMethod and result being the value returned by sipCallMethod If format begins and ends with parentheses then result must be a Python tuple and the rest of format is applied to the tuple contents In the following description the first letter is the format character the entry in parentheses is the Python object type that the format character will convert and the entry in brackets are the types of the C C values to be passed a string char int Convert a Python string to a C C character array and its length If the Python object is Py None then the array and length are NULL and zero respectively b integer bool Convert a Python integer to a C C bool c string char Convert a Python string of length 1 to a C C char d float double Convert a Python floating point number to a C C double e integer enum Convert Python integer to a C C enum f float double Convert a Python floating point number to a C C float h integer short Convert a Python integer to a C C short i integer int Convert a Python integer to a C C int l integer long Convert a Python integer to a C C long s string char Convert a Python string to a C C terminated string If the Python object is Py None then the string is NULL L object type PyObject obj int iserr void Convert a Python object to a C structure or a C class instance using a convertor function See Generated Type Convertors M object type PyObject obj int iserr void Convert a Python object to a C structure or a C class instance using a convertor function If the structure or class instance pointer is NULL then return an error See Generated Type Convertors N object PyTypeObject PyObject A Python object is checked to see if it is a certain type and then returned without any conversions The reference count is incremented The Python object may be Py None O object PyObject A Python object is returned without any conversions The reference count is incremented T object PyTypeObject PyObject A Python object is checked to see if it is a certain type and then returned without any conversions The reference count is incremented The Python object may not be Py None V sip voidptr void Convert a Python sip voidptr object to a C C void Z object Check that a Python object is Py None No value is returned 8 26 sipStringTypeClassMap This C structure is used with sipMapStringToClass to define a mapping between terminated string based RTTI and generated type objects The structure elements are as follows char typeStringThe terminated string RTTI sipWrapperType pyType A pointer to the corresponding Python type object 8 27 sipTransfer void sipTransfer PyObject obj int tocpp This transfers ownership of a Python wrapped instance either to or from Python see Ownership of Objects obj is the wrapped instance If tocpp is non zero then ownership is transfered from Python to C C If tocpp is zero then ownership is transfered from C C to Python 8 28 sipWrapperType This is a C structure that represents a SIP generated type object It is an extension of the Python PyTypeObject structure which is itself an extension of the Python PyObject structure and so may be safely cast to PyTypeObject and PyObject 8 29 Generated Type Convertors SIP generates functions for all types being wrapped including mapped types defined with the MappedType directive that convert a Python object to the C structure or C class instance The name of this convertor is the name of the structure or class prefixed by sipForceConvertTo void sipForceConvertTo class PyObject obj int iserr obj is the Python object to convert If obj is NULL or the location pointed to by iserr is non zero then the conversion is not attempted and NULL is returned If there was an error then the location pointed to by iserr is set to a non zero value a Python exception is raised and NULL is returned SIP also generates functions for mapped types that convert a C structure or C class instance to a Python object The name of this convertor is the name of the structure or class prefixed by sipConvertFrom PyObject sipConvertFrom class void cppptr cppptr is a pointer to the C structure or C class instance to convert If there was an error then NULL is returned and a Python exception raised The convertor functions of all imported types are available to handwritten code 8 3 Generated Type Objects SIP generates a type object for each C structure or C class being wrapped These are sipWrapperType structures and are used extensively by the SIP API These objects are named with the structure or class name prefixed by sipClass For example the type object for class Klass is sipClass Klass The type objects of all imported classes are available to handwritten code 8 31 Generated Derived Classes For most C classes being wrapped SIP generates a derived class with the same name prefixed by sip For example the derived class for class Klass is sipKlass If a C class doesn t have any virtual or protected methods in it or any of it s super class hierarchy or does not emit any Qt signals then a derived class is not generated Most of the time handwritten code should ignore the derived classes The only exception is that handwritten constructor code specified using the MethodCode directive should call the derived class s constructor which has the same C signature rather then the wrapped class s constructor 9 Using the SIP Module in Applications The main purpose of the SIP module is to provide functionality common to all SIP generated bindings It is loaded automatically and most of the time you will completely ignore it However it does expose some functionality that can be used by applications settracemask mask If the bindings have been created with SIP s r command line option then the generated code will produce debugging statements that trace the execution of the code It is particularly useful when trying to understand the operation of a C library s virtual function calls Debugging statements are generated at the following points in a C virtual function mask is x 1 in a C constructor mask is x 2 in a C destructor mask is x 4 in a Python type s init method mask is x 8 in a Python type s del method mask is x 1 in a Python type s ordinary method mask is x 2 By default the trace mask is zero and all debugging statements are disabled transfer obj direction Ownership of the wrapped C C structure or class instance obj i e the responsibility for deallocating it is transferred to the C C library if direction is non zero or to the Python extension module if direction is zero unwrapinstance obj Return the address as a number of the wrapped C C structure or class instance obj wrapinstance addr type A C C structure or class instance is wrapped and the Python object created is returned If the instance has already been wrapped then a new reference to the existing object is returned addr is the address of the instance represented as a number type is the type of the object e g qt QWidget 1 The SIP Build System The purpose of the build system is to make it easy for you to write configuration scripts in Python for your own bindings The build system takes care of the details of particular combinations of platform and compiler It supports over 5 different platform compiler combinations The build system is implemented as a pure Python module called sipconfig that contains a number of classes and functions Using this module you can write bespoke configuration scripts e g PyQt s configure py or use it with other Python based build systems e g Distutils and SCons An important feature of SIP is the ability to generate bindings that are built on top of existing bindings For example both PyKDE and PyQwt are built on top of PyQt but all three packages are maintained by different developers To make this easier PyQt includes its own configuration module pyqtconfig that contains additional classes intended to be used by the configuration scripts of bindings built on top of PyQt The SIP build system includes facilities that do a lot of the work of creating these additional configuration modules 1 1 sipconfig Functions create config module module template content This creates a configuration module e g pyqtconfig from a template file and a string module is the name of the configuration module file to create template is the name of the template file content is a string which replaces every occurence of the pattern SIP CONFIGURATION in the template file The content string is usually created from a Python dictionary using sipconfig create content create content dict dictname pkg config This converts a Python dictionary to a string that can be parsed by the Python interpreter and converted back to an equivalent dictionary It is typically used to generate the content string for sipconfig create config module dict is the Python dictionary to convert dictname is the optional name of the dictionary Returns the dictionary as a string error msg This displays an error message on stderr and calls sys exit with a value of 1 msg is the text of the message and should not include any newline characters format msg leftmargin rightmargin 78 This formats a message by inserting newline characters at appropriate places msg is the text of the message and should not include any newline characters leftmargin is the optional position of the left margin rightmargin is the optional position of the right margin inform msg This displays an information message on stdout msg is the text of the message and should not include any newline characters read version filename description numdefine None strdefine None This extracts version information for a package from a file usually a C or C header file The version information must each be specified as a define of a numeric hexadecimal or decimal value and or a string value filename is the name of the file to read description is a descriptive name of the package used in error messages numdefine is the optional name of the define of the version as a number If it is None then the numeric version is ignored strdefine is the optional name of the define of the version as a string If it is None then the string version is ignored Returns a tuple of the numeric and string versions sipconfig error is called if either were required but could not be found version to sip tag version tags description This converts a version number to a SIP version tag SIP uses the Timeline directive to define the chronology of the different versions of the C C library being wrapped Typically it is not necessary to define a version tag for every version of the library but only for those versions that affect the library s API as SIP sees it version is the numeric version number of the C C library being wrapped If it is negative then the latest version is assumed This is typically useful if a snapshot is indicated by a negative version number tags is the dictionary of SIP version tags keyed by the corresponding C C library version number The tag used is the one with the smallest key i e earliest version that is greater than version description is a descriptive name of the C C library used in error messages Returns the SIP version tag sipconfig error is called if the C C library version number did not correspond to a SIP version tag version to string v This converts a 3 part version number encoded as a hexadecimal value to a string v is the version number Returns a string 1 2 sipconfig Classes ConfigurationThis class encapsulates configuration values that can be accessed as instance objects A sub class may provide a dictionary of additional configuration values in its constructor the elements of which will have precedence over the super class s values The following configuration values are provided default bin dirThe name of the directory where executables should be installed by default default mod dirThe name of the directory where SIP generated modules should be installed by default default sip dirThe name of the base directory where the sip files for SIP generated modules should be installed by default A sub directory with the same name as the module should be created and its sip files should be installed in the sub directory The sip files only need to be installed if you might want to build other bindings based on them py inc dirThe name of the directory containing the Python h header file py lib dirThe name of the directory containing the Python interpreter library py versionThe Python version as a 3 part hexadecimal number e g v2 3 3 is represented as x 2 3 3 qt dirThe name of the Qt base directory The value is not present if Qt support is disabled qt editionThe name of the Qt edition e g enterprise professional free The value is not present if Qt support is disabled qt inc dirThe name of the Qt include directory The value is not present if Qt support is disabled qt libThe name of the Qt library with platform dependent prefixes suffixes and version numbers removed e g qt qt mt The value is not present if Qt support is disabled qt lib dirThe name of the Qt library directory The value is not present if Qt support is disabled qt threadedA non zero value if the Qt library includes support for threads The value is not present if Qt support is disabled qt versionThe Qt version as a 3 part hexadecimal number e g v3 3 is represented as x 3 3 It is if Qt support is disabled qt winconfigA string describing the Qt configuration under Windows The value is not present if Qt support is disabled sip binThe full pathname of the SIP executable sip inc dirThe name of the directory containing the sip h header file sip mod dirThe name of the directory containing the SIP module sip versionThe SIP version as a 3 part hexadecimal number e g v4 is represented as x 4 sip version strThe SIP version as a string For development snapshots it will start with snapshot init self sub cfg None Initialise the instance sub cfg is an optional list of sub class configurations It should only be used by the init method of a sub class to append its own dictionary of configuration values before passing the list to its super class MakefileThis class encapsulates a Makefile It is intended to be sub classed to generate Makefiles for particular purposes It handles all platform and compiler specific flags but allows them to be adjusted to suit the requirements of a particular module or program These are defined using a number of macros which can be accessed as instance objects The following instance objects are provided to help in fine tuning the generated Makefile chkdirA string that will check for the existence of a directory configA reference to the configuration argument that was passed to the constructor consoleA reference to the console argument that was passed to the constructor copyA string that will copy a file extra cflagsA list of additional flags passed to the C compiler extra cxxflagsA list of additional flags passed to the C compiler extra definesA list of additional macro names passed to the C C preprocessor extra include dirsA list of additional include directories passed to the C C preprocessor extra lflagsA list of additional flags passed to the linker extra lib dirsA list of additional library directories passed to the linker extra libsA list of additional libraries passed to the linker The names of the libraries must be in platform neutral form i e without any platform specific prefixes version numbers or extensions generatorA string that defines the platform specific style of Makefile The only supported values are UNIX and something else that is not UNIX mkdirA string that will create a directory rmA string that will remove a file init self configuration console qt opengl python threaded warnings None debug dir None makefile Makefile installs None Initialise the instance configuration is the current configuration and is an instance of the Configuration class or a sub class console is set if the target is a console rather than GUI target This only affects Windows and is ignored on other platforms qt is set if the target uses Qt opengl is set if the target uses OpenGL python is set if the target uses Python h threaded is set if the target requires thread support It is set automatically if the target uses Qt and Qt has thread support enabled warnings is set if compiler warning messages should be enabled The default of None means that warnings are enabled for SIP v4 x and disabled for SIP v3 x debug is set if debugging symbols should be generated dir is the name of the directory where build files are read from and Makefiles are written to The default of None means the current directory is used makefile is the name of the generated Makefile installs is a list of extra install targets Each element is a two part list the first of which is the source and the second is the destination If the source is another list then it is a list of source files and the destination is a directory clean build file objects self mfile build This generates the Makefile commands that will remove any files generated during the build of the default target mfile is the Python file object of the Makefile build is the dictionary created from parsing the build file finalise self This is called just before the Makefile is generated to ensure that it is fully configured It must be reimplemented by a sub class generate self This generates the Makefile generate macros and rules self mfile This is the default implementation of the Makefile macros and rules generation mfile is the Python file object of the Makefile generate target clean self mfile This is the default implementation of the Makefile clean target generation mfile is the Python file object of the Makefile generate target default self mfile This is the default implementation of the Makefile default target generation mfile is the Python file object of the Makefile generate target install self mfile This is the default implementation of the Makefile install target generation mfile is the Python file object of the Makefile install file self mfile src dst This generates the Makefile commands to install one or more files to a directory mfile is the Python file object of the Makefile src is the name of a single file to install or a list of a number of files to install dst is the name of the destination directory optional list self name This returns an optional Makefile macro as a list name is the name of the macro Returns the macro as a list optional string self name default This returns an optional Makefile macro as a string name is the name of the macro default is the optional default value of the macro Returns the macro as a string parse build file self filename This parses a build file created with the b SIP command line option filename is the name of the build file Returns a dictionary corresponding to the parsed build file platform lib self clib This converts a library name to a platform specific form clib is the name of the library in cannonical form Return the platform specific name ready self This is called to ensure that the Makefile is fully configured It is normally called automatically when needed required string self name This returns a required Makefile macro as a string name is the name of the macro Returns the macro as a string An exception is raised if the macro does not exist or has an empty value ModuleMakefile Makefile This class encapsulates a Makefile to build a generic Python extension module init self configuration build file install dir None static console opengl threaded warnings None debug dir None makefile Makefile installs None Initialise the instance configuration see sipconfig Makefile init build file is the name of the build file Build files are generated using the b SIP command line option install dir is the name of the directory where the module will be optionally installed static is set if the module should be built as a static library console see sipconfig Makefile init qt see sipconfig Makefile init opengl see sipconfig Makefile init threaded see sipconfig Makefile init warnings see sipconfig Makefile init debug see sipconfig Makefile init dir see sipconfig Makefile init makefile see sipconfig Makefile init installs see sipconfig Makefile init finalise self This is a reimplementation of sipconfig Makefile finalise generate macros and rules self mfile This is a reimplementation of sipconfig Makefile generate macros and rules generate target clean self mfile This is a reimplementation of sipconfig Makefile generate target clean generate target default self mfile This is a reimplementation of sipconfig Makefile generate target default generate target install self mfile This is a reimplementation of sipconfig Makefile generate target install module as lib self mname This returns the name of a SIP v3 x module for when it is used as a library to be linked against An exception will be raised if it is used with SIP v4 x modules mname is the name of the module Returns the corresponding library name ParentMakefile Makefile This class encapsulates a Makefile that sits above a number of other Makefiles in sub directories init self configuration subdirs dir None makefile Makefile installs None Initialise the instance configuration see sipconfig Makefile init subdirs is the sequence of sub directories dir see sipconfig Makefile init makefile see sipconfig Makefile init installs see sipconfig Makefile init generate macros and rules self mfile This is a reimplementation of sipconfig Makefile generate macros and rules generate target clean self mfile This is a reimplementation of sipconfig Makefile generate target clean generate target default self mfile This is a reimplementation of sipconfig Makefile generate target default generate target install self mfile This is a reimplementation of sipconfig Makefile generate target install ProgramMakefile Makefile This class encapsulates a Makefile to build an executable program init self configuration build file None install dir None console qt opengl python threaded warnings None debug dir None makefile Makefile installs None Initialise the instance configuration see sipconfig Makefile init build file is the name of the optional build file Build files are generated using the b SIP command line option install dir is the name of the directory where the executable program will be optionally installed console see sipconfig Makefile init qt see sipconfig Makefile init opengl see sipconfig Makefile init python see sipconfig Makefile init threaded see sipconfig Makefile init warnings see sipconfig Makefile init debug see sipconfig Makefile init dir see sipconfig Makefile init makefile see sipconfig Makefile init installs see sipconfig Makefile init build command self source This creates a single command line that will create an executable program from a single source file source is the name of the source file Returns a tuple of the name of the executable that will be created and the command line finalise self This is a reimplementation of sipconfig Makefile finalise generate macros and rules self mfile This is a reimplementation of sipconfig Makefile generate macros and rules generate target clean self mfile This is a reimplementation of sipconfig Makefile generate target clean generate target default self mfile This is a reimplementation of sipconfig Makefile generate target default generate target install self mfile This is a reimplementation of sipconfig Makefile generate target install SIPModuleMakefile ModuleMakefile This class encapsulates a Makefile to build a SIP generated Python extension module finalise self This is a reimplementation of sipconfig Makefile finalise ", "_id": "http://www.ics.uci.edu/~dock/manuals/sip/sipref.html", "title": "sip - a tool for generating python bindings for c and c++ libraries", "html": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<meta name=\"generator\" content=\"Docutils 0.3.0: http://docutils.sourceforge.net/\" />\n<title>SIP - A Tool for Generating Python Bindings for C and C++ Libraries</title>\n<meta name=\"copyright\" content=\"Copyright (c) 2004 Riverbank Computing Limited\" />\n<link rel=\"stylesheet\" href=\"default.css\" type=\"text/css\" />\n</head>\n<body>\n<div class=\"document\" id=\"sip-a-tool-for-generating-python-bindings-for-c-and-c-libraries\">\n<h1 class=\"title\">SIP - A Tool for Generating Python Bindings for C and C++ Libraries</h1>\n<h2 class=\"subtitle\" id=\"reference-guide\">Reference Guide</h2>\n<table class=\"docinfo\" frame=\"void\" rules=\"none\">\n<col class=\"docinfo-name\" />\n<col class=\"docinfo-content\" />\n<tbody valign=\"top\">\n<tr><th class=\"docinfo-name\">Contact:</th>\n<td><a class=\"first last reference\" href=\"mailto:info&#64;riverbankcomputing.co.uk\">info&#64;riverbankcomputing.co.uk</a></td></tr>\n<tr><th class=\"docinfo-name\">Version:</th>\n<td>4.0.1</td></tr>\n<tr><th class=\"docinfo-name\">Copyright:</th>\n<td>Copyright (c) 2004 Riverbank Computing Limited</td></tr>\n</tbody>\n</table>\n<div class=\"contents topic\" id=\"contents\">\n<p class=\"topic-title\"><a name=\"contents\">Contents</a></p>\n<ul class=\"auto-toc simple\">\n<li><a class=\"reference\" href=\"#introduction\" id=\"id19\" name=\"id19\">1\u00a0\u00a0\u00a0Introduction</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#license\" id=\"id20\" name=\"id20\">1.1\u00a0\u00a0\u00a0License</a></li>\n<li><a class=\"reference\" href=\"#features\" id=\"id21\" name=\"id21\">1.2\u00a0\u00a0\u00a0Features</a></li>\n<li><a class=\"reference\" href=\"#sip-v3-x\" id=\"id22\" name=\"id22\">1.3\u00a0\u00a0\u00a0SIP v3.x</a></li>\n<li><a class=\"reference\" href=\"#sip-components\" id=\"id23\" name=\"id23\">1.4\u00a0\u00a0\u00a0SIP Components</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#installing-sip\" id=\"id24\" name=\"id24\">2\u00a0\u00a0\u00a0Installing SIP</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#downloading-sip\" id=\"id25\" name=\"id25\">2.1\u00a0\u00a0\u00a0Downloading SIP</a></li>\n<li><a class=\"reference\" href=\"#configuring-sip\" id=\"id26\" name=\"id26\">2.2\u00a0\u00a0\u00a0Configuring SIP</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#configuring-sip-using-mingw\" id=\"id27\" name=\"id27\">2.2.1\u00a0\u00a0\u00a0Configuring SIP Using MinGW</a></li>\n<li><a class=\"reference\" href=\"#configuring-sip-using-the-borland-c-compiler\" id=\"id28\" name=\"id28\">2.2.2\u00a0\u00a0\u00a0Configuring SIP Using the Borland C++ Compiler</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#building-sip\" id=\"id29\" name=\"id29\">2.3\u00a0\u00a0\u00a0Building SIP</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#using-sip\" id=\"id30\" name=\"id30\">3\u00a0\u00a0\u00a0Using SIP</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#a-simple-c-example\" id=\"id31\" name=\"id31\">3.1\u00a0\u00a0\u00a0A Simple C++ Example</a></li>\n<li><a class=\"reference\" href=\"#id9\" id=\"id32\" name=\"id32\">3.2\u00a0\u00a0\u00a0A Simple C Example</a></li>\n<li><a class=\"reference\" href=\"#a-more-complex-c-example\" id=\"id33\" name=\"id33\">3.3\u00a0\u00a0\u00a0A More Complex C++ Example</a></li>\n<li><a class=\"reference\" href=\"#ownership-of-objects\" id=\"id34\" name=\"id34\">3.4\u00a0\u00a0\u00a0Ownership of Objects</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#the-sip-command-line\" id=\"id35\" name=\"id35\">4\u00a0\u00a0\u00a0The SIP Command Line</a></li>\n<li><a class=\"reference\" href=\"#sip-specification-files\" id=\"id36\" name=\"id36\">5\u00a0\u00a0\u00a0SIP Specification Files</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#syntax-definition\" id=\"id37\" name=\"id37\">5.1\u00a0\u00a0\u00a0Syntax Definition</a></li>\n<li><a class=\"reference\" href=\"#additional-sip-types\" id=\"id38\" name=\"id38\">5.2\u00a0\u00a0\u00a0Additional SIP Types</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#sip-pycallable\" id=\"id39\" name=\"id39\">5.2.1\u00a0\u00a0\u00a0SIP_PYCALLABLE</a></li>\n<li><a class=\"reference\" href=\"#sip-pydict\" id=\"id40\" name=\"id40\">5.2.2\u00a0\u00a0\u00a0SIP_PYDICT</a></li>\n<li><a class=\"reference\" href=\"#sip-pylist\" id=\"id41\" name=\"id41\">5.2.3\u00a0\u00a0\u00a0SIP_PYLIST</a></li>\n<li><a class=\"reference\" href=\"#sip-pyobject\" id=\"id42\" name=\"id42\">5.2.4\u00a0\u00a0\u00a0SIP_PYOBJECT</a></li>\n<li><a class=\"reference\" href=\"#sip-pytuple\" id=\"id43\" name=\"id43\">5.2.5\u00a0\u00a0\u00a0SIP_PYTUPLE</a></li>\n<li><a class=\"reference\" href=\"#sip-pyslice\" id=\"id44\" name=\"id44\">5.2.6\u00a0\u00a0\u00a0SIP_PYSLICE</a></li>\n<li><a class=\"reference\" href=\"#sip-qobject\" id=\"id45\" name=\"id45\">5.2.7\u00a0\u00a0\u00a0SIP_QOBJECT</a></li>\n<li><a class=\"reference\" href=\"#sip-rxobj-con\" id=\"id46\" name=\"id46\">5.2.8\u00a0\u00a0\u00a0SIP_RXOBJ_CON</a></li>\n<li><a class=\"reference\" href=\"#sip-rxobj-dis\" id=\"id47\" name=\"id47\">5.2.9\u00a0\u00a0\u00a0SIP_RXOBJ_DIS</a></li>\n<li><a class=\"reference\" href=\"#sip-signal\" id=\"id48\" name=\"id48\">5.2.10\u00a0\u00a0\u00a0SIP_SIGNAL</a></li>\n<li><a class=\"reference\" href=\"#sip-slot\" id=\"id49\" name=\"id49\">5.2.11\u00a0\u00a0\u00a0SIP_SLOT</a></li>\n<li><a class=\"reference\" href=\"#sip-slot-con\" id=\"id50\" name=\"id50\">5.2.12\u00a0\u00a0\u00a0SIP_SLOT_CON()</a></li>\n<li><a class=\"reference\" href=\"#sip-slot-dis\" id=\"id51\" name=\"id51\">5.2.13\u00a0\u00a0\u00a0SIP_SLOT_DIS()</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#sip-directives\" id=\"id52\" name=\"id52\">6\u00a0\u00a0\u00a0SIP Directives</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#accesscode\" id=\"id53\" name=\"id53\">6.1\u00a0\u00a0\u00a0%AccessCode</a></li>\n<li><a class=\"reference\" href=\"#cmodule\" id=\"id54\" name=\"id54\">6.2\u00a0\u00a0\u00a0%CModule</a></li>\n<li><a class=\"reference\" href=\"#convertfromtypecode\" id=\"id55\" name=\"id55\">6.3\u00a0\u00a0\u00a0%ConvertFromTypeCode</a></li>\n<li><a class=\"reference\" href=\"#converttosubclasscode\" id=\"id56\" name=\"id56\">6.4\u00a0\u00a0\u00a0%ConvertToSubClassCode</a></li>\n<li><a class=\"reference\" href=\"#converttotypecode\" id=\"id57\" name=\"id57\">6.5\u00a0\u00a0\u00a0%ConvertToTypeCode</a></li>\n<li><a class=\"reference\" href=\"#copying\" id=\"id58\" name=\"id58\">6.6\u00a0\u00a0\u00a0%Copying</a></li>\n<li><a class=\"reference\" href=\"#doc\" id=\"id59\" name=\"id59\">6.7\u00a0\u00a0\u00a0%Doc</a></li>\n<li><a class=\"reference\" href=\"#end\" id=\"id60\" name=\"id60\">6.8\u00a0\u00a0\u00a0%End</a></li>\n<li><a class=\"reference\" href=\"#exporteddoc\" id=\"id61\" name=\"id61\">6.9\u00a0\u00a0\u00a0%ExportedDoc</a></li>\n<li><a class=\"reference\" href=\"#feature\" id=\"id62\" name=\"id62\">6.10\u00a0\u00a0\u00a0%Feature</a></li>\n<li><a class=\"reference\" href=\"#if\" id=\"id63\" name=\"id63\">6.11\u00a0\u00a0\u00a0%If</a></li>\n<li><a class=\"reference\" href=\"#import\" id=\"id64\" name=\"id64\">6.12\u00a0\u00a0\u00a0%Import</a></li>\n<li><a class=\"reference\" href=\"#include\" id=\"id65\" name=\"id65\">6.13\u00a0\u00a0\u00a0%Include</a></li>\n<li><a class=\"reference\" href=\"#id16\" id=\"id66\" name=\"id66\">6.14\u00a0\u00a0\u00a0%License</a></li>\n<li><a class=\"reference\" href=\"#mappedtype\" id=\"id67\" name=\"id67\">6.15\u00a0\u00a0\u00a0%MappedType</a></li>\n<li><a class=\"reference\" href=\"#methodcode\" id=\"id68\" name=\"id68\">6.16\u00a0\u00a0\u00a0%MethodCode</a></li>\n<li><a class=\"reference\" href=\"#module\" id=\"id69\" name=\"id69\">6.17\u00a0\u00a0\u00a0%Module</a></li>\n<li><a class=\"reference\" href=\"#modulecode\" id=\"id70\" name=\"id70\">6.18\u00a0\u00a0\u00a0%ModuleCode</a></li>\n<li><a class=\"reference\" href=\"#moduleheadercode\" id=\"id71\" name=\"id71\">6.19\u00a0\u00a0\u00a0%ModuleHeaderCode</a></li>\n<li><a class=\"reference\" href=\"#optionalinclude\" id=\"id72\" name=\"id72\">6.20\u00a0\u00a0\u00a0%OptionalInclude</a></li>\n<li><a class=\"reference\" href=\"#platforms\" id=\"id73\" name=\"id73\">6.21\u00a0\u00a0\u00a0%Platforms</a></li>\n<li><a class=\"reference\" href=\"#postinitialisationcode\" id=\"id74\" name=\"id74\">6.22\u00a0\u00a0\u00a0%PostInitialisationCode</a></li>\n<li><a class=\"reference\" href=\"#timeline\" id=\"id75\" name=\"id75\">6.23\u00a0\u00a0\u00a0%Timeline</a></li>\n<li><a class=\"reference\" href=\"#typecode\" id=\"id76\" name=\"id76\">6.24\u00a0\u00a0\u00a0%TypeCode</a></li>\n<li><a class=\"reference\" href=\"#typeheadercode\" id=\"id77\" name=\"id77\">6.25\u00a0\u00a0\u00a0%TypeHeaderCode</a></li>\n<li><a class=\"reference\" href=\"#virtualcatchercode\" id=\"id78\" name=\"id78\">6.26\u00a0\u00a0\u00a0%VirtualCatcherCode</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#sip-annotations\" id=\"id79\" name=\"id79\">7\u00a0\u00a0\u00a0SIP Annotations</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#argument-annotations\" id=\"id80\" name=\"id80\">7.1\u00a0\u00a0\u00a0Argument Annotations</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#allownone\" id=\"id81\" name=\"id81\">7.1.1\u00a0\u00a0\u00a0AllowNone</a></li>\n<li><a class=\"reference\" href=\"#array\" id=\"id82\" name=\"id82\">7.1.2\u00a0\u00a0\u00a0Array</a></li>\n<li><a class=\"reference\" href=\"#arraysize\" id=\"id83\" name=\"id83\">7.1.3\u00a0\u00a0\u00a0ArraySize</a></li>\n<li><a class=\"reference\" href=\"#constrained\" id=\"id84\" name=\"id84\">7.1.4\u00a0\u00a0\u00a0Constrained</a></li>\n<li><a class=\"reference\" href=\"#getwrapper\" id=\"id85\" name=\"id85\">7.1.5\u00a0\u00a0\u00a0GetWrapper</a></li>\n<li><a class=\"reference\" href=\"#in\" id=\"id86\" name=\"id86\">7.1.6\u00a0\u00a0\u00a0In</a></li>\n<li><a class=\"reference\" href=\"#out\" id=\"id87\" name=\"id87\">7.1.7\u00a0\u00a0\u00a0Out</a></li>\n<li><a class=\"reference\" href=\"#transfer\" id=\"id88\" name=\"id88\">7.1.8\u00a0\u00a0\u00a0Transfer</a></li>\n<li><a class=\"reference\" href=\"#transferback\" id=\"id89\" name=\"id89\">7.1.9\u00a0\u00a0\u00a0TransferBack</a></li>\n<li><a class=\"reference\" href=\"#transferthis\" id=\"id90\" name=\"id90\">7.1.10\u00a0\u00a0\u00a0TransferThis</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#function-annotations\" id=\"id91\" name=\"id91\">7.2\u00a0\u00a0\u00a0Function Annotations</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#autogen\" id=\"id92\" name=\"id92\">7.2.1\u00a0\u00a0\u00a0AutoGen</a></li>\n<li><a class=\"reference\" href=\"#default\" id=\"id93\" name=\"id93\">7.2.2\u00a0\u00a0\u00a0Default</a></li>\n<li><a class=\"reference\" href=\"#factory\" id=\"id94\" name=\"id94\">7.2.3\u00a0\u00a0\u00a0Factory</a></li>\n<li><a class=\"reference\" href=\"#newthread\" id=\"id95\" name=\"id95\">7.2.4\u00a0\u00a0\u00a0NewThread</a></li>\n<li><a class=\"reference\" href=\"#posthook\" id=\"id96\" name=\"id96\">7.2.5\u00a0\u00a0\u00a0PostHook</a></li>\n<li><a class=\"reference\" href=\"#prehook\" id=\"id97\" name=\"id97\">7.2.6\u00a0\u00a0\u00a0PreHook</a></li>\n<li><a class=\"reference\" href=\"#pyname\" id=\"id98\" name=\"id98\">7.2.7\u00a0\u00a0\u00a0PyName</a></li>\n<li><a class=\"reference\" href=\"#releasegil\" id=\"id99\" name=\"id99\">7.2.8\u00a0\u00a0\u00a0ReleaseGIL</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#license-annotations\" id=\"id100\" name=\"id100\">7.3\u00a0\u00a0\u00a0License Annotations</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#licensee\" id=\"id101\" name=\"id101\">7.3.1\u00a0\u00a0\u00a0Licensee</a></li>\n<li><a class=\"reference\" href=\"#signature\" id=\"id102\" name=\"id102\">7.3.2\u00a0\u00a0\u00a0Signature</a></li>\n<li><a class=\"reference\" href=\"#timestamp\" id=\"id103\" name=\"id103\">7.3.3\u00a0\u00a0\u00a0Timestamp</a></li>\n<li><a class=\"reference\" href=\"#type\" id=\"id104\" name=\"id104\">7.3.4\u00a0\u00a0\u00a0Type</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#sip-api-for-handwritten-code\" id=\"id105\" name=\"id105\">8\u00a0\u00a0\u00a0SIP API for Handwritten Code</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#sip-api-major-nr\" id=\"id106\" name=\"id106\">8.1\u00a0\u00a0\u00a0SIP_API_MAJOR_NR</a></li>\n<li><a class=\"reference\" href=\"#sip-api-minor-nr\" id=\"id107\" name=\"id107\">8.2\u00a0\u00a0\u00a0SIP_API_MINOR_NR</a></li>\n<li><a class=\"reference\" href=\"#sip-build\" id=\"id108\" name=\"id108\">8.3\u00a0\u00a0\u00a0SIP_BUILD</a></li>\n<li><a class=\"reference\" href=\"#sip-version\" id=\"id109\" name=\"id109\">8.4\u00a0\u00a0\u00a0SIP_VERSION</a></li>\n<li><a class=\"reference\" href=\"#sip-version-str\" id=\"id110\" name=\"id110\">8.5\u00a0\u00a0\u00a0SIP_VERSION_STR</a></li>\n<li><a class=\"reference\" href=\"#sipbadcatcherresult\" id=\"id111\" name=\"id111\">8.6\u00a0\u00a0\u00a0sipBadCatcherResult()</a></li>\n<li><a class=\"reference\" href=\"#sipbadlengthforslice\" id=\"id112\" name=\"id112\">8.7\u00a0\u00a0\u00a0sipBadLengthForSlice()</a></li>\n<li><a class=\"reference\" href=\"#sipbuildresult\" id=\"id113\" name=\"id113\">8.8\u00a0\u00a0\u00a0sipBuildResult()</a></li>\n<li><a class=\"reference\" href=\"#sipcallmethod\" id=\"id114\" name=\"id114\">8.9\u00a0\u00a0\u00a0sipCallMethod()</a></li>\n<li><a class=\"reference\" href=\"#sipclassname\" id=\"id115\" name=\"id115\">8.10\u00a0\u00a0\u00a0sipClassName()</a></li>\n<li><a class=\"reference\" href=\"#sipconnectrx\" id=\"id116\" name=\"id116\">8.11\u00a0\u00a0\u00a0sipConnectRx()</a></li>\n<li><a class=\"reference\" href=\"#sipconvertfromsequenceindex\" id=\"id117\" name=\"id117\">8.12\u00a0\u00a0\u00a0sipConvertFromSequenceIndex()</a></li>\n<li><a class=\"reference\" href=\"#sipconvertfromsliceobject\" id=\"id118\" name=\"id118\">8.13\u00a0\u00a0\u00a0sipConvertFromSliceObject()</a></li>\n<li><a class=\"reference\" href=\"#sipconverttocpp\" id=\"id119\" name=\"id119\">8.14\u00a0\u00a0\u00a0sipConvertToCpp()</a></li>\n<li><a class=\"reference\" href=\"#sipdisconnectrx\" id=\"id120\" name=\"id120\">8.15\u00a0\u00a0\u00a0sipDisconnectRx()</a></li>\n<li><a class=\"reference\" href=\"#sipemitsignal\" id=\"id121\" name=\"id121\">8.16\u00a0\u00a0\u00a0sipEmitSignal()</a></li>\n<li><a class=\"reference\" href=\"#sipfree\" id=\"id122\" name=\"id122\">8.17\u00a0\u00a0\u00a0sipFree()</a></li>\n<li><a class=\"reference\" href=\"#sipgetsender\" id=\"id123\" name=\"id123\">8.18\u00a0\u00a0\u00a0sipGetSender()</a></li>\n<li><a class=\"reference\" href=\"#sipgetwrapper\" id=\"id124\" name=\"id124\">8.19\u00a0\u00a0\u00a0sipGetWrapper()</a></li>\n<li><a class=\"reference\" href=\"#sipinttypeclassmap\" id=\"id125\" name=\"id125\">8.20\u00a0\u00a0\u00a0sipIntTypeClassMap</a></li>\n<li><a class=\"reference\" href=\"#sipissubclassinstance\" id=\"id126\" name=\"id126\">8.21\u00a0\u00a0\u00a0sipIsSubClassInstance()</a></li>\n<li><a class=\"reference\" href=\"#sipmalloc\" id=\"id127\" name=\"id127\">8.22\u00a0\u00a0\u00a0sipMalloc()</a></li>\n<li><a class=\"reference\" href=\"#sipmapinttoclass\" id=\"id128\" name=\"id128\">8.23\u00a0\u00a0\u00a0sipMapIntToClass()</a></li>\n<li><a class=\"reference\" href=\"#sipmapstringtoclass\" id=\"id129\" name=\"id129\">8.24\u00a0\u00a0\u00a0sipMapStringToClass()</a></li>\n<li><a class=\"reference\" href=\"#sipparseresult\" id=\"id130\" name=\"id130\">8.25\u00a0\u00a0\u00a0sipParseResult()</a></li>\n<li><a class=\"reference\" href=\"#sipstringtypeclassmap\" id=\"id131\" name=\"id131\">8.26\u00a0\u00a0\u00a0sipStringTypeClassMap</a></li>\n<li><a class=\"reference\" href=\"#siptransfer\" id=\"id132\" name=\"id132\">8.27\u00a0\u00a0\u00a0sipTransfer()</a></li>\n<li><a class=\"reference\" href=\"#sipwrappertype\" id=\"id133\" name=\"id133\">8.28\u00a0\u00a0\u00a0sipWrapperType</a></li>\n<li><a class=\"reference\" href=\"#generated-type-convertors\" id=\"id134\" name=\"id134\">8.29\u00a0\u00a0\u00a0Generated Type Convertors</a></li>\n<li><a class=\"reference\" href=\"#generated-type-objects\" id=\"id135\" name=\"id135\">8.30\u00a0\u00a0\u00a0Generated Type Objects</a></li>\n<li><a class=\"reference\" href=\"#generated-derived-classes\" id=\"id136\" name=\"id136\">8.31\u00a0\u00a0\u00a0Generated Derived Classes</a></li>\n</ul>\n</li>\n<li><a class=\"reference\" href=\"#using-the-sip-module-in-applications\" id=\"id137\" name=\"id137\">9\u00a0\u00a0\u00a0Using the SIP Module in Applications</a></li>\n<li><a class=\"reference\" href=\"#the-sip-build-system\" id=\"id138\" name=\"id138\">10\u00a0\u00a0\u00a0The SIP Build System</a><ul class=\"auto-toc\">\n<li><a class=\"reference\" href=\"#sipconfig-functions\" id=\"id139\" name=\"id139\">10.1\u00a0\u00a0\u00a0<tt class=\"literal\"><span class=\"pre\">sipconfig</span></tt> Functions</a></li>\n<li><a class=\"reference\" href=\"#sipconfig-classes\" id=\"id140\" name=\"id140\">10.2\u00a0\u00a0\u00a0<tt class=\"literal\"><span class=\"pre\">sipconfig</span></tt> Classes</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"introduction\">\n<h1><a class=\"toc-backref\" href=\"#id19\" name=\"introduction\">1\u00a0\u00a0\u00a0Introduction</a></h1>\n<p>This is the reference guide for SIP 4.0.1.  SIP is a tool for\nautomatically generating <a class=\"reference\" href=\"http://www.python.org\">Python</a> bindings for C and\nC++ libraries.  SIP was originally developed in 1998 for\n<a class=\"reference\" href=\"http://www.riverbankcomputing.co.uk/pyqt/\">PyQt</a> - the Python bindings for\nthe Qt GUI toolkit - but is suitable for generating bindings for any C or C++\nlibrary.</p>\n<p>This version of SIP generates bindings for Python v2.3 or later.  If you want\nto generate bindings for earlier versions of Python (going back as far as\nPython v1.5) then you need to use <a class=\"reference\" href=\"#sip-v3-x\">SIP v3.x</a>.</p>\n<p>There are many other similar tools available.  One of the original such tools\nis <a class=\"reference\" href=\"http://www.swig.org\">SWIG</a> and, in fact, SIP is so called because it\nstarted out as a small SWIG.  Unlike SWIG, SIP is specifically designed for\nbringing together Python and C/C++ and goes to great lengths to make the\nintegration as tight as possible.</p>\n<p>The homepage for SIP is <a class=\"reference\" href=\"http://www.riverbankcomputing.co.uk/sip/\">http://www.riverbankcomputing.co.uk/sip/</a>.  Here you\nwill always find the latest stable version, current development snapshots, and\nthe latest version of this documentation.</p>\n<div class=\"section\" id=\"license\">\n<h2><a class=\"toc-backref\" href=\"#id20\" name=\"license\">1.1\u00a0\u00a0\u00a0License</a></h2>\n<p>SIP is licensed under the same terms as Python itself.  SIP places no\nrestrictions on the license you may apply to the bindings you create.</p>\n</div>\n<div class=\"section\" id=\"features\">\n<h2><a class=\"toc-backref\" href=\"#id21\" name=\"features\">1.2\u00a0\u00a0\u00a0Features</a></h2>\n<p>SIP, and the bindings it produces, have the following features.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>bindings are fast to load and minimise memory consumption especially when\nonly a small sub-set of a large library is being used</li>\n<li>automatic conversion between standard Python and C/C++ data types</li>\n<li>overloading of functions and methods with different argument signatures</li>\n<li>access to a C++ class's protected methods</li>\n<li>the ability to define a Python class that is a sub-class of a C++ class,\nincluding abstract C++ classes</li>\n<li>support for ordinary C++ functions, class methods, static class methods,\nvirtual class methods and abstract class methods</li>\n<li>the ability to re-implement C++ virtual and abstract methods in Python</li>\n<li>support for global and class variables</li>\n<li>support for C++ namespaces</li>\n<li>support for C++ exceptions and wrapping them as Python exceptions</li>\n<li>the ability to define mappings between C++ classes and similar Python\ndata types that are automatically invoked</li>\n<li>the ability to automatically exploit any available run time type\ninformation to ensure that the class of a Python instance object matches\nthe class of the corresponding C++ instance</li>\n<li>full support of the Python interpreter lock, including the ability to\nspecify that a C++ function of method may block, therefore allowing the\nlock to be released and other Python threads to run</li>\n<li>support for the concept of ownership of a C++ instance (i.e. what part of\nthe code is responsible for calling the instance's destructor) and how\nthe ownership may change during the execution of an application</li>\n<li>the ability to generate bindings for a C++ class library that itself is\nbuilt on another C++ class library which also has had bindings generated\nso that the different bindings integrate and share code properly</li>\n<li>a sophisticated versioning system that allows the full lifetime of a C++\nclass library, including any platform specific or optional features, to\nbe described in a single set of specification files</li>\n<li>the ability to include documentation in the specification files which can\nbe extracted and subsequently processed by external tools</li>\n<li>the ability to include copyright notices and licensing information in the\nspecification files that is automatically included in all generated\nsource code</li>\n<li>a build system, written in Python, that you can extend to configure,\ncompile and install your own bindings without worrying about platform\nspecific issues</li>\n<li>SIP, and the bindings it produces, runs under UNIX, Linux, Windows and\nMacOS/X</li>\n</ul>\n</blockquote>\n<p>SIP also understands the signal/slot type safe callback mechanism implemented\nby Qt.  SIP allows new Python signals to be defined, and allows any Python\ncallable object to be used as a slot.</p>\n</div>\n<div class=\"section\" id=\"sip-v3-x\">\n<h2><a class=\"toc-backref\" href=\"#id22\" name=\"sip-v3-x\">1.3\u00a0\u00a0\u00a0SIP v3.x</a></h2>\n<p>SIP v3.x differs from current versions in the following respects.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>It uses Python's classic classes to wrap C++ classes (and so generated\nbindings can be built against any version of Python).</li>\n<li>It does not support the creation of bindings for C libraries.</li>\n<li>It does not generate bindings that will work on MacOS/X.</li>\n<li>It is not formally documented.  However, most of this document does\napply to SIP v3.x - just don't be surprised if you come across something\nthat doesn't.</li>\n</ul>\n</blockquote>\n<p>New releases of SIP v3.x may be made in the future, but no significant\ndevelopment will be done.</p>\n</div>\n<div class=\"section\" id=\"sip-components\">\n<h2><a class=\"toc-backref\" href=\"#id23\" name=\"sip-components\">1.4\u00a0\u00a0\u00a0SIP Components</a></h2>\n<p>SIP comprises a number of different components.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>The SIP code generator (<tt class=\"literal\"><span class=\"pre\">sip</span></tt> or <tt class=\"literal\"><span class=\"pre\">sip.exe</span></tt>).  This processes <tt class=\"literal\"><span class=\"pre\">.sip</span></tt>\nspecification files and generates C or C++ bindings.  It is covered in\ndetail in <a class=\"reference\" href=\"#using-sip\">Using SIP</a>.</li>\n<li>The SIP header file (<tt class=\"literal\"><span class=\"pre\">sip.h</span></tt>).  This contains definitions and data\nstructures needed by the generated C and C++ code.</li>\n<li>The SIP module (<tt class=\"literal\"><span class=\"pre\">sip.so</span></tt> or <tt class=\"literal\"><span class=\"pre\">sip.pyd</span></tt>).  This is a Python extension\nmodule that is imported automatically by SIP generated bindings and\nprovides them with some common utility functions.  See also <a class=\"reference\" href=\"#using-the-sip-module-in-applications\">Using the\nSIP Module in Applications</a>.</li>\n<li>The SIP build system (<tt class=\"literal\"><span class=\"pre\">sipconfig.py</span></tt>).  This is a pure Python module\nthat is created when SIP is configured and encapsulates all the necessary\ninformation about your system including relevant directory names,\ncompiler and linker flags, and version numbers.  It also includes several\nPython classes and functions which help you write configuration scripts\nfor your own bindings.  It is covered in detail in <a class=\"reference\" href=\"#the-sip-build-system\">The SIP Build\nSystem</a>.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"installing-sip\">\n<h1><a class=\"toc-backref\" href=\"#id24\" name=\"installing-sip\">2\u00a0\u00a0\u00a0Installing SIP</a></h1>\n<div class=\"section\" id=\"downloading-sip\">\n<h2><a class=\"toc-backref\" href=\"#id25\" name=\"downloading-sip\">2.1\u00a0\u00a0\u00a0Downloading SIP</a></h2>\n<p>You can get the latest release of the SIP source code from\n<a class=\"reference\" href=\"http://www.riverbankcomputing.co.uk/sip/download.php\">http://www.riverbankcomputing.co.uk/sip/download.php</a>.</p>\n<p>SIP is also included with all of the major Linux distributions.  However, it\nmay be a version or two out of date.</p>\n<p>You may also find more up to date pre-compiled binaries on\n<a class=\"reference\" href=\"http://sourceforge.net/project/showfiles.php?group_id=61057\">SourceForge</a>.</p>\n</div>\n<div class=\"section\" id=\"configuring-sip\">\n<h2><a class=\"toc-backref\" href=\"#id26\" name=\"configuring-sip\">2.2\u00a0\u00a0\u00a0Configuring SIP</a></h2>\n<p>After unpacking the source package (either a <tt class=\"literal\"><span class=\"pre\">.tar.gz</span></tt> or a <tt class=\"literal\"><span class=\"pre\">.zip</span></tt> file\ndepending on your platform) you should then check for any <tt class=\"literal\"><span class=\"pre\">README</span></tt> files\nthat relate to your platform.</p>\n<p>Next you need to configure SIP by executing the <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> script.  For\nexample:</p>\n<pre class=\"literal-block\">\npython configure.py\n</pre>\n<p>This assumes that the Python interpreter is on your path.  Something like the\nfollowing may be appropriate on Windows:</p>\n<pre class=\"literal-block\">\nc:\\python23\\python configure.py\n</pre>\n<p>If you have multiple versions of Python installed then make sure you use the\ninterpreter for which you wish SIP to generate bindings for.</p>\n<p>Qt support is automatically enabled if the <tt class=\"literal\"><span class=\"pre\">QTDIR</span></tt> environment variable is\nset.  Use the <tt class=\"literal\"><span class=\"pre\">-x</span></tt> command line option to disable it.</p>\n<p>The full set of command line options is:</p>\n<table class=\"option-list\" frame=\"void\" rules=\"none\">\n<col class=\"option\" />\n<col class=\"description\" />\n<tbody valign=\"top\">\n<tr><td>\n<kbd><span class=\"option\">-h</span></kbd></td>\n<td>Display a help message.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-b</span> <var>dir</var></kbd></td>\n<td>The SIP code generator will be installed in the directory <tt class=\"literal\"><span class=\"pre\">dir</span></tt>.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span> <var>dir</var></kbd></td>\n<td>The SIP module will be installed in the directory <tt class=\"literal\"><span class=\"pre\">dir</span></tt>.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e</span> <var>dir</var></kbd></td>\n<td>The SIP header file will be installed in the directory <tt class=\"literal\"><span class=\"pre\">dir</span></tt>.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-k</span></kbd></td>\n<td>The SIP module will be built as a static library.  This is useful when\nbuilding the SIP module as a Python builtin</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l</span> <var>lib</var></kbd></td>\n<td>Explicitly specify the type of Qt library to use, either <tt class=\"literal\"><span class=\"pre\">qt</span></tt>,\n<tt class=\"literal\"><span class=\"pre\">qt-mt</span></tt>, <tt class=\"literal\"><span class=\"pre\">qtmt</span></tt> or <tt class=\"literal\"><span class=\"pre\">qte</span></tt>.  This is useful if, for example, you\nhave the non-threaded (<tt class=\"literal\"><span class=\"pre\">qt</span></tt>) and threaded (<tt class=\"literal\"><span class=\"pre\">qt-mt</span></tt>) versions of\nthe Qt library installed in the same directory.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-p</span> <var>platform</var></kbd></td>\n<td>Explicitly specify the platform/compiler to be used by the build\nsystem.  If Qt support is enabled then the platform/compiler used to\nbuild Qt will be used, otherwise a platform specific default will be\nused.  The <tt class=\"literal\"><span class=\"pre\">-h</span></tt> option will display all the supported\nplatform/compilers and the default.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-u</span></kbd></td>\n<td>The SIP module will be built with debugging symbols.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span> <var>dir</var></kbd></td>\n<td>By default <tt class=\"literal\"><span class=\"pre\">.sip</span></tt> files will be installed in the directory <tt class=\"literal\"><span class=\"pre\">dir</span></tt>.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-x</span></kbd></td>\n<td>Disable the SIP module's support for Qt.  Support is automatically\ndisabled if the <tt class=\"literal\"><span class=\"pre\">QTDIR</span></tt> environment variables isn't set.</td></tr>\n</tbody>\n</table>\n<p>The configure.py script takes many other options that allows the build system\nto be finely tuned.  These are of the form <tt class=\"literal\"><span class=\"pre\">name=value</span></tt> or <tt class=\"literal\"><span class=\"pre\">name+=value</span></tt>.\nThe <tt class=\"literal\"><span class=\"pre\">-h</span></tt> option will display each supported <tt class=\"literal\"><span class=\"pre\">name</span></tt>, although not all are\napplicable to all platforms.</p>\n<p>The <tt class=\"literal\"><span class=\"pre\">name=value</span></tt> form means that <tt class=\"literal\"><span class=\"pre\">value</span></tt> will replace the existing value of\n<tt class=\"literal\"><span class=\"pre\">name</span></tt>.</p>\n<p>The <tt class=\"literal\"><span class=\"pre\">name+=value</span></tt> form means that <tt class=\"literal\"><span class=\"pre\">value</span></tt> will be appended to the existing\nvalue of <tt class=\"literal\"><span class=\"pre\">name</span></tt>.</p>\n<p>For example, the following will reduce the size of module binaries compiled\nwith GCC:</p>\n<pre class=\"literal-block\">\npython configure.py CXXFLAGS+=-fno-exceptions LFLAGS+=-s\n</pre>\n<p>A pure Python module called <tt class=\"literal\"><span class=\"pre\">sipconfig.py</span></tt> is generated by <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt>.\nThis defines each <tt class=\"literal\"><span class=\"pre\">name</span></tt> and its corresponding <tt class=\"literal\"><span class=\"pre\">value</span></tt>.  Looking at it will\ngive you a good idea of how the build system uses the different options.  It is\ncovered in detail in <a class=\"reference\" href=\"#the-sip-build-system\">The SIP Build System</a>.</p>\n<div class=\"section\" id=\"configuring-sip-using-mingw\">\n<h3><a class=\"toc-backref\" href=\"#id27\" name=\"configuring-sip-using-mingw\">2.2.1\u00a0\u00a0\u00a0Configuring SIP Using MinGW</a></h3>\n<p>SIP, and the modules it generates, can be built with MinGW, the Windows port of\nGCC.  If you have Qt installed (and built with MinGW) then <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt>\nwill automatically select the correct configuration.  If you do not have Qt\ninstalled (or you are disabling support for it) then you must use the <tt class=\"literal\"><span class=\"pre\">-p</span></tt>\ncommand line option to specify the correct platform.  For example:</p>\n<pre class=\"literal-block\">\nc:\\python23\\python configure.py -p win32-g++\n</pre>\n<p>You must also make sure you have a MinGW-compatible version of the Python\nlibrary.  See <a class=\"reference\" href=\"http://sebsauvage.net/python/mingw.html\">http://sebsauvage.net/python/mingw.html</a> for instructions to do\nthis.</p>\n</div>\n<div class=\"section\" id=\"configuring-sip-using-the-borland-c-compiler\">\n<h3><a class=\"toc-backref\" href=\"#id28\" name=\"configuring-sip-using-the-borland-c-compiler\">2.2.2\u00a0\u00a0\u00a0Configuring SIP Using the Borland C++ Compiler</a></h3>\n<p>SIP, and the modules it generates, can be built with the free Borland C++\ncompielr.  If you have Qt installed (and built with the Borland compiler) then\n<tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> will automatically select the correct configuration.  If you\ndo not have Qt installed (or you are disabling support for it) then you must\nuse the <tt class=\"literal\"><span class=\"pre\">-p</span></tt> command line option to specify the correct platform.  For\nexample:</p>\n<pre class=\"literal-block\">\nc:\\python23\\python configure.py -p win32-borland\n</pre>\n<p>You must also make sure you have a Borland-compatible version of the Python\nlibrary.  If you are using the standard Python distribution (built using the\nMicrosoft compiler) then you must convert the format of the Python library.\nFor example:</p>\n<pre class=\"literal-block\">\ncoff2omf python23.lib python23_bcpp.lib\n</pre>\n</div>\n</div>\n<div class=\"section\" id=\"building-sip\">\n<h2><a class=\"toc-backref\" href=\"#id29\" name=\"building-sip\">2.3\u00a0\u00a0\u00a0Building SIP</a></h2>\n<p>The next step is to build SIP by running your platform's <tt class=\"literal\"><span class=\"pre\">make</span></tt> command.  For\nexample:</p>\n<pre class=\"literal-block\">\nmake\n</pre>\n<p>The final step is to install SIP by running the following command:</p>\n<pre class=\"literal-block\">\nmake install\n</pre>\n<p>(Depending on your system you may require root or administrator privileges.)</p>\n<p>This will install the various SIP components.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-sip\">\n<h1><a class=\"toc-backref\" href=\"#id30\" name=\"using-sip\">3\u00a0\u00a0\u00a0Using SIP</a></h1>\n<p>Bindings are generated by the SIP code generator from a number of specification\nfiles, typically with a <tt class=\"literal\"><span class=\"pre\">.sip</span></tt> extension.  Specification files look very\nsimilar to C and C++ header files, but often with additional information (in\nthe form of a <em>directive</em> or an <em>annotation</em>) and code so that the bindings\ngenerated can be finely tuned.</p>\n<div class=\"section\" id=\"a-simple-c-example\">\n<h2><a class=\"toc-backref\" href=\"#id31\" name=\"a-simple-c-example\">3.1\u00a0\u00a0\u00a0A Simple C++ Example</a></h2>\n<p>We start with a simple, but complete, example.  Let's say you have a C++\nlibrary that implements a single class called <tt class=\"literal\"><span class=\"pre\">Word</span></tt>.  The class has one\nconstructor that takes a <tt class=\"literal\"><span class=\"pre\">\\0</span></tt> terminated character string as its single\nargument.  The class has one method called <tt class=\"literal\"><span class=\"pre\">reverse()</span></tt> which takes no\narguments and returns a <tt class=\"literal\"><span class=\"pre\">\\0</span></tt> terminated character string.  The interface to\nthe class is defined in a header file called <tt class=\"literal\"><span class=\"pre\">word.h</span></tt> which might look\nsomething like this:</p>\n<pre class=\"literal-block\">\n// Define the interface to the word library.\n\nclass Word {\n    const char *the_word;\n\npublic:\n    Word(const char *w);\n\n    char *reverse() const;\n};\n</pre>\n<p>The corresponding SIP specification file would then look something like this:</p>\n<pre class=\"literal-block\">\n// Define the SIP wrapper to the word library.\n\n%Module word 0\n\nclass Word {\n\n%TypeHeaderCode\n#include &lt;word.h&gt;\n%End\n\npublic:\n    Word(const char *);\n\n    char *reverse() const;\n};\n</pre>\n<p>Obviously a SIP specification file looks very much like a C++ (or C) header\nfile, but SIP does not include a full C++ parser.  Let's look at the\ndifferences between the two files.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>The <a class=\"reference\" href=\"#module\">%Module</a> directive has been added <a class=\"footnote-reference\" href=\"#id5\" id=\"id1\" name=\"id1\"><sup>1</sup></a>.  This is used to name the\nPython module that is being created and to give it a <em>generation</em> number.\nIn this example these are <tt class=\"literal\"><span class=\"pre\">word</span></tt> and <tt class=\"literal\"><span class=\"pre\">0</span></tt> respectively.  The\ngeneration number is effectively the version number of the module.</li>\n<li>The <a class=\"reference\" href=\"#typeheadercode\">%TypeHeaderCode</a> directive has been added.  The text between this\nand the following <a class=\"reference\" href=\"#end\">%End</a> directive is included literally in the code\nthat SIP generates.  Normally it is used, as in this case, to\n<tt class=\"literal\"><span class=\"pre\">#include</span></tt> the corresponding C++ (or C) header file <a class=\"footnote-reference\" href=\"#id6\" id=\"id2\" name=\"id2\"><sup>2</sup></a>.</li>\n<li>The declaration of the private variable <tt class=\"literal\"><span class=\"pre\">this_word</span></tt> has been removed.\nSIP does not support access to either private or protected instance\nvariables.</li>\n<li>The name of the argument to the constructor has been removed.  SIP does\nnot support named arguments <a class=\"footnote-reference\" href=\"#id7\" id=\"id3\" name=\"id3\"><sup>3</sup></a>.</li>\n</ul>\n</blockquote>\n<p>If we want to we can now generate the C++ code in the current directory by\nrunning the following command:</p>\n<pre class=\"literal-block\">\nsip -c . word.sip\n</pre>\n<p>However, that still leaves us with the task of compiling the generated code and\nlinking it against all the necessary libraries.  It's much easier to use the\nSIP build system to do the whole thing.</p>\n<p>Using the SIP build system is simply a matter of writing a small Python script.\nIn this simple example we will assume that the <tt class=\"literal\"><span class=\"pre\">word</span></tt> library we are wrapping\nand it's header file are installed in standard system locations and will be\nfound by the compiler and linker without having to specify any additional\nflags.  In a more realistic example your Python script may take command line\noptions, or search a set of directories to deal with different configurations\nand installations.</p>\n<p>This is the simplest script (conventionally called <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt>):</p>\n<pre class=\"literal-block\">\nimport os\nimport sipconfig\n\n# The name of the SIP build file generated by SIP and used by the build\n# system.\nbuild_file = &quot;word.sbf&quot;\n\n# Get the SIP configuration information.\nconfig = sipconfig.Configuration()\n\n# Run SIP to generate the code.\nos.system(&quot; &quot;.join([config.sip_bin, &quot;-c&quot;, &quot;.&quot;, &quot;-b&quot;, build_file, &quot;word.sip&quot;]))\n\n# Create the Makefile.\nmakefile = sipconfig.SIPModuleMakefile(config, build_file)\n\n# Add the library we are wrapping.  The name doesn't include any platform\n# specific prefixes or extensions (e.g. the &quot;lib&quot; prefix on UNIX, or the\n# &quot;.dll&quot; extension on Windows).\nmakefile.extra_libs = [&quot;word&quot;]\n\n# Generate the Makefile itself.\nmakefile.generate()\n</pre>\n<p>Hopefully this script is self-documenting.  The key parts are the\n<tt class=\"literal\"><span class=\"pre\">Configuration</span></tt> and <tt class=\"literal\"><span class=\"pre\">SIPModuleMakefile</span></tt> classes.  The build system contains\nother Makefile classes, for example to build programs or to call other\nMakefiles in sub-directories.</p>\n<p>After running the script (using the Python interpreter the extension module is\nbeing created for) the generated C++ code and <tt class=\"literal\"><span class=\"pre\">Makefile</span></tt> will be in the\ncurrent directory.</p>\n<p>To compile and install the extension module, just run the following\ncommands <a class=\"footnote-reference\" href=\"#id8\" id=\"id4\" name=\"id4\"><sup>4</sup></a>:</p>\n<pre class=\"literal-block\">\nmake\nmake install\n</pre>\n<p>That's all there is to it.</p>\n<table class=\"footnote\" frame=\"void\" id=\"id5\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\" name=\"id5\">[1]</a></td><td>All SIP directives start with a <tt class=\"literal\"><span class=\"pre\">%</span></tt> as the first non-whitespace\ncharacter of a line.</td></tr>\n</tbody>\n</table>\n<table class=\"footnote\" frame=\"void\" id=\"id6\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\" name=\"id6\">[2]</a></td><td>SIP includes many code directives like this.  They differ in where the\nsupplied code is placed by SIP in the generated code.</td></tr>\n</tbody>\n</table>\n<table class=\"footnote\" frame=\"void\" id=\"id7\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id3\" name=\"id7\">[3]</a></td><td>It is planned that a future version of SIP will allow arguments to be\nnamed and that the names will be used as Python keyword arguments.</td></tr>\n</tbody>\n</table>\n<table class=\"footnote\" frame=\"void\" id=\"id8\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id4\" name=\"id8\">[4]</a></td><td>On Windows you might run <tt class=\"literal\"><span class=\"pre\">nmake</span></tt> or <tt class=\"literal\"><span class=\"pre\">mingw32-make</span></tt> instead.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"id9\">\n<h2><a class=\"toc-backref\" href=\"#id32\" name=\"id9\">3.2\u00a0\u00a0\u00a0A Simple C Example</a></h2>\n<p>Let's now look at a very similar example of wrapping a C library:</p>\n<pre class=\"literal-block\">\n/* Define the interface to the word library. */\n\nstruct Word {\n    const char *the_word;\n};\n\nstruct Word *create_word(const char *w);\nchar *reverse(struct Word *word);\n</pre>\n<p>The corresponding SIP specification file would then look something like this:</p>\n<pre class=\"literal-block\">\n/* Define the SIP wrapper to the word library. */\n\n%CModule word 0\n\nstruct Word {\n\n%TypeHeaderCode\n#include &lt;word.h&gt;\n%End\n\n    const char *the_word;\n};\n\nstruct Word *create_word(const char *);\nchar *reverse(struct Word *);\n</pre>\n<p>Again, let's look at the differences between the two files.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>The <a class=\"reference\" href=\"#cmodule\">%CModule</a> directive has been added.  This has the same syntax as\nthe <a class=\"reference\" href=\"#module\">%Module</a> directive used in the previous example but tells SIP that\nthe library being wrapped is implemented in C rather than C++.</li>\n<li>The <a class=\"reference\" href=\"#typeheadercode\">%TypeHeaderCode</a> directive has been added.</li>\n<li>The names of the arguments to the functions have been removed.</li>\n</ul>\n</blockquote>\n<p>The <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> build system script described in the previous example can\nbe used for this example without change.</p>\n</div>\n<div class=\"section\" id=\"a-more-complex-c-example\">\n<h2><a class=\"toc-backref\" href=\"#id33\" name=\"a-more-complex-c-example\">3.3\u00a0\u00a0\u00a0A More Complex C++ Example</a></h2>\n<p>In this last example we will wrap a C++ library that contains a class that is\nderived from a Qt class.  This will demonstrate how SIP allows a class\nhierarchy to be split across multiple Python extension modules, and will\nintroduce SIP's versioning system.</p>\n<p>The library contains a single C++ class called <tt class=\"literal\"><span class=\"pre\">Hello</span></tt> which is derived from\nQt's <tt class=\"literal\"><span class=\"pre\">QLabel</span></tt> class.  It behaves just like <tt class=\"literal\"><span class=\"pre\">QLabel</span></tt> except that the text\nin the label is hard coded to be <tt class=\"literal\"><span class=\"pre\">Hello</span> <span class=\"pre\">World</span></tt>.  To make the example more\ninteresting we'll also say that the library only supports Qt v3.0 and later,\nand also includes a function called <tt class=\"literal\"><span class=\"pre\">setDefault()</span></tt> that is not implemented\nin the Windows version of the library.</p>\n<p>The <tt class=\"literal\"><span class=\"pre\">hello.h</span></tt> header file looks something like this:</p>\n<pre class=\"literal-block\">\n// Define the interface to the hello library.\n\n#include &lt;qlabel.h&gt;\n#include &lt;qwidget.h&gt;\n#include &lt;qstring.h&gt;\n\nclass Hello : public QLabel {\n    // This is needed by the Qt Meta-Object Compiler.\n    Q_OBJECT\n\npublic:\n    Hello(QWidget *parent, const char *name = 0, WFlags f = 0);\n\nprivate:\n    // Prevent instances from being copied.\n    Hello(const Hello &amp;);\n    Hello &amp;operator=(const Hello &amp;);\n};\n\n#if !defined(Q_OS_WIN)\nvoid setDefault(const QString &amp;def);\n#endif\n</pre>\n<p>The corresponding SIP specification file would then look something like this:</p>\n<pre class=\"literal-block\">\n// Define the SIP wrapper to the hello library.\n\n%Module hello 0\n\n%Import qt/qtmod.sip\n\n%If (Qt_3_0_0 -)\n\nclass Hello : QLabel {\n\n%TypeHeaderCode\n#include &lt;hello.h&gt;\n%End\n\npublic:\n    Hello(QWidget * /TransferThis/, const char * = 0, WFlags = 0);\n\nprivate:\n    Hello(const Hello &amp;);\n};\n\n%If (!WS_WIN)\nvoid setDefault(const QString &amp;);\n%End\n\n%End\n</pre>\n<p>Again we look at the differences, but we'll skip those that we've looked at in\nprevious examples.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>The <a class=\"reference\" href=\"#import\">%Import</a> directive has been added to specify that we are extending\nthe class hierarchy defined in the file <tt class=\"literal\"><span class=\"pre\">qt/qtmod.sip</span></tt>.  This file is\npart of PyQt.  The build system will take care of finding the file's\nexact location.</li>\n<li>The <a class=\"reference\" href=\"#if\">%If</a> directive has been added to specify that\neverything <a class=\"footnote-reference\" href=\"#id13\" id=\"id10\" name=\"id10\"><sup>5</sup></a> up to the matching <a class=\"reference\" href=\"#end\">%End</a> directive only applies to Qt\nv3.0 and later.  <tt class=\"literal\"><span class=\"pre\">Qt_3_0_0</span></tt> is a <em>tag</em> defined in <tt class=\"literal\"><span class=\"pre\">qtmod.sip</span></tt> <a class=\"footnote-reference\" href=\"#id14\" id=\"id11\" name=\"id11\"><sup>6</sup></a>\nusing the <a class=\"reference\" href=\"#timeline\">%Timeline</a> directive.  <a class=\"reference\" href=\"#timeline\">%Timeline</a> is used to define a tag\nfor each version of a library's API you are wrapping allowing you to\nmaintain all the different versions in a single SIP specification.  The\nbuild system provides support to <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> scripts for working out\nthe correct tags to use according to which version of the library is\nactually installed.</li>\n<li>The <tt class=\"literal\"><span class=\"pre\">public</span></tt> keyword used in defining the super-classes has been\nremoved.  This is not supported by SIP.</li>\n<li>The <a class=\"reference\" href=\"#transferthis\">TransferThis</a> annotation has been added to the first argument\nof the constructor.  It specifies that if the argument is not 0 (i.e. the\n<tt class=\"literal\"><span class=\"pre\">Hello</span></tt> instance being constructed has a parent) then ownership of the\ninstance is transferred from Python to C++.  It is needed because Qt\nmaintains objects (i.e. instances derived from the <tt class=\"literal\"><span class=\"pre\">QObject</span></tt> class) in\na hierachy.  When an object is destroyed all of its children are also\nautomatically destroyed.  It is important, therefore, that the Python\ngarbage collector doesn't also try and destroy them.  This is covered in\nmore detail in <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a>.  SIP provides many other\nannotations that can be applied to arguments, functions and classes.\nMultiple annotations are separated by commas.  Annotations may have\nvalues.</li>\n<li>The <tt class=\"literal\"><span class=\"pre\">=</span></tt> operator has been removed.  This operator is not supported by\nSIP.</li>\n<li>The <a class=\"reference\" href=\"#if\">%If</a> directive has been added to specify that everything up to the\nmatching <a class=\"reference\" href=\"#end\">%End</a> directive does not apply to Windows.  <tt class=\"literal\"><span class=\"pre\">WS_WIN</span></tt> is\nanother tag defined by PyQt, this time using the <a class=\"reference\" href=\"#platforms\">%Platforms</a> directive.\nTags defined by the <a class=\"reference\" href=\"#platforms\">%Platforms</a> directive are mutually exclusive, i.e.\nonly one may be valid at a time <a class=\"footnote-reference\" href=\"#id15\" id=\"id12\" name=\"id12\"><sup>7</sup></a>.</li>\n</ul>\n</blockquote>\n<p>One question you might have at this point is why bother to define the private\ncopy constructor when it can never be called from Python?  The answer is to\nprevent the automatic generation of a public copy constructor.</p>\n<p>We now look at the <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> script.  This is a little different to the\nscript in the previous examples for two related reasons.</p>\n<p>Firstly, PyQt includes a pure Python module called <tt class=\"literal\"><span class=\"pre\">pyqtconfig</span></tt> that extends\nthe SIP build system for modules, like our example, that build on top of PyQt.\nIt deals with the details of which version of Qt is being used (i.e. it\ndetermines what the correct tags are) and where it is installed.  This is\ncalled a module's configuration module.</p>\n<p>Secondly, we generate a configuration module (called <tt class=\"literal\"><span class=\"pre\">helloconfig</span></tt>) for our\nown <tt class=\"literal\"><span class=\"pre\">hello</span></tt> module.  There is no need to do this, but if there is a chance\nthat somebody else might want to extend your C++ library then it would make\nlife easier for them.</p>\n<p>Now we have two scripts.  First the <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt> script:</p>\n<pre class=\"literal-block\">\nimport os\nimport sipconfig\nimport pyqtconfig\n\n# The name of the SIP build file generated by SIP and used by the build\n# system.\nbuild_file = &quot;hello.sbf&quot;\n\n# Get the PyQt configuration information.\nconfig = pyqtconfig.Configuration()\n\n# Get the extra SIP flags needed by the imported qt module.  Note that\n# this normally only includes those flags (-x and -t) that relate to SIP's\n# versioning system.\nqt_sip_flags = config.pyqt_qt_sip_flags\n\n# Run SIP to generate the code.  Note that we tell SIP where to find the qt\n# module's specification files using the -I flag.\nos.system(&quot; &quot;.join([config.sip_bin, &quot;-c&quot;, &quot;.&quot;, &quot;-b&quot;, build_file, &quot;-I&quot;, config.pyqt_sip_dir, qt_sip_flags, &quot;hello.sip&quot;]))\n\n# We are going to install the SIP specification file for this module and\n# its configuration module.\ninstalls = []\n\ninstalls.append([&quot;hello.sip&quot;, os.path.join(config.default_sip_dir, &quot;hello&quot;)])\n\ninstalls.append([&quot;helloconfig.py&quot;, config.default_mod_dir])\n\n# Create the Makefile.  The QtModuleMakefile class provided by the\n# pyqtconfig module takes care of all the extra preprocessor, compiler and\n# linker flags needed by the Qt library.\nmakefile = pyqtconfig.QtModuleMakefile(\n    configuration=config,\n    build_file=build_file,\n    installs=installs\n)\n\n# Add the library we are wrapping.  The name doesn't include any platform\n# specific prefixes or extensions (e.g. the &quot;lib&quot; prefix on UNIX, or the\n# &quot;.dll&quot; extension on Windows).\nmakefile.extra_libs = [&quot;hello&quot;]\n\n# Generate the Makefile itself.\nmakefile.generate()\n\n# Now we create the configuration module.  This is done by merging a Python\n# dictionary (whose values are normally determined dynamically) with a\n# (static) template.\ncontent = {\n    # Publish where the SIP specifications for this module will be\n    # installed.\n    &quot;hello_sip_dir&quot;:    config.default_sip_dir,\n\n    # Publish the set of SIP flags needed by this module.  As these are the\n    # same flags needed by the qt module we could leave it out, but this\n    # allows us to change the flags at a later date without breaking\n    # scripts that import the configuration module.\n    &quot;hello_sip_flags&quot;:  qt_sip_flags\n}\n\n# This create the helloconfig.py module from the helloconfig.py.in template\n# and the dictionary.\nsipconfig.create_config_module(&quot;helloconfig.py&quot;, &quot;helloconfig.py.in&quot;, content)\n</pre>\n<p>Next we have the <tt class=\"literal\"><span class=\"pre\">helloconfig.py.in</span></tt> template script:</p>\n<pre class=\"literal-block\">\nimport pyqtconfig\n\n# These are installation specific values created when Hello was configured.\n# The following line will be replaced when this template is used to create\n# the final configuration module.\n# &#64;SIP_CONFIGURATION&#64;\n\nclass Configuration(pyqtconfig.Configuration):\n    &quot;&quot;&quot;The class that represents Hello configuration values.\n    &quot;&quot;&quot;\n    def __init__(self, sub_cfg=None):\n        &quot;&quot;&quot;Initialise an instance of the class.\n\n        sub_cfg is the list of sub-class configurations.  It should be None\n        when called normally.\n        &quot;&quot;&quot;\n        # This is all standard code to be copied verbatim except for the\n        # name of the module containing the super-class.\n        if sub_cfg:\n            cfg = sub_cfg\n        else:\n            cfg = []\n\n        cfg.append(_pkg_config)\n\n        pyqtconfig.Configuration.__init__(self, cfg)\n\nclass HelloModuleMakefile(pyqtconfig.QtModuleMakefile):\n    &quot;&quot;&quot;The Makefile class for modules that %Import hello.\n    &quot;&quot;&quot;\n    def finalise(self):\n        &quot;&quot;&quot;Finalise the macros.\n        &quot;&quot;&quot;\n        # Make sure our C++ library is linked.\n        self.extra_libs.append(&quot;hello&quot;)\n\n        # Let the super-class do what it needs to.\n        pyqtconfig.QtModuleMakefile.finalise(self)\n</pre>\n<p>Again, we hope that the scripts are self documenting.</p>\n<table class=\"footnote\" frame=\"void\" id=\"id13\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id10\" name=\"id13\">[5]</a></td><td>Some parts of a SIP specification aren't subject to version control.</td></tr>\n</tbody>\n</table>\n<table class=\"footnote\" frame=\"void\" id=\"id14\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id11\" name=\"id14\">[6]</a></td><td>Actually in <tt class=\"literal\"><span class=\"pre\">versions.sip</span></tt>.  PyQt uses the <a class=\"reference\" href=\"#include\">%Include</a> directive to\nsplit the SIP specification for Qt across a large number of separate\n<tt class=\"literal\"><span class=\"pre\">.sip</span></tt> files.</td></tr>\n</tbody>\n</table>\n<table class=\"footnote\" frame=\"void\" id=\"id15\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id12\" name=\"id15\">[7]</a></td><td>Tags can also be defined by the <a class=\"reference\" href=\"#feature\">%Feature</a> directive.  These tags are\nnot mutually exclusive, i.e. any number may be valid at a time.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"ownership-of-objects\">\n<h2><a class=\"toc-backref\" href=\"#id34\" name=\"ownership-of-objects\">3.4\u00a0\u00a0\u00a0Ownership of Objects</a></h2>\n<p>When a C++ instance is wrapped a corresponding Python object is created.  The\nPython object behaves as you would expect in regard to garbage collection - it\nis garbage collected when its reference count reaches zero.  What then happens\nto the corresponding C++ instance?  The obvious answer might be that the\ninstance's destructor is called.  However the library API may say that when the\ninstance is passed to a particular function, the library takes ownership of the\ninstance, i.e. responsibility for calling the instance's destructor is\ntransferred from the SIP generated module to the library.</p>\n<p>The <a class=\"reference\" href=\"#transferthis\">TransferThis</a>, <a class=\"reference\" href=\"#transfer\">Transfer</a> and <a class=\"reference\" href=\"#transferback\">TransferBack</a> annotations are used to specify\nwhere, and it what direction, transfers of ownership happen.  It is very\nimportant that these are specified correctly to avoid crashes (where both\nPython and C++ call the destructor) and memory leaks (where neither Python and\nC++ call the destructor).</p>\n<p>This applies equally to C structures where the structure is returned to the\nheap using the <tt class=\"literal\"><span class=\"pre\">free()</span></tt> function.</p>\n<p>See also <a class=\"reference\" href=\"#siptransfer\">sipTransfer()</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"the-sip-command-line\">\n<h1><a class=\"toc-backref\" href=\"#id35\" name=\"the-sip-command-line\">4\u00a0\u00a0\u00a0The SIP Command Line</a></h1>\n<p>The syntax of the SIP command line is:</p>\n<pre class=\"literal-block\">\nsip [options] [specification]\n</pre>\n<p><tt class=\"literal\"><span class=\"pre\">specification</span></tt> is the name of the specification file for the module.  If it\nis omitted then <tt class=\"literal\"><span class=\"pre\">stdin</span></tt> is used.</p>\n<p>The full set of command line options is:</p>\n<table class=\"option-list\" frame=\"void\" rules=\"none\">\n<col class=\"option\" />\n<col class=\"description\" />\n<tbody valign=\"top\">\n<tr><td>\n<kbd><span class=\"option\">-h</span></kbd></td>\n<td>Display a help message.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-V</span></kbd></td>\n<td>Display the SIP version number.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-a</span> <var>file</var></kbd></td>\n<td>The name of the Scintilla API file to generate.  This file contains a\ndescription of the module API in a form that the Scintilla editor\ncomponent can use for auto-completion and call tips.  By default the\nfile is not generated.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-b</span> <var>file</var></kbd></td>\n<td>The name of the build file to generate.  This file contains the\ninformation about the module needed by the SIP build system to generate\na platform and compiler specific Makefile for the module.  By default\nthe file is not generated.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c</span> <var>dir</var></kbd></td>\n<td>The name of the directory (which must exist) into which all of the\ngenerated C or C++ code is placed.  By default no code is generated.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span> <var>file</var></kbd></td>\n<td>The name of the documentation file to generate.  Documentation is\nincluded in specification files using the <a class=\"reference\" href=\"#doc\">%Doc</a> and <a class=\"reference\" href=\"#exporteddoc\">%ExportedDoc</a>\ndirectives.  By default the file is not generated.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e</span></kbd></td>\n<td>Support for C++ exceptions is enabled.  The causes all calls to C++\ncode to be enclosed in <tt class=\"literal\"><span class=\"pre\">try</span></tt>/<tt class=\"literal\"><span class=\"pre\">catch</span></tt> blocks and C++ exceptions\nconverted to Python exceptions.  By default exception support is\ndisabled.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-g</span></kbd></td>\n<td>The GIL is always released when making calls to C or C++ code and\nreacquired on return.  (This is the SIP v3.x behaviour.)  By default\nthe enhanced GIL management functions described in PEP 311 are used so\nthat the GIL is released only when necessary.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-I</span> <var>dir</var></kbd></td>\n<td>The directory is added to the list of directories searched when looking\nfor a specification file given in an <a class=\"reference\" href=\"#include\">%Include</a> or <a class=\"reference\" href=\"#import\">%Import</a>\ndirective.  This option may be given any number of times.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-j</span> <var>number</var></kbd></td>\n<td>The generated code is split into the given number of files.  This make\nit easier to use the parallel build facility of most modern\nimplementations of <tt class=\"literal\"><span class=\"pre\">make</span></tt>.  By default 1 file is generated for each C\nstructure or C++ class.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-r</span></kbd></td>\n<td>Debugging statements that trace the execution of the bindings are\nautomatically generated.  By default the statements are not generated.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s</span> <var>suffix</var></kbd></td>\n<td>The suffix to use for generated C or C++ source files.  By default\n<tt class=\"literal\"><span class=\"pre\">.c</span></tt> is used for C and <tt class=\"literal\"><span class=\"pre\">.cpp</span></tt> for C++.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t</span> <var>tag</var></kbd></td>\n<td>The SIP version tag (declared using the <a class=\"reference\" href=\"#timeline\">%Timeline</a> directive) or the\nSIP platform tag (declared using the <a class=\"reference\" href=\"#platforms\">%Platforms</a> directive) to\ngenerate code for.  This option may be given any number of times so\nlong as the tags do not conflict.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-w</span></kbd></td>\n<td>The display of warning messages is enabled.  By default warning\nmessages are disabled.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-x</span> <var>feature</var></kbd></td>\n<td>The feature (declared using the <a class=\"reference\" href=\"#feature\">%Feature</a> directive) is disabled.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-z</span> <var>file</var></kbd></td>\n<td>The name of a file containing more command line options.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"sip-specification-files\">\n<h1><a class=\"toc-backref\" href=\"#id36\" name=\"sip-specification-files\">5\u00a0\u00a0\u00a0SIP Specification Files</a></h1>\n<p>A SIP specification consists of some C/C++ type and function declarations and\nsome directives.  The declarations may contain annotations which provide SIP\nwith additional information that cannot be expressed in C/C++.  SIP does not\ninclude a full C/C++ parser.</p>\n<p>It is important to understand that a SIP specification describes the Python\nAPI, i.e. the API available to the Python programmer when they <tt class=\"literal\"><span class=\"pre\">import</span></tt> the\ngenerated module.  It does not have to accurately represent the underlying\nC/C++ library.  There is nothing wrong with omitting functions that make\nlittle sense in a Python context, or adding functions implemented with\nhandwritten code that have no C/C++ equivalent.  It is even possible (and\nsometimes necessary) to specify a different super-class hierarchy for a C++\nclass.  All that matters is that the generated code compiles properly.</p>\n<p>In most cases the Python API matches the C/C++ API.  In some cases handwritten\ncode (see <a class=\"reference\" href=\"#methodcode\">%MethodCode</a>) is used to map from one to the other without SIP\nhaving to know the details itself.  However, there are a few cases where SIP\ngenerates a thin wrapper around a C++ method or constructor (see <a class=\"reference\" href=\"#generated-derived-classes\">Generated\nDerived Classes</a>) and needs to know the exact C++ signature.  To deal with\nthese cases SIP allows two signatures to be specified.  For example:</p>\n<pre class=\"literal-block\">\nclass Klass\n{\npublic:\n    // The Python signature is a tuple, but the underlying C++ signature\n    // is a 2 element array.\n    Klass(SIP_PYTUPLE) [(int *)];\n%MethodCode\n        int iarr[2];\n\n        if (PyArg_ParseTuple(a0, &quot;ii&quot;, &amp;iarr[0], &amp;iarr[1]))\n        {\n            // Note that we use the SIP generated derived class\n            // constructor.\n            Py_BEGIN_ALLOW_THREADS\n            sipCpp = new sipKlass(iarr);\n            Py_END_ALLOW_THREADS\n        }\n%End\n};\n</pre>\n<div class=\"section\" id=\"syntax-definition\">\n<h2><a class=\"toc-backref\" href=\"#id37\" name=\"syntax-definition\">5.1\u00a0\u00a0\u00a0Syntax Definition</a></h2>\n<p>The following is a semi-formal description of the syntax of a specification\nfile.</p>\n<pre class=\"literal-block\">\n<em>specification</em> ::= {<em>module-statement</em>}\n\n<em>module-statement</em> ::= [<em>module-directive</em> | <em>statement</em>]\n\n<em>module-directive</em> ::= [<a class=\"reference\" href=\"#cmodule\">%CModule</a> | <a class=\"reference\" href=\"#copying\">%Copying</a> | <a class=\"reference\" href=\"#doc\">%Doc</a> |\n        <a class=\"reference\" href=\"#exporteddoc\">%ExportedDoc</a> | <a class=\"reference\" href=\"#feature\">%Feature</a> | <a class=\"reference\" href=\"#import\">%Import</a> | <a class=\"reference\" href=\"#include\">%Include</a> |\n        <a class=\"reference\" href=\"#id16\">%License</a> | <a class=\"reference\" href=\"#mappedtype\">%MappedType</a> <a class=\"reference\" href=\"#module\">%Module</a> | <a class=\"reference\" href=\"#modulecode\">%ModuleCode</a> |\n        <a class=\"reference\" href=\"#moduleheadercode\">%ModuleHeaderCode</a> | <a class=\"reference\" href=\"#optionalinclude\">%OptionalInclude</a> | <a class=\"reference\" href=\"#platforms\">%Platforms</a> |\n        <a class=\"reference\" href=\"#postinitialisationcode\">%PostInitialisationCode</a> | <a class=\"reference\" href=\"#timeline\">%Timeline</a>]\n\n<em>statement</em> :: [<em>class-statement</em> | <em>function</em> | <em>variable</em>]\n\n<em>class-statement</em> :: [<a class=\"reference\" href=\"#if\">%If</a> | <em>class</em> | <em>enum</em> | <em>namespace</em> |\n        <em>opaque-class</em> | <em>struct</em> | <em>typedef</em>]\n\n<em>class</em> ::= <tt class=\"literal\"><span class=\"pre\">class</span></tt> <em>name</em> [<tt class=\"literal\"><span class=\"pre\">:</span></tt> <em>super-classes</em>] <tt class=\"literal\"><span class=\"pre\">{</span></tt> {<em>class-line</em>} <tt class=\"literal\"><span class=\"pre\">};</span></tt>\n\n<em>super-classes</em> ::= <em>name</em> [<tt class=\"literal\"><span class=\"pre\">,</span></tt> <em>super-classes</em>]\n\n<em>class-line</em> ::= [<em>class-statement</em> | <a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a> |\n        <a class=\"reference\" href=\"#converttotypecode\">%ConvertToTypeCode</a> | <a class=\"reference\" href=\"#typecode\">%TypeCode</a> | <a class=\"reference\" href=\"#typeheadercode\">%TypeHeaderCode</a> |\n        <em>constructor</em> | <em>destructor</em> | <em>method</em> | <em>static-method</em> |\n        <em>virtual-method</em> | <em>special-method</em> | <em>operator</em> |\n        <em>class-variable</em> | <tt class=\"literal\"><span class=\"pre\">public:</span></tt> | <tt class=\"literal\"><span class=\"pre\">public</span> <span class=\"pre\">slots:</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">protected:</span></tt> | <tt class=\"literal\"><span class=\"pre\">protected</span> <span class=\"pre\">slots:</span></tt> | <tt class=\"literal\"><span class=\"pre\">private:</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">private</span> <span class=\"pre\">slots:</span></tt> | <tt class=\"literal\"><span class=\"pre\">signals:</span></tt>]\n\n<em>constructor</em> ::= <em>name</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt> [<em>exceptions</em>]\n        [<em>function-annotations</em>] [<em>c++-constructor-signature</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt>\n        [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n\n<em>c++-constructor-signature</em> ::= <tt class=\"literal\"><span class=\"pre\">[(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)]</span></tt>\n\n<em>destructor</em> ::= [<tt class=\"literal\"><span class=\"pre\">virtual</span></tt>] <tt class=\"literal\"><span class=\"pre\">~</span></tt> <em>name</em> <tt class=\"literal\"><span class=\"pre\">()</span></tt> [<em>exceptions</em>]\n        [<em>function-annotations</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n        [<a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a>]\n\n<em>method</em> ::= <em>type</em> <em>name</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt> [<tt class=\"literal\"><span class=\"pre\">const</span></tt>]\n        [<em>exceptions</em>] [<tt class=\"literal\"><span class=\"pre\">=</span> <span class=\"pre\">0</span></tt>] [<em>function-annotations</em>] [<em>c++-signature</em>]\n        <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n\n<em>c++-signature</em> ::= <tt class=\"literal\"><span class=\"pre\">[</span></tt> <em>type</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)]</span></tt>\n\n<em>static-method</em> ::= <tt class=\"literal\"><span class=\"pre\">static</span></tt> <em>function</em>\n\n<em>virtual-method</em> ::= <tt class=\"literal\"><span class=\"pre\">virtual</span></tt> <em>type</em> <em>name</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt>\n        [<tt class=\"literal\"><span class=\"pre\">const</span></tt>] [<em>exceptions</em>] [<tt class=\"literal\"><span class=\"pre\">=</span> <span class=\"pre\">0</span></tt>] [<em>function-annotations</em>]\n        [<em>c++-signature</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>] [<a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a>]\n\n<em>special-method</em> ::= <em>type</em> <em>special-method-name</em>\n        <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt> [<em>function-annotations</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt>\n        [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n\n<em>special-method-name</em> ::= [ <tt class=\"literal\"><span class=\"pre\">__add__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__and__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__call__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__cmp__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__contains__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__delitem__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__div__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__eq__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__ge__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__getitem__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__gt__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__iadd__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__iand__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__idiv__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__ilshift__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__imod__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__imul__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__int__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__invert__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__ior__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__irshift__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__isub__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__ixor__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__le__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__len__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__lshift__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__lt__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__mod__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__mul__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__ne__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__neg__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__nonzero__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__or__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__repr__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__rshift__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__setitem__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__str__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__sub__</span></tt> | <tt class=\"literal\"><span class=\"pre\">__unicode__</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">__xor__</span></tt>]\n\n<em>operator</em> ::= <em>type</em> <tt class=\"literal\"><span class=\"pre\">operator</span></tt> <em>operator-name</em>\n        <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt> [<tt class=\"literal\"><span class=\"pre\">const</span></tt>] [<em>exceptions</em>]\n        [<em>function-annotations</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n\n<em>operator-name</em> ::= [<tt class=\"literal\"><span class=\"pre\">+</span></tt> | <tt class=\"literal\"><span class=\"pre\">-</span></tt> | <tt class=\"literal\"><span class=\"pre\">*</span></tt> | <tt class=\"literal\"><span class=\"pre\">/</span></tt> | <tt class=\"literal\"><span class=\"pre\">%</span></tt> | <tt class=\"literal\"><span class=\"pre\">&amp;</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">|</span></tt> | <tt class=\"literal\"><span class=\"pre\">^</span></tt> | <tt class=\"literal\"><span class=\"pre\">&lt;&lt;</span></tt> | <tt class=\"literal\"><span class=\"pre\">&gt;&gt;</span></tt> | <tt class=\"literal\"><span class=\"pre\">+=</span></tt> | <tt class=\"literal\"><span class=\"pre\">-=</span></tt> | <tt class=\"literal\"><span class=\"pre\">*=</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">/=</span></tt> | <tt class=\"literal\"><span class=\"pre\">%=</span></tt> | <tt class=\"literal\"><span class=\"pre\">&amp;=</span></tt> | <tt class=\"literal\"><span class=\"pre\">|=</span></tt> | <tt class=\"literal\"><span class=\"pre\">^=</span></tt> | <tt class=\"literal\"><span class=\"pre\">&lt;&lt;=</span></tt> | <tt class=\"literal\"><span class=\"pre\">&gt;&gt;=</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">~</span></tt> | <tt class=\"literal\"><span class=\"pre\">()</span></tt> | <tt class=\"literal\"><span class=\"pre\">[]</span></tt> | <tt class=\"literal\"><span class=\"pre\">&lt;</span></tt> | <tt class=\"literal\"><span class=\"pre\">&lt;=</span></tt> | <tt class=\"literal\"><span class=\"pre\">==</span></tt> | <tt class=\"literal\"><span class=\"pre\">!=</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">&gt;</span></tt> | <tt class=\"literal\"><span class=\"pre\">&gt;&gt;=</span></tt>]\n\n<em>class-variable</em> ::= [<tt class=\"literal\"><span class=\"pre\">static</span></tt>] <em>variable</em>\n\n<em>enum</em> ::= <tt class=\"literal\"><span class=\"pre\">enum</span></tt> [<em>name</em>] <tt class=\"literal\"><span class=\"pre\">{</span></tt> {<em>enum-line</em>} <tt class=\"literal\"><span class=\"pre\">};</span></tt>\n\n<em>enum-line</em> ::= [<a class=\"reference\" href=\"#if\">%If</a> | <em>name</em>]\n\n<em>function</em> ::= <em>type</em> <em>name</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>argument-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt> [<em>exceptions</em>]\n        [<em>function-annotations</em>] <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#methodcode\">%MethodCode</a>]\n\n<em>namespace</em> ::= <tt class=\"literal\"><span class=\"pre\">namespace</span></tt> <em>name</em> <tt class=\"literal\"><span class=\"pre\">{</span></tt> {<em>namespace-line</em>} <tt class=\"literal\"><span class=\"pre\">};</span></tt>\n\n<em>namespace-line</em> ::= <em>statement</em>\n\n<em>opaque-class</em> ::= <tt class=\"literal\"><span class=\"pre\">class</span></tt> <em>scoped-name</em> <tt class=\"literal\"><span class=\"pre\">;</span></tt>\n\n<em>struct</em> ::= <tt class=\"literal\"><span class=\"pre\">struct</span></tt> <em>name</em> <tt class=\"literal\"><span class=\"pre\">{</span></tt> {<em>class-line</em>} <tt class=\"literal\"><span class=\"pre\">};</span></tt>\n\n<em>typedef</em> ::= <tt class=\"literal\"><span class=\"pre\">typedef</span></tt> <em>type</em> <em>name</em> <tt class=\"literal\"><span class=\"pre\">;</span></tt>\n\n<em>variable</em>::= <em>type</em> <em>name</em> <tt class=\"literal\"><span class=\"pre\">;</span></tt> [<a class=\"reference\" href=\"#accesscode\">%AccessCode</a>]\n\n<em>exceptions</em> ::= <tt class=\"literal\"><span class=\"pre\">throw</span> <span class=\"pre\">(</span></tt> [<em>exception-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt>\n\n<em>exception-list</em> ::= <em>scoped-name</em> [<tt class=\"literal\"><span class=\"pre\">,</span></tt> <em>exception-list</em>]\n\n<em>argument-list</em> ::= <em>argument</em> [<tt class=\"literal\"><span class=\"pre\">,</span></tt> <em>argument-list</em>]\n\n<em>argument</em> ::= [<em>type</em> [<em>argument-annotations</em>] [<em>default-value</em>] | \n        <a class=\"reference\" href=\"#sip-qobject\">SIP_QOBJECT</a> | <a class=\"reference\" href=\"#sip-rxobj-con\">SIP_RXOBJ_CON</a> | <a class=\"reference\" href=\"#sip-rxobj-dis\">SIP_RXOBJ_DIS</a> | <a class=\"reference\" href=\"#sip-signal\">SIP_SIGNAL</a> |\n        <a class=\"reference\" href=\"#sip-slot\">SIP_SLOT</a> | SIP_SLOT_CON()_ | SIP_SLOT_DIS()_]\n\n<em>default-value</em> ::= <tt class=\"literal\"><span class=\"pre\">=</span></tt> <em>expression</em>\n\n<em>expression</em> ::= [<em>value</em> | <em>value</em> <em>binary-operator</em> <em>expression</em>]\n\n<em>value</em> ::= [<em>unary-operator</em>] <em>simple-value</em>\n\n<em>simple-value</em> ::= [<em>scoped-name</em> | <em>function-call</em> | <em>real-value</em> |\n        <em>integer-value</em> | <em>boolean-value</em> | <em>string-value</em> |\n        <em>character-value</em>]\n\n<em>function-call</em> ::= <em>scoped-name</em> <tt class=\"literal\"><span class=\"pre\">(</span></tt> [<em>value-list</em>] <tt class=\"literal\"><span class=\"pre\">)</span></tt>\n\n<em>value-list</em> ::= <em>value</em> [<tt class=\"literal\"><span class=\"pre\">,</span></tt> <em>value-list</em>]\n\n<em>real-value</em> ::= a floating point number\n\n<em>integer-value</em> ::= a number\n\n<em>boolean-value</em> ::= [<tt class=\"literal\"><span class=\"pre\">true</span></tt> | <tt class=\"literal\"><span class=\"pre\">false</span></tt>]\n\n<em>string-value</em> ::= <tt class=\"literal\"><span class=\"pre\">&quot;</span></tt> {<em>character</em>} <tt class=\"literal\"><span class=\"pre\">&quot;</span></tt>\n\n<em>character-value</em> ::= <tt class=\"literal\"><span class=\"pre\">`</span></tt> <em>character</em> <tt class=\"literal\"><span class=\"pre\">`</span></tt>\n\n<em>unary-operator</em> ::= [<tt class=\"literal\"><span class=\"pre\">!</span></tt> | <tt class=\"literal\"><span class=\"pre\">~</span></tt> | <tt class=\"literal\"><span class=\"pre\">-</span></tt> | <tt class=\"literal\"><span class=\"pre\">+</span></tt>]\n\n<em>binary-operator</em> ::= [<tt class=\"literal\"><span class=\"pre\">-</span></tt> | <tt class=\"literal\"><span class=\"pre\">+</span></tt> | <tt class=\"literal\"><span class=\"pre\">*</span></tt> | <tt class=\"literal\"><span class=\"pre\">/</span></tt> | <tt class=\"literal\"><span class=\"pre\">&amp;</span></tt> | <tt class=\"literal\"><span class=\"pre\">|</span></tt>]\n\n<em>function-annotations</em> ::= see <a class=\"reference\" href=\"#function-annotations\">Function Annotations</a>\n\n<em>argument-annotations</em> ::= see <a class=\"reference\" href=\"#argument-annotations\">Argument Annotations</a>\n\n<em>type</em> ::= [<tt class=\"literal\"><span class=\"pre\">const</span></tt>] <em>base-type</em> {<tt class=\"literal\"><span class=\"pre\">*</span></tt>} [<tt class=\"literal\"><span class=\"pre\">&amp;</span></tt>]\n\n<em>type-list</em> ::= <em>type</em> [<tt class=\"literal\"><span class=\"pre\">,</span></tt> <em>type-list</em>]\n\n<em>base-type</em> ::= [<em>scoped-name</em> | <em>template</em> | <tt class=\"literal\"><span class=\"pre\">struct</span></tt> <em>scoped-name</em> |\n        <tt class=\"literal\"><span class=\"pre\">short</span></tt> | <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">short</span></tt> | <tt class=\"literal\"><span class=\"pre\">int</span></tt> | <tt class=\"literal\"><span class=\"pre\">unsigned</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">int</span></tt> | <tt class=\"literal\"><span class=\"pre\">long</span></tt> | <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">long</span></tt> | <tt class=\"literal\"><span class=\"pre\">float</span></tt> |\n        <tt class=\"literal\"><span class=\"pre\">double</span></tt> | <tt class=\"literal\"><span class=\"pre\">bool</span></tt> | <tt class=\"literal\"><span class=\"pre\">char</span></tt> | <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">char</span></tt> | <tt class=\"literal\"><span class=\"pre\">void</span></tt> |\n        <a class=\"reference\" href=\"#sip-pycallable\">SIP_PYCALLABLE</a> | <a class=\"reference\" href=\"#sip-pydict\">SIP_PYDICT</a> | <a class=\"reference\" href=\"#sip-pylist\">SIP_PYLIST</a> | <a class=\"reference\" href=\"#sip-pyobject\">SIP_PYOBJECT</a> |\n        <a class=\"reference\" href=\"#sip-pytuple\">SIP_PYTUPLE</a> | <a class=\"reference\" href=\"#sip-pyslice\">SIP_PYSLICE</a>]\n\n<em>scoped-name</em> ::= <em>name</em> [<tt class=\"literal\"><span class=\"pre\">::</span></tt> <em>scoped-name</em>]\n\n<em>template</em> ::= <em>scoped-name</em> <tt class=\"literal\"><span class=\"pre\">&lt;</span></tt> <em>type-list</em> <tt class=\"literal\"><span class=\"pre\">&gt;</span></tt>\n\n<em>name</em> ::= _A-Za-z {_A-Za-z0-9}\n</pre>\n<p>Here is a short list of differences between C++ and the subset supported by\nSIP that might trip you up.</p>\n<blockquote>\n<ul class=\"simple\">\n<li>SIP does not support the use of <tt class=\"literal\"><span class=\"pre\">[]</span></tt> in types.  Use pointers instead.</li>\n<li><tt class=\"literal\"><span class=\"pre\">operator</span></tt> can only be used in a class.</li>\n<li>Variables declared outside of a class are effectively read-only.</li>\n<li>Functions and methods do not support argument names.</li>\n<li>A class's list of super-classes doesn't not include any access specifier\n(e.g. <tt class=\"literal\"><span class=\"pre\">public</span></tt>).</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"additional-sip-types\">\n<h2><a class=\"toc-backref\" href=\"#id38\" name=\"additional-sip-types\">5.2\u00a0\u00a0\u00a0Additional SIP Types</a></h2>\n<p>SIP supports a number of additional data types that can be used in Python\nsignatures.</p>\n<div class=\"section\" id=\"sip-pycallable\">\n<h3><a class=\"toc-backref\" href=\"#id39\" name=\"sip-pycallable\">5.2.1\u00a0\u00a0\u00a0SIP_PYCALLABLE</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> that is a Python callable object.</p>\n</div>\n<div class=\"section\" id=\"sip-pydict\">\n<h3><a class=\"toc-backref\" href=\"#id40\" name=\"sip-pydict\">5.2.2\u00a0\u00a0\u00a0SIP_PYDICT</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> that is a Python dictionary object.</p>\n</div>\n<div class=\"section\" id=\"sip-pylist\">\n<h3><a class=\"toc-backref\" href=\"#id41\" name=\"sip-pylist\">5.2.3\u00a0\u00a0\u00a0SIP_PYLIST</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> that is a Python list object.</p>\n</div>\n<div class=\"section\" id=\"sip-pyobject\">\n<h3><a class=\"toc-backref\" href=\"#id42\" name=\"sip-pyobject\">5.2.4\u00a0\u00a0\u00a0SIP_PYOBJECT</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> of any Python type.</p>\n</div>\n<div class=\"section\" id=\"sip-pytuple\">\n<h3><a class=\"toc-backref\" href=\"#id43\" name=\"sip-pytuple\">5.2.5\u00a0\u00a0\u00a0SIP_PYTUPLE</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> that is a Python tuple object.</p>\n</div>\n<div class=\"section\" id=\"sip-pyslice\">\n<h3><a class=\"toc-backref\" href=\"#id44\" name=\"sip-pyslice\">5.2.6\u00a0\u00a0\u00a0SIP_PYSLICE</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt> that is a Python slice object.</p>\n</div>\n<div class=\"section\" id=\"sip-qobject\">\n<h3><a class=\"toc-backref\" href=\"#id45\" name=\"sip-qobject\">5.2.7\u00a0\u00a0\u00a0SIP_QOBJECT</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">QObject</span> <span class=\"pre\">*</span></tt> that is a C++ instance of a class derived from Qt's\n<tt class=\"literal\"><span class=\"pre\">QObject</span></tt> class.</p>\n</div>\n<div class=\"section\" id=\"sip-rxobj-con\">\n<h3><a class=\"toc-backref\" href=\"#id46\" name=\"sip-rxobj-con\">5.2.8\u00a0\u00a0\u00a0SIP_RXOBJ_CON</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">QObject</span> <span class=\"pre\">*</span></tt> that is a C++ instance of a class derived from Qt's\n<tt class=\"literal\"><span class=\"pre\">QObject</span></tt> class.  It is used as the type of the receiver instead of <tt class=\"literal\"><span class=\"pre\">const</span>\n<span class=\"pre\">QObject</span> <span class=\"pre\">*</span></tt> in functions that implement a connection to a slot.</p>\n</div>\n<div class=\"section\" id=\"sip-rxobj-dis\">\n<h3><a class=\"toc-backref\" href=\"#id47\" name=\"sip-rxobj-dis\">5.2.9\u00a0\u00a0\u00a0SIP_RXOBJ_DIS</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">QObject</span> <span class=\"pre\">*</span></tt> that is a C++ instance of a class derived from Qt's\n<tt class=\"literal\"><span class=\"pre\">QObject</span></tt> class.  It is used as the type of the receiver instead of <tt class=\"literal\"><span class=\"pre\">const</span>\n<span class=\"pre\">QObject</span> <span class=\"pre\">*</span></tt> in functions that implement a disconnection from a slot.</p>\n</div>\n<div class=\"section\" id=\"sip-signal\">\n<h3><a class=\"toc-backref\" href=\"#id48\" name=\"sip-signal\">5.2.10\u00a0\u00a0\u00a0SIP_SIGNAL</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> that is used as the type of the signal instead of\n<tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> in functions that implement the connection or disconnection\nof an explicitly generated signal to a slot.</p>\n</div>\n<div class=\"section\" id=\"sip-slot\">\n<h3><a class=\"toc-backref\" href=\"#id49\" name=\"sip-slot\">5.2.11\u00a0\u00a0\u00a0SIP_SLOT</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> that is used as the type of the member instead of\n<tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> in functions that implement the connection or disconnection\nof an explicitly generated signal to a slot.</p>\n</div>\n<div class=\"section\" id=\"sip-slot-con\">\n<h3><a class=\"toc-backref\" href=\"#id50\" name=\"sip-slot-con\">5.2.12\u00a0\u00a0\u00a0SIP_SLOT_CON()</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> that is used as the type of the member instead of\n<tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> in functions that implement the connection of an internally\ngenerated signal to a slot.  The type includes a comma separated list of types\nthat is the C++ signature of of the signal.</p>\n<p>To take an example, <tt class=\"literal\"><span class=\"pre\">QAccel::connectItem()</span></tt> connects an internally generated\nsignal to a slot.  The signal is emitted when the keyboard accelerator is\nactivated and it has a single integer argument that is the ID of the\naccelerator.  The C++ signature is:</p>\n<pre class=\"literal-block\">\nbool connectItem(int id, const QObject *receiver, const char *member);\n</pre>\n<p>The corresponding SIP specification is:</p>\n<pre class=\"literal-block\">\nbool connectItem(int, SIP_RXOBJ_CON, SIP_SLOT_CON(int));\n</pre>\n</div>\n<div class=\"section\" id=\"sip-slot-dis\">\n<h3><a class=\"toc-backref\" href=\"#id51\" name=\"sip-slot-dis\">5.2.13\u00a0\u00a0\u00a0SIP_SLOT_DIS()</a></h3>\n<p>This is a <tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> that is used as the type of the member instead of\n<tt class=\"literal\"><span class=\"pre\">const</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> in functions that implement the disconnection of an\ninternally generated signal to a slot.  The type includes a comma separated\nlist of types that is the C++ signature of of the signal.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"sip-directives\">\n<h1><a class=\"toc-backref\" href=\"#id52\" name=\"sip-directives\">6\u00a0\u00a0\u00a0SIP Directives</a></h1>\n<p>In this section we describe each of the directives that can be used in\nspecification files.  All directives begin with <tt class=\"literal\"><span class=\"pre\">%</span></tt> as the first\nnon-whitespace character in a line.</p>\n<p>Some directives have arguments or contain blocks of code or documentation.  In\nthe following descriptions these are shown in <em>italics</em>.  Optional arguments\nare enclosed in [<em>brackets</em>].</p>\n<p>Some directives are used to specify handwritten code.  Handwritten code must\nnot define names that start with the prefix <tt class=\"literal\"><span class=\"pre\">sip</span></tt>.</p>\n<div class=\"section\" id=\"accesscode\">\n<h2><a class=\"toc-backref\" href=\"#id53\" name=\"accesscode\">6.1\u00a0\u00a0\u00a0%AccessCode</a></h2>\n<pre class=\"literal-block\">\n%AccessCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used immediately after the declaration of an instance of a\nwrapped class or structure, or a pointer to such an instance.  You use it to\nprovide handwritten code that overrides the default behaviour.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\nclass Klass;\n\nKlass *klassInstance;\n%AccessCode\n    // In this contrived example the C++ library we are wrapping defines\n    // klassInstance as Klass ** (which SIP doesn't support) so we\n    // explicitly dereference it.\n    if (klassInstance &amp;&amp; *klassInstance)\n        return *klassInstance;\n\n    // This will get converted to None.\n    return 0;\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"cmodule\">\n<h2><a class=\"toc-backref\" href=\"#id54\" name=\"cmodule\">6.2\u00a0\u00a0\u00a0%CModule</a></h2>\n<pre class=\"literal-block\">\n%CModule <em>name</em> [<em>version</em>]\n</pre>\n<p>This directive is used to identify that the library being wrapped is a C\nlibrary and to define the name of the module and it's optional version number.</p>\n<p>See the <a class=\"reference\" href=\"#module\">%Module</a> directive for an explanation of the version number.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%CModule dbus 1\n</pre>\n</div>\n<div class=\"section\" id=\"convertfromtypecode\">\n<h2><a class=\"toc-backref\" href=\"#id55\" name=\"convertfromtypecode\">6.3\u00a0\u00a0\u00a0%ConvertFromTypeCode</a></h2>\n<pre class=\"literal-block\">\n%ConvertFromTypeCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used as part of the <a class=\"reference\" href=\"#mappedtype\">%MappedType</a> directive to specify the\nhandwritten code that converts an instance of a mapped type to a Python\nobject.</p>\n<p>The following variables are made available to the handwritten code:</p>\n<dl>\n<dt><em>type</em> *sipCpp</dt>\n<dd>This is a pointer to the instance of the mapped type to be converted.  It\nmay be zero.</dd>\n</dl>\n<p>The handwritten code must explicitly return a <tt class=\"literal\"><span class=\"pre\">PyObject</span> <span class=\"pre\">*</span></tt>.  If there was an\nerror then a Python exception must be raised and <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> returned.</p>\n<p>The following example converts a <tt class=\"literal\"><span class=\"pre\">QValueList&lt;int&gt;</span></tt> instance to a Python\nlist of numbers:</p>\n<pre class=\"literal-block\">\n%ConvertFromTypeCode\n    // Handle the case where the C++ instance is 0.\n    if (!sipCpp)\n        return PyList_New(0);\n\n    PyObject *l;\n\n    // Create the Python list of the correct length.\n    if ((l = PyList_New(sipCpp -&gt; count())) == NULL)\n        return NULL;\n\n    // Go through each int in the C++ instance and convert it to a number.\n    for (uint i = 0; i &lt; sipCpp -&gt; count(); ++i)\n        if (PyList_SetItem(l, i, PyInt_FromLong((*sipCpp)[i])) &lt; 0)\n        {\n            // There was an error so garbage collect the Python list.\n            Py_DECREF(l);\n            return NULL;\n        }\n\n    // Return the Python list.\n    return l;\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"converttosubclasscode\">\n<h2><a class=\"toc-backref\" href=\"#id56\" name=\"converttosubclasscode\">6.4\u00a0\u00a0\u00a0%ConvertToSubClassCode</a></h2>\n<pre class=\"literal-block\">\n%ConvertToSubClassCode\n    <em>code</em>\n%End\n</pre>\n<p>When SIP needs to wrap a C++ class instance it first checks to make sure it\nhasn't already done so.  If it has then it just returns a new reference to the\ncorresponding Python object.  Otherwise it creates a new Python object of the\nappropriate type.  In C++ a function may be defined to returned an instance of\na certain class, but can often return a sub-class instead.</p>\n<p>This directive is used to specify handwritten code that exploits any available\nreal-time type information (RTTI) to see if there is a more specific Python\ntype that can be used when wrapping the C++ instance.  The RTTI may be\nprovided by the compiler or by the C++ instance itself.</p>\n<p>The directive is included in the specification of one of the classes that the\nhandwritten code handles the type conversion for.  It doesn't matter which\none, but a sensible choice would be the one at the root of that class\nhierarchy in the module.</p>\n<p>Note that if a class hierarchy extends over a number of modules then this\ndirective should be used in each of those modules to handle the part of the\nhierarchy defined in that module.  SIP will ensure that the different pieces\nof code are called in the right order to determine the most specific Python\ntype to use.</p>\n<p>The following variables are made available to the handwritten code:</p>\n<dl>\n<dt><em>type</em> *sipCpp</dt>\n<dd>This is a pointer to the C++ class instance.</dd>\n<dt>sipWrapperType *sipClass</dt>\n<dd>The handwritten code must set this to the SIP generated Python type object\nthat corresponds to the class instance.  (The type object for class\n<tt class=\"literal\"><span class=\"pre\">Klass</span></tt> is <tt class=\"literal\"><span class=\"pre\">sipClass_Klass</span></tt>.)  If the RTTI of the class instance isn't\nrecognised then <tt class=\"literal\"><span class=\"pre\">sipClass</span></tt> must be set to <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>.</dd>\n</dl>\n<p>The handwritten code must not explicitly return.</p>\n<p>The following example shows the sub-class conversion code for <tt class=\"literal\"><span class=\"pre\">QEvent</span></tt> based\nclass hierarchy in PyQt:</p>\n<pre class=\"literal-block\">\nclass QEvent\n{\n%ConvertToSubClassCode\n    // QEvent sub-classes provide a unique type ID.\n    switch (sipCpp -&gt; type())\n    {\n    case QEvent::Timer:\n        sipClass = sipClass_QTimerEvent;\n        break;\n\n    case QEvent::KeyPress:\n    case QEvent::KeyRelease:\n        sipClass = sipClass_QKeyEvent;\n        break;\n\n    // Skip the remaining event types the keep the example short.\n\n    default:\n        // We don't recognise the type.\n        sipClass = NULL;\n    }\n%End\n\n    // The rest of the class specification.\n\n};\n</pre>\n<p>The SIP API includes the <a class=\"reference\" href=\"#sipmapinttoclass\">sipMapIntToClass()</a> and <a class=\"reference\" href=\"#sipmapstringtoclass\">sipMapStringToClass()</a>\nfunctions that convert integer and string based RTTI to Python type objects\nbased on ordered lookup tables.</p>\n</div>\n<div class=\"section\" id=\"converttotypecode\">\n<h2><a class=\"toc-backref\" href=\"#id57\" name=\"converttotypecode\">6.5\u00a0\u00a0\u00a0%ConvertToTypeCode</a></h2>\n<pre class=\"literal-block\">\n%ConvertToTypeCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used to specify the handwritten code that converts a Python\nobject to a mapped type instance.  It is used as part of the <a class=\"reference\" href=\"#mappedtype\">%MappedType</a>\ndirective and as part of a class specification.  The code is also called to\ndetermine if the Python object is of the correct type prior to conversion.</p>\n<p>When used as part of a class specification is can automatically convert\nadditional types of Python object.  For example, PyQt uses it in the\nspecification of the <tt class=\"literal\"><span class=\"pre\">QString</span></tt> class to allow Python string objects and\nUnicode objects to be used wherever <tt class=\"literal\"><span class=\"pre\">QString</span></tt> instances are expected.</p>\n<p>The following variables are made available to the handwritten code:</p>\n<dl>\n<dt>int *sipIsErr</dt>\n<dd>If this is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then the code is being asked to check the type of the\nPython object.  The check must not have any side effects.  Otherwise the\ncode is being asked to convert the Python object and a non-zero value\nshould be returned through this pointer if an error occurred during the\nconversion.</dd>\n<dt>PyObject *sipPy</dt>\n<dd>This is the Python object to be converted.</dd>\n<dt><em>type</em> **sipCppPtr</dt>\n<dd>This is a pointer through which the address of the mapped type instance (or\nzero if appropriate) is returned.  Its value is undefined if <tt class=\"literal\"><span class=\"pre\">sipIsErr</span></tt>\nis <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>.</dd>\n</dl>\n<p>The handwritten code must explicitly return an <tt class=\"literal\"><span class=\"pre\">int</span></tt> that is either zero or\nnon-zero.  Its meaning depends on the value of <tt class=\"literal\"><span class=\"pre\">sipIsErr</span></tt>.</p>\n<p>If <tt class=\"literal\"><span class=\"pre\">sipIsErr</span></tt> is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then a non-zero value is returned if the Python\nobject has a type that can be converted to the mapped type.  Otherwise zero is\nreturned.</p>\n<p>If <tt class=\"literal\"><span class=\"pre\">sipIsErr</span></tt> is not <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then a non-zero value is returned if the\nmapped type instance returned through <tt class=\"literal\"><span class=\"pre\">sipCppPtr</span></tt> was created on the heap.\nOtherwise zero is returned.</p>\n<p>The following example converts a Python list of numbers to a\n<tt class=\"literal\"><span class=\"pre\">QValueList&lt;int&gt;</span></tt> instance:</p>\n<pre class=\"literal-block\">\n%ConvertToTypeCode\n    // See if we are just being asked to check the type of the Python\n    // object.\n    if (sipIsErr == NULL)\n        return PyList_Check(sipPy);\n\n    // We map None to a 0 pointer.\n    if (sipPy == Py_None)\n    {\n        *sipCppPtr = 0;\n\n        // There is nothing on the heap.\n        return 0;\n    }\n\n    // Create the instance on the heap.\n    QValueList&lt;int&gt; *qvl = new QValueList&lt;int&gt;;\n\n    PyErr_Clear();\n\n    for (int i = 0; i &lt; PyList_GET_SIZE(sipPy); ++i)\n    {\n        qvl -&gt; append(PyInt_AsLong(PyList_GET_ITEM(sipPy, i)));\n\n        if (PyErr_Occurred() != NULL)\n        {\n            // Tidy up.\n            delete qvl;\n\n            // Set the error flag.\n            *sipIsErr = 1;\n\n            // There is nothing on the heap.\n            return 0;\n        }\n    }\n\n    // Return the instance on the heap.\n    *sipCppPtr = qvl;\n\n    // The result is a pointer to an instance on the heap.\n    return 1;\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"copying\">\n<h2><a class=\"toc-backref\" href=\"#id58\" name=\"copying\">6.6\u00a0\u00a0\u00a0%Copying</a></h2>\n<pre class=\"literal-block\">\n%Copying\n    <em>text</em>\n%End\n</pre>\n<p>This directive is used to specify some arbitrary text that will be included at\nthe start of all source files generated by SIP.  It is normally used to\ninclude copyright and licensing terms.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Copying\nCopyright (c) 2004 Riverbank Computing Limited\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"doc\">\n<h2><a class=\"toc-backref\" href=\"#id59\" name=\"doc\">6.7\u00a0\u00a0\u00a0%Doc</a></h2>\n<pre class=\"literal-block\">\n%Doc\n    <em>text</em>\n%End\n</pre>\n<p>This directive is used to specify some arbitrary text that will be extracted\nby SIP when the <tt class=\"literal\"><span class=\"pre\">-d</span></tt> command line option is used.  The directive can be\nspecified any number of times and SIP will concatenate all the separate pieces\nof text in the order that it sees them.</p>\n<p>Documentation that is specified using this directive is local to the module in\nwhich it appears.  It is ignored by modules that <a class=\"reference\" href=\"#import\">%Import</a> it.  Use the\n<a class=\"reference\" href=\"#exporteddoc\">%ExportedDoc</a> directive for documentation that should be included by all\nmodules that <a class=\"reference\" href=\"#import\">%Import</a> this one.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Doc\n&lt;h1&gt;An Example&lt;/h1&gt;\n&lt;p&gt;\nThis fragment of documentation is HTML and is local to the module in\nwhich it is defined.\n&lt;/p&gt;\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"end\">\n<h2><a class=\"toc-backref\" href=\"#id60\" name=\"end\">6.8\u00a0\u00a0\u00a0%End</a></h2>\n<p>This isn't a directive in itself, but is used to terminate a number of\ndirectives that allow a block of handwritten code or text to be specified.</p>\n</div>\n<div class=\"section\" id=\"exporteddoc\">\n<h2><a class=\"toc-backref\" href=\"#id61\" name=\"exporteddoc\">6.9\u00a0\u00a0\u00a0%ExportedDoc</a></h2>\n<pre class=\"literal-block\">\n%ExportedDoc\n    <em>text</em>\n%End\n</pre>\n<p>This directive is used to specify some arbitrary text that will be extracted\nby SIP when the <tt class=\"literal\"><span class=\"pre\">-d</span></tt> command line option is used.  The directive can be\nspecified any number of times and SIP will concatenate all the separate pieces\nof text in the order that it sees them.</p>\n<p>Documentation that is specified using this directive will also be included by\nmodules that <a class=\"reference\" href=\"#import\">%Import</a> it.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%ExportedDoc\n==========\nAn Example\n==========\n\nThis fragment of documentation is reStructuredText and will appear in the\nmodule in which it is defined and all modules that %Import it.\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"feature\">\n<h2><a class=\"toc-backref\" href=\"#id62\" name=\"feature\">6.10\u00a0\u00a0\u00a0%Feature</a></h2>\n<pre class=\"literal-block\">\n%Feature <em>name</em>\n</pre>\n<p>This directive is used to declare a feature.  Features (along with\n<a class=\"reference\" href=\"#platforms\">%Platforms</a> and <a class=\"reference\" href=\"#timeline\">%Timeline</a>) are used by the <a class=\"reference\" href=\"#if\">%If</a> directive to control\nwhether or not parts of a specification are processed or ignored.</p>\n<p>Features are mutually independent of each other - any combination of features\nmay be enabled or disable.  By default all features are enabled.  The SIP\n<tt class=\"literal\"><span class=\"pre\">-x</span></tt> command line option is used to disable a feature.</p>\n<p>If a feature is enabled then SIP will automatically generate a corresponding C\npreprocessor symbol for use by handwritten code.  The symbol is the name of\nthe feature prefixed by <tt class=\"literal\"><span class=\"pre\">SIP_FEATURE_</span></tt>.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Feature FOO_SUPPORT\n\n%If (FOO_SUPPORT)\nvoid foo();\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"if\">\n<h2><a class=\"toc-backref\" href=\"#id63\" name=\"if\">6.11\u00a0\u00a0\u00a0%If</a></h2>\n<pre class=\"literal-block\">\n%If (<em>expression</em>)\n    <em>specification</em>\n%End\n</pre>\n<p>where</p>\n<pre class=\"literal-block\">\n<em>expression</em> ::= [<em>ored-qualifiers</em> | <em>range</em>]\n\n<em>ored-qualifiers</em> ::= [<em>qualifier</em> | <em>qualifier</em> <tt class=\"literal\"><span class=\"pre\">||</span></tt> <em>ored-qualifiers</em>]\n\n<em>qualifier</em> ::= [<tt class=\"literal\"><span class=\"pre\">!</span></tt>] [<em>feature</em> | <em>platform</em>]\n\n<em>range</em> ::= [<em>version</em>] <tt class=\"literal\"><span class=\"pre\">-</span></tt> [<em>version</em>]\n</pre>\n<p>This directive is used in conjunction with features (see <a class=\"reference\" href=\"#feature\">%Feature</a>),\nplatforms (see <a class=\"reference\" href=\"#platforms\">%Platforms</a>) and versions (see <a class=\"reference\" href=\"#timeline\">%Timeline</a>) to control\nwhether or not parts of a specification are processed or not.</p>\n<p>A <em>range</em> of versions means all versions starting with the lower bound up to\nbut excluding the upper bound.  If the lower bound is omitted then it is\ninterpreted as being before the earliest version.  If the upper bound is\nomitted then it is interpreted as being after the latest version.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Feature SUPPORT_FOO\n%Platforms {WIN32_PLATFORM POSIX_PLATFORM MACOS_PLATFORM}\n%Timeline {V1_0 V1_1 V2_0 V3_0}\n\n%If (!SUPPORT_FOO)\n    // Process this if the SUPPORT_FOO feature is disabled.\n%End\n\n%If (POSIX_PLATFORM || MACOS_PLATFORM)\n    // Process this if either the POSIX_PLATFORM or MACOS_PLATFORM\n    // platforms are enabled.\n%End\n\n%If (V1_0 - V2_0)\n    // Process this if either V1_0 or V1_1 is enabled.\n%End\n\n%If (V2_0 - )\n    // Process this if either V2_0 or V3_0 is enabled.\n%End\n\n%If ( - )\n    // Always process this.\n%End\n</pre>\n<p>Note that this directive is not implemented as a preprocessor.  Only the\nfollowing parts of a specification are affected by it:</p>\n<blockquote>\n<ul class=\"simple\">\n<li><tt class=\"literal\"><span class=\"pre\">class</span></tt></li>\n<li><a class=\"reference\" href=\"#convertfromtypecode\">%ConvertFromTypeCode</a></li>\n<li><a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a></li>\n<li><a class=\"reference\" href=\"#converttotypecode\">%ConvertToTypeCode</a></li>\n<li><tt class=\"literal\"><span class=\"pre\">enum</span></tt></li>\n<li>functions</li>\n<li><a class=\"reference\" href=\"#if\">%If</a></li>\n<li><a class=\"reference\" href=\"#mappedtype\">%MappedType</a></li>\n<li><a class=\"reference\" href=\"#methodcode\">%MethodCode</a></li>\n<li><a class=\"reference\" href=\"#modulecode\">%ModuleCode</a></li>\n<li><a class=\"reference\" href=\"#moduleheadercode\">%ModuleHeaderCode</a></li>\n<li><tt class=\"literal\"><span class=\"pre\">namespace</span></tt></li>\n<li><tt class=\"literal\"><span class=\"pre\">struct</span></tt></li>\n<li><tt class=\"literal\"><span class=\"pre\">typedef</span></tt></li>\n<li><a class=\"reference\" href=\"#typecode\">%TypeCode</a></li>\n<li><a class=\"reference\" href=\"#typeheadercode\">%TypeHeaderCode</a></li>\n<li>variables</li>\n<li><a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a></li>\n</ul>\n</blockquote>\n<p>Also note that the only way to specify the logical and of qualifiers is to use\nnested <a class=\"reference\" href=\"#if\">%If</a> directives.</p>\n</div>\n<div class=\"section\" id=\"import\">\n<h2><a class=\"toc-backref\" href=\"#id64\" name=\"import\">6.12\u00a0\u00a0\u00a0%Import</a></h2>\n<pre class=\"literal-block\">\n%Import <em>filename</em>\n</pre>\n<p>This directive is used to import the specification of another module.  This is\nneeded if the current module makes use of any types defined in the imported\nmodule, e.g. as an argument to a function, or to sub-class.</p>\n<p>If <em>filename</em> cannot be opened then SIP prepends <em>filename</em> with the name of\nthe directory containing the current specification file (i.e. the one\ncontaining the <a class=\"reference\" href=\"#import\">%Import</a> directive) and tries again.  If this also fails then\nSIP prepends <em>filename</em> with each of the directories, in turn, specified by\nthe <tt class=\"literal\"><span class=\"pre\">-I</span></tt> command line option.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Import qt/qtmod.sip\n</pre>\n</div>\n<div class=\"section\" id=\"include\">\n<h2><a class=\"toc-backref\" href=\"#id65\" name=\"include\">6.13\u00a0\u00a0\u00a0%Include</a></h2>\n<pre class=\"literal-block\">\n%Include <em>filename</em>\n</pre>\n<p>This directive is used to include contents of another file as part of the\nspecification of the current module.  It is the equivalent of the C\npreprocessor's <tt class=\"literal\"><span class=\"pre\">#include</span></tt> directive and is used to structure a large module\nspecification into manageable pieces.</p>\n<p><a class=\"reference\" href=\"#include\">%Include</a> follows the same search process as <a class=\"reference\" href=\"#import\">%Import</a> when trying to open\n<em>filename</em>.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Include qwidget.sip\n</pre>\n</div>\n<div class=\"section\" id=\"id16\">\n<h2><a class=\"toc-backref\" href=\"#id66\" name=\"id16\">6.14\u00a0\u00a0\u00a0%License</a></h2>\n<pre class=\"literal-block\">\n%License /<em>license-annotations</em>/\n</pre>\n<p>This directive is used to specify the contents of an optional license\ndictionary.  The license dictionary is called <tt class=\"literal\"><span class=\"pre\">__license__</span></tt> and is stored in\nthe module dictionary.  The elements of the dictionary are specified using the\n<a class=\"reference\" href=\"#licensee\">Licensee</a>, <a class=\"reference\" href=\"#signature\">Signature</a>, <a class=\"reference\" href=\"#timestamp\">Timestamp</a> and <a class=\"reference\" href=\"#type\">Type</a> annotations.  Only the <a class=\"reference\" href=\"#type\">Type</a>\nannotation is compulsory.</p>\n<p>Note that this directive isn't an attempt to impose any licensing restrictions\non a module.  It is simply a method for easily embedding licensing information\nin a module so that it is accessible to Python scripts.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%License /Type=&quot;GPL&quot;/\n</pre>\n</div>\n<div class=\"section\" id=\"mappedtype\">\n<h2><a class=\"toc-backref\" href=\"#id67\" name=\"mappedtype\">6.15\u00a0\u00a0\u00a0%MappedType</a></h2>\n<pre class=\"literal-block\">\n%MappedType <em>type</em>\n{\n    [<em>header-code</em>]\n    [<em>convert-to-code</em>]\n    [<em>convert-from-code</em>]\n}\n</pre>\n<p>This directive is used to define an automatic mapping between a C or C++ type\nand a Python type.  The C/C++ <em>type</em> being mapped must be either a structure,\na class, or a template.  Mapped types are the only way SIP supports templates.</p>\n<p><em>header-code</em> is the <a class=\"reference\" href=\"#typeheadercode\">%TypeHeaderCode</a> used to specify the library interface\nto the type being mapped.</p>\n<p><em>convert-to-code</em> is the <a class=\"reference\" href=\"#converttotypecode\">%ConvertToTypeCode</a> used to specify the handwritten\ncode that converts a Python object to an instance of the mapped type.</p>\n<p><em>convert-from-code</em> is the <a class=\"reference\" href=\"#convertfromtypecode\">%ConvertFromTypeCode</a> used to specify the\nhandwritten code that converts an instance of the mapped type to a Python\nobject.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%MappedType QValueList&lt;int&gt;\n{\n%TypeHeaderCode\n// Include the library interface to the type being mapped.\n#include &lt;qvaluelist.h&gt;\n%End\n\n%ConvertToTypeCode\n    // See the %ConvertToTypeCode example for the code that converts a\n    // Python list of numbers to a QValueList&lt;int&gt; instance.\n%End\n\n%ConvertFromTypeCode\n    // See the %ConvertFromTypeCode example for the code that converts a\n    // QValueList&lt;int&gt; instance to a Python list of numbers.\n%End\n}\n</pre>\n<p>In this example we can use <tt class=\"literal\"><span class=\"pre\">QValueList&lt;int&gt;</span></tt> throughout the module's\nspecification files (and in any module that imports this one).  The generated\ncode will automatically map this to and from a Python list of numbers when\nappropriate.</p>\n</div>\n<div class=\"section\" id=\"methodcode\">\n<h2><a class=\"toc-backref\" href=\"#id68\" name=\"methodcode\">6.16\u00a0\u00a0\u00a0%MethodCode</a></h2>\n<pre class=\"literal-block\">\n%MethodCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used as part of the specification of a global function, class\nmethod, operator, constructor or destructor to specify handwritten code that\nreplaces the normally generated call to the function being wrapped.  It is\nusually used to handle argument types and results that SIP cannot deal with\nautomatically.</p>\n<p>The specified code is embedded in-line after the function's arguments have\nbeen successfully converted from Python objects to their C or C++ equivalents.\nThe specified code must not include any <tt class=\"literal\"><span class=\"pre\">return</span></tt> statements.</p>\n<p>The the context of a destructor the specified code is embedded in-line in the\nPython type's deallocation function.</p>\n<p>The specified code must also handle the Python Global Interpreter Lock (GIL).\nIf compatibility with <a class=\"reference\" href=\"#sip-v3-x\">SIP v3.x</a> is required then the GIL must be released\nimmediately before the C++ call and reacquired immediately afterwards as shown\nin this example fragment:</p>\n<pre class=\"literal-block\">\nPy_BEGIN_ALLOW_THREADS\nsipCpp -&gt; foo();\nPy_END_ALLOW_THREADS\n</pre>\n<p>If compatibility with <a class=\"reference\" href=\"#sip-v3-x\">SIP v3.x</a> is not required then this is optional but\nshould be done if the C++ function might block the current thread or take a\nsignificant amount of time to execute.  (See the <a class=\"reference\" href=\"#releasegil\">ReleaseGIL</a> annotation.)</p>\n<p>The following variables are made available to the handwritten code:</p>\n<dl>\n<dt><em>type</em> a0</dt>\n<dd><p class=\"first\">There is a variable for each argument of the Python signature (excluding\nany <tt class=\"literal\"><span class=\"pre\">self</span></tt> argument) named <tt class=\"literal\"><span class=\"pre\">a0</span></tt>, <tt class=\"literal\"><span class=\"pre\">a1</span></tt>, etc.  The <em>type</em> of the\nvariable is the same as the type defined in the specification with the\nfollowing exceptions:</p>\n<ul class=\"simple\">\n<li>if the argument is only used to return a value (e.g. it is an <tt class=\"literal\"><span class=\"pre\">int</span> <span class=\"pre\">*</span></tt>\nwithout an <a class=\"reference\" href=\"#in\">In</a> annotation) then the type has one less level of\nindirection (e.g. it will be an <tt class=\"literal\"><span class=\"pre\">int</span></tt>)</li>\n<li>if the argument is a structure or class (or a reference or a pointer to a\nstructure or class) then <em>type</em> will always be a pointer to the structure\nor class.</li>\n</ul>\n<p class=\"last\">Note that handwritten code for destructors never has any arguments.</p>\n</dd>\n<dt>PyObject *a0Wrapper</dt>\n<dd>This variable is made available only if the corresponding argument wraps a\nC structure or C++ class instance and the <a class=\"reference\" href=\"#getwrapper\">GetWrapper</a> annotation is\nspecified.  The variable is a pointer to the Python object that wraps the\nargument.</dd>\n<dt><em>type</em> *sipCpp</dt>\n<dd>If the directive is used in the context of a class constructor then this\nmust be set by the handwritten code to the constructed instance.  In any\nother class context then this is a pointer to the class instance.  Its\n<em>type</em> is a pointer to the structure or class.</dd>\n<dt>int sipIsErr</dt>\n<dd><p class=\"first\">The handwritten code should set this to a non-zero value, and raise an\nappropriate Python exception, if an error is detected.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">sipIsErr</span></tt> is not provided for destructors.</p>\n</dd>\n<dt><em>type</em> sipRes</dt>\n<dd><p class=\"first\">The handwritten code should set this to the result to be returned.  The\n<em>type</em> of the variable is the same as the type defined in the Python\nsignature in the specification with the following exception:</p>\n<ul class=\"simple\">\n<li>if the argument is a structure or class (or a reference or a pointer to a\nstructure or class) then <em>type</em> will always be a pointer to the structure\nor class.</li>\n</ul>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">sipRes</span></tt> is not provided for inplace operators (e.g. <tt class=\"literal\"><span class=\"pre\">+=</span></tt> or\n<tt class=\"literal\"><span class=\"pre\">__imul__</span></tt>) as their results are handled automatically, nor for class\nconstructors.</p>\n</dd>\n<dt>PyObject *sipSelf</dt>\n<dd>If the directive is used in the context of a class method then this is the\nPython object that wraps the the structure or class instance,\ni.e. <tt class=\"literal\"><span class=\"pre\">self</span></tt>.</dd>\n</dl>\n<p>For example:</p>\n<pre class=\"literal-block\">\nclass Klass\n{\npublic:\n    int foo(SIP_PYTUPLE);\n%MethodCode\n        // The C++ API takes a 2 element array of integers but passing a\n        // two element tuple is more Pythonic.\n\n        int iarr[2];\n\n        if (PyArg_ParseTuple(a0, &quot;ii&quot;, &amp;iarr[0], &amp;iarr[1]))\n        {\n            Py_BEGIN_ALLOW_THREADS\n            sipRes = sipCpp -&gt; Klass::foo(iarr);\n            Py_END_ALLOW_THREADS\n        }\n        else\n        {\n            // PyArg_ParseTuple() will have raised the exception.\n            sipIsErr = 1;\n        }\n%End\n};\n</pre>\n<p>Note the use of the fully scoped method name in the example (i.e.\n<tt class=\"literal\"><span class=\"pre\">Klass::foo()</span></tt> rather than just <tt class=\"literal\"><span class=\"pre\">foo()</span></tt>).  This is required for virtual\nmethods <a class=\"footnote-reference\" href=\"#id18\" id=\"id17\" name=\"id17\"><sup>8</sup></a> in order to avoid virtual call loops, but is a good habit to get\ninto for all public methods.</p>\n<p>If a method is in the <tt class=\"literal\"><span class=\"pre\">protected</span></tt> section of a C++ class then the call\nshould instead be:</p>\n<pre class=\"literal-block\">\nsipRes = sipCpp -&gt; sipProtect_foo(iarr);\n</pre>\n<table class=\"footnote\" frame=\"void\" id=\"id18\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id17\" name=\"id18\">[8]</a></td><td>See <a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a> for a description of how SIP generated code\nhandles the reimplementation of C++ virtual methods in Python.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module\">\n<h2><a class=\"toc-backref\" href=\"#id69\" name=\"module\">6.17\u00a0\u00a0\u00a0%Module</a></h2>\n<pre class=\"literal-block\">\n%Module <em>name</em> [<em>version</em>]\n</pre>\n<p>This directive is used to identify that the library being wrapped is a C++\nlibrary and to define the name of the module and it's optional version number.</p>\n<p>The optional version number is useful if you (or others) might create other\nmodules that build on this module, i.e. if another module might <a class=\"reference\" href=\"#import\">%Import</a>\nthis module.  Under the covers, a module exports an API that is used by modules\nthat <a class=\"reference\" href=\"#import\">%Import</a> it and the API is given a version number.  A module built on\nthat module knows the version number of the API that it is expecting.  If,\nwhen the modules are imported at run-time, the version numbers do not match\nthen a Python exception is raised.  The dependent module must then be re-built\nusing the correct specification files for the base module.</p>\n<p>The version number should be incremented whenever a module is changed.  Some\nchanges don't affect the exported API, but it is good practice to change the\nversion number anyway.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Module qt 5\n</pre>\n</div>\n<div class=\"section\" id=\"modulecode\">\n<h2><a class=\"toc-backref\" href=\"#id70\" name=\"modulecode\">6.18\u00a0\u00a0\u00a0%ModuleCode</a></h2>\n<pre class=\"literal-block\">\n%ModuleCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used to specify handwritten code, typically the\nimplementations of utility functions, that can be called by other handwritten\ncode in the module.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%ModuleCode\n// Print an object on stderr for debugging purposes.\nvoid dump_object(PyObject *o)\n{\n    PyObject_Print(o, stderr, 0);\n    fprintf(stderr, &quot;\\n&quot;);\n}\n%End\n</pre>\n<p>See also <a class=\"reference\" href=\"#moduleheadercode\">%ModuleHeaderCode</a>.</p>\n</div>\n<div class=\"section\" id=\"moduleheadercode\">\n<h2><a class=\"toc-backref\" href=\"#id71\" name=\"moduleheadercode\">6.19\u00a0\u00a0\u00a0%ModuleHeaderCode</a></h2>\n<pre class=\"literal-block\">\n%ModuleHeaderCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used to specify handwritten code, typically the declarations\nof utility functions, that is placed in a header file that is included by all\ngenerated code.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%ModuleHeaderCode\nvoid dump_object(PyObject *o);\n%End\n</pre>\n<p>See also <a class=\"reference\" href=\"#modulecode\">%ModuleCode</a>.</p>\n</div>\n<div class=\"section\" id=\"optionalinclude\">\n<h2><a class=\"toc-backref\" href=\"#id72\" name=\"optionalinclude\">6.20\u00a0\u00a0\u00a0%OptionalInclude</a></h2>\n<pre class=\"literal-block\">\n%OptionalInclude <em>filename</em>\n</pre>\n<p>This directive is identical to the <a class=\"reference\" href=\"#include\">%Include</a> directive except that SIP\nsilently continues processing if <em>filename</em> could not be opened.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%OptionalInclude license.sip\n</pre>\n</div>\n<div class=\"section\" id=\"platforms\">\n<h2><a class=\"toc-backref\" href=\"#id73\" name=\"platforms\">6.21\u00a0\u00a0\u00a0%Platforms</a></h2>\n<pre class=\"literal-block\">\n%Platforms {<em>name</em> <em>name</em> ...}\n</pre>\n<p>This directive is used to declare a set of platforms.  Platforms (along with\n<a class=\"reference\" href=\"#feature\">%Feature</a> and <a class=\"reference\" href=\"#timeline\">%Timeline</a>) are used by the <a class=\"reference\" href=\"#if\">%If</a> directive to control\nwhether or not parts of a specification are processed or ignored.</p>\n<p>Platforms are mutually exclusive - only one platform can be enabled at a time.\nBy default all platforms are disabled.  The SIP <tt class=\"literal\"><span class=\"pre\">-t</span></tt> command line option is\nused to enable a platform.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Platforms {WIN32_PLATFORM POSIX_PLATFORM MACOS_PLATFORM}\n\n%If (WIN32_PLATFORM)\nvoid undocumented();\n%End\n\n%If (POSIX_PLATFORM)\nvoid documented();\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"postinitialisationcode\">\n<h2><a class=\"toc-backref\" href=\"#id74\" name=\"postinitialisationcode\">6.22\u00a0\u00a0\u00a0%PostInitialisationCode</a></h2>\n<pre class=\"literal-block\">\n%PostInitialisationCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used to specify handwritten code that is embedded in-line\nat the very end of the generated module initialisation code.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%PostInitialisationCode\n    // The code will be executed when the module is first imported and\n    // after all other initialisation has been completed.\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"timeline\">\n<h2><a class=\"toc-backref\" href=\"#id75\" name=\"timeline\">6.23\u00a0\u00a0\u00a0%Timeline</a></h2>\n<pre class=\"literal-block\">\n%Timeline {<em>name</em> <em>name</em> ...}\n</pre>\n<p>This directive is used to declare a set of versions released over a period of\ntime.  Versions (along with <a class=\"reference\" href=\"#feature\">%Feature</a> and <a class=\"reference\" href=\"#platforms\">%Platforms</a>) are used by the\n<a class=\"reference\" href=\"#if\">%If</a> directive to control whether or not parts of a specification are\nprocessed or ignored.</p>\n<p>Versions are mutually exclusive - only one version can be enabled at a time.\nBy default all versions are disabled.  The SIP <tt class=\"literal\"><span class=\"pre\">-t</span></tt> command line option is\nused to enable a version.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n%Timeline {V1_0 V1_1 V2_0 V3_0}\n\n%If (V1_0 - V2_0)\nvoid foo();\n%End\n\n%If (V2_0 -)\nvoid foo(int = 0);\n%End\n</pre>\n</div>\n<div class=\"section\" id=\"typecode\">\n<h2><a class=\"toc-backref\" href=\"#id76\" name=\"typecode\">6.24\u00a0\u00a0\u00a0%TypeCode</a></h2>\n<pre class=\"literal-block\">\n%TypeCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used as part of the specification of a C structure or a C++\nclass to specify handwritten code, typically the implementations of utility\nfunctions, that can be called by other handwritten code in the structure or\nclass.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\nclass Klass\n{\n%TypeCode\n// Print an instance on stderr for debugging purposes.\nstatic void dump_klass(const Klass *k)\n{\n    fprintf(stderr,&quot;Klass %s at %p\\n&quot;, k -&gt; name(), k);\n}\n%End\n\n    // The rest of the class specification.\n\n};\n</pre>\n<p>Because the scope of the code is normally within the generated file that\nimplements the type, any utility functions would normally be declared\n<tt class=\"literal\"><span class=\"pre\">static</span></tt>.  However a naming convention should still be adopted to prevent\nclashes of function names within a module in case the SIP <tt class=\"literal\"><span class=\"pre\">-j</span></tt> command line\noption is used.</p>\n</div>\n<div class=\"section\" id=\"typeheadercode\">\n<h2><a class=\"toc-backref\" href=\"#id77\" name=\"typeheadercode\">6.25\u00a0\u00a0\u00a0%TypeHeaderCode</a></h2>\n<pre class=\"literal-block\">\n%TypeHeaderCode\n    <em>code</em>\n%End\n</pre>\n<p>This directive is used to specify handwritten code that defines the interface\nto a C or C++ type being wrapped, either a structure, a class, or a template.\nIt is used within a class definition or a <a class=\"reference\" href=\"#mappedtype\">%MappedType</a> directive.</p>\n<p>Normally <em>code</em> will be a pre-processor <tt class=\"literal\"><span class=\"pre\">#include</span></tt> statement.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\n// Wrap the Klass class.\nclass Klass\n{\n%TypeHeaderCode\n#include &lt;klass.h&gt;\n%End\n\n    // The rest of the class specification.\n};\n</pre>\n</div>\n<div class=\"section\" id=\"virtualcatchercode\">\n<h2><a class=\"toc-backref\" href=\"#id78\" name=\"virtualcatchercode\">6.26\u00a0\u00a0\u00a0%VirtualCatcherCode</a></h2>\n<pre class=\"literal-block\">\n%VirtualCatcherCode\n    <em>code</em>\n%End\n</pre>\n<p>For most classes there are corresponding <a class=\"reference\" href=\"#generated-derived-classes\">generated derived classes</a> that\ncontain reimplementations of the class's virtual methods.  These methods (which\nSIP calls catchers) determine if there is a corresponding Python\nreimplementation and call it if so.  If there is no Python reimplementation\nthen the method in the original class is called instead.</p>\n<p>This directive is used to specify handwritten code that replaces the normally\ngenerated call to the Python reimplementation and the handling of any returned\nresults.  It is usually used to handle argument types and results that SIP\ncannot deal with automatically.</p>\n<p>This directive can also be used in the context of a class destructor to\nspecify handwritten code that is embedded in-line in the internal derived\nclass's destructor.</p>\n<p>In the context of a method the Python Global Interpreter Lock (GIL) is\nautomatically acquired before the specified code is executed and automatically\nreleased afterwards.</p>\n<p>In the context of a destructor the specified code must handle the GIL.  The\nGIL must be acquired before any calls to the Python API and released after the\nlast call as shown in this example fragment:</p>\n<pre class=\"literal-block\">\nSIP_BLOCK_THREADS\nPy_DECREF(obj);\nSIP_UNBLOCK_THREADS\n</pre>\n<p>The following variables are made available to the handwritten code in the\ncontext of a method:</p>\n<dl>\n<dt><em>type</em> a0</dt>\n<dd>There is a variable for each argument of the C++ signature named <tt class=\"literal\"><span class=\"pre\">a0</span></tt>,\n<tt class=\"literal\"><span class=\"pre\">a1</span></tt>, etc.  The <em>type</em> of the variable is the same as the type defined in\nthe specification.</dd>\n<dt>int sipIsErr</dt>\n<dd>The handwritten code should set this to a non-zero value, and raise an\nappropriate Python exception, if an error is detected.</dd>\n<dt>PyObject *sipMethod</dt>\n<dd>This object is the Python reimplementation of the virtual C++ method.  It\nis normally passed to <a class=\"reference\" href=\"#sipcallmethod\">sipCallMethod()</a>.</dd>\n<dt><em>type</em> sipRes</dt>\n<dd>The handwritten code should set this to the result to be returned.  The\n<em>type</em> of the variable is the same as the type defined in the C++ signature\nin the specification.</dd>\n</dl>\n<p>No variables are made available in the context of a destructor.</p>\n<p>For example:</p>\n<pre class=\"literal-block\">\nclass Klass\n{\npublic:\n    virtual int foo(SIP_PYTUPLE) [int (int *)];\n%MethodCode\n        // The C++ API takes a 2 element array of integers but passing a\n        // two element tuple is more Pythonic.\n\n        int iarr[2];\n\n        if (PyArg_ParseTuple(a0, &quot;ii&quot;, &amp;iarr[0], &amp;iarr[1]))\n        {\n            Py_BEGIN_ALLOW_THREADS\n            sipRes = sipCpp -&gt; Klass::foo(iarr);\n            Py_END_ALLOW_THREADS\n        }\n        else\n        {\n            // PyArg_ParseTuple() will have raised the exception.\n            sipIsErr = 1;\n        }\n%End\n%VirtualCatcherCode\n        // Convert the 2 element array of integers to the two element\n        // tuple.\n\n        PyObject *itup;\n\n        if ((itup = Py_BuildValue(&quot;ii&quot;, a0[0], a0[1])) != NULL)\n        {\n            // Call the Python method and get the result object.\n            PyObject *result = sipCallMethod(&amp;sipIsErr, &quot;R&quot;, itup);\n\n            if (result != NULL)\n            {\n                // Convert the result to the C++ type.\n                sipParseResult(&amp;sipIsErr, &quot;i&quot;, &amp;sipRes);\n\n                Py_DECREF(result);\n            }\n\n            Py_DECREF(itup);\n        }\n        else\n        {\n            // Py_BuildValue() will have raised the exception.\n            sipIsErr = 1;\n        }\n%End\n};\n</pre>\n</div>\n</div>\n<div class=\"section\" id=\"sip-annotations\">\n<h1><a class=\"toc-backref\" href=\"#id79\" name=\"sip-annotations\">7\u00a0\u00a0\u00a0SIP Annotations</a></h1>\n<p>In this section we describe each of the annotations that can be used in\nspecification files.</p>\n<p>Annotations can either be argument annotations, function annotations, or\nlicense annotations depending on the context in which they can be used.</p>\n<p>Annotations are placed between forward slashes (<tt class=\"literal\"><span class=\"pre\">/</span></tt>).  Multiple annotations\nare comma separated within the slashes.</p>\n<p>Annotations have a type and, possibly, a value.  The type determines the\nformat of the value.  The name of an annotation and its value are separated by\n<tt class=\"literal\"><span class=\"pre\">=</span></tt>.</p>\n<p>Annotations can have one of the following types:</p>\n<dl>\n<dt>boolean</dt>\n<dd>This type of annotation has no value and is implicitly true.</dd>\n<dt>name</dt>\n<dd>The value is a name that is compatible with a C/C++ identifier.  In some\ncases the value is optional.</dd>\n<dt>string</dt>\n<dd>The value is a double quoted string.</dd>\n</dl>\n<p>The following example shows argument and function annotations:</p>\n<pre class=\"literal-block\">\nvoid exec(QWidget * /Transfer/) /ReleaseGIL, PyName=call_exec/;\n</pre>\n<p>Note that the current version of SIP does not complain about unknown\nannotations, or annotations used out of their correct context.</p>\n<div class=\"section\" id=\"argument-annotations\">\n<h2><a class=\"toc-backref\" href=\"#id80\" name=\"argument-annotations\">7.1\u00a0\u00a0\u00a0Argument Annotations</a></h2>\n<div class=\"section\" id=\"allownone\">\n<h3><a class=\"toc-backref\" href=\"#id81\" name=\"allownone\">7.1.1\u00a0\u00a0\u00a0AllowNone</a></h3>\n<p>This boolean annotation specifies that the value of the corresponding argument\n(which should be either <a class=\"reference\" href=\"#sip-pydict\">SIP_PYDICT</a>, <a class=\"reference\" href=\"#sip-pylist\">SIP_PYLIST</a>, <a class=\"reference\" href=\"#sip-pyslice\">SIP_PYSLICE</a> or <a class=\"reference\" href=\"#sip-pytuple\">SIP_PYTUPLE</a>)\nmay be <tt class=\"literal\"><span class=\"pre\">None</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"array\">\n<h3><a class=\"toc-backref\" href=\"#id82\" name=\"array\">7.1.2\u00a0\u00a0\u00a0Array</a></h3>\n<p>This boolean annotation specifies that the corresponding argument (which\nshould be either <tt class=\"literal\"><span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> or <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt>) refers to an array\nrather than a <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string.  There must be a corresponding\nargument with the <a class=\"reference\" href=\"#arraysize\">ArraySize</a> annotation specified.  The annotation may only be\nspecified once in a list of arguments.</p>\n</div>\n<div class=\"section\" id=\"arraysize\">\n<h3><a class=\"toc-backref\" href=\"#id83\" name=\"arraysize\">7.1.3\u00a0\u00a0\u00a0ArraySize</a></h3>\n<p>This boolean annotation specifies that the corresponding argument (which\nshould be either <tt class=\"literal\"><span class=\"pre\">short</span></tt>, <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">short</span></tt>, <tt class=\"literal\"><span class=\"pre\">int</span></tt>, <tt class=\"literal\"><span class=\"pre\">unsigned</span></tt>,\n<tt class=\"literal\"><span class=\"pre\">long</span></tt> or <tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">long</span></tt>) refers to the size of an array.  There must be\na corresponding argument with the <a class=\"reference\" href=\"#array\">Array</a> annotation specified.  The annotation\nmay only be specified once in a list of arguments.</p>\n</div>\n<div class=\"section\" id=\"constrained\">\n<h3><a class=\"toc-backref\" href=\"#id84\" name=\"constrained\">7.1.4\u00a0\u00a0\u00a0Constrained</a></h3>\n<p>Python will automatically convert between certain compatible types.  For\nexample, if a floating pointer number is expected and an integer supplied,\nthen the integer will be converted appropriately.  This can cause problems\nwhen wrapping C or C++ functions with similar signatures.  For example:</p>\n<pre class=\"literal-block\">\n// The wrapper for this function will also accept an integer argument\n// which Python will automatically convert to a floating point number.\nvoid foo(double);\n\n// The wrapper for this function will never get used.\nvoid foo(int);\n</pre>\n<p>This boolean annotation specifies that the corresponding argument (which\nshould be either <tt class=\"literal\"><span class=\"pre\">int</span></tt>, <tt class=\"literal\"><span class=\"pre\">float</span></tt> or <tt class=\"literal\"><span class=\"pre\">double</span></tt>) must match the type without\nany automatic conversions.  The following example gets around the above\nproblem:</p>\n<pre class=\"literal-block\">\n// The wrapper for this function will only accept floating point numbers.\nvoid foo(double /Constrained/);\n\n// The wrapper for this function will be used for anything that Python can\n// convert to an integer, except for floating point numbers.\nvoid foo(int);\n</pre>\n</div>\n<div class=\"section\" id=\"getwrapper\">\n<h3><a class=\"toc-backref\" href=\"#id85\" name=\"getwrapper\">7.1.5\u00a0\u00a0\u00a0GetWrapper</a></h3>\n<p>This boolean annotation is only ever used in conjunction with handwritten code\nspecified with the <a class=\"reference\" href=\"#methodcode\">%MethodCode</a> directive.  It causes an extra variable to\nbe generated for the corresponding argument (which should be a wrapped C\nstructure or C++ class instance) which is a pointer to the Python object that\nwraps the argument.</p>\n<p>See the <a class=\"reference\" href=\"#methodcode\">%MethodCode</a> directive for more detail.</p>\n</div>\n<div class=\"section\" id=\"in\">\n<h3><a class=\"toc-backref\" href=\"#id86\" name=\"in\">7.1.6\u00a0\u00a0\u00a0In</a></h3>\n<p>This boolean annotation is used to specify that the corresponding argument\n(which should be a pointer type) is used to pass a value to the function.</p>\n<p>For pointers to wrapped C structures or C++ class instances, <tt class=\"literal\"><span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> and\n<tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> then this annotation is assumed unless the <a class=\"reference\" href=\"#out\">Out</a> annotation\nis specified.</p>\n<p>For pointers to other types then this annotation must be explicitly specified\nif required.  The argument will be dereferenced to obtain the actual value.</p>\n<p>Both <a class=\"reference\" href=\"#in\">In</a> and <a class=\"reference\" href=\"#out\">Out</a> may be specified for the same argument.</p>\n</div>\n<div class=\"section\" id=\"out\">\n<h3><a class=\"toc-backref\" href=\"#id87\" name=\"out\">7.1.7\u00a0\u00a0\u00a0Out</a></h3>\n<p>This boolean annotation is used to specify that the corresponding argument\n(which should be a pointer type) is used by the function to return a value as\nan element of a tuple.</p>\n<p>For pointers to wrapped C structures or C++ class instances, <tt class=\"literal\"><span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> and\n<tt class=\"literal\"><span class=\"pre\">unsigned</span> <span class=\"pre\">char</span> <span class=\"pre\">*</span></tt> then this annotation must be explicitly specified if\nrequired.</p>\n<p>For pointers to other types then this annotation is assumed unless the <a class=\"reference\" href=\"#in\">In</a>\nannotation is specified.</p>\n<p>Both <a class=\"reference\" href=\"#in\">In</a> and <a class=\"reference\" href=\"#out\">Out</a> may be specified for the same argument.</p>\n</div>\n<div class=\"section\" id=\"transfer\">\n<h3><a class=\"toc-backref\" href=\"#id88\" name=\"transfer\">7.1.8\u00a0\u00a0\u00a0Transfer</a></h3>\n<p>This boolean annotation is used to specify that ownership of the corresponding\nargument (which should be a wrapped C structure or C++ class instance) is\ntransferred from Python to C++.</p>\n<p>See <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"transferback\">\n<h3><a class=\"toc-backref\" href=\"#id89\" name=\"transferback\">7.1.9\u00a0\u00a0\u00a0TransferBack</a></h3>\n<p>This boolean annotation is used to specify that ownership of the corresponding\nargument (which should be a wrapped C structure or C++ class instance) is\ntransferred back to Python from C++.</p>\n<p>Note that this can also be used as a function annotation.  In this context\nownership of the value returned by the function is transferred back to Python.</p>\n<p>See <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a> for more detail.</p>\n</div>\n<div class=\"section\" id=\"transferthis\">\n<h3><a class=\"toc-backref\" href=\"#id90\" name=\"transferthis\">7.1.10\u00a0\u00a0\u00a0TransferThis</a></h3>\n<p>This boolean annotation is only used in C++ constructors.  It specifies that\nownership of the instance being constructed is transferred from Python to C++\nif the corresponding argument (which should be a wrapped C structure or C++\nclass instance) is not <tt class=\"literal\"><span class=\"pre\">None</span></tt>.</p>\n<p>See <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a> for more detail.</p>\n</div>\n</div>\n<div class=\"section\" id=\"function-annotations\">\n<h2><a class=\"toc-backref\" href=\"#id91\" name=\"function-annotations\">7.2\u00a0\u00a0\u00a0Function Annotations</a></h2>\n<div class=\"section\" id=\"autogen\">\n<h3><a class=\"toc-backref\" href=\"#id92\" name=\"autogen\">7.2.1\u00a0\u00a0\u00a0AutoGen</a></h3>\n<p>This optional name annotation is used with class methods to specify that the\nmethod be automatically included in all sub-classes.  The value is the name of\na feature (specified using the <a class=\"reference\" href=\"#feature\">%Feature</a> directive) which must be enabled\nfor the method to be generated.</p>\n</div>\n<div class=\"section\" id=\"default\">\n<h3><a class=\"toc-backref\" href=\"#id93\" name=\"default\">7.2.2\u00a0\u00a0\u00a0Default</a></h3>\n<p>This boolean annotation is only used with C++ constructors.  Sometimes SIP\nneeds to create a class instance.  By default it uses a constructor with no\ncompulsory arguments if one is specified.  (SIP will automatically generate a\nconstructor with no arguments if no constructors are specified.)  This\nannotation is used to explicitly specify which constructor to use.  Zero is\npassed as the value of any arguments to the constructor.</p>\n</div>\n<div class=\"section\" id=\"factory\">\n<h3><a class=\"toc-backref\" href=\"#id94\" name=\"factory\">7.2.3\u00a0\u00a0\u00a0Factory</a></h3>\n<p>This boolean annotation specifies that the value returned by the function\n(which should be a wrapped C structure or C++ class instance) is owned by\nPython (see <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a>).  Normally returned values (unless they\nare new references to already wrapped values) are owned by C++.</p>\n</div>\n<div class=\"section\" id=\"newthread\">\n<h3><a class=\"toc-backref\" href=\"#id95\" name=\"newthread\">7.2.4\u00a0\u00a0\u00a0NewThread</a></h3>\n<p>This boolean annotation specifies that the function will create a new thread.</p>\n</div>\n<div class=\"section\" id=\"posthook\">\n<h3><a class=\"toc-backref\" href=\"#id96\" name=\"posthook\">7.2.5\u00a0\u00a0\u00a0PostHook</a></h3>\n<p>This name annotation is used to specify the name of a Python builtin that is\ncalled immediately after call to the underlying C or C++ function or any\nhandwritten code.  The builtin is not called if an error occurred.  It is\nprimarily used to integrate with debuggers.</p>\n</div>\n<div class=\"section\" id=\"prehook\">\n<h3><a class=\"toc-backref\" href=\"#id97\" name=\"prehook\">7.2.6\u00a0\u00a0\u00a0PreHook</a></h3>\n<p>This name annotation is used to specify the name of a Python builtin that is\ncalled immediately after the function's arguments have been successfully\nparsed and before the call to the underlying C or C++ function or any\nhandwritten code.  It is primarily used to integrate with debuggers.</p>\n</div>\n<div class=\"section\" id=\"pyname\">\n<h3><a class=\"toc-backref\" href=\"#id98\" name=\"pyname\">7.2.7\u00a0\u00a0\u00a0PyName</a></h3>\n<p>Python keywords cannot be used as Python function or method names.  This name\nannotation specifies an alternative name for the function being wrapped which\nis used when calling the function from Python.</p>\n</div>\n<div class=\"section\" id=\"releasegil\">\n<h3><a class=\"toc-backref\" href=\"#id99\" name=\"releasegil\">7.2.8\u00a0\u00a0\u00a0ReleaseGIL</a></h3>\n<p>This boolean annotation specifies that the Python Global Interpreter Lock\n(GIL) is automatically released before the call to the underlying C or C++\nfunction and reacquired afterwards.  It should be used for functions that\nmight block or take a significant amount of time to execute.</p>\n</div>\n</div>\n<div class=\"section\" id=\"license-annotations\">\n<h2><a class=\"toc-backref\" href=\"#id100\" name=\"license-annotations\">7.3\u00a0\u00a0\u00a0License Annotations</a></h2>\n<div class=\"section\" id=\"licensee\">\n<h3><a class=\"toc-backref\" href=\"#id101\" name=\"licensee\">7.3.1\u00a0\u00a0\u00a0Licensee</a></h3>\n<p>This optional string annotation specifies the license's licensee.  No\nrestrictions are placed on the contents of the string.</p>\n<p>See the <a class=\"reference\" href=\"#id16\">%License</a> directive.</p>\n</div>\n<div class=\"section\" id=\"signature\">\n<h3><a class=\"toc-backref\" href=\"#id102\" name=\"signature\">7.3.2\u00a0\u00a0\u00a0Signature</a></h3>\n<p>This optional string annotation specifies the license's signature.  No\nrestrictions are placed on the contents of the string.</p>\n<p>See the <a class=\"reference\" href=\"#id16\">%License</a> directive.</p>\n</div>\n<div class=\"section\" id=\"timestamp\">\n<h3><a class=\"toc-backref\" href=\"#id103\" name=\"timestamp\">7.3.3\u00a0\u00a0\u00a0Timestamp</a></h3>\n<p>This optional string annotation specifies the license's timestamp.  No\nrestrictions are placed on the contents of the string.</p>\n<p>See the <a class=\"reference\" href=\"#id16\">%License</a> directive.</p>\n</div>\n<div class=\"section\" id=\"type\">\n<h3><a class=\"toc-backref\" href=\"#id104\" name=\"type\">7.3.4\u00a0\u00a0\u00a0Type</a></h3>\n<p>This string annotation specifies the license's type.  No restrictions are\nplaced on the contents of the string.</p>\n<p>See the <a class=\"reference\" href=\"#id16\">%License</a> directive.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"sip-api-for-handwritten-code\">\n<h1><a class=\"toc-backref\" href=\"#id105\" name=\"sip-api-for-handwritten-code\">8\u00a0\u00a0\u00a0SIP API for Handwritten Code</a></h1>\n<p>In this section we describe the API that can be used by handwritten code in\nspecification files.</p>\n<div class=\"section\" id=\"sip-api-major-nr\">\n<h2><a class=\"toc-backref\" href=\"#id106\" name=\"sip-api-major-nr\">8.1\u00a0\u00a0\u00a0SIP_API_MAJOR_NR</a></h2>\n<p>This is a C preprocessor symbol that defines the major number of the SIP API.\nIts value is a number.  There is no direct relationship between this and the\nSIP version number.</p>\n</div>\n<div class=\"section\" id=\"sip-api-minor-nr\">\n<h2><a class=\"toc-backref\" href=\"#id107\" name=\"sip-api-minor-nr\">8.2\u00a0\u00a0\u00a0SIP_API_MINOR_NR</a></h2>\n<p>This is a C preprocessor symbol that defines the minor number of the SIP API.\nIts value is a number.  There is no direct relationship between this and the\nSIP version number.</p>\n</div>\n<div class=\"section\" id=\"sip-build\">\n<h2><a class=\"toc-backref\" href=\"#id108\" name=\"sip-build\">8.3\u00a0\u00a0\u00a0SIP_BUILD</a></h2>\n<p>This is a C preprocessor symbol that defines a unique SIP build identifier\nrepresented as a string.</p>\n</div>\n<div class=\"section\" id=\"sip-version\">\n<h2><a class=\"toc-backref\" href=\"#id109\" name=\"sip-version\">8.4\u00a0\u00a0\u00a0SIP_VERSION</a></h2>\n<p>This is a C preprocessor symbol that defines the SIP version number\nrepresented as a 3 part hexadecimal number (e.g. v4.0.0 is represented as\n<tt class=\"literal\"><span class=\"pre\">0x040000</span></tt>).</p>\n</div>\n<div class=\"section\" id=\"sip-version-str\">\n<h2><a class=\"toc-backref\" href=\"#id110\" name=\"sip-version-str\">8.5\u00a0\u00a0\u00a0SIP_VERSION_STR</a></h2>\n<p>This is a C preprocessor symbol that defines the SIP version number\nrepresented as a string.  For development snapshots it will start with\n<tt class=\"literal\"><span class=\"pre\">snapshot-</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"sipbadcatcherresult\">\n<h2><a class=\"toc-backref\" href=\"#id111\" name=\"sipbadcatcherresult\">8.6\u00a0\u00a0\u00a0sipBadCatcherResult()</a></h2>\n<dl>\n<dt>void sipBadCatcherResult(PyObject *method)</dt>\n<dd>This is raises a Python exception when the result of a Python\nreimplementation of a C++ method doesn't have the expected type.  It is\nnormally called by handwritten code specified with the\n<a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a> directive.  <em>method</em> is the Python method and would\nnormally be the supplied <tt class=\"literal\"><span class=\"pre\">sipMethod</span></tt>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipbadlengthforslice\">\n<h2><a class=\"toc-backref\" href=\"#id112\" name=\"sipbadlengthforslice\">8.7\u00a0\u00a0\u00a0sipBadLengthForSlice()</a></h2>\n<dl>\n<dt>void sipBadLengthForSlice(int seqlen, int slicelen)</dt>\n<dd>This raises a Python exception when the length of a slice object is\ninappropriate for a sequence-like object.  It is normally called by\nhandwritten code specified for <tt class=\"literal\"><span class=\"pre\">__setitem__()</span></tt> methods.  <em>seqlen</em> is the\nlength of the sequence.  <em>slicelen</em> is the length of the slice.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipbuildresult\">\n<h2><a class=\"toc-backref\" href=\"#id113\" name=\"sipbuildresult\">8.8\u00a0\u00a0\u00a0sipBuildResult()</a></h2>\n<dl>\n<dt>PyObject *sipBuildResult(int *iserr, char *format, ...)</dt>\n<dd><p class=\"first\">This creates a Python object based on a format string and associated\nvalues in a similar way to the Python <tt class=\"literal\"><span class=\"pre\">Py_BuildValue()</span></tt> function.  If\nthere was an error then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned and a Python exception is\nraised.  If <em>iserr</em> is not <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then the location it points to is set\nto a non-zero value.  <em>format</em> is the string of format characters.</p>\n<p>If <em>format</em> begins and ends with parentheses then a tuple of objects is\ncreated.  If <em>format</em> contains more than one format character then\nparentheses must be specified.</p>\n<p>In the following description the first letter is the format character, the\nentry in parentheses is the Python object type that the format character\nwill create, and the entry in brackets are the types of the C/C++ values\nto be passed.</p>\n<dl class=\"last\">\n<dt><tt class=\"literal\"><span class=\"pre\">a</span></tt> (string) [char *, int]</dt>\n<dd>Convert a C/C++ character array and its length to a Python string.  If\nthe character array is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then the length is ignored and the\nresult is <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">b</span></tt> (boolean) [int]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">int</span></tt> to a Python boolean.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">c</span></tt> (string) [char]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">char</span></tt> to a Python string.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">d</span></tt> (float) [double]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">double</span></tt> to a Python floating point number.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">e</span></tt> (integer) [enum]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">enum</span></tt> to a Python integer.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">f</span></tt> (float) [float]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">float</span></tt> to a Python floating point number.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">h</span></tt> (integer) [short]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">short</span></tt> to a Python integer.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">i</span></tt> (integer) [int]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">int</span></tt> to a Python integer.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">l</span></tt> (integer) [long]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">long</span></tt> to a Python integer.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">s</span></tt> (string) [char *]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string to a Python string.  If the\nstring pointer is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then the result is <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">M</span></tt> (wrapped instance) [<em>type</em> *, sipWrapperType *]</dt>\n<dd>Convert a C structure or a C++ class instance to a Python class\ninstance object.  If the structure or class instance has already been\nwrapped then the result is a new reference to the existing class\ninstance object.  The Python class is influenced by any applicable\n<a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a> code.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">N</span></tt> (wrapped instance) [<em>type</em> *, sipWrapperType *]</dt>\n<dd>Convert a C structure or a C++ class instance to a Python class\ninstance object.  This should not be used if the structure or class\ninstance might already have been wrapped.  The Python class is\ninfluenced by any applicable <a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a> code.  It is\nrecommended that handwritten code use the <tt class=\"literal\"><span class=\"pre\">M</span></tt> format character\ninstead.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">O</span></tt> (wrapped instance) [<em>type</em> *, sipWrapperType *]</dt>\n<dd>Convert a C structure or a C++ class instance to a Python class\ninstance object.  If the structure or class instance has already been\nwrapped then the result is a new reference to the existing class\ninstance object.  It is recommended that handwritten code use the\n<tt class=\"literal\"><span class=\"pre\">M</span></tt> format character instead.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">P</span></tt> (wrapped instance) [<em>type</em> *, sipWrapperType *]</dt>\n<dd>Convert a C structure or a C++ class instance to a Python class\ninstance object.  This should not be used if the structure or class\ninstance might already have been wrapped.  It is recommended that\nhandwritten code use the <tt class=\"literal\"><span class=\"pre\">M</span></tt> format character instead.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">R</span></tt> (object) [PyObject *]</dt>\n<dd>The result is value passed without any conversions.  The reference\ncount is unaffected, i.e. a reference is taken.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">S</span></tt> (object) [PyObject *]</dt>\n<dd>The result is value passed without any conversions.  The reference\ncount is incremented.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">T</span></tt> (object) [void *, PyObject *(*)(void *cppptr)]</dt>\n<dd>Convert a C structure or a C++ class instance to a Python object using\na convertor function.  See <a class=\"reference\" href=\"#generated-type-convertors\">Generated Type Convertors</a>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">V</span></tt> (sip.voidptr) [void *]</dt>\n<dd>Convert a C/C++ <tt class=\"literal\"><span class=\"pre\">void</span> <span class=\"pre\">*</span></tt> Python <tt class=\"literal\"><span class=\"pre\">sip.voidptr</span></tt> object.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipcallmethod\">\n<h2><a class=\"toc-backref\" href=\"#id114\" name=\"sipcallmethod\">8.9\u00a0\u00a0\u00a0sipCallMethod()</a></h2>\n<dl>\n<dt>PyObject *sipCallMethod(int *iserr, PyObject *method, char *format, ...)</dt>\n<dd><p class=\"first\">This calls a Python method passing a tuple of arguments based on a format\nstring and associated values in a similar way to the Python\n<tt class=\"literal\"><span class=\"pre\">PyObject_CallObject()</span></tt> function.  If there was an error then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is\nreturned and a Python exception is raised.  If <em>iserr</em> is not <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>\nthen the location it points to is set to a non-zero value.  <em>method</em> is the\nPython bound method to call.  <em>format</em> is the string of format characters\n(see <a class=\"reference\" href=\"#sipbuildresult\">sipBuildResult()</a>).</p>\n<p class=\"last\">This is normally called by handwritten code specified with the\n<a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a> directive with <em>method</em> being the supplied\n<tt class=\"literal\"><span class=\"pre\">sipMethod</span></tt>.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipclassname\">\n<h2><a class=\"toc-backref\" href=\"#id115\" name=\"sipclassname\">8.10\u00a0\u00a0\u00a0sipClassName()</a></h2>\n<dl>\n<dt>PyObject *sipClassName(PyObject *obj)</dt>\n<dd>This returns the class name of a wrapped instance as a Python string.  It\ncomes with a reference.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipconnectrx\">\n<h2><a class=\"toc-backref\" href=\"#id116\" name=\"sipconnectrx\">8.11\u00a0\u00a0\u00a0sipConnectRx()</a></h2>\n<dl>\n<dt>PyObject *sipConnectRx(PyObject *sender, const char *signal, PyObject *receiver, const char *slot)</dt>\n<dd><p class=\"first\">This connects a signal to a signal or slot and returns <tt class=\"literal\"><span class=\"pre\">Py_True</span></tt> if the\nsignal was connected or <tt class=\"literal\"><span class=\"pre\">Py_False</span></tt> if not.  If there was some other\nerror then a Python exception is raised and <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned.  <em>sender</em>\nis the wrapped <tt class=\"literal\"><span class=\"pre\">QObject</span></tt> derived instance that emits the signal.\n<em>signal</em> is the typed name of the signal.  <em>receiver</em> is the wrapped\n<tt class=\"literal\"><span class=\"pre\">QObject</span></tt> derived instance or Python callable that the signal is\nconnected to.  <em>slot</em> is the typed name of the slot, or <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> if\n<em>receiver</em> is a Python callable.  It is normally only used by PyQt to\nimplement <tt class=\"literal\"><span class=\"pre\">QObject.connect()</span></tt>.</p>\n<p class=\"last\">This is only available if Qt support is enabled.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipconvertfromsequenceindex\">\n<h2><a class=\"toc-backref\" href=\"#id117\" name=\"sipconvertfromsequenceindex\">8.12\u00a0\u00a0\u00a0sipConvertFromSequenceIndex()</a></h2>\n<dl>\n<dt>int sipConvertFromSequenceIndex(int idx, int len)</dt>\n<dd>This converts a Python sequence index (i.e. where a negative value refers\nto the offset from the end of the sequence) to a C/C++ array index.  If the\nindex was out of range then a negative value is returned and a Python\nexception raised.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipconvertfromsliceobject\">\n<h2><a class=\"toc-backref\" href=\"#id118\" name=\"sipconvertfromsliceobject\">8.13\u00a0\u00a0\u00a0sipConvertFromSliceObject()</a></h2>\n<dl>\n<dt>int sipConvertFromSliceObject(PyObject *slice, int length, int *start, int *stop, int *step, int *slicelength)</dt>\n<dd>This is a thin wrapper around the Python <tt class=\"literal\"><span class=\"pre\">PySlice_GetIndicesEx()</span></tt>\nfunction provided to make it easier to write handwritten code that is\ncompatible with <a class=\"reference\" href=\"#sip-v3-x\">SIP v3.x</a> and versions of Python earlier that v2.3.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipconverttocpp\">\n<h2><a class=\"toc-backref\" href=\"#id119\" name=\"sipconverttocpp\">8.14\u00a0\u00a0\u00a0sipConvertToCpp()</a></h2>\n<dl>\n<dt>void *sipConvertToCpp(PyObject *obj, sipWrapperType *type, int *iserr)</dt>\n<dd>This extracts the pointer to the C structure or C++ class instance from a\nwrapped instance object.  <em>obj</em> is the wrapped instance object (if it is\n<tt class=\"literal\"><span class=\"pre\">Py_None</span></tt> then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned).  <em>type</em> is generated type\ncorresponding to the C/C++ type returned.  It may be any class in the\nobject's class hierarchy.  If there is an error then the location <em>iserr</em>\npoints to is set to a non-zero value.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipdisconnectrx\">\n<h2><a class=\"toc-backref\" href=\"#id120\" name=\"sipdisconnectrx\">8.15\u00a0\u00a0\u00a0sipDisconnectRx()</a></h2>\n<dl>\n<dt>PyObject *sipDisconnectRx(PyObject *sender, const char *signal, PyObject *receiver, const char *slot)</dt>\n<dd><p class=\"first\">This disconnects a signal from a signal or slot and returns <tt class=\"literal\"><span class=\"pre\">Py_True</span></tt> if\nthe signal was disconnected or <tt class=\"literal\"><span class=\"pre\">Py_False</span></tt> if not.  If there was some\nother error then a Python exception is raised and <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned.\n<em>sender</em> is the wrapped <tt class=\"literal\"><span class=\"pre\">QObject</span></tt> derived instance that emits the signal.\n<em>signal</em> is the typed name of the signal.  <em>receiver</em> is the wrapped\n<tt class=\"literal\"><span class=\"pre\">QObject</span></tt> derived instance or Python callable that the signal is\nconnected to.  <em>slot</em> is the typed name of the slot, or <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> if\n<em>receiver</em> is a Python callable.  It is normally only used by PyQt to\nimplement <tt class=\"literal\"><span class=\"pre\">QObject.disconnect()</span></tt>.</p>\n<p class=\"last\">This is only available if Qt support is enabled.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipemitsignal\">\n<h2><a class=\"toc-backref\" href=\"#id121\" name=\"sipemitsignal\">8.16\u00a0\u00a0\u00a0sipEmitSignal()</a></h2>\n<dl>\n<dt>int sipEmitSignal(PyObject *txobj, const char *signal, PyObject *args)</dt>\n<dd><p class=\"first\">This emits a signal and returns zero if there was no error.  If there was\nan error then a Python exception is raised and a negative value is\nreturned.  <em>txobj</em> is the wrapped <tt class=\"literal\"><span class=\"pre\">QObject</span></tt> derived instance that emits\nthe signal.  <em>signal</em> is the typed name of the signal.  <em>args</em> is a Python\ntuple of the signal arguments.  It is normally only used by PyQt to\nimplement <tt class=\"literal\"><span class=\"pre\">QObject.emit()</span></tt>.</p>\n<p class=\"last\">This is only available if Qt support is enabled.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipfree\">\n<h2><a class=\"toc-backref\" href=\"#id122\" name=\"sipfree\">8.17\u00a0\u00a0\u00a0sipFree()</a></h2>\n<dl>\n<dt>void sipFree(void *mem)</dt>\n<dd>This returns an area of memory allocated by <a class=\"reference\" href=\"#sipmalloc\">sipMalloc()</a> to the heap.\n<em>mem</em> is a pointer to the area of memory.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipgetsender\">\n<h2><a class=\"toc-backref\" href=\"#id123\" name=\"sipgetsender\">8.18\u00a0\u00a0\u00a0sipGetSender()</a></h2>\n<dl>\n<dt>void *sipGetSender()</dt>\n<dd><p class=\"first\">This returns a pointer to the last <tt class=\"literal\"><span class=\"pre\">QObject</span></tt> instance that emitted a Qt\nsignal.  It is normally only used by PyQt to implement\n<tt class=\"literal\"><span class=\"pre\">QObject.sender()</span></tt>.</p>\n<p class=\"last\">This is only available if Qt support is enabled.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipgetwrapper\">\n<h2><a class=\"toc-backref\" href=\"#id124\" name=\"sipgetwrapper\">8.19\u00a0\u00a0\u00a0sipGetWrapper()</a></h2>\n<dl>\n<dt>PyObject *sipGetWrapper(void *cppptr, sipWrapperType *type)</dt>\n<dd>This returns a borrowed reference to the wrapped instance object for a C\nstructure or C++ class instance.  If the structure or class instance\nhasn't been wrapped then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned (and no Python exception is\nraised).  <em>cppptr</em> is the pointer to the structure or class instance.\n<em>type</em> is the generated type corresponding to the C/C++ type.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipinttypeclassmap\">\n<h2><a class=\"toc-backref\" href=\"#id125\" name=\"sipinttypeclassmap\">8.20\u00a0\u00a0\u00a0sipIntTypeClassMap</a></h2>\n<p>This C structure is used with <a class=\"reference\" href=\"#sipmapinttoclass\">sipMapIntToClass()</a> to define a mapping\nbetween integer based RTTI and <a class=\"reference\" href=\"#generated-type-objects\">generated type objects</a>.  The structure\nelements are as follows.</p>\n<dl>\n<dt>int typeInt</dt>\n<dd>The integer RTTI.</dd>\n<dt>sipWrapperType **pyType.</dt>\n<dd>A pointer to the corresponding Python type object.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipissubclassinstance\">\n<h2><a class=\"toc-backref\" href=\"#id126\" name=\"sipissubclassinstance\">8.21\u00a0\u00a0\u00a0sipIsSubClassInstance()</a></h2>\n<dl>\n<dt>int sipIsSubClassInstance(PyObject *obj, sipWrapperType *type)</dt>\n<dd>This is a thin wrapper around the Python <tt class=\"literal\"><span class=\"pre\">PyObject_TypeCheck()</span></tt>\nfunction provided to make it easier to write handwritten code that is\ncompatible with <a class=\"reference\" href=\"#sip-v3-x\">SIP v3.x</a> and versions of Python earlier that v2.2.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipmalloc\">\n<h2><a class=\"toc-backref\" href=\"#id127\" name=\"sipmalloc\">8.22\u00a0\u00a0\u00a0sipMalloc()</a></h2>\n<dl>\n<dt>void *sipMalloc(size_t nbytes)</dt>\n<dd>This allocates an area of memory of size <em>nytes</em> on the heap using the\nPython <tt class=\"literal\"><span class=\"pre\">PyMem_Malloc()</span></tt> function.  If there was an error then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is\nreturned and a Python exception raised.  See <a class=\"reference\" href=\"#sipfree\">sipFree()</a>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipmapinttoclass\">\n<h2><a class=\"toc-backref\" href=\"#id128\" name=\"sipmapinttoclass\">8.23\u00a0\u00a0\u00a0sipMapIntToClass()</a></h2>\n<dl>\n<dt>sipWrapperType *sipMapIntToClass(int type, const sipIntTypeClassMap *map, int maplen)</dt>\n<dd>This is used in <a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a> code as a convenient way of\nconverting integer based RTTI to the corresponding Python type object.\n<em>type</em> is the RTTI.  <em>map</em> is the table of known RTTI and the corresponding\ntype objects (see <a class=\"reference\" href=\"#sipinttypeclassmap\">sipIntTypeClassMap</a>).  The entries in the table must be\nsorted in ascending order of RTTI.  <em>maplen</em> is the number of entries in\nthe table.  The corresponding Python type object is returned, or <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>\nif <em>type</em> wasn't in <em>map</em>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipmapstringtoclass\">\n<h2><a class=\"toc-backref\" href=\"#id129\" name=\"sipmapstringtoclass\">8.24\u00a0\u00a0\u00a0sipMapStringToClass()</a></h2>\n<dl>\n<dt>sipWrapperType *sipMapStringToClass(char *type, const sipStringTypeClassMap *map, int maplen)</dt>\n<dd>This is used in <a class=\"reference\" href=\"#converttosubclasscode\">%ConvertToSubClassCode</a> code as a convenient way of\nconverting <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string based RTTI to the corresponding\nPython type object.  <em>type</em> is the RTTI.  <em>map</em> is the table of known RTTI\nand the corresponding type objects (see <a class=\"reference\" href=\"#sipstringtypeclassmap\">sipStringTypeClassMap</a>).  The\nentries in the table must be sorted in ascending order of RTTI.  <em>maplen</em>\nis the number of entries in the table.  The corresponding Python type\nobject is returned, or <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> if <em>type</em> wasn't in <em>map</em>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipparseresult\">\n<h2><a class=\"toc-backref\" href=\"#id130\" name=\"sipparseresult\">8.25\u00a0\u00a0\u00a0sipParseResult()</a></h2>\n<dl>\n<dt>int sipParseResult(int *iserr, PyObject *method, PyObject *result, char *format, ...)</dt>\n<dd><p class=\"first\">This converts a Python object (usually returned by a method) to C/C++ based\non a format string and associated values in a similar way to the Python\n<tt class=\"literal\"><span class=\"pre\">PyArg_ParseTuple()</span></tt> function.  If there was an error then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is\nreturned and a Python exception is raised.  If <em>iserr</em> is not <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then\nthe location it points to is set to a non-zero value.  <em>method</em> is the\nPython bound method that returned the <em>result</em> object.  <em>format</em> is the\nstring of format characters.</p>\n<p>This is normally called by handwritten code specified with the\n<a class=\"reference\" href=\"#virtualcatchercode\">%VirtualCatcherCode</a> directive with <em>method</em> being the supplied\n<tt class=\"literal\"><span class=\"pre\">sipMethod</span></tt> and <tt class=\"literal\"><span class=\"pre\">result</span></tt> being the value returned by\n<a class=\"reference\" href=\"#sipcallmethod\">sipCallMethod()</a>.</p>\n<p>If <em>format</em> begins and ends with parentheses then <em>result</em> must be a Python\ntuple and the rest of <em>format</em> is applied to the tuple contents.</p>\n<p>In the following description the first letter is the format character, the\nentry in parentheses is the Python object type that the format character\nwill convert, and the entry in brackets are the types of the C/C++ values\nto be passed.</p>\n<dl class=\"last\">\n<dt><tt class=\"literal\"><span class=\"pre\">a</span></tt> (string) [char **, int *]</dt>\n<dd>Convert a Python string to a C/C++ character array and its length.  If\nthe Python object is <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt> then the array and length are <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>\nand zero respectively.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">b</span></tt> (integer) [bool *]</dt>\n<dd>Convert a Python integer to a C/C++ <tt class=\"literal\"><span class=\"pre\">bool</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">c</span></tt> (string) [char *]</dt>\n<dd>Convert a Python string of length 1 to a C/C++ <tt class=\"literal\"><span class=\"pre\">char</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">d</span></tt> (float) [double *]</dt>\n<dd>Convert a Python floating point number to a C/C++ <tt class=\"literal\"><span class=\"pre\">double</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">e</span></tt> (integer) [enum *]</dt>\n<dd>Convert Python integer to a C/C++ <tt class=\"literal\"><span class=\"pre\">enum</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">f</span></tt> (float) [double *]</dt>\n<dd>Convert a Python floating point number to a C/C++ <tt class=\"literal\"><span class=\"pre\">float</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">h</span></tt> (integer) [short *]</dt>\n<dd>Convert a Python integer to a C/C++ <tt class=\"literal\"><span class=\"pre\">short</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">i</span></tt> (integer) [int *]</dt>\n<dd>Convert a Python integer to a C/C++ <tt class=\"literal\"><span class=\"pre\">int</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">l</span></tt> (integer) [long *]</dt>\n<dd>Convert a Python integer to a C/C++ <tt class=\"literal\"><span class=\"pre\">long</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">s</span></tt> (string) [char **]</dt>\n<dd>Convert a Python string to a C/C++ <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string.  If the\nPython object is <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt> then the string is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">L</span></tt> (object) [<em>type</em> *(*)(PyObject *obj, int *iserr), void **]</dt>\n<dd>Convert a Python object to a C structure or a C++ class instance using\na convertor function.  See <a class=\"reference\" href=\"#generated-type-convertors\">Generated Type Convertors</a>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">M</span></tt> (object) [<em>type</em> *(*)(PyObject *obj, int *iserr), void **]</dt>\n<dd>Convert a Python object to a C structure or a C++ class instance using\na convertor function.  If the structure or class instance pointer is\n<tt class=\"literal\"><span class=\"pre\">NULL</span></tt> then return an error.  See <a class=\"reference\" href=\"#generated-type-convertors\">Generated Type Convertors</a>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">N</span></tt> (object) [PyTypeObject *, PyObject **]</dt>\n<dd>A Python object is checked to see if it is a certain type and then\nreturned without any conversions.  The reference count is incremented.\nThe Python object may be <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">O</span></tt> (object) [PyObject **]</dt>\n<dd>A Python object is returned without any conversions.  The reference\ncount is incremented.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">T</span></tt> (object) [PyTypeObject *, PyObject **]</dt>\n<dd>A Python object is checked to see if it is a certain type and then\nreturned without any conversions.  The reference count is incremented.\nThe Python object may not be <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">V</span></tt> (sip.voidptr) [void *]</dt>\n<dd>Convert a Python <tt class=\"literal\"><span class=\"pre\">sip.voidptr</span></tt> object to a C/C++ <tt class=\"literal\"><span class=\"pre\">void</span> <span class=\"pre\">*</span></tt>.</dd>\n<dt><tt class=\"literal\"><span class=\"pre\">Z</span></tt> (object) []</dt>\n<dd>Check that a Python object is <tt class=\"literal\"><span class=\"pre\">Py_None</span></tt>.  No value is returned.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipstringtypeclassmap\">\n<h2><a class=\"toc-backref\" href=\"#id131\" name=\"sipstringtypeclassmap\">8.26\u00a0\u00a0\u00a0sipStringTypeClassMap</a></h2>\n<p>This C structure is used with <a class=\"reference\" href=\"#sipmapstringtoclass\">sipMapStringToClass()</a> to define a mapping\nbetween <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string based RTTI and <a class=\"reference\" href=\"#generated-type-objects\">generated type objects</a>.\nThe structure elements are as follows.</p>\n<dl>\n<dt>char *typeString</dt>\n<dd>The <tt class=\"literal\"><span class=\"pre\">'\\0'</span></tt> terminated string RTTI.</dd>\n<dt>sipWrapperType **pyType.</dt>\n<dd>A pointer to the corresponding Python type object.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"siptransfer\">\n<h2><a class=\"toc-backref\" href=\"#id132\" name=\"siptransfer\">8.27\u00a0\u00a0\u00a0sipTransfer()</a></h2>\n<dl>\n<dt>void sipTransfer(PyObject *obj, int tocpp)</dt>\n<dd>This transfers ownership of a Python wrapped instance either to or from\nPython (see <a class=\"reference\" href=\"#ownership-of-objects\">Ownership of Objects</a>).  <em>obj</em> is the wrapped instance.  If\n<em>tocpp</em> is non-zero then ownership is transfered from Python to C/C++. If\n<em>tocpp</em> is zero then ownership is transfered from C/C++ to Python.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipwrappertype\">\n<h2><a class=\"toc-backref\" href=\"#id133\" name=\"sipwrappertype\">8.28\u00a0\u00a0\u00a0sipWrapperType</a></h2>\n<p>This is a C structure that represents a SIP generated type object.  It is an\nextension of the Python <tt class=\"literal\"><span class=\"pre\">PyTypeObject</span></tt> structure (which is itself an\nextension of the Python <tt class=\"literal\"><span class=\"pre\">PyObject</span></tt> structure) and so may be safely cast to\n<tt class=\"literal\"><span class=\"pre\">PyTypeObject</span></tt> (and <tt class=\"literal\"><span class=\"pre\">PyObject</span></tt>).</p>\n</div>\n<div class=\"section\" id=\"generated-type-convertors\">\n<h2><a class=\"toc-backref\" href=\"#id134\" name=\"generated-type-convertors\">8.29\u00a0\u00a0\u00a0Generated Type Convertors</a></h2>\n<p>SIP generates functions for all types being wrapped (including mapped types\ndefined with the <a class=\"reference\" href=\"#mappedtype\">%MappedType</a> directive) that convert a Python object to the\nC structure or C++ class instance.  The name of this convertor is the name of\nthe structure or class prefixed by <tt class=\"literal\"><span class=\"pre\">sipForceConvertTo_</span></tt>.</p>\n<dl>\n<dt>void *sipForceConvertTo_*class*(PyObject *obj, int *iserr)</dt>\n<dd><em>obj</em> is the Python object to convert.  If <em>obj</em> is <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> or the\nlocation pointed to by <em>iserr</em> is non-zero then the conversion is not\nattempted and <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned.  If there was an error then the\nlocation pointed to by <em>iserr</em> is set to a non-zero value, a Python\nexception is raised, and <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned.</dd>\n</dl>\n<p>SIP also generates functions for mapped types that convert a C structure or\nC++ class instance to a Python object.  The name of this convertor is the name\nof the structure or class prefixed by <tt class=\"literal\"><span class=\"pre\">sipConvertFrom_</span></tt>.</p>\n<dl>\n<dt>PyObject *sipConvertFrom_*class*(void *cppptr)</dt>\n<dd><em>cppptr</em> is a pointer to the C structure or C++ class instance to convert.\nIf there was an error then <tt class=\"literal\"><span class=\"pre\">NULL</span></tt> is returned and a Python exception\nraised.</dd>\n</dl>\n<p>The convertor functions of all imported types are available to handwritten\ncode.</p>\n</div>\n<div class=\"section\" id=\"generated-type-objects\">\n<h2><a class=\"toc-backref\" href=\"#id135\" name=\"generated-type-objects\">8.30\u00a0\u00a0\u00a0Generated Type Objects</a></h2>\n<p>SIP generates a type object for each C structure or C++ class being wrapped.\nThese are <a class=\"reference\" href=\"#sipwrappertype\">sipWrapperType</a> structures and are used extensively by the SIP API.</p>\n<p>These objects are named with the structure or class name prefixed by\n<tt class=\"literal\"><span class=\"pre\">sipClass_</span></tt>.  For example, the type object for class <tt class=\"literal\"><span class=\"pre\">Klass</span></tt> is\n<tt class=\"literal\"><span class=\"pre\">sipClass_Klass</span></tt>.</p>\n<p>The type objects of all imported classes are available to handwritten code.</p>\n</div>\n<div class=\"section\" id=\"generated-derived-classes\">\n<h2><a class=\"toc-backref\" href=\"#id136\" name=\"generated-derived-classes\">8.31\u00a0\u00a0\u00a0Generated Derived Classes</a></h2>\n<p>For most C++ classes being wrapped SIP generates a derived class with the same\nname prefixed by <tt class=\"literal\"><span class=\"pre\">sip</span></tt>.  For example, the derived class for class <tt class=\"literal\"><span class=\"pre\">Klass</span></tt>\nis <tt class=\"literal\"><span class=\"pre\">sipKlass</span></tt>.</p>\n<p>If a C++ class doesn't have any virtual or protected methods in it or any of\nit's super-class hierarchy, or does not emit any Qt signals, then a derived\nclass is not generated.</p>\n<p>Most of the time handwritten code should ignore the derived classes.  The only\nexception is that handwritten constructor code specified using the\n<a class=\"reference\" href=\"#methodcode\">%MethodCode</a> directive should call the derived class's constructor (which\nhas the same C++ signature) rather then the wrapped class's constructor.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-the-sip-module-in-applications\">\n<h1><a class=\"toc-backref\" href=\"#id137\" name=\"using-the-sip-module-in-applications\">9\u00a0\u00a0\u00a0Using the SIP Module in Applications</a></h1>\n<p>The main purpose of the SIP module is to provide functionality common to all\nSIP generated bindings.  It is loaded automatically and most of the time you\nwill completely ignore it.  However, it does expose some functionality that can\nbe used by applications.</p>\n<dl>\n<dt>settracemask(mask)</dt>\n<dd><p class=\"first\">If the bindings have been created with SIP's <tt class=\"literal\"><span class=\"pre\">-r</span></tt> command line option\nthen the generated code will produce debugging statements that trace the\nexecution of the code.  (It is particularly useful when trying to\nunderstand the operation of a C++ library's virtual function calls.)</p>\n<p>Debugging statements are generated at the following points:</p>\n<ul class=\"simple\">\n<li>in a C++ virtual function (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0001</span></tt>)</li>\n<li>in a C++ constructor (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0002</span></tt>)</li>\n<li>in a C++ destructor (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0004</span></tt>)</li>\n<li>in a Python type's __init__ method (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0008</span></tt>)</li>\n<li>in a Python type's __del__ method (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0010</span></tt>)</li>\n<li>in a Python type's ordinary method (<em>mask</em> is <tt class=\"literal\"><span class=\"pre\">0x0020</span></tt>).</li>\n</ul>\n<p class=\"last\">By default the trace mask is zero and all debugging statements are\ndisabled.</p>\n</dd>\n<dt>transfer(obj, direction)</dt>\n<dd>Ownership of the wrapped C/C++ structure or class instance <em>obj</em> (i.e. the\nresponsibility for deallocating it) is transferred to the C/C++ library (if\n<em>direction</em> is non-zero) or to the Python extension module (if <em>direction</em>\nis zero).</dd>\n<dt>unwrapinstance(obj)</dt>\n<dd>Return the address, as a number, of the wrapped C/C++ structure or class\ninstance <em>obj</em>.</dd>\n<dt>wrapinstance(addr, type)</dt>\n<dd>A C/C++ structure or class instance is wrapped and the Python object\ncreated is returned.  If the instance has already been wrapped then a new\nreference to the existing object is returned.  <em>addr</em> is the address of\nthe instance represented as a number.  <em>type</em> is the type of the object\n(e.g. <tt class=\"literal\"><span class=\"pre\">qt.QWidget</span></tt>).</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"the-sip-build-system\">\n<h1><a class=\"toc-backref\" href=\"#id138\" name=\"the-sip-build-system\">10\u00a0\u00a0\u00a0The SIP Build System</a></h1>\n<p>The purpose of the build system is to make it easy for you to write\nconfiguration scripts in Python for your own bindings.  The build system takes\ncare of the details of particular combinations of platform and compiler.  It\nsupports over 50 different platform/compiler combinations.</p>\n<p>The build system is implemented as a pure Python module called <tt class=\"literal\"><span class=\"pre\">sipconfig</span></tt>\nthat contains a number of classes and functions.  Using this module you can\nwrite bespoke configuration scripts (e.g. PyQt's <tt class=\"literal\"><span class=\"pre\">configure.py</span></tt>) or use it\nwith other Python based build systems (e.g.\n<a class=\"reference\" href=\"http://www.python.org/sigs/distutils-sig/distutils.html\">Distutils</a> and\n<a class=\"reference\" href=\"http://www.scons.org\">SCons</a>).</p>\n<p>An important feature of SIP is the ability to generate bindings that are built\non top of existing bindings.  For example, both\n<a class=\"reference\" href=\"http://www.riverbankcomputing.co.uk/pykde/\">PyKDE</a> and\n<a class=\"reference\" href=\"http://pyqwt.sourceforge.net/\">PyQwt</a> are built on top of PyQt but all three\npackages are maintained by different developers.  To make this easier PyQt\nincludes its own configuration module, <tt class=\"literal\"><span class=\"pre\">pyqtconfig</span></tt>, that contains additional\nclasses intended to be used by the configuration scripts of bindings built on\ntop of PyQt.  The SIP build system includes facilities that do a lot of the\nwork of creating these additional configuration modules.</p>\n<div class=\"section\" id=\"sipconfig-functions\">\n<h2><a class=\"toc-backref\" href=\"#id139\" name=\"sipconfig-functions\">10.1\u00a0\u00a0\u00a0<tt class=\"literal\"><span class=\"pre\">sipconfig</span></tt> Functions</a></h2>\n<dl>\n<dt>create_config_module(module, template, content)</dt>\n<dd><p class=\"first\">This creates a configuration module (e.g. <tt class=\"literal\"><span class=\"pre\">pyqtconfig</span></tt>) from a template\nfile and a string.</p>\n<p><tt class=\"literal\"><span class=\"pre\">module</span></tt> is the name of the configuration module file to create.</p>\n<p><tt class=\"literal\"><span class=\"pre\">template</span></tt> is the name of the template file.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">content</span></tt> is a string which replaces every occurence of the pattern\n<tt class=\"literal\"><span class=\"pre\">&#64;SIP_CONFIGURATION&#64;</span></tt> in the template file.  The content string is\nusually created from a Python dictionary using\n<tt class=\"literal\"><span class=\"pre\">sipconfig.create_content()</span></tt>.</p>\n</dd>\n<dt>create_content(dict, dictname=&quot;_pkg_config&quot;)</dt>\n<dd><p class=\"first\">This converts a Python dictionary to a string that can be parsed by the\nPython interpreter and converted back to an equivalent dictionary.  It is\ntypically used to generate the content string for\n<tt class=\"literal\"><span class=\"pre\">sipconfig.create_config_module()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dict</span></tt> is the Python dictionary to convert.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dictname</span></tt> is the optional name of the dictionary.</p>\n<p class=\"last\">Returns the dictionary as a string.</p>\n</dd>\n<dt>error(msg)</dt>\n<dd><p class=\"first\">This displays an error message on <tt class=\"literal\"><span class=\"pre\">stderr</span></tt> and calls <tt class=\"literal\"><span class=\"pre\">sys.exit()</span></tt> with\na value of 1.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">msg</span></tt> is the text of the message and should not include any newline\ncharacters.</p>\n</dd>\n<dt>format(msg, leftmargin=0, rightmargin=78)</dt>\n<dd><p class=\"first\">This formats a message by inserting newline characters at appropriate\nplaces.</p>\n<p><tt class=\"literal\"><span class=\"pre\">msg</span></tt> is the text of the message and should not include any newline\ncharacters.</p>\n<p><tt class=\"literal\"><span class=\"pre\">leftmargin</span></tt> is the optional position of the left margin.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">rightmargin</span></tt> is the optional position of the right margin.</p>\n</dd>\n<dt>inform(msg)</dt>\n<dd><p class=\"first\">This displays an information message on <tt class=\"literal\"><span class=\"pre\">stdout</span></tt>.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">msg</span></tt> is the text of the message and should not include any newline\ncharacters.</p>\n</dd>\n<dt>read_version(filename, description, numdefine=None, strdefine=None)</dt>\n<dd><p class=\"first\">This extracts version information for a package from a file, usually a C or\nC++ header file.  The version information must each be specified as a\n<tt class=\"literal\"><span class=\"pre\">#define</span></tt> of a numeric (hexadecimal or decimal) value and/or a string\nvalue.</p>\n<p><tt class=\"literal\"><span class=\"pre\">filename</span></tt> is the name of the file to read.</p>\n<p><tt class=\"literal\"><span class=\"pre\">description</span></tt> is a descriptive name of the package used in error\nmessages.</p>\n<p><tt class=\"literal\"><span class=\"pre\">numdefine</span></tt> is the optional name of the <tt class=\"literal\"><span class=\"pre\">#define</span></tt> of the version as a\nnumber.  If it is <tt class=\"literal\"><span class=\"pre\">None</span></tt> then the numeric version is ignored.</p>\n<p><tt class=\"literal\"><span class=\"pre\">strdefine</span></tt> is the optional name of the <tt class=\"literal\"><span class=\"pre\">#define</span></tt> of the version as a\nstring.  If it is <tt class=\"literal\"><span class=\"pre\">None</span></tt> then the string version is ignored.</p>\n<p class=\"last\">Returns a tuple of the numeric and string versions.  <tt class=\"literal\"><span class=\"pre\">sipconfig.error()</span></tt>\nis called if either were required but could not be found.</p>\n</dd>\n<dt>version_to_sip_tag(version, tags, description)</dt>\n<dd><p class=\"first\">This converts a version number to a SIP version tag.  SIP uses the\n<tt class=\"literal\"><span class=\"pre\">%Timeline</span></tt> directive to define the chronology of the different versions\nof the C/C++ library being wrapped.  Typically it is not necessary to\ndefine a version tag for every version of the library, but only for those\nversions that affect the library's API as SIP sees it.</p>\n<p><tt class=\"literal\"><span class=\"pre\">version</span></tt> is the numeric version number of the C/C++ library being\nwrapped.  If it is negative then the latest version is assumed.  (This is\ntypically useful if a snapshot is indicated by a negative version number.)</p>\n<p><tt class=\"literal\"><span class=\"pre\">tags</span></tt> is the dictionary of SIP version tags keyed by the corresponding\nC/C++ library version number.  The tag used is the one with the smallest\nkey (i.e. earliest version) that is greater than <tt class=\"literal\"><span class=\"pre\">version</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">description</span></tt> is a descriptive name of the C/C++ library used in error\nmessages.</p>\n<p class=\"last\">Returns the SIP version tag.  <tt class=\"literal\"><span class=\"pre\">sipconfig.error()</span></tt> is called if the C/C++\nlibrary version number did not correspond to a SIP version tag.</p>\n</dd>\n<dt>version_to_string(v)</dt>\n<dd><p class=\"first\">This converts a 3 part version number encoded as a hexadecimal value to a\nstring.</p>\n<p><tt class=\"literal\"><span class=\"pre\">v</span></tt> is the version number.</p>\n<p class=\"last\">Returns a string.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sipconfig-classes\">\n<h2><a class=\"toc-backref\" href=\"#id140\" name=\"sipconfig-classes\">10.2\u00a0\u00a0\u00a0<tt class=\"literal\"><span class=\"pre\">sipconfig</span></tt> Classes</a></h2>\n<dl>\n<dt>Configuration</dt>\n<dd><p class=\"first\">This class encapsulates configuration values that can be accessed as\ninstance objects.  A sub-class may provide a dictionary of additional\nconfiguration values in its constructor the elements of which will have\nprecedence over the super-class's values.</p>\n<p>The following configuration values are provided:</p>\n<blockquote>\n<dl>\n<dt>default_bin_dir</dt>\n<dd>The name of the directory where executables should be installed by\ndefault.</dd>\n<dt>default_mod_dir</dt>\n<dd>The name of the directory where SIP generated modules should be\ninstalled by default.</dd>\n<dt>default_sip_dir</dt>\n<dd>The name of the base directory where the <tt class=\"literal\"><span class=\"pre\">.sip</span></tt> files for SIP\ngenerated modules should be installed by default.  A sub-directory\nwith the same name as the module should be created and its <tt class=\"literal\"><span class=\"pre\">.sip</span></tt>\nfiles should be installed in the sub-directory.  The <tt class=\"literal\"><span class=\"pre\">.sip</span></tt>\nfiles only need to be installed if you might want to build other\nbindings based on them.</dd>\n<dt>py_inc_dir</dt>\n<dd>The name of the directory containing the <tt class=\"literal\"><span class=\"pre\">Python.h</span></tt> header file.</dd>\n<dt>py_lib_dir</dt>\n<dd>The name of the directory containing the Python interpreter\nlibrary.</dd>\n<dt>py_version</dt>\n<dd>The Python version as a 3 part hexadecimal number (e.g. v2.3.3 is\nrepresented as <tt class=\"literal\"><span class=\"pre\">0x020303</span></tt>).</dd>\n<dt>qt_dir</dt>\n<dd>The name of the Qt base directory.  The value is not present if Qt\nsupport is disabled.</dd>\n<dt>qt_edition</dt>\n<dd>The name of the Qt edition (e.g. enterprise, professional, free).\nThe value is not present if Qt support is disabled.</dd>\n<dt>qt_inc_dir</dt>\n<dd>The name of the Qt include directory.  The value is not present if\nQt support is disabled.</dd>\n<dt>qt_lib</dt>\n<dd>The name of the Qt library with platform dependent prefixes,\nsuffixes and version numbers removed (e.g. qt, qt-mt).  The value\nis not present if Qt support is disabled.</dd>\n<dt>qt_lib_dir</dt>\n<dd>The name of the Qt library directory.  The value is not present if\nQt support is disabled.</dd>\n<dt>qt_threaded</dt>\n<dd>A non-zero value if the Qt library includes support for threads.\nThe value is not present if Qt support is disabled.</dd>\n<dt>qt_version</dt>\n<dd>The Qt version as a 3 part hexadecimal number (e.g. v3.3.0 is\nrepresented as <tt class=\"literal\"><span class=\"pre\">0x030300</span></tt>).  It is <tt class=\"literal\"><span class=\"pre\">0</span></tt> if Qt support is\ndisabled.</dd>\n<dt>qt_winconfig</dt>\n<dd>A string describing the Qt configuration under Windows.  The value\nis not present if Qt support is disabled.</dd>\n<dt>sip_bin</dt>\n<dd>The full pathname of the SIP executable.</dd>\n<dt>sip_inc_dir</dt>\n<dd>The name of the directory containing the <tt class=\"literal\"><span class=\"pre\">sip.h</span></tt> header file.</dd>\n<dt>sip_mod_dir</dt>\n<dd>The name of the directory containing the SIP module.</dd>\n<dt>sip_version</dt>\n<dd>The SIP version as a 3 part hexadecimal number (e.g. v4.0.0 is\nrepresented as <tt class=\"literal\"><span class=\"pre\">0x040000</span></tt>).</dd>\n<dt>sip_version_str</dt>\n<dd>The SIP version as a string.  For development snapshots it will\nstart with <tt class=\"literal\"><span class=\"pre\">snapshot-</span></tt>.</dd>\n</dl>\n</blockquote>\n<dl class=\"last\">\n<dt>__init__(self, sub_cfg=None)</dt>\n<dd><p class=\"first\">Initialise the instance.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">sub_cfg</span></tt> is an optional list of sub-class configurations.  It should\nonly be used by the <tt class=\"literal\"><span class=\"pre\">__init__()</span></tt> method of a sub-class to append its\nown dictionary of configuration values before passing the list to its\nsuper-class.</p>\n</dd>\n</dl>\n</dd>\n<dt>Makefile</dt>\n<dd><p class=\"first\">This class encapsulates a Makefile.  It is intended to be sub-classed to\ngenerate Makefiles for particular purposes.  It handles all platform and\ncompiler specific flags, but allows them to be adjusted to suit the\nrequirements of a particular module or program.  These are defined using a\nnumber of macros which can be accessed as instance objects.</p>\n<p>The following instance objects are provided to help in fine tuning the\ngenerated Makefile:</p>\n<blockquote>\n<dl>\n<dt>chkdir</dt>\n<dd>A string that will check for the existence of a directory.</dd>\n<dt>config</dt>\n<dd>A reference to the <tt class=\"literal\"><span class=\"pre\">configuration</span></tt> argument that was passed to\nthe constructor.</dd>\n<dt>console</dt>\n<dd>A reference to the <tt class=\"literal\"><span class=\"pre\">console</span></tt> argument that was passed to the\nconstructor.</dd>\n<dt>copy</dt>\n<dd>A string that will copy a file.</dd>\n<dt>extra_cflags</dt>\n<dd>A list of additional flags passed to the C compiler.</dd>\n<dt>extra_cxxflags</dt>\n<dd>A list of additional flags passed to the C++ compiler.</dd>\n<dt>extra_defines</dt>\n<dd>A list of additional macro names passed to the C/C++ preprocessor.</dd>\n<dt>extra_include_dirs</dt>\n<dd>A list of additional include directories passed to the C/C++\npreprocessor.</dd>\n<dt>extra_lflags</dt>\n<dd>A list of additional flags passed to the linker.</dd>\n<dt>extra_lib_dirs</dt>\n<dd>A list of additional library directories passed to the linker.</dd>\n<dt>extra_libs</dt>\n<dd>A list of additional libraries passed to the linker.  The names of\nthe libraries must be in platform neutral form (i.e. without any\nplatform specific prefixes, version numbers or extensions).</dd>\n<dt>generator</dt>\n<dd>A string that defines the platform specific style of Makefile.  The\nonly supported values are <tt class=\"literal\"><span class=\"pre\">UNIX</span></tt> and something else that is not\n<tt class=\"literal\"><span class=\"pre\">UNIX</span></tt>.</dd>\n<dt>mkdir</dt>\n<dd>A string that will create a directory.</dd>\n<dt>rm</dt>\n<dd>A string that will remove a file.</dd>\n</dl>\n</blockquote>\n<dl class=\"last\">\n<dt>__init__(self, configuration, console=0, qt=0, opengl=0, python=0, threaded=0, warnings=None, debug=0, dir=None, makefile=&quot;Makefile&quot;, installs=None)</dt>\n<dd><p class=\"first\">Initialise the instance.</p>\n<p><tt class=\"literal\"><span class=\"pre\">configuration</span></tt> is the current configuration and is an instance of\nthe <tt class=\"literal\"><span class=\"pre\">Configuration</span></tt> class or a sub-class.</p>\n<p><tt class=\"literal\"><span class=\"pre\">console</span></tt> is set if the target is a console (rather than GUI) target.\nThis only affects Windows and is ignored on other platforms.</p>\n<p><tt class=\"literal\"><span class=\"pre\">qt</span></tt> is set if the target uses Qt.</p>\n<p><tt class=\"literal\"><span class=\"pre\">opengl</span></tt> is set if the target uses OpenGL.</p>\n<p><tt class=\"literal\"><span class=\"pre\">python</span></tt> is set if the target uses Python.h.</p>\n<p><tt class=\"literal\"><span class=\"pre\">threaded</span></tt> is set if the target requires thread support.  It is set\nautomatically if the target uses Qt and Qt has thread support enabled.</p>\n<p><tt class=\"literal\"><span class=\"pre\">warnings</span></tt> is set if compiler warning messages should be enabled.\nThe default of <tt class=\"literal\"><span class=\"pre\">None</span></tt> means that warnings are enabled for SIP v4.x\nand disabled for SIP v3.x.</p>\n<p><tt class=\"literal\"><span class=\"pre\">debug</span></tt> is set if debugging symbols should be generated.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dir</span></tt> is the name of the directory where build files are read from\nand Makefiles are written to.  The default of <tt class=\"literal\"><span class=\"pre\">None</span></tt> means the\ncurrent directory is used.</p>\n<p><tt class=\"literal\"><span class=\"pre\">makefile</span></tt> is the name of the generated Makefile.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">installs</span></tt> is a list of extra install targets.  Each element is a two\npart list, the first of which is the source and the second is the\ndestination.  If the source is another list then it is a list of source\nfiles and the destination is a directory.</p>\n</dd>\n<dt>clean_build_file_objects(self, mfile, build)</dt>\n<dd><p class=\"first\">This generates the Makefile commands that will remove any files\ngenerated during the build of the default target.</p>\n<p><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">build</span></tt> is the dictionary created from parsing the build file.</p>\n</dd>\n<dt>finalise(self)</dt>\n<dd>This is called just before the Makefile is generated to ensure that it\nis fully configured.  It must be reimplemented by a sub-class.</dd>\n<dt>generate(self)</dt>\n<dd>This generates the Makefile.</dd>\n<dt>generate_macros_and_rules(self, mfile)</dt>\n<dd><p class=\"first\">This is the default implementation of the Makefile macros and rules\ngeneration.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n</dd>\n<dt>generate_target_clean(self, mfile)</dt>\n<dd><p class=\"first\">This is the default implementation of the Makefile clean target\ngeneration.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n</dd>\n<dt>generate_target_default(self, mfile)</dt>\n<dd><p class=\"first\">This is the default implementation of the Makefile default target\ngeneration.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n</dd>\n<dt>generate_target_install(self, mfile)</dt>\n<dd><p class=\"first\">This is the default implementation of the Makefile install target\ngeneration.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n</dd>\n<dt>install_file(self, mfile, src, dst)</dt>\n<dd><p class=\"first\">This generates the Makefile commands to install one or more files to a\ndirectory.</p>\n<p><tt class=\"literal\"><span class=\"pre\">mfile</span></tt> is the Python file object of the Makefile.</p>\n<p><tt class=\"literal\"><span class=\"pre\">src</span></tt> is the name of a single file to install or a list of a number\nof files to install.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">dst</span></tt> is the name of the destination directory.</p>\n</dd>\n<dt>optional_list(self, name)</dt>\n<dd><p class=\"first\">This returns an optional Makefile macro as a list.</p>\n<p><tt class=\"literal\"><span class=\"pre\">name</span></tt> is the name of the macro.</p>\n<p class=\"last\">Returns the macro as a list.</p>\n</dd>\n<dt>optional_string(self, name, default=&quot;&quot;)</dt>\n<dd><p class=\"first\">This returns an optional Makefile macro as a string.</p>\n<p><tt class=\"literal\"><span class=\"pre\">name</span></tt> is the name of the macro.</p>\n<p><tt class=\"literal\"><span class=\"pre\">default</span></tt> is the optional default value of the macro.</p>\n<p class=\"last\">Returns the macro as a string.</p>\n</dd>\n<dt>parse_build_file(self, filename)</dt>\n<dd><p class=\"first\">This parses a build file (created with the <tt class=\"literal\"><span class=\"pre\">-b</span></tt> SIP command line\noption).</p>\n<p><tt class=\"literal\"><span class=\"pre\">filename</span></tt> is the name of the build file.</p>\n<p class=\"last\">Returns a dictionary corresponding to the parsed build file.</p>\n</dd>\n<dt>platform_lib(self, clib)</dt>\n<dd><p class=\"first\">This converts a library name to a platform specific form.</p>\n<p><tt class=\"literal\"><span class=\"pre\">clib</span></tt> is the name of the library in cannonical form.</p>\n<p class=\"last\">Return the platform specific name.</p>\n</dd>\n<dt>ready(self)</dt>\n<dd>This is called to ensure that the Makefile is fully configured.  It is\nnormally called automatically when needed.</dd>\n<dt>required_string(self, name)</dt>\n<dd><p class=\"first\">This returns a required Makefile macro as a string.</p>\n<p><tt class=\"literal\"><span class=\"pre\">name</span></tt> is the name of the macro.</p>\n<p class=\"last\">Returns the macro as a string.  An exception is raised if the macro\ndoes not exist or has an empty value.</p>\n</dd>\n</dl>\n</dd>\n<dt>ModuleMakefile(Makefile)</dt>\n<dd><p class=\"first\">This class encapsulates a Makefile to build a generic Python extension\nmodule.</p>\n<dl class=\"last\">\n<dt>__init__(self, configuration, build_file, install_dir=None, static=0, console=0, opengl=0, threaded=0, warnings=None, debug=0, dir=None, makefile=&quot;Makefile&quot;, installs=None)</dt>\n<dd><p class=\"first\">Initialise the instance.</p>\n<p><tt class=\"literal\"><span class=\"pre\">configuration</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">build_file</span></tt> is the name of the build file.  Build files are\ngenerated using the <tt class=\"literal\"><span class=\"pre\">-b</span></tt> SIP command line option.</p>\n<p><tt class=\"literal\"><span class=\"pre\">install_dir</span></tt> is the name of the directory where the module will be\noptionally installed.</p>\n<p><tt class=\"literal\"><span class=\"pre\">static</span></tt> is set if the module should be built as a static library.</p>\n<p><tt class=\"literal\"><span class=\"pre\">console</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">qt</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">opengl</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">threaded</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">warnings</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">debug</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dir</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">makefile</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">installs</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n</dd>\n<dt>finalise(self)</dt>\n<dd>This is a reimplementation of <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.finalise()</span></tt>.</dd>\n<dt>generate_macros_and_rules(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_macros_and_rules()</span></tt>.</dd>\n<dt>generate_target_clean(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_clean()</span></tt>.</dd>\n<dt>generate_target_default(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_default()</span></tt>.</dd>\n<dt>generate_target_install(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_install()</span></tt>.</dd>\n<dt>module_as_lib(self, mname)</dt>\n<dd><p class=\"first\">This returns the name of a SIP v3.x module for when it is used as a\nlibrary to be linked against.  An exception will be raised if it is\nused with SIP v4.x modules.</p>\n<p><tt class=\"literal\"><span class=\"pre\">mname</span></tt> is the name of the module.</p>\n<p class=\"last\">Returns the corresponding library name.</p>\n</dd>\n</dl>\n</dd>\n<dt>ParentMakefile(Makefile)</dt>\n<dd><p class=\"first\">This class encapsulates a Makefile that sits above a number of other\nMakefiles in sub-directories.</p>\n<dl class=\"last\">\n<dt>__init__(self, configuration, subdirs, dir=None, makefile=&quot;Makefile&quot;, installs=None)</dt>\n<dd><p class=\"first\">Initialise the instance.</p>\n<p><tt class=\"literal\"><span class=\"pre\">configuration</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">subdirs</span></tt> is the sequence of sub-directories.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dir</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">makefile</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">installs</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n</dd>\n<dt>generate_macros_and_rules(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_macros_and_rules()</span></tt>.</dd>\n<dt>generate_target_clean(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_clean()</span></tt>.</dd>\n<dt>generate_target_default(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_default()</span></tt>.</dd>\n<dt>generate_target_install(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_install()</span></tt>.</dd>\n</dl>\n</dd>\n<dt>ProgramMakefile(Makefile)</dt>\n<dd><p class=\"first\">This class encapsulates a Makefile to build an executable program.</p>\n<dl class=\"last\">\n<dt>__init__(self, configuration, build_file=None, install_dir=None, console=0, qt=0, opengl=0, python=0, threaded=0, warnings=None, debug=0, dir=None, makefile=&quot;Makefile&quot;, installs=None)</dt>\n<dd><p class=\"first\">Initialise the instance.</p>\n<p><tt class=\"literal\"><span class=\"pre\">configuration</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">build_file</span></tt> is the name of the optional build file.  Build files are\ngenerated using the <tt class=\"literal\"><span class=\"pre\">-b</span></tt> SIP command line option.</p>\n<p><tt class=\"literal\"><span class=\"pre\">install_dir</span></tt> is the name of the directory where the executable\nprogram will be optionally installed.</p>\n<p><tt class=\"literal\"><span class=\"pre\">console</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">qt</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">opengl</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">python</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">threaded</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">warnings</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">debug</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">dir</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p><tt class=\"literal\"><span class=\"pre\">makefile</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n<p class=\"last\"><tt class=\"literal\"><span class=\"pre\">installs</span></tt> - see <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.__init__()</span></tt>.</p>\n</dd>\n<dt>build_command(self, source)</dt>\n<dd><p class=\"first\">This creates a single command line that will create an executable\nprogram from a single source file.</p>\n<p><tt class=\"literal\"><span class=\"pre\">source</span></tt> is the name of the source file.</p>\n<p class=\"last\">Returns a tuple of the name of the executable that will be created and\nthe command line.</p>\n</dd>\n<dt>finalise(self)</dt>\n<dd>This is a reimplementation of <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.finalise()</span></tt>.</dd>\n<dt>generate_macros_and_rules(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_macros_and_rules()</span></tt>.</dd>\n<dt>generate_target_clean(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_clean()</span></tt>.</dd>\n<dt>generate_target_default(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_default()</span></tt>.</dd>\n<dt>generate_target_install(self, mfile)</dt>\n<dd>This is a reimplementation of\n<tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.generate_target_install()</span></tt>.</dd>\n</dl>\n</dd>\n<dt>SIPModuleMakefile(ModuleMakefile)</dt>\n<dd><p class=\"first\">This class encapsulates a Makefile to build a SIP generated Python\nextension module.</p>\n<dl class=\"last\">\n<dt>finalise(self)</dt>\n<dd>This is a reimplementation of <tt class=\"literal\"><span class=\"pre\">sipconfig.Makefile.finalise()</span></tt>.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n</body>\n</html>\n", "id": 37705.0}