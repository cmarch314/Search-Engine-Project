{"text": "User Interface Development System What is Chiron The Chiron system provides tools for assisting in the development of graphical user interfaces and provides a run time system for managing and supporting their dynamic behavior The objective of the Chiron system is to reduce long term costs associated with developing and maintaining graphical user interface GUI software It achieves this objective by providing key interface layers which are resilient to change In particular Chiron strongly separates an application from its user interface code as well as separating the user interface code from the underlying toolkit substrates Chiron supports the construction of GUIs which provide multiple coordinated views of application objects and allows flexible restructuring of the configuration of those views Chiron supports a concurrent model of control While the Chiron architecture supports heterogeneous multi lingual systems the development tools which are part of this release only support clients applications written in Ada Chiron is a serverized system The Chiron server and clients run in separate Unix processes Within a client artists are active interface agents that are bound to one or more objects They encapsulate decisions about how objects should be depicted presentations as well as how they behave dynamically dialogs Multiple artists can be bound to a single object providing coordinated multiple views of that object A Chiron client is made up of application code a set of artists and client support code The client support code implements initialization event detection and routing and communication with the server Client support code is automatically generated by client building tools Chiron leverages from commercial GUI layout tools Specifically Chiron can be used with Sun Microsystem s DevGuide tool to create artists For those aspects of GUIs which DevGuide is incapable of supporting e g drawing on a canvas DevGuide and Chiron tools can be used to create an artist template into which the additional graphical aspects can be added programmatically The Chiron server manages all aspects of the user interface that are not artist or application specific It can be thought of as a virtual machine providing a high level graphical toolkit interface to artists by means of an Abstract Depiction Language ADL The server receives ADL instructions from the artists and uses them to create and manipulate an internal abstract representation of the graphical interface The representation is rendered to a concrete depiction a user viewable image via calls to the underlying window system The server also listens for events from the window system button push menu selection etc and translates them to Chiron events before shipping them back to the appropriate client The Chiron server provides flexibility in terms of windowing systems and toolkits application languages and process inter connection topology Although we currently only provide support for Ada clients it is feasible to provide other language specific interfaces to the server s ADL The Chiron model is highly concurrent Most components maintain their own and possibly multiple threads of control Thus unlike most user interface architectures Chiron avoids imposing sequential control upon tools allowing the tool the user interface and the server to run in parallel System Requirements Chiron 1 4 requires SunAda version 1 1 the X Window System version 11 revision level 5 on a Sun 4 color or monochrome workstation Chiron has been developed using the gcc compiler v2 5 8 The lasted Chiron 1 4 release has been successfully compiled under SunAda 2 1 running on Solaris 2 3 This version has also been successfully ported to an RS6 under Verdix VADS 6 2 Chiron makes use of XView version 3 and Motif version 1 2 to build the XView and Motif versions of the Chiron server You will need at least one of these toolkits Chiron also requires Q v3 an Ada C interprocess communication support utility and Arpc v4 2 3 an extension to Sun RPC XDR 4 both developed by the Department of Computer Science University of Colorado Boulder You must install Arpc and Q before installing Chiron For convenience copies of both Arpc and Q have been bundled in the Chiron 1 4 distribution Chiron Source and Papers Chiron 1 4 Source This tar file contains the sources for Chiron 1 4 Q and Arpc 4 3MB Chiron 1 4 Binaries for SunOS 4 1 2 Chiron 1 4 Binaries for Solaris 2 5 These tar file contains a binary versions of Chiron for those who don t have the software necessary to build Chiron The binary distribution allows you to run the Chiron demos You must have the full installation to build your own clients 11 7MB Supporting Separations of Concerns and Concurrency in the Chiron 1 User Interface System This document contains the most complete description of the Chiron 1 architecture 24 kB CHI93 PaperThe paper published in the proceedings of the 1993 Conference on Human Factors in Computing Systems INTERCHI 93 9 kB Information on the latest patches Screenshots All of the pictures listed below are screenshots of working applications developed using Chiron Flight simulator This Chiron interface was developed for a preexsiting flight simulator application Each instrument in the display is associated with a separate artist The application manages a simple set of flight laws and continually updates the six degrees of freedom of the simulated aircraft Artist s giving various presentations of the aircraft s state are attached to objects that define properties of the simulated aircraft ProDAG The graphical user interface for the ProDAG program dependency analysis tool was developed using Chiron Tetris tm A distributed multi player Tetris tm style game arcadia chiron ics uci edu Arcadia Project at UCI Department of Information and Computer Science University of California Irvine CA 92717 3425 Last modified Thu Apr 18 2 54 25 1996", "_id": "http://ftp.ics.uci.edu/pub/chiron/", "title": "chiron - user interface development system", "html": "<HTML>\n<!-- $Id: chiron.html,v 1.10 1996/10/10 00:25:55 kari Exp $ -->\n<HEAD>\n<TITLE>Chiron - User Interface Development System</TITLE>\n<META http-equiv=\"Owner\" content=\"CraigM\">\n<META http-equiv=\"Reply-To\" content=\"craigm@ics.uci.edu\">\n</HEAD><BODY>\n<IMG SRC=\"images/Chiron_Logo.gif\">\n<H1>User Interface Development System</H1>\n\n<HR>\n<H1>\nWhat is Chiron?\n</H1>\n\nThe Chiron system provides tools for assisting in the development of\ngraphical user interfaces and provides a run-time system for managing\nand supporting their dynamic behavior.\n<P>\n\nThe objective of the Chiron system is to reduce long-term costs\nassociated with developing and maintaining graphical user interface\n(GUI) software.  It achieves this objective by providing key interface\nlayers which are resilient to change.  In particular, Chiron strongly\nseparates an application from its user interface code, as well as\nseparating the user interface code from the underlying toolkit\nsubstrates.  Chiron supports the construction of GUIs which provide\nmultiple coordinated views of application objects and allows flexible\nrestructuring of the configuration of those views.  Chiron supports a\nconcurrent model of control.  While the Chiron architecture supports\nheterogeneous, multi-lingual systems, the development tools which are\npart of this release only support clients (applications) written\nin Ada.\n<P>\n\nChiron is a serverized system.  The Chiron server and clients run\nin separate Unix processes.  Within a client, artists are active \ninterface agents that are bound to one or more objects. They encapsulate \ndecisions about how objects should be depicted (presentations) as\nwell as how they behave dynamically (dialogs).  Multiple artists can be \nbound to a single object, providing coordinated multiple views of that \nobject.  A Chiron client is made up of application code, a set of \nartists, and client support code.  The client support code implements \ninitialization, event detection and routing, and communication with the \nserver.  Client support code is automatically generated by client \nbuilding tools.  \n<P>\n\nChiron leverages from commercial GUI layout tools.  Specifically, Chiron\ncan be used with Sun Microsystem's DevGuide tool to create artists.\nFor those aspects of GUIs which DevGuide is incapable of supporting\n(e.g. drawing on a canvas), DevGuide and Chiron tools can be used to\ncreate an artist template into which the additional graphical aspects\ncan be added programmatically.\n<P>\n\nThe Chiron server manages all aspects of the user interface that are\nnot artist or application specific.  It can be thought of as a virtual \nmachine providing a high-level graphical \"toolkit\" interface to artists \nby means of an Abstract Depiction Language (ADL).  The server receives \nADL instructions from the artists and uses them to create and \nmanipulate an internal abstract representation of the graphical \ninterface. The representation is rendered to a concrete depiction (a \nuser viewable image) via calls to the underlying window system. The \nserver also listens for events from the window system (button push, \nmenu selection, etc) and translates them to Chiron events before \nshipping them back to the appropriate client.  The Chiron server \nprovides flexibility in terms of windowing systems and toolkits, \napplication languages, and process inter-connection topology.  Although \nwe currently only provide support for Ada clients, it is feasible to \nprovide other language-specific interfaces to the server's ADL.\n<P>\n\nThe Chiron model is highly concurrent.  Most components maintain\ntheir own, and possibly multiple, threads of control.  Thus, unlike\nmost user interface architectures, Chiron avoids imposing sequential \ncontrol upon tools, allowing the tool, the user interface, and the server, \nto run in parallel.\n<P>\n\n<HR>\n<A NAME=requirements>\n<H1>System Requirements</H1>\n\nChiron 1.4 requires SunAda version 1.1,\nthe X Window System, version 11 revision level 5, on a Sun 4\ncolor or monochrome workstation.  Chiron has been developed using\nthe gcc compiler v2.5.8.  The lasted Chiron 1.4 release has\nbeen successfully compiled under SunAda 2.1 running on Solaris 2.3.\nThis version has also been successfully ported to an RS6000 under\nVerdix VADS 6.2.\n<P>\n\nChiron makes use of XView version 3.0 and Motif version 1.2 to build\nthe XView and Motif versions of the Chiron server.  You will need at least\none of these toolkits.\n<P>\n\nChiron also requires Q v3.0, an Ada-C interprocess communication support\nutility and Arpc v402.3, an extension to Sun RPC/XDR 4.0, both developed\nby the Department of Computer Science, \n<A HREF=\"http://www.cs.colorado.edu/homes/arcadia/public_html/Home.html\">\nUniversity of Colorado, Boulder.</A>\nYou must install Arpc and Q before installing Chiron.  For convenience,\ncopies of both Arpc and Q have been bundled in the Chiron 1.4 distribution.\n<P>\n\n<HR>\n<H1>\nChiron Source and Papers\n</H1>\n\n<DL>\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/release/RELEASE_chiron.1.4.p7.tar.Z\">Chiron.1.4 Source</A>\n<DD>This tar file contains the sources for Chiron 1.4, Q, and Arpc. [4.3MB]\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/release/RELEASE_chiron.1.4.p6-SunOS4.1.2.tar.Z\">Chiron.1.4 Binaries for SunOS 4.1.2</A>\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/release/RELEASE_chiron.1.4.p6-Solaris2.5.tar.Z\">Chiron.1.4 Binaries for Solaris 2.5</A>\n<DD>These tar file contains a binary versions of Chiron for those who\ndon't have the <A HREF=\"#requirements\">software necessary</A> to build\nChiron.  The binary distribution allows you to run the Chiron demos.\nYou must have the full installation to build your own clients. [11.7MB]\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/papers/UCI_Tech_Report_94-12.ps.Z\">\nSupporting Separations of Concerns and Concurrency in the Chiron-1 User\nInterface System</A>\n<DD>This document contains the most complete description of the Chiron-1 \narchitecture. [240kB]\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/papers/CHI93_paper.ps.Z\">\nCHI93 Paper</A><DD>The paper published in the proceedings of\nthe 1993 Conference on Human Factors in Computing Systems. INTERCHI '93. [90kB]\n</DL>\n\n<HR>\nInformation on the latest <A HREF=\"chiron_patches.html\">patches</A>.\n\n<HR>\n<H1>Screenshots</H1>\n\nAll of the pictures listed below are screenshots of working applications \ndeveloped using Chiron.\n\n<DL>\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/screenshots/flight_simulator.tiff\"> Flight simulator</A>\n<DD>This Chiron interface was developed for a preexsiting flight simulator\napplication.  Each instrument in the display is associated with a separate\nartist.  The application manages a simple set of flight laws and\ncontinually updates the six degrees of freedom of the simulated aircraft.\nArtist's giving various presentations of the aircraft's state are attached\nto objects that define properties of the simulated aircraft.\n<DT><A HREF=\"ftp://liege.ics.uci.edu/pub/arcadia/chiron/screenshots/prodag.tiff\"> ProDAG</A>\n<DD>The graphical user interface for the ProDAG program dependency \nanalysis tool was developed using Chiron.\n<DT><A HREF=\"ftp://www.ics.uci.edu/pub/chiron/screenshots/tetris.tiff\"> Tetris(tm)</A>\n<DD> A distributed multi-player Tetris(tm) style game.\n</DL>\n\n<HR>\n<ADDRESS>\narcadia-chiron@ics.uci.edu<BR>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/atUCI.html\">\nArcadia Project at UCI</A><BR>\n<A HREF=\"http://www.ics.uci.edu/\">\nDepartment of Information and Computer Science,</A><BR>\nUniversity of California, Irvine, CA  92717-3425\n</ADDRESS>\nLast modified: Thu Apr 18 02:54:25 1996\n</BODY></HTML>\n", "id": 1764.0}