{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 1 6 Sprouting Hydrogens in Up 1 Creating Atoms Bonds Next 11 Connectivity Processing 1 7 Using NewConf The most common method to create conformers in a molecule is by reading a molecule from a file see chapter Reading and Writing Molecules However when manipulating molecules it is often necessary to create conformers on the fly In OEChem this is done with the NewConf method of OEMCMolBases There are five prominent overloads of NewConf All of the versions create conformers with the capacity to store coordinates for the current number of atoms in the molecule NewAtom and NewBond adjust this capacity as necessary The default OEMCMolBase constructor puts the molecule in a state with a single empty conformer as does the OEMCMolBase Clear function The DeleteConfs function of the OEMCMolBase removes all of the conformers of the molecule usr bin env python ch1 5 py from openeye oechem import mol OEMol print Default NumConfs mol NumConfs mol NewConf print After one additional NumConfs mol NumConfs mol DeleteConfs print After deletion NumConfs mol NumConfs Download as text The code about will produce the output Default NumConfs 1 After one additional NumConfs 2 After deletion NumConfs The versions of the NewConf method are NewConf NewConf OEFloatArray NewConf OEMolBase NewConf OEConfBase After the NewConf with no arguments has been called the coordinates of individual atoms can be set using the SetCoords method which takes an atom or all of the atoms can be set at once with the SetCoords which takes only a OEFloatArray or only a OEDoubleArray The NewConf overload which takes an argument OEFloatArray is expecting a OEFloatArray of size 3 GetMaxAtomIdx with the Cartesian coordinates of each atom of the new conformer in coords atom GetIdx 3 The NewConf which takes an OEMolBase is expecting the molecule passed in to have the same graph as the OEMCMolBase which is the parent of the new conformer It is important to note that this version of NewConf can take an OEGraphMol OEMol or OEMCMol In the latter two cases the coordinates of the new conformer will come from the active conformation of the molecule passed in Finally there is an overload which takes a conformer This function behaves the same as the overload which takes an OEMolBase usr bin env python ch1 5 py from openeye oechem import def GetGoodMol destination source destination DeleteConfs for conf in source GetConfs if conf GetEnergy 15 5 newconf destination NewConf conf newconf SetTitle Low Energy Conformer 3f newconf GetEnergy oemolistream ifs input oeb oemolostream ofs output sdf goodmol OEMol for mol in ifs GetOEMols GetGoodMol goodmol mol OEWriteMolecule ofs goodmol Download as text The example above demonstrates copying conformers from one OEMol to another using the NewConf and DeleteConfs functions The main routine reads all of the molecules from the file input oeb and writes the molecules with only their low energy conformations to output sdf The function GetGoodMol generates a destination molecule that contains only the low energy conformations of the source molecule The title of each new conformer is set to reflect its energy OEChem Python Theory Manual Version 1 3 1 Previous 1 6 Sprouting Hydrogens in Up 1 Creating Atoms Bonds Next 11 Connectivity Processing Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node111.html", "title": "10.7 using newconf", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>10.7 Using NewConf</title>\n<META NAME=\"description\" CONTENT=\"10.7 Using NewConf\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node110.html\">\n<LINK REL=\"up\" HREF=\"node104.html\">\n<LINK REL=\"next\" HREF=\"node112.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node110.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node104.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node112.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node110.html\">10.6 Sprouting Hydrogens in</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node104.html\">10. Creating Atoms, Bonds</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node112.html\">11. Connectivity Processing</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0012700000000000000000\">\n10.7 Using NewConf</A>\n</H1>\n\n<P>\nThe most common method to create conformers in a molecule is by reading a\nmolecule from a file (see chapter \"Reading and Writing Molecules\").\nHowever, when manipulating molecules it is often necessary to create\nconformers on-the-fly.  In OEChem, this is done with the\n<code>NewConf</code> method of OEMCMolBases.  There are five prominent overloads\nof <code>NewConf</code>.  All of the versions create conformers with the\ncapacity to store coordinates for the current number of atoms in the\nmolecule.  <code>NewAtom</code> and <code>NewBond</code> adjust this capacity as\nnecessary.  The default OEMCMolBase constructor puts the molecule in a\nstate with a single empty conformer (as does the <code>OEMCMolBase::Clear</code>\nfunction).  The <code>DeleteConfs</code> function of the OEMCMolBase removes\n<i>all</i> of the conformers of the molecule.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch10-5.py\nfrom openeye.oechem import *\n\nmol = OEMol()\n\nprint \"Default NumConfs = \", mol.NumConfs()\n\nmol.NewConf()\n\nprint \"After one additional, NumConfs = \", mol.NumConfs()\n\nmol.DeleteConfs()\n\nprint \"After deletion, NumConfs = \", mol.NumConfs()\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch10-5.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe code about will produce the output:\n<dl><dd><pre class=\"verbatim\">Default NumConfs =  1\nAfter one additional, NumConfs =  2\nAfter deletion, NumConfs =  0\n</pre></dl>\n\n<P>\nThe versions of the <code>NewConf</code> method are:\n<dl><dd><pre class=\"verbatim\">NewConf()\nNewConf(OEFloatArray)\nNewConf(OEMolBase)\nNewConf(OEConfBase)\n</pre></dl>\n\n<P>\nAfter the <code>NewConf</code> with no arguments has been called, the coordinates\nof individual atoms can be set using the <code>SetCoords</code>\nmethod which takes an atom, or all of the atoms can be set at once with\nthe <code>SetCoords</code> which takes only a <code>OEFloatArray</code> or only a\n<code>OEDoubleArray</code>.\n\n<P>\nThe <code>NewConf</code> overload which takes an argument OEFloatArray is\nexpecting a OEFloatArray of size <code>3*GetMaxAtomIdx()</code> with the\nCartesian coordinates of each <code>atom</code> of the new conformer in\n<code>coords[atom-&gt;GetIdx()*3]</code>.\n\n<P>\nThe <code>NewConf</code> which takes an OEMolBase is expecting the\nmolecule passed in to have the same graph as the OEMCMolBase which is the\nparent of the new conformer.  It is important to note that this version of\n<code>NewConf</code> can take an OEGraphMol, OEMol, or OEMCMol.  In the latter\ntwo cases, the coordinates of the new conformer will come from the active\nconformation of the molecule passed in.\n\n<P>\nFinally, there is an overload which takes a conformer.  This\nfunction behaves the same as the overload which takes an OEMolBase.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch10-5.py\nfrom openeye.oechem import *\n\ndef GetGoodMol(destination, source):\n    destination.DeleteConfs()\n    for conf in source.GetConfs():\n        if conf.GetEnergy() &lt; -15.5:\n            newconf = destination.NewConf(conf)\n            newconf.SetTitle(\"Low Energy Conformer: %.3f\" % newconf.GetEnergy())\n\noemolistream ifs(\"input.oeb\")\noemolostream ofs(\"output.sdf\")\n\ngoodmol = OEMol()\nfor mol in ifs.GetOEMols():\n    GetGoodMol(goodmol, mol)\n    OEWriteMolecule(ofs, goodmol)\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch10-6.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe example above demonstrates copying conformers from one OEMol to another\nusing the <code>NewConf</code> and <code>DeleteConfs</code> functions.  The main\nroutine reads all of the molecules from the file \"input.oeb\" and writes the\nmolecules with only their low-energy conformations to \"output.sdf\".  The\nfunction <code>GetGoodMol</code> generates a destination molecule that contains\nonly the low-energy conformations of the source molecule.  The title of\neach new conformer is set to reflect its energy.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node110.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node104.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node112.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node110.html\">10.6 Sprouting Hydrogens in</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node104.html\">10. Creating Atoms, Bonds</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node112.html\">11. Connectivity Processing</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37926.0}