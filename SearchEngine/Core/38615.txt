{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Constrained Delaunay triangulation 2 Traits Tds Itag DefinitionA constrained Delaunay triangulation is a triangulation with constrained edges which tries to be as much Delaunay as possible Constrained edges are not necessarily Delaunay edges therefore a constrained Delaunay triangulation is not a Delaunay triangulation A constrained Delaunay is a triangulation whose faces do not necessarily fulfill the empty circle property but fulfill a weaker property called the constrained empty circle To state this property it is convenient to think of constrained edges as blocking the view Then a triangulation is constrained Delaunay if the circumscribing circle of any of its triangular faces includes in its interior no vertex that is visible from the interior of the triangle The class Constrained Delaunay triangulation 2 Traits Tds Itag is designed to represent constrained Delaunay triangulations As in the case of constrained triangulations three different versions of Delaunay constrained triangulations are offered depending on wether the user wishes to handle intersecting input constraints or not The desired version can be selected through the instantation of the third template parameter Itag which can be one of the following CGAL No intersection tag if intersections of input constraints are disallowed CGAL Exact predicates tag allows intersections between input constraints and is to be used when the traits class provides exact predicates but approximate constructions of the intersection points CGAL Exact intersections tag allows intersections between input constraints and is to be used in conjunction with an exact arithmetic type The template parameters Tds has to be instantiate with a model of TriangulationDataStructure 2 The geometric traits of a constrained Delaunay triangulation is required to provide the side of oriented circle test as the geometric traits of a Delaunay triangulation and the Traits parameter has to be instantiated with a model DelaunayTriangulationTraits 2 When intersection of input constraints are supported the geometric traits class is required to provide additional function object types to compute the intersection of two segments and has then to be also a model of the concept ConstrainedTriangulationTraits 2 A constrained Delaunay triangulation is not a Delaunay triangulation but it is a constrained triangulation Therefore the class Constrained Delaunay triangulation 2 Traits Tds Itag derives from the class Constrained triangulation 2 Traits Tds Also information about the status constrained or not of the edges of the triangulation is stored in the faces Thus the nested Face type of a constrained triangulation offers additonnal functionalities to deal with this information These additional functionalities induce additionnal requirements on the base face class plugged into the triangulation data structure of a constrained Delaunay triangulation The base face of a constrained Delaunay triangulation has to be a model of the concept ConstrainedTriangulationFaceBase 2 CGAL provides a default for the template parameters If Gt is the geometric traits parameter the default for ConstrainedTriangulationFaceBase 2 is the class CGAL Constrained triangulation face base 2 Gt and the default for the triangulation data structure parameter is the class CGAL Triangulation data structure 2 CGAL Triangulation vertex base 2 Gt CGAL Constrained triangulation face base 2 Gt The default intersection tag is CGAL No intersection tag include CGAL Constrained Delaunay triangulation 2 h Inherits FromConstrained triangulation 2 Traits Tds Itag TypesAll types used in this class are inherited from the base class Constrained triangulation 2 Traits Tds Itag Creation Constrained Delaunay triangulation 2 Traits Tds Itag cdt Traits t Traits Introduces an empty constrained Delaunay triangulation cdt Constrained Delaunay triangulation 2 Traits Tds Itag cdt Constrained Delaunay triangulation 2 cdt1 Copy constructor all faces and vertices are duplicated and the constrained status of edges is copied Constrained Delaunay triangulation 2 Traits Tds Itag cdt list Constrained lc Traits t Traits Introduces a constrained triangulation the constrained edges of which are the edges of the list lc template class InputIterator Constrained Delaunay triangulation 2 Traits Tds Itag cdt InputIterator first InputIterator last Traits t Traits A templated constructor which introduces and builds a constrained triangulation with constrained edges in the range first last Precondition The value type of first and last is Constraint Insertion and Removal The following member functions overwrite the corresponding members of the base class to include a step restoring the Delaunay constrained property after modification of the triangulation Vertex handle cdt insert Point p Face handle f Face handle Inserts point p in the triangulation If present f is used as an hint for the location of p Vertex handle cdt insert Point p Locate type lt Face handle loc int li Same as above except that the location of the point p to be inserted is assumed to be given by lt loc i Vertex handle cdt push back Point p Equivalent to insert p template class InputIterator int cdt insert InputIterator first InputIterator last Inserts the points in the range first last Returns the number of inserted points Precondition The value type of first and last is Point void cdt insert constraint Point a Point b Inserts segment ab as a constrained edge in the triangulation void cdt push back Constraint c Inserts constraints c as above void cdt insert constraint Vertex handle va Vertex handle vb Inserts the line segment whose endpoints are the vertices va and vb as a constrained edge e in the triangulation void cdt remove Vertex handle v Removes vertex v Precondition Vertex v is not incident to a constrained edge void cdt remove incident constraints Vertex handle v Make the edges incident to vertex v unconstrained edges void cdt remove constraint Face handle f int i Edge f i is no longer constrained Queries The following template member functions query the set of faces in conflict with a point p The notion of conflict refers here to a constrained Delaunay setting which means the following Constrained edges are considered as visibility obstacles and a point p is considered to be in conflict with a face f iff it is visible from the interior of f and included in the circumcircle of f template class OutputItFaces class OutputItBoundaryEdges std pair OutputItFaces OutputItBoundaryEdges cdt get conflicts and boundary Point p OutputItFaces fit OutputItBoundaryEdges eit Face handle start OutItFaces is an output iterator with Face handle as value type OutItBoundaryEdges stands for an output iterator with Edge as value type This members function outputs in the container pointed to by fit the faces which are in conflict with point p It outputs in the container pointed to by eit the boundary of the zone in conflict with p The boundary edges of the conflict zone are ouput in counterclockwise order and each edge is described through its incident face which is not in conflict with p The function returns in a std pair the resulting output iterators template class OutputItFaces OutputItFaces cdt get conflicts Point p OutputItFaces fit Face handle start Same as above except that only the faces in conflict with p are output The function returns the resulting output iterator template class OutputItBoundaryEdges OutputItBoundaryEdges cdt get boundary of conflicts Point p OutputItBoundaryEdges eit Face handle start OutputItBoundaryEdges stands for an output iterator with Edge as value type This functions outputs in the container pointed to by eit the boundary of the zone in conflict with p The boundary edges of the conflict zone are ouput in counter clockwise order and each edge is described through the incident face which is not in conflict with p The function returns the resulting output iterator Checking bool cdt is valid Checks if the triangulation is valid and if each constrained edge is consistently marked constrained in its two incident faces advanced Flips bool cdt is flipable Face handle f int i Determines if edge f i can be flipped Returns true if edge f i is not constrained and the circle circumscribing f contains the vertex of f neighbor i opposite to edge f i void cdt flip Face handle f int i Flip f and f neighbor i void cdt propagating flip List edges edges Makes the triangulation constrained Delaunay by flipping edges List edges contains an initial list of edges to be flipped The returned triangulation is constrained Delaunay if the initial list contains at least all the edges of the input triangulation that failed to be constrained Delaunay An edge is said to be constrained Delaunay if it is either constrained or locally Delaunay advanced See AlsoCGAL Constrained triangulation 2 Traits Tds Itag TriangulationDataStructure 2 DelaunayTriangulationTraits 2 ConstrainedTriangulationTraits 2 ConstrainedDelaunayTriangulationTraits 2 ConstrainedTriangulationFaceBase 2 Next Constrained triangulation 2 Traits Tds Itag Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Triangulation_2_ref/Class_Constrained_Delaunay_triangulation_2.html", "title": "constrained_delaunay_triangulation_2&lt;traits,tds,itag&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Triangulation_2_ref/Constrained_Delaunay_triangulation_2.tex' -->\n<html> <head>  \n<title>Constrained_Delaunay_triangulation_2&lt;Traits,Tds,Itag&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_910\"></A>\n\n<A NAME=\"Cross_link_anchor_911\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_876\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Constrained_Delaunay_triangulation_2<Traits,Tds,Itag>\"></A>\n<h2><I>CGAL::Constrained_Delaunay_triangulation_2&lt;Traits,Tds,Itag&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>A constrained Delaunay triangulation is a triangulation with\nconstrained edges which tries to be as much Delaunay as possible.\nConstrained edges are not necessarily Delaunay edges,\ntherefore a constrained Delaunay triangulation is not a Delaunay\ntriangulation. A constrained Delaunay is a triangulation\nwhose faces do not\nnecessarily fulfill the empty circle property\nbut fulfill a weaker property called the\n<I>constrained empty circle</I>.\n To state this property,\nit is convenient to think of  constrained\nedges as blocking the view. Then, a triangulation is \nconstrained Delaunay if\n the circumscribing circle\nof any of its triangular faces includes in its interior \nno vertex  that is visible\nfrom the interior of the triangle.  \nThe class <I><A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I> is designed to represent\nconstrained Delaunay triangulations.\n<P>\n\nAs in the case of constrained triangulations, three different versions\nof Delaunay constrained triangulations are offered\ndepending on wether the user wishes to handle\nintersecting input constraints or not.\nThe desired version can  be selected through the instantation of the\nthird template parameter <I>Itag</I> which can be one of the\nfollowing&nbsp;:<BR>\n\n<I>CGAL::No_intersection_tag</I> if  intersections of\n input constraints are disallowed,<BR>\n\n<I>CGAL::Exact_predicates_tag</I> allows intersections between input\nconstraints\n and is to be used when the traits\nclass\nprovides exact predicates but approximate constructions of the\n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points.\n<I>CGAL::Exact_intersections_tag</I> allows intersections between input\nconstraints\n and is to be used in conjunction\nwith an exact arithmetic type.\n<P>\n\nThe template parameters <I>Tds</I> \nhas to be instantiate with a model of <I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>.\nThe geometric traits \nof a constrained Delaunay triangulation is required\nto provide the <I><A HREF=\"../Kernel_23_ref/Function_side_of_oriented_circle.html#Cross_link_anchor_261\">side_of_oriented_circle</A></I> test as the geometric traits\nof a Delaunay triangulation and the <I>Traits</I>\nparameter has \nto be instantiated with a model\n<I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I>.\nWhen <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of input constraints are supported, \nthe geometric traits class \nis required to provide additional function object  types\nto compute the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two segments.\nand  has then to be also a model of the concept\n<I><A HREF=\"Concept_ConstrainedTriangulationTraits_2.html#Cross_link_anchor_909\">ConstrainedTriangulationTraits_2</A></I>.\n<P>\n\nA constrained Delaunay triangulation is not a Delaunay\ntriangulation but it is a constrained triangulation.\nTherefore the class <I><A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I> derives from\nthe class <I><A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds&gt;</I>.\nAlso, information about the status (constrained or not)\nof the edges of the triangulation is stored\nin the faces. \nThus the nested <I>Face</I>\ntype of a constrained triangulation offers\nadditonnal functionalities to deal with this information.\nThese additional functionalities \ninduce additionnal requirements on the base face class\nplugged into the triangulation data structure of \n a constrained Delaunay triangulation.\nThe base face of a constrained Delaunay triangulation\nhas to be a model of the concept\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>.\n<P>\n\nC<SMALL>GAL</SMALL> provides a default for the template parameters.\nIf <I>Gt</I> is the geometric traits\nparameter,\nthe default  for\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>  is the class\n<I><A HREF=\"Class_Constrained_triangulation_face_base_2.html#Cross_link_anchor_914\">CGAL::Constrained_triangulation_face_base_2</A>&lt;Gt&gt;</I>\nand the default for the\ntriangulation data structure parameter is the class\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;                        <A HREF=\"Class_Triangulation_vertex_base_2.html#Cross_link_anchor_954\">CGAL::Triangulation_vertex_base_2</A>&lt;Gt&gt;, \t\t       <A HREF=\"Class_Constrained_triangulation_face_base_2.html#Cross_link_anchor_914\">CGAL::Constrained_triangulation_face_base_2</A>&lt;Gt&gt; &gt;</I>.\nThe default <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> tag is <I>CGAL::No_intersection_tag</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Constrained_Delaunay_triangulation_2.h\">CGAL/Constrained_Delaunay_triangulation_2.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3><I><A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I>\n<P>\n\n<H3>Types</H3>All types used in this class are inherited from the base class\n<I><A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I>.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt; cdt ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Traits t = Traits());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces an empty constrained Delaunay triangulation <I>cdt</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt; cdt ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A> cdt1);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor, all faces and vertices\nare duplicated and  the constrained status of edges\nis copied.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt; cdt ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    list&lt;Constrained&gt;&amp; lc,<BR>\n\nTraits t = Traits());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces a constrained triangulation, the constrained edges of which\nare the edges of the list <I>lc</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template&lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_Delaunay_triangulation_2.html#Cross_link_anchor_911\">Constrained_Delaunay_triangulation_2</A>&lt;Traits,Tds,Itag&gt; cdt ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\nTraits t=Traits());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A templated constructor which introduces and builds\n a constrained triangulation with constrained edges in the range \n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and <I>last</I>\n is <I>Constraint</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion and Removal</H3>\nThe following member functions overwrite the corresponding\nmembers of the base class to include a step restoring\n the Delaunay constrained\nproperty after modification of the triangulation.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_p+_Face_handle_f_=_Face_handle699;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.insert ( Point p,  Face_handle f = Face_handle())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts point <I>p</I> in the triangulation. \nIf present <I>f</I> is used as an hint\nfor the location of <I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point__p+_Locate_type__lt+_Face_handle_loc+_int_li_9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    cdt.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\n<A HREF=\"Enum_Triangulation_2-Traits-Tds---Locate_type#Enum_Locate_type\">Locate_type</A>&amp; lt,<BR>\n\nFace_handle loc,<BR>\n\nint li)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Same as above except that the location of the point\n<I>p</I>  to be inserted is assumed to be given by\n<I>(lt,loc,i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_push_back6const_Point__p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.push_back (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Equivalent to <I>insert(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_insert6InputIterator_first+_InputIterator_last9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.insert ( InputIterator first,  InputIterator last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the points in the range\n <MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>.\n Returns the number of inserted points.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and <I>last</I>\n is <I>Point</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_constraint6Point_a+_Point_b9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.insert_constraint ( Point a,  Point b)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts segment ab as a constrained edge in the triangulation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_push_back6const_Constraint__c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.push_back (  Constraint c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts constraints <I>c</I> as above.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_constraint6Vertex_handle_va+_Vertex_handle_vb9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    cdt.insert_constraint ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle va,<BR>\n\nVertex_handle vb)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the line segment whose endpoints are the vertices va and vb\nas a constrained  edge e in the triangulation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6Vertex_handle___v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.remove ( Vertex_handle &amp; v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Removes vertex v.<BR>\n\n<EM>Precondition: </EM>Vertex <I>v</I>  is not incident to a constrained edge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_incident_constraints6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.remove_incident_constraints ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Make the edges incident to vertex <I>v</I> unconstrained edges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_constraint6const_Face_handle___f+_int_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.remove_constraint (  Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Edge <I>(f,i)</I>  is no longer constrained.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Queries</H3>\nThe following template member functions query the\nset of faces in conflict with a point <I>p</I>.\nThe notion of conflict refers here to a \nconstrained Delaunay setting which means the following.\nConstrained edges are considered as visibility obstacles\nand a point <I>p</I> is considered to be \nin conflict with a face <I>f</I> iff it is \n visible from the interior of <I>f</I> and \nincluded in the circumcircle of <I>f</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItFaces, class OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6OutputItFaces+OutputItBoundaryEdges9_get_conflicts_and_boundary6const_Point__p+_OutputItFaces_fit+_OutputItBoundaryEdges_eit+_Face_handle_start9_const;\"></A>\nstd::pair&lt;OutputItFaces,OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    cdt.get_conflicts_and_boundary ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItFaces fit,<BR>\n\nOutputItBoundaryEdges eit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>OutItFaces</I> is an output iterator with <I>Face_handle</I> as value type.\n<I>OutItBoundaryEdges</I> stands for an output iterator with <I>Edge</I> as value type.\nThis members function outputs in the container pointed to by <I>fit</I>\nthe faces which are in conflict with point <I>p</I>.\nIt outputs in the container pointed to by <I>eit</I> \nthe boundary of the zone in conflict with <I>p</I>.\nThe boundary edges\nof the conflict  zone are ouput in counterclockwise order\nand each edge is described  through its incident face\nwhich is not in conflict with <I>p</I>.\nThe function returns in a std::pair the resulting output iterators.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItFaces&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputItFaces_get_conflicts_6const_Point__p+_OutputItFaces_fit+_Face_handle_start9_const;\"></A>\nOutputItFaces\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    cdt.get_conflicts ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItFaces fit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Same as above except that only the faces in conflict with <I>p</I>\nare output. The function returns the resulting output iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputItBoundaryEdges&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_OutputItBoundaryEdges_get_boundary_of_conflicts6const_Point__p+_OutputItBoundaryEdges_eit+_Face_handle_start9_const;\"></A>\nOutputItBoundaryEdges\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    cdt.get_boundary_of_conflicts ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nOutputItBoundaryEdges eit,<BR>\n\nFace_handle start)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>OutputItBoundaryEdges</I> stands for an output iterator with \n<I>Edge</I> as value\ntype.\n This functions  outputs in the container pointed to by <I>eit</I>,\nthe boundary of the zone in conflict with <I>p</I>. The boundary edges\nof the conflict  zone are ouput in counter-clockwise order\nand each edge is described  through the incident face\nwhich is not in conflict with <I>p</I>.\nThe function returns the resulting output iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Checking</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    cdt.is_valid ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Checks if the triangulation is valid and if each constrained edge is\n consistently marked constrained in its two incident faces.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Flips</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_flipable6Face_handle_f+_int_i9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.is_flipable ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Determines if edge <I>(f,i)</I> can be flipped. Returns true if\nedge <I>(f,i)</I> is not constrained and  the circle circumscribing f\ncontains  the vertex of <I>f-&gt;neighbor(i)</I>\n<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to edge <I>(f,i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_flip6Face_handle__f+_int_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.flip ( Face_handle&amp; f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Flip <I>f</I> and <I>f-&gt;neighbor(i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_propagating_flip6List_edges___edges9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cdt.propagating_flip ( List_edges &amp; edges)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Makes the triangulation constrained Delaunay by flipping edges. \nList edges contains an\ninitial list of edges to be flipped. The returned\ntriangulation is constrained Delaunay \nif the initial list contains at least all the edges of the\ninput triangulation that failed to be \nconstrained Delaunay. (An edge is said to be \nconstrained Delaunay if it is  either constrained or\nlocally Delaunay.)\n        </TD></TR>\n        </TABLE>\n\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_912\">CGAL::Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I><BR>\n\n<I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I><BR>\n\n<I><A HREF=\"Concept_DelaunayTriangulationTraits_2.html#Cross_link_anchor_918\">DelaunayTriangulationTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ConstrainedTriangulationTraits_2.html#Cross_link_anchor_909\">ConstrainedTriangulationTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ConstrainedDelaunayTriangulationTraits_2.html#Cross_link_anchor_907\">ConstrainedDelaunayTriangulationTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Constrained_triangulation_2.html\"><I>Constrained_triangulation_2&lt;Traits,Tds,Itag&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_32!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38615.0}