{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Sweep line 2 CurveInputIterator SweepLineTraits 2 DefinitionSweep line 2 is a utility class that calculates intersection points between given curves The following operationas are supported calculate the intersection points between the curves calculate the interior disjoint segments induced by C calculate the intersection points and return a list of curves participating at each intersection point query for the existance of an intersection point between any two curves The Sweep line 2 class is implemented in such a way that no assumptions are made regarding the given curves For example the curves may be overlapping or vertical There is also no assumtion that the curves are x monotone The Sweep line 2 is parametrized by two parameters The input iterator and the traits parameter The CurveInputIterator type value is equivalent to Traits Curve 2 include CGAL Sweep line 2 h Creation Sweep line 2 CurveInputIterator SweepLineTraits 2 sweepLine constructs an instance of the Sweep line 2 class Sweep line 2 CurveInputIterator SweepLineTraits 2 sweepLine SweepLineTraits 2 traits constructs an instance of the Sweep line 2 class Types Sweep line 2 CurveInputIterator SweepLineTraits 2 Traits traits class Sweep line 2 CurveInputIterator SweepLineTraits 2 Curve 2 a 2D curve as defined in the traits class Sweep line 2 CurveInputIterator SweepLineTraits 2 X monotone curve 2 an x monotone 2D curve as defined in the traits class Sweep line 2 CurveInputIterator SweepLineTraits 2 Point 2 a 2D point as defined in the traits class Query Functions template class OutpoutIterator void sweepLine get subcurves CurveInputIterator curves begin CurveInputIterator curves end OutpoutIterator subcurves bool overlapping false given a range of curves this method returns a container of interior disjoint curves that are the product of intersecting the specified curves The overlapping parameter is an input parameter and is relevant only in case there are overlapping curves in the input If this parameter is false default any overlapping subcurve is reported only once If the parameter is set to true the subcurve is reported as many times as it is overlapped OutpoutIterator value type is equvalent to Traits X monotone curve 2 template class OutpoutIterator void sweepLine get intersection points CurveInputIterator curves begin CurveInputIterator curves end OutpoutIterator points bool endpoints true bool overlapping false given a range of curves this method returns a list of all intersection points of the curves If endpoints is true default the end points of the curves are reported as intersection points Otherwise they are ommited The overlapping parameter is an input parameter and is relevant only in case there are overlapping curves in the input If this parameter is false default any overlapping subcurve is reported only once If the parameter is set to true the subcurve is reported as many times as it is overlapped The OutputIterator value type is equivalent to Traits Point 2 template class OutputIterator void sweepLine get intersecting curves CurveInputIterator curves begin CurveInputIterator curves end OutputIterator intersecting curves bool endpoints true given a range of curves this method calculates the intersection points between the curves It returns the list of intersection points and for each intersection point the list of curves intersecting at that point is given If endpoints is true default the end points of the curves are reported as intersection points Otherwise they are ommited The OutputIterator value type is equivalent to a pair of Point 2 and a container e g list vector of Curve 2 bool sweepLine do curves intersect CurveInputIterator curves begin CurveInputIterator curves end given a range of curves this method returns true if any two curves intersect false otherwise Next SweepLineTraits 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Sweep_line_2_ref/Class_Sweep_line_2.html", "title": "sweep_line_2&lt;curveinputiterator, sweeplinetraits_2&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Sweep_line_2_ref/Sweep_line.tex' -->\n<html> <head>  \n<title>Sweep_line_2&lt;CurveInputIterator, SweepLineTraits_2&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_850\"></A>\n\n<A NAME=\"Cross_link_anchor_851\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_834\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Sweep_line_2<CurveInputIterator, SweepLineTraits_2>\"></A>\n<h2><I>CGAL::Sweep_line_2&lt;CurveInputIterator, SweepLineTraits_2&gt;</I></h2>\n\n\n<A NAME=\"SL_sec:sl\"></A>\n<P>\n\n<H3>Definition</H3><I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> is a utility class that calculates \n    <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>\n    points between given curves. The following operationas are supported:\n<P>\n\n<UL>\n<LI>calculate the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points between the curves.\n<LI>calculate the interior-disjoint segments induced by <MATH><I>C</I></MATH>.\n<LI>calculate the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points and return a list of curves \nparticipating at each <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point.\n<LI>query for the existance of an <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point between any two curves.\n</UL>\n<P>\n\nThe <I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> class is implemented in such a way that no\nassumptions are made regarding the given curves. For example, the curves may\nbe overlapping or vertical. There is also no assumtion that the curves are\nx-monotone.\n<P>\n\nThe <I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> is parametrized by two parameters. The input \niterator and  the traits parameter. The \n<I>CurveInputIterator::type_value</I> is equivalent to \n<I>Traits::Curve_2</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Sweep_line_2.h\">CGAL/Sweep_line_2.h</A>&gt;</I>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt; sweepLine;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs an instance of the <I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> class.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt; sweepLine ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A> *traits);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs an instance of the <I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A></I> class.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    traits class.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt;::Curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a 2D curve as defined in the traits class.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt;::X_monotone_curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    an x-monotone 2D curve as defined in the traits class.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator, <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a 2D point as defined in the traits class.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Query Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutpoutIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_get_subcurves6CurveInputIterator_curves_begin+_CurveInputIterator_curves_end+_OutpoutIterator_subcurves+_bool_overlapping_=_false9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sweepLine.get_subcurves ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    CurveInputIterator curves_begin,<BR>\n\nCurveInputIterator curves_end,<BR>\n\nOutpoutIterator subcurves,<BR>\n\nbool overlapping = false)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    given a range of curves, this method returns a container of \ninterior-disjoint curves that are the product of intersecting \nthe specified curves.<BR>\n\nThe overlapping parameter is an input parameter and is relevant \nonly in case there are overlapping curves in the input. If this parameter \nis false (default), any overlapping subcurve is reported only once. If the \nparameter is set to true, the subcurve is reported as many times as it \nis overlapped.<BR>\n\n<I>OutpoutIterator::value_type</I> is equvalent to \n<I>Traits::X_monotone_curve_2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutpoutIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_get_intersection_points6CurveInputIterator_curves_begin+_CurveInputIterator_curves_end+_OutpoutIterator_points+_bool_endpoints_=_true+_bool_overlapping_=_false9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sweepLine.get_intersection_points ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    CurveInputIterator curves_begin,<BR>\n\nCurveInputIterator curves_end,<BR>\n\nOutpoutIterator points,<BR>\n\nbool endpoints = true,<BR>\n\nbool overlapping = false)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    given a range of curves, this method returns a list of all <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>\npoints of the curves.<BR>\n\nIf endpoints is true (default) the end points\nof the curves are reported as <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points. Otherwise they are \nommited.<BR>\n\nThe overlapping parameter is an input parameter and is relevant \nonly in case there are overlapping curves in the input. If this parameter \nis false (default), any overlapping subcurve is reported only once. If the \nparameter is set to true, the subcurve is reported as many times as it \nis overlapped.<BR>\n\nThe <I>OutputIterator::value_type</I> is equivalent to\n<I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_get_intersecting_curves6CurveInputIterator_curves_begin+_CurveInputIterator_curves_end+_OutputIterator_intersecting_curves+_bool_endpoints_=_true9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sweepLine.get_intersecting_curves ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    CurveInputIterator curves_begin,<BR>\n\nCurveInputIterator curves_end,<BR>\n\nOutputIterator intersecting_curves,<BR>\n\nbool endpoints = true)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    given a range of curves this method calculates the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points\nbetween the curves. It returns the list of <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points,\nand for each <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point the list of curves intersecting\nat that point is given.<BR>\n\nIf endpoints is true (default) the end points\nof the curves are reported as <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points. Otherwise they are \nommited.<BR>\n\nThe <I>OutputIterator::value_type</I> is equivalent to a pair of \n<I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> and a container (e.g., list, vector) of <I>Curve_2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_do_curves_intersect6CurveInputIterator_curves_begin+_CurveInputIterator_curves_end9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sweepLine.do_curves_intersect ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    CurveInputIterator curves_begin,<BR>\n\nCurveInputIterator curves_end)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    given a range of curves this method returns true if any two curves intersect,\nfalse otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_SweepLineTraits_2.html\"><I>SweepLineTraits_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_26!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39699.0}