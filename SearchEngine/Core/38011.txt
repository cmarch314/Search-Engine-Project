{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 532D Search Structures Matthias B sken 53 1 Introduction Geometric queries are fundamental to many applications in computational geometry The task is to maintain a dynamic set of geometric objects in such a way that certain queries can be performed efficiently Typical examples of queries are find out whether a given object is contained in the set find all objects of the set lying in a given area e g rectangle find the object closest to a given point or find the pair of objects in the set lying closest to each other Furthermore the set should be dynamic in the sense that deletions and insertions of objects can be performed efficiently In computational geometry literature one can find many different data structures for maintaining sets of geometric objects Most of them are data structures that have been developed to support a single very special kind of query operation Examples are Voronoi diagrams for answering nearest neighbor searches range trees for orthogonal range queries partition trees for more general range queries hierarchical triangulations for point location and segment trees for intersection queries In many applications different types of queries have to be performed on the same set of objects A naive approach to this problem would use a collection of the above mentioned data structures to represent the set of objects and delegate every query operation to the corresponding structure However this is completely impractical since it uses too much memory and requires the maintenance of all these data structures in the presence of update operations Data structures that are non optimal in theory seem to perform quite well in practice for many of these queries For example the Delaunay diagram turns out to be a very powerful data structure for storing dynamic sets of points under range and nearest neighbor queries A first implementation and computational study of using Delaunay diagrams for geometric queries is described by Mehlhorn and N her in MN In this section we present a generic variant of a two dimensional point set data type supporting various geometric queries The CGAL Point set 2 class in this section is inherited from the two dimensional CGAL Delaunay Triangulation data type The CGAL Point set 2 class depends on two template parameters T1 and T2 They are used as template parameters for the CGAL Delaunay triangulation 2 class CGAL Point set 2 is inherited from T1 is a model for the geometric traits and T2 is a model for the triangulation data structure that the Delaunay triangulation expects The CGAL Point set 2 class supports the following kinds of queries circular range search triangular range search isorectangular range search k nearest neighbor s For details about the running times see MN 53 2 Examples 53 2 1 Range search operations The following example program demonstrates the various range search operations of the two dimensional point set First we construct a two dimensional point set PSet and initialize it with a few points Then we perform circular triangular and isorectangular range search operations on the point set rs example C file examples Point set 2 rs example C include CGAL Cartesian h include list include CGAL Point set 2 h typedef CGAL Cartesian double K typedef CGAL Point set 2 K Vertex handle Vertex handle typedef CGAL Point 2 K Point int main CGAL Point set 2 K PSet std list Point Lr Point p1 12 14 Point p2 12 14 Point p3 2 11 Point p4 5 6 Point p5 6 7 3 8 Point p6 11 2 Point p7 5 6 Point p8 12 Point p9 4 31 Point p1 1 1 Lr push back p1 Lr push back p2 Lr push back p3 Lr push back p4 Lr push back p5 Lr push back p6 Lr push back p7 Lr push back p8 Lr push back p9 Lr push back p1 PSet insert Lr begin Lr end std cout circular range search n CGAL Circle 2 K rc p5 p6 std list Vertex handle LV PSet range search rc std back inserter LV std list Vertex handle const iterator it for it LV begin it LV end it std cout it point n std cout triangular range search n LV clear PSet range search p1 p2 p3 std back inserter LV for it LV begin it LV end it std cout it point n LV clear std cout isorectangular range search n Point pt1 p1 Point pt3 p3 Point pt2 Point pt3 x pt1 y Point pt4 Point pt1 x pt3 y PSet range search pt1 pt2 pt3 pt4 std back inserter LV for it LV begin it LV end it std cout it point n return Next chapter 2D Search Structures Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Point_set_2/Chapter_main.html", "title": "2d search structures", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Point_set_2/main.tex' -->\n<html> <head>  \n<title>2D Search Structures</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_53\"></a>\n  \n<h1>Chapter 53<BR>2D Search Structures</h1>\n\n<A NAME=\"chapterPoint_set_2\"></A>\n<EM>Matthias B&auml;sken</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>53.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nGeometric queries are fundamental to many applications in computational\ngeometry. The task is to maintain a dynamic set of geometric objects\nin such a way that certain queries can be performed efficiently.\nTypical examples of queries are:\nfind out whether a given object is contained in the set,\nfind all objects of the set lying in a given <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> (e.g. rectangle),\nfind the object closest to a given point or\nfind the pair of objects in the set lying closest to each other. \nFurthermore, the set should be dynamic in the sense that deletions and \ninsertions of objects can be performed efficiently.\n<P>\n\nIn computational geometry literature one can find many different data structures for\nmaintaining sets of geometric objects. Most of them are data structures \nthat have been developed to support a single very special kind of query \noperation.\nExamples are Voronoi diagrams for answering nearest neighbor\nsearches, range trees for orthogonal range queries, partition trees\nfor more general range queries, hierarchical triangulations for point\nlocation and segment trees for <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> queries ....\n<P>\n\nIn many applications, different types of queries have to be\nperformed on the same set of objects. A naive approach to this\nproblem would use a collection of the above mentioned data structures to\nrepresent the set of objects and delegate every query operation to\nthe corresponding structure.\nHowever, this is completely impractical since it uses too much\nmemory and requires the maintenance of all these data structures in the presence of\nupdate operations.\n<P>\n\nData structures that are non-optimal in theory seem to perform quite well in\npractice for many of these queries.\nFor example, the Delaunay diagram turns out to be a very powerful\ndata structure for storing dynamic sets of points under range and nearest\nneighbor queries. A first implementation and computational\nstudy of using Delaunay diagrams for geometric queries is described by\nMehlhorn and N&auml;her in &nbsp;[<A HREF=\"../biblio.html#Biblio_mn-lpcgc-00\">MN00</A>].\n<P>\n\nIn this section we present a generic variant of a two dimensional point set\ndata type supporting various geometric queries.\n<P>\n\nThe <I><A HREF=\"../Point_set_2_ref/Class_Point_set_2.html#Cross_link_anchor_1217\">CGAL::Point_set_2</A></I> class in this section is inherited\nfrom the two-dimensional CGAL <I>Delaunay Triangulation</I> data type.\n<P>\n\nThe <I><A HREF=\"../Point_set_2_ref/Class_Point_set_2.html#Cross_link_anchor_1217\">CGAL::Point_set_2</A></I> class depends on two template parameters T1 and T2.\nThey are used as template parameters for the <I><A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_919\">CGAL::Delaunay_triangulation_2</A></I>\nclass <I><A HREF=\"../Point_set_2_ref/Class_Point_set_2.html#Cross_link_anchor_1217\">CGAL::Point_set_2</A></I> is inherited from. T1 is a model for the\ngeometric traits and T2 is a model for the triangulation data structure that the Delaunay triangulation\nexpects.\n<P>\n\nThe <I><A HREF=\"../Point_set_2_ref/Class_Point_set_2.html#Cross_link_anchor_1217\">CGAL::Point_set_2</A></I> class supports the following kinds of queries:\n<UL>\n<LI>circular range search\n<LI>triangular range search\n<LI>isorectangular range search\n<LI>(k) nearest neighbor(s)\n</UL>\nFor details about the running times see &nbsp;[<A HREF=\"../biblio.html#Biblio_mn-lpcgc-00\">MN00</A>].\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>53.2&nbsp;&nbsp;&nbsp;Examples</h2>\n<P>\n\n<h3>53.2.1&nbsp;&nbsp;&nbsp;Range search operations</h3>\n<P>\n\nThe following example program demonstrates the various range search operations\nof the two dimensional point set.\nFirst we construct a two dimensional point set <MATH><I>PSet</I></MATH> and initialize it with a few points.\nThen we perform circular, triangular and isorectangular range search operations on the\npoint set.\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n<P>\n\n<B>rs_example.C :</B>\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Point_set_2/rs_example.C\n\n#include &lt;CGAL/Cartesian.h&gt;\n#include &lt;list&gt;\n#include &lt;CGAL/Point_set_2.h&gt;\n\ntypedef CGAL::Cartesian&lt;double&gt;     K;\n\ntypedef CGAL::Point_set_2&lt;K&gt;::Vertex_handle  Vertex_handle;\ntypedef CGAL::Point_2&lt;K&gt;                         Point;\n\nint main()\n{\n  CGAL::Point_set_2&lt;K&gt; PSet;\n  std::list&lt;Point&gt; Lr;\n  \n  Point p1(12,14);\n  Point p2(-12,14);  \n  Point p3(2,11);\n  Point p4(5,6);\n  Point p5(6.7,3.8);\n  Point p6(11,20);\n  Point p7(-5,6);  \n  Point p8(12,0);\n  Point p9(4,31);\n  Point p10(-10,-10); \n \n  Lr.push_back(p1); Lr.push_back(p2); Lr.push_back(p3);\n  Lr.push_back(p4); Lr.push_back(p5); Lr.push_back(p6);\n  Lr.push_back(p7); Lr.push_back(p8); Lr.push_back(p9);\n  Lr.push_back(p10); \n\n  PSet.insert(Lr.begin(),Lr.end()); \n\n  std::cout &lt;&lt; &quot;circular range search !\\n&quot;;  \n  CGAL::Circle_2&lt;K&gt; rc(p5,p6);\n\n  std::list&lt;Vertex_handle&gt; LV;\n  PSet.range_search(rc, std::back_inserter(LV));\n\n  std::list&lt;Vertex_handle&gt;::const_iterator it;\n  for (it=LV.begin();it != LV.end(); it++)\n     std::cout &lt;&lt; (*it)-&gt;point() &lt;&lt; &quot;\\n&quot;;      \n \n  std::cout &lt;&lt; &quot;triangular range search !\\n&quot;;    \n  \n  LV.clear();\n  PSet.range_search(p1,p2,p3, std::back_inserter(LV));\n  for (it=LV.begin();it != LV.end(); it++)\n     std::cout &lt;&lt; (*it)-&gt;point() &lt;&lt; &quot;\\n&quot;;    \n  LV.clear();\n \n  std::cout &lt;&lt; &quot;isorectangular range search !\\n&quot;;\n  Point pt1=p10; \n  Point pt3=p3; \n  Point pt2 = Point(pt3.x(),pt1.y());\n  Point pt4 = Point(pt1.x(),pt3.y());\n  \n  PSet.range_search(pt1,pt2,pt3,pt4, std::back_inserter(LV));\n  for (it=LV.begin();it != LV.end(); it++)\n    std::cout &lt;&lt; (*it)-&gt;point() &lt;&lt; &quot;\\n&quot;; \n  return 0;\n}\n</pre>\n<P>\n\n<!-- REMOVE_LINKS_END -->\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Point_set_2_ref/Chapter_intro.html\">2D Search Structures</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_53!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38011.0}