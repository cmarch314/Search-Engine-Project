{"text": "Informatics 41 Fall 2 9 David G Kay UC Irvine SAMPLE QUESTIONS Below are some questions of the sort that could appear on our final exam This is not a sample exam it s not the same length it doesn t have the same mix of questions it doesn t cover all the topics But these questions will help you review some important concepts and most of them have appeared on exams in the past Try to do them by yourself but then compare your answers with your classmates Do this long enough in advance that you ll have a chance to ask us if there are issues you can t resolve yourself a 1 Write a definition for the function vector list Hints Remember that vectors are zero based Be careful not to produce a reverse order list Use an auxiliary function vector list vector list Return a list containing the same elements as the vector argument in the same order vector list vector 1 2 3 returns list 1 2 3 a 2 Write a definition for the function list vector Hint You can do this without an auxiliary function and without vector set but you may use them if you need to list vector list vector Return a vector containing the same elements as the list argument in the same order list vector list 1 2 3 returns vector 1 2 3 b Consider the following function define DoSomething a b assume b cond b a else DoSomething sub1 a sub1 b b 1 What is returned by each of the following statements DoSomething 3 1 DoSomething 6 2 DoSomething 29 5 DoSomething 25 23 b 2 In one English word or in mathematical notation describe the value this function returns in terms of its arguments b 3 Now look at this function define DoSomethingElse a b assume b cond b a else sub1 DoSomethingElse a sub1 b Does DoSomethingElse produce the same results as DoSomething If not explain how the results differ b 4 Which of these routines are tail recursive DoSomething DoSomethingElse neither or both For any non tail recursive routine indicate by circling it which specific operation in its code makes it non tail recursive c A set is a collection of distinct objects i e without duplicates Suppose you have the following operations defined on sets empty set is a constant representing the empty set empty S returns true if the set S is empty and false otherwise element S E returns true if E is an element of the set S and false otherwise insert S E returns the set S if E is already in S or returns S with E added otherwise intersection S1 S2 returns a set containing only the elements that are in both S1 and S2 subtract S1 S2 returns a set containing the elements of S1 that are not in S2 union S1 S2 returns a set containing every element in either S1 or S2 without duplicates of course c 1 Using any of the above routines where appropriate but using no list processing functions define a Scheme function called ski trip that takes the following four sets as arguments friends the set of all your friends early risers the set of people you know perhaps including people who aren t your friends who will wake up early enough to get out on the slopes when the lifts open rowdy people the set of people who are likely to get too excited and wreck your cabin fun folks the set of people who really know how to party and returns the set of people you d like to invite on your ski trip over winter break all your friends who are early risers and fun folks but not rowdy people c 2 Assuming we implement sets as normal Scheme lists write a definition for the function union c 3 Using the operations map filter reduce and or for each and without using any explicit recursion write a definition for the function intersection Hint This can be quite short c 4 Write a definition for subtract and rewrite a definition for union using the operations map filter reduce and or for each and no explicit recursion d In the restaurants program a copy of which is provided define the following function that could be used at the top level of the program i e without knowing whether the collection is implemented as a list a BST a vector or whatever that means you have to call collection change increase price for cuisine collection number symbol collection The symbol is the name of a cuisine the number is a number of dollars to add to the price of each restaurant serving that cuisine Return the collection with those price changes e This one is tough towards the end probably tougher than would be on the test Anteater Airlines stores each of its scheduled flights in a structure with five fields origin the three letter airport code e g LAX departure the departure time destination a three letter airport code arrival the arrival time passengers a list of passengers each of whom is represented by a string e g Jane Jones e 1 Define the structure flight with the field names given above e 2 Complete the following definition for the predicate function valid flight which takes an expression and checks whether it appears to be a valid flight define valid flight lambda X and and like can take more than 2 arguments X is it a flight structure at all airport code valid flight origin X time valid X is the departure time valid airport code valid flight destination X time valid X is the arrival time valid list of strings flight passengers X e 3 Assume that you have already defined the variable airport code list which is a list of all the valid three letter airport abbreviations e g LAX SFO SNA Write a definition for the predicate function airport code valid which takes a symbol an atom and returns true if the symbol is contained in airport code list Hint You can do this without recursion if you use a function we defined in class and in the book e 4 The predefined predicate string takes a single argument and returns true t if and only if the argument is a string Write a definition for the predicate list of strings which takes a list and returns true if and only if every element of the list is a string or if the list is empty e 5 Define the predicate flight goes to which takes two arguments a flight structure and a symbol representing an airport code and returns true if the flight s destination matches that symbol e 6 Anteater Airlines stores all of its scheduled flights in a list of flight structures the same flight structure you defined in the previous problem Write a definition for the function first flight to which takes a flight list and a symbol representing an airport code and returns the first flight on the list whose destination matches that symbol or the null list if there s no match Use flight goes to as described above whether or not your definition was correct e 7 Write a definition for the function keep flights to which takes a flight list and a symbol representing an airport code and returns a list of flights containing only those flights in the original list whose destination matches that symbol e 8 To enhance security an anonymous air marshal will be assigned to every Anteater Airlines flight Write a definition of add marshals which takes a flight list and a code name and adds that code name at the beginning of the passenger list of each flight Hint First write a function to take a single flight and add the name then call that function from your definition of add marshals e 9 Write a definition for complete passengers list which takes a flight list and returns a list of strings containing all the passengers from all the flights on the list with no duplications You may assume that all the passengers on a single flight are unique e 1 5 points Write the function average passengers that takes a flight list and returns the average number of passengers on the flights on the flight list e 11 Rewrite average passengers to make it tail recursive If your answer for part a is already tail recursive just write I did this already and if you did it correctly you ll get full credit e 12 Anteater Airlines plans to merge with Aardvark Airlines to form a new airline AAAir Luckily and incredibly both airlines store their flights in a list of flight structures as described above Write the function merge flight lists which takes two flight lists and returns a flight list containing all the flights from both arguments except that when a flight from the first list matches a flight from the second list i e they have the same origin departure time destination and arrival time the merged list contains just one flight with the two matching flights passenger lists combined You may assume that you have already defined flights match which takes two flight structures and returns true if they match as described above and merge lists which takes two lists and returns a list that contains all the elements of both arguments You may also assume that the names on any single passenger list are unique and that within each of the original flight lists no flights match Hint Be careful and consistent about what types of data come into and go out of each function f Evaluate each of the following expressions That is what does the Scheme interpreter DrScheme in our case display when each of these expressions is executed f 1 15 4 4 4 f 2 55 5 12 f 3 1 cond 5 1 2 37 else 6 g 1 True or false The features and capabilities of Scheme make it the best choice for the great majority of programming tasks g 2 True or false A programmer with a knowledge of Java can be sure that his or her knowledge will be enough to sustain a productive and innovative 4 year career h Students in the course Applied Epistemology 1 1 are graded on two items a midterm and a final exam each of which has 1 points possible The midterm s weight 4 of the course grade the final is worth 6 Write the function AE1 1 score that takes two arguments a student s midterm score and final exam score and returns that student s overall weighted score in the class in the range to 1 Write two constant definitions for the weights a contract a brief purpose statement the Scheme function definition and two tests in the form of boolean expressions that should return true if the function works correctly i Complete the definition of the function between below between number number number boolean Return true if the first argument s value is between the second and the third inclusive Examples between 7 1 is true between 3 3 4 is true between 1 2 3 is false define between lambda value low high and j Complete the definition of item on list below item on list expression list boolean Return true if the expression occurs on the list define item on list lambda item L cond k A date is a structure make date month day year where month is a symbol Jan Feb and so on day is a number from 1 to 31 and year is a number from 1 to 3 k 1 Define the structure date with the field names given above k 2 Define a date object called TODAY with the appropriate values k 3 Complete the following definition for the predicate function valid date which takes an expression and checks whether it appears to be a valid date Use the functions you defined in the previous problems where necessary valid date anything boolean define MONTHLIST list Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec define valid date lambda D and D is it a date structure at all item on list D is the month valid date day D 1 31 is the day valid date year D is the year valid k 4 Define the predicate function all valid dates all valid dates list boolean Return true if all the items on the list are valid dates If the list is empty return true l Suppose you wish to write a spelling checker that takes a string of text as input and returns a list of the misspelled words in that string Because the input may contain white space and punctuation we will need to extract the words from the string where a word is a string of characters that are separated from the next word by white space or punctuation The precise characters that count as white space or punctuation we won t worry about here Define the function spell check which takes a string and returns a list of the words in the string that are misspelled more precisely words that don t occur in the dictionary of all correctly spelled words You should use each of the following in your definition first word a function that takes a string and returns the first word in that string rest of words a function that takes a string and returns a copy of that string with the first word removed string empty a function that takes a string and returns true if it s empty or if it contains only white space and punctuation DICTIONARY a long list of correctly spelled words where each word is a string spell check string list of strings Return a list of the words in the input string that aren t in the dictionary m In this problem you may not use the predefined functions member or list ref You may use other functions defined earlier in this exam and you may lose points if you re implement here something that was already described above m 1 Define the function position on list position on list any list of any number Return the place on the list where the first input occurs or zero if list is empty Examples position on list a a b c is 1 position on list 1 empty is position on list 3 2 3 4 is 2 m 2 Define the function item at position item at position number list of any any From the input list return the item specified by the input number or empty if out of range Examples item at position 3 a b c is c item at position 7 a b is empty item at position 3 4 is empty m 3 Define next on list You may wish to use the predefined function length which returns the number of items on a list Hint Use prior definitions not recursion next on list any list of any any Return the item on the input list that follows the first input or empty if none Examples next on list b a b c is c next on list c a b c is empty next on list x a b c is empty next on list a empty is empty m 4 Define next on circular list next on circular list expression list expression Like next on list but the item after the last on the list is the first item again Example next on circular list c a b c is a m 5 Define the function next month that uses the constant MONTHLIST see Problem k to take in a symbol Jan Feb representing a month and return the symbol for the following month next month symbol symbol Take a month name Jan Feb and return the name of the following month m 6 Define the function advance a month that takes a date see Problem k and returns that date moved one month into the future advance a month date date Advance the input date by one month on the same day m 7 Suppose you have a list of dates representing events on your calendar but you decide to take a month s skiing vacation in February You ll need to postpone all the events scheduled in February perhaps moving them one month later Generalize this to the function clear the month clear the month symbol list of dates list of dates Return the input list after advancing by one month every date whose month matches the input symbol m 8 Define this function days to start of month symbol number Return the number of days from January 1 to the start of the named month in non leap years Examples days to start of month Jan is days to start of month Feb is 31 define DAYSINMONTH 31 28 31 3 31 3 31 31 3 31 3 31 this will be useful m 9 Define this function days from jan1 date number Return number of days from January 1 of the same year to the specified date inclusive Examples days from jan1 make date Jan 3 2 5 3 days from jan1 make date Feb 1 2 5 32 n For each of the two sets of data shown below draw the binary search tree that results from inserting the items in the order shown Distinguish left branches clearly from right branches n 1a 13 19 22 7 17 1 2 n 1b Scheme Python Java Fortran C Basic n 2 For each of the trees above if you traverse the tree in order printing each node what is the result n 2a result of n 1a n 2b result of n 1b o Evaluate each of the following Scheme expressions o 1 local define make checker lambda threshold lambda n n threshold define a1 filter make checker 6 3 1 4 1 5 9 2 6 define a2 filter make checker 4 3 1 4 1 5 9 2 6 list a1 a2 o 2 local define make checker lambda comparison op threshold lambda n comparison op n threshold define b1 filter make checker 1 3 1 4 1 5 9 2 6 define b2 filter make checker 3 3 1 4 1 5 9 2 6 list b1 b2 p This problem involves the restaurant collection program For each part below indicate your answer by making any additions changes or deletions to the table of data shown in that part p 1 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result returned by the following code Show your results by making changes to the table above change values cross lines out add new lines as appropriate define Thai lambda R equal rrant cuisine R Thai collection remove C Thai p 2 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression collection remove C lambda R equal rrant cuisine R Japanese p 3 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression collection remove C lambda R or Thai R equal rrant cuisine R Japanese p 4 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression define raise price lambda R make rrant rrant name R rrant cuisine R rrant phone R rrant dish R 1 rrant price R collection change C Thai raise price p 5 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression collection remove collection change C Thai raise price raise price is defined above lambda R rrant price R 1 p 6 Suppose the collection C contains the information shown below Thai Dishes Thai 434 3434 Mee Krob 1 95 Jacopo s Pizzeria Pizza 343 3434 Goat Cheese Pizza 12 Mitsuki Japanese 232 5353 Edamame 4 5 Tommy Tang s Thai 454 4545 Paht Woon Sen 8 75 Thai Touch Thai 242 2424 Larb Guy 9 95 Kitayama Japanese 335 3535 Okonomiyaki 8 5 What is the result of the following expression collection change collection remove C lambda R rrant price R 9 lambda R or equal rrant cuisine R Pizza equal rrant cuisine R Thai lambda R make rrant rrant name R rrant cuisine R rrant phone R rrant dish R rrant price R 2 q Below are the definitions of five functions q 1 Write R next to each of the five routines below that is recursive q 2 Write T next to each of the five routines that is tail recursive Some routines may be both R and T some may be neither Consider each function independently of the others i e pay no attention to the other functions a given function calls define print stars A lambda N cond zero N newline else begin do these two things in the order shown print stars A N 1 print n 1 stars display print out a star define print stars B lambda N cond zero N newline else begin do these two things in the order shown display print out a star print stars B N 1 print n 1 stars define keep matches A lambda L X cond null L empty equal X first L cons first L keep matches A rest L X else keep matches A rest L X define keep matches B lambda L X keep matches help L X define keep matches B help lambda L X list so far cond null L list so far equal X first L keep matches B help rest L X cons first L list so far else keep matches B help rest L X list so far r Suppose we have a list called RL of restaurants with menus according to the usual definitions define struct rrant name cuisine phone menu where menu is a list of dishes define struct dish name price Define the following function name and phone serving dish listof rrant string listof name phone list Returns a list of the names and phone numbers of all the restaurants that serve the dish named in the second input Each name phone number pair should be in its own list for example Cobras and Matadors 343 3434 La Cote Basque 344 3334 s Below are definitions of map and filter define map f L define filter p L cond cond empty L empty empty L empty else cons f first L p first L map f rest L cons first L filter p rest L else filter p rest L s 1 Write a definition for the function process that abstracts both map and filter Hint You may find it useful to think about these two functions define always true x true and define no change x x s 2 Write new one line definitions for map and filter that call process t A nested list of items NL is either 1 empty 2 cons item NL or 3 cons NL NL Write a definition for the function deep unique as described below deep unique NL list of items Return a list of all the items that occur in the input no matter how deeply nested with no duplications Order of result doesn t matter Example deep unique 3 17 3 Huey Huey 17 returns 3 17 Huey You may assume that the predicate list is already defined to return true if its argument is a list and false otherwise David G Kay kay uci edu Wednesday November 23 2 5 8 4 AM", "_id": "http://www.ics.uci.edu/~kay/courses/i41/questions.html", "title": "sample questions", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Sunday, November 20, 2005 12:15 PM\" />\n<TITLE>Sample Questions</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2149A32\" />\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"final exam review\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Final exam details and review topics for Informatics 41, the first quarter of the Informatics Core Course in the Department of Informatics, Donald Bren School of Information and Computer Sciences, University of California, Irvine.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2004 by David G. Kay.  All rights reserved.\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P>\n  <FONT FACE=\"Goudy Old Style\">Informatics 41 * Fall 2009 * David G. Kay *\nUC Irvine</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\" SIZE=6><B>S<FONT SIZE=5>AMPLE </FONT>Q<FONT SIZE=5>UESTIONS</FONT></B></FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Below are some questions of the sort that could\nappear on our final exam.  This is not a sample exam--it&#39;s not the same\nlength, it doesn&#39;t have the same mix of questions, it doesn&#39;t cover\nall the topics.  But these questions will help you review some important\nconcepts and most of them have appeared on exams in the past.  Try to do\nthem by yourself, but then compare your answers with your classmates. Do\nthis long enough in advance that you&#39;ll have a chance to ask us if there\nare issues you can&#39;t resolve yourself.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.1)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">vector-&gt;list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hints:  Remember that vectors are zero-based.  Be careful not to produce\na reverse-order list.  Use an auxiliary function.)<A NAME=\"_14_808\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; vector-&gt;list: vector  -&gt;  list</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; Return a list containing the same elements\nas the vector argument, in the same order.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; (vector-&gt;list (vector 1 2 3) returns\n(list 1 2 3)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a.2)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">list-&gt;vector</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You can do this without an auxiliary function and without </FONT><FONT FACE=\"Courier New\">vector-set!</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nbut you may use them if you need to.)<A NAME=\"_14_1186\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; list-&gt;vector: list  -&gt;  vector</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; Return a vector containing the same elements\nas the list argument, in the same order.</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>; (list-&gt;vector (list 1 2 3) returns\n(vector 1 2 3)</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B>  Consider the following function:<A NAME=\"_14_1419\"></A></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define (DoSomething a b)  ; assume b &gt;=\n0</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   ((= b 0) a)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   (else (DoSomething (sub1 a) (sub1\nb)))))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.1)</B> What is returned by each of the\nfollowing statements?</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 3 1</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 6 2)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 29 5)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (DoSomething 25000 23000)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.2)</B> In one English word (or in mathematical\nnotation), describe the value this function returns in terms of its arguments.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.3)</B>  Now look at this function:<A NAME=\"_14_1878\"></A></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define (DoSomethingElse a b)  ; assume\nb &gt;= 0</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   ((= b 0) a)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;   (else (sub1 (DoSomethingElse a\n(sub1 b))))))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Does </FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nproduce the same results as </FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>?\n If not, explain how the results differ.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b.4)</B>  Which of these routines are\ntail recursive--</FONT><FONT FACE=\"Courier New\">DoSomething</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">DoSomethingElse</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nneither, or both?  For any non-tail-recursive routine, indicate (by circling\nit) which specific operation in its code makes it non-tail-recursive.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c)</B>  A set is a collection of distinct\nobjects (i.e., without duplicates).  Suppose you have the following operations\ndefined on sets:\n<BR />\n</FONT><FONT FACE=\"Courier New\">empty-set</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a constant representing the empty set.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(empty? S)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns true if the set S is empty and false otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(element? S E)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns true if E is an element of the set S, and false otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(insert S E)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns the set S if E is already in S, or returns S with E added otherwise.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(intersection S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing only the elements that are in both S1 and S2.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(subtract S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing the elements of S1 that are not in S2.\n<BR />\n</FONT><FONT FACE=\"Courier New\">(union S1 S2)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nreturns a set containing every element in either S1 or S2 (without  &#160;\nduplicates, of course).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.1)</B>  Using any of the above routines\nwhere appropriate, but using no list processing functions, define a Scheme\nfunction called </FONT><FONT FACE=\"Courier New\">ski-trip</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes the following four sets as arguments</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">friends</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of all your friends;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">early-risers</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people you know (perhaps including people who aren&#39;t your\nfriends) who will wake up early enough to get out on the slopes when the\nlifts open;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">rowdy-people</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people who are likely to get too excited and wreck your cabin;</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>* &#160; </FONT><FONT FACE=\"Courier New\">fun-folks</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nthe set of people who really know how to party</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>and returns the set of people you&#39;d like\nto invite on your ski trip over winter break:  all your friends who are\nearly risers and fun folks, but not rowdy people.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.2)</B>  Assuming we implement sets as\nnormal Scheme lists, write a definition for the function </FONT><FONT FACE=\"Courier New\">union</FONT><FONT FACE=\"AGaramond\" SIZE=4>.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.3)</B>  Using the operations </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">reduce</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand/or </FONT><FONT FACE=\"Courier New\">for-each</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand without using any explicit recursion, write a definition for the function\n</FONT><FONT FACE=\"Courier New\">intersection</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  This can be quite short.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c.4)</B>  Write a definition for </FONT><FONT FACE=\"Courier New\">subtract</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand rewrite a definition for </FONT><FONT FACE=\"Courier New\">union</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nusing the operations </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">reduce</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand/or </FONT><FONT FACE=\"Courier New\">for-each</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand no explicit recursion.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(d)</B>  In the <A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.scm\">restaurants program</A>\n(a copy of which is provided), define the following function that could\nbe used at the top level of the program (i.e., without knowing whether the\ncollection is implemented as a list, a BST, a vector, or whatever; that\nmeans you have to call </FONT><FONT FACE=\"Courier New\">collection-change</FONT><FONT FACE=\"AGaramond\" SIZE=4>).<A NAME=\"_14_4777\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>;; increase-price-for-cuisine: collection\nnumber symbol -&gt; collection\n<BR />\n;; The symbol is the name of a cuisine; the number is a number of dollars\n<BR />\n;; to add to the price of each restaurant serving that cuisine.  Return\nthe\n<BR />\n;; collection with those price changes.</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e)</B>  [This one is tough towards the\nend, probably tougher than would be on the test.]\n<BR />\nAnteater Airlines stores each of its scheduled flights in a structure with\nfive fields:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>origin (the three-letter airport code, e.g..\n</FONT><FONT FACE=\"Courier New\">&#39;LAX</FONT><FONT FACE=\"AGaramond\" SIZE=4>)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>departure (the departure time)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>destination (a three-letter airport code)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>arrival (the arrival time)</FONT></LI>\n<BR />\n<LI>\n<FONT FACE=\"AGaramond\" SIZE=4>passengers (a list of passengers, each of\nwhom is represented by a string, e.g.,</FONT><FONT FACE=\"Courier New\"> &quot;Jane\nJones&quot;</FONT><FONT FACE=\"AGaramond\" SIZE=4>)</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.1)</B>  Define the structure </FONT><FONT FACE=\"Courier New\">flight</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the field names given above.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.2)</B>  Complete the following definition\nfor the predicate function </FONT><FONT FACE=\"Courier New\">valid-flight?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes an expression and checks whether it appears to be a valid flight.\n <A NAME=\"_14_5749\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define valid-flight?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160; &#160; (lambda (X)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and              \n                ; and, like +, can take more than 2 arguments</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\nX)           ; is it a flight structure at all?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (airport-code-valid?\n(flight-origin X))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (time-valid?\n(________________ X)) ; is the departure time valid?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (airport-code-valid?\n(flight-destination X))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (time-valid?\n(________________ X)) ; is the arrival time valid?  </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (list-of-strings?\n(flight-passengers X))))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.3)</B>  Assume that you have already\ndefined the variable </FONT><FONT FACE=\"Courier New\">airport-code-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich is a list of all the valid three-letter airport abbreviations (e.g.,\nLAX, SFO, SNA).  Write a definition for the predicate function </FONT><FONT FACE=\"Courier New\">airport-code-valid?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a symbol (an atom) and returns true if the symbol is contained\nin </FONT><FONT FACE=\"Courier New\">airport-code-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You can do this without recursion if you use a function we defined\nin class and in the book.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.4)</B>  The predefined predicate </FONT><FONT FACE=\"Courier New\">string?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\ntakes a single argument and returns true (</FONT><FONT FACE=\"Courier New\">#t</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\nif and only if the argument is a string.  Write a definition for the predicate\n</FONT><FONT FACE=\"Courier New\">list-of-strings?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a list and returns true if and only if every element of the\nlist is a string (or if the list is empty).</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.5)</B>  Define the predicate </FONT><FONT FACE=\"Courier New\">flight-goes-to?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two arguments, a flight structure and a symbol (representing\nan airport code), and returns true if the flight&#39;s destination matches\nthat symbol.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.6)  </B>Anteater Airlines stores all\nof its scheduled flights in a list of flight structures--the same flight\nstructure you defined in the previous problem. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write a definition for the function </FONT><FONT FACE=\"Courier New\">first-flight-to</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a symbol (representing an airport code) and\nreturns the first flight on the list whose destination matches that symbol\n(or the null list if there&#39;s no match).  Use </FONT><FONT FACE=\"Courier New\">flight-goes-to?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nas described above, whether or not your definition was correct.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.7)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">keep-flights-to</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a symbol (representing an airport code) and\nreturns a list of flights containing only those flights in the original\nlist whose destination matches that symbol.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.8)</B>  To enhance security, an anonymous\nair marshal will be assigned to every Anteater Airlines flight.  Write a\ndefinition of </FONT><FONT FACE=\"Courier New\">add-marshals</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and a code name and adds that code name at the\nbeginning of the passenger list of each flight.  (Hint:  First write a function\nto take a single flight and add the name; then call that function from your\ndefinition of </FONT><FONT FACE=\"Courier New\">add-marshals</FONT><FONT FACE=\"AGaramond\" SIZE=4>.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.9)</B>  Write a definition for </FONT><FONT FACE=\"Courier New\">complete-passengers-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a flight list and returns a list of strings containing all the\npassengers from all the flights on the list, with no duplications.  (You\nmay assume that all the passengers on a single flight are unique.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.10)</B>  (5 points)  Write the function\n</FONT><FONT FACE=\"Courier New\">average-passengers</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes a flight list and returns the average number of passengers on\nthe flights on the flight list. </FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.11)</B>  Rewrite average-passengers\nto make it tail-recursive.  (If your answer for part <B>(a)</B> is already\ntail-recursive, just write &quot;I did this already,&quot; and if you did\nit correctly, you&#39;ll get full credit.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e.12)  </B>Anteater Airlines plans to\nmerge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and\nincredibly), both airlines store their flights in a list of flight structures\nas described above.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">merge-flight-lists</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two flight lists and returns a flight list containing all the\nflights from both arguments, except that when a flight from the first list\nmatches a flight from the second list (i.e., they have the same origin,\ndeparture time, destination, and arrival time), the merged list contains\njust one flight with the two matching flights&#39; passenger lists combined.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You may assume that you have already defined\n</FONT><FONT FACE=\"Courier New\">flights-match?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two flight structures and returns true if they match as described\nabove, and </FONT><FONT FACE=\"Courier New\">merge-lists</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes two lists and returns a list that contains all the elements\nof both arguments.  You may also assume that the names on any single passenger\nlist are unique and that within each of the original flight lists, no flights\nmatch.  (Hint:  Be careful and consistent about what types of data come\ninto and go out of each function.)</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f)  </B>Evaluate each of the following\nexpressions.  That is, what does the Scheme interpreter (DrScheme in our\ncase) display when each of these expressions is executed? </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.1)</B> </FONT><FONT FACE=\"Courier New\">(*\n(- 15 4) (/ 40 4))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.2)</B> </FONT><FONT FACE=\"Courier New\">(&gt;\n(/ 55 5) 12)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f.3)</B> </FONT><FONT FACE=\"Courier New\">(+\n100\n<BR />\n&#160;&#160;  &#160;  (cond\n<BR />\n&#160;&#160;  &#160;    ((&gt;= 5 (/ 10 2)) 37)\n<BR />\n&#160;&#160;  &#160;    (else 6)))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(g.1)</B>  True or false:  The features\nand capabilities of Scheme make it the best choice for the great majority\nof programming tasks. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(g.2)</B>  True or false:  A programmer\nwith a knowledge of Java can be sure that his or her knowledge will be enough\nto sustain a productive and innovative 40-year career. </FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(h)  </B>Students in the course Applied\nEpistemology 101 are graded on two items, a midterm and a final exam, each\nof which has 100 points possible.  The midterm&#39;s weight 40% of the course\ngrade; the final is worth 60%.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write the function </FONT><FONT FACE=\"Courier New\">AE101-score</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes two arguments--a student&#39;s midterm score and final exam score--and\nreturns that student&#39;s overall weighted score in the class (in the range\n0 to 100).  Write two constant definitions for the weights, a contract,\na brief purpose statement, the Scheme function definition, and two tests\nin the form of boolean expressions that should return true if the function\nworks correctly.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i)  </B>Complete the definition of the\nfunction </FONT><FONT FACE=\"Courier New\">between?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nbelow.<A NAME=\"_14_11664\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; between?:  number number number -&gt;\nboolean\n<BR />\n;; Return true if the first argument&#39;s value is between the second and\nthe third, inclusive\n<BR />\n;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between\n1 2 3) is false</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define between?   </TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n                 <A NAME=\"_14_11946\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (value low high)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(j)  </B>Complete the definition of </FONT><FONT FACE=\"Courier New\">item-on-list?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nbelow.  <A NAME=\"_14_12067\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; item-on-list?:  expression list -&gt;\nboolean\n<BR />\n;; Return true if the expression occurs on the list</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define item-on-list?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (item L)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (cond</TT></FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k)  </B>A </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a structure </FONT><FONT FACE=\"Courier New\">(make-date month day year)</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhere </FONT><FONT FACE=\"Courier New\">month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a symbol (</FONT><FONT FACE=\"Courier New\">&#39;Jan</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;Feb</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand so on), </FONT><FONT FACE=\"Courier New\">day</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a number from 1 to 31, and </FONT><FONT FACE=\"Courier New\">year</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis a number from 1000 to 3000.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.1)</B>  Define the structure </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the field names given above.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.2)</B> Define a </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nobject called </FONT><FONT FACE=\"Courier New\">TODAY</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nwith the appropriate values.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.3)</B>  Complete the following definition\nfor the predicate function </FONT><FONT FACE=\"Courier New\">valid-date?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes an expression and checks whether it appears to be a valid </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n Use the functions you defined in the previous problems where necessary.<A NAME=\"_14_12864\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; valid-date<A NAME=\"_14_12882\"></A>?:\n anything -&gt; boolean</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define MONTHLIST (list &#39;Jan &#39;Feb\n&#39;Mar &#39;Apr &#39;May &#39;Jun &#39;Jul &#39;Aug &#39;Sep &#39;Oct\n&#39;Nov &#39;Dec))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define valid-date<A NAME=\"_14_13013\"></A>?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (lambda (D)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (and    </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\nD)                             ; is it a date<A NAME=\"_14_13108\"></A> structure\nat all?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (item-on-list?\n(________________ D)________________)        ; is the month valid?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\n(date<A NAME=\"_14_13241\"></A>-day D) 1 31)</TT></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n                                                    <A NAME=\"_14_13315\"></A></FONT><FONT FACE=\"Courier\" SIZE=2><TT>;\nis the day valid?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160; (________________\n(date<A NAME=\"_14_13369\"></A>-year D) ________  ________))))      ; is the\nyear valid?</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(k.4)</B>  Define the predicate function\n</FONT><FONT FACE=\"Courier New\">all-valid-dates?</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_13498\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; all-valid-date<A NAME=\"_14_13519\"></A>s?:\n list -&gt; boolean\n<BR />\n;; Return true if all the items on the list are valid date<A NAME=\"_14_13603\"></A>s.\n If the list is empty, return true.</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(l)  </B>Suppose you wish to write a spelling\nchecker that takes a string of text as input and returns a list of the misspelled\nwords in that string.  Because the input may contain white space and punctuation,\nwe will need to extract the words from the string, where a word is a string\nof characters that are separated from the next word by white space or punctuation.\n (The precise characters that count as white space or punctuation we won&#39;t\nworry about here.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Define the function </FONT><FONT FACE=\"Courier New\">spell-check</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich takes a string and returns a list of the words in the string that\nare misspelled (more precisely, words that don&#39;t occur in the dictionary\nof all correctly spelled words).  You should use each of the following in\nyour definition:\n<BR />\n* </FONT><FONT FACE=\"Courier New\">first-word</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns the first word in that string\n<BR />\n* </FONT><FONT FACE=\"Courier New\">rest-of-words</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns a copy of that string with the\nfirst word removed\n<BR />\n* </FONT><FONT FACE=\"Courier New\">string-empty?</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na function that takes a string and returns true if it&#39;s empty or if\nit contains only white space and punctuation\n<BR />\n* </FONT><FONT FACE=\"Courier New\">DICTIONARY</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\na (long) list of correctly spelled words, where each word is a string.<A NAME=\"_14_14822\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; spell-check: string -&gt; list-of-strings\n<BR />\n;; Return a list of the words in the input string that aren&#39;t in the\ndictionary.</TT></FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m)  </B>In this problem you may not use\nthe predefined functions </FONT><FONT FACE=\"Courier New\">member</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nor </FONT><FONT FACE=\"Courier New\">list-ref</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n You may use other functions defined earlier in this exam (and you may lose\npoints if you re-implement here something that was already described above).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.1)</B>  Define the function </FONT><FONT FACE=\"Courier New\">position-on-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_15267\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; position-on-list: any list-of-any -&gt;\nnumber\n<BR />\n;; Return the place on the list where the first input occurs, or zero if\nlist is empty\n<BR />\n;; Examples:  (position-on-list &#39;a &#39;(a b c)) is 1; (position-on-list\n1 empty) is 0;\n<BR />\n;;            (position-on-list 3 &#39;(2 3 4)) is 2</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.2)</B>  Define the function </FONT><FONT FACE=\"Courier New\">item-at-position</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_15605\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; item-at-position: number list-of-any\n-&gt; any\n<BR />\n;; From the input list, return the item specified by the input number, or\nempty if out of range\n<BR />\n;; Examples:  (item-at-position 3 &#39;(a b c)) is c; (item-at-position\n7 &#39;(a b)) is empty; \n<BR />\n;;            (item-at-position 0 &#39;(3 4)) is empty</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.3)</B>  Define </FONT><FONT FACE=\"Courier New\">next-on-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n You may wish to use the predefined function </FONT><FONT FACE=\"Courier New\">length</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich returns the number of items on a list.  [Hint:  Use prior definitions,\nnot recursion.]<A NAME=\"_14_16091\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-on-list: any list-of-any -&gt; any\n<BR />\n;; Return the item on the input list that follows the first input, or empty\nif none\n<BR />\n;; Examples:  (next-on-list &#39;b &#39;(a b c)) is c; (next-on-list &#39;c\n(a b c)) is empty;\n<BR />\n;;            (next-on-list &#39;x &#39;(a b c)) is empty; (next-on-list\n&#39;a empty) is empty</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.4)</B>  Define </FONT><FONT FACE=\"Courier New\">next-on-circular-list</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_16439\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-on-circular-list: expression list\n-&gt; expression\n<BR />\n;; Like next-on-list, but the item after the last on the list is the first\nitem again\n<BR />\n;; Example:  (next-on-circular-list &#39;c &#39;(a b c)) is a.</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.5)</B>  Define the function </FONT><FONT FACE=\"Courier New\">next-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat uses the constant </FONT><FONT FACE=\"Courier New\">MONTHLIST</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n(see Problem <B>(k)</B>) to take in a symbol (</FONT><FONT FACE=\"Courier New\">&#39;Jan</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">&#39;Feb</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n...) representing a month and return the symbol for the following month.<A NAME=\"_14_16871\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; next-month:  symbol -&gt; symbol\n<BR />\n;; Take a month name (&#39;Jan, &#39;Feb, ...) and return the name of the\nfollowing month.</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.6)</B>  Define the function </FONT><FONT FACE=\"Courier New\">advance-a-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat takes a </FONT><FONT FACE=\"Courier New\">date</FONT><FONT FACE=\"AGaramond\" SIZE=4>\n(see Problem <B>(k)</B>) and returns that date moved one month into the\nfuture.<A NAME=\"_14_17153\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; advance-a-month: date -&gt; date\n<BR />\n;; Advance the input date by one month (on the same day)</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.7)</B>  Suppose you have a list of dates\nrepresenting events on your calendar, but you decide to take a month&#39;s\nskiing vacation in February.  You&#39;ll need to postpone all the events\nscheduled in February, perhaps moving them one month later.  Generalize\nthis to the function </FONT><FONT FACE=\"Courier New\">clear-the-month</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_17552\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; clear-the-month: symbol list-of-dates\n-&gt; list-of-dates\n<BR />\n;; Return the input list after advancing by one month \n<BR />\n;; every date whose month matches the input symbol.</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.8)</B>   Define this function:<A NAME=\"_14_17760\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; days-to-start-of-month: symbol\n-&gt; number\n<BR />\n;; Return the number of days from January 1 to the start of the named month\nin non-leap years\n<BR />\n;; Examples:  (days-to-start-of-month &#39;Jan) is 0; (days-to-start-of-month\n&#39;Feb) is 31\n<BR />\n(define DAYSINMONTH  &#39;(31 28 31 30 31 30 31 31 30 31 30 31)) ; this\nwill be useful</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(m.9)</B></FONT><FONT FACE=\"Goudy Old Style\">\n </FONT><FONT FACE=\"AGaramond\" SIZE=4>Define this function:<A NAME=\"_14_18115\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>;; days-from-jan1: date -&gt; number\n<BR />\n;; Return number of days from January 1 of the same year to the specified\ndate, inclusive\n<BR />\n;; Examples: (days-from-jan1 (make-date &#39;Jan 3 2005)) = 3; (days-from-jan1\n(make-date &#39;Feb 1 2005)) = 32</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n)</B></FONT><FONT FACE=\"Goudy Old Style\"><B>\n</B></FONT><FONT FACE=\"AGaramond\" SIZE=4>  For each of the two sets of data\nshown below, draw the binary search tree that results from inserting the\nitems in the order shown.  Distinguish left branches clearly from right\nbranches.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.1a)</B> </FONT><FONT FACE=\"Courier New\">\n(13 19 22 7 17 10 2) &#160; </FONT><FONT FACE=\"AGaramond\" SIZE=4><B>(n.1b)</B>\n </FONT><FONT FACE=\"Courier New\">(Scheme Python Java Fortran C Basic)<A NAME=\"_14_18651\"></A></FONT></P>\n<P>\n<FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">&#160;           \n               &#160;             </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.2) </B> For each of the trees above,\nif you traverse the tree in order, printing each node, what is the result?</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(n.2a) </B>[result of <B>(n.1a)</B>]<A NAME=\"_14_18846\"></A></FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n&#160; </FONT><FONT FACE=\"AGaramond\" SIZE=4><B>(n.2b)</B> [result of <B>(n.1b)</B>]</FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o)  </B>Evaluate each of the following\nScheme expressions:</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o.1)<A NAME=\"_14_18988\"></A></B></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(local &#160;  &#160; ((define make-checker\n</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n(lambda (threshold)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (lambda (n) (&lt; n threshold))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  (define\na1 (filter (make-checker 6) &#39;(3 1 4 1 5 9 2 6)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  (define\na2 (filter (make-checker 4) &#39;(3 1 4 1 5 9 2 6))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (list a1 a2))</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(o.2)</B> <A NAME=\"_14_19237\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(local &#160;  &#160; ((define make-checker</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n(lambda (comparison-op threshold)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160; (lambda (n) (comparison-op n threshold))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  (define\nb1 (filter (make-checker = 1) &#39;(3 1 4 1 5 9 2 6)))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  (define\nb2 (filter (make-checker &gt;= 3) &#39;(3 1 4 1 5 9 2 6))))</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (list b1 b2))</FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p)</B>  This problem involves the <A HREF=\"http://www.ics.uci.edu/~kay/scheme/restaurants2.scm\">restaurant collection program</A>.\n For each part below, indicate your answer by making any additions, changes,\nor deletions to the table of data shown in that part.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.1)</B> Suppose the collection C contains\nthe information shown below.<A NAME=\"_14_19756\"></A></FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result returned by the following\ncode?  (Show your results by making changes to the table above--change values,\ncross lines out, add new lines, as appropriate.)<A NAME=\"_14_20205\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(define Thai? &#160;  &#160;  &#160;\n &#160;  &#160; \n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (equal? (rrant-<A NAME=\"_14_20262\"></A>cuisine R) &#39;Thai)))</TT></FONT><p></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C Thai?) </TT></FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.2)</B> Suppose the collection C contains\nthe information shown below.</FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?\n<A NAME=\"_14_20719\"></A></FONT><p></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C (lambda (R) (equal?\n(rrant-<A NAME=\"_14_20772\"></A>cuisine R) &#39;Japanese)))</TT></FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.3)</B> Suppose the collection C contains\nthe information shown below.</FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_21199\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove C \n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (or (Thai? R) (equal? (rrant-<A NAME=\"_14_21273\"></A>cuisine\nR) &#39;Japanese))))</TT></FONT><p></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.4)</B> Suppose the collection C contains\nthe information shown below.</FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n<BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_21706\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(define raise-price\n<BR />\n&#160;&#160; (lambda (R)\n<BR />\n&#160;&#160;  &#160; (make-rrant<A NAME=\"_14_21760\"></A> (rrant-<A NAME=\"_14_21774\"></A>name\nR) (rrant-cuisine<A NAME=\"_14_21802\"></A> R) (rrant-<A NAME=\"_14_21819\"></A>phone\nR)\n<BR />\n&#160;&#160;  &#160;  &#160;  &#160;  &#160;    (rrant-<A NAME=\"_14_21849\"></A>dish\nR) (+ 1.00 (rrant-<A NAME=\"_14_21878\"></A>price R)))))</TT></FONT><p></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-change C Thai? raise-price)</TT></FONT></P>\n<BR /><BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.5)</B> Suppose the collection C contains\nthe information shown below.</FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n&#160;</TD>\n<TD WIDTH=20% VALIGN=TOP>\n<BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_22341\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier\" SIZE=2><TT>(collection-remove (collection-change\nC Thai? raise-price) ; raise-price is defined above\n<BR />\n&#160;&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  (lambda (R) (&gt;\n(rrant-<A NAME=\"_14_22468\"></A>price R) 10.00)))</TT></FONT><p></P>\n<BR /><BR /><BR /><BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(p.6)</B> Suppose the collection C contains\nthe information shown below.</FONT>\n</p><TABLE WIDTH=107% CELLPADDING=1>\n<COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% /><COL WIDTH=20% />\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Dishes</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>434-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mee Krob</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>10.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Jacopo&#39;s Pizzeria</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>343-3434</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Goat Cheese Pizza</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>12.00</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Mitsuki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>232-5353</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Edamame</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>4.50</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Tommy Tang&#39;s</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>454-4545</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Paht Woon Sen</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.75</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai Touch</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Thai</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>242-2424</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Larb Guy</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>9.95</FONT><BR /></TD>\n</TR>\n<TR>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Kitayama</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Japanese</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>335-3535</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>Okonomiyaki</FONT></TD>\n<TD WIDTH=20% VALIGN=TOP>\n<FONT FACE=\"AGaramond\" SIZE=4>8.50</FONT><BR /></TD>\n</TR>\n</TABLE>\n<BR />\n<FONT FACE=\"AGaramond\" SIZE=4>What is the result of the following expression?<A NAME=\"_14_22894\"></A></FONT><p></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(collection-change </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (collection-remove C (lambda\n(R) (&lt; (rrant<A NAME=\"_14_22961\"></A>-price R) 9.00))) &#160; \n<BR />\n&#160;&#160; (lambda (R) (or (equal? (rrant<A NAME=\"_14_23013\"></A>-cuisine\nR) &#39;Pizza) &#160; (equal? (rrant-cuisine R) &#39;Thai))) &#160; (lambda\n(R) (make-rrant<A NAME=\"_14_23093\"></A> (rrant-name R) (rrant-cuisine R)\n(rrant-phone R) &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; \n&#160;  &#160;  &#160;  &#160; (rrant<A NAME=\"_14_23161\"></A>-dish R) (-\n(rrant-price R) 2.00))))</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q)  </B>Below are the definitions of five\nfunctions.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q.1)</B>  Write &quot;R&quot; next to\neach of the five routines below that is recursive.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(q.2)</B>  Write &quot;T&quot; next to\neach of the five routines that is tail-recursive.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Some routines may be both &quot;R&quot; and\n&quot;T&quot;; some may be neither.  Consider each function independently\nof the others (i.e., pay no attention to the other functions a given function\ncalls).<A NAME=\"_14_23600\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define print-stars-A   </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (N)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(zero? N)\n(newline)]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [else (begin\n       &#160;  &#160;           ; do these two things, in the order shown:</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (print-stars-A (- N 1))     ; print n-1 stars</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (display &quot;*&quot;))])))          ; print out a star</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define print-stars-B   </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (N)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(zero? N)\n(newline)]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [else (begin\n &#160;  &#160;  &#160;             &#160; ; do these two things, in the\norder shown:</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (display &quot;*&quot;) &#160;  &#160;  &#160;  &#160; \n&#160;  &#160;  &#160;  &#160;  &#160; ; print out a star </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (print-stars-B (- N 1)))]))) &#160;  &#160; ; print n-1\nstars</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-A   </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (L X)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(null? L)\nempty]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(equal? X\n(first L)) (cons (first L) (keep-matches-A (rest L) X))]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [else (keep-matches-A\n(rest L) X)])))</FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-B   </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (L X)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (keep-matches-help\nL X '()))) &#160; </FONT></P>\n<BR /><BR />\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>(define keep-matches-B-help  </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160; (lambda (L X list-so-far)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160; (cond</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(null? L)\nlist-so-far]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [(equal? X\n(first L)) (keep-matches-B-help (rest L) </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; X </FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (cons (first L) list-so-far))]</FONT></P>\n<P>\n<FONT FACE=\"Courier New\" SIZE=2>&#160;&#160;  &#160;  &#160; [else (keep-matches-B-help\n(rest L) X list-so-far)]))) </FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(r) </B>Suppose we have a list called RL\nof restaurants with menus, according to the usual definitions:<A NAME=\"_14_24774\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define-struct rrant (name cuisine phone\nmenu))\n<BR />\n</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>where menu is a list of dishes<A NAME=\"_14_24862\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define-struct dish (name price))</TT></FONT><FONT FACE=\"Goudy Old Style\">.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Define the following function:<A NAME=\"_14_24944\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>;; name-and-phone-serving-dish: (listof\nrrant) string -&gt; (listof name-phone-list)\n<BR />\n;; Returns a list of the names and phone numbers of all the restaurants\nthat \n<BR />\n;; serve the dish named in the second input.  Each name/phone-number pair\n<BR />\n;; should be in its own list; for example \n<BR />\n;; ((&quot;Cobras and Matadors&quot; &quot;343-3434&quot;) (&quot;La Cote\nBasque&quot; &quot;344-3334&quot;)).</TT></FONT></P>\n<BR /><BR /><BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s)  </B>Below are definitions of </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>.<A NAME=\"_14_25374\"></A></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>(define (map f L) &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160; (define (filter p? L)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160; (cond &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (cond</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; ((empty? L) empty)\n&#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160; ((empty?\nL) empty)</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160; (else (cons (f (first\nL)) &#160;  &#160;  &#160;  &#160;  &#160; ((p? (first L)) </TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160;&#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160; (map f (rest L)))))) &#160;  &#160;  &#160;  &#160;  &#160;\n(cons (first L) (filter p? (rest L))))</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=2><TT>&#160; &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;  &#160;\n &#160;  &#160;  &#160;  &#160; (else (filter p? (rest L)))))</TT></FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s.1)</B>  Write a definition for the function\n</FONT><FONT FACE=\"Courier New\">process</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat abstracts both </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (Hint:  You may find it useful to think about these two functions:  \n<BR />\n</FONT><FONT FACE=\"Courier New\">(define (always-true x) true)</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">(define (no-change x) x)</FONT><FONT FACE=\"AGaramond\" SIZE=4>.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(s.2)</B>  Write new one-line definitions\nfor </FONT><FONT FACE=\"Courier New\">map</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand </FONT><FONT FACE=\"Courier New\">filter</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nthat call </FONT><FONT FACE=\"Courier New\">process</FONT><FONT FACE=\"AGaramond\" SIZE=4>.</FONT></P>\n<BR />\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(t) </B>A nested list of items (NL) is\neither</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>1.  empty &#160; </FONT><FONT FACE=\"Gill Sans Condensed Bold\" COLOR=\"#FF0000\">\n</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>2.  (cons item NL), or </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>3.  (cons NL NL). &#160;  &#160; </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Write a definition for the function deep-unique\nas described below.<A NAME=\"_14_26203\"></A>\n<BR />\n</FONT><FONT FACE=\"Courier New\" SIZE=2>; deep-unique:  NL -&gt; list-of-items\n<BR />\n; Return a list of all the items that occur in the input, no matter how\ndeeply nested,\n<BR />\n;    with no duplications.  Order of result doesn&#39;t matter.\n<BR />\n; Example:  (deep-unique &#39;(3 17 (3 Huey) Huey ((17)))) returns (3 17\nHuey)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>You may assume that the predicate </FONT><FONT FACE=\"Courier New\">list?</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nis already defined to return true if its argument is a list and false otherwise.</FONT><BR CLEAR=ALL />\n</P>\n<HR />\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,</FONT><a href=mailto:kay@uci.edu><font face=\"Goudy Old Style\"> </font>kay@uci.edu</A>\n</address>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Wednesday, November 23, 2005 -- 8:40 AM</FONT></P>\n</BODY>\n</HTML>\n", "id": 10428.0}