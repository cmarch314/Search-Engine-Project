{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Filtered exact CT ET Definition The class Filtered exact CT ET is a wrapper type for the number type CT with the difference that all predicates are specialized such that they are guaranteed to be exact Speed is achieved via a filtering scheme using interval arithmetic see Section Here are the necessary requirements CT is the construction and storage type The only data member of the class Filtered exact CT ET is the value of type CT All arithmetic operations performed outside of the predicates will be executed with this number type You can disallow these operations compiling with the flag CGAL DENY INEXACT OPERATIONS ON FILTER it allows you to spot the inexact operations that should be incorporated in the predicates The arithmetic operations called from inside the predicates are always computed exactly The ET type must be able to compute exactly the operations involved in the predicates called A to interval CT function must be provided that returns an interval containing the value of the argument of type CT see Section A convert to ET CT function must also be provided that returns a number of type ET representing exactly the argument of type CT It s a conversion function that is used for the exact computation when the filter fails This conversion has to be done exactly to ensure robustness include CGAL Filtered exact h Is Model for the ConceptFieldNumberType Operations The following member functions are used to access the numerical value for the different number types CT ntvar value returns the wrapped value ET ntvar exact returns the converted value to ET Interval nt advanced ntvar interval returns the converted value to Interval nt advanced This type actually has additional parameters for experimental features They will be documented when they will be considered stable in a next release Example You might use at the beginning of your program a typedef as follows include CGAL Filtered exact h include CGAL leda real h include CGAL double h typedef Filtered exact double leda real NT Or if you are sure that the predicates involved do not use divisions nor square roots include CGAL Filtered exact h include CGAL Gmpz h include CGAL int h typedef Filtered exact int Gmpz NT And if you know that the double variables contain integer values you can use include CGAL Filtered exact h include CGAL Gmpz h include CGAL double h typedef Filtered exact double Gmpz NT As a general rule we advise the use of Filtered exact double leda real Implementation The template definition of the low level predicates of CGAL are overloaded for the type Filtered exact CT ET For each predicate file the overloaded code is generated automatically by the PERL script scripts filtered predicates generator pl that you can use for your own predicates This script parses the template functions and generates the overloaded code the following way convert the entries to intervals using to interval CT via the interval member function call the original template function with the type Interval nt advanced if no exception is thrown return the value if an exception is thrown the filter failed convert the original entries using convert to ET CT using the exact member function and call the original template function with the type ET Example The low level template predicates of CGAL are in files named CGAL predicates kernel ftC2 h resp ftC3 the script is used to produce the files CGAL Arithmetic filter predicates kernel ftC2 h resp ftC3 At the moment only the predicates of the Cartesian and Simple cartesian kernels are supported as well as the power tests used by the regular triangulations Next Fixed precision nt Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/NumberTypeSupport_ref/Class_Filtered_exact.html", "title": "filtered_exact&lt;ct, et&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './NumberTypeSupport_ref/Filtered_exact.tex' -->\n<html> <head>  \n<title>Filtered_exact&lt;CT, ET&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1351\"></A>\n\n<A NAME=\"Cross_link_anchor_1352\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1378\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Filtered_exact<CT, ET>\"></A>\n<h2><I>CGAL::Filtered_exact&lt;CT, ET&gt;</I></h2>\n\n <A NAME=\"filter\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;CT,ET&gt;</I> is a wrapper type for the number\ntype <I>CT</I>, with the difference\nthat all predicates are specialized such that they are guaranteed to be exact.\nSpeed is achieved via a filtering scheme using interval arithmetic (see\nSection&nbsp;<A HREF=\"Class_Interval_nt_advanced.html#interval-adv\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).  Here are the necessary requirements:\n<P>\n\n<UL>\n<LI><I>CT</I> is the construction and storage type.  The only data member of\n      the class <I><A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;CT,ET&gt;</I> is the <I>value</I> of type\n      <I>CT</I>.  All arithmetic operations performed <I>outside</I> of the\n      predicates will be executed with this number type.  You can disallow\n      these operations compiling with the flag\n      <I>CGAL_DENY_INEXACT_OPERATIONS_ON_FILTER</I> (it allows you\n      to spot the inexact operations that should be incorporated in the\n      predicates).\n      The arithmetic operations called from inside the predicates are always\n      computed exactly.\n<LI>The <I>ET</I> type must be able to compute exactly the operations involved\n      in the predicates called.\n<LI>A <I>to_interval(CT)</I> function must\n      be provided, that returns an interval containing the value of the\n      argument of type <I>CT</I>, see Section&nbsp;<A HREF=\"Class_Interval_nt.html#interval\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\n<LI>A <I>convert_to&lt;ET&gt;(CT)</I> function must also be provided, that\n      returns a number of type <I>ET</I> representing exactly the argument of\n      type <I>CT</I>.  It's a conversion function that is used for the exact\n      computation, when the filter fails.\n      This conversion has to be done exactly to ensure robustness.\n</UL>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Filtered_exact.h\">CGAL/Filtered_exact.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3><A HREF=\"../Kernel_23_ref/Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe following member functions are used to access the numerical value for the\ndifferent number types:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_CT_value69;\"></A>\nCT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ntvar.value ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the wrapped value.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_ET_exact69;\"></A>\nET\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ntvar.exact ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the converted value to <I>ET</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Interval_nt_advanced_interval69;\"></A>\n<A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ntvar.interval ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the converted value\n                                             to <I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A></I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThis type actually has additional parameters for experimental features.  They\nwill be documented when they will be considered stable, in a next release.\n<P>\n\n<H3>Example</H3>\n<P>\n\nYou might use at the beginning of your program a <I>typedef</I> as follows:\n<P>\n\n<pre class=\"Verbatim\">\n    #include&lt;CGAL/<A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>.h&gt;\n    #include&lt;CGAL/<A HREF=\"Class_leda_real.html#Cross_link_anchor_1390\">leda_real</A>.h&gt;\n    #include&lt;CGAL/double.h&gt;\n    typedef <A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;double, <A HREF=\"Class_leda_real.html#Cross_link_anchor_1390\">leda_real</A>&gt; NT;\n</pre>\n<P>\n\nOr if you are sure that the predicates involved do not use divisions nor\n<A HREF=\"Function_square.html#Cross_link_anchor_1418\">square</A> roots:\n<P>\n\n<pre class=\"Verbatim\">\n    #include&lt;CGAL/<A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>.h&gt;\n    #include&lt;CGAL/<A HREF=\"Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n    #include&lt;CGAL/int.h&gt;\n    typedef <A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;int, <A HREF=\"Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>&gt; NT;\n</pre>\n<P>\n\nAnd if you know that the double variables contain integer values, you can\nuse:\n<P>\n\n<pre class=\"Verbatim\">\n    #include&lt;CGAL/<A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>.h&gt;\n    #include&lt;CGAL/<A HREF=\"Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n    #include&lt;CGAL/double.h&gt;\n    typedef <A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;double, <A HREF=\"Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>&gt; NT;\n</pre>\n<P>\n\nAs a general rule, we advise the use of\n<I><A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;double, <A HREF=\"Class_leda_real.html#Cross_link_anchor_1390\">leda_real</A>&gt;</I>.\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe template definition of the low level predicates of C<SMALL>GAL</SMALL> are overloaded\nfor the type <I><A HREF=\"Class_Filtered_exact.html#Cross_link_anchor_1352\">Filtered_exact</A>&lt;CT,ET&gt;</I>.\n<P>\n\nFor each predicate file, the overloaded code is generated automatically by the\n<I>PERL</I> script (<I>scripts/filtered_predicates_generator.pl</I>) that you can\nuse for your own predicates.\nThis script parses the template functions and generates the\noverloaded code the following way:\n<UL>\n<LI>convert the entries to intervals using\n    <I>to_interval(CT)</I>, via the <I>interval()</I> member function,\n<LI>call the original template function with the type\n    <I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A></I>,\n<LI>if no exception is thrown, return the value,\n<LI>if an exception is thrown (the filter failed), convert the original\n    entries using <I>convert_to&lt;ET&gt;(CT)</I>, using the <I>exact()</I> member\n    function,\n<LI>and call the original template function with the type <I>ET</I>.\n</UL>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe low level template predicates of C<SMALL>GAL</SMALL> are in files named\n<I>CGAL/predicates/kernel_ftC2.h</I> (resp. ftC3), the script is used\nto produce the files <I>CGAL/Arithmetic_filter/predicates/kernel_ftC2.h</I>\n(resp. ftC3).\n<P>\n\nAt the moment, only the predicates of the <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> and <A HREF=\"../Kernel_23_ref/Class_Simple_cartesian.html#Cross_link_anchor_30\">Simple_cartesian</A>\nkernels are supported, as well as the power tests used by the regular\ntriangulations.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Fixed_precision_nt.html\"><I>Fixed_precision_nt</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39200.0}