{"text": "Alternatives to Dynamic Software Architectures There are a wide variety of techniques for supporting runtime software change Some of the most popular techniques are listed below It should be noted however that designers have traditionally sought alternatives to runtime change altogether Several reasons account for this It is usually avoidable Runtime change is not a critical aspect of many software systems and several techniques have been devised to circumvent the need for runtime change altogether Regularly scheduled downtimes functional redundancy or clustering and manual overrides are all examples of such techniques It increases risk System integrity reliability and robustness are more difficult to ensure in light of runtime change It increases cost There is typically a marked performance overhead associated with supporting runtime change Additionally few techniques have limited expertise and a lack of proven techniques for supporting runtime change exasperate engineering costs Programming Language Based Approaches GJB96 describe an approach to modeling changes at the statement and procedure level for a simple imperative programming language Dynamic Programming Languages Many dynamic programming languages such as Lisp Smalltalk and Haskel PHL97 have supported runtime software change for decades Dynamic Linking Mechanisms Dynamic link libraries have been available in operating systems such as UNIX Microsoft Windows and the Apple Macintosh for some time New approaches to dynamic linking Fra97 hope to significantly reduce the runtime performance overhead associated with using such mechanisms Dynamic Object Technology CORBA OMG96 and COM Broc94 support the runtime locations loading and binding of software objects or components Also see the May 1997 special issue of Communications of the ACM Return to the Dynamic Software Architectures home page These pages are maintained by Peyman Oreizy Send comments via e mail ", "_id": "http://www.ics.uci.edu/~peymano/dynamic-arch/alternatives.html", "title": "alternative approaches", "html": "<html>\r\r\r\r<head>\r\r<meta http-equiv=\"Content-Type\"\r\rcontent=\"text/html; charset=iso-8859-1\">\r\r<meta name=\"GENERATOR\" content=\"Microsoft FrontPage Express 2.0\">\r\r<title>Alternative approaches</title>\r\r</head>\r\r\r\r<body bgcolor=\"#FFFFFF\">\r\r<div align=\"center\"><center>\r\r\r\r<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"\r\rbgcolor=\"#0000FF\">\r\r    <tr>\r\r        <td align=\"center\" width=\"100%\"><h1><font color=\"#FFFFFF\"\r\r        size=\"5\">Alternatives to Dynamic<br>\r\r        Software Architectures</font></h1>\r\r        </td>\r\r    </tr>\r\r</table>\r\r</center></div>\r\r\r\r<p>There are a wide variety of techniques for supporting runtime\r\rsoftware change. Some of the most popular techniques are listed\r\rbelow. It should be noted, however, that designers have\r\rtraditionally sought alternatives to runtime change altogether.\r\rSeveral reasons account for this:</p>\r\r\r\r<ol>\r\r    <li><em>It is usually avoidable</em>. Runtime change is not a\r\r        critical aspect of many software systems and several\r\r        techniques have been devised to circumvent the need for\r\r        runtime change altogether. Regularly scheduled downtimes,\r\r        functional redundancy or clustering, and manual overrides\r\r        are all examples of such techniques.</li>\r\r    <li><em>It increases risk</em>. System integrity,\r\r        reliability, and robustness are more difficult to ensure\r\r        in light of runtime change.</li>\r\r    <li><em>It increases cost</em>. There is typically a marked\r\r        performance overhead associated with supporting runtime\r\r        change. Additionally, few techniques have limited\r\r        expertise and a lack of proven techniques for supporting\r\r        runtime change exasperate engineering costs.</li>\r\r</ol>\r\r\r\r<h3>Programming Language Based Approaches</h3>\r\r\r\r<p><a href=\"references.html#GJB96\">[GJB96]</a> describe an\r\rapproach to modeling changes at the statement- and\r\rprocedure-level for a simple imperative programming language.</p>\r\r\r\r<h3>Dynamic Programming Languages</h3>\r\r\r\r<p>Many dynamic programming languages, such as Lisp, Smalltalk,\r\rand Haskel <a href=\"references.html#PHL97\">[PHL97]</a> have\r\rsupported runtime software change for decades. </p>\r\r\r\r<h3>Dynamic Linking Mechanisms</h3>\r\r\r\r<p>Dynamic link libraries have been available in operating\r\rsystems such as UNIX, Microsoft Windows, and the Apple Macintosh\r\rfor some time. New approaches to dynamic linking <a\r\rhref=\"references.html#Fra97\">[Fra97]</a> hope to significantly\r\rreduce the runtime performance overhead associated with using\r\rsuch mechanisms.</p>\r\r\r\r<h3>Dynamic Object Technology</h3>\r\r\r\r<p>CORBA <a href=\"references.html#OMG96\">[OMG96]</a> and COM <a\r\rhref=\"references.html#Broc94\">[Broc94]</a> support the runtime\r\rlocations, loading, and binding of software objects or\r\rcomponents.</p>\r\r\r\r<p>Also see the <a\r\rhref=\"http://www.acm.org/pubs/contents/journals/cacm/1997-40#5\">May\r\r1997 special issue of Communications of the ACM</a>.</p>\r\r\r\r<hr size=\"0\" noshade>\r\r\r\r<p>Return to the <a href=\"index.html\">Dynamic Software\r\rArchitectures home page</a>.<br>\r\rThese pages are maintained by <a href=\"../\">Peyman Oreizy</a>.\r\rSend comments via <a href=\"mailto:peymano at ics.uci.edu\">e-mail</a>.</p>\r\r</body>\r\r</html>\r\r\ufffd", "id": 22689.0}