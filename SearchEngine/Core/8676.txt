{"text": "R7 b Maintenance Scheduling Problems As Benchmarks For Constraint Algorithms Daniel Frost frost ics uci edu Rina Dechter dechter ics uci edu Abstract The paper focuses on evaluating constraint satisfaction search algorithms on application based random problem instances The application we use is a well studied problem in the electric power industry optimally scheduling preventive maintenance of power generating units within a power plant We show how these scheduling problems can be cast as constraint satisfaction problems and used to define the structure of randomly generated non binary CSPs The random problem instances are then used to evaluate several previously studied algorithms The paper also demonstrates how constraint satisfaction can be used for optimization tasks To find an optimal maintenance schedule a series of CSPs are solved with successively tighter cost bound constraints We introduce and experiment with an iterative learning algorithm which records additional constraints uncovered during search The constraints recorded during the solution of one instance with a certain cost bound are used again on subsequent instances with tighter cost bounds Our results show that on a class of randomly generated maintenance scheduling problems iterative learning reduces the time required to find a good schedule ps pdf ", "_id": "http://www.ics.uci.edu/~dechter/publications/r70b.html", "title": "\r\n        dr. rina dechter @ uci\r\n      ", "html": "<html>\r\n    <head>\r\n      <title>\r\n        Dr. Rina Dechter @ UCI\r\n      </title>\r\n      <LINK REL=\"Stylesheet\" HREF=\"/~dechter/basic.css\">\t\t\r\n    </HEAD>\r\n  \r\n  <BODY bgcolor=\"#ffffff\" alink=\"00aaaa\" link=\"008080\" vlink=\"008080\">\r\n  \r\n  <!-- Begin Header -->\r\n    <!--#include virtual=\"/~dechter/header.html\" -->\r\n  <!-- End Header -->\r\n  \r\n  \r\n  <!-- Begin Body -->\r\n  \r\n  <!--#include file=\"pubs-nav.html\"--> \r\n<center>\r\n<table width=\"80%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n<tr valign=top>\r\n<td><b>R70b</td>\r\n | \r\n<br></td>\r\n</tr>\r\n\r\n<tr>\r\n<td colspan=2><div class=title>Maintenance Scheduling Problems As Benchmarks\r\nFor Constraint Algorithms</div>\r\n<TT>Daniel Frost(<A href=\"mailto:frost@ics.uci.edu\">frost@ics.uci.edu</A>) &\r\nRina Dechter (<A href=\"mailto:dechter@ics.uci.edu\">dechter@ics.uci.edu</A>)</TT>\r\n</td></tr>\r\n</table>\r\n\r\n<table width=\"80%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n<tr><td>\r\n<br><div class=abstract>\r\n<b>Abstract</b><BR>\r\nThe paper focuses on evaluating constraint satisfaction search algorithms on \r\napplication based random problem instances. The application we use is a well-studied\r\nproblem in the electric power industry: optimally scheduling preventive maintenance\r\nof power generating units within a power plant. We show how these scheduling \r\nproblems can be cast as constraint satisfaction problems and used to define the \r\nstructure of randomly generated non-binary CSPs. The random problem instances are\r\nthen used to evaluate several previously studied algorithms. The paper also \r\ndemonstrates how constraint satisfaction can be used for optimization tasks. To find an\r\noptimal maintenance schedule, a series of CSPs are solved with successively tighter\r\ncost-bound constraints. We introduce and experiment with an \"iterative learning\"\r\nalgorithm which records additional constraints uncovered during search. The \r\nconstraints recorded during the solution of one instance with a certain cost-bound are\r\nused again on subsequent instances with tighter cost-bounds. Our results show that\r\non a class of randomly generated maintenance scheduling problems, iterative learning\r\nreduces the time required to find a good schedule.\r\n</div><br>\r\n\r\n<A href=\"r70b-maintscheduling.ps\">\r\n<img align=left border=\"0\" src=\"/~dechter/images/down.gif\">&nbsp;&nbsp;<b>[ps] </b></a>\r\n<A target=blank href=\"r70b-maintscheduling.ps\">\r\n<b>[pdf]</b></a>\r\n</td></tr></table></center><br>\r\n\r\n<!-- End Body-->\r\n\r\n<!--- Begin Footer -->\r\n     <!--#include virtual=\"/~dechter/footer.html\" -->\r\n<!--- End Footer -->\r\n\r\n</body>\r\n<html>\r\n", "id": 8676.0}