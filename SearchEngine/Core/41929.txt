{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 2Checks Much of the CGAL code contains checks For example all checks used in the kernel code are prefixed by CGAL KERNEL Other packages have their own prefixes as documented in the corresponding chapters Some are there to check if the kernel behaves correctly others are there to check if the user calls kernel routines in an acceptable manner There are four types of checks The first three are errors and lead to a halt of the program if they fail The last only leads to a warning Preconditions check if the caller of a routine has called it in a proper fashion If such a check fails it is the responsibility of the caller usually the user of the library Postconditions check if a routine does what it promises to do If such a check fails it is the fault of this routine so of the library Assertions are other checks that do not fit in the above two categories Warnings are checks for which it is not so severe if they fail By default all of these checks are performed It is however possible to turn them off through the use of compile time switches For example for the checks in the kernel code these switches are the following CGAL KERNEL NO PRECONDITIONS CGAL KERNEL NO POSTCONDITIONS CGAL KERNEL NO ASSERTIONS and CGAL KERNEL NO WARNINGS So in order to compile the file foo C with the postcondition checks off you should do CC DCGAL KERNEL NO POSTCONDITIONS foo C Not all checks are on by default All four types of checks can be marked as expensive or exactness checks or both These checks need to be turned on explicitly by supplying one or both of the compile time switches CGAL KERNEL CHECK EXPENSIVE and CGAL KERNEL CHECK EXACTNESS Expensive checks are as the word says checks that take a considerable time to compute Considerable is an imprecise phrase Checks that add less than 1 percent to the execution time of the routine they are in are not expensive Checks that can double the execution time are Somewhere in between lies the border line Checks that increase the asymptotic running time of an algorithm are always considered expensive Exactness checks are checks that rely on exact arithmetic For example if the intersection of two lines is computed the postcondition of this routine may state that the intersection point lies on both lines However if the computation is done with doubles as number type this may not be the case due to round off errors So exactness checks should only be turned on if the computation is done with some exact number type 2 1 Altering the failure behaviour As stated above if a postcondition precondition or assertion is violated the program will abort stop and produce a core dump This behaviour can be changed by means of the following function include CGAL assertions h Failure behaviour set error behaviour Failure behaviour eb The parameter should have one of the following values enum Failure behaviour ABORT EXIT EXIT WITH SUCCESS CONTINUE The first value is the default If the EXIT value is set the program will stop and return a value indicating failure but not dump the core The last value tells the checks to go on after diagnosing the error advanced If the EXIT WITH SUCCESS value is set the program will stop and return a value corresponding to successful execution and not dump the core advanced The value that is returned by set error behaviour is the value that was in use before For warnings there is a separate routine which works in the same way The only difference is that for warnings the default value is CONTINUE Failure behaviour set warning behaviour Failure behaviour eb 2 2 Control at a finer granularity The compile time flags as described up to now all operate on the whole library Sometimes you may want to have a finer control CGAL offers the possibility to turn checks on and off with a bit finer granularity namely the module in which the routines are defined The name of the module is to be appended directly after the CGAL prefix So the flag CGAL KERNEL NO ASSERTIONS switches off assertions in the kernel only the flag CGAL CH CHECK EXPENSIVE turns on expensive checks in the convex hull module The name of a particular module is documented with that module advanced 2 3 Customising how errors are reported Normally error messages are written to the standard error output It is possible to do something different with them To that end you can register your own handler This function should be declared as follows void my failure function const char type const char expression const char file int line const char explanation Your failure function will be called with the following parameters type is a string that contains one of the words precondition postcondition assertion or warning The parameter expression contains the expression that was violated file and line contain the place where the check was made The explanation parameter contains an explanation of what was checked It can be NULL in which case the expression is thought to be descriptive enough There are several things that you can do with your own handler You can display a diagnostic message in a different way for instance in a pop up window or to a log file or a combination You can also implement a different policy on what to do after an error For instance you can throw an exception or ask the user in a dialogue whether to abort or to continue If you do this it is best to set the error behaviour to CONTINUE so that it does not interfere with your policy You can register two handlers one for warnings and one for errors Of course you can use the same function for both if you want When you set a handler the previous handler is returned so you can restore it if you want include CGAL assertions h Failure function set error handler Failure function handler Failure function set warning handler Failure function handler Example include CGAL assertions h void my failure handler const char type const char expr const char file int line const char msg report the error in some way void foo CGAL Failure function prev prev CGAL set error handler my failure handler call some routines CGAL set error handler prev advanced Next chapter Introduction Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Introduction/Chapter_checks", "title": "checks", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Introduction/checks.tex' -->\n<html> <head>  \n<title>Checks</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_checks.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_2\"></a>\n  \n<h1>Chapter 2<BR>Checks</h1>\n<P>\n\nMuch of the C<SMALL>GAL</SMALL> code contains checks. \nFor example, all checks used in the kernel code are prefixed by \n<I>CGAL_KERNEL</I>.\nOther packages have their own prefixes, as documented in the corresponding\nchapters.\nSome are there to check if the kernel behaves correctly, others are there to \ncheck if the user calls kernel routines in an acceptable manner.\n<P>\n\nThere are four types of checks. \nThe first three are errors and lead to a halt of the program if they fail. \nThe last only leads to a warning.\n<DL>\n<DT><B>Preconditions</B><DD> check if the caller of a routine has called it in a\nproper fashion. \nIf such a check fails it is the responsibility of the caller \n(usually the user of the library).\n<DT><B>Postconditions</B><DD> check if a routine does what it promises to do. \nIf such a check fails it is the fault of this routine, so of the library.\n<DT><B>Assertions</B><DD> are other checks that do not fit in the above two \ncategories.\n<DT><B>Warnings</B><DD> are checks for which it is not so severe if they fail.\n</DL>\n<P>\n\nBy default, all of these checks are performed. \nIt is however possible to turn them off through the use of compile time \nswitches.\nFor example, for the checks in the kernel code, these switches are the \nfollowing:\n<I>CGAL_KERNEL_NO_PRECONDITIONS</I>, \n<I>CGAL_KERNEL_NO_POSTCONDITIONS</I>,\n<I>CGAL_KERNEL_NO_ASSERTIONS</I> and \n<I>CGAL_KERNEL_NO_WARNINGS</I>.\nSo, in order to compile the file <TT>foo.C</TT> with the postcondition checks\noff, you should do:<BR>\n\n<TT>CC -DCGAL_KERNEL_NO_POSTCONDITIONS foo.C</TT>\n<P>\n\nNot all checks are on by default.\nAll four types of checks can be marked as expensive or exactness checks\n(or both).\nThese checks need to be turned on explicitly by supplying one or both of\nthe compile time switches <I>CGAL_KERNEL_CHECK_EXPENSIVE</I> and \n<I>CGAL_KERNEL_CHECK_EXACTNESS</I>.\n<P>\n\nExpensive checks are, as the word says, checks that take a considerable\ntime to compute. \nConsiderable is an imprecise phrase. \nChecks that add less than 10 percent to the execution time of the routine \nthey are in are not expensive.\nChecks that can double the execution time are. \nSomewhere in between lies the border line.\nChecks that increase the asymptotic running time of an algorithm are always \nconsidered expensive.\nExactness checks are checks that rely on exact arithmetic. \nFor example, if the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two lines is computed, the postcondition \nof this routine may state that the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point lies on both lines. \nHowever, if the computation is done with doubles as number type, this may not \nbe the case, due to round off errors. \nSo, exactness checks should only be turned on if the computation is done \nwith some exact number type.\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>2.1&nbsp;&nbsp;&nbsp;Altering the failure behaviour</h2>\n<P>\n\nAs stated above, if a postcondition, precondition or assertion is\nviolated, the program will abort (stop and produce a core dump).\nThis behaviour can be changed by means of the following function.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/assertions.h\">CGAL/assertions.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour_set_error_behaviour6Failure_behaviour_eb9;\"></A>\n<A HREF=\"Chapter_checks#Enum_Failure_behaviour\">Failure_behaviour</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_error_behaviour ( <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">Failure_behaviour</A> eb)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nThe parameter should have one of the following values.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour\"></A>\n<A NAME=\"Enum_Failure_behaviour\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">Failure_behaviour</A> { <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">ABORT</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">EXIT</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">EXIT_WITH_SUCCESS</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">CONTINUE</A><A NAME=\"Function_Failure_behaviour\"></A>\n};\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n\nThe first value is the default. \nIf the <I><A HREF=\"Chapter_checks#Enum_Failure_behaviour\">EXIT</A></I> value is set, the program will stop and return a value \nindicating failure, but not dump the core. \nThe last value tells the checks to go on after diagnosing the error.\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nIf the <I><A HREF=\"Chapter_checks#Enum_Failure_behaviour\">EXIT_WITH_SUCCESS</A></I> value is set, the program will stop and \nreturn a value corresponding to successful execution and not dump the core. \n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\nThe value that is returned by <I>set_error_behaviour</I> is the value that was in use before.\n<P>\n\nFor warnings there is a separate routine, which works in the same way.\nThe only difference is that for warnings the default value is\n<I><A HREF=\"Chapter_checks#Enum_Failure_behaviour\">CONTINUE</A></I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour_set_warning_behaviour6Failure_behaviour_eb9;\"></A>\n<A HREF=\"Chapter_checks#Enum_Failure_behaviour\">Failure_behaviour</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_warning_behaviour ( <A HREF=\"Chapter_checks#Enum_Failure_behaviour\">Failure_behaviour</A> eb)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>2.2&nbsp;&nbsp;&nbsp;Control at a finer granularity</h2>\n<P>\n\nThe compile time flags as described up to now all operate on the whole \nlibrary.\nSometimes you may want to have a finer control.\nC<SMALL>GAL</SMALL> offers the possibility to turn checks on and off with a bit finer\ngranularity, namely the module in which the routines are defined.\nThe name of the module is to be appended directly after the C<SMALL>GAL</SMALL> prefix.\nSo, the flag <I>CGAL_KERNEL_NO_ASSERTIONS</I> switches off assertions in \nthe kernel only, the flag <I>CGAL_CH_CHECK_EXPENSIVE</I> turns on\nexpensive checks in the convex hull module.\nThe name of a particular module is documented with that module.\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>2.3&nbsp;&nbsp;&nbsp;Customising how errors are reported</h2>\n<P>\n\nNormally, error messages are written to the standard error output.\nIt is possible to do something different with them.\nTo that end you can register your own handler.\nThis function should be declared as follows.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_my_failure_function6_const_char_*type+_const_char_*expression+_const_char_*file+_int_line+_const_char_*explanation9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    my_failure_function ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const char *type,<BR>\n\nconst char *expression,<BR>\n\nconst char *file,<BR>\n\nint line,<BR>\n\nconst char *explanation)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nYour failure function will be called with the following parameters.\n<I>type</I> is a string that contains one of the words precondition,\npostcondition, assertion or warning. \nThe parameter <I>expression</I> contains the expression that was violated.\n<I>file</I> and <I>line</I> contain the place where the check was made.\nThe <I>explanation</I> parameter contains an explanation of what was \nchecked. \nIt can be <I>NULL</I>, in which case the <I>expression</I> is thought\nto be descriptive enough.\n<P>\n\nThere are several things that you can do with your own handler.\nYou can display a diagnostic message in a different way, for instance in \na pop up window or to a log file (or a combination).\nYou can also implement a different policy on what to do after an error.\nFor instance, you can throw an exception or ask the user in a dialogue \nwhether to abort or to continue.\nIf you do this, it is best to set the error behaviour to\n<I><A HREF=\"Chapter_checks#Enum_Failure_behaviour\">CONTINUE</A></I>, so that it does not interfere with your policy.\n<P>\n\nYou can register two handlers, one for warnings and one for errors.\nOf course, you can use the same function for both if you want.\nWhen you set a handler, the previous handler is returned, so you can restore\nit if you want.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/assertions.h\">CGAL/assertions.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_function_set_error_handler6Failure_function_handler9;\"></A>\nFailure_function\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_error_handler ( Failure_function handler)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_function_set_warning_handler6Failure_function_handler9;\"></A>\nFailure_function\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_warning_handler ( Failure_function handler)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<h4>Example</h4>\n<P>\n\n<PRE>\n#include &lt;CGAL/assertions.h&gt;\n\nvoid my_failure_handler(\n    const char *type,\n    const char *expr,\n    const char* file,\n    int line,\n    const char* msg)\n{\n    /* report the error in some way. */\n}\n\nvoid foo()\n{\n    CGAL::Failure_function prev;\n    prev = CGAL::set_error_handler(my_failure_handler);\n    /* call some routines. */\n    CGAL::set_error_handler(prev);\n}\n</PRE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Introduction_ref/Chapter_main.html\">Introduction</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 41929.0}