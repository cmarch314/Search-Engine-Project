{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Range tree k Traits Definition An object of the class Range tree k is a k dimensional range tree that can store k dimensional keys of type Key The class allows to perform window queries on the keys The class Range tree k is parameterized with a range tree traits class Traits that defines among other things the type of the Key CGAL provides traits class implementations that allow to use the range tree with point classes from the CGAL kernel as keys These classes are CGAL Range segment tree traits set 2 R CGAL Range segment tree traits set 3 R CGAL Range tree traits map 2 R and CGAL Range tree traits map 3 R The concept RangeSegmentTreeTraits d defines the requirements that range tree traits classes must fulfill This allows the advanced user to develop further range tree traits classes include CGAL Range tree k h Types Range tree k Traits Traits the type of the range tree traits class typedef Traits Key Key typedef Traits Interval Interval Creation Range tree k Traits R Introduces an empty range tree R template class ForwardIterator Range tree k Traits R ForwardIterator first ForwardIterator last Introduces a range tree R and initializes it with the data in the range first last Precondition value type first Traits Key Operations template class ForwardIterator void R make tree ForwardIterator first ForwardIterator last Introduces a range tree R and initializes it with the data in the range first last This function can only be applied once on an empty range tree Precondition value type first Traits Key template class OutputIterator OutputIterator R window query Interval window OutputIterator out writes all data that are in the interval window to the container where out points to and returns an output iterator that points to the last location the function wrote to Precondition value type out Traits Key ExampleThe following example program uses the predefined Range tree 2 data structure together with the predefined traits class Range tree map traits 2 which has two template arguments specifying the type of the point data in each dimension CGAL Cartesian double and the value type of the 2 dimensional point data char Therefore the Range tree 2 is defined on 2 dimensional point data CGAL Point 2 Cartesian double each of which is associated with a character Then a few data items are created and put into a list After that the tree is constructed according to that list a window query is performed and the query elements are given out include CGAL Cartesian h include CGAL Range segment tree traits h include CGAL Range tree k h typedef CGAL Cartesian double K typedef CGAL Range tree map traits 2 K char Traits typedef CGAL Range tree 2 Traits Range tree 2 type int main typedef Traits Key Key typedef Traits Interval Interval std vector Key InputList OutputList InputList push back Key K Point 2 8 5 1 a InputList push back Key K Point 2 1 1 1 b InputList push back Key K Point 2 3 2 1 c Range tree 2 type Range tree 2 InputList begin InputList end Interval win Interval K Point 2 4 8 1 K Point 2 5 8 2 std cout n Window Query n Range tree 2 window query win std back inserter OutputList std vector Key iterator current OutputList begin while current OutputList end std cout current first x current first y current second std endl Next Range tree traits map 2 R T Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/SearchStructures_ref/Class_Range_tree_k.html", "title": "range_tree_k&lt;traits&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './SearchStructures_ref/Range_tree_k.tex' -->\n<html> <head>  \n<title>Range_tree_k&lt;Traits&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1256\"></A>\n\n<A NAME=\"Cross_link_anchor_1257\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1326\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Range_tree_k<Traits>\"></A>\n<h2><I>CGAL::Range_tree_k&lt;Traits&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn object of the class  <I><A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A></I> is a <MATH><I>k</I></MATH>-dimensional range tree\nthat can store k-dimensional keys of type <I>Key</I>. \nThe class allows to perform\nwindow queries on the keys.  The class <I><A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A></I> is parameterized with\na range tree traits class <I>Traits</I> that defines, among other things, \nthe type of the <I>Key</I>.\n<P>\n\nC<SMALL>GAL</SMALL> provides traits class implementations that allow to use \nthe range tree with point classes from the C<SMALL>GAL</SMALL> kernel as keys.\nThese classes are <I><A HREF=\"Class_Range_segment_tree_traits_set_2.html#Cross_link_anchor_1250\">CGAL::Range_segment_tree_traits_set_2</A>&lt;R&gt;</I>,\n<I><A HREF=\"Class_Range_segment_tree_traits_set_3.html#Cross_link_anchor_1252\">CGAL::Range_segment_tree_traits_set_3</A>&lt;R&gt;</I>, \n<I><A HREF=\"Class_Range_tree_traits_map_2.html#Cross_link_anchor_1258\">CGAL::Range_tree_traits_map_2</A>&lt;R&gt;</I> and\n<I><A HREF=\"Class_Range_tree_traits_map_3.html#Cross_link_anchor_1260\">CGAL::Range_tree_traits_map_3</A>&lt;R&gt;</I>.  The concept\nRangeSegmentTreeTraits_d defines the requirements that range tree traits\nclasses must fulfill. This allows the advanced user to develop further\nrange tree traits classes.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Range_tree_k.h\">CGAL/Range_tree_k.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A>&lt;Traits&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the type of the range tree traits class.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Key\"></A>\n<A NAME=\"Typedef_Key\"></A>\ntypedef Traits::Key\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Key;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Interval\"></A>\n<A NAME=\"Typedef_Interval\"></A>\ntypedef Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A>&lt;Traits&gt; R;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces an empty range tree <I>R</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt; class ForwardIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A>&lt;Traits&gt; R ( ForwardIterator first,  ForwardIterator last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces a range tree <I>R</I> and initializes it with the data\nin the range <I>[first, last)</I>.<BR>\n\n<EM>Precondition: </EM><I>value_type(first) == Traits::Key</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class ForwardIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_make_tree6ForwardIterator_first+_ForwardIterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    R.make_tree ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator first,<BR>\n\nForwardIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Introduces a range tree <I>R</I> and initializes it with the data\nin the range <I>[first, last)</I>. This function can only be applied\nonce on an empty range tree.<BR>\n\n<EM>Precondition: </EM><I>value_type(first) == Traits::Key</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_window_query6Interval_window+_OutputIterator_out9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    R.window_query ( <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> window,  OutputIterator out)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    writes all data that are in the interval <I>window</I> to the container\nwhere <I>out</I> points to, and returns an output iterator that points\nto the last location the function wrote to.<BR>\n\n<EM>Precondition: </EM><I>value_type(out) == Traits::Key</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>The following example program uses the predefined <I>   Range_tree_2</I> data structure together with the predefined traits\n  class <I>Range_tree_map_traits_2</I> which has two template\n  arguments specifying the\n  type of the point data in each dimension\n  (<I><A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt;</I>) and the value type of the\n  2-dimensional point data (<I>char</I>). Therefore the <I>   Range_tree_2</I> is defined on 2-dimensional point data\n  (<I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt;</I>) each of which is\n  associated with a character.\nThen, a few data items are created and put into a list. After\n  that the tree is constructed according to that list, a window\n  query is performed, and the query elements are given out.\n<P>\n\n<pre class=\"Verbatim\">\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/Range_segment_tree_traits.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Range_tree_k.html#Cross_link_anchor_1257\">Range_tree_k</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\ntypedef CGAL::Range_tree_map_traits_2&lt;K, char&gt; Traits;\ntypedef CGAL::Range_tree_2&lt;Traits&gt; Range_tree_2_type;\n\nint main()\n{\n  typedef Traits::Key Key;                \n  typedef Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;    \n\n  std::vector&lt;Key&gt; InputList, OutputList;\n  InputList.push_back(Key(K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(8,5.1), 'a'));\n  InputList.push_back(Key(K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1,1.1), 'b'));\n  InputList.push_back(Key(K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(3,2.1), 'c'));\n\n  Range_tree_2_type Range_tree_2(InputList.begin(),InputList.end());\n  <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> win(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(4,8.1), K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(5,8.2)));\n  std::cout &lt;&lt; &quot;\\n Window Query:\\n &quot;;\n  Range_tree_2.window_query(win, std::back_inserter(OutputList));\n  std::vector&lt;Key&gt;::iterator current=OutputList.begin();\n  while(current!=OutputList.end()){\n    std::cout &lt;&lt; (*current).first.x() &lt;&lt; &quot;,&quot; &lt;&lt; (*current).first.y()\n         &lt;&lt; &quot;:&quot; &lt;&lt; (*current++).second &lt;&lt; std::endl;\n  }\n}\n</pre>\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Range_tree_traits_map_2.html\"><I>Range_tree_traits_map_2&lt;R,T&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_60!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39551.0}