{"text": "OEChem C Theory Manual Version 1 3 1 Previous 33 2 Objects and Free Functions Up 33 Design Decisions Next A Bibliography 33 3 Programming Layers The Deep and Twisted Path In designing OEChem we strove to provide a library which puts powerful algorithms in the hands of novice users without hand cuffing the expert For this reason OEChem can at the same time seem trivial and overwhelming There are often several ways to carry out certain tasks in OEChem each with its subtle advantages which can benefit an experienced user There are very few algorithms we have shied away from including in OEChem and many of the methods are new unique and powerful This gives OEChem a very rich interface yet to gain this efficiency and power OEChem may force you to think about problems in ways your are not accustomed to doing We hope that you benefit from the experience If you find that you cannot or it is difficult to carry out a task with OEChem please contact us OEChem has several layers of interfaces to most of its functionality There are high level interfaces which provide the user with an enormous amount of power with minimal code This level is exemplified by the second code listing in the chapter Reading and Writing Molecules see below In this example the functionality of the babel file format conversion program is re implemented in about 1 lines of code While this is trivial to write and understand maybe after you ve finished the manual it should not belie the fact that OEChem is carrying out an enormous amount of work under the surface A perhaps mid level interface in OEChem is the generic data interface Once you are familiar with OEChem s molecules you may find that none of them are specifically tailored to your task Rather than having to delve deeply into the molecule API and derive your own molecule for the task you can simply extend the API of molecules at run time to suite your needs While this functionality is perhaps not for the first day user it certainly doesn t require a stout heart Finally for advanced programmers OEChem provides access to nearly all of the detailed control of our functions OEChem molecules have a simple API which can be used to derived your own molecules The free function heavy API discussed above then lets you have access to much of OEChem s power without having to implement an enormous molecule API yourself Similarly many of the functions that are wrapped in high level functions like the molecule readers and writers are also available directly to the user at the low level For instance while you many use oemolostreams to write molecules to output you can also use the OEWriteMDLFile functions for more direct access If you ever have difficulty implementing the functionality you desire with the OEChem interface you already know look deeper It will often be the case that a lower level function will allow you the control you are seeking OEChem C Theory Manual Version 1 3 1 Previous 33 2 Objects and Free Functions Up 33 Design Decisions Next A Bibliography Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node272.html", "title": "33.3 programming layers: the deep and twisted path", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>33.3 Programming Layers: The Deep and Twisted Path</title>\n<META NAME=\"description\" CONTENT=\"33.3 Programming Layers: The Deep and Twisted Path\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node271.html\">\n<LINK REL=\"up\" HREF=\"node269.html\">\n<LINK REL=\"next\" HREF=\"node273.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node271.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node273.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node271.html\">33.2 Objects and Free-Functions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node273.html\">A. Bibliography</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0036300000000000000000\">\n33.3 Programming Layers:  The Deep and Twisted Path</A>\n</H1>\n\n<P>\nIn designing OEChem, we strove to provide a library which puts powerful\nalgorithms in the hands of novice users without hand-cuffing the expert.\nFor this reason, OEChem can at the same time seem trivial and overwhelming.\nThere are often several ways to carry out certain tasks in OEChem each with\nits subtle advantages, which can benefit an experienced user.  There are\nvery few algorithms we have shied away from including in OEChem, and many\nof the methods are new, unique and powerful.  This gives OEChem a very rich\ninterface, yet to gain this efficiency and power OEChem may force you to\nthink about problems in ways your are not accustomed to doing.  We hope\nthat you benefit from the experience.  If you find that you cannot or it is\ndifficult to carry out a task with OEChem, please contact us.\n\n<P>\nOEChem has several layers of interfaces to most of its functionality.\nThere are \"high-level\" interfaces, which provide the user with an enormous\namount of power with minimal code.  This level is exemplified by the second\ncode listing in the chapter \"Reading and Writing Molecules\" (see below).\nIn this example, the functionality of the \"babel\" file-format conversion\nprogram is re-implemented in about 10 lines of code.  While this is trivial\nto write and understand (<i>maybe after you've finished the manual</i>), it\nshould not belie the fact that OEChem is carrying out an enormous amount\nof work under the surface.\n\n<P>\nA perhaps \"mid-level\" interface in OEChem is the <i>generic data</i>\ninterface.  Once you are familiar with OEChem's molecules, you may find\nthat none of them are specifically tailored to your task.  Rather than\nhaving to delve deeply into the molecule API and derive your own molecule\nfor the task, you can simply <i>extend</i> the API of molecules at run-time\nto suite your needs.  While this functionality is perhaps not for the\nfirst-day user, it certainly doesn't require a stout heart.\n\n<P>\nFinally, for advanced programmers, OEChem provides access to nearly all of\nthe detailed control of our functions.  OEChem molecules have a simple API\nwhich can be used to derived your own molecules.  The free-function heavy\nAPI discussed above then lets you have access to much of OEChem's power\nwithout having to implement an enormous molecule API yourself.  Similarly,\nmany of the functions that are wrapped in high level functions (like the\nmolecule readers and writers) are also available directly to the user at\nthe low level.  For instance, while you many use <code>oemolostreams</code> to\nwrite molecules to output, you can also use the <code>OEWriteMDLFile</code>\nfunctions for more direct access.\n\n<P>\nIf you ever have difficulty implementing the functionality you desire with\nthe OEChem interface you already know, look deeper.  It will often be the\ncase that a lower level function will allow you the control you are\nseeking.\n\n<P>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node271.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node273.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node271.html\">33.2 Objects and Free-Functions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node273.html\">A. Bibliography</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38495.0}