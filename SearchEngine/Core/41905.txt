{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Delaunay d R Lifted R Definition An instance DT of type Delaunay d R Lifted R is the nearest and furthest site Delaunay triangulation of a set S of points in some d dimensional space We call S the underlying point set and d or dim the dimension of the underlying space We use dcur to denote the affine dimension of S The data type supports incremental construction of Delaunay triangulations and various kind of query operations in particular nearest and furthest neighbor queries and range queries with spheres and simplices A Delaunay triangulation is a simplicial complex All simplices in the Delaunay triangulation have dimension dcur In the nearest site Delaunay triangulation the circumsphere of any simplex in the triangulation contains no point of S in its interior In the furthest site Delaunay triangulation the circumsphere of any simplex contains no point of S in its exterior If the points in S are co circular then any triangulation of S is a nearest as well as a furthest site Delaunay triangulation of S If the points in S are not co circular then no simplex can be a simplex of both triangulations Accordingly we view DT as either one or two collection s of simplices If the points in S are co circular there is just one collection the set of simplices of some triangulation If the points in S are not co circular there are two collections One collection consists of the simplices of a nearest site Delaunay triangulation and the other collection consists of the simplices of a furthest site Delaunay triangulation For each simplex of maximal dimension there is a handle of type Simplex handle and for each vertex of the triangulation there is a handle of type Vertex handle Each simplex has 1 dcur vertices indexed from to dcur For any simplex s and any index i DT vertex of s i returns the i th vertex of s There may or may not be a simplex t opposite to the vertex of s with index i The function DT opposite simplex s i returns t if it exists and returns Simplex handle otherwise If t exists then s and t share dcur vertices namely all but the vertex with index i of s and the vertex with index DT index of vertex in opposite simplex s i of t Assume that t DT opposite simplex s i exists and let j DT index of vertex in opposite simplex s i Then s DT opposite simplex t j and i DT index of vertex in opposite simplex t j In general a vertex belongs to many simplices Any simplex of DT belongs either to the nearest or to the furthest site Delaunay triangulation or both The test DT simplex of nearest dt simplex s returns true if s belongs to the nearest site triangulation and the test DT simplex of furthest dt simplex s returns true if s belongs to the furthest site triangulation Inherits FromConvex hull d Lifted R Types Delaunay d R Lifted R Simplex handle handles to the simplices of the complex Delaunay d R Lifted R Vertex handle handles to vertices of the complex Delaunay d R Lifted R Point d the point type Delaunay d R Lifted R Sphere d the sphere type enum Delaunay voronoi kind NEAREST FURTHEST interface flags To use these types you can typedef them into the global scope after instantiation of the class We use Vertex handle instead of Delaunay d R Lifted R Vertex handle from now on Similarly we use Simplex handle Delaunay d R Lifted R Point const iterator the iterator for points Delaunay d R Lifted R Vertex iterator the iterator for vertices Delaunay d R Lifted R Simplex iterator the iterator for simplices Creation Delaunay d R Lifted R DT int d R k1 R Lifted R k2 Lifted R creates an instance DT of type Delaunay d The dimension of the underlying space is d and S is initialized to the empty point set The traits class R specifies the models of all types and the implementations of all geometric primitives used by the Delaunay class The traits class Lifted R specifies the models of all types and the implementations of all geometric primitives used by the base class of Delaunay d R Lifted R The second template parameter defaults to the first Delaunay d R Delaunay d R Lifted R R The data type Delaunay d offers neither copy constructor nor assignment operator Requirements R is a model of the concept DelaunayTraits d Lifted R is a model of the concept DelaunayLiftedTraits d Operations All operations below that take a point x as an argument have the common precondition that x dimension DT dimension int DT dimension returns the dimension of ambient space int DT current dimension returns the affine dimension of the current point set i e 1 is S is empty if S consists of a single point 1 if all points of S lie on a common line etcetera bool DT is simplex of nearest Simplex handle s returns true if s is a simplex of the nearest site triangulation bool DT is simplex of furthest Simplex handle s returns true if s is a simplex of the furthest site triangulation Vertex handle DT vertex of simplex Simplex handle s int i returns the vertex associated with the i th node of s Precondition i dcur Point d DT associated point Vertex handle v returns the point associated with vertex v Point d DT point of simplex Simplex handle s int i returns the point associated with the i th vertex of s Precondition i dcur Simplex handle DT opposite simplex Simplex handle s int i returns the simplex opposite to the i th vertex of s Simplex handle if there is no such simplex Precondition i dcur int DT index of vertex in opposite simplex Simplex handle s int i returns the index of the vertex opposite to the i th vertex of s Precondition i dcur Simplex handle DT simplex Vertex handle v returns a simplex of the nearest site triangulation incident to v int DT index Vertex handle v returns the index of v in DT simplex v bool DT contains Simplex handle s Point d x returns true if x is contained in the closure of simplex s bool DT empty decides whether DT is empty void DT clear reinitializes DT to the empty Delaunay triangulation Vertex handle DT insert Point d x inserts point x into DT and returns the corresponding Vertex handle More precisely if there is already a vertex v in DT positioned at x i e associated point v is equal to x then associated point v is changed to x i e associated point v is made identical to x and if there is no such vertex then a new vertex v with associated point v x is added to DT In either case v is returned Simplex handle DT locate Point d x returns a simplex of the nearest site triangulation containing x in its closure returns Simplex handle if x lies outside the convex hull of S Vertex handle DT lookup Point d x if DT contains a vertex v with associated point v x the result is v otherwise the result is Vertex handle Vertex handle DT nearest neighbor Point d x computes a vertex v of DT that is closest to x i e dist x associated point v min dist x associated point u u S std list Vertex handle DT range search Sphere d C returns the list of all vertices contained in the closure of sphere C std list Vertex handle DT range search std vector Point d A returns the list of all vertices contained in the closure of the simplex whose corners are given by A Precondition A must consist of d 1 affinely independent points in base space std list Simplex handle DT all simplices Delaunay voronoi kind k NEAREST returns a list of all simplices of either the nearest or the furthest site Delaunay triangulation of S std list Vertex handle DT all vertices Delaunay voronoi kind k NEAREST returns a list of all vertices of either the nearest or the furthest site Delaunay triangulation of S std list Point d DT all points returns S Point const iterator DT points begin returns the start iterator for points in DT Point const iterator DT points end returns the past the end iterator for points in DT Simplex iterator DT simplices begin Delaunay voronoi kind k NEAREST returns the start iterator for simplices of DT Simplex iterator DT simplices end returns the past the end iterator for simplices of DT Implementation The data type is derived from Convex hull d via the lifting map For a point x in d dimensional space let lift x be its lifting to the unit paraboloid of revolution There is an intimate relationship between the Delaunay triangulation of a point set S and the convex hull of lift S The nearest site Delaunay triangulation is the projection of the lower hull and the furthest site Delaunay triangulation is the upper hull For implementation details we refer the reader to the implementation report available from the CGAL server The space requirement is the same as for convex hulls The time requirement for an insert is the time to insert the lifted point into the convex hull of the lifted points Example The abstract data type Delaunay d has a default instantiation by means of the d dimensional geometric kernel include CGAL Homogeneous d h include CGAL leda integer h include CGAL Delaunay d h typedef leda integer RT typedef CGAL Homogeneous d RT Kernel typedef CGAL Delaunay d Kernel Delaunay d typedef Delaunay d Point d Point typedef Delaunay d Simplex handle Simplex handle typedef Delaunay d Vertex handle Vertex handle int main Delaunay d T 2 Vertex handle v1 T insert Point d 2 11 Traits requirements Delaunay d R Lifted R requires the following types from the kernel traits Lifted R RT Point d Vector d Ray d Hyperplane d and uses the following function objects from the kernel traits Construct hyperplane d Construct vector d Vector to point d Point to vector d Orientation d Orthogonal vector d Oriented side d Has on positive side d Affinely independent d Contained in simplex d Contained in affine hull d Intersect d Lift to paraboloid d Project along d axis d Component accessor d Delaunay d R Lifted R requires the following types from the kernel traits R FT Point d Sphere d and uses the following function objects from the kernel traits R Construct sphere d Squared distance d Point of sphere d Affinely independent d Contained in simplex d Low Dimensional Output Routines include CGAL IO Delaunay d window stream h template typename R typename Lifted R template typename R typename Lifted R void d2 show Delaunay d R Lifted R D CGAL Window stream W typename Delaunay d R Lifted R Delaunay voronoi kind k Delaunay d R Lifted R NEAREST draws the underlying simplicial complex D into window W Precondition dim 2 template typename R typename Lifted R template typename R typename Lifted R void d2 map Delaunay d R Lifted R D GRAPH typename Delaunay d R Lifted R Point d int DTG typename Delaunay d R Lifted R Delaunay voronoi kind k Delaunay d R Lifted R NEAREST constructs a LEDA graph representation of the nearest kind NEAREST or the furthest kind FURTHEST site Delaunay triangulation Precondition dim 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_d_ref/Class_Delaunay_d", "title": "delaunay_d&lt; r, lifted_r &gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_d_ref/Delaunay_d.tex' -->\n<html> <head>  \n<title>Delaunay_d&lt; R, Lifted_R &gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_650\"></A>\n\n<A NAME=\"Cross_link_anchor_651\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_591\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Delaunay_d< R, Lifted_R >\"></A>\n<h2><I>CGAL::Delaunay_d&lt; R, Lifted_R &gt;</I></h2>\n\n\n \n     \n<A NAME=\"Index_anchor_592\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <I>DT</I> of type <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> is the\nnearest and furthest site Delaunay triangulation of a set <I>S</I> of\npoints in some <MATH><I>d</I></MATH>-dimensional space. We call <I>S</I> the underlying\npoint set and <MATH><I>d</I></MATH> or <I>dim</I> the dimension of the underlying space.\nWe use <I>dcur</I> to denote the affine dimension of <I>S</I>.  The data\ntype supports incremental construction of Delaunay triangulations and\nvarious kind of query operations (in particular, nearest and furthest\nneighbor queries and range queries with spheres and simplices).\n<P>\n\nA Delaunay triangulation is a simplicial complex. All simplices in\nthe Delaunay triangulation have dimension <I>dcur</I>.  In the nearest\nsite Delaunay triangulation the circumsphere of any simplex in the\ntriangulation contains no point of <MATH><I>S</I></MATH> in its interior. In the\nfurthest site Delaunay triangulation the circumsphere of any simplex\ncontains no point of <MATH><I>S</I></MATH> in its exterior. If the points in <MATH><I>S</I></MATH> are\nco-circular then any triangulation of <MATH><I>S</I></MATH> is a nearest as well as a\nfurthest site Delaunay triangulation of <MATH><I>S</I></MATH>. If the points in <MATH><I>S</I></MATH> are\nnot co-circular then no simplex can be a simplex of both\ntriangulations. Accordingly, we view <I>DT</I> as either one or two\ncollection(s) of simplices. If the points in <MATH><I>S</I></MATH> are co-circular there\nis just one collection: the set of simplices of some triangulation.\nIf the points in <MATH><I>S</I></MATH> are not co-circular there are two\ncollections. One collection consists of the simplices of a nearest\nsite Delaunay triangulation and the other collection consists of the\nsimplices of a furthest site Delaunay triangulation.\n<P>\n\nFor each simplex of maximal dimension there is a handle of type\n<I>Simplex_handle</I> and for each vertex of the triangulation there is\na handle of type <I>Vertex_handle</I>. Each simplex has <I>1 + dcur</I>\nvertices indexed from <MATH><I>0</I></MATH> to <I>dcur</I>.  For any simplex <MATH><I>s</I></MATH> and any\nindex <MATH><I>i</I></MATH>, <I>DT.vertex_of(s,i)</I> returns the <MATH><I>i</I></MATH>-th vertex of\n<MATH><I>s</I></MATH>. There may or may not be a simplex <MATH><I>t</I></MATH> <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the vertex of\n<MATH><I>s</I></MATH> with index <MATH><I>i</I></MATH>.  The function <I>DT.opposite_simplex(s,i)</I>\nreturns <MATH><I>t</I></MATH> if it exists and returns <I>Simplex_handle()</I>\notherwise. If <MATH><I>t</I></MATH> exists then <MATH><I>s</I></MATH> and <MATH><I>t</I></MATH> share <I>dcur</I> vertices,\nnamely all but the vertex with index <MATH><I>i</I></MATH> of <MATH><I>s</I></MATH> and the vertex with\nindex <I>DT.index_of_vertex_in_opposite_simplex(s,i)</I> of <MATH><I>t</I></MATH>.\nAssume that <MATH><I>t = <I>DT.opposite_simplex(s,i)</I></I></MATH> exists and let <MATH><I>j =\n<I>DT.index_of_vertex_in_opposite_simplex(s,i)</I></I></MATH>. Then <I>s = DT.opposite_simplex(t,j)</I> and <I>i = DT.index_of_vertex_in_opposite_simplex(t,j)</I>.  In general, a vertex\nbelongs to many simplices.\n<P>\n\nAny simplex of <I>DT</I> belongs either to the nearest or to the\nfurthest site Delaunay triangulation or both. The test\n<I>DT.simplex_of_nearest(dt_simplex s)</I> returns true if <I>s</I>\nbelongs to the nearest site triangulation and the test\n<I>DT.simplex_of_furthest(dt_simplex s)</I> returns true if <I>s</I>\nbelongs to the furthest site triangulation.\n<P>\n\n<H3>Inherits From</H3><I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;Lifted_R&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Simplex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handles to the simplices of the complex.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handles to vertices of the complex.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the point type\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::<A HREF=\"../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the sphere type\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Delaunay_voronoi_kind\"></A>\n<A NAME=\"Enum_Delaunay_voronoi_kind\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> { <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A><A NAME=\"Function_Delaunay_voronoi_kind\"></A>\n, <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">FURTHEST</A><A NAME=\"Function_Delaunay_voronoi_kind\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    interface flags\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nTo use these types you can typedef them into the global\nscope after instantiation of the class. We use <I>Vertex_handle</I> instead\nof <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_handle</I> from now on. Similarly we use\n<I>Simplex_handle</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Point_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the iterator for points.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the iterator for vertices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;::Simplex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the iterator for simplices.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt; DT ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    int d,<BR>\n\nR k1 = R(),<BR>\n\nLifted_R k2 = Lifted_R());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an instance <I>DT</I> of type <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A></I>. The\ndimension of the underlying space is <MATH><I>d</I></MATH> and <I>S</I> is initialized to the\nempty point set. The traits class <I>R</I> specifies the models of\nall types and the implementations of all geometric primitives used by\nthe Delaunay class. The traits class <I>Lifted_R</I> specifies the models of\nall types and the implementations of all geometric primitives used by\nthe base class of <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;</I>. The second template parameter defaults to\nthe first: <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R&gt; = <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R, Lifted_R = R &gt;</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe data type <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A></I> offers neither copy constructor nor\nassignment operator.\n<P>\n\n<H3>Requirements</H3>\n<P>\n\n<I>R</I> is a model of the concept <I><A HREF=\"Concept_DelaunayTraits_d.html#Cross_link_anchor_649\">DelaunayTraits_d</A></I>\n  \n<A NAME=\"Index_anchor_593\"></A> \n.                    \n<I>Lifted_R</I> is a model of the concept <I><A HREF=\"Concept_DelaunayLiftedTraits_d.html#Cross_link_anchor_648\">DelaunayLiftedTraits_d</A></I>\n  \n<A NAME=\"Index_anchor_594\"></A> \n.\n<P>\n\n<H3>Operations</H3>\n<P>\n\nAll operations below that take a point <I>x</I> as an argument\nhave the common precondition that <MATH><I><I>x.dimension()</I> = <I>DT.dimension()</I></I></MATH>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension of ambient space\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_current_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.current_dimension ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the affine dimension of the current point set, i.e.,\n<MATH><I>-1</I></MATH> is <MATH><I>S</I></MATH> is empty, <MATH><I>0</I></MATH> if <MATH><I>S</I></MATH> consists of a single point,\n<MATH><I>1</I></MATH> if all points of <MATH><I>S</I></MATH> lie on a common line, etcetera.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_simplex_of_nearest6Simplex_handle_s9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.is_simplex_of_nearest ( Simplex_handle s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>s</I> is a simplex of the nearest site \ntriangulation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_simplex_of_furthest6Simplex_handle_s9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.is_simplex_of_furthest ( Simplex_handle s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>s</I> is a simplex of the furthest site \ntriangulation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertex_of_simplex6Simplex_handle_s+_int_i9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.vertex_of_simplex ( Simplex_handle s,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vertex associated with the <MATH><I>i</I></MATH>-th node of <MATH><I>s</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d_associated_point6Vertex_handle_v9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.associated_point ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point associated with vertex <MATH><I>v</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d_point_of_simplex6Simplex_handle_s+int_i9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.point_of_simplex ( Simplex_handle s, int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point associated with the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_handle_opposite_simplex6Simplex_handle_s+_int_i9_;\"></A>\nSimplex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.opposite_simplex ( Simplex_handle s,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the simplex <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>\n(<I>Simplex_handle()</I> if there is no such simplex).<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_index_of_vertex_in_opposite_simplex6Simplex_handle_s+int_i9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    DT.index_of_vertex_in_opposite_simplex ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Simplex_handle s,<BR>\n\nint i)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of the vertex <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex \nof <MATH><I>s</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_handle_simplex6Vertex_handle_v9_;\"></A>\nSimplex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.simplex ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a simplex of the nearest site triangulation incident \nto <MATH><I>v</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_index6Vertex_handle_v9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.index ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of <MATH><I>v</I></MATH> in <I>DT.simplex(v)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contains6Simplex_handle_s+_const_Point_d__x9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.contains ( Simplex_handle s,  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>x</I> is contained in the closure of simplex <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_empty69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    decides whether <I>DT</I> is empty.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reinitializes <I>DT</I> to the empty Delaunay triangulation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point_d__x9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.insert (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts point <MATH><I>x</I></MATH> into <I>DT</I> and returns the corresponding\n<I>Vertex_handle</I>.  More precisely, if there is already a vertex <I>v</I> in\n<I>DT</I> positioned at <MATH><I>x</I></MATH> (i.e., <I>associated_point(v)</I> is equal to\n<I>x</I>) then <I>associated_point(v)</I> is changed to <I>x</I> (i.e.,\n<I>associated_point(v)</I> is made identical to <I>x</I>) and if there is no\nsuch vertex then a new vertex <MATH><I>v</I></MATH> with <I>associated_point(v) = x</I> is\nadded to <I>DT</I>.  In either case, <MATH><I>v</I></MATH> is returned.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_handle_locate6const_Point_d__x9_;\"></A>\nSimplex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.locate (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a simplex of the nearest site triangulation\ncontaining <I>x</I> in its closure (returns <I>Simplex_handle()</I> if <I>x</I> lies \noutside the convex hull of <MATH><I>S</I></MATH>).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_lookup6const_Point_d__x9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.lookup (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    if <I>DT</I> contains a vertex <MATH><I>v</I></MATH> with <I>associated_point(v) = x</I> \nthe result is <MATH><I>v</I></MATH> otherwise the result is <I>Vertex_handle()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6const_Point_d__x9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes a vertex <MATH><I>v</I></MATH> of <I>DT</I> that is closest to <MATH><I>x</I></MATH>,\ni.e.,<BR>\n\n<MATH><I><I>dist(x,associated_point(v))</I> = </I></MATH><A HREF=\"../NumberTypeSupport_ref/Function_min.html#Cross_link_anchor_1394\">min</A><MATH><I>{ \n<I>dist(x, associated_point(u))</I>  <IMG BORDER=0 WIDTH=2 HEIGHT=29 ALIGN=MIDDLE SRC=\"cc_mid.gif\"> u  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> S }</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Vertex_handle9_range_search6const_Sphere_d__C9_;\"></A>\nstd::list&lt;Vertex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.<A HREF=\"../Point_set_2_ref/Function_range_search.html#Cross_link_anchor_1225\">range_search</A> (  <A HREF=\"../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A> C)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the list of all vertices contained in the closure of \nsphere <MATH><I>C</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Vertex_handle9_range_search6const_std::vector6Point_d9__A9_;\"></A>\nstd::list&lt;Vertex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.<A HREF=\"../Point_set_2_ref/Function_range_search.html#Cross_link_anchor_1225\">range_search</A> (  std::vector&lt;<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&gt; A)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the list of all vertices contained in the closure of\nthe simplex whose corners are given by <I>A</I>.<BR>\n\n<EM>Precondition: </EM><I>A</I> must consist of <MATH><I>d+1</I></MATH> affinely independent points\nin base space.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Simplex_handle9_all_simplices6Delaunay_voronoi_kind_k_=_NEAREST9_;\"></A>\nstd::list&lt;Simplex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.all_simplices ( <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> k = <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list of all simplices of either the nearest or the\n        furthest site Delaunay triangulation of <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Vertex_handle9_all_vertices6Delaunay_voronoi_kind_k_=_NEAREST9_;\"></A>\nstd::list&lt;Vertex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.all_vertices ( <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> k = <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list of all vertices of either the nearest or the\nfurthest site Delaunay triangulation of <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Point_d9_all_points69_;\"></A>\nstd::list&lt;<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.all_points ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <MATH><I>S</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_const_iterator_points_begin69_;\"></A>\nPoint_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.points_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the start iterator for points in <I>DT</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_const_iterator_points_end69_;\"></A>\nPoint_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    DT.points_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past the end iterator for points in <I>DT</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_iterator_simplices_begin6Delaunay_voronoi_kind_k_=_NEAREST9_;\"></A>\nSimplex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.simplices_begin ( <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> k = <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the start iterator for simplices of <I>DT</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_iterator_simplices_end69_;\"></A>\nSimplex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    DT.simplices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past the end iterator for simplices of <I>DT</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe data type is derived from <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I> via\nthe lifting map. For a point <MATH><I>x</I></MATH> in <MATH><I>d</I></MATH>-dimensional space let\n<I>lift(x)</I> be its lifting to the unit paraboloid of revolution. There\nis an intimate relationship between the Delaunay triangulation of a\npoint set <MATH><I>S</I></MATH> and the convex hull of <I>lift(S)</I>: The nearest site\nDelaunay triangulation is the projection of the lower hull and the\nfurthest site Delaunay triangulation is the upper hull.  For\nimplementation details we refer the reader to the implementation\nreport available from the CGAL server.\n<P>\n\nThe space requirement is the same as for convex hulls. The time\nrequirement for an insert is the time to insert the lifted point\ninto the convex hull of the lifted points.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe abstract data type <I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A></I> has a default instantiation by\nmeans of the <MATH><I>d</I></MATH>-dimensional geometric kernel.\n<P>\n\n<pre class=\"Verbatim\">\n#include &lt;CGAL/Homogeneous_d.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388\">leda_integer</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388\">leda_integer</A> RT;\ntypedef CGAL::Homogeneous_d&lt;RT&gt; <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>;\ntypedef <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_650\">CGAL::Delaunay_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>;\ntypedef <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>::<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> Point;\ntypedef <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>::Simplex_handle Simplex_handle;\ntypedef <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>::Vertex_handle Vertex_handle;\n\nint main()\n{\n  <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A> T(2);\n  Vertex_handle v1 = T.insert(<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>(2,11));\n  ...\n}\n</pre>\n<P>\n\n<H3>Traits requirements</H3>\n<P>\n\n<I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> requires the following types from the kernel traits <I>Lifted_R</I>:\n<pre class=\"Verbatim\">\n  RT <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> <A HREF=\"../Kernel_d_ref/Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A> <A HREF=\"../Kernel_d_ref/Class_Ray_d.html#Cross_link_anchor_495\">Ray_d</A> <A HREF=\"../Kernel_d_ref/Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A> \n</pre>\nand uses the following function objects from the kernel traits:\n<pre class=\"Verbatim\">\n  Construct_hyperplane_d\n  Construct_vector_d\n  Vector_to_point_d / Point_to_vector_d\n  Orientation_d\n  Orthogonal_vector_d\n  Oriented_side_d / Has_on_positive_side_d\n  Affinely_independent_d\n  Contained_in_simplex_d\n  Contained_in_affine_hull_d\n  Intersect_d\n  Lift_to_paraboloid_d / Project_along_d_axis_d\n  Component_accessor_d\n</pre>\n<I><A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt; R, Lifted_R &gt;</I> requires the following types from the kernel traits <I>R</I>:\n<pre class=\"Verbatim\">\n  FT <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> <A HREF=\"../Kernel_d_ref/Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A> \n</pre>\nand uses the following function objects from the kernel traits <I>R</I>:\n<pre class=\"Verbatim\">\n  Construct_sphere_d\n  Squared_distance_d\n  Point_of_sphere_d\n  Affinely_independent_d\n  Contained_in_simplex_d\n</pre>\n<P>\n\n<H3>Low Dimensional Output Routines</H3>\ninclude <I>&lt;CGAL/IO/Delaunay_d_window_stream.h&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;typename R, typename Lifted_R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_template_6typename_R+_typename_Lifted_R9_void_d2_show6const_Delaunay_d6R+Lifted_R9__D+_CGAL::Window_stream__W+_typename_Delaunay_d6R+Lifted_R9::Delaunay_voronoi_kind_k_=_Delaunay_d6R+Lifted_R9::NEAREST9_;\"></A>\ntemplate &lt;typename R, typename Lifted_R&gt; void\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    d2_show ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt; D,<BR>\n\n<A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A>&amp; W,<BR>\n\ntypename <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> k = <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    draws the underlying simplicial complex <I>D</I> into window <I>W</I>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dim == 2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;typename R, typename Lifted_R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_template_6typename_R+_typename_Lifted_R9_void_d2_map6const_Delaunay_d6R+Lifted_R9__D+_GRAPH6_typename_Delaunay_d6R+Lifted_R9::Point_d+_int_9__DTG+_typename_Delaunay_d6R+Lifted_R9::Delaunay_voronoi_kind_k_=_Delaunay_d6R+Lifted_R9::NEAREST9_;\"></A>\ntemplate &lt;typename R, typename Lifted_R&gt; void\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    d2_map ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt; D,<BR>\n\nGRAPH&lt; typename <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>, int &gt;&amp; DTG,<BR>\n\ntypename <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">Delaunay_voronoi_kind</A> k = <A HREF=\"Class_Delaunay_d.html#Cross_link_anchor_651\">Delaunay_d</A>&lt;R,Lifted_R&gt;::<A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    constructs a LEDA graph representation of the nearest \n(<I>kind = <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">NEAREST</A></I> or the furthest (<I>kind = <A HREF=\"Class_Delaunay_d#Enum_Delaunay_voronoi_kind\">FURTHEST</A></I>) site\nDelaunay triangulation.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dim() == 2</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<!Next_reference_link_8_6_7!>\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_6!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 41905.0}