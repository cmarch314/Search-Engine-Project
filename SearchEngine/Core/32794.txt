{"text": "View Javadoc 1 package swirl workspace 2 3 4 DOCUMENT ME 5 6 author bpillet 7 8 public interface HostPathCodec 9 1 11 assuming the implementation of this codec has access to the client s 12 request or the requested href this method will figure out which peer 13 was encoded in the href request 14 15 return the peer to proxy to 16 17 String decodeHost 18 19 2 assuming the implementation of this codec has access to the client s 21 request or the requested href this method will figure out the path on 22 the peer to proxy to often replacing swirl with slide 23 24 return the peer to proxy to 25 26 String decodePath 27 28 29 Mangle the href and or the request in a response to the client so that 3 when the client accesses the href again the proxy will know which peer 31 to proxy to 32 33 param href the href to mangle 34 param encodeHost the peer it belongs to 35 36 return the new href 37 38 String encodeHostInPath final String href final String encodeHost 39 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/HostPathCodec.html", "title": "hostpathcodec xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>HostPathCodec xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/HostPathCodec.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <em>/**<em>*</em></em>\n<a name=\"4\" href=\"#4\">4</a>   <em> * DOCUMENT ME!</em>\n<a name=\"5\" href=\"#5\">5</a>   <em> *</em>\n<a name=\"6\" href=\"#6\">6</a>   <em> * @author bpillet</em>\n<a name=\"7\" href=\"#7\">7</a>   <em> */</em>\n<a name=\"8\" href=\"#8\">8</a>   <strong>public</strong> <strong>interface</strong> <a href=\"../../swirl/workspace/HostPathCodec.html\">HostPathCodec</a>\n<a name=\"9\" href=\"#9\">9</a>   {\n<a name=\"10\" href=\"#10\">10</a>      <em>/**<em>*</em></em>\n<a name=\"11\" href=\"#11\">11</a>  <em>     * assuming the implementation of this codec has access to the client's</em>\n<a name=\"12\" href=\"#12\">12</a>  <em>     * request or the requested href, this method will figure out which peer</em>\n<a name=\"13\" href=\"#13\">13</a>  <em>     * was encoded in the href/request</em>\n<a name=\"14\" href=\"#14\">14</a>  <em>     *</em>\n<a name=\"15\" href=\"#15\">15</a>  <em>     * @return the peer to proxy to</em>\n<a name=\"16\" href=\"#16\">16</a>  <em>     */</em>\n<a name=\"17\" href=\"#17\">17</a>      String decodeHost();\n<a name=\"18\" href=\"#18\">18</a>  \n<a name=\"19\" href=\"#19\">19</a>      <em>/**<em>*</em></em>\n<a name=\"20\" href=\"#20\">20</a>  <em>     * assuming the implementation of this codec has access to the client's</em>\n<a name=\"21\" href=\"#21\">21</a>  <em>     * request or the requested href, this method will figure out the path on</em>\n<a name=\"22\" href=\"#22\">22</a>  <em>     * the peer to proxy to, often replacing \"/swirl\" with \"/slide\"</em>\n<a name=\"23\" href=\"#23\">23</a>  <em>     *</em>\n<a name=\"24\" href=\"#24\">24</a>  <em>     * @return the peer to proxy to</em>\n<a name=\"25\" href=\"#25\">25</a>  <em>     */</em>\n<a name=\"26\" href=\"#26\">26</a>      String decodePath();\n<a name=\"27\" href=\"#27\">27</a>  \n<a name=\"28\" href=\"#28\">28</a>      <em>/**<em>*</em></em>\n<a name=\"29\" href=\"#29\">29</a>  <em>     * Mangle the href and/or the request in a response to the client so that</em>\n<a name=\"30\" href=\"#30\">30</a>  <em>     * when the client accesses the href again, the proxy will know which peer</em>\n<a name=\"31\" href=\"#31\">31</a>  <em>     * to proxy to</em>\n<a name=\"32\" href=\"#32\">32</a>  <em>     *</em>\n<a name=\"33\" href=\"#33\">33</a>  <em>     * @param href the href to mangle</em>\n<a name=\"34\" href=\"#34\">34</a>  <em>     * @param encodeHost the peer it belongs to</em>\n<a name=\"35\" href=\"#35\">35</a>  <em>     *</em>\n<a name=\"36\" href=\"#36\">36</a>  <em>     * @return the new href</em>\n<a name=\"37\" href=\"#37\">37</a>  <em>     */</em>\n<a name=\"38\" href=\"#38\">38</a>      String encodeHostInPath(<strong>final</strong> String href, <strong>final</strong> String encodeHost);\n<a name=\"39\" href=\"#39\">39</a>  }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32794.0}