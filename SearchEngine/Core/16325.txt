{"text": "Type Evolution Software System Name TESS Type Evolution Software System Source University of Massachusetts Arcadia Project Brief description TESS supports the evolution of persistent types by semi automatically generating a transformer that can translate between two versions of a set of types More specifically the input to TESS is two source files representing two versions of a set of type definitions TESS compares these files and produces a transformer describing how to translate instances of the old versions of the types into the new versions of the types Ultimately the user will be able to edit these descriptions if they are incorrect but this is not yet implemented Also a runtime environment to interpret these descriptions and actually update the instances either permanently via converting the instances or virtually via screening the instances is planned but does not yet exist Evaluation against applicable general dimensions Availability commercial licensed public domain Not currently available to the public Cost N A Degree of support maturity testing usage N A Speed In the worst case the type comparison algorithm is NP complete However there are several features of the system that make type comparison feasible First there are a several heuristics to reduce the number of types that must be compared For example types with the same names are compared first Given the nature of type changes in evolving systems this will typically offer good results and make it unnecessary to compare these types to other types Other heuristics are also used to limit the number of comparisons Furthermore the user has the ability to limit the kinds of comparisons that are done to prevent an exhaustive search comparison of the types and also can focus the system on the comparison of a pair of old and new types rather than entire sets of types if necessary Computing platforms SunAda 1 1 for Sun SPARC C X windows Pleiades RepoManGen BMS SUIT 2 3 The Simple User Interface Toolkit from the University of Virginia Language compatibilities TESS is currently able to accept input written either in Pleiades Footprint Kernel 23381 SLOC Pleiades front end 529 SLOC User interface C code 18 8 SLOC Total for Pleiades version 25718 SLOC Openness integrability source availability The license includes source Integration is restricted to non commercial use Extensibility The kernel type comparison algorithms use a language independent type model A new version of Tess can be created to compare types in a different language by creating a new front end for that language and a back end capable of reading and writing persistent objects of that language Pedigree ARPA developed N A Contact person s arcadia software cs umass edu or Dr Lori A Clarke clarke cs umass edu Department of Computer Science University of Massachusetts Amherst MA 1 3 413 545 1328 413 545 1249 fax Pointers to literature demos etc David Garlan Charles W Krueger Barbara Staudt Lerner TransformGen Automating the Maintenance of Structure Oriented Environments ACM Transactions on Programming Languages and Systems To appear Adrian Koren Identifying Type Changes in a Collection of Evolving Types Masters project report Computer Science Department University of Massachusetts Amherst May 1992 Barbara Staudt Lerner Extending the Notion of Type Conformance to Interfaces and Type Systems OOPSLA 93 Workshop on Supporting the Evolution of Class Definitions September 1993 Washington DC Demonstration available upon request The Arcadia Project arcadia www ics uci edu Last modified Wed Nov 3 14 44 52 1994", "_id": "http://www.ics.uci.edu/~arcadia/system_pages/tess.html", "title": " type evolution software system", "html": "<HTML>\n<!-- $Id$ -->\n<HEAD>\n<TITLE> Type Evolution Software System</TITLE>\n<META http-equiv=\"Owner\" content=\"Arcadia\">\n<META http-equiv=\"Reply-To\" content=\"arcadia-www@ics.uci.edu\">\n<LINK rev=\"made\" href=\"mailto:arcadia-www@ics.uci.edu\">\n</HEAD><BODY>\n<H1><IMG src=\"http://www.ics.uci.edu/~arcadia/Icons/arcadia-logo.gif\" alt=\"\" align=middle>\n<A NAME=\"SECTION0008700000000000000\"> Type Evolution Software System</A></H1>\n<HR>\n<P>\n<OL><LI> <i>Name:</i><BR>\nTESS (Type Evolution Software System)\n<P>\n<LI> <i>Source:</i><BR>\nUniversity of Massachusetts Arcadia Project\n<P>\n<LI> <i>Brief description:</i><BR>\nTESS supports the evolution of persistent types by\n\tsemi-automatically generating a transformer that can translate\n\tbetween two versions of a set of types.  More specifically,\n\tthe input to TESS is two source files representing two\n\tversions of a set of type definitions.  TESS compares these\n\tfiles and produces a transformer describing how to translate\n\tinstances of the old versions of the types into the new\n\tversions of the types.  Ultimately, the user will be able to\n\tedit these descriptions if they are incorrect, but this is not\n\tyet implemented.  Also, a runtime environment to interpret\n\tthese descriptions and actually update the instances (either\n\tpermanently via converting the instances or virtually via\n\tscreening the instances) is planned, but does not yet exist.\n<P>\n<LI> <i>Evaluation against applicable general dimensions:</i>\n<P>\n<OL><LI> <i>Availability: commercial/licensed/public domain</i>  <BR>\nNot currently available to the public.\n<P>\n<LI> <i>Cost:</i><BR>\nN/A\n<P>\n<LI> <i>Degree of support/maturity/testing/usage:</i> <BR>\nN/A\n<P>\n<LI> <i>Speed:</i><BR>\nIn the worst case, the type comparison algorithm is\n\tNP-complete.  However, there are several features of the\n\tsystem that make type comparison feasible.  First, there are a\n\tseveral heuristics to reduce the number of types that must\n\tbe compared.  For example, types with the same names are\n\tcompared first.  Given the nature of type changes in evolving\n\tsystems, this will typically offer good results and make it\n\tunnecessary to compare these types to other types.  Other\n\theuristics are also used to limit the number of comparisons.\n\tFurthermore, the user has the ability to limit the kinds of\n\tcomparisons that are done to prevent an exhaustive search\n\tcomparison of the types, and also can focus the system on the\n\tcomparison of a pair of old and new types rather than entire\n\tsets of types if necessary.\n<P>\n<LI> <i>Computing platforms:</i><BR>\nSunAda 1.1 for Sun/SPARC\n\tC\n\tX windows\n\tPleiades\n\tRepoManGen\n\tBMS\n\tSUIT 2.3  (The Simple User Interface Toolkit from the\n\t\t   University of Virginia)\n<P>\n<LI> <i>Language compatibilities:</i><BR>\nTESS is currently able to accept input written either in\n\tPleiades.\n<P>\n<LI> <i>Footprint:</i>\n\t<OL><LI> <i>Kernel:</i>                     23381 SLOC\n\t    <LI> <i>Pleiades front-end:</i>           529 SLOC\n\t    <LI> <i>User interface (C code):</i>     1808 SLOC\n\t    <LI> <i>Total for Pleiades version:</i> 25718 SLOC\n\t</OL>\n<P>\n<LI> <i>Openness/integrability/source availability:</i><BR>\nThe license includes source.  Integration is restricted to\n\tnon-commercial use.\n<P>\n<LI> <i>Extensibility:</i><BR>\nThe kernel type comparison algorithms use a language\n\tindependent type model.  A new version of Tess can be created\n\tto compare types in a different language by creating a new\n\tfront-end for that language and a back-end capable of reading\n\tand writing persistent objects of that language.\n<P>\n<LI> <i>Pedigree: ARPA developed? </i><BR>\nN/A\n</OL>\n<P>\n<LI> <i>Contact person(s)</i>\n<blockquote> arcadia-software@cs.umass.edu<BR>\n<BR>\nor<BR>\n<BR>\nDr. Lori A. Clarke (clarke@cs.umass.edu) <BR>\nDepartment of Computer Science<BR>\nUniversity of Massachusetts<BR>\nAmherst, MA 01003<BR>\n(413) 545-1328       <BR>\n(413) 545-1249 - fax  \n</blockquote>\n<P>\n<LI> <i>Pointers to literature, demos, etc.:</i>\n<UL><LI>\tDavid Garlan, Charles W. Krueger, Barbara Staudt Lerner.\n\tTransformGen:  Automating the Maintenance of\n\tStructure-Oriented Environments. ACM Transactions on\n\tProgramming Languages and Systems, To appear.\n<P>\n<LI>\tAdrian Koren, Identifying Type Changes in a Collection of\n\tEvolving Types. Masters project report, Computer Science\n\tDepartment, University of Massachusetts, Amherst, May 1992\n<P>\n<LI> \tBarbara Staudt Lerner. Extending the Notion of Type\n\tConformance to Interfaces and Type Systems. OOPSLA '93\n\tWorkshop on Supporting the Evolution of Class Definitions,\n\tSeptember 1993, Washington, DC.\n<P>\n<LI>   Demonstration available upon request.\n</UL>\n</OL>\n<P>\n<HR>\n<P>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/Arcadia/\">The Arcadia Project\n&lt;arcadia-www@ics.uci.edu&gt;</A><BR>\nLast modified: Wed Nov 30 14:44:52 1994\n</ADDRESS>\n</BODY></HTML>\n", "id": 16325.0}