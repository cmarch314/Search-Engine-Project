{"text": "OEChem C Theory Manual Version 1 3 1 Previous 22 7 Using your own Up 22 Predicate Functors Next 22 9 Predicates as a 22 8 Composition Functors in OEChem Occasionally one may want to use a logical operator to join two or more functors While it is certainly possible to write a quick functor which wraps two or more functors with the magic of templates this is not necessary The functors OEAnd OEOr and OENot are already defined The each have constructors which take the appropriate number of predicates as arguments and generate a single unary predicate Often these functors can be constructed inline The following example demonstrates use of the OEAnd and OENot composition predicates with two of the predefined atom predicates include oechem h include oesystem h include iostream using namespace OESystem using namespace OEChem using namespace std unsigned int Count const OEUnaryPredicate OEAtomBase fcn const OEMolBase mol unsigned int count OEIter OEAtomBase atom for atom mol GetAtoms atom atom if fcn atom count return count int main OEGraphMol mol OEParseSmiles mol c1c O c O c Cl cc1CCCBr cerr Number of Aromatic Oxygens Count OEAnd OEAtomBase OEIsOxygen OEIsAromaticAtom mol endl cerr Number of Non Carbons Count OENot OEAtomBase OEHasAtomicNum 6 mol endl return Download as text The example above is an extension of listing 18 2 above It shows the use of OEChem s composition functors to build expressions from OEChem s predefined atom predicates Thought the explicit template type instantiation isn t strictly necessary in practice it is required to help several parsers make it through the expression As a convenience to programmers three related template free functions have been defined These are operator operator and operator which take one or more OEUnaryPredicates as arguments and return the appropriate composition predicate Not only do these make code much easier to read but in our experience they also make the code easier for C parsers to parse The following example is identical to the previous composition listing except that the composition predicates have been replaced by the operator free functions include oechem h include oesystem h include iostream using namespace OESystem using namespace OEChem using namespace std unsigned int Count const OEUnaryPredicate OEAtomBase fcn const OEMolBase mol unsigned int count OEIter OEAtomBase atom for atom mol GetAtoms atom atom if fcn atom count return count int main OEGraphMol mol OEParseSmiles mol c1c O c O c Cl cc1CCCBr cerr Number of Aromatic Oxygens Count OEIsOxygen OEIsAromaticAtom mol endl cerr Number of Non Carbons Count OEHasAtomicNum 6 mol endl return Download as text OEChem C Theory Manual Version 1 3 1 Previous 22 7 Using your own Up 22 Predicate Functors Next 22 9 Predicates as a Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node179.html", "title": "22.8 composition functors in oechem", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>22.8 Composition Functors in OEChem</title>\n<META NAME=\"description\" CONTENT=\"22.8 Composition Functors in OEChem\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node180.html\">\n<LINK REL=\"previous\" HREF=\"node178.html\">\n<LINK REL=\"up\" HREF=\"node171.html\">\n<LINK REL=\"next\" HREF=\"node180.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node178.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node180.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node178.html\">22.7 Using your own</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node180.html\">22.9 Predicates as a</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0025800000000000000000\">\n22.8 Composition Functors in OEChem</A>\n</H1>\n\n<P>\nOccasionally, one may want to use a logical operator to join two or more\nfunctors.  While it is certainly possible to write a quick functor which\nwraps two or more functors, with the \"magic\" of templates this is not\nnecessary.  The functors <code>OEAnd</code>, <code>OEOr</code> and <code>OENot</code> are\nalready defined.  The each have constructors which take the appropriate\nnumber of predicates as arguments and generate a single unary predicate.\nOften these functors can be constructed inline.\n\n<P>\nThe following example demonstrates use of the <code>OEAnd</code> and <code>OENot</code>\ncomposition predicates with two of the predefined atom predicates\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include \"oesystem.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nunsigned int Count(const OEUnaryPredicate&lt;OEAtomBase&gt; &amp;fcn,\n                   const OEMolBase &amp;mol)\n{\n  unsigned int count = 0;\n  OEIter&lt;OEAtomBase&gt; atom;\n  for(atom = mol.GetAtoms();atom;++atom)\n    if(fcn(*atom))\n      ++count;\n\n  return count;\n}\n\nint main()\n{\n  OEGraphMol mol;\n  OEParseSmiles(mol, \"c1c(O)c(O)c(Cl)cc1CCCBr\");\n\n  cerr &lt;&#60; \"Number of Aromatic Oxygens = \" &lt;&#60;\n          Count(OEAnd&lt;OEAtomBase&gt;(OEIsOxygen(),OEIsAromaticAtom()),mol) &lt;&#60; endl;\n\n  cerr &lt;&#60; \"Number of Non-Carbons = \" &lt;&#60;\n          Count(OENot&lt;OEAtomBase&gt;(OEHasAtomicNum(6)),mol) &lt;&#60; endl;\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch22-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe example above is an extension of listing 18.2 above.  It shows the use\nof OEChem's composition functors to build expressions from OEChem's\npredefined atom predicates.  Thought the explicit template type\ninstantiation isn't strictly necessary, in practice it is required to help\nseveral parsers make it through the expression.\n\n<P>\nAs a convenience to programmers, three related template free functions have\nbeen defined.  These are <code>operator &amp;&amp;</code>, <code>operator ||</code> and\n<code>operator !</code> which take one or more OEUnaryPredicates as arguments and\nreturn the appropriate composition predicate.  Not only do these make code much\neasier to read, but in our experience, they also make the code easier for C++\nparsers to parse.\n\n<P>\nThe following example is identical to the previous composition listing except\nthat the composition predicates have been replaced by the operator\nfree-functions.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include \"oesystem.h\"\n\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nunsigned int Count(const OEUnaryPredicate&lt;OEAtomBase&gt; &amp;fcn,\n                   const OEMolBase &amp;mol)\n{\n  unsigned int count = 0;\n  OEIter&lt;OEAtomBase&gt; atom;\n  for(atom = mol.GetAtoms();atom;++atom)\n    if(fcn(*atom))\n      ++count;\n\n  return count;\n}\n\nint main()\n{\n  OEGraphMol mol;\n  OEParseSmiles(mol, \"c1c(O)c(O)c(Cl)cc1CCCBr\");\n\n  cerr &lt;&#60; \"Number of Aromatic Oxygens = \" &lt;&#60;\n          Count(OEIsOxygen() &amp;&amp; OEIsAromaticAtom(),mol) &lt;&#60; endl;\n\n  cerr &lt;&#60; \"Number of Non-Carbons = \" &lt;&#60;\n          Count(!OEHasAtomicNum(6),mol) &lt;&#60; endl;\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch22-4.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node178.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node180.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node178.html\">22.7 Using your own</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node180.html\">22.9 Predicates as a</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38536.0}