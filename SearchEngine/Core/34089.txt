{"text": "View Javadoc 1 2 Created on Mar 12 2 5 3 4 5 package edu uci isr impromptu pie 6 7 import java awt Color 8 import java awt Point 9 import java io File 1 import java util ArrayList 11 import java util Collections 12 import java util HashMap 13 import java util Iterator 14 import java util List 15 import java util Map 16 17 import javax jmdns ServiceInfo 18 19 import org apache batik util SVGConstants 2 import org apache commons logging Log 21 import org apache commons logging LogFactory 22 import org w3c dom Element 23 import org w3c dom NodeList 24 import org w3c dom events EventTarget 25 import org w3c dom svg SVGDocument 26 27 import edu uci isr impromptu common Peer 28 import edu uci isr impromptu security SecurityConstants 29 3 31 A slice of pie for each peer 32 33 author Jie Ren 34 35 public class SlicePeer implements Peer 36 private static Log log LogFactory getLog SlicePeer class 37 38 39 The name of the peer 4 41 private String name 42 43 The owning pie 44 45 private Pie owner 46 47 The document of the pie 48 49 private SVGDocument document 5 51 The number of present peers 52 53 private int peers 54 55 The cardinal position of this pie from to peers 1 56 57 private int cardinal 58 59 Is this peer the local peer for the pie 6 61 private boolean isLocal true 62 63 The color for this peer 64 65 private Color color 66 67 The group element for arcs that separate levels 68 69 private Element levels 7 71 The separating arcs 72 73 private Element arcs new Element SecurityConstants LEVELS 74 75 The group for dots of files 76 77 private Element files 78 79 A map that maps a file name to a dot element 8 81 private Map fileDots Collections synchronizedMap new HashMap 82 83 The text of the peer name 84 85 private Element textElement 86 87 The host address of this slice 88 89 private String hostAddress 9 91 The service info of this slice 92 93 private ServiceInfo si 94 95 Has this slice been created and displayed in the pie 96 The concurrency of JmDNS and Batik makes this necessary 97 98 private boolean createdSVG false 99 1 1 1 Create a new peer 1 2 1 3 param name the name of the peer 1 4 param owner the owning SVGDocument 1 5 param peers the number of present peers 1 6 param cardinal the relative position of this peer 1 7 param isLocal is this peer the local peer 1 8 param color the color of the peer 1 9 param hostAddress the host address for this slice 11 param si the service info for this peer 111 param doCreation whether we should do creation in the constructor 112 113 public SlicePeer String name Pie owner int peers int cardinal 114 boolean isLocal Color color String hostAddress ServiceInfo si boolean doCreation 115 name name 116 owner owner 117 document owner getDocument 118 isLocal isLocal 119 color color 12 hostAddress hostAddress 121 si si 122 123 peers peers 124 cardinal cardinal 125 126 if log null 127 128 129 if doCreation 13 create 131 132 133 134 The second stage cration This should be called in Batik updater manager 135 136 public void create 137 doCreate 138 setPosition peers cardinal 139 createdSVG true 14 141 142 private void doCreate 143 This can be enhanced with CSS XSLT and XUI 144 create the g element 145 levels document createElementNS Pie SVG NS SVGConstants SVG G TAG 146 levels setAttributeNS null SVGConstants SVG ID ATTRIBUTE name 147 148 create an arc for each level 149 for int i i SecurityConstants LEVELS i 15 151 create path for an arc 152 arcs i document createElementNS Pie SVG NS SVGConstants SVG PATH TAG 153 the stroke attribute 154 arcs i setAttributeNS null SVGConstants CSS STROKE PROPERTY 155 Configuration COLOR STROKE 156 the fill attribute 157 String c Configuration COLOR FILL 158 if i 159 This is for the outermost colorful marker 16 c PieUtils getRGBString color 161 162 arcs i setAttributeNS null SVGConstants CSS FILL PROPERTY c 163 levels appendChild arcs i 164 165 166 creat text element 167 textElement Element owner getTextTemplate cloneNode true 168 remove the duplicate id 169 textElement removeAttribute SVGConstants SVG ID ATTRIBUTE 17 levels appendChild textElement 171 172 Create a group for the files 173 files document createElementNS Pie SVG NS SVGConstants SVG G TAG 174 files setAttributeNS null SVGConstants SVG ID ATTRIBUTE getFilesID 175 176 owner getPeersGroup appendChild levels 177 owner getFilesGroup appendChild files 178 179 if isLocal 18 181 Change the color of the mask layer 182 String c PieUtils getRGBString color 183 Element localMask owner getLocalMask 184 localMask setAttribute SVGConstants SVG STYLE ATTRIBUTE 185 fill c stroke none opacity 3 186 187 188 189 19 Has this slice been created and displayed in the pie 191 return true if it is created and visisble false otherwise 192 193 public boolean isCreatedSVG 194 return createdSVG 195 196 197 198 Set the position of this peer relative to other peers 199 param peers the nubmer of present peers 2 param cardinal the relative position of this peer in the range from 1 to peers 2 1 2 2 public void setPosition int peers int cardinal 2 3 2 4 peers peers 2 5 cardinal cardinal 2 6 if levels null 2 7 The SVG content has not been created yet so just record the position 2 8 return 2 9 21 211 double startAngle cardinal 1 Configuration CIRCLE peers 212 double arcAngle Configuration CIRCLE peers 213 if peers 1 need this trick for a single peer otherwise nothing is shown 214 arcAngle Configuration CIRCLE ALMOST 215 216 tranform the group 217 String transform PieUtils getTranslateAndRotateString Configuration CENTER X 218 Configuration CENTER Y startAngle 219 levels setAttributeNS null SVGConstants SVG TRANSFORM ATTRIBUTE transform 22 221 the name should be redisplayed 222 displayName 223 224 change path for each ring 225 for int i i SecurityConstants LEVELS i 226 227 the d attribute 228 String d PieUtils calculateDforClosePath PieUtils getRadius i arcAngle 229 arcs i setAttributeNS null SVGConstants SVG D ATTRIBUTE d 23 231 232 change tranform for files 233 PieUtils setTranslateCenter files 234 235 change the dots 236 synchronized fileDots 237 for Iterator it fileDots values iterator it hasNext 238 239 Dot dot Dot it next 24 dot updateCardinal peers cardinal 241 242 243 244 if isLocal local mask should also change 245 paths for arcs have changed 246 Element clone Element levels cloneNode true 247 the replication under local mask should not have a duplicate id 248 clone removeAttribute SVGConstants SVG ID ATTRIBUTE 249 leave out the outermost colorful ring when masking 25 NodeList nl clone getElementsByTagName SVGConstants SVG PATH TAG 251 clone removeChild nl item 252 for other path don t use its fill or stroke use localMask s 253 for int i i nl getLength i 254 Element child Element nl item i 255 child removeAttribute SVGConstants SVG FILL ATTRIBUTE 256 child removeAttribute SVGConstants SVG STROKE ATTRIBUTE 257 258 259 change the local mask 26 Element localMask owner getLocalMask 261 NodeList childlist localMask getElementsByTagName SVGConstants SVG G TAG 262 if childlist getLength 263 suppose there is only g child 264 localMask replaceChild clone childlist item 265 266 else 267 localMask appendChild clone 268 269 27 271 272 273 Get the cardinal of this peer 274 return cardinal 275 276 public int getCardinal 277 return cardinal 278 279 28 281 Whether an angle is within this slice 282 param theta the angle 283 return true if the angle is within the slice false if it is outside 284 285 public boolean containsAngle double theta 286 double sliceSize Configuration CIRCLE peers 287 return cardinal 1 sliceSize theta 288 theta cardinal sliceSize 289 29 291 292 Display the name of this peer 293 294 295 public void displayName 296 To retain the old look feel use ring the outmost ring 297 thus the name is displayed outside the pie 298 To minimize the margin outside the pie use ring 1 thus the name 299 is displayed in the colorful marker 3 In this case should use a default black fill color for fonts 3 1 and the letter g will invade the inner rings 3 2 Configuration SIZE MARGIN PEER can also be adjusted 3 3 int ring Configuration getSizeRingPeer 3 4 change the color of the name 3 5 if we put the name in the colorful marker ring 1 then just use the default black 3 6 if ring 3 7 textElement setAttributeNS null SVGConstants CSS FILL PROPERTY PieUtils getRGBString color 3 8 3 9 when number of peers change the text path would also change 31 owner getTextPath setAttributeNS null SVGConstants SVG D ATTRIBUTE 311 PieUtils calculateDforPath PieUtils getRadius ring peers 312 set the text for the name 313 Since the text path is only hrefed we must always set the name 314 so Batik would notice the change and redraw with the new text path 315 textElement getElementsByTagName SVGConstants SVG TEXT PATH TAG 316 item getFirstChild setNodeValue name 317 318 319 32 Clear the display of this peer from the owner s peers group and files group 321 322 public void clear 323 owner getPeersGroup removeChild levels 324 owner getFilesGroup removeChild files 325 326 327 328 Get the name of this peer for use in a more human readable manner 329 return the name of the peer 33 331 public String getName 332 return name 333 334 335 336 Set color for this peer slice 337 param c the color 338 339 public void setColor Color c 34 color c 341 String sc PieUtils getRGBString color 342 343 color of the name 344 textElement setAttributeNS null SVGConstants CSS FILL PROPERTY sc 345 346 color for the outter ring 347 arcs setAttributeNS null SVGConstants CSS FILL PROPERTY sc 348 349 color for local mask 35 if isLocal 351 Element localMask owner getLocalMask 352 localMask setAttribute SVGConstants SVG STYLE ATTRIBUTE 353 fill sc stroke none opacity 1 354 355 356 color of the dots 357 synchronized fileDots 358 for Iterator i fileDots values iterator i hasNext 359 Dot d Dot i next 36 d setColor color 361 362 363 364 365 366 Update ring colors for a given peer 367 param p the the peer that has changed color 368 param c the new color 369 37 public void updateRingColor SlicePeer p Color c 371 synchronized fileDots 372 for Iterator i fileDots values iterator i hasNext 373 Dot d Dot i next 374 SlicePeer lastAccessPeer d getLastAccessPeer 375 if lastAccessPeer null 376 if lastAccessPeer equals p 377 d setRingColor c 378 379 38 381 382 383 384 385 Get color of the peer 386 return the color 387 388 public Color getColor 389 return color 39 391 392 393 Get the id of the g element that holds the files for this peer 394 return an id in the form of peerName files 395 396 private String getFilesID 397 return name files 398 399 4 4 1 Get whether this peer is the local peer 4 2 return true if it is a local peer false if it is a remote peer 4 3 4 4 public boolean isLocal 4 5 return isLocal 4 6 4 7 4 8 4 9 Add a new file 41 411 param file a file from the local file system 412 param p the location of the file 413 return the Dot If there was no file with the name then the dot is a 414 newly created dot Otherwise it is the existing dot updated with the 415 new location 416 417 public Dot addFile File file Point p 418 419 Dot result null 42 String fileName file getName 421 if fileDots containsKey fileName 422 result Dot fileDots get fileName 423 result updateLocation p 424 425 else 426 result createFile file getName 427 result setLocalPath file getAbsolutePath 428 result setLocation p peers cardinal 429 43 return result 431 432 433 434 Add a new file 435 param fileName the name of the file 436 param radius the relative radius of the file 437 param angle the relative angle of the file 438 return the Dot If there was no file with the name then the dot is a 439 newly created dot Otherwise it is the existing dot updated with the 44 new location 441 442 public Dot addFile String fileName double radius double angle 443 444 Dot result null 445 if fileDots containsKey fileName 446 result Dot fileDots get fileName 447 result updateLocation radius angle 448 449 else 45 result createFile fileName 451 result setLocation radius angle peers cardinal 452 453 return result 454 455 456 457 Move an existing file 458 param fileName the name of the file 459 param radius the new relative radius of the file 46 param angle the new relative angle of the file 461 return the Dot if the file is successfully moved null if there is no such file 462 463 public Dot moveFile String fileName double radius double angle 464 465 if fileDots containsKey fileName 466 return null 467 Dot dot Dot fileDots get fileName 468 dot updateLocation radius angle 469 return dot 47 471 472 473 Create a dot for a file 474 param fileName the name for the file 475 return a Dot that represents the file 476 477 public Dot createFile String fileName 478 Dot dot new Dot document fileName color this 479 EventTarget et EventTarget dot getGroupElement 48 These two are for showing and hiding the tool tip 481 et addEventListener SVGConstants SVG MOUSEOVER EVENT TYPE owner false 482 et addEventListener SVGConstants SVG MOUSEOUT EVENT TYPE owner false 483 for handling click 484 et addEventListener SVGConstants SVG CLICK EVENT TYPE owner false 485 for handling drag n drop 486 et addEventListener SVGConstants SVG MOUSEDOWN EVENT TYPE owner false 487 Listen for Esc 488 et addEventListener SVGConstants SVG KEYPRESS EVENT TYPE owner false 489 49 files appendChild dot getGroupElement 491 fileDots put fileName dot 492 return dot 493 494 495 496 Get a dot element corresponding to a file name 497 param fileName the name of the file 498 return the Dot corresponding to this name null if there is no correspondance 499 5 public Dot getFile String fileName 5 1 return Dot fileDots get fileName 5 2 5 3 5 4 5 5 Remove a dot corresponding to a file name 5 6 param fileName the name of the file 5 7 5 8 public void removeFile String fileName 5 9 Dot d Dot fileDots get fileName 51 files removeChild d getGroupElement 511 fileDots remove fileName 512 513 514 Mostly dummy implementation to fit the role of Peer 515 516 Whether the peer owns a file 517 param fileName the name of the file 518 return true if the peer owns it false if it does not own it 519 52 public boolean owns String fileName 521 return fileDots containsKey fileName 522 523 524 525 Get a list of changed files that owned by this local peer 526 527 return a list of changed files 528 529 public List getChangedFiles 53 List changed new ArrayList 531 synchronized fileDots 532 for Iterator i fileDots values iterator i hasNext 533 Dot d Dot i next 534 if d getFileModified 535 changed add d 536 537 538 539 return changed 54 541 542 543 Get a list of persistent files 544 return a list that contains persistent files for this peer The 545 list is empty if this peer has not persistent files 546 547 public List getPersistentFiles 548 List persistent new ArrayList 549 synchronized fileDots 55 for Iterator i fileDots values iterator i hasNext 551 Dot d Dot i next 552 if d getSharingLevel SecurityConstants LEVEL PERSISTENT 553 persistent add d 554 555 556 557 return persistent 558 559 56 561 Change the dots size 562 param shrink if true reduce the size by 1 if false enlarge the size by 1 563 564 public void changeDotSize boolean shrink 565 synchronized fileDots 566 for Iterator i fileDots values iterator i hasNext 567 Dot d Dot i next 568 d changeSize shrink 569 57 571 572 573 574 Get the service information received from JmDNS 575 return the service inforamtion 576 577 public ServiceInfo getServiceInfo 578 return si 579 58 581 582 get the host address of the peer 583 return the host address of the peer 584 585 public String getHostAddress 586 return hostAddress 587 588 589 59 get the port of the peer 591 return the port 592 593 public int getPort 594 return 1 595 596 597 598 The peer has added a file 599 6 param fileName the name of the newly added file 6 1 param radius the relative radius between and 1 of the newly added file 6 2 This might be null if another application creates the file 6 3 param angle the relative angle between and 1 of the newly added file 6 4 This might be null if another application creates the file 6 5 return true if there was not such a file false otherwise 6 6 6 7 public boolean fileAdded String fileName double radius double angle 6 8 boolean result false 6 9 if fileDots containsKey fileName 61 addFile fileName radius angle 611 result true 612 613 return result 614 615 616 617 The peer has moved a file 618 619 param fileName the name of the newly moved file 62 param radius the new relative radius between and 1 of the newly added file 621 param angle the new relative angle between and 1 of the newly added file 622 return true if there was not such a file false otherwise 623 624 public boolean fileMoved String fileName double radius double angle 625 boolean result false 626 if fileDots containsKey fileName 627 moveFile fileName radius angle 628 result true 629 63 return result 631 632 633 634 The peer has removed a file 635 636 param fileName the name of the newly removed file 637 return true if there was a file false otherwise 638 639 public boolean fileRemoved String fileName 64 boolean result false 641 if fileDots containsKey fileName 642 removeFile fileName 643 result true 644 645 return result 646 647 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pie/SlicePeer.html", "title": "slicepeer xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>SlicePeer xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../../apidocs/edu/uci/isr/impromptu/pie/SlicePeer.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Mar 12, 2005</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> *</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> */</em>\n<a name=\"5\" href=\"#5\">5</a>   <strong>package</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/package-summary.html\">edu.uci.isr.impromptu.pie</a>;\n<a name=\"6\" href=\"#6\">6</a>   \n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.awt.Color;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.awt.Point;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> java.io.File;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> java.util.ArrayList;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> java.util.Collections;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> java.util.HashMap;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> java.util.Iterator;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> java.util.List;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> java.util.Map;\n<a name=\"16\" href=\"#16\">16</a>  \n<a name=\"17\" href=\"#17\">17</a>  <strong>import</strong> javax.jmdns.ServiceInfo;\n<a name=\"18\" href=\"#18\">18</a>  \n<a name=\"19\" href=\"#19\">19</a>  <strong>import</strong> org.apache.batik.util.SVGConstants;\n<a name=\"20\" href=\"#20\">20</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"21\" href=\"#21\">21</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"22\" href=\"#22\">22</a>  <strong>import</strong> org.w3c.dom.Element;\n<a name=\"23\" href=\"#23\">23</a>  <strong>import</strong> org.w3c.dom.NodeList;\n<a name=\"24\" href=\"#24\">24</a>  <strong>import</strong> org.w3c.dom.events.EventTarget;\n<a name=\"25\" href=\"#25\">25</a>  <strong>import</strong> org.w3c.dom.svg.SVGDocument;\n<a name=\"26\" href=\"#26\">26</a>  \n<a name=\"27\" href=\"#27\">27</a>  <strong>import</strong> edu.uci.isr.impromptu.common.Peer;\n<a name=\"28\" href=\"#28\">28</a>  <strong>import</strong> edu.uci.isr.impromptu.security.SecurityConstants;\n<a name=\"29\" href=\"#29\">29</a>  \n<a name=\"30\" href=\"#30\">30</a>  <em>/**<em>*</em></em>\n<a name=\"31\" href=\"#31\">31</a>  <em> * A slice of pie for each peer</em>\n<a name=\"32\" href=\"#32\">32</a>  <em> * </em>\n<a name=\"33\" href=\"#33\">33</a>  <em> * @author Jie Ren</em>\n<a name=\"34\" href=\"#34\">34</a>  <em> */</em>\n<a name=\"35\" href=\"#35\">35</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> implements <a href=\"../../../../../edu/uci/isr/impromptu/common/Peer.html\">Peer</a> {\n<a name=\"36\" href=\"#36\">36</a>      <strong>private</strong> <strong>static</strong> Log \t\tlog = LogFactory.getLog(SlicePeer.<strong>class</strong>);\n<a name=\"37\" href=\"#37\">37</a>      \n<a name=\"38\" href=\"#38\">38</a>      <em>/**<em>*</em></em>\n<a name=\"39\" href=\"#39\">39</a>  <em>     * The name of the peer</em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     */</em>\n<a name=\"41\" href=\"#41\">41</a>      <strong>private</strong>\t\tString\t\t\tname;\n<a name=\"42\" href=\"#42\">42</a>      <em>/**<em>*</em></em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * The owning pie</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     */</em>\n<a name=\"45\" href=\"#45\">45</a>      <strong>private</strong>\t\tPie\t\t\t\towner;\n<a name=\"46\" href=\"#46\">46</a>      <em>/**<em>*</em></em>\n<a name=\"47\" href=\"#47\">47</a>  <em>     * The document of the pie</em>\n<a name=\"48\" href=\"#48\">48</a>  <em>     */</em>\n<a name=\"49\" href=\"#49\">49</a>      <strong>private</strong>\t\tSVGDocument\t\tdocument;\n<a name=\"50\" href=\"#50\">50</a>      <em>/**<em>*</em></em>\n<a name=\"51\" href=\"#51\">51</a>  <em>     * The number of present peers</em>\n<a name=\"52\" href=\"#52\">52</a>  <em>     */</em>\n<a name=\"53\" href=\"#53\">53</a>      <strong>private</strong>\t\t<strong>int</strong>\t\t\t\tpeers;\n<a name=\"54\" href=\"#54\">54</a>      <em>/**<em>*</em></em>\n<a name=\"55\" href=\"#55\">55</a>  <em>     * The cardinal position of this pie, from 0 to peers - 1 </em>\n<a name=\"56\" href=\"#56\">56</a>  <em>     */</em>\n<a name=\"57\" href=\"#57\">57</a>      <strong>private</strong>     <strong>int</strong>\t\t\t\tcardinal;\n<a name=\"58\" href=\"#58\">58</a>      <em>/**<em>*</em></em>\n<a name=\"59\" href=\"#59\">59</a>  <em>     * Is this peer the local peer for the pie?</em>\n<a name=\"60\" href=\"#60\">60</a>  <em>     */</em>\n<a name=\"61\" href=\"#61\">61</a>      <strong>private</strong>\t\t<strong>boolean</strong>\t\t\tisLocal = <strong>true</strong>;\n<a name=\"62\" href=\"#62\">62</a>      <em>/**<em>*</em></em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     * The color for this peer</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     */</em>\n<a name=\"65\" href=\"#65\">65</a>      <strong>private</strong>\t\tColor\t\t\tcolor;\n<a name=\"66\" href=\"#66\">66</a>      <em>/**<em>*</em></em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     * The group element for arcs that separate levels </em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     */</em>\n<a name=\"69\" href=\"#69\">69</a>      <strong>private</strong> \tElement\t\t\tlevels;\n<a name=\"70\" href=\"#70\">70</a>      <em>/**<em>*</em></em>\n<a name=\"71\" href=\"#71\">71</a>  <em>     * The separating arcs.</em>\n<a name=\"72\" href=\"#72\">72</a>  <em>     */</em>\n<a name=\"73\" href=\"#73\">73</a>      <strong>private</strong> \tElement[]\t\tarcs = <strong>new</strong> Element[SecurityConstants.LEVELS];\n<a name=\"74\" href=\"#74\">74</a>      <em>/**<em>*</em></em>\n<a name=\"75\" href=\"#75\">75</a>  <em>     * The group for dots of files</em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     */</em>\n<a name=\"77\" href=\"#77\">77</a>      <strong>private</strong>\t\tElement\t\t\tfiles;\n<a name=\"78\" href=\"#78\">78</a>      <em>/**<em>*</em></em>\n<a name=\"79\" href=\"#79\">79</a>  <em>     * A map that maps a file name to a dot element</em>\n<a name=\"80\" href=\"#80\">80</a>  <em>     */</em>\n<a name=\"81\" href=\"#81\">81</a>      <strong>private</strong> \tMap \t\t\tfileDots = Collections.synchronizedMap(<strong>new</strong> HashMap());\n<a name=\"82\" href=\"#82\">82</a>      <em>/**<em>*</em></em>\n<a name=\"83\" href=\"#83\">83</a>  <em>     * The text of the peer name</em>\n<a name=\"84\" href=\"#84\">84</a>  <em>     */</em>\n<a name=\"85\" href=\"#85\">85</a>      <strong>private</strong> \tElement\t\t\ttextElement;\n<a name=\"86\" href=\"#86\">86</a>      <em>/**<em>*</em></em>\n<a name=\"87\" href=\"#87\">87</a>  <em>     * The host address of this slice</em>\n<a name=\"88\" href=\"#88\">88</a>  <em>     */</em>\n<a name=\"89\" href=\"#89\">89</a>      <strong>private</strong>\t\tString\t\t\thostAddress;\n<a name=\"90\" href=\"#90\">90</a>      <em>/**<em>*</em></em>\n<a name=\"91\" href=\"#91\">91</a>  <em>     * The service info of this slice</em>\n<a name=\"92\" href=\"#92\">92</a>  <em>     */</em>\n<a name=\"93\" href=\"#93\">93</a>      <strong>private</strong> \tServiceInfo\t\tsi;\n<a name=\"94\" href=\"#94\">94</a>      <em>/**<em>*</em></em>\n<a name=\"95\" href=\"#95\">95</a>  <em>     * Has this slice been created and displayed in the pie?</em>\n<a name=\"96\" href=\"#96\">96</a>  <em>     * The concurrency of JmDNS and Batik makes this necessary</em>\n<a name=\"97\" href=\"#97\">97</a>  <em>     */</em>\n<a name=\"98\" href=\"#98\">98</a>      <strong>private</strong>\t\t<strong>boolean</strong>\t\t\tcreatedSVG = false;\n<a name=\"99\" href=\"#99\">99</a>      \n<a name=\"100\" href=\"#100\">100</a>     <em>/**<em>*</em></em>\n<a name=\"101\" href=\"#101\">101</a> <em>     * Create a new peer</em>\n<a name=\"102\" href=\"#102\">102</a> <em>     *  </em>\n<a name=\"103\" href=\"#103\">103</a> <em>     * @param _name\t\t\tthe name of the peer</em>\n<a name=\"104\" href=\"#104\">104</a> <em>     * @param _owner\t\tthe owning SVGDocument</em>\n<a name=\"105\" href=\"#105\">105</a> <em>     * @param _peers\t\tthe number of present peers</em>\n<a name=\"106\" href=\"#106\">106</a> <em>     * @param _cardinal \tthe relative position of this peer</em>\n<a name=\"107\" href=\"#107\">107</a> <em>     * @param _isLocal  \tis this peer the local peer?</em>\n<a name=\"108\" href=\"#108\">108</a> <em>     * @param _color    \tthe color of the peer</em>\n<a name=\"109\" href=\"#109\">109</a> <em>     * @param _hostAddress  the host address for this slice</em>\n<a name=\"110\" href=\"#110\">110</a> <em>     * @param _si \t\t\tthe service info for this peer</em>\n<a name=\"111\" href=\"#111\">111</a> <em>     * @param doCreation \twhether we should do creation in the constructor</em>\n<a name=\"112\" href=\"#112\">112</a> <em>     */</em>\n<a name=\"113\" href=\"#113\">113</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a>(String\t_name, <a href=\"../../../../../edu/uci/isr/impromptu/pie/Pie.html\">Pie</a> _owner, <strong>int</strong> _peers, <strong>int</strong> _cardinal, \n<a name=\"114\" href=\"#114\">114</a>             \t<strong>boolean</strong> _isLocal, Color _color, String _hostAddress, ServiceInfo _si, <strong>boolean</strong> doCreation) {\n<a name=\"115\" href=\"#115\">115</a>         name = _name;\n<a name=\"116\" href=\"#116\">116</a>         owner = _owner;\n<a name=\"117\" href=\"#117\">117</a>         document = owner.getDocument();\n<a name=\"118\" href=\"#118\">118</a>         isLocal = _isLocal;\n<a name=\"119\" href=\"#119\">119</a>         color = _color;\n<a name=\"120\" href=\"#120\">120</a>         hostAddress = _hostAddress;\n<a name=\"121\" href=\"#121\">121</a>         si = _si;\n<a name=\"122\" href=\"#122\">122</a> \n<a name=\"123\" href=\"#123\">123</a>         peers = _peers;\n<a name=\"124\" href=\"#124\">124</a>         cardinal = _cardinal;\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>         <strong>if</strong> (log==<strong>null</strong>) {\n<a name=\"127\" href=\"#127\">127</a>         }\n<a name=\"128\" href=\"#128\">128</a>         \n<a name=\"129\" href=\"#129\">129</a>         <strong>if</strong> (doCreation)\n<a name=\"130\" href=\"#130\">130</a>             create();\n<a name=\"131\" href=\"#131\">131</a>     }\n<a name=\"132\" href=\"#132\">132</a>     \n<a name=\"133\" href=\"#133\">133</a>     <em>/**<em>*</em></em>\n<a name=\"134\" href=\"#134\">134</a> <em>     * The second stage cration. This should be called in Batik updater manager. </em>\n<a name=\"135\" href=\"#135\">135</a> <em>     */</em>\n<a name=\"136\" href=\"#136\">136</a>     <strong>public</strong> <strong>void</strong> create() {\n<a name=\"137\" href=\"#137\">137</a>         doCreate();\n<a name=\"138\" href=\"#138\">138</a>         setPosition(peers, cardinal);\n<a name=\"139\" href=\"#139\">139</a>         createdSVG = <strong>true</strong>;\n<a name=\"140\" href=\"#140\">140</a>     }\n<a name=\"141\" href=\"#141\">141</a> \n<a name=\"142\" href=\"#142\">142</a>     <strong>private</strong> <strong>void</strong> doCreate() {\n<a name=\"143\" href=\"#143\">143</a>         <em class=\"comment\">// This can be enhanced with CSS, XSLT, and XUI...</em>\n<a name=\"144\" href=\"#144\">144</a>         <em class=\"comment\">// create the &lt;g> element</em>\n<a name=\"145\" href=\"#145\">145</a>         levels = document.createElementNS(Pie.SVG_NS, SVGConstants.SVG_G_TAG);\n<a name=\"146\" href=\"#146\">146</a>         levels.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_ID_ATTRIBUTE, name);\n<a name=\"147\" href=\"#147\">147</a> \n<a name=\"148\" href=\"#148\">148</a>         <em class=\"comment\">// create an arc for each level</em>\n<a name=\"149\" href=\"#149\">149</a>         <strong>for</strong>(<strong>int</strong> i = 0; i &lt; SecurityConstants.LEVELS; i++)\n<a name=\"150\" href=\"#150\">150</a>         {\n<a name=\"151\" href=\"#151\">151</a>             <em class=\"comment\">// create &lt;path> for an arc </em>\n<a name=\"152\" href=\"#152\">152</a>             arcs[i] = document.createElementNS(Pie.SVG_NS, SVGConstants.SVG_PATH_TAG);\n<a name=\"153\" href=\"#153\">153</a>             <em class=\"comment\">// the stroke attribute</em>\n<a name=\"154\" href=\"#154\">154</a>             arcs[i].setAttributeNS(<strong>null</strong>, SVGConstants.CSS_STROKE_PROPERTY, \n<a name=\"155\" href=\"#155\">155</a>             \t\t\t\t\t   Configuration.COLOR_STROKE);\n<a name=\"156\" href=\"#156\">156</a>             <em class=\"comment\">// the fill attribute</em>\n<a name=\"157\" href=\"#157\">157</a>             String c = Configuration.COLOR_FILL;\n<a name=\"158\" href=\"#158\">158</a>             <strong>if</strong>(i == 0) {\n<a name=\"159\" href=\"#159\">159</a>                 <em class=\"comment\">// This is for the outermost colorful marker</em>\n<a name=\"160\" href=\"#160\">160</a>                 c = PieUtils.getRGBString(color);\n<a name=\"161\" href=\"#161\">161</a>             }\n<a name=\"162\" href=\"#162\">162</a>             arcs[i].setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, c);\n<a name=\"163\" href=\"#163\">163</a>             levels.appendChild(arcs[i]);\n<a name=\"164\" href=\"#164\">164</a>         }\n<a name=\"165\" href=\"#165\">165</a> \n<a name=\"166\" href=\"#166\">166</a>         <em class=\"comment\">// creat text element\t\t</em>\n<a name=\"167\" href=\"#167\">167</a>         textElement = (Element)owner.getTextTemplate().cloneNode(<strong>true</strong>);\n<a name=\"168\" href=\"#168\">168</a>         <em class=\"comment\">// remove the duplicate id</em>\n<a name=\"169\" href=\"#169\">169</a>         textElement.removeAttribute(SVGConstants.SVG_ID_ATTRIBUTE);\n<a name=\"170\" href=\"#170\">170</a>         levels.appendChild(textElement);\n<a name=\"171\" href=\"#171\">171</a> \n<a name=\"172\" href=\"#172\">172</a>         <em class=\"comment\">// Create a group for the files </em>\n<a name=\"173\" href=\"#173\">173</a>         files = document.createElementNS(Pie.SVG_NS, SVGConstants.SVG_G_TAG);\n<a name=\"174\" href=\"#174\">174</a>         files.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_ID_ATTRIBUTE, getFilesID());\n<a name=\"175\" href=\"#175\">175</a> \n<a name=\"176\" href=\"#176\">176</a>         owner.getPeersGroup().appendChild(levels);\n<a name=\"177\" href=\"#177\">177</a>         owner.getFilesGroup().appendChild(files);\n<a name=\"178\" href=\"#178\">178</a> \n<a name=\"179\" href=\"#179\">179</a>         <strong>if</strong>(isLocal)\n<a name=\"180\" href=\"#180\">180</a>         {\n<a name=\"181\" href=\"#181\">181</a>             <em class=\"comment\">// Change the color of the mask layer</em>\n<a name=\"182\" href=\"#182\">182</a>             String c = PieUtils.getRGBString(color);\n<a name=\"183\" href=\"#183\">183</a>             Element localMask = owner.getLocalMask(); \n<a name=\"184\" href=\"#184\">184</a>         \tlocalMask.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,\n<a name=\"185\" href=\"#185\">185</a>                     <span class=\"string\">\"fill:\"</span> + c + <span class=\"string\">\";stroke:none;opacity:.3\"</span>);\n<a name=\"186\" href=\"#186\">186</a>         }\n<a name=\"187\" href=\"#187\">187</a>     }\n<a name=\"188\" href=\"#188\">188</a>     \n<a name=\"189\" href=\"#189\">189</a>     <em>/**<em>*</em></em>\n<a name=\"190\" href=\"#190\">190</a> <em>     * Has this slice been created and displayed in the pie?</em>\n<a name=\"191\" href=\"#191\">191</a> <em>     * @return true if it is created and visisble, false otherwise</em>\n<a name=\"192\" href=\"#192\">192</a> <em>     */</em>\n<a name=\"193\" href=\"#193\">193</a>     <strong>public</strong> <strong>boolean</strong> isCreatedSVG() {\n<a name=\"194\" href=\"#194\">194</a>         <strong>return</strong> createdSVG;\n<a name=\"195\" href=\"#195\">195</a>     }\n<a name=\"196\" href=\"#196\">196</a>     \n<a name=\"197\" href=\"#197\">197</a>     <em>/**<em>*</em></em>\n<a name=\"198\" href=\"#198\">198</a> <em>     * Set the position of this peer, relative to other peers</em>\n<a name=\"199\" href=\"#199\">199</a> <em>     * @param _peers the nubmer of present peers</em>\n<a name=\"200\" href=\"#200\">200</a> <em>     * @param _cardinal the relative position of this peer, in the range from 1 to _peers</em>\n<a name=\"201\" href=\"#201\">201</a> <em>     */</em>\n<a name=\"202\" href=\"#202\">202</a>     <strong>public</strong> <strong>void</strong> setPosition(<strong>int</strong> _peers, <strong>int</strong> _cardinal)\n<a name=\"203\" href=\"#203\">203</a>     {\n<a name=\"204\" href=\"#204\">204</a>         peers = _peers;\n<a name=\"205\" href=\"#205\">205</a>         cardinal = _cardinal;\n<a name=\"206\" href=\"#206\">206</a>         <strong>if</strong> (levels==<strong>null</strong>) {\n<a name=\"207\" href=\"#207\">207</a>             <em class=\"comment\">// The SVG content has not been created yet, so just record the position</em>\n<a name=\"208\" href=\"#208\">208</a>             <strong>return</strong>;\n<a name=\"209\" href=\"#209\">209</a>         }\n<a name=\"210\" href=\"#210\">210</a>         \n<a name=\"211\" href=\"#211\">211</a>         <strong>double</strong> startAngle = (cardinal - 1) * Configuration.CIRCLE / peers; \n<a name=\"212\" href=\"#212\">212</a>         <strong>double</strong> arcAngle = Configuration.CIRCLE / peers;\n<a name=\"213\" href=\"#213\">213</a>         <strong>if</strong> (peers == 1) <em class=\"comment\">// need this trick for a single peer, otherwise nothing is shown</em>\n<a name=\"214\" href=\"#214\">214</a>             arcAngle = Configuration.CIRCLE_ALMOST;\n<a name=\"215\" href=\"#215\">215</a>         \n<a name=\"216\" href=\"#216\">216</a>         <em class=\"comment\">// tranform the group</em>\n<a name=\"217\" href=\"#217\">217</a>         String transform = PieUtils.getTranslateAndRotateString(Configuration.CENTER_X,\n<a name=\"218\" href=\"#218\">218</a>                 \t\t\t\tConfiguration.CENTER_Y, startAngle);\n<a name=\"219\" href=\"#219\">219</a>         levels.setAttributeNS(<strong>null</strong>, SVGConstants.SVG_TRANSFORM_ATTRIBUTE, transform);\n<a name=\"220\" href=\"#220\">220</a> \n<a name=\"221\" href=\"#221\">221</a>         <em class=\"comment\">// the name should be redisplayed</em>\n<a name=\"222\" href=\"#222\">222</a>         displayName();\n<a name=\"223\" href=\"#223\">223</a>         \n<a name=\"224\" href=\"#224\">224</a>         <em class=\"comment\">// change path for each ring</em>\n<a name=\"225\" href=\"#225\">225</a>         <strong>for</strong>(<strong>int</strong> i = 0; i&lt;SecurityConstants.LEVELS; i++)\n<a name=\"226\" href=\"#226\">226</a>         {\n<a name=\"227\" href=\"#227\">227</a>             <em class=\"comment\">// the d attribute</em>\n<a name=\"228\" href=\"#228\">228</a>             String d = PieUtils.calculateDforClosePath(PieUtils.getRadius(i), arcAngle);\n<a name=\"229\" href=\"#229\">229</a>             arcs[i].setAttributeNS(<strong>null</strong>, SVGConstants.SVG_D_ATTRIBUTE, d);\n<a name=\"230\" href=\"#230\">230</a>         }\n<a name=\"231\" href=\"#231\">231</a> \n<a name=\"232\" href=\"#232\">232</a>         <em class=\"comment\">// change tranform for files</em>\n<a name=\"233\" href=\"#233\">233</a>         PieUtils.setTranslateCenter(files);\n<a name=\"234\" href=\"#234\">234</a> \n<a name=\"235\" href=\"#235\">235</a>         <em class=\"comment\">// change the dots</em>\n<a name=\"236\" href=\"#236\">236</a>         <strong>synchronized</strong>(fileDots) {\n<a name=\"237\" href=\"#237\">237</a> \t        <strong>for</strong>(Iterator it = fileDots.values().iterator(); it.hasNext();)\n<a name=\"238\" href=\"#238\">238</a> \t        {\n<a name=\"239\" href=\"#239\">239</a> \t            Dot dot = (Dot)it.next();\n<a name=\"240\" href=\"#240\">240</a> \t\t\t\tdot.updateCardinal(peers, cardinal);\n<a name=\"241\" href=\"#241\">241</a> \t        }\n<a name=\"242\" href=\"#242\">242</a>         }\n<a name=\"243\" href=\"#243\">243</a> \n<a name=\"244\" href=\"#244\">244</a>         <strong>if</strong>(isLocal) { <em class=\"comment\">// local mask should also change</em>\n<a name=\"245\" href=\"#245\">245</a>         \t<em class=\"comment\">// paths for arcs have changed</em>\n<a name=\"246\" href=\"#246\">246</a>         \tElement clone = (Element)levels.cloneNode(<strong>true</strong>);\n<a name=\"247\" href=\"#247\">247</a>         \t<em class=\"comment\">// the replication under local mask should not have a duplicate id</em>\n<a name=\"248\" href=\"#248\">248</a>             clone.removeAttribute(SVGConstants.SVG_ID_ATTRIBUTE);\n<a name=\"249\" href=\"#249\">249</a>             <em class=\"comment\">// leave out the outermost colorful ring when masking</em>\n<a name=\"250\" href=\"#250\">250</a>             NodeList nl = clone.getElementsByTagName(SVGConstants.SVG_PATH_TAG);\n<a name=\"251\" href=\"#251\">251</a>             clone.removeChild(nl.item(0));\n<a name=\"252\" href=\"#252\">252</a>             <em class=\"comment\">// for other path, don't use its fill or stroke, use localMask's</em>\n<a name=\"253\" href=\"#253\">253</a>             <strong>for</strong>(<strong>int</strong> i = 0; i &lt; nl.getLength(); i++) {\n<a name=\"254\" href=\"#254\">254</a>                 Element child = (Element)nl.item(i);\n<a name=\"255\" href=\"#255\">255</a>                 child.removeAttribute(SVGConstants.SVG_FILL_ATTRIBUTE);\n<a name=\"256\" href=\"#256\">256</a>                 child.removeAttribute(SVGConstants.SVG_STROKE_ATTRIBUTE);\n<a name=\"257\" href=\"#257\">257</a>             }\n<a name=\"258\" href=\"#258\">258</a> \n<a name=\"259\" href=\"#259\">259</a>             <em class=\"comment\">// change the local mask</em>\n<a name=\"260\" href=\"#260\">260</a>             Element localMask = owner.getLocalMask(); \n<a name=\"261\" href=\"#261\">261</a>             NodeList childlist = localMask.getElementsByTagName(SVGConstants.SVG_G_TAG);\n<a name=\"262\" href=\"#262\">262</a>             <strong>if</strong>(childlist.getLength() > 0){\n<a name=\"263\" href=\"#263\">263</a>             \t<em class=\"comment\">//suppose there is only g child</em>\n<a name=\"264\" href=\"#264\">264</a>             \tlocalMask.replaceChild(clone, childlist.item(0));\n<a name=\"265\" href=\"#265\">265</a>             }\n<a name=\"266\" href=\"#266\">266</a>             <strong>else</strong>{\n<a name=\"267\" href=\"#267\">267</a>             \tlocalMask.appendChild(clone);\n<a name=\"268\" href=\"#268\">268</a>             }\n<a name=\"269\" href=\"#269\">269</a>         }\n<a name=\"270\" href=\"#270\">270</a>     }\n<a name=\"271\" href=\"#271\">271</a>     \n<a name=\"272\" href=\"#272\">272</a>     <em>/**<em>*</em></em>\n<a name=\"273\" href=\"#273\">273</a> <em>     * Get the cardinal of this peer</em>\n<a name=\"274\" href=\"#274\">274</a> <em>     * @return cardinal</em>\n<a name=\"275\" href=\"#275\">275</a> <em>     */</em>\n<a name=\"276\" href=\"#276\">276</a>     <strong>public</strong> <strong>int</strong> getCardinal() {\n<a name=\"277\" href=\"#277\">277</a>         <strong>return</strong> cardinal;\n<a name=\"278\" href=\"#278\">278</a>     }\n<a name=\"279\" href=\"#279\">279</a>     \n<a name=\"280\" href=\"#280\">280</a>     <em>/**<em>*</em></em>\n<a name=\"281\" href=\"#281\">281</a> <em>     * Whether an angle is within this slice</em>\n<a name=\"282\" href=\"#282\">282</a> <em>     * @param theta the angle</em>\n<a name=\"283\" href=\"#283\">283</a> <em>     * @return true if the angle is within the slice, false if it is outside</em>\n<a name=\"284\" href=\"#284\">284</a> <em>     */</em>\n<a name=\"285\" href=\"#285\">285</a>     <strong>public</strong> <strong>boolean</strong> containsAngle(<strong>double</strong> theta) {\n<a name=\"286\" href=\"#286\">286</a>         <strong>double</strong>\tsliceSize = Configuration.CIRCLE / peers;\n<a name=\"287\" href=\"#287\">287</a>         <strong>return</strong> (cardinal - 1) * sliceSize &lt;= theta &amp;&amp;\n<a name=\"288\" href=\"#288\">288</a>         \t\ttheta &lt; (cardinal) * sliceSize;\n<a name=\"289\" href=\"#289\">289</a>     }\n<a name=\"290\" href=\"#290\">290</a>     \n<a name=\"291\" href=\"#291\">291</a>     <em>/**<em>*</em></em>\n<a name=\"292\" href=\"#292\">292</a> <em>     * Display the name of this peer</em>\n<a name=\"293\" href=\"#293\">293</a> <em>     *</em>\n<a name=\"294\" href=\"#294\">294</a> <em>     */</em>\n<a name=\"295\" href=\"#295\">295</a>     <strong>public</strong> <strong>void</strong> displayName() {\n<a name=\"296\" href=\"#296\">296</a>         <em class=\"comment\">// To retain the \"old\" look &amp; feel, use ring 0, the outmost ring, </em>\n<a name=\"297\" href=\"#297\">297</a>         <em class=\"comment\">// \t\tthus the name is displayed outside the pie</em>\n<a name=\"298\" href=\"#298\">298</a>         <em class=\"comment\">// To minimize the margin outside the pie, use ring 1, thus the name</em>\n<a name=\"299\" href=\"#299\">299</a>         <em class=\"comment\">//\t\tis displayed in the colorful marker </em>\n<a name=\"300\" href=\"#300\">300</a>         <em class=\"comment\">//\t\tIn this case, should use a default black fill color for fonts</em>\n<a name=\"301\" href=\"#301\">301</a>         <em class=\"comment\">//\t\tand the letter \"g\" will invade the inner rings</em>\n<a name=\"302\" href=\"#302\">302</a>         <em class=\"comment\">// Configuration.SIZE_MARGIN_PEER can also be adjusted</em>\n<a name=\"303\" href=\"#303\">303</a>         <strong>int</strong>\t\tring = Configuration.getSizeRingPeer();\n<a name=\"304\" href=\"#304\">304</a>         <em class=\"comment\">// change the color of the name</em>\n<a name=\"305\" href=\"#305\">305</a>         <em class=\"comment\">// if we put the name in the colorful marker (ring==1), then just use the default black</em>\n<a name=\"306\" href=\"#306\">306</a>         <strong>if</strong> (ring == 0)\n<a name=\"307\" href=\"#307\">307</a>             textElement.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, PieUtils.getRGBString(color));\n<a name=\"308\" href=\"#308\">308</a> \n<a name=\"309\" href=\"#309\">309</a>         <em class=\"comment\">// when number of peers change, the text path would also change</em>\n<a name=\"310\" href=\"#310\">310</a> \t    owner.getTextPath().setAttributeNS(<strong>null</strong>, SVGConstants.SVG_D_ATTRIBUTE, \n<a name=\"311\" href=\"#311\">311</a> \t            PieUtils.calculateDforPath(PieUtils.getRadius(ring), peers));\n<a name=\"312\" href=\"#312\">312</a>         <em class=\"comment\">// set the text for the name</em>\n<a name=\"313\" href=\"#313\">313</a>         <em class=\"comment\">// Since the text path is only hrefed, we must always set the name</em>\n<a name=\"314\" href=\"#314\">314</a>         <em class=\"comment\">// so Batik would notice the change and redraw with the new text path</em>\n<a name=\"315\" href=\"#315\">315</a>         textElement.getElementsByTagName(SVGConstants.SVG_TEXT_PATH_TAG).\n<a name=\"316\" href=\"#316\">316</a>     \t\titem(0).getFirstChild().setNodeValue(name);\n<a name=\"317\" href=\"#317\">317</a>     }\n<a name=\"318\" href=\"#318\">318</a> \n<a name=\"319\" href=\"#319\">319</a>     <em>/**<em>*</em></em>\n<a name=\"320\" href=\"#320\">320</a> <em>     * Clear the display of this peer from the owner's peers group and files group</em>\n<a name=\"321\" href=\"#321\">321</a> <em>     */</em>\n<a name=\"322\" href=\"#322\">322</a>     <strong>public</strong> <strong>void</strong> clear() {\n<a name=\"323\" href=\"#323\">323</a>         owner.getPeersGroup().removeChild(levels);\n<a name=\"324\" href=\"#324\">324</a>         owner.getFilesGroup().removeChild(files);\n<a name=\"325\" href=\"#325\">325</a>     }\n<a name=\"326\" href=\"#326\">326</a> \n<a name=\"327\" href=\"#327\">327</a>     <em>/**<em>*</em></em>\n<a name=\"328\" href=\"#328\">328</a> <em>     * Get the name of this peer, for use in a more human readable manner</em>\n<a name=\"329\" href=\"#329\">329</a> <em>     * @return the name of the peer</em>\n<a name=\"330\" href=\"#330\">330</a> <em>     */</em>\n<a name=\"331\" href=\"#331\">331</a>     <strong>public</strong> String getName() {\n<a name=\"332\" href=\"#332\">332</a>         <strong>return</strong> name;\n<a name=\"333\" href=\"#333\">333</a>     }\n<a name=\"334\" href=\"#334\">334</a>     \n<a name=\"335\" href=\"#335\">335</a>     <em>/**<em>*</em></em>\n<a name=\"336\" href=\"#336\">336</a> <em>     * Set color for this peer slice</em>\n<a name=\"337\" href=\"#337\">337</a> <em>     * @param c the color</em>\n<a name=\"338\" href=\"#338\">338</a> <em>     */</em>\n<a name=\"339\" href=\"#339\">339</a>     <strong>public</strong> <strong>void</strong> setColor(Color c) {\n<a name=\"340\" href=\"#340\">340</a>         color = c;\n<a name=\"341\" href=\"#341\">341</a>         String\tsc = PieUtils.getRGBString(color);\n<a name=\"342\" href=\"#342\">342</a> \n<a name=\"343\" href=\"#343\">343</a>         <em class=\"comment\">// color of the name</em>\n<a name=\"344\" href=\"#344\">344</a>         textElement.setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, sc);\n<a name=\"345\" href=\"#345\">345</a> \n<a name=\"346\" href=\"#346\">346</a>         <em class=\"comment\">// color for the outter ring</em>\n<a name=\"347\" href=\"#347\">347</a>         arcs[0].setAttributeNS(<strong>null</strong>, SVGConstants.CSS_FILL_PROPERTY, sc);\n<a name=\"348\" href=\"#348\">348</a> \n<a name=\"349\" href=\"#349\">349</a>         <em class=\"comment\">// color for local mask</em>\n<a name=\"350\" href=\"#350\">350</a>         <strong>if</strong> (isLocal) {\n<a name=\"351\" href=\"#351\">351</a> \t        Element localMask = owner.getLocalMask(); \n<a name=\"352\" href=\"#352\">352</a> \t    \tlocalMask.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,\n<a name=\"353\" href=\"#353\">353</a> \t                <span class=\"string\">\"fill:\"</span> + sc + <span class=\"string\">\";stroke:none;opacity:.1\"</span>);\n<a name=\"354\" href=\"#354\">354</a>         }\n<a name=\"355\" href=\"#355\">355</a>     \t\n<a name=\"356\" href=\"#356\">356</a>         <em class=\"comment\">// color of the dots</em>\n<a name=\"357\" href=\"#357\">357</a>         <strong>synchronized</strong>(fileDots) {\n<a name=\"358\" href=\"#358\">358</a> \t        <strong>for</strong> (Iterator i = fileDots.values().iterator(); i.hasNext();) {\n<a name=\"359\" href=\"#359\">359</a> \t            Dot\t\td = (Dot)i.next();\n<a name=\"360\" href=\"#360\">360</a> \t            d.setColor(color);\n<a name=\"361\" href=\"#361\">361</a> \t        }\n<a name=\"362\" href=\"#362\">362</a>         }\n<a name=\"363\" href=\"#363\">363</a>     }\n<a name=\"364\" href=\"#364\">364</a>     \n<a name=\"365\" href=\"#365\">365</a>     <em>/**<em>*</em></em>\n<a name=\"366\" href=\"#366\">366</a> <em>     * Update ring colors for a given peer </em>\n<a name=\"367\" href=\"#367\">367</a> <em>     * @param p the the peer that has changed color</em>\n<a name=\"368\" href=\"#368\">368</a> <em>     * @param c the new color</em>\n<a name=\"369\" href=\"#369\">369</a> <em>     */</em>\n<a name=\"370\" href=\"#370\">370</a>     <strong>public</strong> <strong>void</strong> updateRingColor(<a href=\"../../../../../edu/uci/isr/impromptu/pie/SlicePeer.html\">SlicePeer</a> p, Color c) {\n<a name=\"371\" href=\"#371\">371</a>     \t<strong>synchronized</strong>(fileDots) {\n<a name=\"372\" href=\"#372\">372</a>             <strong>for</strong> (Iterator i = fileDots.values().iterator(); i.hasNext();) {\n<a name=\"373\" href=\"#373\">373</a>    \t            Dot\t\td = (Dot)i.next();\n<a name=\"374\" href=\"#374\">374</a>    \t            SlicePeer lastAccessPeer = d.getLastAccessPeer();\n<a name=\"375\" href=\"#375\">375</a>    \t            <strong>if</strong> (lastAccessPeer != <strong>null</strong>) {\n<a name=\"376\" href=\"#376\">376</a>    \t            \t<strong>if</strong> (lastAccessPeer.equals(p)) {\n<a name=\"377\" href=\"#377\">377</a>    \t            \t\td.setRingColor(c);\n<a name=\"378\" href=\"#378\">378</a>    \t            \t}\n<a name=\"379\" href=\"#379\">379</a>    \t            }\n<a name=\"380\" href=\"#380\">380</a>    \t        }         \n<a name=\"381\" href=\"#381\">381</a>         }\n<a name=\"382\" href=\"#382\">382</a>     }\n<a name=\"383\" href=\"#383\">383</a>  \n<a name=\"384\" href=\"#384\">384</a>     <em>/**<em>*</em></em>\n<a name=\"385\" href=\"#385\">385</a> <em>     * Get color of the peer</em>\n<a name=\"386\" href=\"#386\">386</a> <em>     * @return the color</em>\n<a name=\"387\" href=\"#387\">387</a> <em>     */</em>\n<a name=\"388\" href=\"#388\">388</a>     <strong>public</strong> Color getColor() {\n<a name=\"389\" href=\"#389\">389</a>         <strong>return</strong> color;\n<a name=\"390\" href=\"#390\">390</a>     }\n<a name=\"391\" href=\"#391\">391</a>     \n<a name=\"392\" href=\"#392\">392</a>     <em>/**<em>*</em></em>\n<a name=\"393\" href=\"#393\">393</a> <em>     * Get the id of the g element that holds the files for this peer</em>\n<a name=\"394\" href=\"#394\">394</a> <em>     * @return an id in the form of \"peerName_files\"</em>\n<a name=\"395\" href=\"#395\">395</a> <em>     */</em>\n<a name=\"396\" href=\"#396\">396</a>     <strong>private</strong> String getFilesID() {\n<a name=\"397\" href=\"#397\">397</a>         <strong>return</strong> name + <span class=\"string\">\"_files\"</span>;\n<a name=\"398\" href=\"#398\">398</a>     }\n<a name=\"399\" href=\"#399\">399</a> \n<a name=\"400\" href=\"#400\">400</a>     <em>/**<em>*</em></em>\n<a name=\"401\" href=\"#401\">401</a> <em>     * Get whether this peer is the local peer</em>\n<a name=\"402\" href=\"#402\">402</a> <em>     * @return\ttrue if it is a local peer, false if it is a remote peer</em>\n<a name=\"403\" href=\"#403\">403</a> <em>     */</em>\n<a name=\"404\" href=\"#404\">404</a>     <strong>public</strong> <strong>boolean</strong> isLocal() {\n<a name=\"405\" href=\"#405\">405</a>         <strong>return</strong> isLocal;\n<a name=\"406\" href=\"#406\">406</a>     }\n<a name=\"407\" href=\"#407\">407</a>     \n<a name=\"408\" href=\"#408\">408</a>     <em>/**<em>*</em></em>\n<a name=\"409\" href=\"#409\">409</a> <em>     * Add a new file</em>\n<a name=\"410\" href=\"#410\">410</a> <em>     * </em>\n<a name=\"411\" href=\"#411\">411</a> <em>     * @param file a file from the local file system</em>\n<a name=\"412\" href=\"#412\">412</a> <em>     * @param p the location of the file</em>\n<a name=\"413\" href=\"#413\">413</a> <em>     * @return the Dot. If there was no file with the name, then the dot is a </em>\n<a name=\"414\" href=\"#414\">414</a> <em>     * newly created dot. Otherwise, it is the existing dot updated with the</em>\n<a name=\"415\" href=\"#415\">415</a> <em>     * new location.</em>\n<a name=\"416\" href=\"#416\">416</a> <em>     */</em>\n<a name=\"417\" href=\"#417\">417</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> addFile(File file, Point p)\n<a name=\"418\" href=\"#418\">418</a>     {\n<a name=\"419\" href=\"#419\">419</a>         Dot\t\tresult = <strong>null</strong>;\n<a name=\"420\" href=\"#420\">420</a>         String\tfileName = file.getName();\n<a name=\"421\" href=\"#421\">421</a>         <strong>if</strong> (fileDots.containsKey(fileName)) {\n<a name=\"422\" href=\"#422\">422</a>             result = (Dot)fileDots.get(fileName);\n<a name=\"423\" href=\"#423\">423</a>             result.updateLocation(p);\n<a name=\"424\" href=\"#424\">424</a>         }\n<a name=\"425\" href=\"#425\">425</a>         <strong>else</strong> {\n<a name=\"426\" href=\"#426\">426</a> \t        result = createFile(file.getName());\n<a name=\"427\" href=\"#427\">427</a> \t        result.setLocalPath(file.getAbsolutePath());\n<a name=\"428\" href=\"#428\">428</a> \t        result.setLocation(p, peers, cardinal);\n<a name=\"429\" href=\"#429\">429</a>         }\n<a name=\"430\" href=\"#430\">430</a>         <strong>return</strong> result;\n<a name=\"431\" href=\"#431\">431</a>     }\n<a name=\"432\" href=\"#432\">432</a> \n<a name=\"433\" href=\"#433\">433</a>     <em>/**<em>*</em></em>\n<a name=\"434\" href=\"#434\">434</a> <em>     * Add a new file</em>\n<a name=\"435\" href=\"#435\">435</a> <em>     * @param fileName the name of the file</em>\n<a name=\"436\" href=\"#436\">436</a> <em>     * @param radius the relative radius of the file</em>\n<a name=\"437\" href=\"#437\">437</a> <em>     * @param angle the relative angle of the file</em>\n<a name=\"438\" href=\"#438\">438</a> <em>     * @return the Dot. If there was no file with the name, then the dot is a </em>\n<a name=\"439\" href=\"#439\">439</a> <em>     * newly created dot. Otherwise, it is the existing dot updated with the</em>\n<a name=\"440\" href=\"#440\">440</a> <em>     * new location.</em>\n<a name=\"441\" href=\"#441\">441</a> <em>     */</em>\n<a name=\"442\" href=\"#442\">442</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> addFile(String fileName, <strong>double</strong> radius, <strong>double</strong> angle)\n<a name=\"443\" href=\"#443\">443</a>     {\n<a name=\"444\" href=\"#444\">444</a>         Dot\t\tresult = <strong>null</strong>;\n<a name=\"445\" href=\"#445\">445</a>         <strong>if</strong> (fileDots.containsKey(fileName)) {\n<a name=\"446\" href=\"#446\">446</a>             result = (Dot)fileDots.get(fileName);\n<a name=\"447\" href=\"#447\">447</a>             result.updateLocation(radius, angle);\n<a name=\"448\" href=\"#448\">448</a>         }\n<a name=\"449\" href=\"#449\">449</a>         <strong>else</strong> {\n<a name=\"450\" href=\"#450\">450</a> \t        result = createFile(fileName);\n<a name=\"451\" href=\"#451\">451</a> \t        result.setLocation(radius, angle, peers, cardinal);\n<a name=\"452\" href=\"#452\">452</a>         }\n<a name=\"453\" href=\"#453\">453</a>         <strong>return</strong> result;\n<a name=\"454\" href=\"#454\">454</a>     }\n<a name=\"455\" href=\"#455\">455</a> \n<a name=\"456\" href=\"#456\">456</a>     <em>/**<em>*</em></em>\n<a name=\"457\" href=\"#457\">457</a> <em>     * Move an existing file</em>\n<a name=\"458\" href=\"#458\">458</a> <em>     * @param fileName the name of the file</em>\n<a name=\"459\" href=\"#459\">459</a> <em>     * @param radius the new relative radius of the file</em>\n<a name=\"460\" href=\"#460\">460</a> <em>     * @param angle the new relative angle of the file</em>\n<a name=\"461\" href=\"#461\">461</a> <em>     * @return the Dot if the file is successfully moved, null if there is no such file </em>\n<a name=\"462\" href=\"#462\">462</a> <em>     */</em>\n<a name=\"463\" href=\"#463\">463</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> moveFile(String fileName, <strong>double</strong> radius, <strong>double</strong> angle)\n<a name=\"464\" href=\"#464\">464</a>     {\n<a name=\"465\" href=\"#465\">465</a>         <strong>if</strong> (!fileDots.containsKey(fileName))\n<a name=\"466\" href=\"#466\">466</a>             <strong>return</strong> <strong>null</strong>;\n<a name=\"467\" href=\"#467\">467</a>         Dot\t\tdot = (Dot)fileDots.get(fileName);\n<a name=\"468\" href=\"#468\">468</a>         dot.updateLocation(radius, angle);\n<a name=\"469\" href=\"#469\">469</a>         <strong>return</strong> dot;\n<a name=\"470\" href=\"#470\">470</a>     }\n<a name=\"471\" href=\"#471\">471</a> \n<a name=\"472\" href=\"#472\">472</a>     <em>/**<em>*</em></em>\n<a name=\"473\" href=\"#473\">473</a> <em>     * Create a dot for a file</em>\n<a name=\"474\" href=\"#474\">474</a> <em>     * @param fileName\tthe name for the file</em>\n<a name=\"475\" href=\"#475\">475</a> <em>     * @return a Dot that represents the file</em>\n<a name=\"476\" href=\"#476\">476</a> <em>     */</em>\n<a name=\"477\" href=\"#477\">477</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> createFile(String fileName) {\n<a name=\"478\" href=\"#478\">478</a>         <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> dot = <strong>new</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a>(document, fileName, color, <strong>this</strong>);\n<a name=\"479\" href=\"#479\">479</a>         EventTarget et = (EventTarget)dot.getGroupElement();\n<a name=\"480\" href=\"#480\">480</a>         <em class=\"comment\">// These two are for showing and hiding the tool tip</em>\n<a name=\"481\" href=\"#481\">481</a>         et.addEventListener(SVGConstants.SVG_MOUSEOVER_EVENT_TYPE, owner, false);\n<a name=\"482\" href=\"#482\">482</a>         et.addEventListener(SVGConstants.SVG_MOUSEOUT_EVENT_TYPE, owner, false);\n<a name=\"483\" href=\"#483\">483</a>         <em class=\"comment\">// for handling click</em>\n<a name=\"484\" href=\"#484\">484</a>         et.addEventListener(SVGConstants.SVG_CLICK_EVENT_TYPE, owner, false);\n<a name=\"485\" href=\"#485\">485</a>         <em class=\"comment\">// for handling drag-n-drop</em>\n<a name=\"486\" href=\"#486\">486</a>         et.addEventListener(SVGConstants.SVG_MOUSEDOWN_EVENT_TYPE, owner, false);\n<a name=\"487\" href=\"#487\">487</a>         <em class=\"comment\">// Listen for Esc</em>\n<a name=\"488\" href=\"#488\">488</a>         et.addEventListener(SVGConstants.SVG_KEYPRESS_EVENT_TYPE, owner, false);\n<a name=\"489\" href=\"#489\">489</a> \n<a name=\"490\" href=\"#490\">490</a>         files.appendChild(dot.getGroupElement());\n<a name=\"491\" href=\"#491\">491</a>         fileDots.put(fileName, dot);\n<a name=\"492\" href=\"#492\">492</a>         <strong>return</strong> dot;\n<a name=\"493\" href=\"#493\">493</a>     }\n<a name=\"494\" href=\"#494\">494</a>     \n<a name=\"495\" href=\"#495\">495</a>     <em>/**<em>*</em></em>\n<a name=\"496\" href=\"#496\">496</a> <em>     * Get a dot element corresponding to a file name </em>\n<a name=\"497\" href=\"#497\">497</a> <em>     * @param fileName the name of the file</em>\n<a name=\"498\" href=\"#498\">498</a> <em>     * @return the Dot corresponding to this name. null if there is no correspondance.</em>\n<a name=\"499\" href=\"#499\">499</a> <em>     */</em>\n<a name=\"500\" href=\"#500\">500</a>     <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Dot.html\">Dot</a> getFile(String fileName) {\n<a name=\"501\" href=\"#501\">501</a>         <strong>return</strong> (Dot)fileDots.get(fileName);\n<a name=\"502\" href=\"#502\">502</a>     }\n<a name=\"503\" href=\"#503\">503</a> \n<a name=\"504\" href=\"#504\">504</a>     <em>/**<em>*</em></em>\n<a name=\"505\" href=\"#505\">505</a> <em>     * Remove a dot corresponding to a file name </em>\n<a name=\"506\" href=\"#506\">506</a> <em>     * @param fileName the name of the file</em>\n<a name=\"507\" href=\"#507\">507</a> <em>     */</em>\n<a name=\"508\" href=\"#508\">508</a>     <strong>public</strong> <strong>void</strong> removeFile(String fileName) {\n<a name=\"509\" href=\"#509\">509</a>         Dot\td = (Dot)fileDots.get(fileName);\n<a name=\"510\" href=\"#510\">510</a>         files.removeChild(d.getGroupElement());\n<a name=\"511\" href=\"#511\">511</a>         fileDots.remove(fileName);\n<a name=\"512\" href=\"#512\">512</a>     }\n<a name=\"513\" href=\"#513\">513</a>     \n<a name=\"514\" href=\"#514\">514</a>     <em class=\"comment\">// Mostly dummy implementation to fit the role of Peer</em>\n<a name=\"515\" href=\"#515\">515</a>     <em>/**<em>*</em></em>\n<a name=\"516\" href=\"#516\">516</a> <em>     * Whether the peer owns a file</em>\n<a name=\"517\" href=\"#517\">517</a> <em>     * @param fileName the name of the file</em>\n<a name=\"518\" href=\"#518\">518</a> <em>     * @return true if the peer owns it, false if it does not own it</em>\n<a name=\"519\" href=\"#519\">519</a> <em>     */</em>\n<a name=\"520\" href=\"#520\">520</a>     <strong>public</strong> <strong>boolean</strong> owns(String fileName) {\n<a name=\"521\" href=\"#521\">521</a>         <strong>return</strong> fileDots.containsKey(fileName);\n<a name=\"522\" href=\"#522\">522</a>     }\n<a name=\"523\" href=\"#523\">523</a>     \n<a name=\"524\" href=\"#524\">524</a>     <em>/**<em>*</em></em>\n<a name=\"525\" href=\"#525\">525</a> <em>     * Get a list of changed files that owned by this local peer</em>\n<a name=\"526\" href=\"#526\">526</a> <em>     * </em>\n<a name=\"527\" href=\"#527\">527</a> <em>     * @return a list of changed files</em>\n<a name=\"528\" href=\"#528\">528</a> <em>     */</em>\n<a name=\"529\" href=\"#529\">529</a>     <strong>public</strong> List getChangedFiles() {\n<a name=\"530\" href=\"#530\">530</a>         List\tchanged = <strong>new</strong> ArrayList();\n<a name=\"531\" href=\"#531\">531</a>         <strong>synchronized</strong>(fileDots) {\n<a name=\"532\" href=\"#532\">532</a> \t        <strong>for</strong>(Iterator\ti = fileDots.values().iterator(); i.hasNext();) {\n<a name=\"533\" href=\"#533\">533</a> \t            Dot d = (Dot)i.next();\n<a name=\"534\" href=\"#534\">534</a> \t            <strong>if</strong> (d.getFileMod<strong>if</strong>ied()) {\n<a name=\"535\" href=\"#535\">535</a> \t                changed.add(d);\n<a name=\"536\" href=\"#536\">536</a> \t            }\n<a name=\"537\" href=\"#537\">537</a> \t        }\n<a name=\"538\" href=\"#538\">538</a>         }\n<a name=\"539\" href=\"#539\">539</a>         <strong>return</strong> changed;\n<a name=\"540\" href=\"#540\">540</a>     }\n<a name=\"541\" href=\"#541\">541</a>     \n<a name=\"542\" href=\"#542\">542</a>     <em>/**<em>*</em></em>\n<a name=\"543\" href=\"#543\">543</a> <em>     * Get a list of persistent files</em>\n<a name=\"544\" href=\"#544\">544</a> <em>     * @return a list that contains persistent files for this peer. The</em>\n<a name=\"545\" href=\"#545\">545</a> <em>     * list is empty if this peer has not persistent files.</em>\n<a name=\"546\" href=\"#546\">546</a> <em>     */</em>\n<a name=\"547\" href=\"#547\">547</a>     <strong>public</strong> List getPersistentFiles() {\n<a name=\"548\" href=\"#548\">548</a>         List \tpersistent = <strong>new</strong> ArrayList();\n<a name=\"549\" href=\"#549\">549</a>         <strong>synchronized</strong>(fileDots) {\n<a name=\"550\" href=\"#550\">550</a> \t        <strong>for</strong>(Iterator\ti = fileDots.values().iterator(); i.hasNext();) {\n<a name=\"551\" href=\"#551\">551</a> \t            Dot d = (Dot)i.next();\n<a name=\"552\" href=\"#552\">552</a> \t            <strong>if</strong> (d.getSharingLevel() == SecurityConstants.LEVEL_PERSISTENT) {\n<a name=\"553\" href=\"#553\">553</a> \t                persistent.add(d);\n<a name=\"554\" href=\"#554\">554</a> \t            }\n<a name=\"555\" href=\"#555\">555</a> \t        }\n<a name=\"556\" href=\"#556\">556</a>         }\n<a name=\"557\" href=\"#557\">557</a>         <strong>return</strong> persistent;\n<a name=\"558\" href=\"#558\">558</a>     }\n<a name=\"559\" href=\"#559\">559</a> \n<a name=\"560\" href=\"#560\">560</a>     <em>/**<em>*</em></em>\n<a name=\"561\" href=\"#561\">561</a> <em>     * Change the dots' size</em>\n<a name=\"562\" href=\"#562\">562</a> <em>     * @param shrink if true, reduce the size (by 10%). if false, enlarge the size (by 10%)</em>\n<a name=\"563\" href=\"#563\">563</a> <em>     */</em>\n<a name=\"564\" href=\"#564\">564</a>     <strong>public</strong> <strong>void</strong>\tchangeDotSize(<strong>boolean</strong> shrink) {\n<a name=\"565\" href=\"#565\">565</a>         <strong>synchronized</strong>(fileDots) {\n<a name=\"566\" href=\"#566\">566</a> \t        <strong>for</strong> (Iterator i = fileDots.values().iterator(); i.hasNext();) {\n<a name=\"567\" href=\"#567\">567</a> \t            Dot\td = (Dot)i.next();\n<a name=\"568\" href=\"#568\">568</a> \t            d.changeSize(shrink);\n<a name=\"569\" href=\"#569\">569</a> \t        }\n<a name=\"570\" href=\"#570\">570</a>         }\n<a name=\"571\" href=\"#571\">571</a>     }\n<a name=\"572\" href=\"#572\">572</a>     \n<a name=\"573\" href=\"#573\">573</a>     <em>/**<em>*</em></em>\n<a name=\"574\" href=\"#574\">574</a> <em>     * Get the service information received from JmDNS</em>\n<a name=\"575\" href=\"#575\">575</a> <em>     * @return the service inforamtion</em>\n<a name=\"576\" href=\"#576\">576</a> <em>     */</em>\n<a name=\"577\" href=\"#577\">577</a>     <strong>public</strong> ServiceInfo\tgetServiceInfo() {\n<a name=\"578\" href=\"#578\">578</a>         <strong>return</strong> si;\n<a name=\"579\" href=\"#579\">579</a>     }\n<a name=\"580\" href=\"#580\">580</a>     \n<a name=\"581\" href=\"#581\">581</a>     <em>/**<em>*</em></em>\n<a name=\"582\" href=\"#582\">582</a> <em>     * get the host address of the peer</em>\n<a name=\"583\" href=\"#583\">583</a> <em>     * @return the host address of the peer</em>\n<a name=\"584\" href=\"#584\">584</a> <em>     */</em>\n<a name=\"585\" href=\"#585\">585</a>     <strong>public</strong> String getHostAddress() {\n<a name=\"586\" href=\"#586\">586</a>         <strong>return</strong> hostAddress;\n<a name=\"587\" href=\"#587\">587</a>     }\n<a name=\"588\" href=\"#588\">588</a>     \n<a name=\"589\" href=\"#589\">589</a>     <em>/**<em>*</em></em>\n<a name=\"590\" href=\"#590\">590</a> <em>     * get the port of the peer</em>\n<a name=\"591\" href=\"#591\">591</a> <em>     * @return the port</em>\n<a name=\"592\" href=\"#592\">592</a> <em>     */</em>\n<a name=\"593\" href=\"#593\">593</a>     <strong>public</strong> <strong>int</strong>  getPort() {\n<a name=\"594\" href=\"#594\">594</a>         <strong>return</strong> -1;\n<a name=\"595\" href=\"#595\">595</a>     }\n<a name=\"596\" href=\"#596\">596</a> \n<a name=\"597\" href=\"#597\">597</a>     <em>/**<em>*</em></em>\n<a name=\"598\" href=\"#598\">598</a> <em>     * The peer has added a file</em>\n<a name=\"599\" href=\"#599\">599</a> <em>     * </em>\n<a name=\"600\" href=\"#600\">600</a> <em>     * @param fileName the name of the newly added file</em>\n<a name=\"601\" href=\"#601\">601</a> <em>     * @param radius the relative radius (between 0 and 1) of the newly added file. </em>\n<a name=\"602\" href=\"#602\">602</a> <em>     * \t\tThis might be null if another application creates the file</em>\n<a name=\"603\" href=\"#603\">603</a> <em>     * @param angle the relative angle (between 0 and 1) of the newly added file.</em>\n<a name=\"604\" href=\"#604\">604</a> <em>     * \t\tThis might be null if another application creates the file</em>\n<a name=\"605\" href=\"#605\">605</a> <em>     * @return true if there was not such a file, false otherwise</em>\n<a name=\"606\" href=\"#606\">606</a> <em>     */</em>\n<a name=\"607\" href=\"#607\">607</a>     <strong>public</strong> <strong>boolean</strong> fileAdded(String fileName, <strong>double</strong> radius, <strong>double</strong> angle) {\n<a name=\"608\" href=\"#608\">608</a>         <strong>boolean</strong> \tresult = false;\n<a name=\"609\" href=\"#609\">609</a>         <strong>if</strong> (!fileDots.containsKey(fileName)) {\n<a name=\"610\" href=\"#610\">610</a>             addFile(fileName, radius, angle);\n<a name=\"611\" href=\"#611\">611</a>             result = <strong>true</strong>;\n<a name=\"612\" href=\"#612\">612</a>         }\n<a name=\"613\" href=\"#613\">613</a>         <strong>return</strong> result;\n<a name=\"614\" href=\"#614\">614</a>     }\n<a name=\"615\" href=\"#615\">615</a>     \n<a name=\"616\" href=\"#616\">616</a>     <em>/**<em>*</em></em>\n<a name=\"617\" href=\"#617\">617</a> <em>     * The peer has moved a file</em>\n<a name=\"618\" href=\"#618\">618</a> <em>     * </em>\n<a name=\"619\" href=\"#619\">619</a> <em>     * @param fileName the name of the newly moved file</em>\n<a name=\"620\" href=\"#620\">620</a> <em>     * @param radius the new relative radius (between 0 and 1) of the newly added file</em>\n<a name=\"621\" href=\"#621\">621</a> <em>     * @param angle the new relative angle (between 0 and 1) of the newly added file</em>\n<a name=\"622\" href=\"#622\">622</a> <em>     * @return true if there was not such a file, false otherwise</em>\n<a name=\"623\" href=\"#623\">623</a> <em>     */</em>\n<a name=\"624\" href=\"#624\">624</a>     <strong>public</strong> <strong>boolean</strong> fileMoved(String fileName, <strong>double</strong> radius, <strong>double</strong> angle) {\n<a name=\"625\" href=\"#625\">625</a>         <strong>boolean</strong> \tresult = false;\n<a name=\"626\" href=\"#626\">626</a>         <strong>if</strong> (fileDots.containsKey(fileName)) {\n<a name=\"627\" href=\"#627\">627</a>             moveFile(fileName, radius, angle);\n<a name=\"628\" href=\"#628\">628</a>             result = <strong>true</strong>;\n<a name=\"629\" href=\"#629\">629</a>         }\n<a name=\"630\" href=\"#630\">630</a>         <strong>return</strong> result;\n<a name=\"631\" href=\"#631\">631</a>     }\n<a name=\"632\" href=\"#632\">632</a>     \n<a name=\"633\" href=\"#633\">633</a>     <em>/**<em>*</em></em>\n<a name=\"634\" href=\"#634\">634</a> <em>     * The peer has removed a file</em>\n<a name=\"635\" href=\"#635\">635</a> <em>     * </em>\n<a name=\"636\" href=\"#636\">636</a> <em>     * @param fileName the name of the newly removed file</em>\n<a name=\"637\" href=\"#637\">637</a> <em>     * @return true if there was a file, false otherwise</em>\n<a name=\"638\" href=\"#638\">638</a> <em>     */</em>\n<a name=\"639\" href=\"#639\">639</a>     <strong>public</strong> <strong>boolean</strong> fileRemoved(String fileName) {\n<a name=\"640\" href=\"#640\">640</a>         <strong>boolean</strong> \tresult = false;\n<a name=\"641\" href=\"#641\">641</a>         <strong>if</strong> (fileDots.containsKey(fileName)) {\n<a name=\"642\" href=\"#642\">642</a>             removeFile(fileName);\n<a name=\"643\" href=\"#643\">643</a>             result = <strong>true</strong>;\n<a name=\"644\" href=\"#644\">644</a>         }\n<a name=\"645\" href=\"#645\">645</a>         <strong>return</strong> result;\n<a name=\"646\" href=\"#646\">646</a>     }\n<a name=\"647\" href=\"#647\">647</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34089.0}