{"text": "GAL Navigation Up Table of Contents Bibliography Index Title Page Chapter 3STL Extensions for CGAL Michael Hoffmann Lutz Kettner and Sylvain Pion Introduction CGAL is designed in the spirit of the generic programming paradigm to work together with the Standard Template Library STL C 98 Aus98 This chapter documents non geometric STL like components that are not provided in the STL standard but in CGAL a doubly connected list managing items in place where inserted items are not copied a compact container generic algorithms iterators functor adaptors for binding and swapping arguments and for composition functors for projection and creation and adaptor classes around iterators and circulators See also circulators in Chapter Doubly Connected List Managing Items in Place The class In place list T bool manages a sequence of items in place in a doubly connected list Its goals are the flexible handling of memory management and performance optimization The item type has to provide the two necessary pointers T next link and T prev link One possibility to obtain these pointers is to inherit them from the base class In place list base T The class In place list T bool is a container quite similar to STL containers with the advantage that it is able to handle the stored elements by reference instead of copying them It is possible to delete an element only knowing its address and no iterator to it This used to simplify mutually pointered data structures like a halfedge data structure for planar maps or polyhedral surfaces the current design does not need this anymore The usual iterators are also available CGAL In place list T bool CGAL In place list base T Compact container The class Compact container T Allocator is an STL like container which provides a very compact storage for its elements It achieves this goal by requiring T to provide access to a pointer in it which is going to be used by Compact container T Allocator for its internal management The traits class Compact container traits T specifies the way to access that pointer The class Compact container base can be used as a base class to provide the pointer although in this case you do not get the most compact representation The values that this pointer can have during valid use of the object are valid pointer values to 4 bytes aligned objects i e the two least significant bits of the pointer need to be zero when the object is constructed Another interesting property of this container is that iterators are not invalidated during insert or erase operations The main deviation from the STL container concept is that the and operators of the iterator do not have a constant time complexity in all cases The actual complexity is related to the maximum size that the container has had during its life time compared to its current size because the iterator has to go over the erased elements as well so the bad case is when the container used to contain lots of elements but now has far less In this case we suggest to do a copy of the container in order to defragment the internal representation This container has been developed in order to efficiently handle large data structures like the triangulation and halfedge data structures It can probably be useful for other kinds of graphs as well CGAL Compact container T Allocator CGAL Compact container traits T CGAL Compact container base Generic Algorithms CGAL copy n CGAL min max element CGAL min element if CGAL max element if CGAL predecessor CGAL successor Iterators and Iterator Circulator Adaptors CGAL Emptyset iterator CGAL Oneset iterator T CGAL Insert iterator Container CGAL Counting iterator Iterator Value CGAL N step adaptor I int N CGAL Filter iterator Iterator Predicate CGAL Join input iterator 1 Iterator Creator CGAL Inverse index IC CGAL Random access adaptor IC CGAL Random access value adaptor IC T Functor Adaptors The standard library contains some adaptors for binding functors that is fixing one argument of a functor to a specific value thereby creating a new functor that takes one argument less than the original functor Also though non standard some STL implementations such as SGI provide adaptors to compose function objects Unfortunately these bind and compose adaptors are limited to unary and binary functors only and these functors must not be overloaded Since there are a number of functors in CGAL that take more than two arguments and since functors may also be overloaded i e accept several different sets of arguments we have to define our own adaptors to be used with CGAL functors CGAL swap 1 CGAL swap 2 CGAL swap 3 CGAL swap 4 CGAL bind 1 CGAL bind 2 CGAL bind 3 CGAL bind 4 CGAL bind 5 CGAL compose CGAL compose shared CGAL Swap F i CGAL Bind F A i CGAL Compose F F1 F2 F3 CGAL Compose shared F F1 F2 F3 AdaptableFunctor CGAL Arity tag int CGAL Arity traits F CGAL Set arity F a CGAL set arity CGAL set arity 1 CGAL set arity 2 CGAL set arity 3 CGAL set arity 4 CGAL set arity 5 Projection Function Objects CGAL Identity Value CGAL Dereference Value CGAL Get address Value CGAL Cast function object Arg Result CGAL Project vertex Node CGAL Project facet Node CGAL Project point Node CGAL Project normal Node CGAL Project plane Node CGAL Project next Node CGAL Project prev Node CGAL Project next opposite Node CGAL Project opposite prev Node Creator Function Objects CGAL Creator 1 Arg Result CGAL Creator 2 Arg1 Arg2 Result CGAL Creator 3 Arg1 Arg2 Arg3 Result CGAL Creator 4 Arg1 Arg2 Arg3 Arg4 Result CGAL Creator 5 Arg1 Arg2 Arg3 Arg4 Arg5 Result CGAL Creator uniform 2 Arg Result CGAL Creator uniform 3 Arg Result CGAL Creator uniform 4 Arg Result CGAL Creator uniform 5 Arg Result CGAL Creator uniform 6 Arg Result CGAL Creator uniform 7 Arg Result CGAL Creator uniform 8 Arg Result CGAL Creator uniform 9 Arg Result CGAL Creator uniform d Arg Result Utilities CGAL Triple T1 T2 T3 CGAL Quadruple T1 T2 T3 T4 In place list base T In place list T bool Compact container base Compact container traits T Compact container T Allocator predecessor successor copy n min max element min element if max element if Emptyset iterator Oneset iterator T Counting iterator Iterator Value Insert iterator Container N step adaptor I int N Filter iterator Iterator Predicate Join input iterator 1 Iterator Creator Inverse index IC Random access adaptor IC Random access value adaptor IC T swap 1 swap 2 swap 3 swap 4 bind 1 bind 2 bind 3 bind 4 bind 5 compare to less compose compose shared negate Swap F i Bind F A i Compose F F1 F2 F3 Compare to less F Compose shared F F1 F2 F3 AdaptableFunctor Arity tag int Arity traits F Set arity F a set arity set arity 1 set arity 2 set arity 3 set arity 4 set arity 5 Projection object Identity Value Dereference Value Get address Value Cast function object Arg Result Project vertex Node Project facet Node Project point Node Project normal Node Project plane Node Project next Node Project prev Node Project next opposite Node Project opposite prev Node Creator 1 Arg Result Creator 2 Arg1 Arg2 Result Creator 3 Arg1 Arg2 Arg3 Result Creator 4 Arg1 Arg2 Arg3 Arg4 Result Creator 5 Arg1 Arg2 Arg3 Arg4 Arg5 Result Creator uniform 2 Arg Result Creator uniform 3 Arg Result Creator uniform 4 Arg Result Creator uniform 5 Arg Result Creator uniform 6 Arg Result Creator uniform 7 Arg Result Creator uniform 8 Arg Result Creator uniform 9 Arg Result Creator uniform d Arg Result Triple T1 T2 T3 Quadruple T1 T2 T3 T4 Next chapter Handles and Circulators Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/STL_Extension_ref/Chapter_intro.html", "title": "none", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './STL_Extension_ref/intro.tex' -->\n<html> <head>  \n<title>STL Extensions for C<SMALL>GAL</SMALL></title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_3\"></a>\n  \n<h1>Chapter 3<BR>STL Extensions for C<SMALL>GAL</SMALL></h1>\n\n<A NAME=\"chapterDataStructures\"></A><A NAME=\"chapterStlExtensions\"></A>\n<P>\n\n<EM>Michael Hoffmann, Lutz Kettner, and Sylvain Pion</EM><BR>\n\n\n<P>\n\n<h2>Introduction</h2>\n<P>\n\nC<SMALL>GAL</SMALL> is designed in the spirit of the generic programming paradigm\nto work together with the Standard Template Library (STL)\n[<A HREF=\"../biblio.html#Biblio_cgal:ansi-is14882-98\">C<TT>++</TT>98</A>, <A HREF=\"../biblio.html#Biblio_cgal:a-gps-98\">Aus98</A>]. This chapter documents non-geometric\nSTL-like components that are not provided in the STL standard but\nin C<SMALL>GAL</SMALL>: a doubly-connected list managing items in place (where\ninserted items are not copied), a compact container, generic algorithms,\niterators, functor\nadaptors for binding and swapping arguments and for composition,\nfunctors for projection and creation and adaptor classes around\niterators and circulators. See also circulators in\nChapter&nbsp;<A HREF=\"../Circulator/Chapter_main.html#chapterCirculators\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\n<P>\n\n<h3>Doubly-Connected List Managing Items in Place.</h3>\n<P>\n\nThe class <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> manages a\nsequence of items in place in a doubly-connected list. Its goals are\nthe flexible handling of memory management and performance\noptimization. The item type has to provide the two necessary\npointers <I>&amp;T::next_link</I> and <I>&amp;T::prev_link</I>. One possibility\nto obtain these pointers is to inherit them from the base class\n<I><A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1432\">In_place_list_base</A>&lt;T&gt;</I>.\n<P>\n\nThe class <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> is a container quite similar\nto STL containers, with the advantage that it is able to handle the\nstored elements by reference instead of copying them. It is possible\nto delete an element only knowing its address and no iterator to it.\nThis used to simplify mutually pointered data structures like a halfedge\ndata structure for planar maps or polyhedral surfaces (the current design\ndoes not need this anymore). The usual iterators are also available.\n<P>\n\n<I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1433\">CGAL::In_place_list</A>&lt;T,bool&gt;</I><BR>\n\n<I><A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1431\">CGAL::In_place_list_base</A>&lt;T&gt;</I>\n<P>\n\n<h3>Compact container.</h3>\n<P>\n\nThe class <I><A HREF=\"Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A>&lt;T, Allocator&gt;</I> is an STL like container\nwhich provides a very compact storage for its elements.  It achieves this goal\nby requiring <I>T</I> to provide access to a pointer in it, which is going to be\nused by <I><A HREF=\"Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A>&lt;T, Allocator&gt;</I> for its internal management.\nThe traits class <I><A HREF=\"Class_Compact_container_traits.html#Cross_link_anchor_1438\">Compact_container_traits</A>&lt;T&gt;</I> specifies the way to\naccess that pointer.  The class <I><A HREF=\"Class_Compact_container_base.html#Cross_link_anchor_1436\">Compact_container_base</A></I> can be\nused as a base class to provide the pointer, although in this case you do not\nget the most compact representation.  The values that this pointer can have\nduring valid use of the object are valid pointer values to 4 bytes aligned\nobjects (i.e., the two least significant bits of the pointer need to be zero\nwhen the object is constructed). Another interesting property of this\ncontainer is that iterators are not invalidated during <I>insert</I> or\n<I>erase</I> operations.\n<P>\n\nThe main deviation from the STL container concept is that the <I>++</I> and\n<I>--</I> operators of the iterator do not have a constant time complexity in\nall cases.  The actual complexity is related to the maximum size that the\ncontainer has had during its life time compared to its current size, because\nthe iterator has to go over the &quot;erased&quot; elements as well, so the bad case is\nwhen the container used to contain lots of elements, but now has far less.  In\nthis case, we suggest to do a copy of the container in order to &quot;defragment&quot;\nthe internal representation.\n<P>\n\nThis container has been developed in order to efficiently handle large data\nstructures like the triangulation and halfedge data structures.  It can\nprobably be useful for other kinds of graphs as well.\n<P>\n\n<I><A HREF=\"Class_Compact_container.html#Cross_link_anchor_1439\">CGAL::Compact_container</A>&lt;T, Allocator&gt;</I><BR>\n\n<I><A HREF=\"Class_Compact_container_traits.html#Cross_link_anchor_1437\">CGAL::Compact_container_traits</A>&lt;T&gt;</I><BR>\n\n<I><A HREF=\"Class_Compact_container_base.html#Cross_link_anchor_1435\">CGAL::Compact_container_base</A></I>\n<P>\n\n<h3>Generic Algorithms.</h3>\n<P>\n\n<I><A HREF=\"Function_copy_n.html#Cross_link_anchor_1445\">CGAL::copy_n</A></I><BR>\n\n<I><A HREF=\"Function_min_max_element.html#Cross_link_anchor_1447\">CGAL::min_max_element</A></I><BR>\n\n<I><A HREF=\"Function_min_element_if.html#Cross_link_anchor_1449\">CGAL::min_element_if</A></I><BR>\n\n<I><A HREF=\"Function_max_element_if.html#Cross_link_anchor_1451\">CGAL::max_element_if</A></I><BR>\n\n<I><A HREF=\"Function_predecessor.html#Cross_link_anchor_1441\">CGAL::predecessor</A></I><BR>\n\n<I><A HREF=\"Function_successor.html#Cross_link_anchor_1443\">CGAL::successor</A></I>\n<P>\n\n<h3>Iterators and Iterator/Circulator Adaptors.</h3>\n<P>\n\n<I><A HREF=\"Class_Emptyset_iterator.html#Cross_link_anchor_1453\">CGAL::Emptyset_iterator</A></I><BR>\n\n<I><A HREF=\"Class_Oneset_iterator.html#Cross_link_anchor_1455\">CGAL::Oneset_iterator</A>&lt;T&gt;</I><BR>\n\n<I><A HREF=\"Class_Insert_iterator.html#Cross_link_anchor_1459\">CGAL::Insert_iterator</A>&lt;Container&gt;</I><BR>\n\n<I><A HREF=\"Class_Counting_iterator.html#Cross_link_anchor_1457\">CGAL::Counting_iterator</A>&lt;Iterator, Value&gt;</I><BR>\n\n<I><A HREF=\"Class_N_step_adaptor.html#Cross_link_anchor_1461\">CGAL::N_step_adaptor</A>&lt;I,int N&gt;</I><BR>\n\n<I><A HREF=\"Class_Filter_iterator.html#Cross_link_anchor_1463\">CGAL::Filter_iterator</A>&lt;Iterator, Predicate&gt;</I><BR>\n\n<I><A HREF=\"Class_Join_input_iterator_1.html#Cross_link_anchor_1465\">CGAL::Join_input_iterator_1</A>&lt;Iterator, Creator&gt;</I><BR>\n\n<I><A HREF=\"Class_Inverse_index.html#Cross_link_anchor_1467\">CGAL::Inverse_index</A>&lt;IC&gt;</I><BR>\n\n<I><A HREF=\"Class_Random_access_adaptor.html#Cross_link_anchor_1469\">CGAL::Random_access_adaptor</A>&lt;IC&gt;</I><BR>\n\n<I><A HREF=\"Class_Random_access_value_adaptor.html#Cross_link_anchor_1471\">CGAL::Random_access_value_adaptor</A>&lt;IC,T&gt;</I>\n<P>\n\n<h3>Functor Adaptors.</h3>\n<P>\n\nThe standard library contains some adaptors for binding functors, that\nis fixing one argument of a functor to a specific value thereby\ncreating a new functor that takes one argument less than the original\nfunctor.  Also, though non-standard, some STL implementations (such as\nSGI) provide adaptors to <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> function objects. Unfortunately,\nthese bind and <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> adaptors are limited to unary and binary\nfunctors only, and these functors must not be overloaded.\n<P>\n\nSince there are a number of functors in C<SMALL>GAL</SMALL> that take more than two\narguments, and since functors may also be overloaded, i.e., accept\nseveral different sets of arguments, we have to define our own\nadaptors to be used with C<SMALL>GAL</SMALL> functors.\n<P>\n\n<I><A HREF=\"Function_swap_1.html#Cross_link_anchor_1473\">CGAL::swap_1</A></I><BR>\n\n<I><A HREF=\"Function_swap_2.html#Cross_link_anchor_1475\">CGAL::swap_2</A></I><BR>\n\n<I><A HREF=\"Function_swap_3.html#Cross_link_anchor_1477\">CGAL::swap_3</A></I><BR>\n\n<I><A HREF=\"Function_swap_4.html#Cross_link_anchor_1479\">CGAL::swap_4</A></I><BR>\n\n<I><A HREF=\"Function_bind_1.html#Cross_link_anchor_1481\">CGAL::bind_1</A></I><BR>\n\n<I><A HREF=\"Function_bind_2.html#Cross_link_anchor_1483\">CGAL::bind_2</A></I><BR>\n\n<I><A HREF=\"Function_bind_3.html#Cross_link_anchor_1485\">CGAL::bind_3</A></I><BR>\n\n<I><A HREF=\"Function_bind_4.html#Cross_link_anchor_1487\">CGAL::bind_4</A></I><BR>\n\n<I><A HREF=\"Function_bind_5.html#Cross_link_anchor_1489\">CGAL::bind_5</A></I><BR>\n\n<I><A HREF=\"Function_compose.html#Cross_link_anchor_1493\">CGAL::compose</A></I><BR>\n\n<I><A HREF=\"Function_compose_shared.html#Cross_link_anchor_1495\">CGAL::compose_shared</A></I><BR>\n\n<I><A HREF=\"Class_Swap.html#Cross_link_anchor_1499\">CGAL::Swap</A>&lt;F,i&gt;</I><BR>\n\n<I><A HREF=\"Class_Bind.html#Cross_link_anchor_1501\">CGAL::Bind</A>&lt;F,A,i&gt;</I><BR>\n\n<I><A HREF=\"Class_Compose.html#Cross_link_anchor_1503\">CGAL::Compose</A>&lt;F0,F1,F2,F3&gt;</I><BR>\n\n<I><A HREF=\"Class_Compose_shared.html#Cross_link_anchor_1507\">CGAL::Compose_shared</A>&lt;F0,F1,F2,F3&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectConcept_AdaptableFunctor.html#Cross_link_anchor_1509\">AdaptableFunctor</A></I><BR>\n\n<I><A HREF=\"Class_Arity_tag.html#Cross_link_anchor_1510\">CGAL::Arity_tag</A>&lt;int&gt;</I><BR>\n\n<I><A HREF=\"Class_Arity_traits.html#Cross_link_anchor_1512\">CGAL::Arity_traits</A>&lt;F&gt;</I><BR>\n\n<I><A HREF=\"Class_Set_arity.html#Cross_link_anchor_1514\">CGAL::Set_arity</A>&lt;F,a&gt;</I><BR>\n\n<I><A HREF=\"Function_set_arity_0.html#Cross_link_anchor_1516\">CGAL::set_arity_0</A></I><BR>\n\n<I><A HREF=\"Function_set_arity_1.html#Cross_link_anchor_1518\">CGAL::set_arity_1</A></I><BR>\n\n<I><A HREF=\"Function_set_arity_2.html#Cross_link_anchor_1520\">CGAL::set_arity_2</A></I><BR>\n\n<I><A HREF=\"Function_set_arity_3.html#Cross_link_anchor_1522\">CGAL::set_arity_3</A></I><BR>\n\n<I><A HREF=\"Function_set_arity_4.html#Cross_link_anchor_1524\">CGAL::set_arity_4</A></I><BR>\n\n<I><A HREF=\"Function_set_arity_5.html#Cross_link_anchor_1526\">CGAL::set_arity_5</A></I>\n<P>\n\n<h3>Projection Function Objects.</h3>\n<P>\n\n<I><A HREF=\"FunctionObjectClass_Identity.html#Cross_link_anchor_1529\">CGAL::Identity</A>&lt;Value&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Dereference.html#Cross_link_anchor_1531\">CGAL::Dereference</A>&lt;Value&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Get_address.html#Cross_link_anchor_1533\">CGAL::Get_address</A>&lt;Value&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Cast_function_object.html#Cross_link_anchor_1535\">CGAL::Cast_function_object</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_vertex.html#Cross_link_anchor_1537\">CGAL::Project_vertex</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_facet.html#Cross_link_anchor_1539\">CGAL::Project_facet</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_point.html#Cross_link_anchor_1541\">CGAL::Project_point</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_normal.html#Cross_link_anchor_1543\">CGAL::Project_normal</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_plane.html#Cross_link_anchor_1545\">CGAL::Project_plane</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_next.html#Cross_link_anchor_1547\">CGAL::Project_next</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_prev.html#Cross_link_anchor_1549\">CGAL::Project_prev</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_next_opposite.html#Cross_link_anchor_1551\">CGAL::Project_next_opposite</A>&lt;Node&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Project_opposite_prev.html#Cross_link_anchor_1553\">CGAL::Project_opposite_prev</A>&lt;Node&gt;</I>\n<P>\n\n<h3>Creator Function Objects.</h3>\n<P>\n\n<I><A HREF=\"FunctionObjectClass_Creator_1.html#Cross_link_anchor_1555\">CGAL::Creator_1</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_2.html#Cross_link_anchor_1557\">CGAL::Creator_2</A>&lt;Arg1, Arg2, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_3.html#Cross_link_anchor_1559\">CGAL::Creator_3</A>&lt;Arg1, Arg2, Arg3, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_4.html#Cross_link_anchor_1561\">CGAL::Creator_4</A>&lt;Arg1, Arg2, Arg3, Arg4, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_5.html#Cross_link_anchor_1563\">CGAL::Creator_5</A>&lt;Arg1, Arg2, Arg3, Arg4, Arg5, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_2.html#Cross_link_anchor_1565\">CGAL::Creator_uniform_2</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_3.html#Cross_link_anchor_1567\">CGAL::Creator_uniform_3</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_4.html#Cross_link_anchor_1569\">CGAL::Creator_uniform_4</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_5.html#Cross_link_anchor_1571\">CGAL::Creator_uniform_5</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_6.html#Cross_link_anchor_1573\">CGAL::Creator_uniform_6</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_7.html#Cross_link_anchor_1575\">CGAL::Creator_uniform_7</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_8.html#Cross_link_anchor_1577\">CGAL::Creator_uniform_8</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_9.html#Cross_link_anchor_1579\">CGAL::Creator_uniform_9</A>&lt;Arg, Result&gt;</I><BR>\n\n<I><A HREF=\"FunctionObjectClass_Creator_uniform_d.html#Cross_link_anchor_1581\">CGAL::Creator_uniform_d</A>&lt;Arg, Result&gt;</I>\n<P>\n\n<h3>Utilities.</h3>\n\n<I><A HREF=\"Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt;T1, T2, T3&gt;</I><BR>\n\n<I><A HREF=\"Class_Quadruple.html#Cross_link_anchor_1585\">CGAL::Quadruple</A>&lt;T1, T2, T3, T4&gt;</I>\n<P>\n\n<UL><LI>\n<a href=\"Class_In_place_list_base.html\"><I>In_place_list_base&lt;T&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_In_place_list.html\"><I>In_place_list&lt;T,bool&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compact_container_base.html\"><I>Compact_container_base</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compact_container_traits.html\"><I>Compact_container_traits&lt;T&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compact_container.html\"><I>Compact_container&lt;T, Allocator&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_predecessor.html\"><I>predecessor</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_successor.html\"><I>successor</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_copy_n.html\"><I>copy_n</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_min_max_element.html\"><I>min_max_element</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_min_element_if.html\"><I>min_element_if</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_max_element_if.html\"><I>max_element_if</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Emptyset_iterator.html\"><I>Emptyset_iterator</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Oneset_iterator.html\"><I>Oneset_iterator&lt;T&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Counting_iterator.html\"><I>Counting_iterator&lt;Iterator, Value&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Insert_iterator.html\"><I>Insert_iterator&lt;Container&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_N_step_adaptor.html\"><I>N_step_adaptor&lt;I,int N&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Filter_iterator.html\"><I>Filter_iterator&lt;Iterator, Predicate&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Join_input_iterator_1.html\"><I>Join_input_iterator_1&lt;Iterator, Creator&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Inverse_index.html\"><I>Inverse_index&lt;IC&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Random_access_adaptor.html\"><I>Random_access_adaptor&lt;IC&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Random_access_value_adaptor.html\"><I>Random_access_value_adaptor&lt;IC,T&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_swap_1.html\"><I>swap_1</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_swap_2.html\"><I>swap_2</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_swap_3.html\"><I>swap_3</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_swap_4.html\"><I>swap_4</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_bind_1.html\"><I>bind_1</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_bind_2.html\"><I>bind_2</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_bind_3.html\"><I>bind_3</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_bind_4.html\"><I>bind_4</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_bind_5.html\"><I>bind_5</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_compare_to_less.html\"><I>compare_to_less</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_compose.html\"><I>compose</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_compose_shared.html\"><I>compose_shared</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_negate.html\"><I>negate</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Swap.html\"><I>Swap&lt;F,i&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Bind.html\"><I>Bind&lt;F,A,i&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compose.html\"><I>Compose&lt;F0,F1,F2,F3&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compare_to_less.html\"><I>Compare_to_less&lt;F&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Compose_shared.html\"><I>Compose_shared&lt;F0,F1,F2,F3&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectConcept_AdaptableFunctor.html\"><I>AdaptableFunctor</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Arity_tag.html\"><I>Arity_tag&lt;int&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Arity_traits.html\"><I>Arity_traits&lt;F&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Set_arity.html\"><I>Set_arity&lt;F,a&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_0.html\"><I>set_arity_0</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_1.html\"><I>set_arity_1</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_2.html\"><I>set_arity_2</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_3.html\"><I>set_arity_3</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_4.html\"><I>set_arity_4</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Function_set_arity_5.html\"><I>set_arity_5</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectConcept_Projection_object.html\"><I>Projection_object</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Identity.html\"><I>Identity&lt;Value&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Dereference.html\"><I>Dereference&lt;Value&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Get_address.html\"><I>Get_address&lt;Value&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Cast_function_object.html\"><I>Cast_function_object&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_vertex.html\"><I>Project_vertex&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_facet.html\"><I>Project_facet&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_point.html\"><I>Project_point&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_normal.html\"><I>Project_normal&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_plane.html\"><I>Project_plane&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_next.html\"><I>Project_next&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_prev.html\"><I>Project_prev&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_next_opposite.html\"><I>Project_next_opposite&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Project_opposite_prev.html\"><I>Project_opposite_prev&lt;Node&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_1.html\"><I>Creator_1&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_2.html\"><I>Creator_2&lt;Arg1, Arg2, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_3.html\"><I>Creator_3&lt;Arg1, Arg2, Arg3, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_4.html\"><I>Creator_4&lt;Arg1, Arg2, Arg3, Arg4, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_5.html\"><I>Creator_5&lt;Arg1, Arg2, Arg3, Arg4, Arg5, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_2.html\"><I>Creator_uniform_2&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_3.html\"><I>Creator_uniform_3&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_4.html\"><I>Creator_uniform_4&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_5.html\"><I>Creator_uniform_5&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_6.html\"><I>Creator_uniform_6&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_7.html\"><I>Creator_uniform_7&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_8.html\"><I>Creator_uniform_8&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_9.html\"><I>Creator_uniform_9&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"FunctionObjectClass_Creator_uniform_d.html\"><I>Creator_uniform_d&lt;Arg, Result&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Triple.html\"><I>Triple&lt;T1, T2, T3&gt;</I></a></UL>\n<P>\n\n<UL><LI>\n<a href=\"Class_Quadruple.html\"><I>Quadruple&lt;T1, T2, T3, T4&gt;</I></a></UL>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Circulator/Chapter_main.html\">Handles and Circulators</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37850.0}