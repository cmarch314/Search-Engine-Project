{"text": "Automatic Generation of Operation Tables for Fast Exploration of Bypasses in Embedded Processors Aviral Shrivastava Sanghyun Park Nikil Dutt Alex Nicolau Eugene Earlie and Yunheung Paek DATE 2 6 Proceedings of the International Conference on Design Automation and Test in Europe Abstract Customizing the bypasses in an embedded processor uncovers valuable trade offs between the power performance and the cost of the processor Meaningful exploration of bypasses requires bypass sensitive compiler Operation Tables OTs have been proposed to perform bypass sensitive compilation However due to lack of automated methods to generate OTs OTs are currently manually specified by the designer Manual specification of OTs is not only an extremely time consuming task but is also highly error prone In this paper we present AutoOT an algorithm to automatically generate OTs from a high level processor description Our experiments on the Intel XScale processor model running MiBench benchmarks demonstrate that AutoOT greatly reduces the time and effort of specification Automatic generation of OTs makes it feasible to perform full bypass exploration on the Intel XScale and thus discover interesting alternate bypass configurations in a reasonable time To further reduce the compile time overhead of OT generation we propose another novel algorithm AutoOTDB AutoOTDB is able to cut the compile time overhead of OT generation by half Center For Embedded Computer Systems Department of Information and Computer Science University of California Irvine SOAR Group School of Electrical Engineering Seoul National University Seoul Korea Strategic CAD Labs Intel Corporation Hudson Massachussets ", "_id": "http://www.ics.uci.edu/~aviral/papers/autoOT.html", "title": "autoot", "html": "<title>AutoOT</title>\n<body bgcolor=#ffffff>\n<h2>Automatic Generation of Operation Tables for Fast\nExploration of Bypasses in Embedded Processors</h2>\n  \n<a href=\"http://www.ics.uci.edu/~aviral/papers/autoOT.pdf\"><img\nsrc=\"pdf.png\" alt=\"pdf\" width=\"34\" height=\"34\" border=\"0\"></a>\n\n<a href=\"http://www.ics.uci.edu/~aviral/papers/autoOT.ppt\"><img src=\"ppt.png\" alt=\"ppt\" width=\"34\" height=\"34\" border=\"0\"></a>\n\n<p><i>\n<a href=\"http://www.ics.uci.edu/~aviral\"> Aviral Shrivastava </a>,\n<a href=\"http://compiler.snu.ac.kr/shparkid/\"> Sanghyun Park </a>,\n<a href=\"http://www.ics.uci.edu/~dutt\"> Nikil Dutt </a>,\n<a href=\"http://www.ics.uci.edu/~nicolau\"> Alex Nicolau </a>,\n<a href=\"http://search2.intel.com/corporate/default.aspx?culture=en-US&q=Eugene+Earlie\"> \nEugene Earlie </a>, and\n<a href=\"http://compiler.snu.ac.kr/ypaek/\"> Yunheung Paek </a>\n</i>\n\n<p><b>DATE 2006: </b><i>Proceedings of the International \nConference on Design Automation and Test in Europe.</i>\n\n\n<p><b>Abstract: </b>\nCustomizing the bypasses in an embedded processor uncovers\nvaluable trade-offs between the power, performance and\nthe cost of the processor. Meaningful exploration of bypasses\nrequires bypass-sensitive compiler. Operation Tables (OTs)\nhave been proposed to perform bypass-sensitive compilation.\nHowever, due to lack of automated methods to generate OTs,\nOTs are currently manually specified by the designer. Manual\nspecification of OTs is not only an extremely time consuming\ntask, but is also highly error-prone. In this paper,\nwe present AutoOT, an algorithm to automatically generate\nOTs from a high-level processor description. Our experiments\non the Intel XScale processor model running MiBench\nbenchmarks demonstrate that AutoOT greatly reduces the\ntime and effort of specification. Automatic generation of\nOTs makes it feasible to perform full bypass exploration on\nthe Intel XScale and thus discover interesting alternate bypass\nconfigurations in a reasonable time. To further reduce\nthe compile-time overhead of OT generation, we propose another\nnovel algorithm, AutoOTDB. AutoOTDB is able to\ncut the compile-time overhead of OT generation by half.\n\n<hr>\n\n<table cellpadding=\"2\" cellspacing=\"2\" border=\"0\" width=\"100%\">\n  <tbody>\n    <tr>\n      <td>\n      Center For Embedded Computer Systems,<br> \n      Department of Information and Computer Science,<br>\n      University of California, Irvine.\n      </td>\n      <td>\n      SOAR Group,<br>\n      School of Electrical Engineering,<br>\n      Seoul National University, Seoul, Korea.\n      </td>\n      <td>\n      Strategic CAD Labs,<br>\n      Intel Corporation, <br>\n      Hudson, Massachussets.\n      </td>\n    </tr>\n </tbody>\n</table>\n", "id": 16873.0}