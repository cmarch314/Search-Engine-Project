{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL range search Definition There are six versions of the function template range search that perform range searches on Delaunay triangulations The first performs circular range searches the second triangular range searches and the third performs iso rectangular range searches The other three range search function templates perform enhanced variants of the three beforementioned operations They get a user defined object that has to control the range search operation This way one can for instance stop the search when n points were found include CGAL range search delaunay 2 h template class Dt class Circle class OutputIterator OutputIterator range search Dt delau Circle C OutputIterator res computes handles to all vertices contained in the closure of disk C The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on which we perform the range search operation Requirements Dt is a CGAL Delaunay triangulation and contains the following subset of types from the concept PointSetTraits and from the Delaunay triangulation data type Dt Geom traits Dt Vertex handle Dt Vertex Dt Vertex circulator Dt Vertex iterator Dt Point Dt Geom traits Bounded side 2 Dt Geom traits Construct center 2 the template parameter Circle corresponds to Dt Geom traits Cricle 2 template class Dt class OutputIterator OutputIterator range search Dt delau Dt Point a Dt Point b Dt Point c OutputIterator res computes handles to all vertices contained in the closure of the triangle a b c Precondition a b and c must not be collinear The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on which we perform the range search operation Requirements Dt is a CGAL Delaunay triangulation and contains the following subset of types from the concept PointSetTraits and from the Delaunay triangulation data type Dt Geom traits Dt Vertex handle Dt Vertex Dt Vertex circulator Dt Vertex iterator Dt Point Dt Geom traits Circle 2 Dt Geom traits Bounded side 2 Dt Geom traits Construct center 2 Dt Geom traits Orientation 2 Dt Geom traits Construct circle 2 template class Dt class OutputIterator OutputIterator range search Dt delau Dt Point a Dt Point b Dt Point c Dt Point d OutputIterator res computes handles to all vertices contained in the closure of the iso rectangle a b c d Precondition a is the upper left point b the lower left c the lower right and d the upper right point of the iso rectangle The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on which we perform the range search operation Requirements Dt is a CGAL Delaunay triangulation and contains the following subset of types from the concept PointSetTraits and from the Delaunay triangulation data type Dt Geom traits Dt Vertex handle Dt Vertex Dt Vertex circulator Dt Vertex iterator Dt Point Dt Geom traits Circle 2 Dt Geom traits Bounded side 2 Dt Geom traits Construct center 2 Dt Geom traits Orientation 2 Dt Geom traits Construct circle 2 template class Dt class Circle class OutputIterator class Pred OutputIterator range search Dt delau Circle C OutputIterator res Pred pred bool return if succeded computes handles to all vertices contained in the closure of disk C The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on that we perform the range search operation pred controls the search operation If return if succeded is true we will end the search after the first success of the predicate otherwise we will continue till the search is finished Requirements For the requirements of Dt see the description for the non predicate version Requirements of Pred void set result bool bool operator const Point The operator is used for testing the current point in the search operation If this operator returns true and return if succeded is true the range search will stop Otherwise the range search operation will continue Member function set result can be used to store the result of the range search in the function object The result will be true if the last call to the operator of the predicate returned true false otherwise template class Dt class OutputIterator class Pred OutputIterator range search Dt delau Dt Point a Dt Point b Dt Point c OutputIterator res Pred pred bool return if succeded computes handles to all vertices contained in the closure of the triangle a b c Precondition a b and c must not be collinear The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on which we perform the range search operation pred controls the search operation If return if succeded is true we will end the search after the first success of the predicate otherwise we will continue till the search is finished Requirements For the requirements of Dt see the description for the non predicate version For the requirements of Pred see the description above template class Dt class OutputIterator class Pred OutputIterator range search Dt delau Dt Point a Dt Point b Dt Point c Dt Point d OutputIterator res Pred pred bool return if succeded computes handles to all vertices contained in the closure of the iso rectangle a b c d Precondition a is the upper left point b the lower left c the lower right and d the upper right point of the iso rectangle The computed vertex handles will be placed as a sequence of objects in a container of value type of res which points to the first object in the sequence The function returns an output iterator pointing to the position beyond the end of the sequence delau is the CGAL Delaunay triangulation on which we perform the range search operation pred controls the search operation If return if succeded is true we will end the search after the first success of the predicate otherwise we will continue till the search is finished Requirements For the requirements of Dt see the description for the non predicate version For the requirements of Pred see the description above Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Point_set_2_ref/Function_range_search.html", "title": "range_search", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Point_set_2_ref/range_search.tex' -->\n<html> <head>  \n<title>range_search</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1224\"></A>\n\n<A NAME=\"Cross_link_anchor_1225\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1300\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::range_search\"></A>\n<h2><I>CGAL::range_search</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThere are six versions of the function template <I><A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A></I> that\nperform range searches on Delaunay triangulations. The first performs\ncircular range searches, the second triangular range searches and the\nthird performs iso-rectangular range searches. The other three range search\nfunction templates perform enhanced variants of the three beforementioned\noperations.<BR>\n\nThey get a user-defined object that has to control the range search operation.\nThis way one can for instance stop the search, when <MATH><I>n</I></MATH> points were found.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/range_search_delaunay_2.h\">CGAL/range_search_delaunay_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class Circle, class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Circle__C+_OutputIterator_res9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( Dt&amp; delau,  Circle C,  OutputIterator res)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of disk <MATH><I>C</I></MATH>.\nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence.\n<MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on which we perform the range search operation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<UL>\n<LI><I>Dt</I> is a C<SMALL>GAL</SMALL> Delaunay triangulation and contains the following subset of types from the concept <A HREF=\"Concept_PointSetTraits.html#Cross_link_anchor_1219\">PointSetTraits</A> and from\nthe Delaunay triangulation data type:\n <UL>\n  <LI><I>Dt::Geom_traits</I> \n  <LI><I>Dt::Vertex_handle</I>\n  <LI><I>Dt::Vertex</I> \n  <LI><I>Dt::Vertex_circulator</I>   \n  <LI><I>Dt::Vertex_iterator</I> \n  <LI><I>Dt::Point</I>  \n  <LI><I>Dt::Geom_traits::Bounded_side_2</I> \n  <LI><I>Dt::Geom_traits::Construct_center_2</I> \n </UL>\n<LI>the template parameter <I>Circle</I> corresponds to <I>Dt::Geom_traits::Cricle_2</I>\n</UL>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Dt::Point__a+_const_Dt::Point__b+_const_Dt::Point__c+OutputIterator_res9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Dt&amp; delau,<BR>\n\nDt::Point a,<BR>\n\nDt::Point b,<BR>\n\nDt::Point c,<BR>\n\nOutputIterator res)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of the triangle <MATH><I>(a,b,c)</I></MATH>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><MATH><I>a</I></MATH>, <MATH><I>b</I></MATH>, and <MATH><I>c</I></MATH> must not be <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A>. \nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence. \n<MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on which we perform the range search operation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<I>Dt</I> is a C<SMALL>GAL</SMALL> Delaunay triangulation and contains the following subset of types from the concept <A HREF=\"Concept_PointSetTraits.html#Cross_link_anchor_1219\">PointSetTraits</A> and from\nthe Delaunay triangulation data type:\n<UL>\n  <LI><I>Dt::Geom_traits</I> \n  <LI><I>Dt::Vertex_handle</I>\n  <LI><I>Dt::Vertex</I> \n  <LI><I>Dt::Vertex_circulator</I>   \n  <LI><I>Dt::Vertex_iterator</I> \n  <LI><I>Dt::Point</I>  \n  <LI><I>Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A></I>  \n  <LI><I>Dt::Geom_traits::Bounded_side_2</I> \n  <LI><I>Dt::Geom_traits::Construct_center_2</I> \n  <LI><I>Dt::Geom_traits::Orientation_2</I> \n  <LI><I>Dt::Geom_traits::Construct_circle_2</I>  \n</UL>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Dt::Point__a+_const_Dt::Point__b+_const_Dt::Point__c+const_Dt::Point__d+OutputIterator_res9_;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Dt&amp; delau,<BR>\n\nDt::Point a,<BR>\n\nDt::Point b,<BR>\n\nDt::Point c,<BR>\n\nDt::Point d,<BR>\n\nOutputIterator res)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of the iso-rectangle <MATH><I>(a,b,c,d)</I></MATH>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><MATH><I>a</I></MATH> is the upper left point, <MATH><I>b</I></MATH> the lower left, <MATH><I>c</I></MATH> the lower\nright and <MATH><I>d</I></MATH> the upper right point of the iso rectangle.\nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence. <MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on which we perform the range search operation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<I>Dt</I> is a C<SMALL>GAL</SMALL> Delaunay triangulation and contains the following subset of types from the concept <A HREF=\"Concept_PointSetTraits.html#Cross_link_anchor_1219\">PointSetTraits</A> and from\nthe Delaunay triangulation data type:\n<UL>\n  <LI><I>Dt::Geom_traits</I> \n  <LI><I>Dt::Vertex_handle</I>\n  <LI><I>Dt::Vertex</I> \n  <LI><I>Dt::Vertex_circulator</I>   \n  <LI><I>Dt::Vertex_iterator</I> \n  <LI><I>Dt::Point</I>  \n  <LI><I>Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A></I>  \n  <LI><I>Dt::Geom_traits::Bounded_side_2</I> \n  <LI><I>Dt::Geom_traits::Construct_center_2</I> \n  <LI><I>Dt::Geom_traits::Orientation_2</I> \n  <LI><I>Dt::Geom_traits::Construct_circle_2</I>  \n</UL>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class Circle, class OutputIterator, class Pred&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Circle__C+_OutputIterator_res+_Pred__pred+_bool_return_if_succeded9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Dt&amp; delau,<BR>\n\nCircle C,<BR>\n\nOutputIterator res,<BR>\n\nPred&amp; pred,<BR>\n\nbool return_if_succeded)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of disk <MATH><I>C</I></MATH>.\nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence.\n<MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on that we perform the range search operation.\n<MATH><I>pred</I></MATH> controls the search operation. If <MATH><I>return_if_succeded</I></MATH> is <MATH><I>true</I></MATH>, we will end the search\nafter the first success of the predicate, otherwise we will continue till the search is finished.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\nFor the requirements of <I>Dt</I> see the description for the non-predicate version.<BR>\n\nRequirements of <I>Pred</I>:\n<UL>\n  <LI><I>void set_result(bool);</I>\n  <LI><I>bool operator()(const Point&amp;);</I>\n</UL>\nThe <I>operator()</I> is used for testing the current point in the search operation.\nIf this operator returns <MATH><I>true</I></MATH> and <MATH><I>return_if_succeded</I></MATH> is <MATH><I>true</I></MATH>, the range search will stop.\nOtherwise the range search operation will continue. Member function  <MATH><I>set_result</I></MATH> can be used to\nstore the result of the range search in the function object. The result will be <MATH><I>true</I></MATH> if the last\ncall to the  <I>operator()</I> of the predicate returned <MATH><I>true</I></MATH>, <MATH><I>false</I></MATH> otherwise.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class OutputIterator, class Pred&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Dt::Point__a+_const_Dt::Point__b+_const_Dt::Point__c+OutputIterator_res+_Pred__pred+_bool_return_if_succeded9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Dt&amp; delau,<BR>\n\nDt::Point a,<BR>\n\nDt::Point b,<BR>\n\nDt::Point c,<BR>\n\nOutputIterator res,<BR>\n\nPred&amp; pred,<BR>\n\nbool return_if_succeded)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of the triangle <MATH><I>(a,b,c)</I></MATH>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><MATH><I>a</I></MATH>, <MATH><I>b</I></MATH>, and <MATH><I>c</I></MATH> must not be <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A>. \nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence. \n<MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on which we perform the range search operation.\n<MATH><I>pred</I></MATH> controls the search operation. If <MATH><I>return_if_succeded</I></MATH> is <MATH><I>true</I></MATH>, we will end the search\nafter the first success of the predicate, otherwise we will continue till the search is finished.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\nFor the requirements of <I>Dt</I> see the description for the non-predicate version.<BR>\n\nFor the requirements of <I>Pred</I> see the description above.<BR>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Dt, class OutputIterator, class Pred&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_range_search6Dt__delau+_const_Dt::Point__a+_const_Dt::Point__b+_const_Dt::Point__c+const_Dt::Point__d+_OutputIterator_res+_Pred__pred+_bool_return_if_succeded9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_range_search.html#Cross_link_anchor_1225\">range_search</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Dt&amp; delau,<BR>\n\nDt::Point a,<BR>\n\nDt::Point b,<BR>\n\nDt::Point c,<BR>\n\nDt::Point d,<BR>\n\nOutputIterator res,<BR>\n\nPred&amp; pred,<BR>\n\nbool return_if_succeded)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes handles to all vertices contained in the closure of the iso-rectangle <MATH><I>(a,b,c,d)</I></MATH>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><MATH><I>a</I></MATH> is the upper left point, <MATH><I>b</I></MATH> the lower left, <MATH><I>c</I></MATH> the lower\nright and <MATH><I>d</I></MATH> the upper right point of the iso rectangle.\nThe computed vertex handles will be placed as a sequence of objects in a container of value type\nof <MATH><I>res</I></MATH>\nwhich points to the first object in the sequence. The function\nreturns an output iterator pointing to the position beyond the end\nof the sequence. <MATH><I>delau</I></MATH> is the C<SMALL>GAL</SMALL> Delaunay triangulation on which we perform the range search operation.\n<MATH><I>pred</I></MATH> controls the search operation. If <MATH><I>return_if_succeded</I></MATH> is <MATH><I>true</I></MATH>, we will end the search\nafter the first success of the predicate, otherwise we will continue till the search is finished.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\nFor the requirements of <I>Dt</I> see the description for the non-predicate version.<BR>\n\nFor the requirements of <I>Pred</I> see the description above.<BR>\n\n\n<P>\n\n<!Next_reference_link_8_54_6!>\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_54!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38407.0}