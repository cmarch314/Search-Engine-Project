{"text": "Navigation Up Table of Contents Bibliography Index Title Page SweepLineTraits 2 Definition A model of the concept SweepLineTraits 2 aggregates the geometric types and primitive operations used by the Sweep line 2 CurveInputIterator SweepLineTraits 2 data structure Types The geometric types defined below must have a default constructor copy constructor and assignment operator SweepLineTraits 2 X monotone curve 2 A type that holds an x monotone curve in the plane SweepLineTraits 2 Point 2 A type that holds the position of a vertex in the plane The type of the end points of X monotone curve 2 curves SweepLineTraits 2 Curve 2 A type that holds a general curve in the plane Its endpoints must be of type Point 2 Curves of type either X monotone curve 2 or Curve 2 can be inserted into a Planar map with intersections 2 Dcel Traits object Operations Comparison result tr compare x Point 2 p Point 2 p1 compares the x coordinates of p and p1 Returns LARGER if x p x p1 SMALLER if x p x p1 EQUAL otherwise Comparison result tr compare xy Point 2 p Point 2 p1 compares the two points p and p1 lexigoraphically First the x coordinates are compared In case of a tie the y coordinates are compared Returns LARGER if x p1 x p2 or if x p1 x p2 and y p1 y p2 SMALLER if x p1 x p2 or if x p1 x p2 and y p1 y p2 EQUAL otherwise bool tr curve is vertical X monotone curve 2 cv returns true if cv is a vertical segment false otherwise bool tr point in x range X monotone curve 2 cv Point 2 pnt returns true if pnt is in the x range of cv false otherwise Comparison result tr curves compare y at x X monotone curve 2 cv1 X monotone curve 2 cv2 Point 2 pnt compares the y coordinate of cv1 and cv2 at the x coordinate of pnt Returns LARGER if cv1 x q cv2 x q SMALLER if cv1 x q cv2 x q EQUAL otherwise Precondition cv1 and cv2 are defined at pnt s x coordinate Precondition cv1 or cv2 contain pnt Comparison result tr curves compare y at x right X monotone curve 2 cv1 X monotone curve 2 cv2 Point 2 pnt compares the y coordinate of cv1 and cv2 immediately to the right of the x coordinate of pnt Precondition cv1 and cv2 meet at pnt x coordinate Precondition cv1 and cv2 are defined to the right of pnt s x coordinate Comparison result tr curve compare y at x Point 2 pnt X monotone curve 2 cv compares the y coordinates of pnt and the vertical projection of pnt on cv Returns SMALLER if y p cv x p LARGER if y p cv x p EQUAL otherwise p is on the curve Precondition cv is defined at pnt s x coordinate bool tr curve equal X monotone curve 2 cv1 X monotone curve 2 cv2 returns true if cv1 and cv2 have the same graph false otherwise bool tr point equal Point 2 p1 Point 2 p2 returns true if p1 is the same as p2 false otherwise bool tr curves overlap X monotone curve 2 cv1 X monotone curve 2 cv2 returns true if cv1 and cv2 overlap in a one dimensional subcurve i e non countable and non infinite number of points false otherwise Point 2 tr curve source X monotone curve 2 cv returns the source of cv Point 2 tr curve target X monotone curve 2 cv returns the target of cv template class OutputIterator OutputIterator tr make x monotone Curve 2 cv OutputIterator res cuts cv into x monotone subcurves and stores them in a sequence starting at res The order in which they are stored defines their order in the hierarchy tree Returns past the end iterator of the sequence void tr curve split X monotone curve 2 cv X monotone curve 2 c1 X monotone curve 2 c2 Point 2 split pt splits cv at split pt into two curves and assigns them to c1 and c2 respectively Precondition split pt is on cv but is not one of its endpoint bool tr nearest intersection to right X monotone curve 2 c1 X monotone curve 2 c2 Point 2 pt Point 2 p1 Point 2 p2 finds the nearest intersection point or points of c1 and c2 lexicographically to the right of pt not including pt itself with one exception explained below If the intersection of c1 and c2 is an X monotone curve 2 that is they overlap at infinitely many points then if the right endpoint and the left endpoint of the overlapping subcurve are strictly to the right of pt they are returned through the two point references p1 and p2 respectively If pt is between the overlapping subcurve endpoints or pt is its left endpoint pt and the right endpoint of the subcurve are returned through p1 and p2 respectively If the intersection of the two curves is a point to the right of pt it is returned through p1 and p2 Returns true if c1 and c2 do intersect to the right of pt false otherwise Has ModelsArr segment traits 2 Kernel Arr segment cached traits 2 Kernel Arr leda segment traits 2 Kernel Arr polyline traits Kernel Container Arr leda polyline traits Kernel Container Arr conic traits 2 Kernel Note that the concept ArrangementTraits 2 is a refinement of the concept SweepLineTraits 2 so each model of the former is a model of the latter See Also CGAL Sweep line 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Sweep_line_2_ref/Concept_SweepLineTraits_2.html", "title": "sweeplinetraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Sweep_line_2_ref/SweepLineTraits_2.tex' -->\n<html> <head>  \n<title>SweepLineTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_852\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_835\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_SweepLineTraits_2\"></A>\n<h2><I>SweepLineTraits_2</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nA model of the concept <I><A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A></I> aggregates the geometric types and\nprimitive operations used by the\n<I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_851\">Sweep_line_2</A>&lt;CurveInputIterator,<A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>&gt;</I>\ndata structure.\n<P>\n\n<H3>Types</H3>\n<P>\n\nThe geometric types defined below must have a default constructor,\ncopy constructor, and assignment operator.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>::X_monotone_curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type that holds an <MATH><I>x</I></MATH>-monotone curve in\n  the plane.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type that holds the position of a vertex in\n  the plane. The type of the end points of <I>X_monotone_curve_2</I> curves.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A>::Curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type that holds a general curve in the plane.\n  Its endpoints must be of type <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n  Curves of type either <I>X_monotone_curve_2</I> or <I>Curve_2</I> can be\n  inserted into a <I><A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A>&lt;Dcel,Traits&gt;</I> object.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Comparison_result_compare_x6const_Point_2__p0+_const_Point_2__p19;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.<A HREF=\"../Kernel_23_ref/Function_compare_x.html#Cross_link_anchor_181\">compare_x</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p0,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares the <I>x</I>-coordinates of <MATH><I>p0</I></MATH> and <MATH><I>p1</I></MATH>.  Returns\n          <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">LARGER</A></I> if <MATH><I>x(p0) &gt; x(p1)</I></MATH>; <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">SMALLER</A></I> if\n\t  <MATH><I>x(p0) &lt; x(p1)</I></MATH>; <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">EQUAL</A></I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Comparison_result_compare_xy6const_Point_2__p0+_const_Point_2__p19;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.<A HREF=\"../Kernel_23_ref/Function_compare_xy.html#Cross_link_anchor_183\">compare_xy</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p0,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares the two points <MATH><I>p0</I></MATH> and <MATH><I>p1</I></MATH> lexigoraphically. First the\n\t   <MATH><I>x</I></MATH>-coordinates are compared. In case of a tie, the <MATH><I>y</I></MATH>-coordinates\n\t   are compared. Returns <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">LARGER</A></I> if <MATH><I>x(p1) &gt; x(p2)</I></MATH>, or if\n\t   <MATH><I>x(p1) = x(p2)</I></MATH> and <MATH><I>y(p1) &gt; y(p2)</I></MATH>;\n\t   <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">SMALLER</A></I> if <MATH><I>x(p1) &lt; x(p2)</I></MATH>, or if <MATH><I>x(p1) = x(p2)</I></MATH> and\n\t   <MATH><I>y(p1) &lt; y(p2)</I></MATH>;\n\t   <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">EQUAL</A></I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_curve_is_vertical6const_X_monotone_curve_2__cv9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.curve_is_vertical (  X_monotone_curve_2 cv)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>cv</I> is a vertical segment, \n          <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_point_in_x_range6const_X_monotone_curve_2__cv+_const_Point_2__pnt_9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.point_in_x_range ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pnt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>pnt</I> is in the <MATH><I>x</I></MATH> range of\n          <I>cv</I>, <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Comparison_result_curves_compare_y_at_x6const_X_monotone_curve_2__cv1+_const_X_monotone_curve_2__cv2+_const_Point_2__pnt_9;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curves_compare_y_at_x ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv1,<BR>\n\nX_monotone_curve_2 cv2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pnt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares the <MATH><I>y</I></MATH>-coordinate of <MATH><I>cv1</I></MATH> and <MATH><I>cv2</I></MATH> at the <MATH><I>x</I></MATH>-coordinate \n          of <MATH><I>pnt</I></MATH>. Returns <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">LARGER</A></I> if <MATH><I>cv1(x(q)) &gt; cv2(x(q))</I></MATH>;\n          <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">SMALLER</A></I> if <MATH><I>cv1(x(q)) &lt; cv2(x(q))</I></MATH>; <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">EQUAL</A></I>\n\t  otherwise.<BR>\n\n<EM>Precondition: </EM><MATH><I>cv1</I></MATH> and <MATH><I>cv2</I></MATH> are defined at <MATH><I>pnt</I></MATH>'s\n          <MATH><I>x</I></MATH>-coordinate.<BR>\n\n<EM>Precondition: </EM><MATH><I>cv1</I></MATH> or <MATH><I>cv2</I></MATH> contain <MATH><I>pnt</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Comparison_result_curves_compare_y_at_x_right6const_X_monotone_curve_2__cv1+_const_X_monotone_curve_2__cv2+_const_Point_2__pnt9;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curves_compare_y_at_x_right ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv1,<BR>\n\nX_monotone_curve_2 cv2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pnt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares the <MATH><I>y</I></MATH>-coordinate of <MATH><I>cv1</I></MATH> and <MATH><I>cv2</I></MATH> immediately to the\n\t   right of the <MATH><I>x</I></MATH>-coordinate of <MATH><I>pnt</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>cv1</I></MATH> and <MATH><I>cv2</I></MATH> meet at <MATH><I>pnt</I></MATH> <MATH><I>x</I></MATH>-coordinate.<BR>\n\n<EM>Precondition: </EM><MATH><I>cv1</I></MATH> and <MATH><I>cv2</I></MATH> are defined to the right of <MATH><I>pnt</I></MATH>'s\n             <MATH><I>x</I></MATH>-coordinate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Comparison_result_curve_compare_y_at_x6const_Point_2__pnt+_const_X_monotone_curve_2__cv9;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curve_compare_y_at_x ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pnt,<BR>\n\nX_monotone_curve_2 cv)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares the <MATH><I>y</I></MATH>-coordinates of <MATH><I>pnt</I></MATH> and the vertical projection of\n\t   <MATH><I>pnt</I></MATH> on <MATH><I>cv</I></MATH>. Returns <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">SMALLER</A></I> if <MATH><I>y(p) &lt; cv(x(p))</I></MATH>;\n\t   <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">LARGER</A></I> if <MATH><I>y(p) &gt; cv(x(p))</I></MATH>;\n\t   <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">EQUAL</A></I> otherwise (p is on the curve).<BR>\n\n<EM>Precondition: </EM><MATH><I>cv</I></MATH> is defined at <MATH><I>pnt</I></MATH>'s <MATH><I>x</I></MATH>-coordinate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_curve_equal6const_X_monotone_curve_2___cv1+_const_X_monotone_curve_2___cv29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curve_equal ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv1,<BR>\n\nX_monotone_curve_2 cv2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>cv1</I> and <I>cv2</I> have the same graph, \n           <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_point_equal6const_Point_2___p1+_const_Point_2___p29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.point_equal (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>p1</I> is the same as <I>p2</I>, <I>false</I>\n           otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_curves_overlap6const_X_monotone_curve_2__cv1+_const_X_monotone_curve_2__cv29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curves_overlap ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv1,<BR>\n\nX_monotone_curve_2 cv2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>cv1</I> and <I>cv2</I> overlap\n          in a one-dimensional subcurve (i.e., non countable and non infinite\n\t  number of points), <I>false</I>. otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_curve_source6const_X_monotone_curve_2__cv9;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.curve_source (  X_monotone_curve_2 cv)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source of <I>cv</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_curve_target6const_X_monotone_curve_2__cv9;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.curve_target (  X_monotone_curve_2 cv)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target of <I>cv</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_make_x_monotone6const_Curve_2__cv+_OutputIterator_res9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tr.make_x_monotone (  Curve_2 cv,  OutputIterator res)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    cuts <I>cv</I> into <MATH><I>x</I></MATH>-monotone subcurves and stores them in a\n\t   sequence starting at <I>res</I>. The order in which they are stored\n\t   defines their order in the hierarchy tree. Returns past-the-end\n\t   iterator of the sequence.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_curve_split6const_X_monotone_curve_2__cv+_X_monotone_curve_2__c1+_X_monotone_curve_2__c2+_const_Point_2__split_pt9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.curve_split ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv,<BR>\n\nX_monotone_curve_2&amp; c1,<BR>\n\nX_monotone_curve_2&amp; c2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> split_pt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    splits <MATH><I>cv</I></MATH> at <I>split_pt</I> into two curves, and assigns them to\n           <I>c1</I> and <I>c2</I> respectively.<BR>\n\n<EM>Precondition: </EM><I>split_pt</I> is on <I>cv</I> but is not one of its\n\t     endpoint.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_nearest_intersection_to_right6const_X_monotone_curve_2__c1+_const_X_monotone_curve_2__c2+_const_Point_2__pt+_Point_2__p1+_Point_2__p29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tr.nearest_intersection_to_right ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 c1,<BR>\n\nX_monotone_curve_2 c2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&amp; p1,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&amp; p2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    finds the nearest <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point (or points) of <I>c1</I> and\n\t   <I>c2</I> lexicographically to the right of <I>pt</I> not including\n\t   <I>pt</I> itself, (with one exception explained below).\n\t   If the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of <I>c1</I> and <I>c2</I> is an\n\t   <I>X_monotone_curve_2</I>, that is, they overlap at infinitely many\n\t   points, then if the right endpoint and the left endpoint of the\n\t   overlapping subcurve are strictly to the right of <I>pt</I>, they are\n\t   returned through the two point references <I>p1</I> and <I>p2</I>\n\t   respectively. If <I>pt</I> is between the overlapping-subcurve\n\t   endpoints, or <I>pt</I> is its left endpoint, <I>pt</I> and the right\n\t   endpoint of the subcurve are returned through <I>p1</I> and <I>p2</I>\n\t   respectively. If the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the two curves is a point to the\n\t   right of <I>pt</I>, it is returned through <I>p1</I> and <I>p2</I>.\n\t   Returns <I>true</I> if <I>c1</I> and <I>c2</I> do intersect to the right\n\t   of <I>pt</I>, <I>false</I> otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3><I><A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_837\">Arr_segment_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I><A HREF=\"../Arrangement_2_ref/Class_Arr_segment_cached_traits_2.html#Cross_link_anchor_839\">Arr_segment_cached_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I>Arr_leda_segment_traits_2&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I>Arr_polyline_traits&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>, Container&gt;</I><BR>\n\n<I>Arr_leda_polyline_traits&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>, Container&gt;</I><BR>\n\n<I><A HREF=\"../Arrangement_2_ref/Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>\n<P>\n\nNote that the concept <A HREF=\"../Arrangement_2_ref/Concept_ArrangementTraits_2.html#Cross_link_anchor_835\">ArrangementTraits_2</A> is a refinement of the \n  concept <I><A HREF=\"Concept_SweepLineTraits_2.html#Cross_link_anchor_852\">SweepLineTraits_2</A></I> so each model of the former is a model of the latter.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Sweep_line_2.html#Cross_link_anchor_850\">CGAL::Sweep_line_2</A></I>\n<P>\n\n<!Next_reference_link_8_26_3!>\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_26!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39717.0}