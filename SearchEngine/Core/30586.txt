{"text": "Next Communication with Streams Up Input and Output Previous System Streams Opening New Streams A stream is opened for input or output by means of the open 3 predicate The goal open File Mode Stream opens a communication channel with the file specified by File File may be an atom or a string and takes the form of a file name in the host machine environment In the UNIX environment file names can take several forms abolute path name e g usr peter prolog file pl relative to the current directory e g prolog file pl relative to the own home directory e g prolog file pl relative to a user s home directory e g peter prolog file pl start with an environment variable e g HOME prolog file pl Mode is one of the atoms read write append update or string where the stream is to be opened for input output output at the end of the existing file both input and output or to a string respectively Opening a file in write mode will create it if it does not exist and erase the previous contents if it does exist Opening a file in append mode will keep the current contents of the file and start writing at its end The mode string specifies a stream to from a string and is described in detail in section Stream is a logical stream identifier or an uninstantiated variable The stream identifier may then be used in predicates which have a named stream as one of their arguments For example open foo update stream write stream subject will write the atom subject to the file foo A stream Stream opened by the open 3 predicate may be subsequently closed by the call close Stream The predicate pipe In Out opens a pipe i e two streams In for reading and Out for writing which are connected together using the pipe 2 system call This mechanism is normally used to communicate with other processes which were forked by the main process but it can also be used to temporarily store some data instead of writing it into a file however for this purpose a string stream is more efficient Before any reading is possible the output must be usually flushed with flush 1 The term being read from the input end of the pipe must be written in a valid Prolog syntax and so it must be terminated by a fullstop An example of its use eclipse 1 pipe in out yes eclipse 2 write out output term args n flush out yes eclipse 3 read in X X output term args yes If too much data is written into the pipe without reading it ECLiPSe may be suspended by the operating system Next Communication with Streams Up Input and Output Previous System Streams Micha Meier Mon Mar 4 12 11 45 MET 1996", "_id": "http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node138.html", "title": "", "html": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Opening New Streams</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Opening New Streams\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html3909 HREF=\"node139.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3907 HREF=\"node135.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3901 HREF=\"node137.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3911 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3910 HREF=\"node139.html\"> Communication with Streams</A>\r\n<B>Up:</B> <A NAME=tex2html3908 HREF=\"node135.html\"> Input and Output</A>\r\n<B> Previous:</B> <A NAME=tex2html3902 HREF=\"node137.html\"> System Streams</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION001130000000000000000> Opening New Streams</A></H1>\r\n<P>\r\n<A NAME=openstream>&#160;</A>\r\nA stream is opened for input or output by means of the <b> open/3</b> predicate.\r\n<A NAME=2083>&#160;</A>\r\nThe goal\r\n<blockquote> <PRE>open(File, Mode, Stream)\r\n</PRE></blockquote> opens a communication channel\r\nwith the file specified by <i> File</i>.\r\n<P>\r\n<i> File</i> may be an atom or a string, and takes\r\nthe form of a file name in the host machine environment<A NAME=tex2html457 HREF=\"footnode.html#2296\"><IMG ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ecrc.de/eclipse/new_icons//foot_motif.gif\"></A>.\r\nIn the UNIX environment, file names can take several forms:\r\n<UL><LI> abolute path name, e.g. /usr/peter/prolog/file.pl\r\n<LI> relative to the current directory, e.g. prolog/file.pl\r\n<LI> relative to the own home directory, e.g. <IMG  ALIGN=BOTTOM ALT=\"\" SRC=\"img15.gif\">/prolog/file.pl\r\n<LI> relative to a user's home directory, e.g. <IMG  ALIGN=BOTTOM ALT=\"\" SRC=\"img16.gif\">peter/prolog/file.pl\r\n<LI> start with an environment variable, e.g. $HOME/prolog/file.pl\r\n</UL>\r\n<P>\r\n<i> Mode</i> is one of the atoms <tt> read</tt>, <tt> write</tt>, <tt> append</tt>,\r\n<tt> update</tt> or <tt> string</tt>,\r\nwhere the stream is to be opened for input, output, output at the\r\nend of the existing file, both input and output or to a string, respectively.\r\nOpening a file in <tt> write</tt> mode will create it if it does not exist,\r\nand erase the previous contents if it does exist.\r\nOpening a file in <tt> append</tt> mode will keep the current contents\r\nof the file and start writing at its end.\r\nThe mode <tt> string</tt> specifies a stream to/from a string and\r\nis described in detail in section <A HREF=\"node143.html#stringio\"><IMG ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ecrc.de/eclipse/new_icons//cross_ref_motif.gif\"></A>.\r\n<P>\r\n<i> Stream</i> is a logical stream identifier or an uninstantiated variable.\r\nThe stream identifier may then be used in predicates\r\nwhich have a named stream as one of their arguments. For example\r\n<blockquote> <PRE>open(`foo', update, stream), write(stream, subject)\r\n</PRE></blockquote>\r\nwill write the atom\r\n<i> subject</i> to the file `foo'.\r\nA stream <i> Stream</i> opened by the <b> open/3</b>\r\npredicate may be subsequently closed by\r\nthe call\r\n<blockquote> <PRE>close(Stream)\r\n</PRE></blockquote>\r\nThe predicate\r\n<blockquote> <PRE>pipe(In, Out)\r\n</PRE></blockquote>\r\nopens a pipe, i.e. two streams, <i> In</i> for reading and <i> Out</i>\r\nfor writing, which are connected together using the <i> pipe(2)</i>\r\nsystem call.\r\nThis mechanism is normally used to communicate with other processes\r\nwhich were forked by the main process, but it can also be used\r\nto temporarily store some data instead of writing\r\nit into a file, however for this purpose a string stream is\r\nmore efficient.\r\nBefore any reading is possible, the output\r\nmust be usually flushed with <b> flush/1</b>.\r\nThe term being read from the input end of the pipe\r\nmust be written in a valid Prolog syntax,\r\nand so it must be terminated by a fullstop.\r\nAn example of its use:\r\n<blockquote> <PRE>[eclipse 1]: pipe(in, out).\r\n\r\nyes.\r\n[eclipse 2]: write(out, &quot;output_term(args).\\n&quot;), flush(out).\r\n\r\nyes.\r\n[eclipse 3]: read(in, X).\r\n\r\nX = output_term(args)\r\nyes.\r\n</PRE></blockquote>\r\nIf too much data is written into the pipe without reading it,\r\n<A NAME=tex2html458 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  may be suspended by the operating system.\r\n<P>\r\n<BR> <HR><A NAME=tex2html3909 HREF=\"node139.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3907 HREF=\"node135.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3901 HREF=\"node137.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3911 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3910 HREF=\"node139.html\"> Communication with Streams</A>\r\n<B>Up:</B> <A NAME=tex2html3908 HREF=\"node135.html\"> Input and Output</A>\r\n<B> Previous:</B> <A NAME=tex2html3902 HREF=\"node137.html\"> System Streams</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "id": 30586.0}