{"text": "ICS 125 Project in Software System Design Fall Quarter 1999 Architecture and Module Specifications Due Date As described in the course syllabus Overview After finalizing your requirements your team shall develop a design that fully satisfies the requirements for your application This deliverable will consist of two primary components a design specification consisting of a high level architectural design and module specifications and an integration test plan You may wish to do an object oriented design and adhere to the Object Modeling Technique In this case your design specification should include the following three models the object model which consists of object diagrams the dynamic model which consists of event traces and state diagrams and the functional model which consists of data flow diagrams The design should describe all system level objects tasks operations the relationships between those objects tasks and external interaction with the environment as well as object class specifications that further detail the object design In conjunction with this object oriented design your team must develop an integration test plan covering the interfaces between specified modules and or objects The integration test plan must cover all interactions between modules objects by applying functional test heuristics black box to each module class interface in the design specification and developing a test plan for each interaction between modules and or objects Your document must specify the correspondence between the requirements specification and your design You may show this correspondence any way you feel is appropriate e g make notations throughout your document or using a table that cross references paragraph numbers Developing the software design will undoubtedly reveal inadequacies in previous documents Please note these problems and what was done to solve them Don t forget to include your meeting minutes and performance appraisals with your document refer to the syllabus for the complete check list of what has to be turned in As before make sure that you post your design document and your meeting minutes to your team web page Deliverable Objectives Quality Keep in mind that key objectives of a design document are to Develop a coherent representation of software that will satisfy requirements Identify inadequacies in requirements Decompose the system into sub systems that provide related sets of services Establish a framework for sub system control and communication Specify modules that can be assigned as coding responsibilities Document design decisions and rationale Provide a reference tool readable by developers testers and maintainers Provide a basis for integration and testing In addition keep in mind that a design document should exhibit the following qualities Complete everything that is essential is described Rigorous expressed in a well defined notation Consistent no mismatched interfaces Uniform the entire document is at same level of detail Modifiable this document will change just like all the others Desensitized to change hides implementation details and secrets Confirmable verifiable and testable you can tell when you ve met the design Document Contents Introduction Expand your introduction to discuss your specific approaches to the design of the system and the organization of this document This description is essentially just an updated version of the introduction you included in your previous deliverable Understanding Expand the understanding section of your previous document Make sure to add descriptions of what steps or actions you took to understand each technology studied during this phase If you make changes to this section add text describing why the change was necessary and why it more accurately reflects your new understanding This section need not be different if your understanding hasn t changed Project Plan This will be an iterative expansion of your previous submission Expand your project plan to represent how you have accomplished the work so far Reassess the project risks Expand your task network or work breakdown structure to include the effort expended to complete this task Based on the work you have done revise your estimates on how much your team can accomplish and deliver If you make changes add text describing why the change was necessary or why it will improve the ability of your team to accomplish the work you have proposed Design Specification Architecture Overview Architectural StyleWhat style of architecture did you adopt Provide a reference to a defining document System Architecture OverviewThis is the place for your one great diagram that shows how your system is built You might want to use more than one diagram to show e g some different abstractions of the design such as a data flow view a layers of abstraction view an object view or an OS process view Subsystem NarrativeWhat each subsystem means Major limitations on the current design Modules Objects SpecificationIf you would like to use the Object Modelling Technique OMT see the associated OMT format as a suggestion List of Modules Objects within your system For each module object provide a Module Specification Name Definition Purpose what it is does Narrative Comment how it works What are the interfaces or APIs E g using Java terminologypublic private protected Data What state does it keep what variables Access Who has access to the module object data How does it fit into the inheritance with uses heirarchy Constraints what constraints are there for this object module Cardinality How many will there be Other useful diagrams Uses is Composed of Design class diagrams State transition diagrams API s Class category diagrams or other useful diagrams Integration Test Plan Includes an integration test plan capable of demonstrating that the design meets the functionality specified in the requirements Test cases should cover each module object and module object interaction specified in the design You should consider each module object as a subsystem and apply functional black box test heuristics such as input output coverage and error exception coverage to the parameters identified in each operation in the interface In addition you should develop a test case for each module object interaction NOTE if desired the test cases can be grouped with the design entity to which they apply otherwise a cross reference listing of some sort should be provided For each test Test ID Purpose of Test Item s being tested Input specification Output specification Expected Results or Test Oracle Mechanism Test environmental needs or special test procedures Initial Demonstration Plan What and how will you demonstrate Tracking and Control Mechanisms Configuration Management how will your modules objects be managed file structure sub directories Makefiles etc persistent data Requirements Cross Reference what modules objects satisfy what requirements a table mapping requirement to module objectmake sure it is complete and consistent Modifications to Prior Documents Requirements If any requirements changed were added or deleted this is the place to make this explicit Highlight why the requirement was changed added deleted and by whom customer developer etc Make sure your requirements meet the objectives of completeness understandability utility unambiguity and consistency If your requirements have not changed then this section should be identical to what you submitted earlier Glossary Defines any terms used in the specifications above This portion of the document may be written as an extension to the glossary submitted with the requirements or may be a separate document that only defines terms local to the design phase Additional Documentation This section is reserved for any additional documentation developed during this phase of the project Specifically if during the course of developing the architecture your understanding of the various technologies involved in the project changed or you discovered items that were not documented but which are important include that information here Also list here the major background sources that you used during this phase or any that you plan to use during the remainder of the project This includes references to similar systems and or procedures Requirements Presentations Reviews See the syllabus for dates Each team should prepare a 15 minute presentation after which we will allow up to 5 minutes of questions Prepare your presentation appropriately Your presentation should include the following Some context for your project brief Current state of your project plan Highlights of your design including an overview of your architecture this should comprise the bulk of your presentation one or more key module object specifications Modifications to your requirements that arose as a result of your design process Overview of your integration test plan ", "_id": "http://www.ics.uci.edu/~taylor/ics125_fq99/design.html", "title": "deliverable 3: design", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<HTML>\n<HEAD>\n   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\n   <META NAME=\"GENERATOR\" CONTENT=\"Mozilla/4.07 (Macintosh; I; PPC) [Netscape]\">\n   <TITLE>Deliverable 3: Design</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#FFFFF0\">\n\n<CENTER>\n<H2> ICS 125: Project in Software System Design</H2></CENTER>\n\n<CENTER>\n<H3> Fall Quarter 1999</H3></CENTER>\n\n<CENTER>\n<H1> Architecture and Module Specifications</H1></CENTER>\n\n<H3>\nDue Date</H3>\nAs described in the course syllabus.\n\n<HR>\n<h3>Overview</h3>\n<P>After finalizing your requirements, your team shall develop a\ndesign that fully satisfies the requirements for your\napplication. This deliverable will consist of two primary components:\na design specification (consisting of a high-level architectural design\nand module specifications) and an integration test plan. \n\n<P>You may wish to do an object-oriented design and adhere to the Object\nModeling Technique. In this case, your design specification should\ninclude the following three models: the object model, which consists of\nobject diagrams; the dynamic model, which consists of event traces and\nstate diagrams; and the functional model, which consists of data flow diagrams.\nThe design should describe all system level objects/tasks, operations,\nthe relationships between those objects/tasks, and external interaction\nwith the environment as well as object class specifications that further\ndetail the object design.\n\n<P>In conjunction with this object-oriented design, your team must develop\nan integration test plan covering the\ninterfaces between specified modules and/or objects. The integration\ntest plan must cover all interactions between modules/objects by applying\nfunctional test heuristics (black box) to each module/class interface in\nthe design specification and developing a test plan for each interaction\nbetween modules and/or objects.\n\n<P>Your document must specify the correspondence between the\nrequirements specification and your design. You may show this\ncorrespondence any way you feel is appropriate (e.g., make notations\nthroughout your document or using a table that cross-references\nparagraph numbers).\n\n<P>Developing the software design will undoubtedly reveal inadequacies\nin previous documents. Please note these problems and what was done to\nsolve them.\n\n<P>Don't forget to include your meeting minutes and performance appraisals\nwith your document; refer to the syllabus for the complete check-list of\nwhat has to be turned in. As before, make sure that you post your design\ndocument and your meeting minutes to your team web page.\n\n<HR>\n<H3> Deliverable Objectives/Quality</H3>\nKeep in mind that key objectives of a design document are to:\n<UL>\n<LI> Develop a coherent representation of software that will satisfy requirements</LI>\n<LI> Identify inadequacies in requirements</LI>\n<LI> Decompose the system into sub-systems that provide related sets of services</LI>\n<LI> Establish a framework for sub-system control and communication</LI>\n<LI> Specify modules that can be assigned as coding responsibilities</LI>\n<LI> Document design decisions and rationale</LI>\n<LI> Provide a reference tool readable by developers, testers, and maintainers</LI>\n<LI> Provide a basis for integration and testing</LI>\n</UL>\n\nIn addition, keep in mind that a design document should exhibit the\nfollowing qualities:\n<UL>\n<LI> Complete: everything that is essential is described</LI>\n<LI> Rigorous: expressed in a well-defined notation</LI>\n<LI> Consistent: no mismatched interfaces</LI>\n<LI> Uniform: the entire document is at same level of detail</LI>\n<LI> Modifiable: this document will change just like all the others</LI>\n<LI> Desensitized to change: hides implementation details and secrets</LI>\n<LI> Confirmable, verifiable and testable: you can tell when you've met the\ndesign</LI>\n</UL>\n\n<HR>\n<H3> Document Contents</H3>\n\n<H4> Introduction</H4>\nExpand your introduction to discuss your specific approaches to the\ndesign of the system and the organization of this document. This\ndescription is essentially just an updated version of the introduction\nyou included in your previous deliverable.\n\n<H4> Understanding</H4>\nExpand the understanding section of your previous document. Make sure\nto add descriptions of what steps or actions you took to understand\neach technology studied during this phase. If you make changes to this\nsection, add text describing why the change was necessary, and why it\nmore accurately reflects your new understanding. This section need not\nbe different if your understanding hasn't changed.\n\n<H4> Project Plan</H4>\nThis will be an iterative expansion of your previous submission. Expand\nyour project plan to represent how you have accomplished the work so\nfar.  Reassess the project risks. Expand your task network or work\nbreakdown structure to include the effort expended to complete this\ntask. Based on the work you have done, revise your estimates on how\nmuch your team can accomplish and deliver.\n\n<P>If you make changes, add text describing why the change was\nnecessary or why it will improve the ability of your team to accomplish\nthe work you have proposed.\n\n<H4> Design Specification</H4>\n\n<UL>\n<LI> Architecture Overview</LI>\n   <UL>\n   <LI> Architectural Style</LI>\n   <BR>What style of architecture did you adopt? Provide a reference to a\n   defining document.\n   \n   <LI> System Architecture Overview</LI>\n   <BR>This is the place for your \"one great diagram\" that shows how your\n   system is built. You might want to use more than one diagram, to show,\n   e.g., some different abstractions of the design (such as a data flow view,\n   a layers of abstraction view, an object view, or an OS process view)\n   \n   <LI> Subsystem Narrative</LI>\n   <BR>What each subsystem means\n   \n   <LI> Major limitations on the current design</LI>\n   </UL>\n\n<LI>\nModules/Objects Specification</LI>\n<BR>If you would like to use the Object Modelling Technique (OMT), see\nthe associated <A HREF=\"http://www.ics.uci.edu/~djr/ics125/OMT.html\">OMT\nformat</A> as a suggestion.\n   <UL>\n   <LI> List of Modules/Objects within your system</LI>\n   <LI> For each module/object, provide a Module Specification</LI>\n      <UL>\n      <LI> Name</LI>\n      <LI> Definition/Purpose - what it is/does</LI>\n      <LI> Narrative/Comment - how it works</LI>\n      <LI> What are the interfaces or APIs? E.g., using Java terminology</LI>\n        <BR>public\n        <BR>private\n        <BR>protected\n      <LI> Data - What state does it keep, what variables?</LI>\n      <LI> Access - Who has access to the module/object/data?</LI>\n      <LI> How does it fit into the inheritance/with/uses heirarchy?</LI>\n      <LI> Constraints - what constraints are there for this object/module?</LI>\n      <LI> Cardinality - How many will there be?</LI>\n      </UL>\n   <LI> Other useful diagrams : Uses, is-Composed-of, Design class diagrams, State\n   transition diagrams, API's Class-category diagrams, or other useful diagrams</LI>\n   </UL>\n</UL>\n\n<H4> Integration Test Plan</H4>\n<p>\nIncludes an integration test plan capable of demonstrating that the\ndesign meets the functionality specified in the requirements. Test\ncases should cover each module/object and module/object interaction\nspecified in the design. You should consider each module/object as a\nsubsystem and apply functional (black box) test heuristics (such as\ninput/output coverage and error/exception coverage) to the parameters\nidentified in each operation in the interface. In addition, you should\ndevelop a test case for each module/object interaction.\n\n<P>NOTE: if desired, the test cases can be grouped with the design\nentity to which they apply, otherwise a cross reference listing of some\nsort should be provided.\n\n<UL>\n   <LI> For each test</LI>\n      <UL>\n      <LI> Test ID</LI>\n      <LI> Purpose of Test</LI>\n      <LI> Item(s) being tested</LI>\n      <LI> Input specification</LI>\n      <LI> Output specification</LI>\n         <UL>\n         <LI> Expected Results or Test Oracle Mechanism</LI>\n         </UL>\n      <LI> Test environmental needs or special test procedures</LI>\n      </UL>\n</UL>\n\n<H4> Initial Demonstration Plan</H4>\nWhat and how will you demonstrate? \n\n<H4> Tracking and Control Mechanisms</H4>\n<p>\nConfiguration Management: how will your modules/objects be managed?\n   <UL>\n   <LI> file structure, sub-directories, Makefiles, etc.</LI>\n   <LI> persistent data</LI>\n   </UL>\n\n<p>\nRequirements Cross Reference: what modules/objects satisfy what requirements?\n   <UL>\n   <LI> a table mapping requirement to module/object</LI>\n   <BR>make sure it is complete and consistent.\n   </UL>\n\n<H4> Modifications to Prior Documents</H4>\n\n<H5> Requirements</H5>\nIf any requirements changed, were added or deleted, this is the place\nto make this explicit. Highlight why the requirement was\nchanged/added/deleted and by whom (customer, developer, etc.). Make\nsure your requirements meet the objectives of completeness,\nunderstandability, utility, unambiguity, and consistency. If your\nrequirements have not changed, then this section should be identical to\nwhat you submitted earlier.\n\n<H4> Glossary</H4>\nDefines any terms used in the specifications above.  This portion of\nthe document may be written as an extension to the glossary submitted\nwith the requirements, or may be a separate document that only defines\nterms local to the design phase.\n\n<H4> Additional Documentation</H4>\n\nThis section is reserved for any additional documentation developed\nduring this phase of the project. Specifically, if during the course of\ndeveloping the architecture your understanding of the various\ntechnologies involved in the project changed, or you discovered items\nthat were not documented but which are important, include that\ninformation here.\n\n<P>Also list here the major background sources that you used during\nthis phase or any that you plan to use during the remainder of the\nproject. This includes references to similar systems and/or\nprocedures.\n\n<hr>\n<h3>Requirements Presentations/Reviews.</h3>\nSee the syllabus for dates.\n\n<P>Each team should prepare a 15 minute presentation, after which we will\nallow up to 5 minutes of questions. \n\n<p>\nPrepare your presentation appropriately. Your presentation should include\nthe following:\n<UL>\n   <LI> Some context for your project (brief!);</LI>\n   <LI> Current state of your project plan;</LI>\n   <LI> Highlights of your design including</LI>\n      <UL>\n      <LI> an overview of your architecture (this should comprise the bulk\n\t of your presentation)</LI>\n      <LI> one or more key module/object specifications;</LI>\n      </UL>\n   <LI> Modifications to your requirements that arose as a result of your design\n   process;</LI>\n   <LI> Overview of your integration test plan.</LI>\n</UL>\n\n</BODY>\n</HTML>\n", "id": 1968.0}