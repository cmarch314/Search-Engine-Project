{"text": "Project 3 Painting a picture Overview In this project you will be implementing a simple 2D rendering algorithm know as the painter s algorithm As input to this algorithm your program will take a scene i e a collection of 2D shapes e g circle rectangles and triangles and an associated depth for each shapes The algorithm then produces a drawing of the scene respecting the occlusions between shapes To achieve this the algorithm first draws more distance shapes and then on top of these exiting shapes draws closer shapes The output image format we will be using is PPM an ASCII based image format described below The image viewer ristretto can open such images and has been installed on your virtual machine The algorithm Input The input to the algorithm consists of min y max y the range of y coordinates is min y max y increasing downward min x max x the range of x coordinates is min x max x increasing rightward max depth the range of depth values is max depth increasing toward the viewer s eye A collection of shapes with depth values Output The output of the algorithm is a coloring of the pixels representing the scene The pixels are stored in an max x min x 1 by max y min y 1 2D array Pseudocode The algorithm given in pseudo code below consists of four nested for loops There are many optimizations one can make to this algorithm see CS 164 but for this project we will just use this basic version for y from min y to max y for x from min x to max x for d from to max depth for each shape S at depth d if point x y intersects S color pixel associated with x y the color of S Warning This algorithm will be fairly slow possibly taking a few minutes for larger inputs especially when run with memcheck File formats As was the case in Project 2 the input and output files for this project will have a rigid format When parsing the input files you may assume it will be exactly as specified below including whitespace We will assume the same about your output Input format Each line of the input file will start with one of sixe commands COLOR CANVAS DEPTH RECTANGLE SQUARE and CIRCLE followed by parameter described below COLOR red green blue Sets the current color red an int in the range 255 representing the red valuegreen an int in the range 255 representing the green valueblue an int in the range 255 representing the blue value CANVAS x1 y1 x2 y2 Sets the viewing canvas size x1 an int representing the x value of the left boundaryy1 an int representing the y value of the top boundaryx2 an int representing the x value of the right boundaryy2 an int representing the y value of the bottom boundary DEPTH depth Sets the current depth depth an int in the range 15 representing the current depth RECTANGLE x1 y1 x2 y2 Adds a rectangle to the scene using current depth and color x1 an int representing the x value of the left boundaryy1 an int representing the y value of the top boundaryx2 an int representing the x value of the right boundaryy2 an int representing the y value of the bottom boundary CIRCLE x1 y2 r Adds a circle to the scene using current depth and color x1 y1 center of the circler radius of the circle TRIANGLE x1 y1 x2 y2 x3 y3 Adds a triangle to the scene using the current depth and color x1 y1 first vertex of the triangle x2 y2 second vertex of the triangle x3 y3 third vertex of the triangle The first line of a file will always be a COLOR command which sets the background color The second line will always be a CANVAS command and this will be the only CANVAS command The third line will always be a DEPTH command setting the initial depth An example file would be COLOR 255 255 255 CANVAS 2 3 DEPTH COLOR 255 RECTANGLE 1 1 6 6 COLOR 255 DEPTH 35 CIRCLE 15 15 5 COLOR 255 DEPTH 3 TRIANGLE 5 275 175 275 75 1 COLOR 128 128 128 DEPTH 15 RECTANGLE 5 5 15 15 This file produces the following image Output format The output format is the image format know as Plain PPM This is a convenient format for us as it is simply a text file and you already know how to write to text files from Project 2 The first line of a Plain PPM file consists of the two characters P3 This is known as a magic number and lets the image viewer know what format you are using The next line consists of two int s the first is the width of the image and the second is the height The third line will always be 255 for you and represents the maximum value of a color channel Now there are height many more lines each consisting of width many triples of int s representing the color of the pixel at this position For an example see http en wikipedia org wiki Netpbm format PPM example and the examples included in the tar gz for this project Your task Your task is essentially the same as Project 2 Parse the input file so that it may be used in the painter s algorithmImplement the painter s algorithmOutput the PPM file In addition your code should logically organized into separate objects and functions grouped into files In the end we should be able to use the command make run input dat output ppm where input dat is properly formated and get a properly formated output ppm that can be opened in ristretto Rules For this project you may not use any C container classes or automatic memory management features Part of the purpose of this project is to learn about manual memory management with objects Thus the only libraries other than ones you wrote you may include are iostream string and sstream You program must run without any memory leaks segfaults or other memory access errors To make sure that your code does not have memory errors you should test your program with the command make memcheck inputfile outputfile which will produce a memory diagnostics report for your program Starter code The starter code for this project include the beginnings of an object oriented solution to this problem In particular it include a abstract class called Shape from which we have a subclass Triangle to be used for triangles You should use the class Triangle as an example on which to base a Rectangle and Circle class You are free to modify this code to suit your needs for the project Also you will also want to modify the ArrayList example from class to be used to contain your shapes as you parse the file Project 3 starter code project3 tar gz You can download this file from a terminal with wget http www ics uci edu mbannist teaching ics45c project3 project3 tar gz ", "_id": "http://www.ics.uci.edu/~mbannist/teaching/ics45c/project3/", "title": "none", "html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n  \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/~mbannist/css/default.css\"/>\n  \n\n  <title></title>\n\n  \n</head>\n\n<body>\n  <h1 id=\"project-3-painting-a-picture\">Project 3: Painting a picture</h1>\n  <hr />\n  \n  <h2 id=\"overview\">Overview</h2>\n  <p>In this project you will be implementing a simple 2D-rendering algorithm know as the <a href=\"https://en.wikipedia.org/wiki/Painters_algorithm\">painter\u2019s algorithm</a>. As input to this algorithm your program will take a scene, i.e., a collection of 2D-shapes (e.g., circle, rectangles and triangles) and an associated depth for each shapes. The algorithm then produces a drawing of the scene respecting the occlusions between shapes. To achieve this the algorithm first draws more distance shapes and then on top of these exiting shapes draws closer shapes. The output image format we will be using is PPM an ASCII based image format, described below. The image viewer ristretto can open such images and has been installed on your virtual machine.</p>\n  \n  <h2 id=\"the-algorithm\">The algorithm</h2>\n  \n  <h4 id=\"input\">Input</h4>\n  <p>The input to the algorithm consists of</p>\n  \n  <ul>\n    <li><strong>min_y</strong>, <strong>max_y</strong>: the range of y-coordinates is [min_y, max_y] (increasing downward)</li>\n    <li><strong>min_x</strong>, <strong>max_x</strong>: the range of x-coordinates is [min_x, max_x] (increasing rightward)</li>\n    <li><strong>max_depth</strong>: the range of depth values is [0, max_depth] (increasing toward the viewer\u2019s eye)</li>\n    <li>A collection of shapes with depth values</li>\n  </ul>\n  \n  <h4 id=\"output\">Output</h4>\n  <p>The output of the algorithm is a coloring of the pixels, representing the scene. The pixels are stored in an <strong>(max_x - min_x + 1)</strong> by <strong>(max_y - min_y + 1)</strong> 2D-array.</p>\n  \n  <h4 id=\"pseudocode\">Pseudocode</h4>\n  <p>The algorithm given in pseudo code below consists of four nested for loops. There are many optimizations one can make to this algorithm (see CS 164), but for this project we will just use this basic version.</p>\n  \n  <pre><code>for y from min_y to max_y:\n      for x from min_x to max_x:\n          for d from 0 to max_depth:\n              for each shape S at depth d:\n                  if point (x,y) intersects S:\n                      color pixel associated with (x,y) the color of S\n  </code></pre>\n  \n  <p><strong>Warning:</strong> This algorithm will be fairly slow, possibly taking a few minutes for larger inputs, especially when run with <strong>memcheck</strong>.</p>\n  \n  <h2 id=\"file-formats\">File formats</h2>\n  <p>As was the case in <a href=\"project2.html\">Project 2</a>, the input and output files for this project will have a rigid format. When parsing the input files you may assume it will be exactly as specified below, including whitespace. We will assume the same about your output.</p>\n  \n  <h4 id=\"input-format\">Input format</h4>\n  <p>Each line of the input file will start with one of sixe commands: <strong>COLOR</strong>, <strong>CANVAS</strong>, <strong>DEPTH</strong>, <strong>RECTANGLE</strong>, <strong>SQUARE</strong> and <strong>CIRCLE</strong>, followed by parameter described below.</p>\n  \n  <ul>\n    <li><strong>COLOR red green blue</strong>: Sets the current color\n      <ul>\n        <li><strong>red</strong>: an <strong>int</strong> in the range [0,255] representing the red value</li>\n        <li><strong>green</strong>: an <strong>int</strong> in the range [0,255] representing the green value</li>\n        <li><strong>blue</strong>: an <strong>int</strong> in the range [0,255] representing the blue value</li>\n      </ul>\n    </li>\n    <li><strong>CANVAS x1 y1 x2 y2</strong>: Sets the viewing canvas size\n      <ul>\n        <li><strong>x1</strong>: an <strong>int</strong> representing the x-value of the left boundary</li>\n        <li><strong>y1</strong>: an <strong>int</strong> representing the y-value of the top boundary</li>\n        <li><strong>x2</strong>: an <strong>int</strong> representing the x-value of the right boundary</li>\n        <li><strong>y2</strong>: an <strong>int</strong> representing the y-value of the bottom boundary</li>\n      </ul>\n    </li>\n    <li><strong>DEPTH depth</strong>: Sets the current depth\n      <ul>\n        <li><strong>depth</strong>: an <strong>int</strong> in the range [0,15] representing the current depth</li>\n      </ul>\n    </li>\n    <li><strong>RECTANGLE x1 y1 x2 y2</strong>: Adds a rectangle to the scene using current depth and color\n      <ul>\n        <li><strong>x1</strong>: an <strong>int</strong> representing the x-value of the left boundary</li>\n        <li><strong>y1</strong>: an <strong>int</strong> representing the y-value of the top boundary</li>\n        <li><strong>x2</strong>: an <strong>int</strong> representing the x-value of the right boundary</li>\n        <li><strong>y2</strong>: an <strong>int</strong> representing the y-value of the bottom boundary</li>\n      </ul>\n    </li>\n    <li><strong>CIRCLE x1 y2 r</strong>: Adds a circle to the scene using current depth and color\n      <ul>\n        <li><strong>(x1, y1)</strong>: center of the circle</li>\n        <li><strong>r</strong>: radius of the circle</li>\n      </ul>\n    </li>\n    <li><strong>TRIANGLE x1 y1 x2 y2 x3 y3</strong>: Adds a triangle to the scene using the current depth and color\n      <ul>\n        <li><strong>(x1, y1)</strong>: first vertex of the triangle</li>\n        <li><strong>(x2, y2)</strong>: second vertex of the triangle</li>\n        <li><strong>(x3, y3)</strong>: third vertex of the triangle</li>\n      </ul>\n    </li>\n  </ul>\n  \n  <p>The first line of a file will always be a <strong>COLOR</strong> command, which sets the background color. The second line will always be a <strong>CANVAS</strong> command, and this will be the only <strong>CANVAS</strong> command. The third line will always be a <strong>DEPTH</strong> command setting the initial depth. An example file would be:</p>\n  \n  <pre><code>COLOR 255 255 255\n  CANVAS 0 0 200 300\n  DEPTH 0\n  COLOR 255 0 0\n  RECTANGLE 10 10 60 60\n  COLOR 0 255 0\n  DEPTH 35\n  CIRCLE 150 150 50\n  COLOR 0 0 255\n  DEPTH 30\n  TRIANGLE 50 275 175 275 75 100\n  COLOR 128 128 128\n  DEPTH 15\n  RECTANGLE 50 50 150 150\n  </code></pre>\n  \n  <p>This file produces the following image:</p>\n  \n  <p><img src=\"project3.png\" alt=\"\" /></p>\n  \n  <h4 id=\"output-format\">Output format</h4>\n  <p>The output format is the image format know as <a href=\"http://netpbm.sourceforge.net/doc/ppm.html\">Plain PPM</a>. This is a convenient format for us, as it is simply a text file and you already know how to write to text files from <a href=\"project2.html\">Project 2</a>. The first line of a Plain PPM file consists of the two characters \u201cP3\u201d. This is known as a <strong>magic number</strong> and lets the image viewer know what format you are using. The next line consists of two <strong>int__s, the first is the __width</strong> of the image and the second is the <strong>height</strong>. The third line will always be 255 for you, and represents the maximum value of a color channel. Now, there are <strong>height</strong> many more lines, each consisting of <strong>width</strong> many triples of <strong>int__s representing the color of the pixel at this position. For an example see <a href=\"http://en.wikipedia.org/wiki/Netpbm_format#PPM_example\">http://en.wikipedia.org/wiki/Netpbm_format#PPM_example</a> and the examples included in the __tar.gz</strong> for this project.</p>\n  \n  <h2 id=\"your-task\">Your task</h2>\n  <p>Your task is essentially the same as <a href=\"project2.html\">Project 2</a>.</p>\n  \n  <ol>\n    <li>Parse the input file so that it may be used in the painter\u2019s algorithm</li>\n    <li>Implement the painter\u2019s algorithm</li>\n    <li>Output the PPM file</li>\n  </ol>\n  \n  <p>In addition, your code should logically organized into separate objects and functions grouped into files. In the end, we should be able to use the command</p>\n  \n  <pre><code>make run &lt; input.dat &gt; output.ppm\n  </code></pre>\n  \n  <p>where <strong>input.dat</strong> is properly formated and get a properly formated <strong>output.ppm</strong> that can be opened in ristretto.</p>\n  \n  <h4 id=\"rules\">Rules</h4>\n  <p>For this project you may not use any C++ container classes or automatic memory management features. Part of the purpose of this project is to learn about manual memory management with objects. Thus, the only libraries (other than ones you wrote) you may include are <strong>iostream</strong>, <strong>string</strong> and <strong>sstream</strong>.</p>\n  \n  <p>You program must run without any memory leaks, segfaults, or other memory access errors. To make sure that your code does not have memory errors you should test your program with the command</p>\n  \n  <pre><code>make memcheck &lt; inputfile &gt; outputfile\n  </code></pre>\n  \n  <p>which will produce a memory diagnostics report for your program.</p>\n  \n  <h4 id=\"starter-code\">Starter code</h4>\n  <p>The starter code for this project include the beginnings of an object oriented solution to this problem. In particular, it include a abstract class called <strong>Shape</strong> from which we have a subclass <strong>Triangle</strong> to be used for triangles. You should use the class <strong>Triangle</strong> as an example on which to base a <strong>Rectangle</strong> and <strong>Circle</strong> class. You are free to modify this code to suit your needs for the project. Also, you will also want to modify the <strong>ArrayList</strong> example from class to be used to contain your shapes as you parse the file.</p>\n  \n  <p>Project 3 starter code: <a href=\"project3.tar.gz\">project3.tar.gz</a></p>\n  \n  <p>You can download this file from a terminal with:<br />\n  <strong>wget \u201chttp://www.ics.uci.edu/~mbannist/teaching/ics45c/project3/project3.tar.gz\u201d</strong></p>\n \n</body>\n\n</html>\n", "id": 504.0}