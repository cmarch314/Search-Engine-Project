{"text": "Navigation Up Table of Contents Bibliography Index Title Page SegmentVoronoiDiagramTraits 2 Definition The concept SegmentVoronoiDiagramTraits 2 provides the traits requirements for the Segment Voronoi diagram 2 Gt DS and Segment Voronoi diagram hierarchy 2 Gt STag DS classes In particular it provides a type Site 2 which must be a model of the concept SegmentVoronoiDiagramSite 2 It also provides constructions for sites and several function object types for the predicates RefinesDefaultConstructible CopyConstructible Assignable Types SegmentVoronoiDiagramTraits 2 Intersections tag Indicates or not whether the intersecting segments are to be supported The tag must either be CGAL Tag true or CGAL Tag false SegmentVoronoiDiagramTraits 2 Site 2 A type for a site of the segment Voronoi diagram Must be a model of the concept SegmentVoronoiDiagramSite 2 SegmentVoronoiDiagramTraits 2 Point 2 A type for a point SegmentVoronoiDiagramTraits 2 Line 2 A type for a line Only required if the segment Voronoi diagram is inserted in a stream SegmentVoronoiDiagramTraits 2 Ray 2 A type for a ray Only required if the segment Voronoi diagram is inserted in a stream SegmentVoronoiDiagramTraits 2 Segment 2 A type for a segment Only required if if the segment Voronoi diagram is inserted in a stream SegmentVoronoiDiagramTraits 2 FT A type for the field number type of sites points etc SegmentVoronoiDiagramTraits 2 RT A type for the ring number type of sites points etc SegmentVoronoiDiagramTraits 2 Arrangement type An enumeration type that indicates the type of the arrangement of two sites The possible values are DISJOINT IDENTICAL CROSSING TOUCHING 1 TOUCHING 2 TOUCHING 11 TOUCHING 12 TOUCHING 21 TOUCHING 22 OVERLAPPING 11 OVERLAPPING 12 OVERLAPPING 21 OVERLAPPING 22 INTERIOR INTERIOR 1 INTERIOR 2 TOUCHING 11 INTERIOR 1 TOUCHING 11 INTERIOR 2 TOUCHING 12 INTERIOR 1 TOUCHING 12 INTERIOR 2 TOUCHING 21 INTERIOR 1 TOUCHING 21 INTERIOR 2 TOUCHING 22 INTERIOR 1 TOUCHING 22 INTERIOR 2 A detailed description of the meaning of these values is shown the end of the reference manual for this concept to be done SegmentVoronoiDiagramTraits 2 Object 2 A type representing different types of objects in two dimensions namely Point 2 Site 2 Line 2 Ray 2 and Segment 2 SegmentVoronoiDiagramTraits 2 Assign 2 Must provide template class T bool operator T t Object 2 o which assigns o to t if o was constructed from an object of type T Returns true if the assignment was possible SegmentVoronoiDiagramTraits 2 Construct object 2 Must provide template class T Object 2 operator T t that constructs an object of type Object 2 that contains t and returns it SegmentVoronoiDiagramTraits 2 Construct svd vertex 2 A constructor for a point of the segment Voronoi diagram equidistant from three sites Must provide Point 2 operator Site 2 s1 Site 2 s2 Site 2 s3 which constructs a point equidistant from the sites s1 s2 and s3 SegmentVoronoiDiagramTraits 2 Compare x 2 A predicate object type Must provide Comparison result operator Site 2 s1 Site 2 s2 which compares the x coordinates of the points represented by the sites s1 and s2 Precondition s1 and s2 must be points SegmentVoronoiDiagramTraits 2 Compare y 2 A predicate object type Must provide Comparison result operator Site 2 s1 Site 2 s2 which compares the y coordinates of the points represented by the sites s1 and s2 Precondition s1 and s2 must be points SegmentVoronoiDiagramTraits 2 Orientation 2 A predicate object type Must provide Orientation operator Site 2 s1 Site 2 s2 Site 2 s3 which performs the usual orientation test for three points s1 s2 and s3 Precondition the sites s1 s2 and s3 must be points SegmentVoronoiDiagramTraits 2 Equal 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 which determines is the points represented by the sites s1 and s2 are identical Precondition s1 and s2 must be points SegmentVoronoiDiagramTraits 2 Are parallel 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 which determines is the segments represented by the sites s1 and s2 are parallel Precondition s1 and s2 must be segments SegmentVoronoiDiagramTraits 2 Oriented side of bisector 2 A predicate object type Must provide Oriented side operator Site 2 s1 Site 2 s2 Point 2 p which returns the oriented side of the bisector of s1 and s2 that contains p Returns ON POSITIVE SIDE if p lies in the half space of s1 i e p is closer to s1 than s2 returns ON NEGATIVE SIDE if p lies in the half space of s2 returns ON ORIENTED BOUNDARY if p lies on the bisector of s1 and s2 SegmentVoronoiDiagramTraits 2 Vertex conflict 2 A predicate object type Must provide Sign operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q which returns the sign of the distance of q from the Voronoi circle of s1 s2 s3 the Voronoi circle of three sites s1 s2 s3 is a circle co tangent to all three sites that touches them in that order as we walk on its circumference in the counter clockwise sense Precondition the Voronoi circle of s1 s2 s3 must exist Must also provide Sign operator Site 2 s1 Site 2 s2 Site 2 q which returns the sign of the distance of q from the bitangent line of s1 s2 a degenerate Voronoi circle with its center at infinity SegmentVoronoiDiagramTraits 2 Finite edge interior conflict 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 s4 Site 2 q Sign sgn The sites s1 s2 s3 and s4 define a Voronoi edge that lies on the bisector of s1 and s2 and has as endpoints the Voronoi vertices defined by the triplets s1 s2 s3 and s1 s4 and s2 The sign sgn is the common sign of the distance of the site q from the Voronoi circle of the triplets s1 s2 s3 and s1 s4 and s2 In case that sgn is equal to NEGATIVE the predicate returns true if and only if the entire Voronoi edge is in conflict with q If sgn is equal to POSITIVE or ZERO the predicate returns false if and only if q is not in conflict with the Voronoi edge Precondition the Voronoi vertices of s1 s2 s3 and s1 s4 s2 must exist Must also provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q Sign sgn The sites s1 s2 s3 and the site at infinity s define a Voronoi edge that lies on the bisector of s1 and s2 and has as endpoints the Voronoi vertices v123 and v1 2 defined by the triplets s1 s2 s3 and s1 s and s2 the second vertex is actually at infinity The sign sgn is the common sign of the distance of the site q from the two Voronoi circles centered at the Voronoi vertices v123 and v1 2 In case that sgn is NEGATIVE the predicate returns true if and only if the entire Voronoi edge is in conflict with q If sgn is POSITIVE or ZERO the predicate returns false if and only if q is not in conflict with the Voronoi edge Precondition the Voronoi vertex v123 of s1 s2 s3 must exist Must finally provide bool operator Site 2 s1 Site 2 s2 Site 2 q Sign sgn The sites s1 s2 and the site at infinity s define a Voronoi edge that lies on the bisector of v12 and v1 2 s1 and s2 and has as endpoints the Voronoi vertices defined by the triplets s1 s2 s and s1 s and s2 both vertices are actually at infinity The sign sgn denotes the common sign of the distance of the site q from the Voronoi circles centered at v12 and v1 2 If sgn is NEGATIVE the predicate returns true if and only if the entire Voronoi edge is in conflict with q If POSITIVE or ZERO is false the predicate returns false if and only if q is not in conflict with the Voronoi edge SegmentVoronoiDiagramTraits 2 Infinite edge interior conflict 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q Sign sgn The sites s s1 s2 and s3 define a Voronoi edge that lies on the bisector of s and s1 and has as endpoints the Voronoi vertices v 12 and v 31 defined by the triplets s s1 s2 and s s3 and s1 The sign sgn is the common sign of the distances of q from the Voronoi circles centered at the the vertices v 12 and v 31 If sgn is NEGATIVE the predicate returns true if and only if the entire Voronoi edge is in conflict with q If sgn is POSITIVE or ZERO the predicate returns false if and only if q is not in conflict with the Voronoi edge SegmentVoronoiDiagramTraits 2 Oriented side 2 A predicate object type Must provide Oriented side operator Site 1 s1 Site 2 s2 Site 2 s3 Site 2 s Site 2 p Determines the oriented side of the line that passes through the Voronoi vertex of the sites s1 s2 s3 and is perpendicular to the segment site s that contains the point site p Precondition s must be a segment and p must be a point SegmentVoronoiDiagramTraits 2 Arrangement type 2 A predicate object type Must provide Arrangement type operator Site 2 s1 Site 2 s2 that returns the type of the arrangement of the two sites s1 and s2 Access to predicate objects Compare x 2 gt compare x 2 object Compare y 2 gt compare y 2 object Orientation 2 gt orientation 2 object Equal 2 gt equal 2 object Are parallel 2 gt are parallel 2 object Oriented side of bisector 2 gt oriented side of bisector test 2 object Vertex conflict 2 gt vertex conflict 2 object Finite edge interior conflict 2 gt finite edge interior conflict 2 object Infinite edge interior conflict 2 gt infinite edge interior conflict 2 object Oriented side 2 gt oriented side 2 object Arrangement type 2 gt arrangement type 2 object Access to contructor objects Construct object 2 gt construct object 2 object Construct svd vertex 2 gt construct svd vertex 2 object Access to other objects Assign 2 gt assign 2 object Has Models CGAL Segment Voronoi diagram traits 2 K MTag CGAL Segment Voronoi diagram traits without intersections 2 K MTag CGAL Segment Voronoi diagram filtered traits 2 CK CM EK EM FK FM CGAL Segment Voronoi diagram filtered traits without intersections 2 CK CM EK EM FK FM See AlsoSegmentVoronoiDiagramSite 2 CGAL Segment Voronoi diagram 2 Gt DS CGAL Segment Voronoi diagram hierarchy 2 Gt STag DS CGAL Segment Voronoi diagram traits 2 K MTag CGAL Segment Voronoi diagram traits without intersections 2 K MTag CGAL Segment Voronoi diagram filtered traits 2 CK CM EK EM FK FM CGAL Segment Voronoi diagram filtered traits without intersections 2 CK CM EK EM FK FM Next Segment Voronoi diagram traits 2 K MTag Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Segment_Voronoi_diagram_2_ref/Concept_SegmentVoronoiDiagramTraits_2.html", "title": "segmentvoronoidiagramtraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Segment_Voronoi_diagram_2_ref/SegmentVoronoiDiagramTraits_2.tex' -->\n<html> <head>  \n<title>SegmentVoronoiDiagramTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1052\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_971\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_SegmentVoronoiDiagramTraits_2\"></A>\n<h2><I>SegmentVoronoiDiagramTraits_2</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe concept <I><A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A></I> provides the traits\nrequirements for the <I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I> and\n<I><A HREF=\"Class_Segment_Voronoi_diagram_hierarchy_2.html#Cross_link_anchor_1062\">Segment_Voronoi_diagram_hierarchy_2</A>&lt;Gt,STag,DS&gt;</I> classes. In\nparticular, it provides a type <I>Site_2</I>, which must be a model of\nthe concept <I><A HREF=\"Concept_SegmentVoronoiDiagramSite_2.html#Cross_link_anchor_1042\">SegmentVoronoiDiagramSite_2</A></I>. It also provides\nconstructions for sites and several function object\ntypes for the predicates.\n<P>\n\n<H3>Refines</H3><I>DefaultConstructible</I><BR>\n\n<I>CopyConstructible</I><BR>\n\n<I>Assignable</I>\n<P>\n\n<H3>Types</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Intersections_tag\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Indicates or not whether the\n  intersecting segments are to be supported. The tag must either be\n  <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> or <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Site_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a site of the segment Voronoi\n  diagram. Must be a model of the concept\n  <I><A HREF=\"Concept_SegmentVoronoiDiagramSite_2.html#Cross_link_anchor_1042\">SegmentVoronoiDiagramSite_2</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a point.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a line. Only required if the segment\n  Voronoi diagram is inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a ray. Only required if the segment\n  Voronoi diagram is inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a segment. Only required if \n  if the segment Voronoi diagram is inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for the field number type of sites, points, etc..\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for the ring number type of sites, points, etc.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Arrangement_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    An enumeration type that indicates the\n  type of the arrangement of two sites. The possible values are\n  <I>DISJOINT</I>, <I>IDENTICAL</I>, <I>CROSSING</I>,\n  <I>TOUCHING_1</I>, <I>TOUCHING_2</I>, <I>TOUCHING_11</I>,\n  <I>TOUCHING_12</I>, <I>TOUCHING_21</I>, <I>TOUCHING_22</I>,\n  <I>OVERLAPPING_11</I>, <I>OVERLAPPING_12</I>, <I>OVERLAPPING_21</I>,\n  <I>OVERLAPPING_22</I>, <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Classification_type\">INTERIOR</A></I>, <I>INTERIOR_1</I>,\n  <I>INTERIOR_2</I>, <I>TOUCHING_11_INTERIOR_1</I>,\n  <I>TOUCHING_11_INTERIOR_2</I>, <I>TOUCHING_12_INTERIOR_1</I>,\n  <I>TOUCHING_12_INTERIOR_2</I>, <I>TOUCHING_21_INTERIOR_1</I>,\n  <I>TOUCHING_21_INTERIOR_2</I>, <I>TOUCHING_22_INTERIOR_1</I>, \n  <I>TOUCHING_22_INTERIOR_2</I>. A detailed description of the meaning\n  of these values is shown the end of the reference manual for this\n  concept. (<B>to be done)\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Object_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type representing different types of objects\n  in two dimensions, namely: <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>, <I>Site_2</I>,\n  <I><A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>, <I><A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A></I> and <I><A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Assign_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Must provide <I>template &lt;class T&gt; bool operator() ( T&amp; t,     Object_2 o)</I> which assigns <I>o</I> to <I>t</I> if <I>o</I> was\n  constructed from an object of type <I>T</I>. Returns \n  <I>true</I>, if the assignment was possible.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Construct_object_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Must provide <I>template &lt;class T&gt;     Object_2 operator()( T t)</I> that constructs an object of type\n  <I>Object_2</I> that contains <I>t</I> and returns it.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Construct_svd_vertex_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A constructor for a point of the segment Voronoi diagram equidistant\n  from three sites. Must provide\n  <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3)</I>, which\n  constructs a point equidistant from the sites <I>s1</I>, <I>s2</I> and\n  <I>s3</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Compare_x_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A> operator()(Site_2 s1, Site_2 s2)</I>, which compares the <MATH><I>x</I></MATH>-coordinates of the points\nrepresented by the sites <I>s1</I> and <I>s2</I>.<BR>\n\n<EM>Precondition: </EM><I>s1</I> and <I>s2</I> must be points.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Compare_y_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A> operator()(Site_2 s1, Site_2 s2)</I>, which compares the <MATH><I>y</I></MATH>-coordinates of the points\nrepresented by the sites <I>s1</I> and <I>s2</I>.<BR>\n\n<EM>Precondition: </EM><I>s1</I> and <I>s2</I> must be points.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Orientation_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3)</I>, which performs the\nusual <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> test for three points.\n<I>s1</I>, <I>s2</I> and <I>s3</I>.<BR>\n\n<EM>Precondition: </EM>the sites <I>s1</I>, <I>s2</I> and <I>s3</I> must be points.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Equal_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must provide\n  <I>bool operator(Site_2 s1, Site_2 s2)</I>, which determines is the\n  points represented by the sites <I>s1</I> and <I>s2</I> are identical.<BR>\n\n<EM>Precondition: </EM><I>s1</I> and <I>s2</I> must be points.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Are_parallel_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must provide\n  <I>bool operator(Site_2 s1, Site_2 s2)</I>, which determines is the\n  segments represented by the sites <I>s1</I> and <I>s2</I> are\n  <A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A>.<BR>\n\n<EM>Precondition: </EM><I>s1</I> and <I>s2</I> must be segments.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Oriented_side_of_bisector_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type.\nMust provide <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A> operator()(Site_2 s1, Site_2 s2, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)</I>, which returns\nthe oriented side of the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I> that\ncontains <I>p</I>. Returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I> if <I>p</I> lies in\nthe half-space of <I>s1</I> (i.e., <I>p</I> is closer to <I>s1</I> than\n<I>s2</I>); returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I> if <I>p</I> lies in the\nhalf-space of <I>s2</I>; returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I> if <I>p</I>\nlies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Vertex_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type.\nMust provide <I><A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q)</I>, which\nreturns the <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distance of <I>q</I> from the Voronoi circle\nof <I>s1</I>, <I>s2</I>, <I>s3</I> (the Voronoi circle of three sites\n<I>s1</I>, <I>s2</I>, <I>s3</I> is a circle co-tangent to all three\nsites, that touches them in that order as we walk on its circumference\nin the counter-clockwise sense).<BR>\n\n<EM>Precondition: </EM>the Voronoi circle of <I>s1</I>, <I>s2</I>,\n<I>s3</I> must exist.<BR>\n\nMust also provide <I><A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> operator()(Site_2 s1, Site_2 s2, Site_2 q)</I>, which returns the <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distance of\n<I>q</I> from the bitangent line of <I>s1</I>, <I>s2</I> (a degenerate\nVoronoi circle, with its center at infinity).\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Finite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object\ntype. Must provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 s4, Site_2 q, <A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> sgn)</I>. The sites <I>s1</I>, <I>s2</I>,\n<I>s3</I> and <I>s4</I> define a Voronoi edge that lies on the\n<A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I> and has as endpoints the Voronoi\nvertices defined by the triplets <I>s1</I>, <I>s2</I>, <I>s3</I> and\n<I>s1</I>, <I>s4</I> and <I>s2</I>. The <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> <I>sgn</I> is the common <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A>\nof the distance of the site <I>q</I> from the Voronoi circle of the\ntriplets <I>s1</I>, <I>s2</I>, <I>s3</I> and <I>s1</I>, <I>s4</I> and\n<I>s2</I>. In case that <I>sgn</I> is equal to <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">NEGATIVE</A></I>, the\npredicate returns <I>true</I> if and only if the entire Voronoi edge is\nin conflict with <I>q</I>. If <I>sgn</I> is equal to <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">POSITIVE</A></I> or\n<I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">ZERO</A></I>, the predicate returns <I>false</I> if and only if <I>q</I>\nis not in conflict with the Voronoi edge.<BR>\n\n<EM>Precondition: </EM>the Voronoi vertices of <I>s1</I>, <I>s2</I>,\n<I>s3</I>, and <I>s1</I>, <I>s4</I>, <I>s2</I> must exist.<BR>\n\nMust also provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, <A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> sgn)</I>. The\nsites <I>s1</I>, <I>s2</I>, <I>s3</I> and the site at infinity\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> define a Voronoi edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of\n<I>s1</I> and <I>s2</I> and has as endpoints the Voronoi vertices\n<MATH><I>v<SUB>123</SUB></I></MATH> and <MATH><I>v<SUB>1 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 2</SUB></I></MATH> defined by the triplets <I>s1</I>,\n<I>s2</I>, <I>s3</I> and <I>s1</I>, <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s2</I> (the second\nvertex is actually at infinity). The <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> <I>sgn</I> is the common <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A>\nof the distance of the site <I>q</I> from the two Voronoi circles\ncentered at the Voronoi vertices <MATH><I>v<SUB>123</SUB></I></MATH> and <MATH><I>v<SUB>1 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 2</SUB></I></MATH>.\nIn case that <I>sgn</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">NEGATIVE</A></I>, the predicate\nreturns <I>true</I> if and only if the entire Voronoi edge is in\nconflict with <I>q</I>. If <I>sgn</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">POSITIVE</A></I> or <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">ZERO</A></I>,\nthe predicate returns <I>false</I> if and only if <I>q</I> is not in\nconflict with the Voronoi edge.<BR>\n\n<EM>Precondition: </EM>the Voronoi vertex <MATH><I>v<SUB>123</SUB></I></MATH> of <I>s1</I>, <I>s2</I>,\n<I>s3</I> must exist.<BR>\n\nMust finally provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 q, <A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> sgn)</I>. The\nsites <I>s1</I>, <I>s2</I> and the site at infinity\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> define a Voronoi edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of\n<MATH><I>v<SUB>12 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <MATH><I>v<SUB>1 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 2</SUB></I></MATH>\n<I>s1</I> and <I>s2</I> and has as endpoints the Voronoi vertices\ndefined by the triplets <I>s1</I>, <I>s2</I>, <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s1</I>,\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s2</I> (both vertices are actually at\ninfinity). The <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> <I>sgn</I> denotes the common <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distance\nof the site <I>q</I> from the Voronoi circles centered at\n<MATH><I>v<SUB>12 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <MATH><I>v<SUB>1 <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 2</SUB></I></MATH>.\nIf <I>sgn</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">NEGATIVE</A></I>, the predicate\nreturns <I>true</I> if and only if the entire Voronoi edge is in\nconflict with <I>q</I>. If <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">POSITIVE</A></I> or <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">ZERO</A></I> is <I>false</I>,\nthe predicate returns <I>false</I> if and only if <I>q</I> is not in\nconflict with the Voronoi edge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Infinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate\nobject type. Must provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, <A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> sgn)</I>. The\nsites <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s1</I>, <I>s2</I> and <I>s3</I> define a\nVoronoi edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s1</I>\nand has as endpoints the Voronoi vertices <MATH><I>v<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 12</SUB></I></MATH> and\n<MATH><I>v<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 31</SUB></I></MATH> defined by the triplets\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s1</I>, <I>s2</I> and <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s3</I> and\n<I>s1</I>. The <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> <I>sgn</I> is the common <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distances of\n<I>q</I> from the Voronoi circles centered at the the vertices\n<MATH><I>v<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 12</SUB></I></MATH> and <MATH><I>v<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> 31</SUB></I></MATH>. If <I>sgn</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">NEGATIVE</A></I>,\nthe predicate returns <I>true</I> if and only if the entire Voronoi\nedge is in conflict with <I>q</I>. If <I>sgn</I> is <I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">POSITIVE</A></I> or\n<I><A HREF=\"../Kernel_23_ref/Enum_Sign#Enum_Sign\">ZERO</A></I>, the predicate returns <I>false</I> if and only if <I>q</I>\nis not in conflict with the Voronoi edge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Oriented_side_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must provide\n  <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A> operator(Site_1 s1, Site_2 s2, Site_2 s3, Site_2     s, Site_2 p)</I>. Determines the oriented side of the line <MATH><I> <IMG BORDER=0 WIDTH=7 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_ell.gif\"> </I></MATH>,\n  that passes through the Voronoi vertex of the sites <I>s1</I>,\n  <I>s2</I>, <I>s3</I> and is perpendicular to the segment site <I>s</I>,\n  that contains the point site <I>p</I>.<BR>\n\n<EM>Precondition: </EM><I>s</I> must be a segment and <I>p</I> must be a point.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A>::Arrangement_type_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\n  provide <I>Arrangement_type operator()(Site_2 s1, Site_2 s2)</I> that\n  returns the type of the arrangement of the two sites <I>s1</I> and\n  <I>s2</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access to predicate objects</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_x_2_compare_x_2_object69;\"></A>\nCompare_x_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.compare_x_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_y_2_compare_y_2_object69;\"></A>\nCompare_y_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.compare_y_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Orientation_2_orientation_2_object69;\"></A>\nOrientation_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.orientation_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Equal_2_equal_2_object69;\"></A>\nEqual_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.equal_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Are_parallel_2_are_parallel_2_object69;\"></A>\nAre_parallel_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.are_parallel_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_of_bisector_2_oriented_side_of_bisector_test_2_object69;\"></A>\nOriented_side_of_bisector_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.oriented_side_of_bisector_test_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_conflict_2_vertex_conflict_2_object69;\"></A>\nVertex_conflict_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.vertex_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edge_interior_conflict_2_finite_edge_interior_conflict_2_object69;\"></A>\nFinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.finite_edge_interior_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Infinite_edge_interior_conflict_2_infinite_edge_interior_conflict_2_object69;\"></A>\nInfinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.infinite_edge_interior_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_2_oriented_side_2_object69;\"></A>\nOriented_side_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.oriented_side_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Arrangement_type_2_arrangement_type_2_object69;\"></A>\nArrangement_type_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.arrangement_type_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Access to contructor objects</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Construct_object_2_construct_object_2_object69;\"></A>\nConstruct_object_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.construct_object_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Construct_svd_vertex_2_construct_svd_vertex_2_object69;\"></A>\nConstruct_svd_vertex_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.construct_svd_vertex_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Access to other objects</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Assign_2_assign_2_object69;\"></A>\nAssign_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.assign_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_2.html#Cross_link_anchor_1053\">CGAL::Segment_Voronoi_diagram_traits_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_without_intersections_2.html#Cross_link_anchor_1055\">CGAL::Segment_Voronoi_diagram_traits_without_intersections_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_2.html#Cross_link_anchor_1057\">CGAL::Segment_Voronoi_diagram_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_without_intersections_2.html#Cross_link_anchor_1059\">CGAL::Segment_Voronoi_diagram_filtered_traits_without_intersections_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_SegmentVoronoiDiagramSite_2.html#Cross_link_anchor_1042\">SegmentVoronoiDiagramSite_2</A></I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1040\">CGAL::Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_hierarchy_2.html#Cross_link_anchor_1061\">CGAL::Segment_Voronoi_diagram_hierarchy_2</A>&lt;Gt,STag,DS&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_2.html#Cross_link_anchor_1053\">CGAL::Segment_Voronoi_diagram_traits_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_without_intersections_2.html#Cross_link_anchor_1055\">CGAL::Segment_Voronoi_diagram_traits_without_intersections_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_2.html#Cross_link_anchor_1057\">CGAL::Segment_Voronoi_diagram_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_without_intersections_2.html#Cross_link_anchor_1059\">CGAL::Segment_Voronoi_diagram_filtered_traits_without_intersections_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I>\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Segment_Voronoi_diagram_traits_2.html\"><I>Segment_Voronoi_diagram_traits_2&lt;K,MTag&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_44!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37981.0}