{"text": "Navigation Up Table of Contents Bibliography Index Title Page RangeSegmentTreeTraits k DefinitionA tree traits class gives the range tree and segment tree class the necessary type information of the keys and intervals Further more they define function objects that allow to access the keys and intervals and provide comparison functions that are needed for window queries Types RangeSegmentTreeTraits k Key The k dimensional key type RangeSegmentTreeTraits k Interval The k dimensional interval type RangeSegmentTreeTraits k Key i The type in dimension i with 1 i k RangeSegmentTreeTraits k key i function object providing an operator that takes an argument of type Key and returns a component of type Key i RangeSegmentTreeTraits k low i function object providing an operator that takes an argument of type Interval and returns a component of type Key i RangeSegmentTreeTraits k high i function object providing an operator that takes an argument of type Interval and returns a component of type Key i RangeSegmentTreeTraits k compare i function object providing an operator that takes two arguments argument a b of type Key i and returns true if a b false otherwise Example The following piece of code gives an example of how a traits class might look like if you have keys that are of the type int in the first and that are of the type double in the second dimension class Int double tree traits 2 public typedef std pair int double Key typedef int Key 1 typedef double Key 2 typedef std pair Key Key Interval class C Key 1 public Key 1 operator const Key k return k first class C Key 2 public Key 2 operator const Key k return k second class C Low 1 public Key 1 operator const Interval i return i first first class C High 1 public Key 1 operator const Interval i return i second first class C Low 2 public Key 2 operator const Interval i return i first second class C High 2 public Key 2 operator const Interval i return i second second class C Compare 1 public bool operator Key 1 k1 Key 1 k2 return less int k1 k2 class C Compare 2 public bool operator Key 2 k1 Key 2 k2 return less double k1 k2 typedef C Compare 1 compare 1 typedef C Compare 2 compare 2 typedef C Low 1 low 1 typedef C High 1 high 1 typedef C Key 1 key 1 typedef C Low 2 low 2 typedef C High 2 high 2 typedef C Key 2 key 2 Next Range segment tree traits set 2 R Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/SearchStructures_ref/Concept_RangeSegmentTreeTraits_k.html", "title": "rangesegmenttreetraits_k", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './SearchStructures_ref/RangeSegmentTreeTraits_k.tex' -->\n<html> <head>  \n<title>RangeSegmentTreeTraits_k</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1249\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1322\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_RangeSegmentTreeTraits_k\"></A>\n<h2><I>RangeSegmentTreeTraits_k</I></h2>\n<P>\n\n<H3>Definition</H3>A tree traits class gives the range tree and segment tree class the necessary\ntype information of the keys and intervals. Further more, they define function objects that allow to access\nthe keys and intervals, and provide comparison functions that\nare needed for window queries.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::Key\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The k-dimensional key type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The k-dimensional interval type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::Key_i\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The type in dimension <MATH><I>i</I></MATH>, with <MATH><I>1 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i\n   <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> k</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::key_i\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    function object providing an\n  <I>operator()</I> that takes an argument of type <I>Key</I> and returns\n  a component of type <I>Key_i</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::low_i\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    function object providing an\n  <I>operator()</I> that takes an argument of type <I><A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I> and returns\n  a component of type <I>Key_i</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::high_i\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    function object providing an\n  <I>operator()</I> that takes an argument of type <I><A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I> and returns\n  a component of type <I>Key_i</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RangeSegmentTreeTraits_k.html#Cross_link_anchor_1249\">RangeSegmentTreeTraits_k</A>::compare_i\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    function object providing an\n  <I>operator()</I> that takes two arguments argument <MATH><I>a</I></MATH>, <MATH><I>b</I></MATH> of type <I>Key_i</I> and returns\n  true if <MATH><I>a&lt;b</I></MATH>, false otherwise.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following piece of code gives an example of how a traits class\nmight look like, if you have keys that are of the type <I>int</I>\nin the first and that are of the type <I>double</I> in the second\ndimension.\n<P>\n\n<pre class=\"Verbatim\">\nclass Int_double_tree_traits_2{\n public:\n  typedef std::pair&lt;int, double&gt; Key;\n  typedef int Key_1;\n  typedef double Key_2;\n  typedef std::pair&lt;Key,Key&gt; <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\n\n  class C_Key_1{\n  public:\n    Key_1 operator()(const Key&amp; k)\n    { return k.first;}\n  };\n  class C_Key_2{\n  public:\n    Key_2 operator()(const Key&amp; k)\n    { return k.second;}\n  };\n  class C_Low_1{\n  public:\n    Key_1 operator()(const <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&amp; i)\n    { return i.first.first;}\n  };\n  class C_High_1{\n  public:\n    Key_1 operator()(const <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&amp; i)\n    { return i.second.first;}\n  };\n  class C_Low_2{\n  public:\n    Key_2 operator()(const <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&amp; i)\n    { return i.first.second;}\n  };\n  class C_High_2{\n  public:\n    Key_2 operator()(const <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&amp; i)\n    { return i.second.second;}\n  };\n  class C_Compare_1{\n  public:\n    bool operator()(Key_1 k1, Key_1 k2)\n    { return less&lt;int&gt;()(k1,k2);}\n  };\n  class C_Compare_2{\n  public:\n    bool operator()(Key_2 k1, Key_2 k2)\n    { return less&lt;double&gt;()(k1,k2);}\n  };\n  typedef C_Compare_1 compare_1;\n  typedef C_Compare_2 compare_2;\n  typedef C_Low_1 low_1;\n  typedef C_High_1 high_1;\n  typedef C_Key_1 key_1;\n  typedef C_Low_2 low_2;\n  typedef C_High_2 high_2;\n  typedef C_Key_2 key_2;\n};\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Range_segment_tree_traits_set_2.html\"><I>Range_segment_tree_traits_set_2&lt;R&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_60!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39460.0}