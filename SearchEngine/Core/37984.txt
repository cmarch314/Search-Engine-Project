{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 3 3 Creating a Molecule Up 3 Manipulating Molecules Next 4 Reading and Writing 3 4 Generating a SMILES from a Molecule To produce a SMILES string from a molecule we use a function The next two examples will use OECreateCanSmiString OECreateCanSmiString converts the given OEMolBase into a canonical SMILES string and returns that string Note the difference in the syntax between Python and C C sends an empty string as an argument whereas in Python the SMILES string is the return value of the function from openeye oechem import import sys mol OEGraphMol if OEParseSmiles mol c1ccccc1 1 smi OECreateCanSmiString mol sys stdout write Canonical SMILES is s n smi else sys stderr write SMILES string was invalid n The following more complicated example reads SMILES from stdin and writes the canonical SMILES to stdout usr bin env python ch3 1 py from openeye oechem import import sys mol OEGraphMol smilein raw input while smilein mol Clear if OEParseSmiles mol smilein 1 smi OECreateCanSmiString mol sys stdout write s n smi else sys stderr write s is an invalid SMILES smilein smilein raw input Download as text Notice that this example makes use of the OEMolBase Clear method to reuse the molecule The behavior of OEParseSmiles is to add the given SMILES to the current molecule If the line mol Clear was removed from the program the output would contain longer and longer SMILES containing disconnected fragments The above example is a very simple canonical SMILES creation program but probably doesn t do what most users might expect The molecule returned by OEParseSmiles preserves the aromaticity present in the input SMILES string so for example if benzene is expressed as c1ccccc1 all atoms and bonds are marked as aromatic but if expressed as a Kekul form C1 CC CC C1 all atoms and bonds are kept aliphatic InputOutputccc cC1 CC CC C1C1 CC CC C1C1 CN CC C1C1 CC NC C1 A common task after creating a molecule from SMILES is to normalize its aromaticity with OEAssignAromaticFlags So the following example will produce canonical SMILES including perception of aromaticity from the connection table usr bin env python ch3 2 py from openeye oechem import import sys mol OEGraphMol smilein raw input while smilein mol Clear if OEParseSmiles mol smilein 1 OEAssignAromaticFlags mol smi OECreateCanSmiString mol sys stdout write s n smi else sys stderr write s is an invalid SMILES smilein smilein raw input Download as text And here are the results of this new version InputOutputccC CC1 CC CC C1c1ccccc1C1 CN CC C1c1ccncc1 This same program could also be written to construct a new molecule each time through the loop usr bin env python ch3 3 py from openeye oechem import import sys smilein raw input while smilein mol OEGraphMol if OEParseSmiles mol smilein 1 OEAssignAromaticFlags mol smi OECreateCanSmiString mol sys stdout write s n smi else sys stderr write s is an invalid SMILES smilein smilein raw input Download as text OEChem Python Theory Manual Version 1 3 1 Previous 3 3 Creating a Molecule Up 3 Manipulating Molecules Next 4 Reading and Writing Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node15.html", "title": "3.4 generating a smiles from a molecule", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>3.4 Generating a SMILES from a Molecule</title>\n<META NAME=\"description\" CONTENT=\"3.4 Generating a SMILES from a Molecule\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node14.html\">\n<LINK REL=\"up\" HREF=\"node11.html\">\n<LINK REL=\"next\" HREF=\"node16.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node11.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node14.html\">3.3 Creating a Molecule</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node11.html\">3. Manipulating Molecules</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION005400000000000000000\">\n3.4 Generating a SMILES from a Molecule</A>\n</H1>\n\n<P>\nTo produce a SMILES string from a molecule, we use a function. The\nnext two examples will use OECreateCanSmiString. OECreateCanSmiString\nconverts the given OEMolBase into a canonical SMILES string and\nreturns that string.  Note the difference in the syntax between Python\nand C++. C++ sends an empty string as an argument, whereas in Python\nthe SMILES string is the return value of the function.\n\n<P>\n<dl><dd><pre class=\"verbatim\">from openeye.oechem import *\nimport sys\n\nmol = OEGraphMol()\n\nif (OEParseSmiles(mol, \"c1ccccc1\") == 1):\n    smi = OECreateCanSmiString(mol)\n    sys.stdout.write(\"Canonical SMILES is %s\\n\" % smi)\n\nelse:\n    sys.stderr.write(\"SMILES string was invalid!\\n\")\n</pre></dl>\n\n<P>\nThe following more complicated example reads SMILES from <var>stdin</var> and\nwrites the canonical SMILES to <var>stdout</var>.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch3-1.py\nfrom openeye.oechem import *\nimport sys\n\nmol = OEGraphMol()\n\nsmilein = raw_input()\nwhile smilein:\n    mol.Clear()\n    if (OEParseSmiles(mol, smilein) == 1):\n        smi = OECreateCanSmiString(mol)\n        sys.stdout.write(\"%s&#92;n\" % smi)\n    else:\n        sys.stderr.write(\"%s is an invalid SMILES!\" % smilein)\n    smilein = raw_input()\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-1.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nNotice that this example makes use of the OEMolBase Clear method to\nreuse the molecule. The behavior of OEParseSmiles is to <i>add</i> the\ngiven SMILES to the current molecule. If the line <code>mol.Clear()</code> was\nremoved from the program, the output would contain longer and longer\nSMILES containing disconnected fragments.\n\n<P>\nThe above example is a very simple canonical SMILES creation program,\nbut probably doesn't do what most users might expect. The molecule\nreturned by OEParseSmiles preserves the aromaticity present in the\ninput SMILES string, so for example, if benzene is expressed as\n``c1ccccc1'' all atoms and bonds are marked as aromatic, but if\nexpressed as a Kekul&#233; form, ``C1=CC=CC=C1'', all atoms and bonds are kept\naliphatic.\n\n<P>\n<DIV ALIGN=\"CENTER\">\n<TABLE CELLPADDING=3 BORDER=\"1\">\n<TR><TD ALIGN=\"CENTER\">Input</TD>\n<TD ALIGN=\"CENTER\">Output</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">cc</TD>\n<TD ALIGN=\"CENTER\">c=c</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">C1=CC=CC=C1</TD>\n<TD ALIGN=\"CENTER\">C1=CC=CC=C1</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">C1=CN=CC=C1</TD>\n<TD ALIGN=\"CENTER\">C1=CC=NC=C1</TD>\n</TR>\n</TABLE>\n</DIV>\n\n<P>\nA common task after creating a molecule from SMILES is to normalize\nits aromaticity with OEAssignAromaticFlags. So the following example\nwill produce canonical SMILES including perception of aromaticity from\nthe connection table.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch3-2.py\nfrom openeye.oechem import *\nimport sys\n\nmol = OEGraphMol()\nsmilein = raw_input()\nwhile smilein:\n    mol.Clear()\n    if (OEParseSmiles(mol, smilein) == 1):\n        OEAssignAromaticFlags(mol)\n        smi = OECreateCanSmiString(mol)\n        sys.stdout.write(\"%s&#92;n\" % smi)\n    else:\n        sys.stderr.write(\"%s is an invalid SMILES!\" % smilein)\n    smilein = raw_input()\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nAnd here are the results of this new version:\n\n<P>\n<DIV ALIGN=\"CENTER\">\n<TABLE CELLPADDING=3 BORDER=\"1\">\n<TR><TD ALIGN=\"CENTER\">Input</TD>\n<TD ALIGN=\"CENTER\">Output</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">cc</TD>\n<TD ALIGN=\"CENTER\">C=C</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">C1=CC=CC=C1</TD>\n<TD ALIGN=\"CENTER\">c1ccccc1</TD>\n</TR>\n<TR><TD ALIGN=\"CENTER\">C1=CN=CC=C1</TD>\n<TD ALIGN=\"CENTER\">c1ccncc1</TD>\n</TR>\n</TABLE>\n</DIV>\n\n<P>\nThis same program could also be written to construct a new molecule\neach time through the loop:\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch3-3.py\nfrom openeye.oechem import *\nimport sys\n\nsmilein = raw_input()\nwhile smilein:\n    mol = OEGraphMol()\n    if (OEParseSmiles(mol, smilein) == 1):\n        OEAssignAromaticFlags(mol)\n        smi = OECreateCanSmiString(mol)\n        sys.stdout.write(\"%s&#92;n\" % smi)\n    else:\n        sys.stderr.write(\"%s is an invalid SMILES!\" % smilein)\n    smilein = raw_input()\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch3-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node14.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node11.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node14.html\">3.3 Creating a Molecule</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node11.html\">3. Manipulating Molecules</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37984.0}