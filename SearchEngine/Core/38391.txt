{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL random polygon 2 Definition The function random polygon 2constructs a random simple polygon from points that are drawn from a specific domain Though each simple polygon defined on this set of points has a non zero probability of being constructed some polygons may have higher probabilities than others The overall distribution of the generated polygons is not known since it depends on the generated points include CGAL random polygon 2 h template class OutputIterator class PointGenerator class Traits OutputIterator random polygon 2 int n OutputIterator result PointGenerator pg Traits t Default traits computes a random simple polygon by writing its vertices oriented counterclockwise to result The polygon generated will have a number of vertices equal to the number of unique points in the first n points generated by pg RequirementsTraits is a model of the concept RandomPolygonTraits 2 PointGenerator value type is equivalent to Traits Point 2 and OutputIterator value type The default traits class Default traits is the kernel in which Traits Point 2 is defined See AlsoCGAL Random points in disc 2 Point 2 Creator CGAL Random points in square 2 Point 2 Creator ImplementationThe implementation is based on the method of eliminating self intersections in a polygon by using so called 2 opt moves Such a move eliminates an intersection between two edges by reversing the order of the vertices between the edges No more than O n3 such moves are required to simplify a polygon defined on n points vLS82 Intersecting edges are detected using a simple sweep through the vertices and then one intersection is chosen at random to eliminate after each sweep The worse case running time is therefore O n4 logn Example The following program displays a random simple polygon with up to 5 vertices where the vertex coordinates are drawn uniformly from the unit square centered at the origin file examples Generator random poly example C include CGAL Cartesian h include CGAL point generators 2 h include CGAL random polygon 2 h include CGAL Polygon 2 h typedef CGAL Cartesian double K typedef K Point 2 Point 2 typedef std list Point 2 Container typedef CGAL Polygon 2 K Container Polygon 2 typedef CGAL Random points in square 2 Point 2 Point generator int main Polygon 2 polygon create 5 gon and write it into a window CGAL random polygon 2 5 std back inserter polygon Point generator 5 std cout polygon return Next random selection Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Generator_ref/Function_random_polygon_2.html", "title": "random_polygon_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Generator_ref/random_polygon.tex' -->\n<html> <head>  \n<title>random_polygon_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1685\"></A>\n\n<A NAME=\"Cross_link_anchor_1686\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1544\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::random_polygon_2\"></A>\n<h2><I>CGAL::random_polygon_2</I></h2>\n\n\n\n<A NAME=\"Index_anchor_1545\"></A> \n\n\n   \n     \n     \n<A NAME=\"Index_anchor_1546\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_random_polygon_2.html#Cross_link_anchor_1686\">random_polygon_2</A></I>constructs a random simple polygon \nfrom points that are drawn from a specific domain.\nThough each simple polygon defined on this set of \npoints has a non-zero probability of being constructed, some polygons may \nhave higher probabilities than others.  The overall distribution of the\ngenerated polygons is not known since it depends on the generated points.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/random_polygon_2.h\">CGAL/random_polygon_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class OutputIterator, class <A HREF=\"Concept_PointGenerator.html#Cross_link_anchor_1680\">PointGenerator</A>, class Traits &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_random_polygon_26_int_n+_OutputIterator_result+_const_PointGenerator__pg+_Traits_t_=_Default_traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_random_polygon_2.html#Cross_link_anchor_1686\">random_polygon_2</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    int n,<BR>\n\nOutputIterator result,<BR>\n\n<A HREF=\"Concept_PointGenerator.html#Cross_link_anchor_1680\">PointGenerator</A> pg,<BR>\n\nTraits t = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes a random simple polygon by writing its vertices (oriented\ncounterclockwise) to <I>result</I>. The polygon generated will have a number\nof vertices equal to the number of unique points in the first <MATH><I>n</I></MATH> points\ngenerated by <I>pg</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3><OL>\n<LI><I>Traits</I> is a model of the concept <A HREF=\"Concept_RandomPolygonTraits_2.html#Cross_link_anchor_1690\">RandomPolygonTraits_2</A>\n<LI><I><A HREF=\"Concept_PointGenerator.html#Cross_link_anchor_1680\">PointGenerator</A>::value_type</I> is equivalent to\n      <I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> and <I>OutputIterator::value_type</I>.\n</OL>\n<P>\n\nThe default traits class <I>Default_traits</I> is the kernel in which\n<I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> is defined.\n     \n     \n     \n<A NAME=\"Index_anchor_1547\"></A>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Random_points_in_disc_2.html#Cross_link_anchor_1695\">CGAL::Random_points_in_disc_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>, Creator&gt;</I><BR>\n\n<I><A HREF=\"Class_Random_points_in_square_2.html#Cross_link_anchor_1699\">CGAL::Random_points_in_square_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>, Creator&gt;</I><BR>\n\n\n<P>\n\n<H3>Implementation</H3>The implementation is based on the method of eliminating self-intersections in\na polygon by using so-called ``2-opt'' moves.  Such a move eliminates an \n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> between two edges by reversing the order of the vertices between \nthe edges.  No more than <MATH><I>O(n<SUP>3</SUP>)</I></MATH> such moves are required to simplify a polygon\ndefined on <MATH><I>n</I></MATH> points [<A HREF=\"../biblio.html#Biblio_ls-utstp-82\">vLS82</A>].\nIntersecting edges are detected using a simple sweep through the vertices\nand then one <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> is chosen at random to eliminate after each sweep. \nThe worse-case running time is therefore <MATH><I>O(n<SUP>4</SUP> </I></MATH>log<MATH><I>n)</I></MATH>.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program displays a random simple polygon with up to 50\nvertices, where the vertex coordinates are drawn uniformly from the \nunit <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> centered at the origin.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Generator/random_poly_example.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/point_generators_2.h&gt;\n#include &lt;CGAL/<A HREF=\"Function_random_polygon_2.html#Cross_link_anchor_1686\">random_polygon_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt; double &gt;                  K;\ntypedef K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                                 <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\ntypedef std::list&lt;<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&gt;                         Container;\ntypedef <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A>&lt;K, Container&gt;              <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>;\ntypedef <A HREF=\"Class_Random_points_in_square_2.html#Cross_link_anchor_1699\">CGAL::Random_points_in_square_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &gt; Point_generator;\n\nint main() {\n  <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A> polygon;\n  // create 50-gon and write it into a window:\n  <A HREF=\"Function_random_polygon_2.html#Cross_link_anchor_1685\">CGAL::random_polygon_2</A>(50, std::back_inserter(polygon), \n                         Point_generator(0.5));\n  std::cout &lt;&lt; polygon;\n  return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_random_selection.html\"><I>random_selection</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38391.0}