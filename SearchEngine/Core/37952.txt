{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL In place list T bool DefinitionAn object of the class In place list T bool represents a sequence of items of type T that supports bidirectional iterators and allows constant time insert and erase operations anywhere within the sequence The functionality is similar to the list T in the STL The In place list T bool manages the items in place i e inserted items are not copied Two pointers of type T are expected to be reserved in T for the list management The base class In place list base T can be used to obtain such pointers The In place list T bool does not copy element items during insertion unless otherwise stated for a function On removal of an item or destruction of the list the items are not deleted by default The second template parameter bool is set to false in this case If the In place list T bool should take the responsibility for the stored objects the bool parameter could be set to true in which case the list will delete removed items and will delete all remaining items on destruction In any case the destroy member function deletes all items Note that these two possible versions of In place list T bool are not assignable to each other to avoid confusions between the different storage responsibilities include CGAL In place list h Parameters The full class name is In place list T bool managed false class Alloc CGAL ALLOCATOR T The parameter T is supposed to have a default constructor a copy constructor and an assignment operator The copy constructor and the assignment may copy the pointers in T for the list management but they do not have to The equality test and the relational order require the operators and for T respectively These operators must not compare the pointers in T Types In place list T bool iterator In place list T bool const iterator In place list T bool value type In place list T bool reference In place list T bool const reference In place list T bool size type In place list T bool difference type In place list T bool reverse iterator In place list T bool const reverse iterator In place list T bool allocator type Creation In place list T bool l introduces an empty list In place list T bool l list T l1 copy constructor Each item in l1 is copied In place list T bool l size type n T t T introduces a list with n items all initialized with copies of t template class InputIterator In place list T bool l InputIterator first InputIterator last a list with copies from the range first last In place list T bool l const T first const T last non member template version In place list T bool l l1 assignment Each item in l1 is copied Each item in l is deleted if the bool parameter is true void l swap l1 swaps the contents of l with l1 void l destroy all items in l are deleted regardless of the bool parameter Comparison Operations bool l l1 test for equality Two lists are equal iff they have the same size and if their corresponding elements are equal bool l l1 compares in lexicographical order Access Member Functions iterator l begin returns a mutable iterator referring to the first element in l const iterator l begin const returns a constant iterator referring to the first element in l iterator l end returns a mutable iterator which is the past end value of l const iterator l end const returns a constant iterator which is the past end value of l bool l empty returns true if l is empty size type l size returns the number of items in list l size type l max size returns the maximum possible size of the list l T l front returns the first item in list l T l back returns the last item in list l allocator type l get allocator returns the alloctor Insertion void l push front T inserts an item in front of list l void l push back T inserts an item at the back of list l iterator l insert iterator pos T t iterator l insert T pos T t inserts t in front of pos The return value points to the inserted item void l insert iterator pos size type n T t T void l insert T pos size type n T t T inserts n copies of t in front of pos template class InputIterator void l insert iterator pos InputIterator first InputIterator last template class InputIterator void l insert T pos InputIterator first InputIterator last inserts the range first last in front of iterator pos As long as member templates are not supported member functions using T instead of the general InputIterator are provided Removal void l pop front removes the first item from list l void l pop back removes the last item from list l void l erase iterator pos removes the item from list l where pos refers to void l erase T pos removes the item from list l where pos refers to void l erase iterator first iterator last void l erase T first T last removes the items in the range first last from l Special List Operations void l splice iterator pos x void l splice T pos x inserts the list x before position pos and x becomes empty It takes constant time Precondition l x void l splice iterator pos x iterator i void l splice T pos x T i inserts an element pointed to by i from list x before position pos and removes the element from x It takes constant time i is a valid dereferenceable iterator of x The result is unchanged if pos i or pos i void l splice iterator pos x iterator first iterator last void l splice T pos x T first T last inserts elements in the range first last before position pos and removes the elements from x It takes constant time if x l otherwise it takes linear time first last is a valid range in x Precondition pos is not in the range first last void l remove T value erases all elements e in the list l for which e value It is stable Precondition a suitable operator for the type T void l unique erases all but the first element from every consecutive group of equal elements in the list l Precondition a suitable operator for the type T void l merge x merges the list x into the list l and x becomes empty It is stable Precondition Both lists are increasingly sorted A suitable operator for the type T void l reverse reverses the order of the elements in l in linear time void l sort sorts the list l according to the operator in time O n logn where n size It is stable Precondition a suitable operator for the type T Example in place list prog C include CGAL basic h include cassert include algorithm include CGAL In place list h using CGAL In place list base struct item public In place list base item int key item item const item i In place list base item i key i key item int i key i bool operator const item i const return key i key bool operator const item i const return this i bool operator int i const return key i bool operator int i const return this i bool operator const item i const return key i key int main typedef CGAL In place list item true List List l item p new item 1 l push back p l push back new item 2 l push front new item 3 l push front new item 4 l push front new item 2 List iterator i l begin i l insert i new item 5 l insert p new item 5 int a 7 2 5 4 3 5 1 2 bool ok std equal l begin l end a assert ok l sort l unique assert l size 5 int b 5 1 2 3 4 5 ok std equal l begin l end b assert ok return Next Compact container base Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/STL_Extension_ref/Class_In_place_list.html", "title": "in_place_list&lt;t,bool&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './STL_Extension_ref/in_place_list.tex' -->\n<html> <head>  \n<title>In_place_list&lt;T,bool&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1433\"></A>\n\n<A NAME=\"Cross_link_anchor_1434\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1422\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::In_place_list<T,bool>\"></A>\n<h2><I>CGAL::In_place_list&lt;T,bool&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object of the class <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> \n  represents a sequence of items of type <I>T</I> that supports\n  bidirectional iterators and allows constant time insert and erase\n  operations anywhere within the sequence. The functionality is\n  similar to the <I>list&lt;T&gt;</I> in the STL.\n<P>\n\nThe <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> manages the items in place, i.e., inserted\n  items are not copied. Two pointers of type <I>T*</I> are expected\n  to be reserved in <I>T</I> for the list management. The base class\n  <I><A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1432\">In_place_list_base</A>&lt;T&gt;</I> can be used to obtain such pointers.\n<P>\n\nThe <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> does not copy element items during\n  insertion (unless otherwise stated for a function). On removal of an\n  item or destruction of the list the items are not deleted by\n  default.  The second template parameter <I>bool</I> is set to\n  <I>false</I> in this case. If the <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> should\n  take the responsibility for the stored objects the <I>bool</I>\n  parameter could be set to <I>true</I>, in which case the list\n  will delete removed items and will delete all remaining items on\n  destruction. In any case, the <I>destroy()</I> member function\n  deletes all items.  Note that these two possible versions of\n  <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;</I> are not assignable to each other to avoid\n  confusions between the different storage responsibilities.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/In_place_list.h\">CGAL/In_place_list.h</A>&gt;</I>\n<P>\n\n<H3>Parameters</H3>\n<P>\n\nThe full class name is <I><A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T, bool managed =     false, class Alloc = CGAL_ALLOCATOR(T)&gt;</I>.\n<P>\n\nThe parameter <I>T</I> is supposed to have a default constructor,\n  a copy constructor and an assignment operator. The copy constructor\n  and the assignment may copy the pointers in <I>T</I> for the list\n  management, but they do not have to. The equality test and the\n  relational order require the operators <I>==</I> and <I>&lt;</I>\n  for <MATH><I>T</I></MATH> respectively. These operators must not <A HREF=\"../NumberTypeSupport_ref/Function_compare.html#Cross_link_anchor_1339\">compare</A> the pointers\n  in <I>T</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::const_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::value_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::reference\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::const_reference\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::size_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::difference_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::reverse_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::const_reverse_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt;::allocator_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; l;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces an empty list.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; l (  list&lt;T&gt; l1);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    copy constructor.\n    Each item in <I>l1</I> is copied.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; l ( size_type n,  T t = T());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a list with <MATH><I>n</I></MATH> items, all initialized with copies\n    of <MATH><I>t</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; l ( InputIterator first,  InputIterator last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a list with copies from\n    the range [<I>first,last</I>).\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; l ( const T* first,  const T* last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-member-template version.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>&lt;T,bool&gt; &amp;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     l =  l1<A NAME=\"Function_In_place_list6T+bool9___operator=6const_In_place_list6T+bool9__l19;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    assignment. Each item in <I>l1</I>\n    is copied. Each item in <I>l</I> is deleted if the <I>bool</I>\n    parameter is <I>true</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_swap6_const_In_place_list6T+bool9__l19;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.swap (  l1)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    swaps the\n    contents of <I>l</I> with <I>l1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_destroy69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.destroy ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    all items in <I>l</I> are deleted\n    regardless of the <I>bool</I> parameter.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Comparison Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     l ==  l1<A NAME=\"Function_bool_operator==6const_In_place_list6T+bool9__l19_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    test for equality: Two lists are equal, iff they have the\n    same size and if their corresponding elements are equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     l &lt;  l1<A NAME=\"Function_bool_operator66const_In_place_list6T+bool9__l19_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    compares in lexicographical order.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Member Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_begin69;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.begin () \n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a mutable iterator referring to the first\n    element in&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_iterator_begin69_const;\"></A>\nconst_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.begin () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a constant\n    iterator referring to the first element in&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_end69;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.end () \n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a mutable iterator which\n    is the past-end-value of&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_iterator_end69_const;\"></A>\nconst_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.end () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a constant\n    iterator which is the past-end-value of&nbsp;<I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_empty69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>l</I> is\n    empty.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_size69_const;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.size ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of\n    items in list&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_max_size69_const;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.max_size ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the maximum\n    possible size of the list&nbsp;<I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_T__front69;\"></A>\nT&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.front ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the first item in list&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_T__back69;\"></A>\nT&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.back ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the last item in list&nbsp;<I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_allocator_type_get_allocator69_const;\"></A>\nallocator_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.get_allocator ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the alloctor.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_push_front6_T_9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.push_front ( T&amp;)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts an item in front of\n    list&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_push_back6_T_9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.push_back ( T&amp;)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts an item at the back\n    of list&nbsp;<I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_insert6iterator_pos+_T__t9;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.insert ( iterator pos,  T&amp; t)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_insert6T*_pos+_T__t9;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.insert ( T* pos,  T&amp; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts <I>t</I>\n    in front of <I>pos</I>.  The return value points to the\n    inserted item.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6iterator_pos+_size_type_n+_const_T__t_=_T699;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.insert ( iterator pos,  size_type n,  T t = T())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6T*_pos+_size_type_n+_const_T__t_=_T699;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.insert ( T* pos,  size_type n,  T t = T())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts <MATH><I>n</I></MATH> copies of <I>t</I> in front of\n    <I>pos</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6iterator_pos+_InputIterator_first+_InputIterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    l.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    iterator pos,<BR>\n\nInputIterator first,<BR>\n\nInputIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6T*_pos+_InputIterator_first+_InputIterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    l.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    T* pos,<BR>\n\nInputIterator first,<BR>\n\nInputIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the range\n    [<I>first, last</I>) in front of iterator <I>pos</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nAs long as member templates are not supported, member functions\n  using <I>T*</I> instead of the general <I>InputIterator</I>\n  are provided.\n<P>\n\n<H3>Removal</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_pop_front69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.pop_front ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the first item from\n    list&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_pop_back69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.pop_back ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the last item from\n    list&nbsp;<I>l</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_erase6iterator_pos9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.erase ( iterator pos)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the item from\n    list&nbsp;<I>l</I>, where <I>pos</I> refers to.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_erase6T*_pos9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.erase ( T* pos)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the item from\n    list&nbsp;<I>l</I>, where <I>pos</I> refers to.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_erase6iterator_first+_iterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.erase ( iterator first,  iterator last)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_erase6T*_first+_T*_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.erase ( T* first,  T* last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the items\n    in the range [<I>first, last</I>) from&nbsp;<I>l</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Special List Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6iterator_pos+_In_place_list6T+bool9__x9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.splice ( iterator pos,  &amp; x)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6T*_pos+_In_place_list6T+bool9__x9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.splice ( T* pos,  &amp; x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the list <MATH><I>x</I></MATH> before position <I>pos</I> and <MATH><I>x</I></MATH>\n    becomes empty. It takes constant time.<BR>\n\n<EM>Precondition: </EM><I>&amp;</I> <I>l</I><I>!= &amp;x</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6iterator_pos+_In_place_list6T+bool9__x+_iterator_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.splice ( iterator pos,  &amp; x,  iterator i)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6T*_pos+_In_place_list6T+bool9__x+_T*_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.splice ( T* pos,  &amp; x,  T* i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts an element pointed to by <MATH><I>i</I></MATH> from list <MATH><I>x</I></MATH> before\n    position <I>pos</I> and removes the element from <MATH><I>x</I></MATH>. It takes\n    constant time. <MATH><I>i</I></MATH> is a valid dereferenceable iterator of <MATH><I>x</I></MATH>.\n    The result is unchanged if <I>pos == i</I> or <I>pos ==       ++i</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6iterator_pos+_In_place_list6T+bool9__x+_iterator_first+_iterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    l.splice ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    iterator pos,<BR>\n\n&amp; x,<BR>\n\niterator first,<BR>\n\niterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_splice6T*_pos+_In_place_list6T+bool9__x+_T*_first+_T*_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.splice ( T* pos,  &amp; x,  T* first,  T* last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts elements in the range [<I>first,       last</I>) before position <I>pos</I> and removes the elements\n    from <MATH><I>x</I></MATH>. It takes constant time if <I>&amp;x == &amp;</I><I>l</I>;\n    otherwise, it takes linear time. [<I>first, last</I>) is a\n    valid range in <MATH><I>x</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>pos</I> is not in the range\n    [<I>first, last</I>).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6const_T__value9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    l.remove (  T value)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    erases all elements <MATH><I>e</I></MATH> in\n    the list <I>l</I> for which <I>e == value</I>. It is stable.<BR>\n\n<EM>Precondition: </EM>a suitable <I>operator==</I> for the type <MATH><I>T</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_unique69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.unique ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    erases all but the first element from\n    every consecutive group of equal elements in the list <I>l</I>.<BR>\n\n<EM>Precondition: </EM>a suitable <I>operator==</I> for the type <MATH><I>T</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_merge6In_place_list6T+bool9__x9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.merge (  &amp; x)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    merges the list <MATH><I>x</I></MATH>\n    into the list <I>l</I> and <MATH><I>x</I></MATH> becomes empty. It is stable.<BR>\n\n<EM>Precondition: </EM>Both lists are increasingly sorted. A suitable\n    <I>operator&lt;</I> for the type <MATH><I>T</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_reverse69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.reverse ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reverses the order of the elements in\n    <I>l</I> in linear time.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_sort69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    l.sort ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sorts the list <I>l</I> according to the\n    <I>operator&lt;</I> in time <MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> where <I>n =       size()</I>. It is stable.<BR>\n\n<EM>Precondition: </EM>a suitable <I>operator&lt;</I>\n    for the type <MATH><I>T</I></MATH>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\n<pre class=\"ExampleCode\">// in_place_list_prog.C                 \n// -------------------------------\n#include &lt;CGAL/basic.h&gt;\n#include &lt;cassert&gt;\n#include &lt;algorithm&gt;\n#include &lt;CGAL/<A HREF=\"Class_In_place_list.html#Cross_link_anchor_1434\">In_place_list</A>.h&gt;\n\nusing <A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1431\">CGAL::In_place_list_base</A>;\n\nstruct item : public <A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1432\">In_place_list_base</A>&lt;item&gt; {\n    int key;\n    item() {}\n    item( const item&amp; i) : <A HREF=\"Class_In_place_list_base.html#Cross_link_anchor_1432\">In_place_list_base</A>&lt;item&gt;(i), key(i.key) {}\n    item( int i) : key(i) {}\n    bool operator== (const item&amp; i) const { return key == i.key;}\n    bool operator!= (const item&amp; i) const { return ! (*this == i);}\n    bool operator== (int i) const         { return key == i;}\n    bool operator!= (int i) const         { return ! (*this == i);}\n    bool operator&lt;  (const item&amp; i) const { return key &lt; i.key;}\n};\n\nint main() {\n    typedef <A HREF=\"Class_In_place_list.html#Cross_link_anchor_1433\">CGAL::In_place_list</A>&lt;item,true&gt; List;\n    List l;\n    item* p = new item(1);\n    l.push_back(*p);\n    l.push_back(*new item(2));\n    l.push_front(*new item(3));\n    l.push_front(*new item(4));\n    l.push_front(*new item(2));\n    List::iterator i = l.begin();\n    ++i;\n    l.insert(i, *new item(5));\n    l.insert(p, *new item(5));\n    int a[7] = {2,5,4,3,5,1,2};\n    bool ok = std::equal(l.begin(), l.end(), a);\n    assert(ok);\n    l.sort();\n    l.unique();\n    assert(l.size() == 5);\n    int b[5] = {1,2,3,4,5};\n    ok = std::equal(l.begin(), l.end(), b);\n    assert(ok);\n    return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Compact_container_base.html\"><I>Compact_container_base</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37952.0}