{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Topological map Dcel DefinitionAn object tpm of the class Topological map Dcel is a graph that consists of vertices V edges E faces F and an incidence relation on them Each edge is represented by two halfedges with opposite orientations A face of the topological map is defined by the circular sequence of halfedges along its boundary The representation used for the topological map is a DCEL The available default DCEL class will be described later include CGAL Topological map h Types Topological map Dcel Vertex represents a vertex of the topological map Topological map Dcel Halfedge represents a halfedge of the topological map Topological map Dcel Face represents a face of the topological map The following handles iterators and circulators have appropriate constant1 counterparts The mutable types are assignable to their constant counterparts Both circulators are assignable to the Halfedge iterator The iterators are assignable to the respective handle types Wherever the handles appear in function parameter lists the appropriate iterator can be used as well Topological map Dcel Vertex handle handle to vertex Topological map Dcel Halfedge handle handle to halfedge Topological map Dcel Face handle handle to face Topological map Dcel Vertex iterator a bidirectional iterator over the vertices of the topological map Its value type is Topological map Dcel Vertex Topological map Dcel Halfedge iterator a bidirectional iterator over the halfedges of the topological map Its value type is Topological map Dcel Halfedge Topological map Dcel Edge iterator a bidirectional iterator over the Edges every other halfedge of the topological map Its value type is Topological map Dcel Halfedge Topological map Dcel Face iterator a bidirectional iterator over the faces of the topological map Its value type is Topological map Dcel Face Topological map Dcel Ccb halfedge circulator a forward circulator over the halfedges of a CCB connected component of the boundary Its value type is Topological map Dcel Halfedge Topological map Dcel Halfedge around vertex circulator a forward circulator over the halfedges that have the vertex as their target Its value type is Topological map Dcel Halfedge Topological map Dcel Holes iterator a bidirectional iterator to traverse all the holes i e inner CCBs of a face Holes iterator is the next hole in the face Its value type is Ccb halfedge circulator Creation Topological map Dcel tpm constructs an empty map containing one unbounded face Access Functions Face handle tpm unbounded face returns the unbounded face of tpm Face iterator tpm faces begin returns the begin iterator of the faces in tpm Face iterator tpm faces end returns the past the end iterator of the faces in tpm Halfedge iterator tpm halfedges begin returns the begin iterator of the halfedges in tpm Halfedge iterator tpm halfedges end returns the past the end iterator of the halfedges in tpm Edge iterator tpm edges begin returns the begin iterator of the edges in tpm Edge iterator tpm edges end returns the past the end iterator of the edges in tpm Vertex iterator tpm vertices begin returns the begin iterator of the vertices in tpm Vertex iterator tpm vertices end returns the past the end iterator of the vertices in tpm Predicates bool tpm is valid checks the validity of all the features of tpm Check for each vertex v whether all incident halfedges by performing next twin have v as their target Check that all the edges on the boundary of each face f point to f as their face Query Functions The following methods return the number of map components faces halfedges or vertives respectively Size tpm number of faces Size tpm number of halfedges Size tpm number of vertices Modifiers Halfedge handle tpm insert at vertices Halfedge handle previous1 Halfedge handle previous2 inserts a new edge between the vertices v1 and v2 which are the target of previous1 and previous2 respectively The return value is the new halfedge that has v1 as its source If a new face is created it will be by definition the face incident to the halfedge returned this means that the order of the vertices on the new face will be v v1 v2 v This sets a requirement on the users e g Planar map 2 to call the function with the arguments in the right order i e the order that will give the desired face Insertion at vertices may require updating of the holes since a new face can be created that contains some of the holes of the old face To update the holes the function move hole should be called by the user Precondition previous1 and previous2 have the same incident face Precondition previous1 and previous2 do not have the same target vertex i e no loop Halfedge handle tpm insert from vertex Halfedge handle previous inserts a new edge for which one endpoint v1 that is the target of previous is already in the map The return value is the new halfedge that has v1 as its source Halfedge handle tpm insert in face interior Face handle f inserts an edge as a new inner component of f The return value is the new halfedge bool tpm move hole Halfedge handle e Face handle f1 Face handle f2 moves the hole represented by the halfedge e from the face f1 to f2 Returns false if e does not represent a hole in f1 and true otherwise Halfedge handle tpm split edge Halfedge handle e splits the edge e into e1 and e2 and adds a new vertex incident both e1 and e2 The return value is the halfedge e1 or e2 with the same source vertex that e had Halfedge handle tpm merge edge Halfedge handle e1 Halfedge handle e2 merges the two consecutive edges e1 and e2 into one edge The return value is the halfedge with the same source vertex that e1 had and the same target e2 had This operation is the inverse of the split edge operation Precondition e1 and e2 are consecutive halfedges i e e1 target e2 source Precondition There is no other edge attached to the vertex between e1 and e2 i e its degree is exactly 2 Face handle tpm remove edge Halfedge handle e removes the edge referenced by e from tpm If the operation causes two faces to merge the merged face is returned Otherwise the face in which the edge was incident is returned The removal of an edge might create a new hole inside the face e g when removing an edge in the interior of an antenna In this case by definition e points at the new hole created i e the path from e to its twin goes over the new hole and its twin points at the outer CCB i e the path from e twin to e passes over the outer CCB This sets a requirement on the users to define which halfedge e or e twin should be given as the parameter Footnotes 1 This means that for every iterator or circulator there is a const iterator and const circulator counterpart See MS96 for a discussion of constant versus mutable iterator types Next Topological map Dcel Vertex Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Topological_map_ref/Class_Topological_map.html", "title": "topological_map&lt;dcel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Topological_map_ref/Topological_map.tex' -->\n<html> <head>  \n<title>Topological_map&lt;Dcel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_768\"></A>\n\n<A NAME=\"Cross_link_anchor_769\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_782\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Topological_map<Dcel>\"></A>\n<h2><I>CGAL::Topological_map&lt;Dcel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object <MATH><I>tpm</I></MATH> of the class\n    <I><A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;</I> is a graph that\n    consists of vertices V, edges E, faces F and an incidence relation on them.\n    Each edge is represented by two halfedges with <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> orientations.\n    A <I>face</I> of the topological map is defined by the circular \n    sequence of halfedges along its boundary. The representation used \n    for the topological map is a DCEL.\n    The available default DCEL class will be described\n    later.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Topological_map.h\">CGAL/Topological_map.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map-Dcel---Vertex.html#Cross_link_anchor_771\">Topological_map&lt;Dcel&gt;::Vertex</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a vertex of the topological map.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map-Dcel---Halfedge.html#Cross_link_anchor_773\">Topological_map&lt;Dcel&gt;::Halfedge</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a halfedge of the topological map.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map-Dcel---Face.html#Cross_link_anchor_775\">Topological_map&lt;Dcel&gt;::Face</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    represents a face of the topological map.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe following handles, iterators and circulators have appropriate\n    constant<A HREF=\"#Footnote_1\"><SUP>1</SUP></A> counterparts.\n    The mutable types are assignable to their\n    constant counterparts. Both circulators are assignable to the \n    <I>Halfedge_iterator</I>. The iterators are assignable to the\n    respective handle types. Wherever the handles appear in function parameter\n    lists, the appropriate iterator can be used as well.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to vertex.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Halfedge_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to halfedge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to face.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       vertices of the topological map. Its value-type is\n       <I><A HREF=\"Class_Topological_map-Dcel---Vertex.html#Cross_link_anchor_771\">Topological_map&lt;Dcel&gt;::Vertex</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Halfedge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       halfedges of the topological map.  Its value-type is \n       <I><A HREF=\"Class_Topological_map-Dcel---Halfedge.html#Cross_link_anchor_773\">Topological_map&lt;Dcel&gt;::Halfedge</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Edge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       Edges (every other halfedge) of the topological map.  Its value-type is \n       <I><A HREF=\"Class_Topological_map-Dcel---Halfedge.html#Cross_link_anchor_773\">Topological_map&lt;Dcel&gt;::Halfedge</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Face_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator over the\n       faces of the topological map.  Its value-type is \n       <I><A HREF=\"Class_Topological_map-Dcel---Face.html#Cross_link_anchor_775\">Topological_map&lt;Dcel&gt;::Face</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Ccb_halfedge_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a forward circulator over the\n       halfedges of a CCB (connected component of the boundary).  Its\n       value-type is <I><A HREF=\"Class_Topological_map-Dcel---Halfedge.html#Cross_link_anchor_773\">Topological_map&lt;Dcel&gt;::Halfedge</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Halfedge_around_vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a forward circulator over\n       the halfedges that have the vertex as their target.  \n       Its value-type is <I><A HREF=\"Class_Topological_map-Dcel---Halfedge.html#Cross_link_anchor_773\">Topological_map&lt;Dcel&gt;::Halfedge</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt;::Holes_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a bidirectional iterator to\n       traverse all the holes ( i.e., inner CCBs) of a face \n       (<I>Holes_iterator++</I> is the next hole in the face).\n       Its value type is\n       <I>Ccb_halfedge_circulator</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_map.html#Cross_link_anchor_769\">Topological_map</A>&lt;Dcel&gt; tpm;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs an\n       empty map - containing one unbounded face.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_unbounded_face69_const;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.unbounded_face ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the unbounded face of <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_begin69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    tpm.faces_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the begin-iterator of the faces in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_end69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    tpm.faces_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of the faces in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_begin69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.halfedges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the begin-iterator of the halfedges in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_end69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.halfedges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of the halfedges in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_iterator_edges_begin69;\"></A>\nEdge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    tpm.edges_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the begin-iterator of the edges in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_iterator_edges_end69;\"></A>\nEdge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    tpm.edges_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of the edges in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_begin69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the begin-iterator of the vertices in <I>tpm</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_end69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of the vertices in <I>tpm</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    tpm.is_valid ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks the validity of all the\n       features of <I>tpm</I>. Check for each vertex <I>v</I>\n       whether all incident halfedges (by performing\n       <I>next()-&gt;twin()</I>) have <I>v</I> as their\n       target. \n       Check that all the edges on the boundary\n       of each face <I>f</I> point to <I>f</I> as their\n       face.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Query Functions</H3>\n<P>\n\nThe following methods return the number of map components, faces,\n    halfedges or vertives, respectively.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_faces69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.number_of_faces ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_halfedges69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.number_of_halfedges ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_number_of_vertices69;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.number_of_vertices ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Modifiers</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_insert_at_vertices6Halfedge_handle_previous1+_Halfedge_handle_previous29;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tpm.insert_at_vertices ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle previous1,<BR>\n\nHalfedge_handle previous2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts a new edge\n        between the vertices <I>v1</I> and <I>v2</I> which are the target\n        of <I>previous1</I> and <I>previous2</I> respectively. The return value\n        is the new halfedge that has <I>v1</I> as its source.\n        If a new face is created it will be, by definition, the face incident\n        to the halfedge returned  -  this means that the order of the vertices\n        on the new face will be <MATH><I>v<SUB>0</SUB>...,v1,v2,...v<SUB>0</SUB></I></MATH>.\n        This sets a requirement on the users (e.g,\n        <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I>) to call the function with the arguments\n        in the right order (i.e., the order that will give the desired face).\n        Insertion at vertices may require updating of the holes  \n        (since a \n        new face can be created that contains some of the holes of the old \n        face). To update the holes the function \n        <I>move_hole()</I> should be called by the user.<BR>\n\n<EM>Precondition: </EM> <I>previous1</I> and <I>previous2</I> have the same incident\n           face.<BR>\n\n<EM>Precondition: </EM> <I>previous1</I> and <I>previous2</I> do not have the same\n           target vertex (i.e., no loop).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_insert_from_vertex6Halfedge_handle_previous9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.insert_from_vertex ( Halfedge_handle previous)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts a new edge for\n             which one endpoint, <I>v1</I> that is the target of\n             <I>previous</I>, is already in the map.\n             The return value is the new halfedge\n             that has <I>v1</I> as its source.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_insert_in_face_interior6Face_handle_f9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.insert_in_face_interior ( Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts an edge as a new inner component of\n       <I>f</I>. The return value is the new halfedge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_move_hole6Halfedge_handle_e+_Face_handle_f1+_Face_handle_f29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tpm.move_hole ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle e,<BR>\n\nFace_handle f1,<BR>\n\nFace_handle f2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    moves the hole represented by the halfedge <I>e</I> from\n        the face <I>f1</I> to <I>f2</I>. Returns false if\n        <I>e</I> does not represent a hole in <I>f1</I>,\n        and true otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_split_edge_6Halfedge_handle_e9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.split_edge ( Halfedge_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    splits the edge <I>e</I> into <I>e1</I> and  <I>e2</I> , and\n     adds a new vertex incident both <I>e1</I> and <I>e2</I>. \n     The return value\n     is the halfedge (<I>e1</I> or <I>e2</I>) with the same source vertex \n     that <I>e</I> had.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_merge_edge_6Halfedge_handle_e1+_Halfedge_handle_e29;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    tpm.merge_edge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle e1,<BR>\n\nHalfedge_handle e2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    merges the two consecutive edges <I>e1</I> and <I>e2</I> into one \n     edge. The return value is the halfedge with the same source vertex\n     that <I>e1</I> had and the same target <I>e2</I> had.\n     This operation is the inverse of the <I>split_edge</I>\n     operation.<BR>\n\n<EM>Precondition: </EM> <I>e1</I> and <I>e2</I> are consecutive halfedges \n        (i.e., <I>e1.target()==e2.source()</I>).<BR>\n\n<EM>Precondition: </EM>There is no other edge attached to the vertex between \n        <I>e1</I> and <I>e2</I> (i.e., its degree is exactly 2).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_remove_edge_6Halfedge_handle_e9;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    tpm.remove_edge ( Halfedge_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the edge referenced by <I>e</I> from <I>tpm</I>. \n   If the operation causes two faces to merge, the merged face is returned.\n   Otherwise, the face in which the edge was incident is returned.\n   The removal of an edge might create a new hole inside the face (e.g.,\n   when removing an edge in the interior of an ``antenna''). In this\n   case by definition <I>e</I> points at the new hole created (i.e., the path\n   from <I>e</I> to its twin goes over the new hole) and its twin points\n   at the outer CCB (i.e., the path from <I>e-&gt;twin()</I> to <I>e</I>\n   passes over the outer CCB). This sets a requirement on the users to\n   define which halfedge (<I>e</I> or <I>e-&gt;twin()</I>) should be\n   given as the parameter.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nThis means that for every <I>iterator</I> or\n       <I>circulator</I> there is a <I>const_iterator</I> and \n       <I>const_circulator</I>\n       counterpart. See &nbsp;[<A HREF=\"../biblio.html#Biblio_cgal:ms-strg-96\">MS96</A>] for a discussion of constant\n       versus mutable iterator types.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Topological_map-Dcel---Vertex.html\"><I>Topological_map&lt;Dcel&gt;::Vertex</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_18!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39462.0}