{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL sibson gradient fitting Definition The function sibson gradient fitting approximates the gradient of a function at a point p given natural neighbor coordinates for p and its neighbors function values The approximation method is described in Sib81 Further functions are provided to fit the gradient for all data points that lie inside the convex hull of the data points One function exists for each type of natural neighbor coordinates include CGAL sibson gradient fitting h template class ForwardIterator class Functor class Traits typename Traits Vector d sibson gradient fitting ForwardIterator first ForwardIterator beyond typename std iterator traits ForwardIterator value type second type norm typename std iterator traits ForwardIterator value type first type p Functor f Traits traits This function estimates the gradient of a function at the point p given natural neighbor coordinates of p in the range first beyond and the function values of the neighbors provided by the functor f norm is the normalization factor of the barycentric coordinates Requirements ForwardIterator value type is a pair of point coordinate value thus ForwardIterator value type first type is equivalent to a point and ForwardIterator value type second type is a number type Functor argument type must be equivalent to ForwardIterator value type first type and Functor result type is the function value type It must provide a multiplication and addition operation with the type ForwardIterator value type second type Traits is a model of the concept GradientFittingTraits template class Dt class OutputIterator class Functor class Traits OutputIterator sibson gradient fitting nn 2 Dt dt OutputIterator out Functor f Traits traits estimates the function gradients at all vertices of dt that lie inside the convex hull using the coordinates computed by the function natural neighbor coordinates 2 OutputIterator value type is a pair associating a point to a vector The sequence of point gradient pairs computed by this function is placed starting at out The function returns an iterator that is placed past the end of the resulting sequence The requirements are the same as above The template class Dt must be equivalent to Delaunay triangulation 2 Gt Tds template class Rt class OutputIterator class Functor class Traits OutputIterator sibson gradient fitting rn 2 Rt rt OutputIterator out Functor f Traits traits estimates the function gradients at all vertices of rt that lie inside the convex hull using the coordinates computed by the function regular neighbor coordinates 2 OutputIterator value type is a pair associating a point to a vector The sequence of point gradient pairs computed by this function is placed starting at out The function returns an iterator that is placed past the end of the resulting sequence The requirements are the same as above The template class Rt must be equivalent to Regular triangulation 2 Gt Tds See AlsoCGAL linear interpolation CGAL sibson c1 interpolation CGAL farin c1 interpolation CGAL quadratic interpolation CGAL Interpolation gradient fitting traits 2 K CGAL natural neighbor coordinates 2 CGAL regular neighbor coordinates 2 CGAL surface neighbor coordinates 3 ImplementationThis function implements Sibson s gradient estimation method based on natural neighbor coordinates Sib81 Next GradientFittingTraits Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Interpolation_ref/Function_sibson_gradient_fitting.html", "title": "sibson_gradient_fitting", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Interpolation_ref/sibson_gradient_fitting.tex' -->\n<html> <head>  \n<title>sibson_gradient_fitting</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1127\"></A>\n\n<A NAME=\"Cross_link_anchor_1128\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1022\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::sibson_gradient_fitting\"></A>\n<h2><I>CGAL::sibson_gradient_fitting</I></h2>\n\n   \n     \n<A NAME=\"Index_anchor_1023\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_sibson_gradient_fitting.html#Cross_link_anchor_1128\">sibson_gradient_fitting</A></I> approximates the gradient of a function at a\npoint <I>p</I> given natural neighbor coordinates for <I>p</I> and its\nneighbors' function values. The approximation method is described in\n[<A HREF=\"../biblio.html#Biblio_s-bdnni-81\">Sib81</A>]. Further functions are provided to fit the gradient\nfor all data points that lie inside the convex hull of the data\npoints. One function exists for each type of natural neighbor\ncoordinates.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/sibson_gradient_fitting.h\">CGAL/sibson_gradient_fitting.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class ForwardIterator, class Functor, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_typename_Traits::Vector_d_sibson_gradient_fitting6ForwardIterator_first+_ForwardIterator_beyond+_const_typename_std::iterator_traits6ForwardIterator9::value_type::second_type__norm+_const_typename_std::iterator_traits6ForwardIterator9::value_type::first_type__p+_Functor_f+_const_Traits__traits9;\"></A>\ntypename Traits::<A HREF=\"../Kernel_d_ref/Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_sibson_gradient_fitting.html#Cross_link_anchor_1128\">sibson_gradient_fitting</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator first,<BR>\n\nForwardIterator beyond,<BR>\n\ntypename std::iterator_traits&lt;ForwardIterator&gt;::value_type::second_type norm,<BR>\n\ntypename std::iterator_traits&lt;ForwardIterator&gt;::value_type::first_type p,<BR>\n\nFunctor f,<BR>\n\nTraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This function estimates the\n  gradient of a function at the point <I>p</I> given natural neighbor\n  coordinates of <I>p</I> in the range <MATH><I>[.</I></MATH> <I>first</I>,\n  <I>beyond</I><MATH><I>.)</I></MATH> and the function values of the neighbors\n  provided by the functor <I>f</I>.  <I>norm</I> is the normalization\n  factor of the barycentric coordinates.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<OL>\n<LI><I>ForwardIterator::value_type</I> is a pair of point/coordinate\n  value, thus <I>ForwardIterator::value_type::first_type</I> is\n  equivalent to a point and\n  <I>ForwardIterator::value_type::second_type</I> is a\n  number type. \n<LI><I>Functor::argument_type</I> must be equivalent to\n  <I>ForwardIterator::value_type::first_type</I> and\n  <I>Functor::result_type</I> is the function value type. It must\n  provide a multiplication and addition operation with the type\n  <I>ForwardIterator::value_type::second_type</I>.\n<LI><I>Traits</I> is a model of the concept \n  <I><A HREF=\"Concept_GradientFittingTraits.html#Cross_link_anchor_1129\">GradientFittingTraits</A></I>\n<A NAME=\"Index_anchor_1024\"></A> \n.\n</OL>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Dt, class OutputIterator, class Functor, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_sibson_gradient_fitting_nn_26const_Dt__dt+_OutputIterator_out+_Functor_f+_const_Traits__traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sibson_gradient_fitting_nn_2 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Dt dt,<BR>\n\nOutputIterator out,<BR>\n\nFunctor f,<BR>\n\nTraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    estimates the function gradients at all vertices of <I>dt</I> that lie\n  inside the convex hull using the coordinates computed by the\n  function <I><A HREF=\"Function_natural_neighbor_coordinates_2.html#Cross_link_anchor_1124\">natural_neighbor_coordinates_2</A></I>.\n  <I>OutputIterator::value_type</I> is a pair associating a point to a\n  vector. The sequence of point/gradient pairs computed by this\n  function is placed starting at <I>out</I>. The function returns an\n  iterator that is placed past-the-end of the resulting sequence. The\n  requirements are the same as above. The template class <I>Dt</I> must\n  be equivalent to <I><A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;Gt, Tds&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Rt, class OutputIterator, class Functor, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_sibson_gradient_fitting_rn_26const_Rt__rt+_OutputIterator_out+_Functor_f+_const_Traits__traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    sibson_gradient_fitting_rn_2 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Rt rt,<BR>\n\nOutputIterator out,<BR>\n\nFunctor f,<BR>\n\nTraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    estimates the function gradients at all vertices of <I>rt</I> that lie\n  inside the convex hull using the coordinates computed by the\n  function <I><A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A></I>.\n  <I>OutputIterator::value_type</I> is a pair associating a point to a\n  vector. The sequence of point/gradient pairs computed by this\n  function is placed starting at <I>out</I>. The function returns an\n  iterator that is placed past-the-end of the resulting sequence. The\n  requirements are the same as above. The template class <I>Rt</I> must\n  be equivalent to <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_927\">Regular_triangulation_2</A>&lt;Gt, Tds&gt;</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_linear_interpolation.html#Cross_link_anchor_1110\">CGAL::linear_interpolation</A></I><BR>\n\n<I><A HREF=\"Function_sibson_c1_interpolation.html#Cross_link_anchor_1112\">CGAL::sibson_c1_interpolation</A></I><BR>\n\n<I><A HREF=\"Function_farin_c1_interpolation.html#Cross_link_anchor_1114\">CGAL::farin_c1_interpolation</A></I><BR>\n\n<I><A HREF=\"Function_quadratic_interpolation.html#Cross_link_anchor_1116\">CGAL::quadratic_interpolation</A></I><BR>\n\n<I><A HREF=\"Class_Interpolation_gradient_fitting_traits_2.html#Cross_link_anchor_1130\">CGAL::Interpolation_gradient_fitting_traits_2</A>&lt;K&gt;</I><BR>\n\n<I><A HREF=\"Function_natural_neighbor_coordinates_2.html#Cross_link_anchor_1123\">CGAL::natural_neighbor_coordinates_2</A></I><BR>\n\n<I><A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1125\">CGAL::regular_neighbor_coordinates_2</A></I><BR>\n\n<I><A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1134\">CGAL::surface_neighbor_coordinates_3</A></I><BR>\n\n\n<P>\n\n<H3>Implementation</H3>This function implements Sibson's gradient\nestimation method based on natural neighbor coordinates\n[<A HREF=\"../biblio.html#Biblio_s-bdnni-81\">Sib81</A>].\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_GradientFittingTraits.html\"><I>GradientFittingTraits</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_50!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38690.0}