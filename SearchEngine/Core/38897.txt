{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 9Planar Polygon Partitioning Susan Hert 9 1 Introduction A partition of a polygon P is a set of polygons such that the interiors of the polygons do not intersect and the union of the polygons is equal to the interior of the original polygon P This chapter describes functions for partitioning planar polygons into two types of subpolygons y monotone polygons and convex polygons The partitions are produced without introducing new Steiner vertices All the partitioning functions present the same interface to the user That is the user provides a pair of input iterators first and beyond an output iterator result and a traits class traits The points in the range first beyond are assumed to define a simple polygon whose vertices are in counterclockwise order The computed partition polygons whose vertices are also oriented counterclockwise are written to the sequence starting at position result and the past the end interator for the resulting sequence of polygons is returned The traits classes for the functions specify the types of the input points and output polygons as well as a few other types and function objects that are required by the various algorithms 9 2 Monotone Partitioning A y monotone polygon is a polygon whose vertices v1 vn can be divided into two chains v1 vk and vk vn v1 such that any horizontal line intersects either chain at most once For producing a y monotone partition of a given polygon the sweep line algorithm presented in dBvKOS97 is implemented by the function y monotone partition 2 This algorithm runs in O n logn time and requires O n space This algorithm does not guarantee a bound on the number of polygons produced with respect to the opitmal number For checking the validity of the partitions produced by y monotone partition 2 we provide a function is y monotone 2 which determines if a sequence of points in 2D defines a y monotone polygon or not For examples of the use of these functions see the corresponding reference pages Figure Examples of an optimal convex partition left and an approximately optimal convex partition right 9 3 Convex Partitioning Three functions are provided for producing convex partitions of polygons One produces a partition that is optimal in the number of pieces The other two functions produce approximately optimal convex partitions Both these functions produce convex decompositions by first decomposing the polygon into simpler polygons the first uses a triangulation and the second a monotone partition These two functions both guarantee that they will produce no more than four times the optimal number of convex pieces but they differ in their runtime complexities Though the triangulation based approximation algorithm often results in fewer convex pieces this is not always the case An optimal convex partition can be produced using the function optimal convex partition 2 This function provides an implementation of Greene s dynamic programming algorithm for optimal partitioning Gre83 This algorithm requires O n4 time and O n3 space in the worst case The function approx convex partition 2 implements the simple approximation algorithm of Hertel and Mehlhorn HM83 that produces a convex partitioning of a polygon from a triangulation by throwing out unnecessary triangulation edges The triangulation used in this function is one produced by the 2 dimensional constrained triangulation package of CGAL For a given triangulation this convex partitioning algorithm requires O n time and space to construct a decomposition into no more than four times the optimal number of convex pieces The sweep line approximation algorithm of Greene Gre83 which given a monotone partition of a polygon produces a convex partition in O n logn time and O n space is implemented by the function greene approx convex partition 2 The function y monotone partition described in Section is used to produce the monotone partition This algorithm provides the same worst case approximation guarantee as the algorithm of Hertel and Mehlhorn implemented with approx convex partition 2 but can sometimes produce better results i e convex partitions with fewer pieces Examples of the uses of all of these functions are provided with the corresponding reference pages Next chapter Planar Polygon Partitioning Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Partition_2/Chapter_main.html", "title": "planar polygon partitioning", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Partition_2/main.tex' -->\n<html> <head>  \n<title>Planar Polygon Partitioning</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_9\"></a>\n  \n<h1>Chapter 9<BR>Planar Polygon Partitioning</h1>\n\n<A NAME=\"chap:polygon_partition\"></A>\n\n<EM>Susan Hert</EM><BR>\n\n\n<P>\n\n<A NAME=\"Index_anchor_634\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_635\"></A>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>9.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n\n<A NAME=\"sec:partition_2_intro\"></A>\nA <I>partition</I> \n     \n<A NAME=\"Index_anchor_636\"></A> \n \n   \n of a polygon <MATH><I>P</I></MATH> is a set of \npolygons such that the \ninteriors of the polygons do not intersect and the union of the polygons \nis equal to the interior of the original polygon <MATH><I>P</I></MATH>.  \nThis chapter describes functions for partitioning\nplanar polygons into two types of subpolygons  -  <MATH><I>y</I></MATH>-monotone polygons and\nconvex polygons.  The partitions are produced without introducing new\n(Steiner) vertices.\n<P>\n\nAll the partitioning functions present the same interface to\nthe user.  That is, the user provides a pair of input iterators, <I>first</I>\nand <I>beyond</I>, an output iterator <I>result</I>,  and a traits class \n<I>traits</I>. The points in the range [<I>first</I>, <I>beyond</I>) are assumed\nto define a simple polygon whose vertices are in counterclockwise order.\nThe computed partition polygons, whose vertices are also oriented \ncounterclockwise, are written to the sequence starting at position\n<I>result</I> and the past-the-end interator for the resulting sequence of\npolygons is returned.  The traits classes for the functions specify the types\nof the input points and output polygons as well as a few other types and\nfunction objects that are required by the various algorithms.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>9.2&nbsp;&nbsp;&nbsp;Monotone Partitioning</h2>\n\n<A NAME=\"sec:partition_2_monotone\"></A>\n   \n     \n     \n<A NAME=\"Index_anchor_637\"></A> \n\n   \n\nA <I><MATH><I>y</I></MATH>-monotone polygon</I> \n     \n<A NAME=\"Index_anchor_638\"></A> \n \n   \n\nis a polygon whose vertices <MATH><I>v<SUB>1</SUB>, ..., v<SUB>n</SUB></I></MATH> can be divided into two chains \n<MATH><I>v<SUB>1</SUB>, ..., v<SUB>k</SUB></I></MATH> and <MATH><I>v<SUB>k</SUB>, ..., v<SUB>n</SUB>, v<SUB>1</SUB></I></MATH>, such that any horizontal line \nintersects either chain at most once.  For producing a <MATH><I>y</I></MATH>-monotone partition \nof a given polygon, the sweep-line algorithm \npresented in [<A HREF=\"../biblio.html#Biblio_bkos-cgaa-97\">dBvKOS97</A>] is implemented by the function\n<I><A HREF=\"../Partition_2_ref/Function_y_monotone_partition_2.html#Cross_link_anchor_710\">y_monotone_partition_2</A></I>\n<A NAME=\"Index_anchor_639\"></A> \n\n.  \nThis algorithm runs in <MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> time and requires <MATH><I>O(n)</I></MATH> space.\nThis algorithm does not guarantee a bound on the number of polygons \nproduced with respect to the opitmal number.\n<P>\n\nFor checking the validity of the partitions produced by \n<I><A HREF=\"../Partition_2_ref/Function_y_monotone_partition_2.html#Cross_link_anchor_710\">y_monotone_partition_2</A></I>, we provide a function <I><A HREF=\"../Partition_2_ref/Function_is_y_monotone_2.html#Cross_link_anchor_704\">is_y_monotone_2</A></I>, \nwhich determines if a sequence of points in 2D defines a <MATH><I>y</I></MATH>-monotone\npolygon or not.  For examples of the use of these functions, see the\ncorresponding reference pages.\n<P>\n\n<CENTER>\n<TABLE CELLSPACING=40>\n<TR>\n<TD>\n<IMG BORDER=0 SRC=\"./Trier_opt_cvx.gif\" ALIGN=CENTER ALT=\"Optimal Convex Partition o\nf Trier\">\n</TD>\n<TD>\n<IMG BORDER=0 SRC=\"./Idar-Oberstein_appx_cvx.gif\" ALIGN=CENTER ALT=\"Approx. Optimal\nConvex Partition of Idar-Oberstein\">\n</TD>\n</TR>\n</TABLE>\n</CENTER>\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>Examples of an optimal convex partition (left) and an approximately\noptimal convex partition (right).\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>9.3&nbsp;&nbsp;&nbsp;Convex Partitioning</h2>\n\n<A NAME=\"sec:partition_2_convex\"></A>\n   \n     \n     \n<A NAME=\"Index_anchor_640\"></A> \n\n   \n\n\nThree functions are provided for producing convex partitions of polygons.\nOne produces a partition that is optimal in the number of pieces. \nThe other two functions produce approximately optimal convex partitions.\nBoth these functions produce convex decompositions by first decomposing the \npolygon into simpler polygons; the first uses a triangulation and the second a\nmonotone partition.  These two functions both guarantee that they will produce \nno more than four times the optimal number of convex pieces but they differ in \ntheir runtime complexities.  Though the triangulation-based approximation\nalgorithm often results in fewer convex pieces, this is not always the case.\n<P>\n\nAn optimal convex partition can be produced using the function\n<I><A HREF=\"../Partition_2_ref/Function_optimal_convex_partition_2.html#Cross_link_anchor_706\">optimal_convex_partition_2</A></I>.\n<A NAME=\"Index_anchor_641\"></A> \n\n \n   \n     \n     \n     \n<A NAME=\"Index_anchor_642\"></A> \n\n   \n\nThis function provides an\nimplementation of Greene's dynamic programming algorithm for optimal\npartitioning [<A HREF=\"../biblio.html#Biblio_g-dpcp-83\">Gre83</A>]. \nThis algorithm requires <MATH><I>O(n<SUP>4</SUP>)</I></MATH> time and <MATH><I>O(n<SUP>3</SUP>)</I></MATH> space in the worst case.\n<P>\n\nThe function\n   \n     \n     \n     \n<A NAME=\"Index_anchor_643\"></A> \n\n   \n\n<I><A HREF=\"../Partition_2_ref/Function_approx_convex_partition_2.html#Cross_link_anchor_698\">approx_convex_partition_2</A></I>\n<A NAME=\"Index_anchor_644\"></A> \n\n\nimplements the simple approximation algorithm of Hertel and Mehlhorn \n[<A HREF=\"../biblio.html#Biblio_hm-ftsp-83\">HM83</A>] that \nproduces a convex partitioning of a polygon from a triangulation by \nthrowing out unnecessary triangulation edges.\nThe triangulation used in this function is one produced by the\n2-dimensional constrained triangulation\npackage of C<SMALL>GAL</SMALL>.  For a given triangulation, this convex partitioning \nalgorithm requires <MATH><I>O(n)</I></MATH> time and space to construct a decomposition into \nno more than four times the optimal number of convex pieces.\n<P>\n\n<A NAME=\"Index_anchor_645\"></A> \n\n   \n\nThe sweep-line approximation algorithm of Greene [<A HREF=\"../biblio.html#Biblio_g-dpcp-83\">Gre83</A>], which, \ngiven a monotone partition of a polygon, produces a convex partition in \n<MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> time and <MATH><I>O(n)</I></MATH> space, is implemented\nby the function <I><A HREF=\"../Partition_2_ref/Function_greene_approx_convex_partition_2.html#Cross_link_anchor_702\">greene_approx_convex_partition_2</A></I>\n<A NAME=\"Index_anchor_646\"></A> \n\n.  The function\n<I>y_monotone_partition</I> described in Section&nbsp;<A HREF=\"Chapter_main.html#sec:partition_2_monotone\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>\nis used to produce the monotone\npartition.  This algorithm provides the same worst-case approximation guarantee \nas the algorithm of Hertel and Mehlhorn implemented with\n<I><A HREF=\"../Partition_2_ref/Function_approx_convex_partition_2.html#Cross_link_anchor_698\">approx_convex_partition_2</A></I> but can sometimes produce better\nresults (<I>i.e.</I>, convex partitions with fewer pieces).\n<P>\n\nExamples of the uses of all of these functions are provided with the\ncorresponding reference pages.\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Partition_2_ref/Chapter_intro.html\">Planar Polygon Partitioning</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_9!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38897.0}