{"text": "HW 2 MEL scripting and Procedural Terrain Generation Goal Introduce you to MEL scripting and experiment with methods for automatic terrain generation In this project we will create a custom tool inside Maya for automatically generating a terrain Fire up Maya and open the script editor window Create a polySphere in the scene and move it using the manipulator Observe the commands which stream by in the History window Now experiment with copying and pasting those commands into the script window and executing them You can use CTRL ENTER to execute the commands or the execute button in the toolbar at the top of the script window Look through a couple online tutorials about MEL in order to get an idea of what a MEL script looks like I suggest starting with this one Intro by Lindsay Grace While reading this please use the script editor window to interactively test out the commands being discussed and see how they work To test your comprehension try writing a simple procedure which places a couple spheres in the scene global proc drawMySpheres yourcodegoeshere Save the script as a text file in the Maya scripts directory as drawMySpheres mel To run your procedure in the script window you can first make Maya load your script by typing source drawMySpheres mel This loads your procedure into memory You can then run your procedure by executing the line drawMySpheres At some point you will probably find the need to refer to the documentation from Autodesk which you can find here MEL Command Reference You may also find this wiki a useful reference MEL wiki One thing to keep in mind when looking online for references for Maya scripting is that there are at least 3 different ways to interact with Maya MEL which we will use Python scripting and C so don t confuse yourself looking at a Python scripting example Write a MEL procedure named createTerrain which creates a 3D terrain mesh in the current scene Since Maya already has procedures for performing subdivision we won t need to implement the square diamond algorithm described in class Instead your procedure should work as follows Create a polyPlaneFor some number of specified iterations Loop through all the vertices of the mesh and move each one up down by a random amount in the range d d Subdivide the mesh using the polySmooth command Decrease the displacement range d by a factor of s Your procedure should take as input variables the number of iterations the initial scale d and the scale factor s HINTS You should be able to implement this script using the following MEL basic commands and functions polyPlane for select polyEvaluate rand move polySmooth print if Look up these commands in the MEL reference as necessary to learn about their different parameters and flags In particular you will want to experiment with setting the continuity parameter for polySmooth When calling polyPlane it is convenient specify a name for the mesh e g terrain so you can refer to it later However if the user runs your script multiple times the name will conflict with that of the previous mesh Maya s solution is to add a number to the end of the name e g terrain22 to make it unique Thus the best option is that whenever you create some new object grab the return value so that you know the name In our case use string names polyPlane n terrain and then later on when you need to refer to the name you can use the string stored in the variable names In your MEL script you will want to perform operations on nodes in the Maya scene For example suppose you have a mesh terrain and want to modify a vertex whose name will be something like terrain vtx 19 In your script you will have a string variable names which stores the name of the mesh and another integer variable i which specifies the vertex number you want to work on If you try to use names vtx i you will get an error why Instead you need to assemble the pieces into a string which is the name of the vertex For example myvertexname names vtx i It is not hard to write a script which causes Maya to freeze up so make sure and save your script often In this example if we subdivide the mesh too many times things will grind to a halt Make sure your procedure checks the input parameters to see that the number of levels iterations is reasonable e g a max of 5 or 6 to keep this from happening Use the error command as appropriate Make your terrain generator user friendly by creating a GUI Write a MEL proceedure called terrainGUI which creates a window with textFields to enter the terrain parameters and a button labeled generate which calls your createTerrain proceedure with the parameters given in the textFields Here is an example script with some commands to get you started window t TerrainGenerator wh 25 25 MyWindow columnLayout text w 175 al left l Terrain Parameters separator st double w 2 textField text intialtext w 2 field1 whenclicked string f1text textField q text field1 print f1text button l print field1 w 2 c whenclicked showWindow MyWindow Note how the button works When it is clicked Maya evaluates the string whenclicked In this case we are querying the contents of the text field using textField q and the printing out the result Add your terrain generator to the shelf Once you have your proceedure saved to a file terrainGUI mel the final step is to add a button to the Maya user interface To do this first enter commands necessary to load up your code and start your gui in the script window For example source generateTerrain mel source terrainGUI mel terrainGUI Now select the custom shelf in the Maya user interface highlight the code and drag it to the shelf and indicate that it is a MEL script This will create a shelf button that invokes your script any time you need it Extend the simple terrain generation function to implement some more interesting features Here are three possibilities Implement plateaus and plains by allowing the user to specify a maximum and minimum displacement for the terrain map and modifying your code to enforce these constraints Implement an option of producing sharp ridges discussed in class by generating the terrain and then changing the height of each vertex to be abs height Implement terrain coloring by assigning colors to each vertex using polyColorPerVertex or by assigning UV texture coordinates to each vertex based on the vertex height If you use the per vertex coloring technique make sure to go to the menu Color Toggle Display Colors in order to get them displayed in the scene view Please implement at least one of these three We will give up to 1 extra credit for implementing all three or some other creative ideas of your own choosing To distinguish this version from the basic version you already implemented please call your new terrain generator scripts createTerrain2 mel and terrainGUI2 mel Turn In Turn in a zip file lastname firstname zip containing the following The MEL scripts you wrote text files A Maya scene file containing a terrain generated by your plugin terrain ex ma A rendering of a terrain generated by your tool as a jpeg file terrain ex jpg ", "_id": "http://www.ics.uci.edu/~dramanan/teaching/ics162_fall12/hw/hw2/", "title": "project 2", "html": "<html>\n<head>\n\t<title>Project 2</title>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"../../style.css\">\n\t<style type=\"text/css\">\n\t\tul.hotkeys {\n\t\t\tlist-style:none;\n\t\t}\n\t\t\n\t\tli.hotkey {\n\t\t\tmargin-top:1em;\n\t\t}\n\t</style>\n\t<script type=\"text/javascript\">\n\t\tvar plus = new Image();\n\t\tplus.src = \"images/plus.gif\";\n\t\tvar minus = new Image();\n\t\tminus.src = \"images/minus.gif\";\n\n\t\tfunction toggleImage(imgName) {\n\t\t\tdocument.images[imgName].src = (document.images[imgName].src == plus.src) ? minus.src : plus.src;\n\t\t}\n\n\t\tfunction switchMenu(obj) {\n\t\t\tvar el = document.getElementById(obj);\n\t\t\tif ( el.style.display != \"none\" ) {\n\t\t\t\tel.style.display = 'none';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tel.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction init() {\n\t\t\tswitchMenu('hotkeys');\n\t\t\ttoggleImage('hotkeys_toggle');\n\t\t}\n\t</script>\n</head>\n\n<body onLoad=\"init();\">\n<div class=\"bodyDiv\">\n\n<center><h1>HW 2: MEL scripting and Procedural Terrain Generation</h1></center>\n\n<fieldset>\n<legend><strong>Goal</strong></legend>\nIntroduce you to MEL scripting and experiment with methods for automatic terrain generation.\n</fieldset>\n\n<br>\n\n</a>\n<p>\nIn this project we will create a custom tool inside Maya for automatically generating a terrain.\n</p>\n\n\n<ol>\n<li class=\"step\">\nFire up Maya and open the script editor window.  Create a polySphere in the scene\nand move it using the manipulator.  Observe the commands which stream by in the\nHistory window.  Now experiment with copying and pasting those commands into the\nscript window and executing them.  You can use CTRL+ENTER to execute the commands\n(or the execute button in the toolbar at the top of the script window).<p>\n\n<p>\n<li class=\"step\">\nLook through a couple online tutorials about MEL in order to get an idea of\nwhat a MEL script looks like.  \nI suggest starting with this one:\n<a href=\"http://aii.lgrace.com/documents/Mel%20Programming%20Resource_and_intro.pdf\">Intro by Lindsay Grace</a>\nWhile reading this, please use the script editor window to interactively test\nout the commands being discussed and see how they work.<p>\nTo test your comprehension, try writing a simple procedure which places a couple\nspheres in the scene.\n<br>\n<br>\n<tt>\n global proc drawMySpheres() {</tt><br><tt>\n    ...yourcodegoeshere...</tt><br></tt>\n  }\n</tt>\n<br>\n<br>\nSave the script as a text file in the Maya scripts directory as\n\"drawMySpheres.mel\".  To run your procedure in the script window, you can\nfirst make Maya load your script by typing \"source drawMySpheres.mel;\".\nThis loads your procedure into memory.  You can then run your procedure\nby executing the line \"drawMySpheres();\".\n<br>\n<br>\nAt some point you will probably find the need to refer to the documentation from Autodesk which you can find here:\n<a href=\"http://download.autodesk.com/global/docs/maya2013/en_us/Commands/index.html\"</a>[MEL Command Reference]</a>.  You\nmay also find this wiki a useful reference <a href=\"http://mayamel.tiddlyspot.com/\">[MEL wiki]</a><br>\n<br>\nOne thing to keep in mind when looking online for references for Maya scripting\nis that there are at least 3 different ways to interact with Maya: MEL (which\nwe will use), Python scripting, and C++ so don't confuse yourself looking at a\nPython scripting example.<p>\n\n<li class=\"step\">\nWrite a MEL procedure named <b>createTerrain</b> which creates a 3D terrain\nmesh in the current scene.  Since Maya already has procedures for performing\nsubdivision, we won't need to implement the square-diamond algorithm described\nin class.  Instead, your procedure should work as follows:\n<ul>\n<li>Create a polyPlane</li>\n<li>For some number of specified iterations...</li>\n<ul>\n<li> Loop through all the vertices of the mesh and move each one up/down by a random amount in the range <b>[-d,d]</b>\n<li> Subdivide the mesh using the polySmooth command\n<li> Decrease the displacement range <b>d</b> by a factor of <b>s</b>\n</ul>\n</ul>\n<p>\nYour procedure should take as input variables the number of iterations, the initial scale <b>d</b> and the scale factor <b>s</b>.<p>\n<br>\nHINTS:\n<ol>\n<li>\nYou should be able to implement this script using the following MEL basic commands and functions:\n<br>\n<tt>\n&nbsp;polyPlane, for, select, polyEvaluate, rand(), move, polySmooth, print, if\n</tt><br>\nLook up these commands in the MEL reference as necessary to learn about their\ndifferent parameters and flags.  In particular, you will want to experiment\nwith setting the continuity parameter for polySmooth.  <p>\n<li>\nWhen calling polyPlane, it is convenient specify a name for the mesh (e.g.\n\"terrain\") so you can refer to it later.  However, if the user runs your script\nmultiple times, the name will conflict with that of the previous mesh. Maya's\nsolution is to add a number to the end of the name (e.g. \"terrain22\") to make\nit unique.  Thus, the best option is that whenever you create some new object,\ngrab the return value so that you know the name.  In our case, use\n<tt>\nstring $names[] = `polyPlane -n terrain ....`\n</tt>\nand then later on when you need to refer to the name you can use the string stored\nin the variable <tt>$names[0]</tt>.<p>\n\n<li>\nIn your MEL script you will want to perform operations on nodes in the Maya scene.\nFor example, suppose you have a mesh \"terrain\" and want to modify a vertex,\nwhose name will be something like \"terrain.vtx[19]\".  In your script you will\nhave a string variable <tt>$names[0]</tt> which stores the name of the mesh and\nanother integer variable $i which specifies the vertex number you want to work\non.  If you try to use <tt>$names[0].vtx[$i]</tt> you will get an error\n(why?).  Instead you need to assemble the pieces into a string which is the\nname of the vertex.  For example:</p> &nbsp;<tt>$myvertexname =\n$names[0]+\".vtx[\"+$i$+\"]\"</tt><p>\n\n<li>\nIt is not hard to write a script which causes Maya to freeze up so make sure and\nsave your script often.  In this example, if we subdivide the mesh too many\ntimes, things will grind to a halt.  Make sure your procedure checks the input\nparameters to see that the number of levels (iterations) is reasonable (e.g. a\nmax of 5 or 6) to keep this from happening.  Use the <tt>error</tt> command\nas appropriate.\n</ol>\n<p>\n\n<li class=\"step\">\nMake your terrain generator user friendly by creating a GUI.  Write a MEL\nproceedure called <b>terrainGUI</b> which creates a window with\n<b>textField</b>s to enter the terrain parameters and a button labeled\n\"generate\" which calls your createTerrain proceedure with the parameters given\nin the textFields.<p>\n\nHere is an example script with some commands to get you started:<p>\n<tt>\nwindow -t \"TerrainGenerator\" -wh 250 250 \"MyWindow\";<br>\ncolumnLayout;<br>\ntext -w 175 -al \"left\" -l \"Terrain Parameters\";<br>\nseparator -st \"double\" -w 200;<br>\ntextField -text \"intialtext\" -w 200 \"field1\";<br>\n$whenclicked = \"string $f1text = `textField -q -text field1`; print $f1text\";<br>\nbutton -l \"print field1\" -w 200 -c {$whenclicked};<br>\nshowWindow \"MyWindow\";<br>\n</tt>\n<p>\nNote how the button works.  When it is clicked, Maya evaluates the string\n<tt>$whenclicked</tt>.  In this case we are querying the contents of the text\nfield (using <tt>textField -q</tt>) and the printing out the result. \n\n<li class=\"step\">\nAdd your terrain generator to the shelf.  Once you have your proceedure saved\nto a file \"terrainGUI.mel\", the final step is to add a button to the Maya user\ninterface.  To do this, first enter commands necessary to load up your code and\nstart your gui in the script window.  For example:<p>\n<tt>\nsource generateTerrain.mel;<br>\nsource terrainGUI.mel;<br>\nterrainGUI();<br>\n</tt>\n<br>\nNow, select the \"custom\" shelf in the Maya user interface, highlight the code\nand drag it to the shelf and indicate that it is a MEL script.  This will\ncreate a shelf button that invokes your script any time you need it. \n\n<li class=\"step\">\nExtend the simple terrain generation function to implement some more interesting\nfeatures. Here are three possibilities:<p>\n<ol>\n<li> Implement plateaus and plains by allowing the user to specify a maximum and\nminimum displacement for the terrain map and modifying your code to enforce these\nconstraints.<p>\n<li> Implement an option of producing sharp ridges discussed in class by\ngenerating the terrain and then changing the height of each vertex to be\n<b>-abs(height)</b>.<p>\n<li> Implement terrain coloring by assigning colors to each vertex using\n<tt>polyColorPerVertex</tt> or by assigning UV-texture coordinates to each vertex\nbased on the vertex height. If you use the per-vertex coloring technique, make sure to\ngo to the menu (Color > Toggle Display Colors) in order to get them displayed\nin the scene view.<p>\n</ol>\nPlease implement <em>at least one</em> of these three.  We will give up to 10%\nextra-credit for implementing all three or some other creative ideas of your\nown choosing.\n\nTo distinguish this version from the basic version you already implemented,\nplease call your new terrain generator scripts\n<b>createTerrain2.mel</b> and <b>terrainGUI2.mel</b>.\n<p>\n<fieldset>\n<legend><strong>Turn In</strong></legend>\nTurn in a zip file <b>lastname_firstname.zip</b> containing the following:\n<ul>\n\t<li>The MEL scripts you wrote (text files)</li>\n        <li>A Maya scene file containing a terrain generated by your plugin (<b>terrain_ex.ma</b>)</li>\n        <li>A rendering of a terrain generated by your tool as a jpeg file (<b>terrain_ex.jpg</b>)</li>\n</ul>\n</fieldset>\n\n</div>\n\n\n</body></html>\n", "id": 26318.0}