{"text": "Mathematical Reviews 98k 68 39 Sparsification A technique for speeding up dynamic graph algorithms David Eppstein Zvi Galil Giuseppe F Italiano and Amnon Nissenzweig J ACM 44 5 669 696 Sep 1997 Mathematical Reviews 98k 68 39 1998 Reviewed by Peter B Gibbons This paper makes a major contribution to the study of dynamic graph algorithms that maintain some property of a changing graph more efficiently than recomputation from scratch after each change Dynamic algorithms can be classified as fully dynamic where both edge insertions and deletions are allowed or as partially dynamic where only insertions are allowed The improved performances for dynamic algorithms are achieved through the use of the new technique of sparsification which when applicable can speed up a T n m time bound for a graph G with n vertices and m edges to T n O n almost the time needed if G were sparse Sparsification involves partitioning the edges of G into a collection of O m n sparse subgraphs each with n vertices and O n edges The information relevant for each subgraph can be summarised in an even sparser subgraph called a sparse certificate Certificates are merged in pairs producing larger subgraphs which are made sparse again by computing their certificates The result is a balanced binary tree in which each node is represented by a sparse certificate Each update involves log m n graphs with O n edges each instead of one graph with m edges A more careful partition into subgraphs causes each update to involve a sequence of graphs with O n edges in total Three variants of the sparsification technique are developed The first is used in situations where no previous fully dynamic algorithm was known and gives time bounds of O n per update The second variant uses a dynamic data structure to maintain certificates possessing a stability property thereby transforming time bounds of the form O m sp p into O n sp p In the third variant deletions are performed as in the first variant and insertions by using a partially dynamic algorithm This leads to insertion times often matching those of known partially dynamic algorithms together with deletion times similar to those of the first variant Results include the maintenance of minimum spanning forests graph connectivity graph 2 edge connectivity and bipartiteness in time O n sp 1 2 per change 3 edge connectivity in time O n sp 2 3 per change 4 edge connectivity in time O n alpha n per change k edge connectivity for constant k in time O n log n per change 2 vertex connectivity and 3 vertex connectivity in time O n per change and 4 vertex connectivity in time O n alpha n per change Further results speed up the insertion times to match the bounds of known partially dynamic algorithms The paper concludes with sections on recent related work and remaining open questions D Eppstein publications Citation database Reviews Fano Experimental Web Server D Eppstein School of Information Computer Science UC Irvine", "_id": "http://fano.ics.uci.edu/cites/Review/MR-98k68039.html", "title": "mathematical reviews 98k:68039", "html": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html>\n\t<head>\n\t\t<title>Mathematical Reviews 98k:68039</title>\n\t\t<link rel=\"shortcut icon\" href=\"/fano.png\" type=\"image/png\" />\n\t\t<link rel=\"stylesheet\" href=\"/stylesheet.css\" type=\"text/css\" />\n\t</head>\n\n\t<body>\n\t\t<div class=\"outer\">\n\t\t\t<h1><i>Mathematical Reviews</i> 98k:68039</h1>\n\n\t\t\t<div class=\"inner\">\n\t\t\t\t<p><a href=\"../Document/Sparsification-A-technique-for-speeding-up-dynamic-graph-algorithms.html\">Sparsification &#8212; A technique for speeding up dynamic graph algorithms</a><br />\n\t\t\t\t<a href=\"../Author/David-Eppstein.html\">David Eppstein</a>,\n<a href=\"../Author/Zvi-Galil.html\">Zvi Galil</a>,\n<a href=\"../Author/Giuseppe-F-Italiano.html\">Giuseppe F. Italiano</a>,\nand <a href=\"../Author/Amnon-Nissenzweig.html\">Amnon Nissenzweig</a><br />\n\t\t\t\t<i><a href=\"../Location/J-ACM.html\">J. ACM</a></i> <a href=\"../Publication/EppGalIta-JACM-97.html\">44(5):669&#8211;696, Sep 1997</a><br />\n\t\t\t\t<i><a href=\"../Location/Mathematical-Reviews.html\">Mathematical Reviews</a></i> 98k:68039, 1998<br />\n\t\t\t\tReviewed by <a href=\"../Author/Peter-B-Gibbons.html\">Peter B. Gibbons</a></p>\n\n\t\t\t\t<p>This paper makes a major contribution to the study of dynamic graph algorithms that maintain some property of a changing graph more efficiently than recomputation from scratch after each change. Dynamic algorithms can be classified as fully dynamic, where both edge insertions and deletions are allowed, or as partially dynamic where only insertions are allowed. The improved performances for dynamic algorithms are achieved through the use of the new technique of sparsification which, when applicable, can speed up a $T(n,m)$ time bound for a graph $G$ with $n$ vertices and $m$ edges to $T(n,O(n))$, almost the time needed if $G$ were sparse. Sparsification involves partitioning the edges of $G$ into a collection of $O(m/n)$ sparse subgraphs, each with $n$ vertices and $O(n)$ edges. The information relevant for each subgraph can be summarised in an even sparser subgraph, called a sparse certificate. Certificates are merged in pairs, producing larger subgraphs which are made sparse again by computing their certificates. The result is a balanced binary tree in which each node is represented by a sparse certificate. Each update involves $\\log (m/n)$ graphs with $O(n)$ edges each, instead of one graph with $m$ edges. A more careful partition into subgraphs causes each update to involve a sequence of graphs with $O(n)$ edges in total. Three variants of the sparsification technique are developed. The first is used in situations where no previous fully dynamic algorithm was known and gives time bounds of $O(n)$ per update. The second variant uses a dynamic data structure to maintain certificates possessing a stability property, thereby transforming time bounds of the form $O(m\\sp p)$ into $O(n\\sp p)$. In the third variant, deletions are performed as in the first variant, and insertions by using a partially dynamic algorithm. This leads to insertion times often matching those of known partially dynamic algorithms, together with deletion times similar to those of the first variant. Results include the maintenance of minimum spanning forests, graph connectivity, graph 2-edge connectivity and bipartiteness in time $O(n\\sp {1/2})$ per change; 3-edge connectivity in time $O(n\\sp {2/3})$ per change; 4-edge connectivity in time $O(n\\alpha(n))$ per change; $k$-edge connectivity for constant $k$ in time $O(n\\log n)$ per change; 2-vertex connectivity and 3-vertex connectivity in time $O(n)$ per change; and 4-vertex connectivity in time $O(n\\alpha(n))$ per change. Further results speed up the insertion times to match the bounds of known partially dynamic algorithms. The paper concludes with sections on recent related work and remaining open questions.</p>\n\n\t\t\t\t<div class=\"navbar\">\n\t\t\t\t\t[<a href=\"http://www.ics.uci.edu/~eppstein/pubs/\">D. Eppstein publications</a>]\n\t\t\t\t\t[<a href=\"/cites/\">Citation database</a>]\n\t\t\t\t\t[<a href=\"/cites/Review/\">Reviews</a>]\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"credit\">\n\t\t\t\t<a href=\"/\">Fano</a> Experimental Web Server,\n\t\t\t\t<a href=\"http://www.ics.uci.edu/~eppstein/\">D. Eppstein</a>,\n\t\t\t\t<a href=\"http://www.ics.uci.edu/\">School of Information &amp; Computer Science</a>,\n\t\t\t\t<a href=\"http://www.uci.edu/\">UC Irvine</a>\n\t\t\t</div>\n\n\t\t\t<a href=\"http://store.apple.com/\"><img alt=\"Made on a Mac\"\n\t\t\t height=\"31\" width=\"88\" src=\"/mac.png\" /></a>\n\t\t\t<a href=\"http://validator.w3.org/check/referer\"><img alt=\"Valid XHTML 1.0!\"\n\t\t\t height=\"31\" width=\"88\" src=\"/validx.png\" /></a>\n\t\t</div>\n\t</body>\n</html>\n", "id": 3149.0}