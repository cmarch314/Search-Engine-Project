{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Union find T A Definition An instance P of the data type Union find T A is a partition of values of type T into disjoint sets The template parameter A has to be a model of the allocator concept as defined in the C standard It has a default argument CGAL ALLOCATOR T Types Union find T A value type values stored in items equal to T Union find T A handle handle to values Union find T A iterator iterator over values There are also constant versions const handle and const iterator Union find T A allocator allocator Creation Union find T A P creates an instance P of type Union find T A and initializes it to the empty partition Operations allocator P get allocator the allocator of P std size t P number of sets returns the number of disjoint sets of P std size t P size returns the number of values of P std size t P bytes returns the memory consumed by P std size t P size const handle p returns the size of the set containing p void P clear reinitializes P to an empty partition handle P make set T x creates a new singleton set containing x and returns a handle to it handle P push back T x same as make set x template class Forward iterator void P insert Forward iterator first Forward iterator beyond insert the range of values referenced by first beyond Requirement value type of Forward iterator is T handle P find handle p const handle P find const handle p returns a canonical handle of the set that contains p i e P same set p q iff P find p and P find q return the same handle Precondition p is a handle in P void P unify sets handle p handle q unites the sets of partition P containing p and q Precondition p and q are in P bool P same set const handle p const handle q returns true iff p and q belong to the same set of P Precondition p and q are in P iterator P begin returns an iterator pointing to the first value of P iterator P end returns an iterator pointing beyond the last value of P Implementation Union find T A is implemented with union by rank and path compression The running time for m set operations on n elements is O n m n where m n is the extremely slow growing inverse of Ackermann s function Next Unique hash map Key Data UniqueHashFunction Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Union_find_ref/Class_Union_find.html", "title": "union_find&lt;t,a&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Union_find_ref/Union_find.tex' -->\n<html> <head>  \n<title>Union_find&lt;T,A&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"../Miscellany_ref/Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1721\"></A>\n\n<A NAME=\"Cross_link_anchor_1722\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1570\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Union_find<T,A>\"></A>\n<h2><I>CGAL::Union_find&lt;T,A&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <I>P</I> of the data type <I><A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;</I> is a\npartition of values of type <I>T</I> into disjoint sets.  The template \nparameter <I>A</I> has to be a model of the allocator concept as defined \nin the C++ standard. It has a default argument <I>CGAL_ALLOCATOR(T)</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;::value_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    values stored in items (equal to <I>T</I>).\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;::handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to values.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;::iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator over values.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThere are also constant versions <I>const_handle</I> and <I>const_iterator</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;::allocator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    allocator.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt; P;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an instance <I>P</I> of type\n  <I><A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;</I> and initializes it to the empty partition.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_allocator_get_allocator69_;\"></A>\nallocator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.get_allocator ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the allocator of <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_number_of_sets69_;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.number_of_sets ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of disjoint\n  sets of <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_size69_;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.size ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of values of <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_bytes69_;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.bytes ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the memory consumed by <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_size6_const_handle_p9_;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.size ( const_handle p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the size of the set\n  containing <MATH><I>p</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reinitializes <I>P</I> to an empty partition.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_handle_make_set6const_T__x9;\"></A>\nhandle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.make_set (  T x)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates a new singleton set\n  containing <I>x</I> and returns a handle to it.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_handle_push_back6const_T__x9_;\"></A>\nhandle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.push_back (  T x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    same as <I>make_set(x)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class Forward_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6Forward_iterator_first+_Forward_iterator_beyond9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    P.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Forward_iterator first,<BR>\n\nForward_iterator beyond)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    insert\n  the range of values referenced by <I>[first,beyond)</I>.<BR>\n\n<EM>Requirement: </EM>value type of <I>Forward_iterator</I> is <I>T</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_handle_find6handle_p9_;\"></A>\nhandle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.find ( handle p)\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_handle_find6_const_handle_p9_;\"></A>\nconst_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.find ( const_handle p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a \n  canonical handle of the set that contains <I>p</I>, i.e., \n  <I>P.same_set(p,q)</I> iff <I>P.find(p)</I> and <I>P.find(q)</I> \n  return the same handle.<BR>\n\n<EM>Precondition: </EM><I>p</I> is a handle in <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_unify_sets6_handle_p+_handle_q9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.unify_sets ( handle p,  handle q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    unites the sets of\n  partition <I>P</I> containing <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>p</I></MATH> and <MATH><I>q</I></MATH> are\n  in <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_same_set6_const_handle_p+_const_handle_q9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    P.same_set ( const_handle p,  const_handle q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns \n  true iff <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH> belong to the same set of <I>P</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>p</I></MATH> and <MATH><I>q</I></MATH> are in <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_begin69_;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator pointing to the\n  first value of <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_end69_;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    P.end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator pointing beyond the\n  last value of <I>P</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\n<I><A HREF=\"Class_Union_find.html#Cross_link_anchor_1722\">Union_find</A>&lt;T,A&gt;</I> is implemented with union by rank and path\ncompression.  The running time for <MATH><I>m</I></MATH> set operations on <MATH><I>n</I></MATH> elements\nis <MATH><I>O(n <IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">(m,n))</I></MATH> where <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">(m,n)</I></MATH> is the extremely slow growing\ninverse of Ackermann's function.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"../Hash_map_ref/Class_Unique_hash_map.html\"><I>Unique_hash_map&lt;Key,Data,UniqueHashFunction&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_9!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39517.0}