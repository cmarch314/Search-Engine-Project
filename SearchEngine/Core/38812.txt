{"text": "OEChem C Theory Manual Version 1 3 1 Previous 5 2 Looping over the Up 5 Traversing the Atoms Next 5 4 Looping over the 5 3 Dereferencing the Iterator The example above shows how to use an OEChem iterator to loop over objects but didn t actually use them OEChem iterators provide four operators to allow the user to access the object at the current iterator position Implicit casting or the operator can be used to get a pointer to the current object and implicit casting or the operator can be used to get a reference to a given object I e if variable iter has type OEIter T then T iter is a pointer to the current item and iter and T iter are of type T These operators mean than in most cases an OEChem iterator OEIter T behaves identically to a T For example to list the atomic numbers of atoms in a molecule include oechem h include iostream using namespace OESystem using namespace OEChem using namespace std void ListAtomicNumbers OEMolBase mol OEIter OEAtomBase atom for atom mol GetAtoms atom atom cout atom GetAtomicNum endl int main OEMol mol OEParseSmiles mol c1ccccc1 ListAtomicNumbers mol return Download as text This routine could also be written with an explicit assignment to an OEAtomBase include oechem h include iostream using namespace OESystem using namespace OEChem using namespace std void ListAtomicNumbers OEMolBase mol OEIter OEAtomBase atom OEAtomBase aptr for atom mol GetAtoms atom atom aptr atom cout aptr GetAtomicNum endl int main OEMol mol OEParseSmiles mol c1ccccc1 ListAtomicNumbers mol return Download as text Comparing these two examples shows how iterators and pointers behave similarly The OEAtomBase method GetAtomicNum that returns the atomic number of the given atom will be described later The implicit casts of OEIter T to either a T or T are most useful when passing the object to a function which takes T by reference or by pointer include openeye h include iostream include oeplatform h include oesystem h include oechem h using namespace OESystem using namespace OEChem using namespace std void PrintAtomicNumber const OEAtomBase atom cout atom GetAtomicNum endl void PrintAromatic const OEAtomBase atom if atom IsAromatic cout Is Aromatic endl else cout Isn t Aromatic endl int main OEMol mol OEParseSmiles mol c1ccccc1 OEIter OEAtomBase atom for atom mol GetAtoms atom atom PrintAtomicNumber atom PrintAromatic atom return Download as text OEChem C Theory Manual Version 1 3 1 Previous 5 2 Looping over the Up 5 Traversing the Atoms Next 5 4 Looping over the Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node45.html", "title": "5.3 dereferencing the iterator", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>5.3 Dereferencing the Iterator</title>\n<META NAME=\"description\" CONTENT=\"5.3 Dereferencing the Iterator\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node46.html\">\n<LINK REL=\"previous\" HREF=\"node44.html\">\n<LINK REL=\"up\" HREF=\"node42.html\">\n<LINK REL=\"next\" HREF=\"node46.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node44.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node42.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node46.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node44.html\">5.2 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node42.html\">5. Traversing the Atoms,</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node46.html\">5.4 Looping over the</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION008300000000000000000\">\n5.3 Dereferencing the Iterator</A>\n</H1>\n\n<P>\nThe example above shows how to use an OEChem iterator to loop over\nobjects, but didn't actually use them.  OEChem iterators provide four\noperators to allow the user to access the object at the current\niterator position. Implicit casting or the operator <code>-&gt;</code> can be used\nto get a pointer to the current object, and implicit casting or the\noperator <code>*</code> can be used to get a reference to a given object.\nI.e. if variable <var>iter</var> has type <code>OEIter&lt;T&gt;</code> then <code>(T*)iter</code> is a\npointer to the current item, and <code>*iter</code> and <code>(T&amp;)iter</code> are of type\n<code>T&amp;</code>.  These operators mean than in most cases an OEChem iterator\n<code>OEIter&lt;T&gt;</code> behaves identically to a <code>T*</code>.\n\n<P>\nFor example, to list the atomic numbers of atoms in a molecule:\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nvoid ListAtomicNumbers(OEMolBase &amp;mol)\n{\n  OEIter&lt;OEAtomBase&gt; atom;\n\n  for (atom=mol.GetAtoms(); atom; ++atom)\n    cout &lt;&#60; atom-&gt;GetAtomicNum() &lt;&#60; endl;\n}\n\nint main()\n{\n  OEMol mol;\n  OEParseSmiles(mol, \"c1ccccc1\");\n  ListAtomicNumbers(mol);\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThis routine could also be written with an explicit assignment to an\nOEAtomBase*.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"oechem.h\"\n#include &lt;iostream&gt;\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nvoid ListAtomicNumbers(OEMolBase &amp;mol)\n{\n  OEIter&lt;OEAtomBase&gt; atom;\n  OEAtomBase *aptr;\n\n  for (atom=mol.GetAtoms(); atom; ++atom)\n  {\n    aptr = atom;\n    cout &lt;&#60; aptr-&gt;GetAtomicNum() &lt;&#60; endl;\n  }\n}\n\nint main()\n{\n  OEMol mol;\n  OEParseSmiles(mol, \"c1ccccc1\");\n  ListAtomicNumbers(mol);\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nComparing these two examples shows how iterators and pointers behave\nsimilarly.  The OEAtomBase method, GetAtomicNum, that returns the\natomic number of the given atom, will be described later.\n\n<P>\nThe implicit casts of <code>OEIter&lt;T&gt;</code> to either a <code>T&amp;</code> or\n<code>T*</code> are most useful when passing the object to a function which\ntakes T by reference or by pointer.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#include \"openeye.h\"\n#include &lt;iostream&gt;\n#include \"oeplatform.h\"\n#include \"oesystem.h\"\n#include \"oechem.h\"\n\nusing namespace OESystem;\nusing namespace OEChem;\nusing namespace std;\n\nvoid PrintAtomicNumber(const OEAtomBase *atom)\n{\n  cout &lt;&#60; atom-&gt;GetAtomicNum() &lt;&#60; endl;\n}\n\nvoid PrintAromatic(const OEAtomBase &amp;atom)\n{\n  if(atom.IsAromatic())\n    cout &lt;&#60; \"Is Aromatic\" &lt;&#60; endl;\n  else\n    cout &lt;&#60; \"Isn't Aromatic\" &lt;&#60; endl;\n}\n\nint main()\n{\n  OEMol mol;\n  OEParseSmiles(mol, \"c1ccccc1\");\n\n  OEIter&lt;OEAtomBase&gt; atom;\n  for(atom = mol.GetAtoms();atom;++atom)\n  {\n    PrintAtomicNumber(atom);\n    PrintAromatic(atom);\n  }\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch6-7.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node44.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node42.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node46.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node44.html\">5.2 Looping over the</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node42.html\">5. Traversing the Atoms,</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node46.html\">5.4 Looping over the</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38812.0}