{"text": "Operating System Directionsfor the Next Millennium William J Bolosky Richard P Draves Robert P Fitzgerald Christopher W Fraser Michael B Jones Todd B Knoblock Rick Rashid Microsoft ResearchOne Microsoft WayRedmond WA 98 52http research microsoft com Abstract We believe it is time to reexamine the operating system s role in computing Operating systems exist to create an environment in which compelling applications come to life They do that by providing abstractions built on the services provided by hardware We argue that advances in hardware and networking technology enable a new kind of operating system to support tomorrow s applications Such an operating system would raise the level of abstraction for developers and users so that individual computers file systems and networks become unimportant to most computations in the same way that processor registers disk sectors and physical pages are today Introduction The users operators and programmers of distributed systems face many problems Users of the World Wide Web are subjected to random performance and service disruptions Replacing or upgrading a personal computer workstation or server is very difficult Even a moderate size computer network requires significant expertise to configure and maintain The principal programming abstractions available today processes threads files and sockets do not adequately address the problems of managing locality availability or fault tolerance We believe that a distributed operating system based on a few principles pervasively applied could address these problems Such a system would enforce extreme location transparency any code fragment might run anywhere any data object might live anywhere and the system would manage the locality replication and migration of computations and data The system would be self configuring self monitoring and self tuning And of course it would be scalable and secure As part of the Millennium project at Microsoft Research we are attempting to design and build such a system We do not harbor the conceit that it will be possible to be fully successful in such an endeavor but we do feel that the time is right for radical experimentation This position paper describes our goals for the system and some principles that support those goals We then discuss relevant technology trends and consider some examples of what such a system would be like Finally we discuss related research efforts and conclude Goals Our goal is to dramatically improve users computational experience To that end the system should have at least the following properties Seamless distribution The system should determine where computations execute or data resides moving them dynamically as necessary Users should be able to use any computing device that is part of the distributed system as naturally and productively as they would use the machine on their desk or in their den at home Worldwide scalability Logically there should be only one system although at any one time it may be partitioned into many pieces For example disconnected or weakly connected operation creates temporary network partitions Fault tolerance The system should transparently handle failures or removal of machines network links and other resources without loss of data or functionality This should hold true for both the system itself and for its applications Self tuning The system should be able to reason about its computations and resources allocating replicating and moving computations and data to optimize its own performance resource usage and fault tolerance Self configuration New machines network links and resources should be automatically assimilated Security Although a single system image is presented data and computations may be in many different trust domains with different rights and capabilities available to different security principals Like the Internet the system should allow non hierarchical trust domains with no central authority necessary Resource controls Both providers and consumers may explicitly manage the use of resources belonging to different trust domains For instance while some people might be content to allow their data and computations to use any resources available anywhere some companies might choose for instance not to store or compute their year end financial statement on their competitor s machines Principles To achieve these goals we propose a distributed operating system built on the principles of aggressive abstraction storage irrelevance location irrelevance just in time binding and introspection Aggressive abstraction The level of abstraction should be raised to the point that application programmers are freed from the mechanics of distributed programming and the exigencies of physical computing components This would allow them to focus on application concerns actually solving a problem for a user rather than system concerns such as communication or fault tolerance To the greatest extent possible the system should handle difficult issues like data placement resource location fault tolerance and load balancing Storage irrelevance There should be no storage hierarchy Once created information should be accessible until it is no longer needed or referenced Location irrelevance Objects should be allowed to reference each other and invoke operations without regard for their current location or replication state The system should have a seamless appearance despite its underlying distributed nature Just in time binding Bindings to particular computations data and hardware resources should be made only when actually required preventing applications from creating bindings that would interfere with distribution or fault tolerance Computations or data could be arbitrarily duplicated and bindings made to one instance would be equivalent to bindings to other instances Just in time binding would enhance resource access and management as the operating system could redirect access to a resource at any time or for any reason to an equivalent entity Introspection The system should possess some aspects of self examination and reflection It should pervasively monitor itself and its applications and reason about configuration and performance issues Its models of its own configuration and operation should suggest opportunities for self tuning as well as generate suggestions for physical configuration changes or upgrades that would improve performance Aggressive abstraction addresses a number of the goals that we have laid out The system should provide applications with highly abstract virtual machine semantics Defining computations in software terms independent of any particular platform or configuration would allow state to be maintained in an abstract form and only be compiled to an efficient executable form at the last possible moment Because the operating system would retain ultimate control over computation typical applications would not even be able to express access to low level system resources This would allow the operating system to protect computations from each other transparently migrate and distribute them and intercede in their access to resources Storage and location irrelevance address the issue of seamless interaction with information independent of its properties Interactive users could walk up to any computer anywhere and have their active applications and personal data follow them Programs should work the same regardless of how their components are distributed The Internet provides good examples today of the kind of just in time binding we would extend to all object interactions Server names and addresses on the Internet often do not refer to specific resources but to collections of systems that take on an Internet identity or address for a particular collection of users Users are becoming accustomed to what can best be described as binding by search as information is referenced not by name but by keyword or attributes Introspection guarantees that the system should take responsibility for determining where a computation executes or data resides The programmer should not have to decide whether code will execute at a client or server Instead the system s assessment of its hardware resources and usage patterns should determine the placement of computations and data This would allow the operating system to provide fault tolerance high availability and self tuning behavior for applications Technology Trends While it might seem extreme to pervasively apply these principles to the point of removing from programmers many of the decisions currently seen as important in application development this approach to operating system design is really just an extrapolation of current trends Throughout the history of computer science advances in operating system and programming language design have raised the level of abstraction and removed control from application programmers This trend is inevitable It is driven by the continuing exponential increase in the performance of computing hardware In any software project there is a tradeoff between the amount of programming effort the application functionality and the resulting performance Better hardware means that there is more performance available to be spent on increased functionality and reduced development cost Furthermore the relationship between more powerful abstractions and development cost is non linear It is hard to imagine any amount of engineering effort producing a system like today s World Wide Web using only 195 s software technology even if it were running on modern hardware Admittedly there are occasional setbacks to this trend in which people focus on bypassing abstractions for improved performance Many advances in operating systems and networking both demonstrate this trend and provide some technical underpinnings for another step forward Distributed file systems e g Anderson et al 96 Kistler Satya 92 have succeeded in providing efficient location transparent access to data Some recent file system work Wilkes et al 96 Neefe et al 96 focuses on auto configuring and self tuning for different loads Network auto configuration at the LAN level Rodeheffer Schroeder 91 Thomson Narten 96 is increasingly possible Distributed garbage collection remains a difficult problem but progress is being made Ferreira Shapiro 94 Systems for distributing parallel work now exist Geist et al 94 Livny 95 Programming languages and compilers provide evidence of a similar evolution What were once programmer decisions have increasingly been automated Where once it was routine to write in assembly language now in most cases a compiler for a higher level language like C does almost as well Debugging portability and maintainability are improved and the compiler is better able to analyze a myriad of details to optimize instruction selection and scheduling register allocation and spilling etc Today this trend is continuing with the popularity of easy to use environments like Java Visual Basic and Delphi The emphasis in the tools industry is shifting from code efficiency to rapid application development with wizards that automatically generate scaffolding or framework code Virtual machine environments with just in time compilation Adl Tabatabai 96 Arnold Gosling 96 extend the programmer s insulation from processor architecture details delaying that binding until run time What would such a system be like Given a distributed system with the properties described above how might it function in practice In this section we present several scenarios that highlight the major aspects of our position A New Machine A user purchases and installs a new personal computer or workstation The hardware vendor has done a good job with the cables and connectors so plugging the system together is easy The user plugs the power and network cables into the wall and flips the power switch From the moment that a boot ROM or perhaps a boot loader on disk downloads code from the network the new machine joins the Millennium system The user has full access to Millennium with no human managed configuration activities required Millennium evaluates the hardware resources of the new computing device that it has acquired and starts to shift computations and data in response A New Network An administrator sets up a new office network After connecting the various computers links and routers the network is initially quiescent The administrator inserts a Millennium installation DVD disk into one of the machines and the system propagates across the network After evaluating the network topology and hardware resources Millennium might suggest that one of the more powerful machines a server be moved to a different network location for best performance At some point the administrator connects the office network to the Internet and the office instantiation of the Millennium system merges with the worldwide system Hardware Failure An office computer goes down perhaps a power supply has burned out The Millennium system reconfigures around the missing machine While the computer still ran computations and data stored on it were either automatically replicated to other systems or logged so that they could be rerun or recomputed At the time of the failure Millennium identifies unique state that was not replicated and must be reconstructed and initiates those computations automatically In general users may detect a hesitation as the system moves or recreates data they attempt to access but otherwise they are unaware of the change An interactive user of the failed machine shifts to another machine and resumes work immediately or simply plugs in a replacement Web Service A little known web site suddenly achieves popularity perhaps with a link from Cool Site of the DaySM or a mention in a prominent news story Word of mouth spreads and soon the web site s servers are overwhelmed Or rather would have been overwhelmed except that heuristics in the Millennium system had noticed the new link and already started replicating the site for increased availability Monitored traffic increases confirm the situation and soon the site s data has been pre cached across the Internet As the site s usage drops over the following weeks Millennium reallocates resources to meet new demands Distributed Programming Consider a simple fragment of pseudo code for p first S p not null p next S if p age 18 and p height 6 and p weight 18 count When executed in a distributed environment the most efficient strategy for code like this is unclear Should code or data be replicated or moved Should loop iterations be executed in parallel And what happens to error handling In general making such decisions requires knowledge of network and system parameters plus knowledge of current conditions Millennium network operations intrinsically carry code to execute remotely but the programmer does not deal with this explicitly Instead the Millennium system automatically and dynamically exploits locality and concurrency opportunities In the example code fragment we believe that it is feasible for compiler techniques to identify the conditional test as code that should execute at the object p s location in most circumstances In more complicated scenarios variations at run time make it desirable to perform these optimizations dynamically or just in time Related Work Several current projects share some of our goals or directions The WebOS project Vahdat et al 96 Vahdat et al 97 addresses the goal of bringing distributed computing to the World Wide Web The heart of the WebOS system is WebFS a global file system WebFS provides secure cache coherent access to data WebOS also includes a remote execution service WebOS can be used to build highly available and self tuning web services The Inferno system Lucent 96 integrates an operating system and language environment with the goal of making it easier to create distributed services Like Java Arnold Gosling 96 Inferno creates a virtual machine environment for applications However Inferno also includes network protocols and services for distributed programming and a stand alone implementation suitable for minimal hardware environments Sun is moving Java in this direction with the development of JavaOS Mitchell 96 The Globe project Steen 96 Homburg et al 96 investigates distributed shared objects as a technique for building large scale distributed systems Local object representatives hide details like replication and mobility Local objects have a standard internal structure that makes it easier to reuse code components One of Globe s major features is a hierarchical distributed location service that adapts dynamically to different usage patterns Legion Grimshaw et al 97 proposes using an extensible object model to provide a single system model for a worldwide network of computers Legion emphasizes high performance parallel computing It supports legacy codes by encapsulating them in Legion style object oriented wrappers Legion automatically manages object replication and migration and supplies a single persistent global name space Conclusion We have described our goals for a new distributed operating system Improvements in hardware and networking technology coupled with continuing operating system and programming language advances enable the creation of an operating system that raises the level of abstraction presented to its applications The operating system should provide seamless distribution worldwide scalability fault tolerance self tuning self configuration security and resource controls References Adl Tabatabai 96 Ali Reza Adl Tabatabai Geoff Lnagdale Steven Lucco and Robert Wahbe Efficient and Language Independent Mobile Programs In Proceedings of the ACM SIGPLAN 96 Conference on Programming Language Design and Implementation pp 127 136 May 1996 Anderson et al 96 T Anderson M Dahlin J Neefe D Roselli D Patterson and R Wang Serverless Network File Systems ACM Transactions on Computer Systems 14 1 February 1996 Arnold Gosling 96 Ken Arnold and James Gosling The Java Programming Language Addison Wesley 1996 Ferreira Shapiro 94 Paulo Ferreira and Marc Shapiro Garbage Collection and DSM Consistency In Proceedings of the First Symposium on Operating Systems Design and Implementation Monterey California November 1994 Geist et al 94 A Geist A Beguelin J Dongarra W Jiang R Manchek and V Sunderam PVM Parallel Virtual Machine A Users Guide and Tutorial for Networked Parallel Computing Scientific and Engineering Series MIT Press 1994 Grimshaw et al 97 A Grimshaw W Wulf and the Legion Team The Legion Vision of a Worldwide Virtual Computer Communications of the ACM 4 1 January 1997 Homburg et al 96 Philip Homburg Maarten van Steen and Andrew S Tanenbaum An Architecture for a Wide Area Distributed System In Proceedings of the Seventh ACM SIGOPS European Workshop Connemara Ireland September 1996 Kistler Satya 92 J J Kistler and M Satyanarayanan Disconnected Operation in the Coda File System ACM Transactions on Computer Systems 1 1 3 25 February 1992 Livny 95 M Livny The Condor Distributed Processing System Dr Dobbs Journal pp 4 58 February 1995 Lucent 96 Lucent Technologies Inferno la Commedia Interattiva http inferno lucent com inferno infernosum html 1996 Mitchell 96 Jim Mitchell JavaOS Back to the Future Invited talk at the Second Symposium on Operating Systems Design and Implementation Seattle Washington October 1996 Neefe et al 96 J Neefe D Roselli R Wang T Anderson and M Dahlin Improving the Performance of Log Structured File Systems http http cs berkeley edu neefe papers osdi submit ps 1996 Rodeheffer Schroeder 91 Thomas L Rodeheffer and Michael D Schroeder Automatic Reconfiguration in Autonet In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles Pacific Grove California pp 183 197 October 1991 Steen 96 Maarten van Steen The GLOBE Project http www cs vu nl steen globe 1996 Tennenhouse Wetherall 96 D Tennenhouse and D Wetherall Towards an Active Network Architecture ACM SIGCOMM Computer Communication Review pp 5 18 April 1996 Thomson Narten 96 S Thomson and T Narten IPv6 Stateless Address Autoconfiguration IETF Request for Comments 1971 August 1996 Vahdat et al 96 Amin Vahdat Michael Dahlin and Thomas Anderson Turning the Web Into a Computer http now cs berkeley edu WebOS webos ps 1996 Vahdat et al 97 Amin Vahdat Paul Eastham Chad Yoshikawa Michael Dahlin and Thomas Anderson WebOS Software Support for Scalable Web Services Submitted to the Sixth Workshop on Hot Topics in Operating Systems Chatham Massachussetts May 1997 Wilkes et al 96 J Wilkes R Golding C Staelin and T Sullivan The HP AutoRAID Hierarchical Storage System ACM Transactions on Computer Systems 14 1 1 8 136 February 1996 Back to top Home Research Areas People About MSR Search Downloads Sitemap", "_id": "http://www.ics.uci.edu/~cs230/reading/Millennium.htm", "title": "millennium", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n<!-- saved from url=(0055)http://www.ics.uci.edu/~ics280ds/reading/Millennium.htm -->\r\n<!-- saved from url=(0064)http://research.microsoft.com/research/os/Millennium/mgoals.html --><HTML><HEAD><TITLE>Millennium</TITLE>\r\n<META http-equiv=Content-Type content=\"text/html; charset=iso-8859-1\">\r\n<META content=\"MSHTML 5.50.4134.600\" name=GENERATOR><SITEMAP=RESEARCH sn \r\nmillennium mgoals>\r\n<META content=\"Microsoft FrontPage 2.0\" name=GENERATOR><LINK \r\nhref=\"Millennium_files/msrstyle.css\" type=text/css rel=STYLESHEET></HEAD>\r\n<BODY text=#000000 vLink=#0066cc aLink=#66cc33 link=#0099ff \r\nbgColor=#ffffff><FONT face=\"verdana, arial, helvetica, geneva, sans-serif\"><A \r\nname=top></A>\r\n<P align=center><FONT size=6><B>Operating System Directions<BR>for the Next \r\nMillennium</B></FONT></P>\r\n<P align=center><FONT size=4>William J. Bolosky, Richard P. Draves, Robert P. \r\nFitzgerald,<BR>Christopher W. Fraser, Michael B. Jones, Todd B. Knoblock, Rick \r\nRashid</FONT></P>\r\n<P align=center>Microsoft Research<BR>One Microsoft Way<BR>Redmond WA \r\n98052<BR><A target=_top href=\"http://research.microsoft.com/\"><FONT \r\nface=\"Courier New\" size=2>http://research.microsoft.com</FONT></A></P>\r\n<P><FONT face=Arial size=4><B>Abstract</B></FONT></P>\r\n<P><FONT size=2>We believe it is time to reexamine the operating system&#8217;s role \r\nin computing. Operating systems exist to create an environment in which \r\ncompelling applications come to life. They do that by providing abstractions \r\nbuilt on the services provided by hardware. We argue that advances in hardware \r\nand networking technology enable a new kind of operating system to support \r\ntomorrow&#8217;s applications. Such an operating system would raise the level of \r\nabstraction for developers and users, so that individual computers, file \r\nsystems, and networks become unimportant to most computations in the same way \r\nthat processor registers, disk sectors, and physical pages are today.</FONT></P>\r\n<P><FONT face=Arial size=4><B>Introduction</B></FONT></P>\r\n<P><FONT size=2>The users, operators, and programmers of distributed systems \r\nface many problems. Users of the World Wide Web are subjected to random \r\nperformance and service disruptions. Replacing or upgrading a personal computer, \r\nworkstation, or server is very difficult. Even a moderate size computer network \r\nrequires significant expertise to configure and maintain. The principal \r\nprogramming abstractions available today&#8212;processes, threads, files, and \r\nsockets&#8212;do not adequately address the problems of managing locality, \r\navailability, or fault tolerance.</FONT></P>\r\n<P><FONT size=2>We believe that a distributed operating system, based on a few \r\nprinciples pervasively applied, could address these problems. Such a system \r\nwould enforce extreme location transparency&#8212;any code fragment might run \r\nanywhere, any data object might live anywhere&#8212;and the system would manage the \r\nlocality, replication, and migration of computations and data. The system would \r\nbe self-configuring, self-monitoring, and self-tuning. And of course, it would \r\nbe scalable and secure.</FONT></P>\r\n<P><FONT size=2>As part of the Millennium project at Microsoft Research, we are \r\nattempting to design and build such a system. We do not harbor the conceit that \r\nit will be possible to be fully successful in such an endeavor, but we do feel \r\nthat the time is right for radical experimentation.</FONT></P>\r\n<P><FONT size=2>This position paper describes our goals for the system and some \r\nprinciples that support those goals. We then discuss relevant technology trends \r\nand consider some examples of what such a system would be like. Finally, we \r\ndiscuss related research efforts and conclude.</FONT></P>\r\n<P><FONT face=Arial size=4><B>Goals</B></FONT></P>\r\n<P><FONT size=2>Our goal is to dramatically improve users&#8217; computational \r\nexperience. To that end, the system should have at least the following \r\nproperties:</FONT></P>\r\n<UL>\r\n  <LI><FONT size=2><B>Seamless distribution.</B> The system should determine \r\n  where computations execute or data resides, moving them dynamically as \r\n  necessary. Users should be able to use any computing device that is part of \r\n  the distributed system as naturally and productively as they would use the \r\n  machine on their desk or in their den at home.</FONT> \r\n  <LI><FONT size=2><B>Worldwide scalability.</B> Logically there should be only \r\n  <I>one</I> system, although at any one time it may be partitioned into many \r\n  pieces. For example, disconnected or weakly-connected operation creates \r\n  temporary network partitions.</FONT> \r\n  <LI><FONT size=2><B>Fault-tolerance.</B> The system should transparently \r\n  handle failures or removal of machines, network links, and other resources \r\n  without loss of data or functionality. This should hold true for both the \r\n  system itself and for its applications. </FONT>\r\n  <LI><FONT size=2><B>Self-tuning.</B> The system should be able to reason about \r\n  its computations and resources, allocating, replicating, and moving \r\n  computations and data to optimize its own performance, resource usage, and \r\n  fault-tolerance.</FONT> \r\n  <LI><FONT size=2><B>Self-configuration.</B> New machines, network links, and \r\n  resources should be automatically assimilated.</FONT> \r\n  <LI><FONT size=2><B>Security.</B> Although a single system image is presented, \r\n  data and computations may be in many different trust domains, with different \r\n  rights and capabilities available to different security principals. Like the \r\n  Internet, the system should allow non-hierarchical trust domains with no \r\n  central authority necessary.</FONT> \r\n  <LI><FONT size=2><B>Resource controls.</B> Both providers and consumers may \r\n  explicitly manage the use of resources belonging to different trust domains. \r\n  For instance, while some people might be content to allow their data and \r\n  computations to use any resources available anywhere, some companies might \r\n  choose, for instance, not to store or compute their year-end financial \r\n  statement on their competitor&#8217;s machines.</FONT> </LI></UL>\r\n<P><FONT face=Arial size=4><B>Principles</B></FONT></P>\r\n<P><FONT size=2>To achieve these goals, we propose a distributed operating \r\nsystem built on the principles of aggressive abstraction, storage-irrelevance, \r\nlocation-irrelevance, just-in-time binding, and introspection:</FONT></P>\r\n<UL>\r\n  <LI><FONT size=2><B>Aggressive abstraction.</B> The level of abstraction \r\n  should be raised to the point that application programmers are freed from the \r\n  mechanics of distributed programming and the exigencies of physical computing \r\n  components. This would allow them to focus on application concerns&#8212;actually \r\n  solving a problem for a user&#8212;rather than system concerns such as communication \r\n  or fault tolerance. To the greatest extent possible, the system should handle \r\n  difficult issues like data placement, resource location, fault-tolerance, and \r\n  load-balancing.</FONT> \r\n  <LI><FONT size=2><B>Storage-irrelevan</B><STRONG>ce.</STRONG> There should be \r\n  no storage hierarchy. Once created, information should be accessible until it \r\n  is no longer needed or referenced.</FONT> \r\n  <LI><FONT size=2><B>Location-irrelevance. </B>Objects should be allowed to \r\n  reference each other and invoke operations without regard for their current \r\n  location or replication state. The system should have a seamless appearance \r\n  despite its underlying distributed nature. </FONT>\r\n  <LI><FONT size=2><B>Just-in-time binding. </B>Bindings to particular \r\n  computations, data, and hardware resources should be made only when actually \r\n  required, preventing applications from creating bindings that would interfere \r\n  with distribution or fault tolerance. Computations or data could be \r\n  arbitrarily duplicated and bindings made to one instance would be equivalent \r\n  to bindings to other instances. Just-in-time binding would enhance resource \r\n  access and management as the operating system could redirect access to a \r\n  resource at any time or for any reason to an equivalent entity.</FONT> \r\n  <LI><FONT size=2><B>Introspection. </B>The system should possess some aspects \r\n  of self-examination and reflection. It should pervasively monitor itself and \r\n  its applications, and reason about configuration and performance issues. Its \r\n  models of its own configuration and operation should suggest opportunities for \r\n  self-tuning as well as generate suggestions for physical configuration changes \r\n  or upgrades that would improve performance. </FONT></LI></UL>\r\n<P><FONT size=2>Aggressive abstraction addresses a number of the goals that we \r\nhave laid out. The system should provide applications with highly abstract \r\nvirtual machine semantics. Defining computations in software terms, independent \r\nof any particular platform or configuration, would allow state to be maintained \r\nin an abstract form and only be compiled to an efficient executable form at the \r\nlast possible moment. Because the operating system would retain ultimate control \r\nover computation, typical applications would not even be able to express access \r\nto low-level system resources. This would allow the operating system to protect \r\ncomputations from each other, transparently migrate and distribute them, and \r\nintercede in their access to resources.</FONT></P>\r\n<P><FONT size=2>Storage and location irrelevance address the issue of seamless \r\ninteraction with information independent of its properties. Interactive users \r\ncould walk up to any computer anywhere and have their active applications and \r\npersonal data follow them. Programs should work the same regardless of how their \r\ncomponents are distributed.</FONT></P>\r\n<P><FONT size=2>The Internet provides good examples today of the kind of \r\njust-in-time binding we would extend to all object interactions. Server names \r\nand addresses on the Internet often do not refer to specific resources but to \r\ncollections of systems that take on an Internet \"identity\" or address for a \r\nparticular collection of users. Users are becoming accustomed to what can best \r\nbe described as \"binding-by-search\" as information is referenced not by name but \r\nby keyword or attributes.</FONT></P>\r\n<P><FONT size=2>Introspection guarantees that the system should take \r\nresponsibility for determining where a computation executes or data resides. The \r\nprogrammer should not have to decide whether code will execute at a \"client\" or \r\n\"server.\" Instead the system&#8217;s assessment of its hardware resources and usage \r\npatterns should determine the placement of computations and data. This would \r\nallow the operating system to provide fault tolerance, high availability, and \r\nself-tuning behavior for applications.</FONT></P>\r\n<P><FONT face=Arial size=4><B>Technology Trends</B></FONT></P>\r\n<P><FONT size=2>While it might seem extreme to pervasively apply these \r\nprinciples to the point of removing from programmers many of the decisions \r\ncurrently seen as important in application development, this approach to \r\noperating system design is really just an extrapolation of current trends. \r\nThroughout the history of computer science, advances in operating system and \r\nprogramming language design have raised the level of abstraction and removed \r\ncontrol from application programmers.</FONT></P>\r\n<P><FONT size=2>This trend is inevitable. It is driven by the continuing \r\nexponential increase in the performance of computing hardware. In any software \r\nproject, there is a tradeoff between the amount of programming effort, the \r\napplication functionality, and the resulting performance. Better hardware means \r\nthat there is more performance available to be spent on increased functionality \r\nand reduced development cost. Furthermore, the relationship between more \r\npowerful abstractions and development cost is non-linear. It is hard to imagine \r\nany amount of engineering effort producing a system like today&#8217;s World Wide Web \r\nusing only 1950&#8217;s software technology, even if it were running on modern \r\nhardware. (Admittedly, there are occasional setbacks to this trend in which \r\npeople focus on bypassing abstractions for improved performance.)</FONT></P>\r\n<P><FONT size=2>Many advances in operating systems and networking both \r\ndemonstrate this trend and provide some technical underpinnings for another step \r\nforward. Distributed file systems [e.g.,&nbsp;Anderson et&nbsp;al.&nbsp;96, \r\nKistler&nbsp;&amp;&nbsp;Satya&nbsp;92] have succeeded in providing efficient \r\nlocation-transparent access to data. Some recent file system work \r\n[Wilkes&nbsp;et&nbsp;al.&nbsp;96, Neefe&nbsp;et&nbsp;al.&nbsp;96] focuses on \r\nauto-configuring and self-tuning for different loads. Network auto-configuration \r\nat the LAN level [Rodeheffer&nbsp;&amp; Schroeder&nbsp;91, Thomson&nbsp;&amp; \r\nNarten&nbsp;96] is increasingly possible. Distributed garbage collection remains \r\na difficult problem, but progress is being made [Ferreira&nbsp;&amp; \r\nShapiro&nbsp;94]. Systems for distributing parallel work now exist \r\n[Geist&nbsp;et&nbsp;al.&nbsp;94, Livny&nbsp;95].</FONT></P>\r\n<P><FONT size=2>Programming languages and compilers provide evidence of a \r\nsimilar evolution. What were once programmer decisions have increasingly been \r\nautomated. Where once it was routine to write in assembly language, now in most \r\ncases a compiler for a higher level language like C++ does almost as well. \r\nDebugging, portability, and maintainability are improved, and the compiler is \r\nbetter able to analyze a myriad of details to optimize instruction selection and \r\nscheduling, register allocation and spilling, etc. Today, this trend is \r\ncontinuing with the popularity of easy-to-use environments like Java, Visual \r\nBasic, and Delphi. The emphasis in the tools industry is shifting from code \r\nefficiency to rapid application development with wizards that automatically \r\ngenerate scaffolding or framework code. Virtual machine environments with \r\njust-in-time compilation [Adl-Tabatabai&nbsp;96, Arnold&nbsp;&amp; \r\nGosling&nbsp;96] extend the programmer&#8217;s insulation from processor architecture \r\ndetails, delaying that binding until run time.</FONT></P>\r\n<P><FONT face=Arial size=4><B>What would such a system be like?</B></FONT></P>\r\n<P><FONT size=2>Given a distributed system with the properties described above, \r\nhow might it function in practice? In this section, we present several scenarios \r\nthat highlight the major aspects of our position.</FONT></P>\r\n<P><FONT face=Arial><B><I>A New Machine</I></B></FONT></P>\r\n<P><FONT size=2>A user purchases and installs a new personal computer or \r\nworkstation. The hardware vendor has done a good job with the cables and \r\nconnectors, so plugging the system together is easy. The user plugs the power \r\nand network cables into the wall and flips the power switch. From the moment \r\nthat a boot ROM, or perhaps a boot loader on disk, downloads code from the \r\nnetwork, the new machine joins the Millennium system. The user has full access \r\nto Millennium with no human-managed configuration activities required. \r\nMillennium evaluates the hardware resources of the new computing device that it \r\nhas acquired and starts to shift computations and data in response.</FONT></P>\r\n<P><FONT face=Arial><B><I>A New Network</I></B></FONT></P>\r\n<P><FONT size=2>An administrator sets up a new office network. After connecting \r\nthe various computers, links, and routers, the network is initially quiescent. \r\nThe administrator inserts a Millennium installation DVD disk into one of the \r\nmachines and the system propagates across the network. After evaluating the \r\nnetwork topology and hardware resources, Millennium might suggest that one of \r\nthe more powerful machines (a \"server\") be moved to a different network location \r\nfor best performance. At some point, the administrator connects the office \r\nnetwork to the Internet, and the office instantiation of the Millennium system \r\nmerges with the worldwide system.</FONT></P>\r\n<P><FONT face=Arial><B><I>Hardware Failure</I></B></FONT></P>\r\n<P><FONT size=2>An office computer goes down&#8212;perhaps a power supply has burned \r\nout. The Millennium system reconfigures around the missing machine. While the \r\ncomputer still ran, computations and data stored on it were either automatically \r\nreplicated to other systems or logged so that they could be rerun or recomputed. \r\nAt the time of the failure, Millennium identifies unique state that was not \r\nreplicated and must be reconstructed and initiates those computations \r\nautomatically. In general, users may detect a hesitation as the system moves or \r\nrecreates data they attempt to access, but otherwise they are unaware of the \r\nchange. An interactive user of the failed machine shifts to another machine and \r\nresumes work immediately or simply plugs in a replacement.</FONT></P>\r\n<P><FONT face=Arial><B><I>Web Service</I></B></FONT></P>\r\n<P><FONT size=2>A little-known web site suddenly achieves popularity, perhaps \r\nwith a link from Cool Site of the Day<SUP>SM</SUP> or a mention in a prominent \r\nnews story. Word of mouth spreads, and soon the web site&#8217;s servers are \r\noverwhelmed. Or rather, would have been overwhelmed except that heuristics in \r\nthe Millennium system had noticed the new link and already started replicating \r\nthe site for increased availability. Monitored traffic increases confirm the \r\nsituation and soon the site&#8217;s data has been \"pre-cached\" across the Internet. As \r\nthe site&#8217;s usage drops over the following weeks, Millennium reallocates \r\nresources to meet new demands.</FONT></P>\r\n<P><FONT face=Arial><B><I>Distributed Programming</I></B></FONT></P>\r\n<P><FONT size=2>Consider a simple fragment of pseudo-code:</FONT></P>\r\n<BLOCKQUOTE>\r\n  <P><FONT face=\"Courier New\" size=2>for (p = first(S); p not null; p = \r\n  next(S))<BR>if (p-&gt;age == 18 and p-&gt;height &lt; 6 and p-&gt;weight &lt; \r\n  180)<BR>count++;</FONT></P></BLOCKQUOTE>\r\n<P><FONT size=2>When executed in a distributed environment, the most efficient \r\nstrategy for code like this is unclear: Should code or data be replicated or \r\nmoved? Should loop iterations be executed in parallel? And what happens to error \r\nhandling? In general, making such decisions requires knowledge of network and \r\nsystem parameters plus knowledge of current conditions.</FONT></P>\r\n<P><FONT size=2>Millennium network operations intrinsically carry code to \r\nexecute remotely, but the programmer does not deal with this explicitly. Instead \r\nthe Millennium system automatically and dynamically exploits locality and \r\nconcurrency opportunities. In the example code fragment, we believe that it is \r\nfeasible for compiler techniques to identify the conditional test as code that \r\nshould execute at the object </FONT><FONT face=\"Courier New\" \r\nsize=3>p</FONT><FONT size=2>&#8217;s location, in most circumstances. In more \r\ncomplicated scenarios, variations at run-time make it desirable to perform these \r\noptimizations dynamically or just-in-time.</FONT></P>\r\n<P><FONT face=Arial size=4><B>Related Work</B></FONT></P>\r\n<P><FONT size=2>Several current projects share some of our goals or \r\ndirections.</FONT></P>\r\n<P><FONT size=2>The WebOS project [Vahdat&nbsp;et&nbsp;al.&nbsp;96, \r\nVahdat&nbsp;et&nbsp;al.&nbsp;97] addresses the goal of bringing distributed \r\ncomputing to the World Wide Web. The heart of the WebOS system is WebFS, a \r\nglobal file system. WebFS provides secure cache-coherent access to data. WebOS \r\nalso includes a remote execution service. WebOS can be used to build highly \r\navailable and self-tuning web services.</FONT></P>\r\n<P><FONT size=2>The Inferno&#8482; system [Lucent&nbsp;96] integrates an operating \r\nsystem and language environment with the goal of making it easier to create \r\ndistributed services. Like Java [Arnold&nbsp;&amp;&nbsp;Gosling&nbsp;96], \r\nInferno creates a virtual-machine environment for applications. However, Inferno \r\nalso includes network protocols and services for distributed programming and a \r\nstand-alone implementation suitable for minimal hardware environments. (Sun is \r\nmoving Java in this direction with the development of JavaOS \r\n[Mitchell&nbsp;96].)</FONT></P>\r\n<P><FONT size=2>The Globe project [Steen&nbsp;96, \r\nHomburg&nbsp;et&nbsp;al.&nbsp;96] investigates distributed shared objects as a \r\ntechnique for building large-scale distributed systems. Local object \r\nrepresentatives hide details like replication and mobility. Local objects have a \r\nstandard internal structure that makes it easier to reuse code components. One \r\nof Globe&#8217;s major features is a hierarchical distributed location service that \r\nadapts dynamically to different usage patterns.</FONT></P>\r\n<P><FONT size=2>Legion [Grimshaw&nbsp;et&nbsp;al.&nbsp;97] proposes using an \r\nextensible object model to provide a single-system model for a worldwide network \r\nof computers. Legion emphasizes high-performance parallel computing. It supports \r\nlegacy codes by encapsulating them in Legion-style object oriented wrappers. \r\nLegion automatically manages object replication and migration and supplies a \r\nsingle, persistent, global name space.</FONT></P>\r\n<P><FONT face=Arial size=4><B>Conclusion</B></FONT></P>\r\n<P><FONT size=2>We have described our goals for a new distributed operating \r\nsystem. Improvements in hardware and networking technology, coupled with \r\ncontinuing operating system and programming language advances, enable the \r\ncreation of an operating system that raises the level of abstraction presented \r\nto its applications. The operating system should provide seamless distribution, \r\nworldwide scalability, fault-tolerance, self-tuning, self-configuration, \r\nsecurity, and resource controls.</FONT></P>\r\n<P><FONT face=Arial size=4><B>References</B></FONT></P>\r\n<P><FONT size=2>[Adl-Tabatabai&nbsp;96] Ali-Reza Adl-Tabatabai, Geoff Lnagdale, \r\nSteven Lucco and Robert Wahbe. \"Efficient and Language-Independent Mobile \r\nPrograms.\" In <I>Proceedings of the ACM SIGPLAN&nbsp;&#8216;96 Conference on \r\nProgramming Language Design and Implementation</I>, pp. 127&#8211;136, \r\nMay&nbsp;1996.</FONT></P>\r\n<P><FONT size=2>[Anderson&nbsp;et&nbsp;al.&nbsp;96] T. Anderson, M. Dahlin, J. \r\nNeefe, D. Roselli, D. Patterson, and R. Wang. \"Serverless Network File Systems.\" \r\n<I>ACM Transactions on Computer Systems</I>, 14(1), \r\nFebruary&nbsp;1996.</FONT></P>\r\n<P><FONT size=2>[Arnold&nbsp;&amp;&nbsp;Gosling&nbsp;96] Ken Arnold and James \r\nGosling. The Java Programming Language. Addison-Wesley, 1996.</FONT></P>\r\n<P><FONT size=2>[Ferreira&nbsp;&amp;&nbsp;Shapiro&nbsp;94] Paulo Ferreira and \r\nMarc Shapiro. \"Garbage Collection and DSM Consistency.\" In <I>Proceedings of the \r\nFirst Symposium on Operating Systems Design and Implementation</I>, Monterey, \r\nCalifornia, November 1994.</FONT></P>\r\n<P><FONT size=2>[Geist&nbsp;et&nbsp;al.&nbsp;94] A. Geist, A. Beguelin, J. \r\nDongarra, W. Jiang, R. Manchek, and V. Sunderam. PVM: Parallel Virtual Machine&#8212;A \r\nUsers' Guide and Tutorial for Networked Parallel Computing, Scientific and \r\nEngineering Series, MIT Press, 1994.</FONT></P>\r\n<P><FONT size=2>[Grimshaw&nbsp;et&nbsp;al.&nbsp;97] A. Grimshaw, W. Wulf, and \r\nthe Legion Team. \"The Legion Vision of a Worldwide Virtual Computer.\" \r\n<I>Communications of the ACM</I>, 40(1), January 1997.</FONT></P>\r\n<P><FONT size=2>[Homburg&nbsp;et&nbsp;al.&nbsp;96] Philip Homburg, Maarten van \r\nSteen, and Andrew S. Tanenbaum. \"An Architecture for a Wide Area Distributed \r\nSystem.\" In <I>Proceedings of the Seventh ACM SIGOPS European Workshop</I>, \r\nConnemara, Ireland, September 1996.</FONT></P>\r\n<P><FONT size=2>[Kistler&nbsp;&amp;&nbsp;Satya&nbsp;92] J. J. Kistler and M. \r\nSatyanarayanan. \"Disconnected Operation in the Coda File System.\" <I>ACM \r\nTransactions on Computer Systems</I>, 10(1):3&#8211;25, February 1992.</FONT></P>\r\n<P><FONT size=2>[Livny&nbsp;95] M. Livny. \"The Condor Distributed Processing \r\nSystem.\" <I>Dr. Dobbs Journal</I>, pp. 40&#8211;58, February&nbsp;1995.</FONT></P>\r\n<P><FONT size=2>[Lucent&nbsp;96] Lucent Technologies. \"Inferno: la Commedia \r\nInterattiva.\" </FONT><A target=_top \r\nhref=\"http://inferno.lucent.com/inferno/infernosum.html\"><FONT \r\nsize=2>http://inferno.lucent.com/inferno/infernosum.html</FONT></A><FONT \r\nsize=2>,&nbsp;1996.</FONT></P>\r\n<P><FONT size=2>[Mitchell&nbsp;96] Jim Mitchell. \"JavaOS: Back to the Future.\" \r\nInvited talk at the Second Symposium on Operating Systems Design and \r\nImplementation, Seattle, Washington, October 1996.</FONT></P>\r\n<P><FONT size=2>[Neefe&nbsp;et&nbsp;al.&nbsp;96] J. Neefe, D. Roselli, R. Wang, \r\nT. Anderson, and M. Dahlin. \"Improving the Performance of Log Structured File \r\nSystems.\" </FONT><A target=_top \r\nhref=\"http://http.cs.berkeley.edu/~neefe/papers/osdi_submit.ps\"><FONT \r\nsize=2>http://http.cs.berkeley.edu/~neefe/papers/osdi_submit.ps</FONT></A><FONT \r\nsize=2>, 1996.</FONT></P>\r\n<P><FONT size=2>[Rodeheffer &amp; Schroeder&nbsp;91] Thomas L. Rodeheffer and \r\nMichael D. Schroeder. \"Automatic Reconfiguration in Autonet.\" In <I>Proceedings \r\nof the Thirteenth ACM Symposium on Operating Systems Principles</I>, Pacific \r\nGrove, California, pp.&nbsp;183&#8211;197, October 1991.</FONT></P>\r\n<P><FONT size=2>[Steen&nbsp;96] Maarten van Steen. \"The GLOBE Project.\" \r\n</FONT><A target=_top \r\nhref=\"http://www.cs.vu.nl/~steen/globe/\">http://www.cs.vu.nl/~steen/globe/</A> \r\n<FONT size=2>, 1996.</FONT></P>\r\n<P><FONT size=2>[Tennenhouse&nbsp;&amp;&nbsp;Wetherall&nbsp;96] D. Tennenhouse \r\nand D. Wetherall. \"Towards an Active Network Architecture.\" ACM SIGCOMM Computer \r\nCommunication Review, pp. 5&#8211;18, April 1996.</FONT></P>\r\n<P><FONT size=2>[Thomson&nbsp;&amp;&nbsp;Narten&nbsp;96] S. Thomson and T. \r\nNarten. \"IPv6 Stateless Address Autoconfiguration.\" IETF Request for Comments \r\n1971, August 1996.</FONT></P>\r\n<P><FONT size=2>[Vahdat&nbsp;et&nbsp;al.&nbsp;96] Amin Vahdat, Michael Dahlin, \r\nand Thomas Anderson. \"Turning the Web Into a Computer.\" </FONT><A target=_top \r\nhref=\"http://now.cs.berkeley.edu/WebOS/webos.ps\"><FONT \r\nsize=2>http://now.cs.berkeley.edu/WebOS/webos.ps</FONT></A><FONT size=2>, \r\n1996.</FONT></P>\r\n<P><FONT size=2>[Vahdat&nbsp;et&nbsp;al.&nbsp;97] Amin Vahdat, Paul Eastham, \r\nChad Yoshikawa, Michael Dahlin, and Thomas Anderson. \"WebOS: Software Support \r\nfor Scalable Web Services.\" Submitted to the <I>Sixth Workshop on Hot Topics in \r\nOperating Systems</I>, Chatham, Massachussetts, May 1997.</FONT></P>\r\n<P><FONT size=2>[Wilkes&nbsp;et&nbsp;al.&nbsp;96] J. Wilkes, R. Golding, C. \r\nStaelin, and T. Sullivan. \"The HP AutoRAID Hierarchical Storage System.\" <I>ACM \r\nTransactions on Computer Systems</I>, 14(1): 108&#8211;136, \r\nFebruary&nbsp;1996.</FONT></P><!--Do not edit below this line.  Remember to delete comments. --></TD></TR></TABLE></FONT>\r\n<P>\r\n<TABLE cellSpacing=0 cellPadding=0 width=615 border=0>\r\n  <TBODY>\r\n  <TR>\r\n    <TD vAlign=top>\r\n      <CENTER><FONT face=\"Verdana, Arial Black, Helvetica\"><A \r\n      href=\"http://research.microsoft.com/research/os/Millennium/mgoals.html#top\"><FONT \r\n      size=1>Back to top</FONT></A> \r\n      <P><A href=\"http://research.microsoft.com/default.htm\"><FONT \r\n      size=1>Home</FONT></A> | <A \r\n      href=\"http://research.microsoft.com/scripts/main/research.asp\"><FONT \r\n      size=1>Research Areas</FONT></A> | <A \r\n      href=\"http://research.microsoft.com/people/\"><FONT \r\n      size=1>People</FONT></A> | <A \r\n      href=\"http://research.microsoft.com/aboutmsr/\"><FONT size=1>About \r\n      MSR</FONT></A> | <A href=\"http://research.microsoft.com/search/\"><FONT \r\n      size=1>Search</FONT></A> | <A \r\n      href=\"http://research.microsoft.com/demos.htm\"><FONT \r\n      size=1>Downloads</FONT></A> | <A \r\n      href=\"http://research.microsoft.com/sitemap.htm\"><FONT \r\n      size=1>Sitemap</FONT></A> </CENTER></FONT></P></TD></TR></TBODY></TABLE>\r\n<P><IMG height=55 \r\nalt=\"Copyright 1999 Microsoft Corporation.  Please address comments on this web site  to msrwww@microsoft.com. This server contains links to servers not under the control of Microsoft Corporation.\" \r\nsrc=\"\" width=630 border=0> </P></BODY></HTML>\r\n", "id": 32367.0}