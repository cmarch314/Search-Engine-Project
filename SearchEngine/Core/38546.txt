{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Box intersection d Box d NT int D IdPolicy Definition Box intersection d Box d NT int D IdPolicy is a generic iso oriented bounding box in dimension D It provides in each dimension an interval with lower and upper endpoints represented with the number type NT This class is designed to work smoothly with the algorithms for intersecting sequences of iso oriented boxes For degeneracy handling the boxes need to provide a unique id number The policy parameter IdPolicy offers several choices The template parameters have to comply with the following requirements NT number type for the box boundaries needs to be a model of the Assignable and the LessThanComparable concept int D the dimension of the box IdPolicy specifies how the id number will be provided Can be one of the following types where ID EXPLICIT is the default for this parameter ID NONE no id number is provided Can be useful if Box d is used as a base class for a different implementation of id numbers than the ones provided here ID EXPLICIT the id number is stored explicitly in the box and automatically created and assigned at construction time of the box Note that copying a box copy constructor and assignment does not create a new id number but keeps the old one which is the behavior needed by the CGAL box self intersection algorithm This is therefore the safe default implementation ID FROM BOX ADDRESS casts the address of the box into a std ptrdiff t to create the id number Works fine if the intersection algorithms work effectively with pointers to boxes but not in the case where the algorithms work with box values because the algorithms modify the order of the boxes and the CGAL box self intersection algorithm creates copies of the boxes that would not have identical id numbers include CGAL Box intersection d Box d h and also automatically with include CGAL box intersection d h Is Model for the Concept BoxIntersectionBox d Types Box intersection d Box d NT int D IdPolicy NT number type to represent the box boundaries Allowed are the builtin types int unsigned int float and double typedef std size t ID type for the box id number Creation Box intersection d Box d NT int D IdPolicy box Default constructor No particular initialization Box intersection d Box d NT int D IdPolicy box bool complete initializes to the complete or the empty space If empty all interval starting end points will be set to positive negative infinity Box intersection d Box d NT int D IdPolicy box NT lo D NT hi D initializes the box intervals to lo i hi i i D Precondition lo i hi i for i D Box intersection d Box d NT int D IdPolicy box Bbox 2 bbox constructs from bbox exists iff D 2 and NT double Box intersection d Box d NT int D IdPolicy box Bbox 3 bbox constructs from bbox exists iff D 3 and NT double Modifiers void box init bool complete false initializes to the complete or the empty space If empty all interval starting end points will be set to positive negative infinity void box extend NT point D extend box to contain the old box and point Access Functions int Box d dimension returns D the dimension of the box std size t box id returns a unique box id see the IdPolicy template parameter above for the different choices Does not exist if ID NONE has been chosen for the IdPolicy NT box min coord int d returns the lower boundary in dimension d d D NT box max coord int d returns the upper boundary in dimension d d D Bbox 2 box bbox returns the bounding box iff D 2 and NT double Bbox 3 box bbox returns the bounding box iff D 3 and NT double See Also CGAL box intersection d CGAL box self intersection d CGAL box intersection all pairs d CGAL box self intersection all pairs d CGAL Box intersection d Box with handle d NT int D Handle IdPolicy CGAL Box intersection d Box traits d BoxHandle BoxIntersectionTraits d Next Box intersection d Box traits d BoxHandle Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Box_intersection_d_ref/Class_Box_intersection_d--Box_d.html", "title": "box_intersection_d::box_d&lt;nt,int d,idpolicy&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Box_intersection_d_ref/Box_d.tex' -->\n<html> <head>  \n<title>Box_intersection_d::Box_d&lt;NT,int D,IdPolicy&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1243\"></A>\n\n<A NAME=\"Cross_link_anchor_1244\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1319\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Box_intersection_d::Box_d<NT,int D,IdPolicy>\"></A>\n<h2><I>CGAL::Box_intersection_d::Box_d&lt;NT,int D,IdPolicy&gt;</I></h2>\n\n\n<H3>Definition</H3>\n<P>\n\n<I><A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt;</I> is a generic iso-oriented bounding box in dimension <MATH><I>D</I></MATH>.\nIt provides in each dimension an interval with lower and upper\nendpoints represented with the number type <I>NT</I>.  This class is\ndesigned to work smoothly with the algorithms for intersecting\nsequences of iso-oriented boxes. For degeneracy handling, the boxes\nneed to provide a unique <I>id</I>-number. The policy parameter\n<I>IdPolicy</I> offers several choices. The template parameters have to\ncomply with the following requirements:\n<P>\n\n<UL>\n  <LI><I>NT</I>: number type for the box boundaries, needs to be a model\n    of the <I>Assignable</I> and the <I>LessThanComparable</I> concept.\n  <LI><I>int D</I>: the dimension of the box.\n  <LI><I>IdPolicy</I>: specifies how the <I>id</I>-number will be\n    provided. Can be one of the following types, where\n    <I>ID_EXPLICIT</I> is the default for this parameter:\n    <UL>\n      <LI><I>ID_NONE</I>: no <I>id</I>-number is provided. Can be useful\n        if <I>Box_d</I> is used as a base class for a different\n        implementation of <I>id</I>-numbers than the ones provided\n        here.\n      <LI><I>ID_EXPLICIT</I>: the <I>id</I>-number is stored explicitly in\n        the box and automatically created and assigned at construction\n        time of the box. Note that copying a box (copy-constructor and\n        assignment) does not create a new <I>id</I>-number but keeps\n        the old one, which is the behavior needed by the\n        <I>CGAL::box_self_intersection</I> algorithm. This is therefore\n        the safe default implementation. \n      <LI><I>ID_FROM_BOX_ADDRESS</I>: casts the address of the box into a\n        <I>std::ptrdiff_t</I> to create the <I>id</I>-number. Works fine \n        if the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> algorithms work effectively with pointers\n        to boxes, but not in the case where the algorithms work with\n        box values, because the algorithms modify the order of the\n        boxes, and the <I>CGAL::box_self_intersection</I> algorithm\n        creates copies of the boxes that would not have identical\n        <I>id</I>-numbers.  \n    </UL>\n</UL>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Box_intersection_d/Box_d.h\">CGAL/Box_intersection_d/Box_d.h</A>&gt;</I>\n<P>\n\n<BR>\n\nand also automatically with<BR>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/box_intersection_d.h\">CGAL/box_intersection_d.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3>\n<P>\n\n<I><A HREF=\"Concept_BoxIntersectionBox_d.html#Cross_link_anchor_1241\">BoxIntersectionBox_d</A></I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt;::NT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    number type to represent the box\n  boundaries. Allowed  are the builtin types <I>int</I>, <I>unsigned   int</I>, <I>float</I>, and <I>double</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_ID\"></A>\n<A NAME=\"Typedef_ID\"></A>\ntypedef std::size_t\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ID;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    type for the box <I>id</I>-number.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt; box;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Default constructor. No particular initialization.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt; box ( bool complete);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    initializes to the complete or \n  the empty space. If empty, all interval starting(end) points will be\n  set to positive(negative) infinity.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt; box ( NT lo[D],  NT hi[D]);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    initializes the box\n  intervals to [<I>lo[i]</I>,<I>hi[i]</I>], <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; D</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>lo[i]</I> <MATH><I>&lt;</I></MATH> <I>hi[i]</I> for <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; D</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt; box (  <A HREF=\"../Kernel_23_ref/Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A> bbox);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs from bbox,\n  exists iff <MATH><I>D=2</I></MATH> and <I>NT</I><MATH><I>  <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH><I>double</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Box_intersection_d--Box_d.html#Cross_link_anchor_1244\">Box_intersection_d::Box_d</A>&lt;NT,int D,IdPolicy&gt; box (  <A HREF=\"../Kernel_23_ref/Class_Bbox_3.html#Cross_link_anchor_62\">Bbox_3</A> bbox);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs from bbox,\n  exists iff <MATH><I>D=3</I></MATH> and <I>NT</I><MATH><I>  <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH><I>double</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Modifiers</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_init6_bool_complete_=_false9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    box.init ( bool complete = false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    initializes to the complete or \n  the empty space. If empty, all interval starting(end) points will be\n  set to positive(negative) infinity.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_extend6NT_point6D99;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    box.extend ( NT point[D])\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    extend <I>box</I> to contain the\n  old <I>box</I> and <I>point</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_Box_d::dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Box_d::dimension ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <MATH><I>D</I></MATH>, the dimension of the box.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_id69;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    box.id ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a unique box id, see the\n  <I>IdPolicy</I> template parameter above for the different\n  choices. Does not exist if <I>ID_NONE</I> has been chosen for the\n  <I>IdPolicy</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_NT_min_coord6_int_d9_const;\"></A>\nNT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    box.min_coord ( int d)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the lower boundary in dimension <I>d</I>, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> </I></MATH><I>d</I><MATH><I> &lt; D</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_NT_max_coord6_int_d9_const;\"></A>\nNT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    box.max_coord ( int d)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the upper boundary in dimension <I>d</I>, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> </I></MATH><I>d</I><MATH><I> &lt; D</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Bbox_2__bbox69_const;\"></A>\n <A HREF=\"../Kernel_23_ref/Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    box.bbox ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the bounding box iff\n  <MATH><I>D=2</I></MATH> and <I>NT</I><MATH><I>  <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH><I>double</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Bbox_3__bbox69_const;\"></A>\n <A HREF=\"../Kernel_23_ref/Class_Bbox_3.html#Cross_link_anchor_62\">Bbox_3</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    box.bbox ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the bounding box iff\n  <MATH><I>D=3</I></MATH> and <I>NT</I><MATH><I>  <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH><I>double</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_box_intersection_d.html#Cross_link_anchor_1233\">CGAL::box_intersection_d</A></I><BR>\n\n<I><A HREF=\"Function_box_self_intersection_d.html#Cross_link_anchor_1237\">CGAL::box_self_intersection_d</A></I><BR>\n\n<I><A HREF=\"Function_box_intersection_all_pairs_d.html#Cross_link_anchor_1235\">CGAL::box_intersection_all_pairs_d</A></I><BR>\n\n<I><A HREF=\"Function_box_self_intersection_all_pairs_d.html#Cross_link_anchor_1239\">CGAL::box_self_intersection_all_pairs_d</A></I>\n<P>\n\n<I><A HREF=\"Class_Box_intersection_d--Box_with_handle_d.html#Cross_link_anchor_1247\">CGAL::Box_intersection_d::Box_with_handle_d</A>&lt;NT, int D, <A HREF=\"../Handle_ref/Concept_Handle.html#Cross_link_anchor_1663\">Handle</A>, IdPolicy&gt;</I>\n<P>\n\n<I><A HREF=\"Class_Box_intersection_d--Box_traits_d.html#Cross_link_anchor_1245\">CGAL::Box_intersection_d::Box_traits_d</A>&lt;BoxHandle&gt;</I><BR>\n\n<I><A HREF=\"Concept_BoxIntersectionTraits_d.html#Cross_link_anchor_1242\">BoxIntersectionTraits_d</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Box_intersection_d--Box_traits_d.html\"><I>Box_intersection_d::Box_traits_d&lt;BoxHandle&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_58!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38546.0}