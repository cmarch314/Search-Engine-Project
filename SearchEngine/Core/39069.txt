{"text": "Navigation Up Table of Contents Bibliography Index Title Page ConvexHullTraits 2 Definition All convex hull and extreme point algorithms provided in CGAL are parameterized with a traits class Traits which defines the primitives objects and predicates that the convex hull algorithms use ConvexHullTraits 2 defines the complete set of primitives required in these functions The specific subset of these primitives required by each function is specified with each function Types ConvexHullTraits 2 Point 2 The point type on which the convex hull functions operate ConvexHullTraits 2 Equal 2 Binary predicate object type comparing Point 2s Must provide bool operator Point 2 p Point 2 q where true is returned iff p xy q false otherwise ConvexHullTraits 2 Less xy 2 Binary predicate object type comparing Point 2s lexicographically Must provide bool operator Point 2 p Point 2 q where true is returned iff p xy q We have p xyq iff px qx or px qx and py qy where px and py denote x and y coordinate of point p respectively ConvexHullTraits 2 Less yx 2 Same as Less xy 2 with the roles of x and y interchanged ConvexHullTraits 2 Left turn 2 Predicate object type that must provide bool operator Point 2 p Point 2 q Point 2 r which returns true iff r lies to the left of the oriented line through p and q ConvexHullTraits 2 Less signed distance to line 2 Predicate object type that must provide bool operator Point 2 p Point 2 q Point 2 r Point 2 s which returns true iff the signed distance from r to the line lpq through p and q is smaller than the distance from s to lpq It is used to compute the point right of a line with maximum unsigned distance to the line The predicate must provide a total order compatible with convexity i e for any line segment s one of the endpoints of s is the smallest point among the points on s with respect to the order given by Less signed distance to line 2 ConvexHullTraits 2 Less rotate ccw 2 Predicate object type that must provide bool operator Point 2 e Point 2 p Point 2 q where true is returned iff a tangent at e to the point set e p q hits p before q when rotated counterclockwise around e Ties are broken such that the point with larger distance to e is smaller Creation Only a copy constructor is required ConvexHullTraits 2 traits t Operations The following member functions to create instances of the above predicate object types must exist Equal 2 traits equal 2 object Less xy 2 traits less xy 2 object Less yx 2 traits less yx 2 object Less signed distance to line 2 traits less signed distance to line 2 object Less rotate ccw 2 traits less rotate ccw 2 object Left turn 2 traits left turn 2 object Has Models CGAL Convex hull constructive traits 2 R CGAL Convex hull projective xy traits 2 Point 3 CGAL Convex hull projective xz traits 2 Point 3 CGAL Convex hull projective yz traits 2 Point 3 CGAL Convex hull traits 2 R See Also IsStronglyConvexTraits 3 Next Convex hull constructive traits 2 R Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_2_ref/Concept_ConvexHullTraits_2.html", "title": "convexhulltraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_2_ref/ConvexHullTraits_2.tex' -->\n<html> <head>  \n<title>ConvexHullTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_610\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_498\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_ConvexHullTraits_2\"></A>\n<h2><I>ConvexHullTraits_2</I></h2>\n\n\n\n     \n     \n     \n<A NAME=\"Index_anchor_499\"></A> \n\n<A NAME=\"Index_anchor_500\"></A> \n\n   \n \n    \n\n\n     \n     \n     \n<A NAME=\"Index_anchor_501\"></A> \n\n<A NAME=\"Index_anchor_502\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAll convex hull and extreme point algorithms provided in C<SMALL>GAL</SMALL> are\nparameterized with a traits class <I>Traits</I>, which defines the\nprimitives (objects and predicates) that the convex hull algorithms use.\n<I><A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A></I> defines the complete set of primitives required in these\nfunctions.  The specific subset of these primitives required by each function\nis specified with each function.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The point type on which the convex hull functions operate.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Equal_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Binary predicate object type comparing <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>s.  Must provide \n        <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)</I> where <I>true</I>\n        is returned iff <MATH><I>p ==<SUB>xy</SUB> q</I></MATH>, false otherwise.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Less_xy_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Binary predicate object type comparing <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>s\n        lexicographically.  Must provide \n        <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)</I> where <I>true</I>\n        is returned iff <MATH><I>p &lt;<SUB>xy</SUB> q</I></MATH>.\n        We have <MATH><I>p&lt;<SUB>xy</SUB>q</I></MATH>, iff <MATH><I>p<SUB>x</SUB> &lt; q<SUB>x</SUB></I></MATH> or <MATH><I>p<SUB>x</SUB> = q<SUB>x</SUB></I></MATH> and <MATH><I>p<SUB>y</SUB> &lt; q<SUB>y</SUB></I></MATH>,\n        where <MATH><I>p<SUB>x</SUB></I></MATH> and <MATH><I>p<SUB>y</SUB></I></MATH> denote <MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> coordinate of point <MATH><I>p</I></MATH>,\n        respectively.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Less_yx_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Same as <I>Less_xy_2</I> with the roles of <MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> interchanged.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Left_turn_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that must provide\n        <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> r)</I>, which\n        returns <I>true</I> iff <I>r</I> lies to the left of the\n        oriented line through <I>p</I> and <I>q</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Less_signed_distance_to_line_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that must provide \n        <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q,                               <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> r,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> s)</I>, which returns <I>true</I> iff\n        the signed distance from <MATH><I>r</I></MATH> to the line <MATH><I>l<SUB>pq</SUB></I></MATH> through <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>\n        is smaller than the distance from <MATH><I>s</I></MATH> to <MATH><I>l<SUB>pq</SUB></I></MATH>. It is used to\n        compute the point right of a line with maximum unsigned distance to\n        the line. The predicate must provide a total order compatible\n        with convexity, <I>i.e.</I>, for any line segment <MATH><I>s</I></MATH> one of the \n        endpoints \n        of <MATH><I>s</I></MATH> is the smallest point among the points on <MATH><I>s</I></MATH>, with respect to\n        the order given by <I>Less_signed_distance_to_line_2</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>::Less_rotate_ccw_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that must provide \n        <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> e, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)</I>,\n        where <I>true</I> is returned iff a tangent at <MATH><I>e</I></MATH> to the point set\n        <MATH><I>{e,p,q}</I></MATH> hits <MATH><I>p</I></MATH> before <MATH><I>q</I></MATH> when rotated counterclockwise around \n        <MATH><I>e</I></MATH>.\n        Ties are broken such that the point with larger distance to <MATH><I>e</I></MATH>\n        is smaller!\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\nOnly a copy constructor is required.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A> traits (  &amp; t);\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe following member functions to create instances of the above predicate\nobject types must exist.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Equal_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.equal_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Less_xy_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_xy_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Less_yx_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_yx_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    Less_signed_distance_to_line_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_signed_distance_to_line_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Less_rotate_ccw_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_rotate_ccw_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Left_turn_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.left_turn_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Convex_hull_constructive_traits_2.html#Cross_link_anchor_611\">CGAL::Convex_hull_constructive_traits_2</A>&lt;R&gt;</I><BR>\n\n<I><A HREF=\"Class_Convex_hull_projective_xy_traits_2.html#Cross_link_anchor_613\">CGAL::Convex_hull_projective_xy_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;</I><BR>\n\n<I><A HREF=\"Class_Convex_hull_projective_xz_traits_2.html#Cross_link_anchor_615\">CGAL::Convex_hull_projective_xz_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;</I><BR>\n\n<I><A HREF=\"Class_Convex_hull_projective_yz_traits_2.html#Cross_link_anchor_617\">CGAL::Convex_hull_projective_yz_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;</I><BR>\n\n<I><A HREF=\"Class_Convex_hull_traits_2.html#Cross_link_anchor_619\">CGAL::Convex_hull_traits_2</A>&lt;R&gt;</I><BR>\n\n\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"../Convex_hull_3_ref/Concept_IsStronglyConvexTraits_3.html#Cross_link_anchor_642\">IsStronglyConvexTraits_3</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Convex_hull_constructive_traits_2.html\"><I>Convex_hull_constructive_traits_2&lt;R&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39069.0}