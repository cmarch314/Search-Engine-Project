{"text": "Memory Hierarchy with a Variable Block Size The goal of this project is to improve memory hierarchy performance by varying a block size dynamically within a given range of allowed sizes This allows for better utilization of memory at a given level in the hierarchy reduces conflicts and allows a better control of memory traffic The hierarchy behavior can be optimized for miss rate or traffic This work was started in the Fall of 1998 and is supported in part by DARPA via the AMRM project The main idea is to vary the block size dynamically and adapt it to application behavior as the program executes The project is investigating several approaches to accomplish this which are briefly described below The project has initially concentrated on varying the cache block size Hardware adaptable cache block size This work investigates the affect of block size adaptivity in the L1 and L2 caches The block size can be changed by hardware in one of the two possible ways 1 on block replacement for each block individially or 2 for all blocks during a specified time interval In either case the past behavior is used to decide on the next block size The use of individual words within a block as well as the presence of an adjecent block of the same size are used to indicate whether to grow or shrink the block by a factor of 2x Block size is allowed to vary from 8B to 256B for L1 caches and 64B to 512B for the L2 caches Significant performance improvement or traffic reduction can be achieved exceeding the performance with optimal fixed block size Compiler contolled block size change In this case the decision to change the block size is made by software the hardware simply supports multiple sizes and has an interface allowing the software to change it We have investigated this approach to adapting the size using profiling to select the appropriate size in a variety of ways We are currently investigating the use of compile time analysis instead of profiling to make the block size selection The compiler is currently capable of generating code using profiling or user supplied information to run a program on our prototype hardware see below A prototype memory hierarchy We have designed a board above bare and under test to implement some of the above ideas The board consists of an L1 cache memory and a PCI interface It can be used with any system with a PCI bus The hierarchy control is implemented in an FPGA and can be changed to support other adaptation algorithms The L1 cache has a software contrallable block size as well as other paramemters such as write policy size A program can be compiled to run out of this memory hierarchy instead of the host memory Current software allows this to be done under Windows NT Current Publications Adapting Cache Line Size to Application Behavior Proceedings of ICS 99 June 1999 Adaptive Line Size Cache Technical Report Nov 1999", "_id": "http://www.ics.uci.edu/~alexv/Adaptive.html", "title": " memory hierarchy with a variable block size ", "html": "\n<!DOCTYPE HTML SYSTEM \"html.dtd\">\n<HTML CHARSET=\"head\">\n<HEAD>   <TITLE> Memory Hierarchy with a Variable Block Size </TITLE>\t</HEAD>\n\n<center>\n<font color=\"cc6655\">\n<BODY>\n<H2> \nMemory Hierarchy with a Variable Block Size \n</H2> \n</font>\n</center>\n\n<p> \nThe goal of this project is to improve memory hierarchy performance by varying a\nblock size dynamically within a given range of allowed sizes.  This allows for better utilization\nof memory at a given level in the hierarchy, reduces conflicts, and allows a\nbetter control of memory traffic.  The hierarchy behavior can be optimized for miss rate or\ntraffic.\n</p> \n<p> \nThis work was started in the Fall of 1998 and is supported in part by DARPA via the\nAMRM project.\n</p> \n<p> \nThe main idea is to vary the block size dynamically and adapt it to application behavior\nas the program executes.  The project is investigating several approaches to accomplish this which\nare briefly described below.  The project has initially concentrated on varying the\ncache block size.\n</p> \n\n<UL>\n<li> <H4> Hardware adaptable cache block size </H4>  \n<p> \nThis work investigates the affect of block-size adaptivity in the L1 and L2 caches.\nThe block size can be changed by hardware in one of the two possible ways: <br>\n1.  on block replacement for each block individially or <br>\n2.  for all blocks during a specified time interval <br> <br>\nIn either case, the past behavior is used to decide on the next block size. The use\nof individual words within a block as well as the presence of an \"adjecent\" block of\nthe same size are used to indicate whether to grow or shrink the block by a factor of 2x.\nBlock size is allowed to vary from 8B to 256B for L1 caches and 64B to 512B for the\nL2 caches. Significant performance improvement or traffic reduction can be achieved,\nexceeding the performance with \"optimal\" fixed block size.\n</p>\n<li> <H4> Compiler-contolled block size change </H4> \n<p> \nIn this case the decision to change the block size is made by software, the hardware simply\nsupports multiple sizes and has an interface allowing the software to change it.  We have\ninvestigated this approach to adapting the size using profiling to select the appropriate\nsize in a variety of ways.  We are currently investigating the use of compile-time\nanalysis instead of profiling to make the block size selection.  <br>  <br>  \nThe compiler is currently capable of generating code using profiling or user supplied\ninformation to run a program on our prototype hardware (see below).\n</p>\n<li> <H4>A prototype memory hierarchy </H4>\n<H4 ALIGN=\"CENTER\"><IMG SRC=\"board2.jpg\" WIDTH=400 HEIGHT=250><IMG SRC=\"board4.jpg\" WIDTH=400 HEIGH\nT=250></H4>\n\n<p> \nWe have designed a board (above, bare and under test) to implement some of the above ideas.\nThe board consists of an L1 cache, memory, and a PCI interface.\nIt can be used with any system with a PCI bus. <br>\nThe hierarchy control is implemented in an FPGA and can be changed to\nsupport other adaptation algorithms. <br>\nThe L1 cache has a software contrallable block size (as well as\nother paramemters such as write policy, size). <br>\nA program can be compiled to run out of this memory hierarchy instead\nof the host memory. Current software allows this to be done under\nWindows NT.\n</p>\n</UL>\n\n<font color=\"cc1111\">\n<BODY><H3> \nCurrent Publications\n</H3> \n</font>\n\n<A HREF=\"http://www.ics.uci.edu/~amrm/doc/ics99.ps\"> Adapting Cache Line Size to Application Behavior </A> Proceedings of ICS'99, June 1999 <br> \n<br>\n<A HREF=\"http://www.ics.uci.edu/~amrm/doc/alc.ps.gz\"> Adaptive Line Size Cache\n</A> Technical Report, Nov. 1999 <br>\n\n<br>\n</BODY></HTML>\n", "id": 8160.0}