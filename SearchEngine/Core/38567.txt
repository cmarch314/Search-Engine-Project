{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL box intersection all pairs d Definition The function box intersection all pairs d computes the pairwise intersecting boxes between two sequences of iso oriented boxes in arbitrary dimension It does so by comparing all possible pairs of boxes and is thus inferior to the fast CGAL box intersection d algorithm on page The sequences of boxes are given with two forward iterator ranges The sequences are not modified For each intersecting pair of boxes a callback function object is called with the two intersecting boxes as argument the first argument is a box from the first sequence the second argument a box from the second sequence The algorithm is interface compatible with the CGAL box intersection d function Similarly we call the value type of the iterators the box handle which is either our box type or a pointer type to our box type A d dimensional iso oriented box is defined as the Cartesian product of d intervals We call the box half open if the d intervals loi hii i d are half open intervals and we call the box closed if the d intervals loi hii i d are closed intervals Note that closed boxes support zero width boxes and they can intersect at their boundaries while non empty half open boxes always have a positive volume and they only intersect iff their interiors overlap The distinction between closed or half open boxes does not require a different representation of boxes just a different interpretation when comparing boxes which is selected with the topology parameter and its two values CGAL Box intersection d HALF OPEN and CGAL Box intersection d CLOSED In addition a box has an unique id number Boxes with equal id number are not reported since they obviously intersect trivially The algorithm uses a traits class of the BoxIntersectionTraits d concept to access the boxes A default traits class is provided that assumes that the box type is a model of the BoxIntersectionBox d concept and that the box handle i e the iterators value type is identical to the box type or a pointer to the box type An important special application of this algorithm is the test for self intersections where the second box sequence is an identical copy of the first sequence including the preserved id number We offer a specialized implementation CGAL box self intersection all pairs for this application include CGAL box intersection d h template class ForwardIterator1 class ForwardIterator2 class Callback void box intersection all pairs d ForwardIterator1 begin1 ForwardIterator1 end1 ForwardIterator2 begin2 ForwardIterator2 end2 Callback callback Box intersection d Topology topology Box intersection d CLOSED Invocation of box intersection with default box traits CGAL Box intersection d Box traits d Box handle where Box handle corresponds to the iterator value type of ForwardIterator1 template class ForwardIterator1 class ForwardIterator2 class Callback class BoxTraits void box intersection all pairs d ForwardIterator1 begin1 ForwardIterator1 end1 ForwardIterator2 begin2 ForwardIterator2 end2 Callback callback BoxTraits box traits Box intersection d Topology topology Box intersection d CLOSED Invocation with custom box traits Requirements ForwardIterator1 and 2 must be forward iterators and both value types must be the same We call this value type Box handle in the following Callback must be of the BinaryFunction concept The Box handle must be convertible to both argument types The return type is not used and can be void The Box handle must be a model of the Assignable concept In addition if the default box traits is used the Box handle must be a class type T or a pointer to a class type T where T must be a model of the BoxIntersectionBox d concept In both cases the default box traits specializes to a suitable implementation BoxTraits must be of the BoxIntersectionTraits d concept See Also CGAL box intersection d CGAL box self intersection d CGAL box self intersection all pairs d CGAL Box intersection d Box traits d BoxHandle BoxIntersectionBox d BoxIntersectionTraits d Implementation The algorithm is trivially testing all pairs and runs therefore in time O nm where n is the size of the first sequence and m is the size of the second sequence Next box self intersection d Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Box_intersection_d_ref/Function_box_intersection_all_pairs_d.html", "title": "box_intersection_all_pairs_d", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Box_intersection_d_ref/box_intersection_all_pairs_d.tex' -->\n<html> <head>  \n<title>box_intersection_all_pairs_d</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1235\"></A>\n\n<A NAME=\"Cross_link_anchor_1236\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1308\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::box_intersection_all_pairs_d\"></A>\n<h2><I>CGAL::box_intersection_all_pairs_d</I></h2>\n\n\n   \n     \n     \n<A NAME=\"Index_anchor_1309\"></A> \n\n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_1310\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_box_intersection_all_pairs_d.html#Cross_link_anchor_1236\">box_intersection_all_pairs_d</A></I> computes the pairwise intersecting boxes\nbetween two sequences of iso-oriented boxes in arbitrary dimension.\nIt does so by comparing all possible pairs of boxes and is thus\ninferior to the fast <I><A HREF=\"Function_box_intersection_d.html#Cross_link_anchor_1233\">CGAL::box_intersection_d</A></I> algorithm on page\n<A HREF=\"Function_box_intersection_d.html#ccRef_CGAL::box_intersection_d\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\n<P>\n\nThe sequences of boxes are given with two forward iterator ranges. The\nsequences are not modified. For each intersecting pair of boxes a\n<I>callback</I> function object is called with the two intersecting\nboxes as argument; the first argument is a box from the first\nsequence, the second argument a box from the second sequence.\n<P>\n\nThe algorithm is interface compatible with the\n<I><A HREF=\"Function_box_intersection_d.html#Cross_link_anchor_1233\">CGAL::box_intersection_d</A></I> function. Similarly, we call the\n<I>value_type</I> of the iterators the <I>box handle</I>, which is\neither our box type or a pointer type to our box type.\n<P>\n\nA <MATH><I>d</I></MATH>-dimensional iso-oriented box is defined as the <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> product\nof <MATH><I>d</I></MATH> intervals. We call the box <I>half-open</I> if the <MATH><I>d</I></MATH>\nintervals <MATH><I>{ [lo<SUB>i</SUB>,hi<SUB>i</SUB>) | 0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; d}</I></MATH> are half-open intervals,\nand we call the box <I>closed</I> if the <MATH><I>d</I></MATH> intervals <MATH><I>{ [lo<SUB>i</SUB>,hi<SUB>i</SUB>]\n| 0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; d}</I></MATH> are closed intervals. Note that closed boxes support\nzero-width boxes and they can intersect at their boundaries, while\nnon-empty half-open boxes always have a positive <A HREF=\"../Kernel_23_ref/Function_volume.html#Cross_link_anchor_269\">volume</A> and they only\nintersect iff their interiors overlap.  The distinction between closed\nor half-open boxes does not require a different representation of\nboxes, just a different interpretation when comparing boxes, which is\nselected with the <I>topology</I> parameter and its two values,\n<I>CGAL::Box_intersection_d::HALF_OPEN</I> and\n<I>CGAL::Box_intersection_d::CLOSED</I>.\n<P>\n\nIn addition, a box has an unique <I>id</I>-number. Boxes with equal\n<I>id</I>-number are not reported since they obviously intersect trivially.\n<P>\n\nThe algorithm uses a traits class of the <I><A HREF=\"Concept_BoxIntersectionTraits_d.html#Cross_link_anchor_1242\">BoxIntersectionTraits_d</A></I>\nconcept to access the boxes. A default traits class is provided that\nassumes that the box type is a model of the <I><A HREF=\"Concept_BoxIntersectionBox_d.html#Cross_link_anchor_1241\">BoxIntersectionBox_d</A></I>\nconcept and that the box handle, i.e., the iterators value type, is\nidentical to the box type or a pointer to the box type.\n<P>\n\nAn important special application of this algorithm is the test for\nself-intersections where the second box sequence is an identical copy\nof the first sequence including the preserved <I>id</I>-number. We\noffer a specialized implementation\n<I>CGAL::box_self_intersection_all_pairs</I> for this application.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/box_intersection_d.h\">CGAL/box_intersection_d.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class ForwardIterator1, class ForwardIterator2, class Callback &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_box_intersection_all_pairs_d6_ForwardIterator1_begin1+_ForwardIterator1_end1+_ForwardIterator2_begin2+_ForwardIterator2_end2+_Callback_callback+_Box_intersection_d::Topology_topology_=_Box_intersection_d::CLOSED9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_box_intersection_all_pairs_d.html#Cross_link_anchor_1236\">box_intersection_all_pairs_d</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator1 begin1,<BR>\n\nForwardIterator1 end1,<BR>\n\nForwardIterator2 begin2,<BR>\n\nForwardIterator2 end2,<BR>\n\nCallback callback,<BR>\n\nBox_intersection_d::Topology topology = Box_intersection_d::CLOSED)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Invocation of box <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> with default box traits\n    <I><A HREF=\"Class_Box_intersection_d--Box_traits_d.html#Cross_link_anchor_1245\">CGAL::Box_intersection_d::Box_traits_d</A>&lt;Box_handle&gt;</I>, where\n    <I>Box_handle</I> corresponds to the iterator value type  of\n    <I>ForwardIterator1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class ForwardIterator1, class ForwardIterator2, class Callback, class BoxTraits &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_box_intersection_all_pairs_d6_ForwardIterator1_begin1+_ForwardIterator1_end1+_ForwardIterator2_begin2+_ForwardIterator2_end2+_Callback_callback+_BoxTraits_box_traits+_Box_intersection_d::Topology_topology_=_Box_intersection_d::CLOSED9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_box_intersection_all_pairs_d.html#Cross_link_anchor_1236\">box_intersection_all_pairs_d</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator1 begin1,<BR>\n\nForwardIterator1 end1,<BR>\n\nForwardIterator2 begin2,<BR>\n\nForwardIterator2 end2,<BR>\n\nCallback callback,<BR>\n\nBoxTraits box_traits,<BR>\n\nBox_intersection_d::Topology topology = Box_intersection_d::CLOSED)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Invocation with custom box traits.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<P>\n\n<UL>\n  <LI><I>ForwardIterator1</I>, and ...<I>2</I>, must be\n    forward iterators and both value types must be\n    the same. We call this value type <I>Box_handle</I> in the following.\n  <LI><I>Callback</I> must be of the <I>BinaryFunction</I> concept. \n    The <I>Box_handle</I> must be convertible to both argument types. The\n    return type is not used and can be <I>void</I>.\n  <LI>The <I>Box_handle</I> must be a model of the <I>Assignable</I> concept.\n  <LI>In addition, if the default box traits is used the <I>Box_handle</I> must \n    be a class type <I>T</I> or a pointer to a class type <I>T</I>, where\n    <I>T</I> must be a model of the <I><A HREF=\"Concept_BoxIntersectionBox_d.html#Cross_link_anchor_1241\">BoxIntersectionBox_d</A></I> concept.\n    In both cases, the default box traits specializes to a suitable\n    implementation.\n  <LI><I>BoxTraits</I> must be of the <I><A HREF=\"Concept_BoxIntersectionTraits_d.html#Cross_link_anchor_1242\">BoxIntersectionTraits_d</A></I> concept.\n</UL>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_box_intersection_d.html#Cross_link_anchor_1233\">CGAL::box_intersection_d</A></I><BR>\n\n<I><A HREF=\"Function_box_self_intersection_d.html#Cross_link_anchor_1237\">CGAL::box_self_intersection_d</A></I><BR>\n\n<I><A HREF=\"Function_box_self_intersection_all_pairs_d.html#Cross_link_anchor_1239\">CGAL::box_self_intersection_all_pairs_d</A></I>\n<P>\n\n<I><A HREF=\"Class_Box_intersection_d--Box_traits_d.html#Cross_link_anchor_1245\">CGAL::Box_intersection_d::Box_traits_d</A>&lt;BoxHandle&gt;</I><BR>\n\n<I><A HREF=\"Concept_BoxIntersectionBox_d.html#Cross_link_anchor_1241\">BoxIntersectionBox_d</A></I><BR>\n\n<I><A HREF=\"Concept_BoxIntersectionTraits_d.html#Cross_link_anchor_1242\">BoxIntersectionTraits_d</A></I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe algorithm is trivially testing all pairs and runs therefore in time\n<MATH><I>O(nm)</I></MATH> where <MATH><I>n</I></MATH> is the size of the first sequence and <MATH><I>m</I></MATH> is the\nsize of the second sequence.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_box_self_intersection_d.html\"><I>box_self_intersection_d</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_58!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38567.0}