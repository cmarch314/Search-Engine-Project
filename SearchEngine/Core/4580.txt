{"text": "Research Projects News Notes CV Notes Having Fun with Java Bytecode Date 28 Dec 2 14 Every programmer has at some point or the other asked this basic question how does stuff work under the hood Personally speaking this has especially been the case for me when it came to syntactic sugar in programing language constructs For instance I have always wondered what a for each statement i e enhanced for loop statement in Java compiles to and how does it compilation differ from the compilation of a regular for loop In fact I actually stumbled one such question on StackOverFlow a while back that asked a similar question on how the following two code snippets differ upon compilation by Javac int myIntArray new int 3 myIntArray 1 myIntArray 1 2 myIntArray 3 3 int myIntArray 1 2 3 Now such syntactic sugar in array initialization is simpler to inspect than the difference between the syntactic sugar between a regular for loop and a for each loop However the best way to carry out either inspection is to simply compile the two pieces of code that you want to compare and take a look at the generated code and this is particularly easy in the case of Java given the easy to read Java bytecode yes easy to read and tools like Javap that come with any JDK installation So take the following three snippets and let s compile and disassemble them int array new int 1 2 3 int array 1 2 3 int array new int 3 array 1 array 1 2 array 3 3 I do this by first putting them in a Java source file in separate methods public class ArrayTest public static void main1 int array new int 3 array 1 array 1 2 array 3 3 public static void main2 int array new int 1 2 3 public static void main3 int array 1 2 3 I put them in different methods so that the compiled and eventual disassembled code for the three snippets can be easily discernible thus making it easier to compare After compiling the source code you end up with a class file that you can run through Javap which then yields the following disassembled bytecode view of the class file And in case you are unfamiliar with reading bytecode you can find an excellent reference and starting point on Wikipedia http en wikipedia org wiki Java bytecode instruction listingshttp en wikipedia org wiki Java bytecode public class ArrayTest extends java lang Object public ArrayTest Code aload 1 invokespecial 1 Method java lang Object init V 4 return public static void main1 Code iconst 3 1 newarray int 3 astore 4 aload 5 iconst 6 bipush 1 8 iastore 9 aload 1 iconst 1 11 bipush 2 13 iastore 14 aload 15 iconst 3 16 bipush 3 18 iastore 19 return public static void main2 Code iconst 3 1 newarray int 3 dup 4 iconst 5 bipush 1 7 iastore 8 dup 9 iconst 1 1 bipush 2 12 iastore 13 dup 14 iconst 2 15 bipush 3 17 iastore 18 astore 19 return public static void main3 Code iconst 3 1 newarray int 3 dup 4 iconst 5 bipush 1 7 iastore 8 dup 9 iconst 1 1 bipush 2 12 iastore 13 dup 14 iconst 2 15 bipush 3 17 iastore 18 astore 19 return Now by simply comparing the three bytecode snippets i e main1 main2 and main3 you can see exactly how those three lines of code get compiled and are different or similar from to each other As it turns out the following two snippets actually mean the same thing to the Java compiler int array new int 1 2 3 int array 1 2 3 So the new int is really an add on type information that might be useful in making the source code more readable or not However int array new int 3 array 1 array 1 2 array 3 3 is a whole other can of worms One way or another knowing how to use tools like Javap that really allow you to look under the hood can really be useful And knowing how things really work can often serve well in day to day software development and not just help in resolving intellectual curiosities Happy hacking Tags Java bytecode instructions syntactic sugar Related Posts 11 Jan 2 15 Part of Winning Team UCI Data Science Hackathon11 Dec 2 14 PL241 Compiler11 Dec 2 14 Advanced To Candidacy home bitbucket com Linkedin Instagram medium stackoverflow gist github com archives Background Photo Credit Sudha Palepu", "_id": "http://www.ics.uci.edu/~vpalepu/2014/12/28/Having-Fun-with-Java-Bytecode.html", "title": "having fun with java bytecode", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en-us\">\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"author\" content=\"Vijay Krishna Palepu\" />\n  <link rel=\"shortcut icon\" href=\"http://www.ics.uci.edu/~vpalepu/images/favicon.gif\" />\n  <title>Having Fun with Java Bytecode</title>\n  \n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/bootstrap.min.css\" type=\"text/css\" /> -->\n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/bootstrap-theme.min.css\" type=\"text/css\" /> -->\n  <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/screen.css\" type=\"text/css\" />\n  <!-- syntax highlighting CSS -->\n  <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/syntax.css\" type=\"text/css\" />\n  <link href='http://fonts.googleapis.com/css?family=Andada' rel='stylesheet' type='text/css'>\n  <!-- <link rel=\"stylesheet\" href=\"http://www.ics.uci.edu/~vpalepu/css/pygments.css\" type=\"text/css\" > -->\n</head>\n<body >   \n  <!-- <img id=\"hover1\" class=\"pos\" src=\"http://www.ics.uci.edu/~vpalepu/images/brain.png\"> -->\n  <div class=\"container\">\n\n    <div class=\"plain stretch\">\n      \n      <span class=\"regular\">\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/research.html\" style=\"margin:20px;margin-left:0\">Research</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\" style=\"margin:20px\">Projects</a>\n        \n        \n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/news.html\" style=\"margin:20px\">News</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\" style=\"margin:20px\">Notes</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/cv.html\" style=\"margin:20px\">CV</a>\n        \n      </span>\n      <!-- <hr class=\"thinblue\" /> -->\n      <br>\n    </div>\n\n    <div class=\"plain stretch\" style=\"padding-bottom:5px\">  \n      \n        <span class=\"huge\">\n          <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\" class=\"icon-home\"></a> /\n          \n            <a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\">Notes</a> / Having Fun with Java Bytecode\n          \n        </span>\n                 \n\n    </div>\n\n<!--     <div class=\"plain stretch\" >\n      <span class=\"huge\"> \n      \n        Vijay Krishna <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\"><b>Palepu</b></a>\n      \n        \n      </span>\n      <small>\n        vpalepu [at] uci [dot] edu &bull;\n        5243 Bren Hall,\n        <a href=\"http://www.spideruci.org\" target=\"_blank\">Spider Lab</a>,\n        <a href=\"http://www.uci.edu/\" target=\"_blank\">University of California, Irvine</a>, CA 92697-3440\n\n      </small>      \n\n      \n\n\n\n    \n\n    \n      \n        <hr class=\"thinblue\" />\n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/research.html\" style=\"margin:20px;margin-left:0\">Research</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/projects.html\" style=\"margin:20px\">Projects</a>\n        \n        \n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/news.html\" style=\"margin:20px\">News</a>\n        \n\n        \n          <a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\" style=\"margin:20px\">Notes</a>\n        \n\n        <a href=\"http://www.ics.uci.edu/~vpalepu/cv.html\" style=\"margin:20px\">CV</a>\n            \n    \n\n    </div> -->\n    \n    <title>Having Fun with Java Bytecode</title>\n<div class=\"plain stretch\">\n<!-- <p>\n\t\n    <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\" class=\"icon-home\"></a> /  \n\t\t<a href=\"http://www.ics.uci.edu/~vpalepu/blog.html\">Notes</a> /\n    Having Fun with Java Bytecode\n\t\t<br/> \n\t\n</p> -->\n\n<div id=\"post\"> \n  <span class=\"tags\">\n    Date: 28 Dec 2014\n  </span>\n  \n  <p>Every programmer has at some point or the other asked this basic question: <em>how does stuff work under the hood?</em> Personally speaking, this has especially been the case for me when it came to syntactic sugar in programing language constructs. For instance, I have always wondered what a for-each statement (i.e. enhanced for loop statement) in Java compiles to, and how does it compilation differ from the compilation of a regular for loop.</p>\n\n<p>In fact, I actually stumbled one such <a href=\"http://stackoverflow.com/questions/17245450/how-are-array-object-created-when-using-a-bracketed-list\">question on StackOverFlow</a> a while back that asked a similar question on how the following two code snippets differ upon compilation by Javac:</p>\n\n<p><code>\nint[] myIntArray = new int[3]; myIntArray[0] = 10; myIntArray[1] = 20; myIntArray[3] = 30;\n</code></p>\n\n<p><code>\nint[] myIntArray = {1,2,3};\n</code></p>\n\n<p>Now, such syntactic sugar in array initialization, is simpler to inspect than the difference between the syntactic sugar between a regular for-loop and a for-each loop. However, the best way to carry out either inspection is to simply compile the two pieces of code that you want to compare, and take a look at the generated code \u2014 and this is particularly easy in the case of Java, given the easy to read Java bytecode (yes, easy to read) and tools like Javap that come with any JDK installation.</p>\n\n<p>So, take the following three snippets and let\u2019s compile and disassemble them:</p>\n\n<p><code>int[] array = new int[] {10, 20, 30};</code>  </p>\n\n<p><code>int[] array = {10, 20, 30};</code>    </p>\n\n<p><code>int[] array = new int[3]; array[0] = 10; array[1] = 20; array[3] = 30;</code>  </p>\n\n<p>I do this by first putting them in a Java source file in separate methods:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ArrayTest</span> <span class=\"o\">{</span>\n      <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main1</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">];</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"o\">;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n     \n      <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main2</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">};</span>\n      <span class=\"o\">}</span>\n     \n      <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main3</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">};</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span></code></pre></div>\n\n<p>I put them in different methods so that the compiled (and eventual disassembled) code for the three snippets can be easily discernible, thus making it easier to compare.</p>\n\n<p>After compiling the source code, you end up with a class file that you can run through Javap, which then yields the following disassembled bytecode view of the class file. And in case you are unfamiliar with reading bytecode, you can find an excellent reference and starting point on Wikipedia: </p>\n\n<ul>\n  <li><a href=\"http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings\">http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings</a></li>\n  <li><a href=\"http://en.wikipedia.org/wiki/Java_bytecode\">http://en.wikipedia.org/wiki/Java_bytecode</a></li>\n</ul>\n\n<div class=\"highlight\"><pre><code class=\"language-java\" data-lang=\"java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ArrayTest</span> <span class=\"kd\">extends</span> <span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">lang</span><span class=\"o\">.</span><span class=\"na\">Object</span><span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"nf\">ArrayTest</span><span class=\"o\">();</span>\n  <span class=\"nl\">Code:</span>\n   <span class=\"mi\">0</span><span class=\"o\">:</span>   <span class=\"n\">aload_0</span>\n   <span class=\"mi\">1</span><span class=\"o\">:</span>   <span class=\"n\">invokespecial</span>   <span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"c1\">//Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>\n   <span class=\"mi\">4</span><span class=\"o\">:</span>   <span class=\"k\">return</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main1</span><span class=\"o\">();</span>\n  <span class=\"nl\">Code:</span>\n   <span class=\"mi\">0</span><span class=\"o\">:</span>   <span class=\"n\">iconst_3</span>\n   <span class=\"mi\">1</span><span class=\"o\">:</span>   <span class=\"n\">newarray</span> <span class=\"kt\">int</span>\n   <span class=\"mi\">3</span><span class=\"o\">:</span>   <span class=\"n\">astore_0</span>\n   <span class=\"mi\">4</span><span class=\"o\">:</span>   <span class=\"n\">aload_0</span>\n   <span class=\"mi\">5</span><span class=\"o\">:</span>   <span class=\"n\">iconst_0</span>\n   <span class=\"mi\">6</span><span class=\"o\">:</span>   <span class=\"n\">bipush</span>  <span class=\"mi\">10</span>\n   <span class=\"mi\">8</span><span class=\"o\">:</span>   <span class=\"n\">iastore</span>\n   <span class=\"mi\">9</span><span class=\"o\">:</span>   <span class=\"n\">aload_0</span>\n   <span class=\"mi\">10</span><span class=\"o\">:</span>  <span class=\"n\">iconst_1</span>\n   <span class=\"mi\">11</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">20</span>\n   <span class=\"mi\">13</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">14</span><span class=\"o\">:</span>  <span class=\"n\">aload_0</span>\n   <span class=\"mi\">15</span><span class=\"o\">:</span>  <span class=\"n\">iconst_3</span>\n   <span class=\"mi\">16</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">30</span>\n   <span class=\"mi\">18</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">19</span><span class=\"o\">:</span>  <span class=\"k\">return</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main2</span><span class=\"o\">();</span>\n  <span class=\"nl\">Code:</span>\n   <span class=\"mi\">0</span><span class=\"o\">:</span>   <span class=\"n\">iconst_3</span>\n   <span class=\"mi\">1</span><span class=\"o\">:</span>   <span class=\"n\">newarray</span> <span class=\"kt\">int</span>\n   <span class=\"mi\">3</span><span class=\"o\">:</span>   <span class=\"n\">dup</span>\n   <span class=\"mi\">4</span><span class=\"o\">:</span>   <span class=\"n\">iconst_0</span>\n   <span class=\"mi\">5</span><span class=\"o\">:</span>   <span class=\"n\">bipush</span>  <span class=\"mi\">10</span>\n   <span class=\"mi\">7</span><span class=\"o\">:</span>   <span class=\"n\">iastore</span>\n   <span class=\"mi\">8</span><span class=\"o\">:</span>   <span class=\"n\">dup</span>\n   <span class=\"mi\">9</span><span class=\"o\">:</span>   <span class=\"n\">iconst_1</span>\n   <span class=\"mi\">10</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">20</span>\n   <span class=\"mi\">12</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">13</span><span class=\"o\">:</span>  <span class=\"n\">dup</span>\n   <span class=\"mi\">14</span><span class=\"o\">:</span>  <span class=\"n\">iconst_2</span>\n   <span class=\"mi\">15</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">30</span>\n   <span class=\"mi\">17</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">18</span><span class=\"o\">:</span>  <span class=\"n\">astore_0</span>\n   <span class=\"mi\">19</span><span class=\"o\">:</span>  <span class=\"k\">return</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main3</span><span class=\"o\">();</span>\n  <span class=\"nl\">Code:</span>\n   <span class=\"mi\">0</span><span class=\"o\">:</span>   <span class=\"n\">iconst_3</span>\n   <span class=\"mi\">1</span><span class=\"o\">:</span>   <span class=\"n\">newarray</span> <span class=\"kt\">int</span>\n   <span class=\"mi\">3</span><span class=\"o\">:</span>   <span class=\"n\">dup</span>\n   <span class=\"mi\">4</span><span class=\"o\">:</span>   <span class=\"n\">iconst_0</span>\n   <span class=\"mi\">5</span><span class=\"o\">:</span>   <span class=\"n\">bipush</span>  <span class=\"mi\">10</span>\n   <span class=\"mi\">7</span><span class=\"o\">:</span>   <span class=\"n\">iastore</span>\n   <span class=\"mi\">8</span><span class=\"o\">:</span>   <span class=\"n\">dup</span>\n   <span class=\"mi\">9</span><span class=\"o\">:</span>   <span class=\"n\">iconst_1</span>\n   <span class=\"mi\">10</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">20</span>\n   <span class=\"mi\">12</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">13</span><span class=\"o\">:</span>  <span class=\"n\">dup</span>\n   <span class=\"mi\">14</span><span class=\"o\">:</span>  <span class=\"n\">iconst_2</span>\n   <span class=\"mi\">15</span><span class=\"o\">:</span>  <span class=\"n\">bipush</span>  <span class=\"mi\">30</span>\n   <span class=\"mi\">17</span><span class=\"o\">:</span>  <span class=\"n\">iastore</span>\n   <span class=\"mi\">18</span><span class=\"o\">:</span>  <span class=\"n\">astore_0</span>\n   <span class=\"mi\">19</span><span class=\"o\">:</span>  <span class=\"k\">return</span>\n<span class=\"o\">}</span></code></pre></div>\n\n<p>Now, by simply comparing the three bytecode snippets, i.e. main1, main2 and main3, you can see exactly how those three lines of code get compiled and are different or similar from/to each other.</p>\n\n<p>As it turns out the following two snippets actually mean the same thing to the Java compiler:</p>\n\n<p><code>int[] array = new int[] {10, 20, 30};</code>  </p>\n\n<p><code>int[] array = {10, 20, 30};</code>    </p>\n\n<p>So, the <code>new int[]</code> is really an add-on type information that <em>might</em> be useful in making the source code more readable, or not :)</p>\n\n<p>However, <code>int[] array = new int[3]; array[0] = 10; array[1] = 20; array[3] = 30;</code> is a whole other can of worms.</p>\n\n<p>One way or another, knowing how to use tools like Javap that really allow you to \u201clook under the hood\u201d can really be useful. And knowing how things really work can often serve well in day-to-day software development, and not just help in resolving intellectual curiosities.</p>\n\n<p>Happy hacking!  </p>\n \n</div>\n\n<div style=\"margin-bottom: 10px\">\n\t<br>\n\t<b class=\"label\">Tags:</b>\n\t\n\t\t<span class=\"tags\">Java</span>\n\t\t\n\t\t\t<span> </span>\n\t\t\n\t\n\t\t<span class=\"tags\">bytecode</span>\n\t\t\n\t\t\t<span> </span>\n\t\t\n\t\n\t\t<span class=\"tags\">instructions</span>\n\t\t\n\t\t\t<span> </span>\n\t\t\n\t\n\t\t<span class=\"tags\">syntactic-sugar</span>\n\t\t\n\t\n</div>\n</div>\n\n<div class=\"plain stretch\">\n  <h2>Related Posts</h2>\n  <ul class=\"posts\">\n    \n      <li><span>11 Jan 2015</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2015/01/11/Won-Data-Science-Hackathon.html\">Part of Winning Team @ UCI Data Science Hackathon</a></li>\n    \n      <li><span>11 Dec 2014</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2014/12/11/PL241-Compiler.html\">PL241-Compiler</a></li>\n    \n      <li><span>11 Dec 2014</span> &raquo; <a href=\"http://www.ics.uci.edu/~vpalepu/2014/12/11/Advanced-to-Candidacy.html\">Advanced To Candidacy</a></li>\n    \n  </ul>\n</div>\n\n    <div class=\"plain stretch\" style=\"background:rgba(255, 255, 255, 0.85)\">  \n      <small>\n        <a href=\"http://www.ics.uci.edu/~vpalepu/index.html\">home</a> &bull;\n        <a href=\"https://bitbucket.com/vpalepu\">@<b>bitbucket</b>.com</a> &bull;\n        <a href=\"http://www.linkedin.com/in/palepuvijaykrishna\" target=\"_blank\">@Linked<b>in</b></a> &bull;\n        <a href=\"http://instagram.com/vpalepu\" target=\"_blank\">@Instagram</a> &bull;\n        <a href=\"https://medium.com/@vkrishnapalepu\" target=\"_blank\">@medium</a> &bull;\n        <a href=\"http://stackoverflow.com/users/1481262/vijay\">@stack<b>overflow</b></a> &bull;\n        <a href=\"https://gist.github.com/VijayKrishna\">@<b>gist</b>.github.com</a>  &bull;\n        <a href=\"http://www.ics.uci.edu/~vpalepu/archives.html\"><b>arch</b>ives</a>\n        &bull;\n        Background Photo Credit: <a href=\"http://sudhapalepu.wordpress.com/\" target=\"_blank\">Sudha Palepu</a>\n      </small>\n    </div>    \n  </div>\n  </div> <!-- end of main -->\n  <!-- <div class=\"header\"></div> -->\n</body>\n</html>\n", "id": 4580.0}