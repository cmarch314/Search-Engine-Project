{"text": "CompSci 161 Fall 2 14 Homework 5 Due Sunday November 9 Suppose that we are using linear probing to insert n key value pairs into a hash table with 2n cells Also suppose that we get really unlucky and choose a bad hash function that causes the linear probing algorithm to be as slow as possible the worst case What is the running time of the algorithm using O notation for this case Describe a hash function that causes this worst case to occur R 9 2 Draw a figure illustrating the comparisons done by the brute force pattern matching algorithm for the case when the text is aaabaadaabaaa and the pattern is aabaaa In the lecture we described a version of the Rabin Karp string matching algorithm that stops as soon as it finds a match and showed that its expected running time even on a worst case input is O n m where n and m are the length of the text and pattern respectively Suppose that we modify the algorithm so that whenever it finds a match it outputs the match but then keeps going and eventually finds all matches Does this change the O notation for its expected running time again for worst case inputs If not explain why not If so describe an input that makes the algorithm slower by more than a constant factor R 9 9 Draw a compressed trie for the following set of strings abab baba ccccc bbaaaa caa bbaacc cbcc cbca ", "_id": "http://www.ics.uci.edu/~eppstein/161/f14-hw5.html", "title": "compsci 161, fall 2014, homework 5", "html": "<html>\n<head>\n<title>CompSci 161, Fall 2014, Homework 5</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 161, Fall 2014, Homework 5</h1>\n\n<h2>Due Sunday, November 9</h2>\n\n<ol>\n<li><p>Suppose that we are using linear probing to insert $n$ key-value pairs into a hash table with $2n$ cells. Also suppose that we get really unlucky and choose a bad hash function that causes the linear probing algorithm to be as slow as possible (the worst case). What is the running time of the algorithm, using $O$-notation, for this case? Describe a hash function that causes this worst case to occur.</p></li>\n<li><p>[R-9.2] Draw a figure illustrating the comparisons done by the brute-force pattern matching algorithm for the case when the text is \"aaabaadaabaaa\" and the pattern is \"aabaaa\".</p></li>\n<li><p>In the lecture we described a version of the <a href=\"https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm\">Rabin&ndash;Karp string matching algorithm</a> that stops as soon as it finds a match, and showed that its expected running time (even on a worst case input) is $O(n+m)$ where $n$ and $m$ are the length of the text and pattern respectively. Suppose that we modify the algorithm so that, whenever it finds a match, it outputs the match but then keeps going and eventually finds all matches. Does this change the $O$-notation for its expected running time (again, for worst case inputs)? If not, explain why not. If so, describe an input that makes the algorithm slower by more than a constant factor.</p></li>\n<li><p>[R-9.9] Draw a compressed trie for the following set of strings: {abab,baba,ccccc,bbaaaa,caa,bbaacc,cbcc,cbca}.</p></li>\n</ol>\n</body>\n</html>\n", "id": 9822.0}