{"text": "Test of Closest Pair Data Structures Hierarchical Clustering in a 31 dimensional Fractal Brute ForceNeighborsQuadtreeConga LineMultiCongaFastPairn 25 12 71s 67s 52s2 5s 68s 59s5 1 7 9 s3 18s2 51s1 79s3 3s2 72s1 926 6s14 38s11 18s55 67s13 62s12 41s2 61 26s 278 97s64 7s56 79s4 244 23s 1227 56s269 56s233 5s8 1 14 2s 5354 s1128 76s972 92s16 4492 64s 4624 1 s4152 42s Clusters are combined by unweighted medians Points were placed uniformly at random in the 31 dimensional generalized Sierpinski tetrahedron formed by choosing 5 random binary values taking bitwise exclusive ors of each nonempty subset and scaling into the range from to 1 Times include only the construction of the closest pair data structure and algorithm execution not the initial point placement and are averages over ten runs The quadtree data structure was only run on data sets of 1 or fewer points due to its high storage requirements Code was written in C compiled and optimized by Metrowerks Codewarrior 1 and run on a 2 MHz PowerPC 6 3e processor Apple Powerbook 34 c ", "_id": "http://www.ics.uci.edu/~eppstein/projects/pairs/Data/hs31/", "title": "hierarchical clustering in a 31-dimensional fractal", "html": "<HTML>\n<HEAD>\n<TITLE>Hierarchical Clustering in a 31-dimensional Fractal</TITLE>\n</HEAD>\n\n<BODY>\n<H1><A HREF=\"../\">Test of Closest Pair Data Structures</A></H1>\n<H2>Hierarchical Clustering in a 31-dimensional Fractal</H2>\n\n<TABLE BORDER=1>\n<TR ALIGN=RIGHT><TD></TD>\n    <TD>Brute&nbsp;Force</TD>\n    <TD>Neighbors</TD>\n    <TD>Quadtree</TD>\n    <TD>Conga&nbsp;Line</TD>\n    <TD>MultiConga</TD>\n    <TD>FastPair</TD></TR>\n<TR ALIGN=RIGHT><TD><I>n</I>&nbsp;=&nbsp;250</TD>\n    <TD><A HREF=\"b250\">12.71s</A></TD>\n    <TD><A HREF=\"n250\">0.67s</A></TD>\n    <TD><A HREF=\"q250\"><B>0.52s</B></A></TD>\n    <TD><A HREF=\"c250\">2.05s</A></TD>\n    <TD><A HREF=\"m250\">0.68s</A></TD>\n    <TD><A HREF=\"f250\">0.59s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>500</TD>\n    <TD><A HREF=\"b500\">107.90s</A></TD>\n    <TD><A HREF=\"n500\">3.18s</A></TD>\n    <TD><A HREF=\"q500\"><B>2.51s</B></A></TD>\n    <TD><A HREF=\"c500\">10.79s</A></TD>\n    <TD><A HREF=\"m500\">3.03s</A></TD>\n    <TD><A HREF=\"f500\">2.72s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>1000</TD>\n    <TD><A HREF=\"b1000\">926.06s</A></TD>\n    <TD><A HREF=\"n1000\">14.38s</A></TD>\n    <TD><A HREF=\"q1000\"><B>11.18s</B></A></TD>\n    <TD><A HREF=\"c1000\">55.67s</A></TD>\n    <TD><A HREF=\"m1000\">13.62s</A></TD>\n    <TD><A HREF=\"f1000\">12.41s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>2000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n2000\">61.26s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c2000\">278.97s</A></TD>\n    <TD><A HREF=\"m2000\">64.07s</A></TD>\n    <TD><A HREF=\"f2000\"><B>56.79s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>4000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n4000\">244.23s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c4000\">1227.56s</A></TD>\n    <TD><A HREF=\"m4000\">269.56s</A></TD>\n    <TD><A HREF=\"f4000\"><B>233.05s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>8000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n8000\">1014.02s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c8000\">5354.00s</A></TD>\n    <TD><A HREF=\"m8000\">1128.76s</A></TD>\n    <TD><A HREF=\"f8000\"><B>972.92s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>16000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n16000\">4492.64s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"m16000\">4624.10s</A></TD>\n    <TD><A HREF=\"f16000\"><B>4152.42s</B></A></TD></TR>\n</TABLE>\n\n<P>Clusters are combined by unweighted medians. Points were placed \nuniformly at random in the 31-dimensional generalized Sierpinski \ntetrahedron (formed by choosing 5 random binary values, taking bitwise \nexclusive ors of each nonempty subset, and scaling into the range from 0 to \n1). Times include only the construction of the closest pair data structure \nand algorithm execution (not the initial point placement) and are averages \nover ten runs.  The quadtree data structure was only run on data sets of \n1000 or fewer points due to its high storage requirements.  Code was \nwritten in C++, compiled and optimized by Metrowerks Codewarrior 10, and \nrun on a 200MHz PowerPC 603e processor (Apple Powerbook 3400c).\n</BODY>\n</HTML>", "id": 24948.0}