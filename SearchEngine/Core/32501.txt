{"text": "Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD org itr rescue dataGuard localFileSystem Class JFMFileSystem java lang Object org itr rescue dataGuard localFileSystem JFMFileSystem Direct Known Subclasses JFMLocalFilesystem public abstract class JFMFileSystemextends java lang Object This class represents the base class for all filesystems Author sergiu Constructor SummaryJFMFileSystem Empy constructor Method Summary booleancanRead JFMFile file Tests whether the application can read the file denoted by the abstract pathname booleancanWrite JFMFile file Tests whether the application can modify to the file denoted by the abstract pathname static JFMFileSystemcreateFileSystem java lang String name This method searches through the registered filesystems loads and returns the requested one abstract booleancreateNewFile JFMFile parent java lang String name Atomically creates a new empty file named by the abstract pathname if and only if a file with that name does not yet exist booleandelete JFMFile file Deletes the file or directory denoted by the abstract pathname booleanexists JFMFile file Tests whether the file or directory denoted by the abstract pathname exists abstract JFMFilegetDefaultRootDirectory The default root directory in the case of filesystems with more than one root directories like windows abstract JFMFilegetFile java lang String pathName This method returns an JFMFile object based on the pathname provided abstract chargetPathSeparator The system dependent path separator character java lang StringgetPathSeparatorString The system dependent path separator character represented as a string for convenience static java util Hashtable java lang String java lang String getRegisteredFilesystems JFMFilegetRootDriveFile JFMFile file This method returns the root directory of the filesystem of witch the supplied file belongs to abstract chargetSeparator The system dependent default name separator character java lang StringgetSeparatorString The system dependent default name separator character represented as a string for convenience abstract JFMFilegetStartDirectory This method returns the start directory for this filesystem booleanisLocal Tells us if the filesystem is local abstract JFMFile listFiles JFMFile rootFile Returns an array of abstract pathnames denoting the files in the directory denoted by the abstract pathname abstract JFMFile listFiles JFMFile rootFile java io FilenameFilter filter Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter abstract JFMFile listRoots List the available filesystem roots abstract booleanmkdir JFMFile parent java lang String name Creates the directory named by the abstract pathname denoted by the parameter static voidregisterFilesystems This method searches the java path and the plugins directory a subdirectory of the current directory for jar s that contain a filesystem plugin abstract booleansetLastModified JFMFile file long time Sets the last modified time of the file or directory named by the abstract pathname abstract booleansetReadOnly JFMFile file Marks the file or directory named by the abstract pathname so that only read operations are allowed Methods inherited from class java lang Objectclone equals finalize getClass hashCode notify notifyAll toString wait wait wait Constructor Detail JFMFileSystem public JFMFileSystem Empy constructor Method Detail getRegisteredFilesystems public static java util Hashtable java lang String java lang String getRegisteredFilesystems registerFilesystems public static void registerFilesystems This method searches the java path and the plugins directory a subdirectory of the current directory for jar s that contain a filesystem plugin A jar that contains a filesystem plugin is a jar file that has in its root directory a file named filesystem xml in which it describes the filesystem class used and its friendly name to be shown in the menu createFileSystem public static JFMFileSystem createFileSystem java lang String name This method searches through the registered filesystems loads and returns the requested one Fielsystems are represented in the vector as full qualified names of the class that represents them Parameters name The name of the requested filesystem or null if you accept the default one Returns The requested filesystem instance getDefaultRootDirectory public abstract JFMFile getDefaultRootDirectory The default root directory in the case of filesystems with more than one root directories like windows Returns The default root directory getPathSeparator public abstract char getPathSeparator The system dependent path separator character This field is initialized to contain the first character of the value of the system property path separator This character is used to separate filenames in a sequence of files given as a path list On UNIX systems this character is on Microsoft Windows systems it is getPathSeparatorString public java lang String getPathSeparatorString The system dependent path separator character represented as a string for convenience This string contains a single character namely getPathSeparator getSeparator public abstract char getSeparator The system dependent default name separator character This field is initialized to contain the first character of the value of the system property file separator On UNIX systems the value of this field is on Microsoft Windows systems it is getSeparatorString public java lang String getSeparatorString The system dependent default name separator character represented as a string for convenience This string contains a single character namely getSeparator listRoots public abstract JFMFile listRoots List the available filesystem roots See Also File listRoots listFiles public abstract JFMFile listFiles JFMFile rootFile Returns an array of abstract pathnames denoting the files in the directory denoted by the abstract pathname If this abstract pathname does not denote a directory then this method returns null Otherwise an array of File objects is returned one for each file or directory in the directory Pathnames denoting the directory itself and the directory s parent directory are not included in the result There is no guarantee that the name strings in the resulting array will appear in any specific order they are not in particular guaranteed to appear in alphabetical order Returns An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname The array will be empty if the directory is empty Returns null if this abstract pathname does not denote a directory or if an I O error occurs Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the directory listFiles public abstract JFMFile listFiles JFMFile rootFile java io FilenameFilter filter Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter The behavior of this method is the same as that of the listFiles method except that the pathnames in the returned array must satisfy the filter If the given filter is null then all pathnames are accepted Otherwise a pathname satisfies the filter if and only if the value true results when the FilenameFilter accept java io File java lang String method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes Parameters filter A filename filter Returns An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname The array will be empty if the directory is empty Returns null if this abstract pathname does not denote a directory or if an I O error occurs Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the directory mkdir public abstract boolean mkdir JFMFile parent java lang String name Creates the directory named by the abstract pathname denoted by the parameter Parameters parent The parent file that denotes the abstract pathnamename The name of the new dir Returns true if and only if the directory was created false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method does not permit the named directory to be created delete public boolean delete JFMFile file Deletes the file or directory denoted by the abstract pathname If this pathname denotes a directory then the directory must be empty in order to be deleted Parameters file The file that denotes the abstract pathname Returns true if and only if the file or directory is successfully deleted false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkDelete java lang String method denies delete access to the file createNewFile public abstract boolean createNewFile JFMFile parent java lang String name throws FSException Atomically creates a new empty file named by the abstract pathname if and only if a file with that name does not yet exist The check for the existence of the file and the creation of the file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the file Parameters file The file that denotes the abstract pathname Returns true if the named file does not exist and was successfully created false if the named file already exists Throws FSException If an filesystem error occurred java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method denies write access to the file setLastModified public abstract boolean setLastModified JFMFile file long time Sets the last modified time of the file or directory named by the abstract pathname All platforms support file modification times to the nearest second but some provide more precision The argument will be truncated to fit the supported precision If the operation succeeds and no intervening operations on the file take place then the next invocation of the org jfm md filesystems JFMFile lastModified method will return the possibly truncated time argument that was passed to this method Parameters file The file that denotes the abstract pathnametime The new last modified time measured in milliseconds since the epoch GMT January 1 197 Returns true if and only if the operation succeeded false otherwise Throws java lang IllegalArgumentException If the argument is negative java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method denies write access to the named file setReadOnly public abstract boolean setReadOnly JFMFile file Marks the file or directory named by the abstract pathname so that only read operations are allowed After invoking this method the file or directory is guaranteed not to change until it is either deleted or marked to allow write access Whether or not a read only file or directory may be deleted depends upon the underlying system Parameters file The file that denotes the abstract pathname Returns true if and only if the operation succeeded false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method denies write access to the named file canRead public boolean canRead JFMFile file Tests whether the application can read the file denoted by the abstract pathname Parameters file The file that denotes the abstract pathname Returns true if and only if the file specified by this abstract pathname exists and can be read by the application false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file canWrite public boolean canWrite JFMFile file Tests whether the application can modify to the file denoted by the abstract pathname Parameters file The file that denotes the abstract pathname Returns true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method denies write access to the file exists public boolean exists JFMFile file Tests whether the file or directory denoted by the abstract pathname exists Parameters file The file that denotes the abstract pathname Returns true if and only if the file or directory denoted by this abstract pathname exists false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file or directory getRootDriveFile public JFMFile getRootDriveFile JFMFile file This method returns the root directory of the filesystem of witch the supplied file belongs to For example If the active filesystem is the local filesystem and is an Windows filesystem this method should return the drive letter of the drive that this file belongs to On Unix filesystems it will always return On other filesystems it will return whatever the one that imlements it wants to Parameters file JFMFile the file whoses root we want to find out Returns JFMFile the root drive it cannot be null It can be the same file that was passed as an argument getStartDirectory public abstract JFMFile getStartDirectory This method returns the start directory for this filesystem Returns JFMFile the start directory for example on the local filesystem it will be the user directory getFile public abstract JFMFile getFile java lang String pathName This method returns an JFMFile object based on the pathname provided Parameters pathName String Returns JFMFile isLocal public boolean isLocal Tells us if the filesystem is local This information may be used for some optimizations in some cases Returns true is the filesystem is a local filesystem hard disk false otherwise a network one Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD", "_id": "http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html", "title": "\r\njfmfilesystem\r\n", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<!--NewPage-->\r\n<HTML>\r\n<HEAD>\r\n<!-- Generated by javadoc (build 1.6.0_01) on Tue Jul 03 14:38:37 PDT 2007 -->\r\n<TITLE>\r\nJFMFileSystem\r\n</TITLE>\r\n\r\n<META NAME=\"date\" CONTENT=\"2007-07-03\">\r\n\r\n<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../../../../stylesheet.css\" TITLE=\"Style\">\r\n\r\n<SCRIPT type=\"text/javascript\">\r\nfunction windowTitle()\r\n{\r\n    if (location.href.indexOf('is-external=true') == -1) {\r\n        parent.document.title=\"JFMFileSystem\";\r\n    }\r\n}\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n</NOSCRIPT>\r\n\r\n</HEAD>\r\n\r\n<BODY BGCOLOR=\"white\" onload=\"windowTitle();\">\r\n<HR>\r\n\r\n\r\n<!-- ========= START OF TOP NAVBAR ======= -->\r\n<A NAME=\"navbar_top\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_top\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_top_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMFileSystem.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMFileSystem.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_top\"></A>\r\n<!-- ========= END OF TOP NAVBAR ========= -->\r\n\r\n<HR>\r\n<!-- ======== START OF CLASS DATA ======== -->\r\n<H2>\r\n<FONT SIZE=\"-1\">\r\norg.itr_rescue.dataGuard.localFileSystem</FONT>\r\n<BR>\r\nClass JFMFileSystem</H2>\r\n<PRE>\r\njava.lang.Object\r\n  <IMG SRC=\"../../../../resources/inherit.gif\" ALT=\"extended by \"><B>org.itr_rescue.dataGuard.localFileSystem.JFMFileSystem</B>\r\n</PRE>\r\n<DL>\r\n<DT><B>Direct Known Subclasses:</B> <DD><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMLocalFilesystem</A></DD>\r\n</DL>\r\n<HR>\r\n<DL>\r\n<DT><PRE>public abstract class <B>JFMFileSystem</B><DT>extends java.lang.Object</DL>\r\n</PRE>\r\n\r\n<P>\r\nThis class represents the base class for all filesystems.\r\n<P>\r\n\r\n<P>\r\n<DL>\r\n<DT><B>Author:</B></DT>\r\n  <DD>sergiu</DD>\r\n</DL>\r\n<HR>\r\n\r\n<P>\r\n\r\n<!-- ======== CONSTRUCTOR SUMMARY ======== -->\r\n\r\n<A NAME=\"constructor_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Constructor Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#JFMFileSystem()\">JFMFileSystem</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empy constructor.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<!-- ========== METHOD SUMMARY =========== -->\r\n\r\n<A NAME=\"method_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Method Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#canRead(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">canRead</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can read the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#canWrite(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">canWrite</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can modify to the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>static&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFileSystem</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#createFileSystem(java.lang.String)\">createFileSystem</A></B>(java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method searches through the registered filesystems, loads and returns the requested one.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#createNewFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)\">createNewFile</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;parent,\r\n              java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Atomically creates a new, empty file named by the abstract pathname if\n and only if a file with that name does not yet exist.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#delete(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">delete</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the file or directory denoted by the abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#exists(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">exists</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file or directory denoted by the abstract pathname\n exists.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getDefaultRootDirectory()\">getDefaultRootDirectory</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default root directory in the case of filesystems with more than one root directories (like windows)</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getFile(java.lang.String)\">getFile</A></B>(java.lang.String&nbsp;pathName)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns an JFMFile object based on the pathname provided</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;char</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparator()\">getPathSeparator</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent path-separator character.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparatorString()\">getPathSeparatorString</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent path-separator character, represented as a string\n for convenience.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>static&nbsp;java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getRegisteredFilesystems()\">getRegisteredFilesystems</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getRootDriveFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">getRootDriveFile</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the root directory of the filesystem of witch the supplied file belongs to.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;char</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparator()\">getSeparator</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent default name-separator character.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparatorString()\">getSeparatorString</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The system-dependent default name-separator character, represented as a\n string for convenience.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getStartDirectory()\">getStartDirectory</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the start directory for this filesystem</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#isLocal()\">isLocal</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tells us if the filesystem is local.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[]</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">listFiles</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;rootFile)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files in the\n directory denoted by the abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[]</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.io.FilenameFilter)\">listFiles</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;rootFile,\r\n          java.io.FilenameFilter&nbsp;filter)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[]</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#listRoots()\">listRoots</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List the available filesystem roots.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#mkdir(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)\">mkdir</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;parent,\r\n      java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the directory named by the abstract pathname denoted by the parameter.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>static&nbsp;void</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#registerFilesystems()\">registerFilesystems</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method searches the java path and the plugins directory (a subdirectory of the current directory)\n for jar's that contain a filesystem plugin.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#setLastModified(org.itr_rescue.dataGuard.localFileSystem.JFMFile, long)\">setLastModified</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file,\r\n                long&nbsp;time)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the last-modified time of the file or directory named by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#setReadOnly(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">setReadOnly</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marks the file or directory named by the abstract pathname so that\n only read operations are allowed.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;<A NAME=\"methods_inherited_from_class_java.lang.Object\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">\r\n<TH ALIGN=\"left\"><B>Methods inherited from class java.lang.Object</B></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<P>\r\n\r\n<!-- ========= CONSTRUCTOR DETAIL ======== -->\r\n\r\n<A NAME=\"constructor_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Constructor Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"JFMFileSystem()\"><!-- --></A><H3>\r\nJFMFileSystem</H3>\r\n<PRE>\r\npublic <B>JFMFileSystem</B>()</PRE>\r\n<DL>\r\n<DD>Empy constructor.\r\n<P>\r\n</DL>\r\n\r\n<!-- ============ METHOD DETAIL ========== -->\r\n\r\n<A NAME=\"method_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Method Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"getRegisteredFilesystems()\"><!-- --></A><H3>\r\ngetRegisteredFilesystems</H3>\r\n<PRE>\r\npublic static java.util.Hashtable&lt;java.lang.String,java.lang.String&gt; <B>getRegisteredFilesystems</B>()</PRE>\r\n<DL>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"registerFilesystems()\"><!-- --></A><H3>\r\nregisterFilesystems</H3>\r\n<PRE>\r\npublic static void <B>registerFilesystems</B>()</PRE>\r\n<DL>\r\n<DD>This method searches the java path and the plugins directory (a subdirectory of the current directory)\n for jar's that contain a filesystem plugin.\n A jar that contains a filesystem plugin, is a jar file that has in its root directory a file named filesystem.xml\n in which it describes the filesystem class used and its friendly name (to be shown in the menu)\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"createFileSystem(java.lang.String)\"><!-- --></A><H3>\r\ncreateFileSystem</H3>\r\n<PRE>\r\npublic static <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFileSystem</A> <B>createFileSystem</B>(java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD>This method searches through the registered filesystems, loads and returns the requested one.\n Fielsystems are represented in the vector as full qualified names of the class that represents them.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the requested filesystem, or null if you accept the default one\r\n<DT><B>Returns:</B><DD>The requested filesystem instance</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getDefaultRootDirectory()\"><!-- --></A><H3>\r\ngetDefaultRootDirectory</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getDefaultRootDirectory</B>()</PRE>\r\n<DL>\r\n<DD>The default root directory in the case of filesystems with more than one root directories (like windows)\r\n<P>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The default root directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getPathSeparator()\"><!-- --></A><H3>\r\ngetPathSeparator</H3>\r\n<PRE>\r\npublic abstract char <B>getPathSeparator</B>()</PRE>\r\n<DL>\r\n<DD>The system-dependent path-separator character.  This field is\n initialized to contain the first character of the value of the system\n property <code>path.separator</code>.  This character is used to\n separate filenames in a sequence of files given as a <em>path list</em>.\n On UNIX systems, this character is <code>':'</code>; on Microsoft Windows systems it\n is <code>';'</code>.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getPathSeparatorString()\"><!-- --></A><H3>\r\ngetPathSeparatorString</H3>\r\n<PRE>\r\npublic java.lang.String <B>getPathSeparatorString</B>()</PRE>\r\n<DL>\r\n<DD>The system-dependent path-separator character, represented as a string\n for convenience.  This string contains a single character, namely\n <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getPathSeparator()\"><CODE>getPathSeparator()</CODE></A></code>.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getSeparator()\"><!-- --></A><H3>\r\ngetSeparator</H3>\r\n<PRE>\r\npublic abstract char <B>getSeparator</B>()</PRE>\r\n<DL>\r\n<DD>The system-dependent default name-separator character.  This field is\n initialized to contain the first character of the value of the system\n property <code>file.separator</code>.  On UNIX systems the value of this\n field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\\'</code>.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getSeparatorString()\"><!-- --></A><H3>\r\ngetSeparatorString</H3>\r\n<PRE>\r\npublic java.lang.String <B>getSeparatorString</B>()</PRE>\r\n<DL>\r\n<DD>The system-dependent default name-separator character, represented as a\n string for convenience.  This string contains a single character, namely\n <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html#getSeparator()\"><CODE>getSeparator()</CODE></A></code>.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"listRoots()\"><!-- --></A><H3>\r\nlistRoots</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[] <B>listRoots</B>()</PRE>\r\n<DL>\r\n<DD>List the available filesystem roots.\r\n<P>\r\n<DD><DL>\r\n<DT><B>See Also:</B><DD><CODE>File.listRoots()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\nlistFiles</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[] <B>listFiles</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;rootFile)</PRE>\r\n<DL>\r\n<DD>Returns an array of abstract pathnames denoting the files in the\n directory denoted by the abstract pathname.\n\n <p> If this abstract pathname does not denote a directory, then this\n method returns <code>null</code>.  Otherwise an array of\n <code>File</code> objects is returned, one for each file or directory in\n the directory.  Pathnames denoting the directory itself and the\n directory's parent directory are not included in the result.\n\n <p> There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\r\n<P>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"listFiles(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.io.FilenameFilter)\"><!-- --></A><H3>\r\nlistFiles</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[] <B>listFiles</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;rootFile,\r\n                                    java.io.FilenameFilter&nbsp;filter)</PRE>\r\n<DL>\r\n<DD>Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the\n same as that of the <code><CODE>#listFiles()</CODE></code> method, except\n that the pathnames in the returned array must satisfy the filter.\n If the given <code>filter</code> is <code>null</code> then all\n pathnames are accepted.  Otherwise, a pathname satisfies the filter\n if and only if the value <code>true</code> results when the\n <code><CODE>FilenameFilter.accept(java.io.File, java.lang.String)</CODE></code> method of the filter is\n invoked on this abstract pathname and the name of a file or\n directory in the directory that it denotes.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>filter</CODE> - A filename filter\r\n<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"mkdir(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)\"><!-- --></A><H3>\r\nmkdir</H3>\r\n<PRE>\r\npublic abstract boolean <B>mkdir</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;parent,\r\n                              java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD>Creates the directory named by the abstract pathname denoted by the parameter.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>parent</CODE> - The parent file that denotes the abstract pathname<DD><CODE>name</CODE> - The name of the new dir\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the directory was\n          created; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method does not permit the named directory to be created</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"delete(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ndelete</H3>\r\n<PRE>\r\npublic boolean <B>delete</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>Deletes the file or directory denoted by the abstract pathname.  If\n this pathname denotes a directory, then the directory must be empty in\n order to be deleted.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory is\n          successfully deleted; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkDelete(java.lang.String)</CODE></code> method denies\n          delete access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"createNewFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile, java.lang.String)\"><!-- --></A><H3>\r\ncreateNewFile</H3>\r\n<PRE>\r\npublic abstract boolean <B>createNewFile</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;parent,\r\n                                      java.lang.String&nbsp;name)\r\n                               throws <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></PRE>\r\n<DL>\r\n<DD>Atomically creates a new, empty file named by the abstract pathname if\n and only if a file with that name does not yet exist.  The check for the\n existence of the file and the creation of the file if it does not exist\n are a single operation that is atomic with respect to all other\n filesystem activities that might affect the file.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if the named file does not exist and was\n          successfully created; <code>false</code> if the named file\n          already exists\r\n<DT><B>Throws:</B>\r\n<DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></CODE> - If an filesystem error occurred\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method denies write access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"setLastModified(org.itr_rescue.dataGuard.localFileSystem.JFMFile, long)\"><!-- --></A><H3>\r\nsetLastModified</H3>\r\n<PRE>\r\npublic abstract boolean <B>setLastModified</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file,\r\n                                        long&nbsp;time)</PRE>\r\n<DL>\r\n<DD>Sets the last-modified time of the file or directory named by the\n abstract pathname.\n\n <p> All platforms support file-modification times to the nearest second,\n but some provide more precision.  The argument will be truncated to fit\n the supported precision.  If the operation succeeds and no intervening\n operations on the file take place, then the next invocation of the\n <code><CODE>org.jfm.md.filesystems.JFMFile#lastModified</CODE></code> method will return the (possibly\n truncated) <code>time</code> argument that was passed to this method.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname<DD><CODE>time</CODE> - The new last-modified time, measured in milliseconds since\n               the epoch (00:00:00 GMT, January 1, 1970)\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the operation succeeded;\n          <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.IllegalArgumentException</CODE> - If the argument is negative\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method denies write access to the named file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"setReadOnly(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\nsetReadOnly</H3>\r\n<PRE>\r\npublic abstract boolean <B>setReadOnly</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>Marks the file or directory named by the abstract pathname so that\n only read operations are allowed.  After invoking this method the file\n or directory is guaranteed not to change until it is either deleted or\n marked to allow write access.  Whether or not a read-only file or\n directory may be deleted depends upon the underlying system.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the operation succeeded;\n          <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method denies write access to the named file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canRead(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ncanRead</H3>\r\n<PRE>\r\npublic boolean <B>canRead</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>Tests whether the application can read the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file specified by this\n          abstract pathname exists <em>and</em> can be read by the\n          application; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canWrite(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ncanWrite</H3>\r\n<PRE>\r\npublic boolean <B>canWrite</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>Tests whether the application can modify to the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file system actually\n          contains a file denoted by this abstract pathname <em>and</em>\n          the application is allowed to write to the file;\n          <code>false</code> otherwise.\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method denies write access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"exists(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\nexists</H3>\r\n<PRE>\r\npublic boolean <B>exists</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>Tests whether the file or directory denoted by the abstract pathname\n exists.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory denoted\n          by this abstract pathname exists; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file or directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getRootDriveFile(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ngetRootDriveFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getRootDriveFile</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;file)</PRE>\r\n<DL>\r\n<DD>This method returns the root directory of the filesystem of witch the supplied file belongs to.\n For example:<br>\n       <p> If the active filesystem is the local filesystem and is an Windows filesystem, this\n method should return the drive letter of the drive that this file belongs to. On Unix filesystems it will always return\n '/'. On other filesystems .... it will return whatever the one that imlements it wants to.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - JFMFile the file  whoses root we want to find out.\r\n<DT><B>Returns:</B><DD>JFMFile the root drive (it cannot be null). It can be the same file that was passed as an argument.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getStartDirectory()\"><!-- --></A><H3>\r\ngetStartDirectory</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getStartDirectory</B>()</PRE>\r\n<DL>\r\n<DD>This method returns the start directory for this filesystem\r\n<P>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>JFMFile the start directory (for example, on the local filesystem it will be the user directory)</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getFile(java.lang.String)\"><!-- --></A><H3>\r\ngetFile</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getFile</B>(java.lang.String&nbsp;pathName)</PRE>\r\n<DL>\r\n<DD>This method returns an JFMFile object based on the pathname provided\r\n<P>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>pathName</CODE> - String\r\n<DT><B>Returns:</B><DD>JFMFile</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isLocal()\"><!-- --></A><H3>\r\nisLocal</H3>\r\n<PRE>\r\npublic boolean <B>isLocal</B>()</PRE>\r\n<DL>\r\n<DD>Tells us if the filesystem is local. This information may be used for some optimizations in some cases\r\n<P>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>true is the filesystem is a local filesystem (hard-disk) false otherwise (a network one)</DL>\r\n</DD>\r\n</DL>\r\n<!-- ========= END OF CLASS DATA ========= -->\r\n<HR>\r\n\r\n\r\n<!-- ======= START OF BOTTOM NAVBAR ====== -->\r\n<A NAME=\"navbar_bottom\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_bottom\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_bottom_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMFileSystem.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMFileSystem.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_bottom\"></A>\r\n<!-- ======== END OF BOTTOM NAVBAR ======= -->\r\n\r\n<HR>\r\n\r\n</BODY>\r\n</HTML>\r\n", "id": 32501.0}