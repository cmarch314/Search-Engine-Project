{"text": "ICS CSE 45C Programming in C as a Second Language Summer 2 14 Instructors and office hours Instructor Michael J Bannister Office DBH 4219 Email mbannist at uci dot edu Office hours Wednesday Friday from 3 3 pm 5 pm in DBH 4219Teaching assistant Zachary Becker Office DBH 4 32 Email zbecker at uci dot edu Lectures labs and exams Lecture Monday Wednesday Friday from 1 pm 2 5 pm in Steinhaus Hall 174 Lab optional Tuesday Thursday from 11 am 1 pm in ICS 183 Midterm exam Jul 11 in Steinhaus Hall 174Final exam Jul 3 in Steinhaus Hall 174 Textbook and other resources C Primer 5th Edition Optional by Stanley B Lippman Josee Lajoie and Barbara E Moo Addison Wesley Professional ISBN 321714113 CPP Reference A reasonably complete online reference for C Grading Your grade in this course will be based on a weighted average of your scores on each of the five programming projects midterm and final exam The break down will be as follows Project 2 Projects 1 4 36 Midterm 26 Final 36 The conversion to letter grades will be determined at the end of the course Tentative schedule Week 1 Monday Jun 23 Course introductionThe ICS 45C development environment Week 1 Wednesday Jun 25 Compilation and linking of a C programStatic type checking and built in data types 2 1 2 2 4 1 4 5 Basic input and output 1 2 Control structures 5 1 5 4 Week 1 Friday Jun 27 The difference between lvalues and rvalues 4 1 1 Working with functions 6 1 6 2 1 6 3 1 6 3 2 6 4 A behind the scene look at a C programCalling conventions and the call stack notes Week 2 Monday Jun 3 Separate compilation 6 1 3 Guarding against multiple inclusion 2 6 3 enums and switches 19 3 5 3 2 Structures 2 6 Project is due at 11 5 pm Week 2 Wednesday Jul 2 Reference 2 3 1 Pass by copy vs pass by reference 6 2 2 Pointers and nullptr 2 3 2 Arrays 3 5 String objects vs C strings 3 2 3 5 Week 2 Friday Jul 4 Holiday Week 3 Monday Jul 7 Console input and outputDynamic memory allocation the heap 12 1 2 12 2 1 new delete and delete 12 1 2 12 2 1 Dynamically allocated structsProject 1 is due at 11 5 pm Week 3 Wednesday Jul 9 The const qualifier 2 4 How constant works with pointers and references 2 4 Object oriented programing in C Writing classes 7 1 7 3 1 7 3 3 15 7 Access controlA little inheritance 15 1 15 4 Week 3 Friday Jul 11 Midterm Week 4 Monday Jul 14 More inheritance 15 1 15 4 Well behaved classes 13 1 13 2 1 13 5 const aware classesThe ArrayList exampleProject 2 is due at 11 5 pm Week 4 Wednesday Jul 16 static cast and dynamic cast 4 11 2 4 11 3 19 2 1 A little templates 16 1 1 Introduction to the standard template library STL STL Array Vectors and Maps 3 3 11 Range based for loop for each loop Type inference 2 5 Week 4 Friday Jul 18 Typedefs and using 2 5 Pairs tuples and ties 11 2 3 Stacks and queues Generating random numbers 17 4 Pimpl pattern Week 5 Monday Jul 21 Bit level operationsShared and unique pointersTemplate functionsProject 3 is due at 11 5 pm Week 5 Wednesday Jul 23 More shared and unique pointersError handling by returning error codesC exceptions Week 5 Friday Jul 25 IteratorsThe algorithms libraryConcluding remarks Week 6 Monday Jul 28 Project 4 is due at 11 5 pm Week 6 Wednesday Jul 3 Final Topics on the final Example code Example Fundamental types and control structuresExample1 Functions in C Example2 Separate compilationExample3 StructsExample4 Abusing the project 1 starter code Example5 Basic example for using pointers and referencesExample6 Pass by reference quizExample7 Working with stack allocated arraysExample8 Parsing a CSV fileExample9 Working with dynamically allocated arraysExample1 Basic inheritance exampleExample11 ArrayList classExample12 STL style array passingExample13 Using dynamic cast to safe convert between objectsExample14 Using array vector and unordered map with for each loopsExample15 Generating random numbersExample16 Using pairs and ties for multiple returnsExample17 Template functionsExample18 Bit operationsExample19 Adding exception to the ArrayList of example 11Example2 Using shared ptr and unique ptrExample21 Using STL s find functionExample22 ArrayList from Example 11 with an iterator Additional examples These some code examples from another offering of this course http www ics uci edu thornton ics45c CodeExamples Projects The majority of your effort in this course will be spent on programming projects the only way to learn a language is to use the language All of these projects will be coded entirely in C specifically C 14 Programming in C requires a level of care beyond that required in a higher level language like Python So expect the project to take more time than than your previous programming projects If you have prior experience programming in C make sure you are programming your projects using C In general make sure you start your project early to allow time for debugging Your projects will be evaluated based on their correctness and quality Specifically your projects will be evaluated on a 3 point scale The break down of the points will fall into two categories correctness and quality Correctness 2 points Does the program compiles run without error and meet specifications Quality 1 points Is the code readable well organized and easily modifiable If your submit code that does not compile you score will be severely reduced and you may receive a zero on the project In this course our target platform will be the Xubuntu 14 4 virtual machine distributed to the class If your project does not compile on this platform with the build scripts supplied with the project then it does not compile as far as we are concerned see Project for more information on our virtual machine Projects are due at 11 5 pm on their due date found on the project s webpage with a ten minute grace period You will be allowed one 48 hour extension during the course You are not required to notify us that you are going to use your extension The first project you submit late will fall under the 48 hour extension Other than this policy late work will not be accepted All projects will be submitted as a single file created by the gather script to the eee dropbox for the course see Project for details If a project is submitted in a different format your score will be reduced and you may receive a zero Under no circumstances will a project be graded if it is submitted via email You are responsible for submitting the version of the project you want graded Accidentally submitting the wrong version is not considered grounds for a regrade Project Adapting to your environmentProject 1 Game of lifeProject 2 Wizard s questProject 3 Painting a pictureProject 4 Snake game Academic honesty As a student in this course you are expected to understand and follow the academic honest policies of the University of California Irvine and the Bren School of Information and Computer Science Please take a few minutes to familiarize yourself with these policies All of your submitted code is expected to be completed solely by you without outside assistance Sharing code with students in the class is not permitted Of course high level discussion of course material is permitted and encouraged All submissions will be analyzed by automated plagiarism detection software which detects similarities in your code with other students code this quarter and in the past and code available on the internet Similarly in class exams are expected to be an individual effort In addition all exams will be closed notes and closed book Violators of academic honesty policies will be reported and are subject to the penalties described in the policies linked above Overall a bad course grade is nowhere near as bad as getting caught cheating Accommodations for disabilities If you feel that you may need an accommodation based on the impact of a disability you should contact me privately to discuss these specific needs Also contact the Disability Services Center online or by phone at 949 824 7494 as soon as possible to better ensure that such accommodations such as alternative test taking environments or note taking services can be arranged for you in a timely way Acknowledgments This course and webpage are in large part based on an offering of this course by Alex Thornton in Spring 2 14 ", "_id": "http://www.ics.uci.edu/~mbannist/teaching/ics45c/", "title": "{ics,cse} 45c: programming in c++ as a second language", "html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n  \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/~mbannist/css/default.css\"/>\n  \n\n  <title>{ICS,CSE} 45C: Programming in C++ as a Second Language</title>\n\n  \n</head>\n\n<body>\n  <h1 id=\"icscse-45c-programming-in-c-as-a-second-language-summer-2014\">ICS/CSE 45C: Programming in C++ as a Second Language (Summer 2014)</h1>\n  <hr />\n  \n  <h2 id=\"instructors-and-office-hours\">Instructors and office hours</h2>\n  <ul>\n    <li>Instructor: <a href=\"http://www.ics.uci.edu/~mbannist\">Michael J. Bannister</a><br />\n  Office: <a href=\"http://www.classrooms.uci.edu/GAC/DBH.html\">DBH</a> 4219<br />\n  Email: mbannist at uci dot edu<br />\n  Office hours: Wednesday, Friday from 3:30pm-5:00pm in DBH 4219</li>\n    <li>Teaching assistant: <a href=\"http://www.ics.uci.edu/~zbecker\">Zachary Becker</a><br />\n  Office: <a href=\"http://www.classrooms.uci.edu/GAC/DBH.html\">DBH</a> 4032<br />\n  Email: zbecker at uci dot edu</li>\n  </ul>\n  \n  <h2 id=\"lectures-labs-and-exams\">Lectures, labs and exams</h2>\n  <ul>\n    <li>Lecture: Monday, Wednesday, Friday from 1:00pm-2:50pm in <a href=\"http://www.classrooms.uci.edu/GAC/SH174.html\">Steinhaus Hall 174</a>.</li>\n    <li>Lab (optional): Tuesday, Thursday from 11:00am-1:00pm in <a href=\"http://www.classrooms.uci.edu/GAC/DBH.html\">ICS</a> 183.</li>\n    <li>Midterm exam: Jul 11 in <a href=\"http://www.classrooms.uci.edu/GAC/SH174.html\">Steinhaus Hall 174</a></li>\n    <li>Final exam: Jul 30 in <a href=\"http://www.classrooms.uci.edu/GAC/SH174.html\">Steinhaus Hall 174</a></li>\n  </ul>\n  \n  <h2 id=\"textbook-and-other-resources\">Textbook and other resources</h2>\n  <ul>\n    <li><em>C++ Primer (5th Edition)</em>  <strong>(Optional)</strong><br />\n  by Stanley B. Lippman, Josee Lajoie and Barbara E. Moo<br />\n  Addison-Wesley Professional<br />\n  ISBN 0321714113  </li>\n    <li><a href=\"http://en.cppreference.com/w/\">CPP Reference</a>: A reasonably complete online reference for C++.</li>\n  </ul>\n  \n  <h2 id=\"grading\">Grading</h2>\n  <p>Your grade in this course will be based on a weighted average of your scores on each of the five programming projects, midterm and final exam. The break down will be as follows:</p>\n  \n  <ul>\n    <li>Project 0 (2%)</li>\n    <li>Projects 1-4 (36%)</li>\n    <li>Midterm (26%)</li>\n    <li>Final (36%)</li>\n  </ul>\n  \n  <p>The conversion to letter grades will be determined at the end of the course.</p>\n  \n  <h2 id=\"tentative-schedule\">Tentative schedule</h2>\n  <ul>\n    <li>Week 1, Monday (Jun 23):\n      <ul>\n        <li>Course introduction</li>\n        <li>The ICS 45C development environment</li>\n      </ul>\n    </li>\n    <li>Week 1, Wednesday (Jun 25):\n      <ul>\n        <li>Compilation and linking of a C++ program</li>\n        <li>Static type checking and built-in data types (2.1, 2.2, 4.1-4.5)</li>\n        <li>Basic input and output (1.2)</li>\n        <li>Control structures (5.1-5.4)</li>\n      </ul>\n    </li>\n    <li>Week 1, Friday (Jun 27):\n      <ul>\n        <li>The difference between lvalues and rvalues (4.1.1)</li>\n        <li>Working with functions (6.1, 6.2.1, 6.3.1, 6.3.2, 6.4)</li>\n        <li>A behind the scene look at a C++ program</li>\n        <li>Calling conventions and the call stack (<a href=\"call_stack.pdf\">notes</a>)</li>\n      </ul>\n    </li>\n    <li>Week 2, Monday (Jun 30):\n      <ul>\n        <li>Separate compilation (6.1.3)</li>\n        <li>Guarding against multiple inclusion (2.6.3)</li>\n        <li>enums and switches (19.3, 5.3.2)</li>\n        <li>Structures (2.6)</li>\n        <li><a href=\"project0/\">Project 0</a> is due at 11:50pm</li>\n      </ul>\n    </li>\n    <li>Week 2, Wednesday (Jul 2):\n      <ul>\n        <li>Reference (2.3.1)</li>\n        <li>Pass-by-copy vs. pass-by-reference (6.2.2)</li>\n        <li>Pointers and nullptr (2.3.2)</li>\n        <li>Arrays (3.5)</li>\n        <li>String objects vs C-strings (3.2, 3.5)</li>\n      </ul>\n    </li>\n    <li>Week 2, Friday (Jul 4):\n      <ul>\n        <li><strong>Holiday</strong></li>\n      </ul>\n    </li>\n    <li>Week 3, Monday (Jul 7):\n      <ul>\n        <li>Console input and output</li>\n        <li>Dynamic memory allocation (the heap) (12.1.2, 12.2.1)</li>\n        <li>new, delete and delete[] (12.1.2, 12.2.1)</li>\n        <li>Dynamically allocated structs</li>\n        <li><a href=\"project1/\">Project 1</a> is due at 11:50pm</li>\n      </ul>\n    </li>\n    <li>Week 3, Wednesday (Jul 9):\n      <ul>\n        <li>The const qualifier (2.4)</li>\n        <li>How constant works with pointers and references (2.4)</li>\n        <li>Object oriented programing in C++</li>\n        <li>Writing classes (7.1, 7.3.1-7.3.3, 15.7)</li>\n        <li>Access control</li>\n        <li>A little inheritance (15.1-15.4)</li>\n      </ul>\n    </li>\n    <li>Week 3, Friday (Jul 11):\n      <ul>\n        <li><strong>Midterm</strong></li>\n      </ul>\n    </li>\n    <li>Week 4, Monday (Jul 14):\n      <ul>\n        <li>More inheritance (15.1-15.4)</li>\n        <li>Well-behaved classes (13.1, 13.2.1, 13.5)</li>\n        <li>const aware classes</li>\n        <li>The ArrayList example</li>\n        <li><a href=\"project2/\">Project 2</a> is due at 11:50pm</li>\n      </ul>\n    </li>\n    <li>Week 4, Wednesday (Jul 16):\n      <ul>\n        <li>static_cast and dynamic_cast (4.11.2, 4.11.3, 19.2.1)</li>\n        <li>A little templates (16.1.1)</li>\n        <li>Introduction to the standard template library (STL)</li>\n        <li>STL: Array, Vectors and Maps (3.3, 11)</li>\n        <li>Range-based for loop (for-each loop)</li>\n        <li>Type inference (2.5)</li>\n      </ul>\n    </li>\n    <li>Week 4, Friday (Jul 18):\n      <ul>\n        <li>Typedefs and using (2.5)</li>\n        <li>Pairs, tuples and ties (11.2.3)</li>\n        <li>Stacks and queues </li>\n        <li>Generating random numbers (17.4)</li>\n        <li>Pimpl pattern</li>\n      </ul>\n    </li>\n    <li>Week 5, Monday (Jul 21):\n      <ul>\n        <li>Bit-level operations</li>\n        <li>Shared and unique pointers</li>\n        <li>Template functions</li>\n        <li><a href=\"project3/\">Project 3</a> is due at 11:50pm</li>\n      </ul>\n    </li>\n    <li>Week 5, Wednesday (Jul 23):\n      <ul>\n        <li>More shared and unique pointers</li>\n        <li>Error handling by returning error codes</li>\n        <li>C++ exceptions</li>\n      </ul>\n    </li>\n    <li>Week 5, Friday (Jul 25):\n      <ul>\n        <li>Iterators</li>\n        <li>The algorithms library</li>\n        <li>Concluding remarks</li>\n      </ul>\n    </li>\n    <li>Week 6, Monday (Jul 28):\n      <ul>\n        <li><a href=\"project4/\">Project 4</a> is due at 11:50pm</li>\n      </ul>\n    </li>\n    <li>Week 6, Wednesday (Jul 30): <strong>Final</strong>\n      <ul>\n        <li><a href=\"final.html\">Topics on the final</a></li>\n      </ul>\n    </li>\n  </ul>\n  \n  <h2 id=\"example-code\">Example code</h2>\n  <ul>\n    <li><a href=\"examples/example0.tar.gz\">Example0</a>: Fundamental types and control structures</li>\n    <li><a href=\"examples/example1.tar.gz\">Example1</a>: Functions in C++</li>\n    <li><a href=\"examples/example2.tar.gz\">Example2</a>: Separate compilation</li>\n    <li><a href=\"examples/example3.tar.gz\">Example3</a>: Structs</li>\n    <li><a href=\"examples/example4.tar.gz\">Example4</a>: Abusing the project 1 starter code.</li>\n    <li><a href=\"examples/example5.tar.gz\">Example5</a>: Basic example for using pointers and references</li>\n    <li><a href=\"examples/example6.tar.gz\">Example6</a>: Pass-by-reference quiz</li>\n    <li><a href=\"examples/example7.tar.gz\">Example7</a>: Working with stack allocated arrays</li>\n    <li><a href=\"examples/example8.tar.gz\">Example8</a>: Parsing a CSV file</li>\n    <li><a href=\"examples/example9.tar.gz\">Example9</a>: Working with dynamically allocated arrays</li>\n    <li><a href=\"examples/example10.tar.gz\">Example10</a>: Basic inheritance example</li>\n    <li><a href=\"examples/example11.tar.gz\">Example11</a>: ArrayList class</li>\n    <li><a href=\"examples/example12.tar.gz\">Example12</a>: STL style array passing</li>\n    <li><a href=\"examples/example13.tar.gz\">Example13</a>: Using <strong>dynamic_cast</strong> to safe convert between objects</li>\n    <li><a href=\"examples/example14.tar.gz\">Example14</a>: Using <strong>array</strong>, <strong>vector</strong> and <em>_unordered_map</em> with for-each loops</li>\n    <li><a href=\"examples/example15.tar.gz\">Example15</a>: Generating random numbers</li>\n    <li><a href=\"examples/example16.tar.gz\">Example16</a>: Using pairs and ties for multiple returns</li>\n    <li><a href=\"examples/example17.tar.gz\">Example17</a>: Template functions</li>\n    <li><a href=\"examples/example18.tar.gz\">Example18</a>: Bit operations</li>\n    <li><a href=\"examples/example19.tar.gz\">Example19</a>: Adding exception to the ArrayList of example 11</li>\n    <li><a href=\"examples/example20.tar.gz\">Example20</a>: Using <strong>shared_ptr</strong> and <strong>unique_ptr</strong></li>\n    <li><a href=\"examples/example21.tar.gz\">Example21</a>: Using STL\u2019s find function</li>\n    <li><a href=\"examples/example22.tar.gz\">Example22</a>: ArrayList from Example 11 with an iterator</li>\n  </ul>\n  \n  <h3 id=\"additional-examples\">Additional examples</h3>\n  <p>These some code examples from another offering of this course:<br />\n  <a href=\"http://www.ics.uci.edu/~thornton/ics45c/CodeExamples/\">http://www.ics.uci.edu/~thornton/ics45c/CodeExamples/</a></p>\n  \n  <h2 id=\"projects\">Projects</h2>\n  <p>The majority of your effort in this course will be spent on programming projects; the only way to learn a language is to use the language. All of these projects will be coded entirely in C++, specifically C++14. Programming in C++ requires a level of care beyond that required in a higher level language like Python. So expect the project to take more time than than your previous programming projects. If you have prior experience programming in C, make sure you are programming your projects using C++. In general, make sure you start your project early to allow time for debugging.</p>\n  \n  <p>Your projects will be evaluated based on their <em>correctness</em> and <em>quality</em>.  Specifically, your projects will be evaluated on a 30-point scale. The break down of the points will fall into two categories: correctness and quality.</p>\n  \n  <ul>\n    <li>Correctness (20 points): Does the program compiles, run without error, and meet specifications?</li>\n    <li>Quality (10 points): Is the code readable, well-organized, and easily modifiable?</li>\n  </ul>\n  \n  <p>If your submit code that does not compile, you score will be severely reduced and you may receive a zero on the project. In this course, our target platform will be the Xubuntu 14.04 virtual machine distributed to the class. If your project does not compile on this platform with the build scripts supplied with the project, then it does not compile as far as we are concerned (see <a href=\"project0.html\">Project 0</a> for more information on our virtual machine).</p>\n  \n  <p>Projects are due at 11:50pm on their due date (found on the project\u2019s webpage), with a ten minute grace period.  You will be allowed one 48 hour extension during the course. You are not required to notify us that you are going to use your extension. The first project you submit late will fall under the 48 hour extension. Other than this policy, late work will not be accepted.</p>\n  \n  <p>All projects will be submitted as a single file created by the gather script to the eee dropbox for the course (see <a href=\"project0.html\">Project 0</a> for details). If a project is submitted in a different format, your score will be reduced and you may receive a zero. Under <em>no circumstances</em> will a project be graded if it is submitted via email. You are responsible for submitting the version of the project you want graded. Accidentally submitting the wrong version is <em>not</em> considered grounds for a regrade.</p>\n  \n  <ul>\n    <li>Project 0: <a href=\"project0/\">Adapting to your environment</a></li>\n    <li>Project 1: <a href=\"project1/\">Game of life</a></li>\n    <li>Project 2: <a href=\"project2/\">Wizard\u2019s quest</a></li>\n    <li>Project 3: <a href=\"project3/\">Painting a picture</a></li>\n    <li>Project 4: <a href=\"project4/\">Snake game</a></li>\n  </ul>\n  \n  <h2 id=\"academic-honesty\">Academic honesty</h2>\n  <p>As a student in this course, you are expected to understand and follow the academic honest policies of the University of California, Irvine and the Bren School of Information and Computer Science. Please take a few minutes to familiarize yourself with these <a href=\"http://www.ics.uci.edu/ugrad/policies/#03\">policies</a>.</p>\n  \n  <p>All of your submitted code is expected to be completed solely by you without outside assistance. Sharing code with students in the class is not permitted. Of course, high-level discussion of course material is permitted and encouraged. All submissions will be analyzed by automated plagiarism detection software, which detects similarities in your code with other students code (this quarter and in the past) and code available on the internet. Similarly, in-class exams are expected to be an individual effort. In addition, all exams will be closed-notes and closed-book.</p>\n  \n  <p>Violators of academic honesty policies will be reported and are subject to the penalties described in the policies linked above.</p>\n  \n  <p>Overall, a bad course grade is nowhere near as bad as getting caught cheating.</p>\n  \n  <h2 id=\"accommodations-for-disabilities\">Accommodations for disabilities</h2>\n  <p>If you feel that you may need an accommodation based on the impact of a disability, you should contact me privately to discuss these specific needs. Also, contact the Disability Services Center <a href=\"http://www.disability.uci.edu\">online</a> or by phone at (949) 824-7494 as soon as possible to better ensure that such accommodations, such as alternative test-taking environments or note-taking services, can be arranged for you in a timely way.</p>\n  \n  <h2 id=\"acknowledgments\">Acknowledgments</h2>\n  <p>This course and webpage are in large part based on an offering of this course by <a href=\"http://www.ics.uci.edu/~thornton\">Alex Thornton</a> in Spring 2014.</p>\n \n</body>\n\n</html>\n", "id": 2911.0}