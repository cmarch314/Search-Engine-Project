{"text": "ICS 16 E EECS 114 Programming Project 1 5 Points Due Friday April 15 2 5 at 7pm using the Checkmate Submission System Postfix notation is an unambiguous way of writing an arithmetic expression without parentheses It is defined so that if exp1 op exp2 is a normal fully parenthesized expression whose operation is op then the postfix version of this is pexp1 pexp2 op where pexp1 is the postfix version of exp1 and pexp2 is the postfix version of exp2 The postfix version of a single number is just that number So for example the postfix version of 5 2 8 3 4 is 5 2 8 3 4 Write a Java program that evaluates an expression that is input in postfix notation Your program should support numbers input as integers or floating point doubles and it should support the following operators for addition for subtraction for multiplication for division for exponentiation the power function Note you may use the following classes in your program java lang Math java util Stack java util Scanner You may not use any built in program for exponentiation by an integer however You must write the code for this operator yourself using the fast exponentiation algorithm given in class You should read expressions from System in and output to System out ", "_id": "http://www.ics.uci.edu/~goodrich/teach/ics160e/hw/proj1/", "title": "ics 160e / eecs 114  - programming project 1", "html": "<html>\n\n<head>\n<title>ICS 160E / EECS 114  - Programming Project 1</title>\n</head>\n\n<body bgcolor=\"#FFFFFF\">\n\n<center>\n\n<h2>ICS 160E / EECS 114 - Programming Project 1, 50 Points\n<br>\nDue: Friday, April 15, 2005, at 7pm,\nusing the\n<a href=\"http://checkmate.ics.uci.edu/index.jsp\">\nCheckmate Submission System</a>.\n</h2>\n\n</center>\n\n<p>\n<b>Postfix notation</b> is an unambiguous \nway of writing an arithmetic expression without parentheses.\nIt is defined so that if \n<pre>\n<i>exp1</i> <b>op</b> <i>exp2</i>\n</pre>\nis a normal fully-parenthesized expression whose operation is\n<b>op</b>, then the postfix version of this is \n<pre>\n<i>pexp1</i> <i>pexp2</i> <b>op</b>\n</pre>\nwhere\n<i>pexp1</i> is the postfix version of <i>exp1</i> and\n<i>pexp2</i> is the postfix version of <i>exp2</i>.\nThe postfix version of a single number is just that number.\nSo, for example, the postfix version of \n<pre>\n((5+2)*(8-3))^4 \n</pre>\nis \n<pre>\n5 2 + 8 3 - * 4 ^\n</pre>\nWrite a Java program that evaluates an expression \nthat is input in postfix notation.\nYour program should support numbers input as integers or (floating\npoint) doubles, and it should support the following operators:\n<ul>\n<li>\n+, for addition\n<li> -, for subtraction\n<li> *, for multiplication\n<li> /, for division\n<li> ^, for exponentiation (the power function)\n</ul>\nNote: you may use the following classes in your program:\n<ul>\n<li> <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Math.html\">\njava.lang.Math</a>\n<li> <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Stack.html\">\njava.util.Stack</a>\n<li> <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Scanner.html\">\njava.util.Scanner</a>\n</ul>\nYou may <b>not</b> use any built-in program for exponentiation by an\ninteger, however.  You must write the code for this operator\nyourself, using the fast exponentiation algorithm given in class.\nYou should read expressions from System.in and output to System.out.\n</body>\n\n</html>\n", "id": 16850.0}