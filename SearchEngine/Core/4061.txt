{"text": "CS 269S Winter 2 12 Theory Seminar Bren Hall Room 1423 1pm March 1 2 13 Max flows in O nm time or better Will Devanny We present improved polynomial time algorithms for the max flow problem defined on a network with n nodes and m arcs We show how to solve the max flow problem in O nm time improving upon the best previous algorithm due to King Rao and Tarjan who solved the max flow problem in O nm logm n log n n time In the case that m O n we improve the running time to O n2 log n We further improve the running time in the case that U Umax Umin is not too large where Umax denotes the largest finite capacity and Umin denotes the smallest non zero capacity If log U O n1 3 log 3 n we show how to solve the max flow problem in O nm log n steps In the case that log U O logk n for some fixed positive integer k we show how to solve the max flow problem in n8 3 time This latter algorithm relies on a subroutine for fast matrix multiplication Based on a preprint by James B Orlin ", "_id": "http://www.ics.uci.edu/~theory/269/130301.html", "title": "theory seminar, march 1, 2012", "html": "<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html>\n<head>\n<title>Theory Seminar, March 1, 2012</title>\n</head>\n<body>\n<a href=\"/~theory/\"><img src=\"http://www.ics.uci.edu/~theory/logo/CATOC2.jpg\"></a>\n<h2><a href=\"/~theory/269/\">CS 269S, Winter 2012: Theory Seminar</a><br>\nBren Hall, Room 1423, 1pm\n\n<hr>\nMarch 1, 2013:</h2>\n<h1>\nMax flows in <i>O</i>(<i>nm</i>) time, or better\n</h1>\n<h2>\nWill Devanny\n</h2>\n\n<p>\nWe present improved polynomial time algorithms for the max flow problem\ndefined on a network with <i>n</i> nodes and <i>m</i> arcs. We show how\nto solve the max flow problem in <i>O</i>(<i>nm</i>) time, improving upon the\nbest previous algorithm due to King, Rao, and Tarjan, who\nsolved the max flow problem in\n<nobr><i>O</i>(<i>nm</i> log<sub><i>m</i>/(<i>n</i> log <i>n</i>)</sub> <i>n</i>)</nobr>\ntime. In the case that <nobr><i>m</i> = <i>O</i>(<i>n</i>),</nobr> we\nimprove the running time to <nobr><i>O</i>(<i>n</i><sup>2</sup>/log <i>n</i>).</nobr>\nWe further improve the running time in the case that\n<nobr><i>U</i><sup>*</sup> = <i>U</i><sub>max</sub>/<i>U</i><sub>min</sub></nobr>\nis not too large, where <i>U</i><sub>max</sub> denotes the largest\nfinite capacity and <i>U</i><sub>min</sub> denotes the smallest non-zero\ncapacity. If\n<nobr>log(<i>U</i><sup>*</sup>) = <i>O</i>(n<sup>1/3</sup> log<sup>&minus;3</sup> <i>n</i>),</nobr>\nwe show how to solve the max flow problem in\n<nobr><i>O</i>(<i>nm</i>/log <i>n</i>)</nobr> steps.\nIn the case that\n<nobr>log(<i>U</i><sup>*</sup>) = <i>O</i>(log<sup><i>k</i></sup> <i>n</i>)</nobr>\nfor some fixed positive integer <i>k</i>, we show how to solve the\nmax flow problem in <i>&#213;</i>(n<sup>8/3</sup>) time. This latter\nalgorithm relies on a subroutine for fast matrix multiplication.\n</p>\n\n<p>(Based\non <a href=\"http://jorlin.scripts.mit.edu/docs/papersfolder/O(nm)MaxFlow.pdf\">a\npreprint</a> by James B. Orlin.)</p>\n\n</body>\n</html>\n\n", "id": 4061.0}