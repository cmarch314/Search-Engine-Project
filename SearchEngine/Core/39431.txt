{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Aff transformation 2 Kernel DefinitionThe class Aff transformation 2 Kernel represents two dimensioanl affine transformations The general form of an affine transformation is based on a homogeneous representation of points Thereby all transformations can be realized by matrix multiplications Multiplying the transformation matrix by a scalar does not change the represented transformation Therefore any transformation represented by a matrix with rational entries can be represented by a transformation matrix with integer entries as well Multiply the matrix with the common denominator of the rational entries Hence it is sufficient to use the number type Kernel RT to represent the entries of the transformation matrix CGAL offers several specialized affine transformations Different constructors are provided to create them They are parameterized with a symbolic name to denote the transformation type followed by additional parameters The symbolic name tags solve ambiguities in the function overloading and they make the code more readable i e what type of transformation is created Since two dimensional points have three homogeneous coordinates we have a 3 3 matrix mij i j 2 If the homogeneous representations are normalized the homogenizing coordinate is 1 then the upper left 2 2 matrix realizes linear transformations In the matrix form of a translation the translation vector v v1 1 appears in the last column of the matrix The entries m2 and m21 are always zero and therefore do not appear in the constructors Creation Aff transformation 2 Kernel t Identity transformation introduces an identity transformation Aff transformation 2 Kernel t const Translation Vector 2 Kernel v introduces a translation by a vector v Aff transformation 2 Kernel t const Rotation Direction 2 Kernel d Kernel RT num Kernel RT den RT 1 approximates the rotation over the angle indicated by direction d such that the differences between the sines and cosines of the rotation given by d and the approximating rotation are at most num den each Precondition num den Aff transformation 2 Kernel t const Rotation Kernel RT sine rho Kernel RT cosine rho Kernel RT hw RT 1 introduces a rotation by the angle rho Precondition sine rho2 cosine rho2 hw2 Aff transformation 2 Kernel t const Scaling Kernel RT s Kernel RT hw RT 1 introduces a scaling by a scale factor s hw Aff transformation 2 Kernel t Kernel RT m Kernel RT m 1 Kernel RT m 2 Kernel RT m1 Kernel RT m11 Kernel RT m12 Kernel RT hw RT 1 introduces a general affine transformation in the 3x3 matrix The sub matrix hw 1 contains the scaling and rotation information the vector hw 1 contains the translational part of the transformation Aff transformation 2 Kernel t Kernel RT m Kernel RT m 1 Kernel RT m1 Kernel RT m11 Kernel RT hw RT 1 introduces a general linear transformation i e there is no translational part Operations The main thing to do with transformations is to apply them on geometric objects Each class Class 2 Kernel representing a geometric object has a member function Class 2 Kernel transform Aff transformation 2 Kernel t The transformation classes provide a member function transform for points vectors directions and lines Point 2 Kernel t transform Point 2 Kernel p Vector 2 Kernel t transform Vector 2 Kernel p Direction 2 Kernel t transform Direction 2 Kernel p Line 2 Kernel t transform Line 2 Kernel p CGAL provides function operators for these member functions Point 2 Kernel t operator Point 2 Kernel p Vector 2 Kernel t operator Vector 2 Kernel p Direction 2 Kernel t operator Direction 2 Kernel p Line 2 Kernel t operator Line 2 Kernel p Miscellaneous Aff transformation 2 Kernel t operator s composes two affine transformations Aff transformation 2 Kernel t inverse gives the inverse transformation bool t is even returns true if the transformation is not reflecting i e the determinant of the involved linear transformation is non negative bool t is odd returns true if the transformation is reflecting The matrix entries of a matrix representation of a Aff transformation 2 Kernel can be accessed trough the following member functions Kernel FT t cartesian int i int j Kernel FT t m int i int j returns entry mij in a matrix representation in which m22 is 1 Kernel RT t homogeneous int i int j Kernel RT t hm int i int j returns entry mij in some fixed matrix representation For affine transformations no I O operators are defined See AlsoIdentity transformation Rotation Scaling Translation rational rotation approximation Example typedef Cartesian double K typedef Aff transformation 2 K Transformation typedef Point 2 K Point typedef Vector 2 K Vector typedef Direction 2 K Direction Transformation rotate ROTATION sin pi cos pi Transformation rational rotate ROTATION Direction 1 1 1 1 Transformation translate TRANSLATION Vector 2 Transformation scale SCALING 3 Point q 1 q rational rotate q Point p 1 1 p rotate p p translate p p scale p The same would have been achieved with Transformation transform scale translate rotate p transform Point 1 1 See AlsoCGAL Aff transformation 3 Kernel CGAL Identity transformation CGAL Reflection CGAL Rotation CGAL Scaling CGAL Translation Next Bbox 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Aff_transformation_2.html", "title": "aff_transformation_2&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Aff_transformation_2.tex' -->\n<html> <head>  \n<title>Aff_transformation_2&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_39\"></A>\n\n<A NAME=\"Cross_link_anchor_40\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_41\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Aff_transformation_2<Kernel>\"></A>\n<h2><I>CGAL::Aff_transformation_2&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>The class <I><A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> represents two-dimensioanl affine transformations. \nThe general form of an affine transformation is based on a homogeneous\nrepresentation of points. Thereby all transformations can be realized by\nmatrix multiplications.\n<P>\n\nMultiplying the transformation matrix by a scalar does not change the\nrepresented transformation. Therefore, any transformation represented\nby a matrix with rational entries can be represented by a\ntransformation matrix with integer entries as well. (Multiply the\nmatrix with the common denominator of the rational entries.) Hence, it\nis sufficient to use the number type <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT</I> to represent\nthe entries of the transformation matrix.\n<P>\n\nC<SMALL>GAL</SMALL> offers several specialized affine transformations. Different\nconstructors are provided to create them. They are parameterized with\na symbolic name to denote the transformation type, followed by\nadditional parameters. The symbolic name tags solve ambiguities in the\nfunction overloading and they make the code more readable, i.e., what\ntype of transformation is created.\n<P>\n\nSince two-dimensional points have three homogeneous coordinates, we\nhave a <MATH><I>3 &times; 3</I></MATH> matrix <MATH><I>(m<SUB>ij</SUB>)<SUB>i,j=0...2</SUB></I></MATH>.\n<P>\n\nIf the homogeneous representations are normalized (the homogenizing\ncoordinate is 1), then the upper left <MATH><I>2 &times; 2</I></MATH> matrix realizes\nlinear transformations. In the matrix form of a translation, the\ntranslation vector <MATH><I>(v<SUB>0</SUB>,v<SUB>1</SUB>,1)</I></MATH> appears in the last column of the\nmatrix. The entries <MATH><I>m<SUB>20</SUB></I></MATH> and <MATH><I>m<SUB>21</SUB></I></MATH> are always zero and\ntherefore do not appear in the constructors.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t (  <A HREF=\"Class_Identity_transformation.html#Cross_link_anchor_143\">Identity_transformation</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces an identity transformation.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( const <A HREF=\"Class_Translation.html#Cross_link_anchor_151\">Translation</A>,  <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a translation by a vector <MATH><I>v</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const <A HREF=\"Class_Rotation.html#Cross_link_anchor_147\">Rotation</A>,<BR>\n\n<A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; d,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT num,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT den = RT(1));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    approximates the rotation over the <A HREF=\"Function_angle.html#Cross_link_anchor_153\">angle</A> indicated by direction \n             <MATH><I>d</I></MATH>, such that the differences between the sines and cosines\n             of the rotation given by d and the approximating rotation\n             are at most <MATH><I>num/den</I></MATH> each.<BR>\n\n<EM>Precondition: </EM><MATH><I>num/den&gt;0</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const <A HREF=\"Class_Rotation.html#Cross_link_anchor_147\">Rotation</A>,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT sine_rho,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT cosine_rho,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a rotation by the <A HREF=\"Function_angle.html#Cross_link_anchor_153\">angle</A> <I>rho</I>.<BR>\n\n<EM>Precondition: </EM><MATH><i>sine_rho</i><SUP>2</SUP> + <i>cosine_rho</i><SUP>2</SUP> == \n<i>hw</i><SUP>2</SUP></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const <A HREF=\"Class_Scaling.html#Cross_link_anchor_149\">Scaling</A>,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT s,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a scaling by a scale factor <MATH><I>s/hw</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m00,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m01,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m02,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m10,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m11,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m12,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a general affine transformation in the\n             3x3 matrix <IMG ALIGN=CENTER SRC=\"fig/arrtwo.gif\"> .\n             The sub-matrix <MATH><i>hw</i><SUP>-1</SUP></MATH> <IMG ALIGN=CENTER \n             SRC=\"fig/arrlintwo.gif\"> contains the scaling and rotation \n             information, the vector <MATH><i>hw</i><SUP>-1</SUP></MATH>\n             <IMG ALIGN=CENTER SRC=\"fig/transvectwo.gif\">\n             contains the translational part of the transformation.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m00,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m01,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m10,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT m11,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hw = RT(1));</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a general linear transformation \n             <IMG ALIGN=CENTER \n               SRC=\"fig/arrtwo2.gif\"> ,\n             i.e. there is no translational part.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe main thing to do with transformations is to apply them on\ngeometric objects. Each class <I>Class_2&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> representing\na geometric object has a member function:\n<P>\n\n<I>Class_2&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;  transform(<A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)</I>.\n<P>\n\nThe transformation classes provide a member function <I>transform()</I>\nfor points, vectors, directions, and lines:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_transform6const_Point_26Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.transform (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_26Kernel9_transform6const_Vector_26Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.transform (  <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_26Kernel9_transform6const_Direction_26Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.transform (  <A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Line_26Kernel9_transform6const_Line_26Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.transform (  <A HREF=\"Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nC<SMALL>GAL</SMALL> provides function operators for these member functions:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Point_26Kernel9_operator696const_Point_26Kernel9__p9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.operator() (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Vector_26Kernel9_operator696const_Vector_26Kernel9__p9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.operator() (  <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Direction_26Kernel9_operator696const_Direction_26Kernel9__p9_const;\"></A>\n\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.operator() (  <A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Line_26Kernel9_operator696const_Line_26Kernel9__p9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.operator() (  <A HREF=\"Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Aff_transformation_26Kernel9_operator*6const_Aff_transformation_26Kernel9__s9_const;\"></A>\n\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.operator* (  s)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    composes two affine transformations.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Aff_transformation_26Kernel9_inverse69_const;\"></A>\n<A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.inverse ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    gives the inverse transformation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_even69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.is_even ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, if the transformation is not reflecting,\n        i.e. the determinant of the involved linear transformation is\n        non-negative.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_odd69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.is_odd ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, if the transformation is reflecting.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe matrix entries of a matrix representation of a \n<I><A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>\ncan be accessed trough the following member functions:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_cartesian6int_i+_int_j9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.cartesian ( int i,  int j)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_m6int_i+_int_j9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.m ( int i,  int j)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns entry <MATH><I>m<SUB>ij</SUB></I></MATH> in a matrix representation in which <MATH><I>m<SUB>22</SUB></I></MATH> is 1.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_homogeneous6int_i+_int_j9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.homogeneous ( int i,  int j)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_hm6int_i+_int_j9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    t.hm ( int i,  int j)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns entry <MATH><I>m<SUB>ij</SUB></I></MATH> in some fixed matrix representation.\n        </TD></TR>\n        </TABLE>\n<P>\n\nFor affine transformations  no I/O operators are defined.\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Identity_transformation.html#Cross_link_anchor_143\">Identity_transformation</A></I>, \n<I><A HREF=\"Class_Rotation.html#Cross_link_anchor_147\">Rotation</A></I>, \n<I><A HREF=\"Class_Scaling.html#Cross_link_anchor_149\">Scaling</A></I>,\n<I><A HREF=\"Class_Translation.html#Cross_link_anchor_151\">Translation</A></I><BR>\n\n<I><A HREF=\"Function_rational_rotation_approximation.html#Cross_link_anchor_253\">rational_rotation_approximation</A></I>\n<P>\n\n<H3>Example</H3>\n<P>\n\n<PRE>\n  typedef <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt;        K;\n  typedef <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;K&gt;  Transformation;\n  typedef <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;K&gt;               Point;\n  typedef <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;K&gt;              <A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A>;\n  typedef <A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;K&gt;           Direction;\n\n  Transformation rotate(ROTATION, sin(pi), cos(pi));\n  Transformation rational_rotate(ROTATION,Direction(1,1), 1, 100);\n  Transformation translate(TRANSLATION, <A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A>(-2, 0));\n  Transformation scale(SCALING, 3);\n\n  Point q(0, 1);\n  q = rational_rotate(q); \n\n  Point p(1, 1);\n\n  p = rotate(p); \n\n  p = translate(p); \n\n  p = scale(p);\n</PRE>\n<P>\n\nThe same would have been achieved with\n<P>\n\n<PRE>\n\n  Transformation transform = scale * (translate * rotate);\n  p = transform(Point(1.0, 1.0));\n</PRE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Aff_transformation_3.html#Cross_link_anchor_63\">CGAL::Aff_transformation_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I><A HREF=\"Class_Identity_transformation.html#Cross_link_anchor_142\">CGAL::Identity_transformation</A></I><BR>\n\n<I><A HREF=\"Class_Reflection.html#Cross_link_anchor_144\">CGAL::Reflection</A></I><BR>\n\n<I><A HREF=\"Class_Rotation.html#Cross_link_anchor_146\">CGAL::Rotation</A></I><BR>\n\n<I><A HREF=\"Class_Scaling.html#Cross_link_anchor_148\">CGAL::Scaling</A></I><BR>\n\n<I><A HREF=\"Class_Translation.html#Cross_link_anchor_150\">CGAL::Translation</A></I><BR>\n\n\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Bbox_2.html\"><I>Bbox_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39431.0}