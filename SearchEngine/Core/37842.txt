{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL compose DefinitionThe function compose is used to compose functors f fn into each other thereby creating a new functor f The first argument f always denotes the base functor for which the remaining functors f1 fn provide the arguments If we denote the arity of a functor f by ar f then ar f i 1n ar fi i e the arguments of f are distributed among f1 fn according to their respective arity Between one and three functors can be composed into the base functor giving raise to a functor of arity at most five As an example consider a binary functor f and two functors f1 and f2 with arity three and two respectively Composing f1 and f2 into f yields a new functor f x x1 x2 x3 x4 f f1 x x1 x2 f2 x3 x4 with arity five include CGAL functional h template class F class F1 typename Compose F F1 Type compose F f F1 f1 returns the functor f f1 with the same arity as f1 Requirement f is unary function arity 1 f and f1 are models for AdaptableFunctor template class F class F1 class F2 typename Compose F F1 F2 Type compose F f F1 f1 F2 f2 returns the functor f f1 f2 with arity equal to ar f1 ar f2 Requirement f is binary function arity 2 f f1 and f2 are models for AdaptableFunctor template class F class F1 class F2 class F3 typename Compose F F1 F2 F3 Type compose F f F1 f1 F2 f2 F3 f3 returns the functor f f1 f2 f3 with arity equal to ar f1 ar f2 ar f3 Requirement f is ternary function arity 3 f f1 f2 and f3 are models for AdaptableFunctor See AlsoCGAL Compose F F1 F2 F3 CGAL compose shared AdaptableFunctor Next compose shared Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/STL_Extension_ref/Function_compose.html", "title": "compose", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './STL_Extension_ref/stl_extension.tex' -->\n<html> <head>  \n<title>compose</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1493\"></A>\n\n<A NAME=\"Cross_link_anchor_1494\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1452\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::compose\"></A>\n<h2><I>CGAL::compose</I></h2>\n\n\n  <H3>Definition</H3>The function <I><A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A></I> is used to <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> functors\n  <MATH><I>f<SUB>0</SUB>,...,f<SUB>n</SUB></I></MATH> into each other, thereby creating a new functor\n  <MATH><I>f</I></MATH>. The first argument <MATH><I>f<SUB>0</SUB></I></MATH> always denotes the base functor, for\n  which the remaining functors <MATH><I>f<SUB>1</SUB>,...,f<SUB>n</SUB></I></MATH> provide the\n  arguments. If we denote the arity of a functor <MATH><I>f</I></MATH> by <MATH><I>ar(f)</I></MATH>, then\n  <MATH><I>ar(f) =  <IMG BORDER=0 WIDTH=13 HEIGHT=24 ALIGN=MIDDLE SRC=\"cc_sum.gif\"> <SUB>i=1</SUB><SUP>n</SUP> ar(f<SUB>i</SUB>)</I></MATH>, i.e., the arguments of <MATH><I>f</I></MATH> are\n  distributed among <MATH><I>f<SUB>1</SUB>,...,f<SUB>n</SUB></I></MATH> according to their respective\n  arity. Between one and three functors can be composed into the base\n  functor, giving raise to a functor of arity at most five.\n<P>\n\nAs an example, consider a binary functor <MATH><I>f<SUB>0</SUB></I></MATH> and two functors\n  <MATH><I>f<SUB>1</SUB></I></MATH> and <MATH><I>f<SUB>2</SUB></I></MATH>, with arity three and two, respectively. Composing\n  <MATH><I>f<SUB>1</SUB></I></MATH> and <MATH><I>f<SUB>2</SUB></I></MATH> into <MATH><I>f<SUB>0</SUB></I></MATH> yields a new functor\n  <P ALIGN=CENTER>\n<MATH><I>\n  f:(x<SUB>0</SUB>,x<SUB>1</SUB>,x<SUB>2</SUB>,x<SUB>3</SUB>,x<SUB>4</SUB>)  <IMG BORDER=0 WIDTH=15 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_mapsto.gif\"> f<SUB>0</SUB>(f<SUB>1</SUB>(x<SUB>0</SUB>,x<SUB>1</SUB>,x<SUB>2</SUB>),f<SUB>2</SUB>(x<SUB>3</SUB>,x<SUB>4</SUB>))\n  </I></MATH>\n<P>\n\nwith arity five.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/functional.h\">CGAL/functional.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class F0, class F1 &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_typename_Compose6_F0+_F1_9::Type_compose6const_F0__f0+_const_F1__f19;\"></A>\ntypename <A HREF=\"Class_Compose.html#Cross_link_anchor_1504\">Compose</A>&lt; F0, F1 &gt;::Type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> (  F0 f0,  F1 f1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the functor\n    <I>f0</I>(<I>f1</I>(<MATH><I> &middot; </I></MATH>)) with the same arity as <I>f1</I>.<BR>\n\n<EM>Requirement: </EM><I>f0</I> is unary function\n    (arity&nbsp;1). <I>f0</I> and <I>f1</I> are models for\n    <I><A HREF=\"FunctionObjectConcept_AdaptableFunctor.html#Cross_link_anchor_1509\">AdaptableFunctor</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class F0, class F1, class F2 &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_typename_Compose6_F0+_F1+_F2_9::Type_compose6const_F0__f0+_const_F1__f1+_const_F2__f29;\"></A>\ntypename <A HREF=\"Class_Compose.html#Cross_link_anchor_1504\">Compose</A>&lt; F0, F1, F2 &gt;::Type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> (  F0 f0,  F1 f1,  F2 f2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the functor\n    <I>f0</I>(<I>f1</I>(<MATH><I> &middot; </I></MATH>),<MATH><I></I></MATH><I>f2</I>(<MATH><I> &middot; </I></MATH>)) with arity equal\n    to <MATH><I>ar(<I>f1</I>)+ar(<I>f2</I>)</I></MATH>.<BR>\n\n<EM>Requirement: </EM><I>f0</I> is binary function (arity&nbsp;2). <I>f0</I>, <I>f1</I>, and\n    <I>f2</I> are models for <I><A HREF=\"FunctionObjectConcept_AdaptableFunctor.html#Cross_link_anchor_1509\">AdaptableFunctor</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class F0, class F1, class F2, class F3 &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_typename_Compose6_F0+_F1+_F2+_F3_9::Type_compose6const_F0__f0+_const_F1__f1+_const_F2__f2+_const_F3__f39;\"></A>\ntypename <A HREF=\"Class_Compose.html#Cross_link_anchor_1504\">Compose</A>&lt; F0, F1, F2, F3 &gt;::Type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Function_compose.html#Cross_link_anchor_1494\">compose</A> (  F0 f0,  F1 f1,  F2 f2,  F3 f3)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the functor\n    <I>f0</I>(<I>f1</I>(<MATH><I> &middot; </I></MATH>),<MATH><I></I></MATH><I>f2</I>(<MATH><I> &middot; </I></MATH>),<MATH><I></I></MATH><I>f3</I>(<MATH><I> &middot; </I></MATH>))\n    with arity equal to <MATH><I>ar(<I>f1</I>)+ar(<I>f2</I>)+ar(<I>f3</I>)</I></MATH>.<BR>\n\n<EM>Requirement: </EM><I>f0</I> is ternary function\n    (arity&nbsp;3). <I>f0</I>, <I>f1</I>, <I>f2</I>, and <I>f3</I> are models\n    for <I><A HREF=\"FunctionObjectConcept_AdaptableFunctor.html#Cross_link_anchor_1509\">AdaptableFunctor</A></I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Compose.html#Cross_link_anchor_1503\">CGAL::Compose</A>&lt;F0,F1,F2,F3&gt;</I><BR>\n\n<I><A HREF=\"Function_compose_shared.html#Cross_link_anchor_1495\">CGAL::compose_shared</A></I><BR>\n\n<I><A HREF=\"FunctionObjectConcept_AdaptableFunctor.html#Cross_link_anchor_1509\">AdaptableFunctor</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_compose_shared.html\"><I>compose_shared</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37842.0}