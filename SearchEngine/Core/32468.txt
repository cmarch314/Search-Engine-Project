{"text": "Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD org itr rescue dataGuard localFileSystem Class JFMFile java lang Object org itr rescue dataGuard localFileSystem JFMFile All Implemented Interfaces java lang Comparable Direct Known Subclasses JFMLocalFile public abstract class JFMFileextends java lang Objectimplements java lang Comparable This class is the base class of an File object It is supposed to be implemented by every filesystem implementation The methods implemented by this class are very similar to those offered by the java io File class found in the JDK Even the comments are the same Why Because IMHO java io File represents a very good abstractisation of an file object but I can t use it because of the way its implemented Or I haven t found a way to use it yet If somebody will point me to the proper documentation i will be more than happy to study it to see how can I improve my skills Author sergiu Field Summary protected java lang Objectdata This object holds the data required for the implementing file to initialize itself protected java lang StringdisplayName This parameter if setted to a different value than null determines what the toString method will return protected booleanmarked This parameter is set to true when the file is marked in the view protected java util Hashtable java lang String java lang String multiPart This parameter contains the id of each file which this file has been splitted Constructor SummaryJFMFile java lang Object data Constructor Method Summary abstract booleancanRead Tests whether the application can read the file denoted by the abstract pathname abstract booleancanWrite Tests whether the application can modify to the file denoted by the abstract pathname abstract intcompareTo JFMFile pathname Compares two abstract pathnames lexicographically intcompareTo java lang Object o Compares this abstract pathname to another object abstract JFMFilecreateFile java lang String name Creates the file named by the abstract pathname denoted by the parameter abstract booleandelete Deletes the file or directory denoted by the abstract pathname abstract booleanequals java lang Object obj Tests this abstract pathname for equality with the given object abstract booleanexists Tests whether the file or directory denoted by the abstract pathname exists abstract JFMFilegetAbsoluteFile Returns the absolute form of this abstract pathname abstract java lang StringgetAbsolutePath Returns the absolute pathname string of this abstract pathname abstract JFMFilegetCanonicalFile Returns the canonical form of this abstract pathname abstract java lang StringgetCanonicalPath Returns the canonical pathname string of this abstract pathname java lang StringgetDisplayName Returns the display name java io FilegetFile gets the content of the JFMFile if it exists abstract javax swing IcongetIcon Returns the filesystem s icon associated with this file or null if it can t be determined abstract java io InputStreamgetInputStream Returns an InputStream to read from this file or null if it can t be done the filesystem doesn t support it abstract java lang StringgetMimeType This method returns the string that represents the mime type of this file or null if it can t be determined java util Hashtable java lang String java lang String getMultiPart gets the hashtbale multipart abstract java lang StringgetName This string represents the short name of the file e g abstract java io OutputStreamgetOutputStream Returns an OutputStream to write to this file or null if the write operation isn t supported or doesn t make sense from the filesystem s point of view abstract java lang StringgetParent Returns the pathname string of this abstract pathname s parent or null if this pathname does not name a parent directory abstract JFMFilegetParentFile Returns the abstract pathname of this abstract pathname s parent or null if this pathname does not name a parent directory abstract java lang StringgetPath Converts this abstract pathname into a pathname string JFMFilegetRootDriveFile This method returns the root directory of the filesystem of witch the file belongs to abstract java lang StringgetSystemDisplayName Returns the system display name as returned by the filesystem viewer or null abstract inthashCode Computes a hash code for this abstract pathname abstract booleanisAbsolute Tests whether this abstract pathname is absolute abstract booleanisDirectory Tests whether the file denoted by this abstract pathname is a directory abstract booleanisFile Tests whether the file denoted by this abstract pathname is a normal file abstract booleanisHidden Tests whether the file named by this abstract pathname is a hidden file booleanisMarked Returns true if the file has been marked in the view false otherwise abstract longlastModified Returns the time that the file denoted by this abstract pathname was last modified abstract longlength Returns the length of the file denoted by this abstract pathname abstract JFMFile listFiles Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname abstract JFMFilemkdir java lang String name Creates the directory named by the abstract pathname denoted by the parameter voidsetDisplayName java lang String displayName Sets the display name voidsetMarked boolean flag Sets the marked flag voidsetMultiPart java util Hashtable java lang String java lang String multiPart Sets the hashtbale multipart java lang StringtoString If getDisplayName return null it returns the pathname string of this abstract pathname Methods inherited from class java lang Objectclone finalize getClass notify notifyAll wait wait wait Field Detail data protected java lang Object data This object holds the data required for the implementing file to initialize itself In the case of an local file the absolute pathname String would be required In the case of other implementing filesystems it may contain other stuff Usualy it will be used by the implementing filesystem displayName protected java lang String displayName This parameter if setted to a different value than null determines what the toString method will return marked protected boolean marked This parameter is set to true when the file is marked in the view multiPart protected java util Hashtable java lang String java lang String multiPart This parameter contains the id of each file which this file has been splitted Constructor Detail JFMFile public JFMFile java lang Object data Constructor Method Detail listFiles public abstract JFMFile listFiles Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname If this abstract pathname does not denote a directory then this method returns null Otherwise an array of File objects is returned one for each file or directory in the directory Pathnames denoting the directory itself and the directory s parent directory are not included in the result Each resulting abstract pathname is constructed from this abstract pathname using the File File String constructor Therefore if this pathname is absolute then each resulting pathname is absolute if this pathname is relative then each resulting pathname will be relative to the same directory There is no guarantee that the name strings in the resulting array will appear in any specific order they are not in particular guaranteed to appear in alphabetical order Returns An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname The array will be empty if the directory is empty Returns null if this abstract pathname does not denote a directory or if an I O error occurs Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the directory getInputStream public abstract java io InputStream getInputStream Returns an InputStream to read from this file or null if it can t be done the filesystem doesn t support it Returns an InputStream to read from the file getOutputStream public abstract java io OutputStream getOutputStream Returns an OutputStream to write to this file or null if the write operation isn t supported or doesn t make sense from the filesystem s point of view The way that this is implemented in every filesystem can vary The call to this method might get the file to be emptied as in the LocalFileSystem implementation You have been warned Returns An OutputStream to write to this file getName public abstract java lang String getName This string represents the short name of the file e g foo txt getParent public abstract java lang String getParent Returns the pathname string of this abstract pathname s parent or null if this pathname does not name a parent directory The parent of an abstract pathname consists of the pathname s prefix if any and each name in the pathname s name sequence except for the last If the name sequence is empty then the pathname does not name a parent directory Returns The pathname string of the parent directory named by this abstract pathname or null if this pathname does not name a parent getParentFile public abstract JFMFile getParentFile Returns the abstract pathname of this abstract pathname s parent or null if this pathname does not name a parent directory The parent of an abstract pathname consists of the pathname s prefix if any and each name in the pathname s name sequence except for the last If the name sequence is empty then the pathname does not name a parent directory Returns The abstract pathname of the parent directory named by this abstract pathname or null if this pathname does not name a parent getPath public abstract java lang String getPath Converts this abstract pathname into a pathname string The resulting string uses the default name separator character to separate the names in the name sequence Returns The string form of this abstract pathname isAbsolute public abstract boolean isAbsolute Tests whether this abstract pathname is absolute The definition of absolute pathname is system dependent On UNIX systems a pathname is absolute if its prefix is On Microsoft Windows systems a pathname is absolute if its prefix is a drive specifier followed by or if its prefix is Some other filesystems implementations FTP NFS SMB etc can have their own definition of the absolute pathname ven though I would recommend sticking to the UNIX definition Returns true if this abstract pathname is absolute false otherwise getAbsolutePath public abstract java lang String getAbsolutePath Returns the absolute pathname string of this abstract pathname If this abstract pathname is already absolute then the pathname string is simply returned as if by the getPath method If this abstract pathname is the empty abstract pathname then the pathname string of the current user directory which is named by the system property user dir is returned Otherwise this pathname is resolved in a system dependent way On UNIX systems a relative pathname is made absolute by resolving it against the current user directory On Microsoft Windows systems a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname if any if not it is resolved against the current user directory Returns The absolute pathname string denoting the same file or directory as this abstract pathname Throws java lang SecurityException If a required system property value cannot be accessed See Also org jfm md filesystems JFMFile isAbsolute getAbsoluteFile public abstract JFMFile getAbsoluteFile Returns the absolute form of this abstract pathname Returns The absolute abstract pathname denoting the same file or directory as this abstract pathname Throws java lang SecurityException If a required system property value cannot be accessed getCanonicalPath public abstract java lang String getCanonicalPath throws FSException Returns the canonical pathname string of this abstract pathname A canonical pathname is both absolute and unique The precise definition of canonical form is system dependent This method first converts this pathname to absolute form if necessary as if by invoking the getAbsolutePath method and then maps it to its unique form in a system dependent way This typically involves removing redundant names such as and from the pathname resolving symbolic links on UNIX platforms and converting drive letters to a standard case on Microsoft Windows platforms Every pathname that denotes an existing file or directory has a unique canonical form Every pathname that denotes a nonexistent file or directory also has a unique canonical form The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created Similarly the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is deleted Returns The canonical pathname string denoting the same file or directory as this abstract pathname Throws FSException If an filesystem error occurs which is possible because the construction of the canonical pathname may require filesystem queries java lang SecurityException If a required system property value cannot be accessed getCanonicalFile public abstract JFMFile getCanonicalFile throws FSException Returns the canonical form of this abstract pathname Returns The canonical pathname string denoting the same file or directory as this abstract pathname Throws FSException If an filesystem error occurs which is possible because the construction of the canonical pathname may require filesystem queries java lang SecurityException If a required system property value cannot be accessed isDirectory public abstract boolean isDirectory Tests whether the file denoted by this abstract pathname is a directory Returns true if and only if the file denoted by this abstract pathname exists and is a directory false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file isFile public abstract boolean isFile Tests whether the file denoted by this abstract pathname is a normal file A file is normal if it is not a directory and in addition satisfies other system dependent criteria Any non directory file created by a Java application is guaranteed to be a normal file Returns true if and only if the file denoted by this abstract pathname exists and is a normal file false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file isHidden public abstract boolean isHidden Tests whether the file named by this abstract pathname is a hidden file The exact definition of hidden is system dependent On UNIX systems a file is considered to be hidden if its name begins with a period character On Microsoft Windows systems a file is considered to be hidden if it has been marked as such in the filesystem Returns true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file lastModified public abstract long lastModified Returns the time that the file denoted by this abstract pathname was last modified Returns A long value representing the time the file was last modified measured in milliseconds since the epoch GMT January 1 197 or L if the file does not exist or if an I O error occurs Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file length public abstract long length Returns the length of the file denoted by this abstract pathname The return value is unspecified if this pathname denotes a directory Returns The length in bytes of the file denoted by this abstract pathname or L if the file does not exist Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file compareTo public abstract int compareTo JFMFile pathname Compares two abstract pathnames lexicographically The ordering defined by this method depends upon the underlying system On UNIX systems alphabetic case is significant in comparing pathnames on Microsoft Windows systems it is not Parameters pathname The abstract pathname to be compared to this abstract pathname Returns Zero if the argument is equal to this abstract pathname a value less than zero if this abstract pathname is lexicographically less than the argument or a value greater than zero if this abstract pathname is lexicographically greater than the argument compareTo public int compareTo java lang Object o Compares this abstract pathname to another object If the other object is an abstract pathname then this function behaves like compareTo JFMFile Otherwise it throws a ClassCastException since abstract pathnames can only be compared to abstract pathnames Specified by compareTo in interface java lang Comparable Parameters o The Object to be compared to this abstract pathname Returns If the argument is an abstract pathname returns zero if the argument is equal to this abstract pathname a value less than zero if this abstract pathname is lexicographically less than the argument or a value greater than zero if this abstract pathname is lexicographically greater than the argument Throws ClassCastException if the argument is not an abstract pathnameSee Also Comparable equals public abstract boolean equals java lang Object obj Tests this abstract pathname for equality with the given object Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname Whether or not two abstract pathnames are equal depends upon the underlying system On UNIX systems alphabetic case is significant in comparing pathnames on Microsoft Windows systems it is not With other filesystems implementation it s their responsability to decide wether it should be case sensitive or not Overrides equals in class java lang Object Parameters obj The object to be compared with this abstract pathname Returns true if and only if the objects are the same false otherwise hashCode public abstract int hashCode Computes a hash code for this abstract pathname Because equality of abstract pathnames is inherently system dependent so is the computation of their hash codes On UNIX systems the hash code of an abstract pathname is equal to the exclusive or of its pathname string and the decimal value 1234321 On Microsoft Windows systems the hash code is equal to the exclusive or of its pathname string convered to lower case and the decimal value 1234321 Overrides hashCode in class java lang Object Returns A hash code for this abstract pathname toString public java lang String toString If getDisplayName return null it returns the pathname string of this abstract pathname This is just the string returned by the getPath method Otherwise it just returns the displayName Overrides toString in class java lang Object Returns The string form of this abstract pathname getSystemDisplayName public abstract java lang String getSystemDisplayName Returns the system display name as returned by the filesystem viewer or null Returns getMimeType public abstract java lang String getMimeType This method returns the string that represents the mime type of this file or null if it can t be determined Returns the mime type of this file getRootDriveFile public JFMFile getRootDriveFile This method returns the root directory of the filesystem of witch the file belongs to For example If the active filesystem is the local filesystem and is an Windows filesystem this method should return the drive letter of the drive that this file belongs to On Unix filesystems it will always return On other filesystems it will return whatever the one that implements it wants to Returns JFMFile the root drive it cannot be null It can be the same file that was passed as an argument getDisplayName public java lang String getDisplayName Returns the display name Returns String the display name setDisplayName public void setDisplayName java lang String displayName Sets the display name Parameters displayName String the new display name canRead public abstract boolean canRead Tests whether the application can read the file denoted by the abstract pathname Parameters file The file that denotes the abstract pathname Returns true if and only if the file specified by this abstract pathname exists and can be read by the application false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file canWrite public abstract boolean canWrite Tests whether the application can modify to the file denoted by the abstract pathname Parameters file The file that denotes the abstract pathname Returns true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method denies write access to the file exists public abstract boolean exists Tests whether the file or directory denoted by the abstract pathname exists Parameters file The file that denotes the abstract pathname Returns true if and only if the file or directory denoted by this abstract pathname exists false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkRead java lang String method denies read access to the file or directory mkdir public abstract JFMFile mkdir java lang String name Creates the directory named by the abstract pathname denoted by the parameter Parameters file The file that denotes the abstract pathname Returns The new file object created or null otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method does not permit the named directory to be created createFile public abstract JFMFile createFile java lang String name Creates the file named by the abstract pathname denoted by the parameter Parameters file The file that denotes the abstract pathname Returns The new file object created or null otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkWrite java lang String method does not permit the named directory to be created delete public abstract boolean delete Deletes the file or directory denoted by the abstract pathname If this pathname denotes a directory then the directory must be empty in order to be deleted Parameters file The file that denotes the abstract pathname Returns true if and only if the file or directory is successfully deleted false otherwise Throws java lang SecurityException If a security manager exists and its SecurityManager checkDelete java lang String method denies delete access to the file getIcon public abstract javax swing Icon getIcon Returns the filesystem s icon associated with this file or null if it can t be determined Returns The filesystem s icon associated with this file or null if it can t be determined isMarked public boolean isMarked Returns true if the file has been marked in the view false otherwise Returns true if the file has been marked in the view false otherwise setMarked public void setMarked boolean flag Sets the marked flag This method is usually called by the UI View to signal that the file has been marked for selection It helps to draw the file name with another color and to perform operations on the file Parameters flag setMultiPart public void setMultiPart java util Hashtable java lang String java lang String multiPart Sets the hashtbale multipart This method is called when the file is too big and must be splitted The hashtable cointains the information about every small file Parameters multiPart getMultiPart public java util Hashtable java lang String java lang String getMultiPart gets the hashtbale multipart This method is usually called when I want to check if this file is too big or not checking the size of the hashtable getFile public java io File getFile gets the content of the JFMFile if it exists Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD", "_id": "http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMFile.html", "title": "\r\njfmfile\r\n", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<!--NewPage-->\r\n<HTML>\r\n<HEAD>\r\n<!-- Generated by javadoc (build 1.6.0_01) on Tue Jul 03 14:38:37 PDT 2007 -->\r\n<TITLE>\r\nJFMFile\r\n</TITLE>\r\n\r\n<META NAME=\"date\" CONTENT=\"2007-07-03\">\r\n\r\n<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../../../../stylesheet.css\" TITLE=\"Style\">\r\n\r\n<SCRIPT type=\"text/javascript\">\r\nfunction windowTitle()\r\n{\r\n    if (location.href.indexOf('is-external=true') == -1) {\r\n        parent.document.title=\"JFMFile\";\r\n    }\r\n}\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n</NOSCRIPT>\r\n\r\n</HEAD>\r\n\r\n<BODY BGCOLOR=\"white\" onload=\"windowTitle();\">\r\n<HR>\r\n\r\n\r\n<!-- ========= START OF TOP NAVBAR ======= -->\r\n<A NAME=\"navbar_top\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_top\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_top_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMFile.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMClassLoader.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMFile.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF=\"#field_summary\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;<A HREF=\"#field_detail\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_top\"></A>\r\n<!-- ========= END OF TOP NAVBAR ========= -->\r\n\r\n<HR>\r\n<!-- ======== START OF CLASS DATA ======== -->\r\n<H2>\r\n<FONT SIZE=\"-1\">\r\norg.itr_rescue.dataGuard.localFileSystem</FONT>\r\n<BR>\r\nClass JFMFile</H2>\r\n<PRE>\r\njava.lang.Object\r\n  <IMG SRC=\"../../../../resources/inherit.gif\" ALT=\"extended by \"><B>org.itr_rescue.dataGuard.localFileSystem.JFMFile</B>\r\n</PRE>\r\n<DL>\r\n<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Comparable</DD>\r\n</DL>\r\n<DL>\r\n<DT><B>Direct Known Subclasses:</B> <DD><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMLocalFile</A></DD>\r\n</DL>\r\n<HR>\r\n<DL>\r\n<DT><PRE>public abstract class <B>JFMFile</B><DT>extends java.lang.Object<DT>implements java.lang.Comparable</DL>\r\n</PRE>\r\n\r\n<P>\r\nThis class is the base class of an File object. It is supposed to be implemented by every filesystem implementation.\n The methods implemented by this class are very similar to those offered by the java.io.File class found in the JDK.\n Even the comments are the same. Why? Because, IMHO, java.io.File represents a very good abstractisation of an file object\n but I can't use it, because of the way its implemented. Or ... I haven't found a way to use it yet.\n If somebody will point me to the proper documentation, i will be more than happy to study it, to see how can I improve my skills.\r\n<P>\r\n\r\n<P>\r\n<DL>\r\n<DT><B>Author:</B></DT>\r\n  <DD>sergiu</DD>\r\n</DL>\r\n<HR>\r\n\r\n<P>\r\n<!-- =========== FIELD SUMMARY =========== -->\r\n\r\n<A NAME=\"field_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Field Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>protected &nbsp;java.lang.Object</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#data\">data</A></B></CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This object holds the data required for the implementing file to initialize itself.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>protected &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#displayName\">displayName</A></B></CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This parameter, if setted to a different value than <code>null</code> determines what the toString() method will return</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>protected &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#marked\">marked</A></B></CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This parameter is set to true when the file is marked in the view.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>protected &nbsp;java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#multiPart\">multiPart</A></B></CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This parameter contains the id of each file which this\n file has been splitted.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<!-- ======== CONSTRUCTOR SUMMARY ======== -->\r\n\r\n<A NAME=\"constructor_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Constructor Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#JFMFile(java.lang.Object)\">JFMFile</A></B>(java.lang.Object&nbsp;data)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<!-- ========== METHOD SUMMARY =========== -->\r\n\r\n<A NAME=\"method_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Method Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canRead()\">canRead</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can read the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canWrite()\">canWrite</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can modify to the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;int</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">compareTo</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;pathname)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares two abstract pathnames lexicographically.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;int</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(java.lang.Object)\">compareTo</A></B>(java.lang.Object&nbsp;o)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares this abstract pathname to another object.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#createFile(java.lang.String)\">createFile</A></B>(java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the file named by the abstract pathname denoted by the parameter.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#delete()\">delete</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the file or directory denoted by the abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#equals(java.lang.Object)\">equals</A></B>(java.lang.Object&nbsp;obj)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests this abstract pathname for equality with the given object.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#exists()\">exists</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file or directory denoted by the abstract pathname\n exists.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsoluteFile()\">getAbsoluteFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute form of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()\">getAbsolutePath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute pathname string of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalFile()\">getCanonicalFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical form of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalPath()\">getCanonicalPath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical pathname string of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getDisplayName()\">getDisplayName</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the display name</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.io.File</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getFile()\">getFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets the content of the JFMFile if it exists.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;javax.swing.Icon</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getIcon()\">getIcon</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the filesystem's icon associated with this file, or null if it can't be determined.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.io.InputStream</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getInputStream()\">getInputStream</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMimeType()\">getMimeType</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the string that represents the mime-type of this file, or null if it can't be determined.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMultiPart()\">getMultiPart</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets the hashtbale multipart.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getName()\">getName</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This string represents the short name of the file (e.g.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.io.OutputStream</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getOutputStream()\">getOutputStream</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an OutputStream to write to this file, or null if the write operation isn't supported\n (or doesn;t make sense from the filesystem's point of view).</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParent()\">getParent</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the pathname string of this abstract pathname's parent, or\n <code>null</code> if this pathname does not name a parent directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParentFile()\">getParentFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the abstract pathname of this abstract pathname's parent,\n or <code>null</code> if this pathname does not name a parent\n directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\">getPath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts this abstract pathname into a pathname string.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getRootDriveFile()\">getRootDriveFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the root directory of the filesystem of witch the file belongs to.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getSystemDisplayName()\">getSystemDisplayName</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the system display name as returned by the filesystem viewer, or null</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;int</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#hashCode()\">hashCode</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computes a hash code for this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isAbsolute()\">isAbsolute</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether this abstract pathname is absolute.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isDirectory()\">isDirectory</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a\n directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isFile()\">isFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a normal\n file.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isHidden()\">isHidden</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file named by this abstract pathname is a hidden\n file.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isMarked()\">isMarked</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if the file has been marked in the view, false otherwise</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;long</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#lastModified()\">lastModified</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the time that the file denoted by this abstract pathname was\n last modified.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;long</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#length()\">length</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the length of the file denoted by this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[]</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#listFiles()\">listFiles</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>abstract &nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#mkdir(java.lang.String)\">mkdir</A></B>(java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the directory named by the abstract pathname denoted by the parameter.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;void</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setDisplayName(java.lang.String)\">setDisplayName</A></B>(java.lang.String&nbsp;displayName)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the display name</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;void</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMarked(boolean)\">setMarked</A></B>(boolean&nbsp;flag)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the marked flag.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;void</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMultiPart(java.util.Hashtable)\">setMultiPart</A></B>(java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;&nbsp;multiPart)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the hashtbale multipart.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#toString()\">toString</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If <code>getDisplayName()</code> return null it  returns the pathname string of this abstract pathname.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;<A NAME=\"methods_inherited_from_class_java.lang.Object\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">\r\n<TH ALIGN=\"left\"><B>Methods inherited from class java.lang.Object</B></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</CODE></TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<P>\r\n\r\n<!-- ============ FIELD DETAIL =========== -->\r\n\r\n<A NAME=\"field_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Field Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"data\"><!-- --></A><H3>\r\ndata</H3>\r\n<PRE>\r\nprotected java.lang.Object <B>data</B></PRE>\r\n<DL>\r\n<DD>This object holds the data required for the implementing file to initialize itself.\n In the case of an local file, the absolute pathname (String) would be required.\n In the case of other implementing filesystems, it may contain other stuff.\n Usualy it will be used by the implementing filesystem.\r\n<P>\r\n<DL>\r\n</DL>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"displayName\"><!-- --></A><H3>\r\ndisplayName</H3>\r\n<PRE>\r\nprotected java.lang.String <B>displayName</B></PRE>\r\n<DL>\r\n<DD>This parameter, if setted to a different value than <code>null</code> determines what the toString() method will return\r\n<P>\r\n<DL>\r\n</DL>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"marked\"><!-- --></A><H3>\r\nmarked</H3>\r\n<PRE>\r\nprotected boolean <B>marked</B></PRE>\r\n<DL>\r\n<DD>This parameter is set to true when the file is marked in the view.\r\n<P>\r\n<DL>\r\n</DL>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"multiPart\"><!-- --></A><H3>\r\nmultiPart</H3>\r\n<PRE>\r\nprotected java.util.Hashtable&lt;java.lang.String,java.lang.String&gt; <B>multiPart</B></PRE>\r\n<DL>\r\n<DD>This parameter contains the id of each file which this\n file has been splitted.\r\n<P>\r\n<DL>\r\n</DL>\r\n</DL>\r\n\r\n<!-- ========= CONSTRUCTOR DETAIL ======== -->\r\n\r\n<A NAME=\"constructor_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Constructor Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"JFMFile(java.lang.Object)\"><!-- --></A><H3>\r\nJFMFile</H3>\r\n<PRE>\r\npublic <B>JFMFile</B>(java.lang.Object&nbsp;data)</PRE>\r\n<DL>\r\n<DD>Constructor.\r\n<P>\r\n</DL>\r\n\r\n<!-- ============ METHOD DETAIL ========== -->\r\n\r\n<A NAME=\"method_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Method Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"listFiles()\"><!-- --></A><H3>\r\nlistFiles</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[] <B>listFiles</B>()</PRE>\r\n<DL>\r\n<DD>Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.\n\n <p> If this abstract pathname does not denote a directory, then this\n method returns <code>null</code>.  Otherwise an array of\n <code>File</code> objects is returned, one for each file or directory in\n the directory.  Pathnames denoting the directory itself and the\n directory's parent directory are not included in the result.  Each\n resulting abstract pathname is constructed from this abstract pathname\n using the <code><CODE>File(File,&nbsp;String)</CODE></code> constructor.  Therefore if this pathname\n is absolute then each resulting pathname is absolute; if this pathname\n is relative then each resulting pathname will be relative to the same\n directory.\n\n <p> There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getInputStream()\"><!-- --></A><H3>\r\ngetInputStream</H3>\r\n<PRE>\r\npublic abstract java.io.InputStream <B>getInputStream</B>()</PRE>\r\n<DL>\r\n<DD>Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>an InputStream to read from the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getOutputStream()\"><!-- --></A><H3>\r\ngetOutputStream</H3>\r\n<PRE>\r\npublic abstract java.io.OutputStream <B>getOutputStream</B>()</PRE>\r\n<DL>\r\n<DD>Returns an OutputStream to write to this file, or null if the write operation isn't supported\n (or doesn;t make sense from the filesystem's point of view).\n The way that this is implemented in every filesystem can vary.\n The call to this method might get the file to be emptied (as in the LocalFileSystem implementation)\n You have been warned.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>An OutputStream to write to this file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getName()\"><!-- --></A><H3>\r\ngetName</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getName</B>()</PRE>\r\n<DL>\r\n<DD>This string represents the short name of the file (e.g. foo.txt)\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getParent()\"><!-- --></A><H3>\r\ngetParent</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getParent</B>()</PRE>\r\n<DL>\r\n<DD>Returns the pathname string of this abstract pathname's parent, or\n <code>null</code> if this pathname does not name a parent directory.\n\n <p> The <em>parent</em> of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The pathname string of the parent directory named by this\n          abstract pathname, or <code>null</code> if this pathname\n          does not name a parent</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getParentFile()\"><!-- --></A><H3>\r\ngetParentFile</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getParentFile</B>()</PRE>\r\n<DL>\r\n<DD>Returns the abstract pathname of this abstract pathname's parent,\n or <code>null</code> if this pathname does not name a parent\n directory.\n\n <p> The <em>parent</em> of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The abstract pathname of the parent directory named by this\n          abstract pathname, or <code>null</code> if this pathname\n          does not name a parent</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getPath()\"><!-- --></A><H3>\r\ngetPath</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getPath</B>()</PRE>\r\n<DL>\r\n<DD>Converts this abstract pathname into a pathname string.  The resulting\n string uses the <CODE>default name-separator character</CODE> to\n separate the names in the name sequence.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The string form of this abstract pathname</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isAbsolute()\"><!-- --></A><H3>\r\nisAbsolute</H3>\r\n<PRE>\r\npublic abstract boolean <B>isAbsolute</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is <code>\"/\"</code>.  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n <code>\"\\\\\"</code>, or if its prefix is <code>\"\\\\\"</code>.\n Some other filesystems implementations (FTP, NFS, SMB, etc.) can have their own definition\n of the <i>absolute pathname</i>, ven though I would recommend sticking to the UNIX definition.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if this abstract pathname is absolute,\n          <code>false</code> otherwise</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getAbsolutePath()\"><!-- --></A><H3>\r\ngetAbsolutePath</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getAbsolutePath</B>()</PRE>\r\n<DL>\r\n<DD>Returns the absolute pathname string of this abstract pathname.\n\n <p> If this abstract pathname is already absolute, then the pathname\n string is simply returned as if by the <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\"><CODE>getPath()</CODE></A></code>\n method.  If this abstract pathname is the empty abstract pathname then\n the pathname string of the current user directory, which is named by the\n system property <code>user.dir</code>, is returned.  Otherwise this\n pathname is resolved in a system-dependent way.  On UNIX systems, a\n relative pathname is made absolute by resolving it against the current\n user directory.  On Microsoft Windows systems, a relative pathname is made absolute\n by resolving it against the current directory of the drive named by the\n pathname, if any; if not, it is resolved against the current user\n directory.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The absolute pathname string denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a required system property value cannot be accessed.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isAbsolute()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getAbsoluteFile()\"><!-- --></A><H3>\r\ngetAbsoluteFile</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getAbsoluteFile</B>()</PRE>\r\n<DL>\r\n<DD>Returns the absolute form of this abstract pathname.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The absolute abstract pathname denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a required system property value cannot be accessed.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getCanonicalPath()\"><!-- --></A><H3>\r\ngetCanonicalPath</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getCanonicalPath</B>()\r\n                                           throws <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></PRE>\r\n<DL>\r\n<DD>Returns the canonical pathname string of this abstract pathname.\n\n <p> A canonical pathname is both absolute and unique.  The precise\n definition of canonical form is system-dependent.  This method first\n converts this pathname to absolute form if necessary, as if by invoking the\n <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()\"><CODE>getAbsolutePath()</CODE></A> method, and then maps it to its unique form in a\n system-dependent way.  This typically involves removing redundant names\n such as <tt>\".\"</tt> and <tt>\"..\"</tt> from the pathname, resolving\n symbolic links (on UNIX platforms), and converting drive letters to a\n standard case (on Microsoft Windows platforms).\n\n <p> Every pathname that denotes an existing file or directory has a\n unique canonical form.  Every pathname that denotes a nonexistent file\n or directory also has a unique canonical form.  The canonical form of\n the pathname of a nonexistent file or directory may be different from\n the canonical form of the same pathname after the file or directory is\n created.  Similarly, the canonical form of the pathname of an existing\n file or directory may be different from the canonical form of the same\n pathname after the file or directory is deleted.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></CODE> - If an filesystem error occurs, which is possible because the\n          construction of the canonical pathname may require\n          filesystem queries\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a required system property value cannot be accessed.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getCanonicalFile()\"><!-- --></A><H3>\r\ngetCanonicalFile</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getCanonicalFile</B>()\r\n                                  throws <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></PRE>\r\n<DL>\r\n<DD>Returns the canonical form of this abstract pathname.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></CODE> - If an filesystem error occurs, which is possible because the\n          construction of the canonical pathname may require\n          filesystem queries\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a required system property value cannot be accessed.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isDirectory()\"><!-- --></A><H3>\r\nisDirectory</H3>\r\n<PRE>\r\npublic abstract boolean <B>isDirectory</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the file denoted by this abstract pathname is a\n directory.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a directory;\n          <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isFile()\"><!-- --></A><H3>\r\nisFile</H3>\r\n<PRE>\r\npublic abstract boolean <B>isFile</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the file denoted by this abstract pathname is a normal\n file.  A file is <em>normal</em> if it is not a directory and, in\n addition, satisfies other system-dependent criteria.  Any non-directory\n file created by a Java application is guaranteed to be a normal file.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a normal file;\n          <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isHidden()\"><!-- --></A><H3>\r\nisHidden</H3>\r\n<PRE>\r\npublic abstract boolean <B>isHidden</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the file named by this abstract pathname is a hidden\n file.  The exact definition of <em>hidden</em> is system-dependent.  On\n UNIX systems, a file is considered to be hidden if its name begins with\n a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is\n considered to be hidden if it has been marked as such in the filesystem.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname is hidden according to the conventions of the\n          underlying platform\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"lastModified()\"><!-- --></A><H3>\r\nlastModified</H3>\r\n<PRE>\r\npublic abstract long <B>lastModified</B>()</PRE>\r\n<DL>\r\n<DD>Returns the time that the file denoted by this abstract pathname was\n last modified.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>A <code>long</code> value representing the time the file was\n          last modified, measured in milliseconds since the epoch\n          (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the\n          file does not exist or if an I/O error occurs\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"length()\"><!-- --></A><H3>\r\nlength</H3>\r\n<PRE>\r\npublic abstract long <B>length</B>()</PRE>\r\n<DL>\r\n<DD>Returns the length of the file denoted by this abstract pathname.\n The return value is unspecified if this pathname denotes a directory.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The length, in bytes, of the file denoted by this abstract\n          pathname, or <code>0L</code> if the file does not exist\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ncompareTo</H3>\r\n<PRE>\r\npublic abstract int <B>compareTo</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;pathname)</PRE>\r\n<DL>\r\n<DD>Compares two abstract pathnames lexicographically.  The ordering\n defined by this method depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>pathname</CODE> - The abstract pathname to be compared to this abstract\n                    pathname\r\n<DT><B>Returns:</B><DD>Zero if the argument is equal to this abstract pathname, a\n                value less than zero if this abstract pathname is\n                lexicographically less than the argument, or a value greater\n                than zero if this abstract pathname is lexicographically\n                greater than the argument</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"compareTo(java.lang.Object)\"><!-- --></A><H3>\r\ncompareTo</H3>\r\n<PRE>\r\npublic int <B>compareTo</B>(java.lang.Object&nbsp;o)</PRE>\r\n<DL>\r\n<DD>Compares this abstract pathname to another object.  If the other object\n is an abstract pathname, then this function behaves like <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><CODE>compareTo(JFMFile)</CODE></A></code>.  Otherwise, it throws a\n <code>ClassCastException</code>, since abstract pathnames can only be\n compared to abstract pathnames.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE>compareTo</CODE> in interface <CODE>java.lang.Comparable</CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>o</CODE> - The <code>Object</code> to be compared to this abstract\n             pathname\r\n<DT><B>Returns:</B><DD>If the argument is an abstract pathname, returns zero\n          if the argument is equal to this abstract pathname, a value\n          less than zero if this abstract pathname is lexicographically\n          less than the argument, or a value greater than zero if this\n          abstract pathname is lexicographically greater than the\n          argument\r\n<DT><B>Throws:</B>\r\n<DD><CODE><code>ClassCastException</code></CODE> - if the argument is not an\n                abstract pathname<DT><B>See Also:</B><DD><CODE>Comparable</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"equals(java.lang.Object)\"><!-- --></A><H3>\r\nequals</H3>\r\n<PRE>\r\npublic abstract boolean <B>equals</B>(java.lang.Object&nbsp;obj)</PRE>\r\n<DL>\r\n<DD>Tests this abstract pathname for equality with the given object.\n Returns <code>true</code> if and only if the argument is not\n <code>null</code> and is an abstract pathname that denotes the same file\n or directory as this abstract pathname.  Whether or not two abstract\n pathnames are equal depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not. With other filesystems implementation ... it's their responsability\n to decide wether it should be case sensitive or not.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Overrides:</B><DD><CODE>equals</CODE> in class <CODE>java.lang.Object</CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>obj</CODE> - The object to be compared with this abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the objects are the same;\n          <code>false</code> otherwise</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"hashCode()\"><!-- --></A><H3>\r\nhashCode</H3>\r\n<PRE>\r\npublic abstract int <B>hashCode</B>()</PRE>\r\n<DL>\r\n<DD>Computes a hash code for this abstract pathname.  Because equality of\n abstract pathnames is inherently system-dependent, so is the computation\n of their hash codes.  On UNIX systems, the hash code of an abstract\n pathname is equal to the exclusive <em>or</em> of its pathname string\n and the decimal value <code>1234321</code>.  On Microsoft Windows systems, the hash\n code is equal to the exclusive <em>or</em> of its pathname string,\n convered to lower case, and the decimal value <code>1234321</code>.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Overrides:</B><DD><CODE>hashCode</CODE> in class <CODE>java.lang.Object</CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>A hash code for this abstract pathname</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"toString()\"><!-- --></A><H3>\r\ntoString</H3>\r\n<PRE>\r\npublic java.lang.String <B>toString</B>()</PRE>\r\n<DL>\r\n<DD>If <code>getDisplayName()</code> return null it  returns the pathname string of this abstract pathname.\n This is just the string returned by the <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\"><CODE>getPath()</CODE></A></code> method.\n Otherwise it just returns the displayName.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Overrides:</B><DD><CODE>toString</CODE> in class <CODE>java.lang.Object</CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The string form of this abstract pathname</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getSystemDisplayName()\"><!-- --></A><H3>\r\ngetSystemDisplayName</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getSystemDisplayName</B>()</PRE>\r\n<DL>\r\n<DD>Returns the system display name as returned by the filesystem viewer, or null\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getMimeType()\"><!-- --></A><H3>\r\ngetMimeType</H3>\r\n<PRE>\r\npublic abstract java.lang.String <B>getMimeType</B>()</PRE>\r\n<DL>\r\n<DD>This method returns the string that represents the mime-type of this file, or null if it can't be determined.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>the mime type of this file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getRootDriveFile()\"><!-- --></A><H3>\r\ngetRootDriveFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getRootDriveFile</B>()</PRE>\r\n<DL>\r\n<DD>This method returns the root directory of the filesystem of witch the file belongs to.\n For example:<br>\n       <p> If the active filesystem is the local filesystem and is an Windows filesystem, this\n method should return the drive letter of the drive that this file belongs to. On Unix filesystems it will always return\n '/'. On other filesystems .... it will return whatever the one that implements it wants to.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>JFMFile the root drive (it cannot be null). It can be the same file that was passed as an argument.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getDisplayName()\"><!-- --></A><H3>\r\ngetDisplayName</H3>\r\n<PRE>\r\npublic java.lang.String <B>getDisplayName</B>()</PRE>\r\n<DL>\r\n<DD>Returns the display name\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>String the display name</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"setDisplayName(java.lang.String)\"><!-- --></A><H3>\r\nsetDisplayName</H3>\r\n<PRE>\r\npublic void <B>setDisplayName</B>(java.lang.String&nbsp;displayName)</PRE>\r\n<DL>\r\n<DD>Sets the display name\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>displayName</CODE> - String the new display name</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canRead()\"><!-- --></A><H3>\r\ncanRead</H3>\r\n<PRE>\r\npublic abstract boolean <B>canRead</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the application can read the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file specified by this\n          abstract pathname exists <em>and</em> can be read by the\n          application; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canWrite()\"><!-- --></A><H3>\r\ncanWrite</H3>\r\n<PRE>\r\npublic abstract boolean <B>canWrite</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the application can modify to the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file system actually\n          contains a file denoted by this abstract pathname <em>and</em>\n          the application is allowed to write to the file;\n          <code>false</code> otherwise.\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method denies write access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"exists()\"><!-- --></A><H3>\r\nexists</H3>\r\n<PRE>\r\npublic abstract boolean <B>exists</B>()</PRE>\r\n<DL>\r\n<DD>Tests whether the file or directory denoted by the abstract pathname\n exists.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory denoted\n          by this abstract pathname exists; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkRead(java.lang.String)</CODE></code>\n          method denies read access to the file or directory</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"mkdir(java.lang.String)\"><!-- --></A><H3>\r\nmkdir</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>mkdir</B>(java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD>Creates the directory named by the abstract pathname denoted by the parameter.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD>The new file object created or null otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method does not permit the named directory to be created</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"createFile(java.lang.String)\"><!-- --></A><H3>\r\ncreateFile</H3>\r\n<PRE>\r\npublic abstract <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>createFile</B>(java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD>Creates the file named by the abstract pathname denoted by the parameter.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD>The new file object created or null otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkWrite(java.lang.String)</CODE></code>\n          method does not permit the named directory to be created</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"delete()\"><!-- --></A><H3>\r\ndelete</H3>\r\n<PRE>\r\npublic abstract boolean <B>delete</B>()</PRE>\r\n<DL>\r\n<DD>Deletes the file or directory denoted by the abstract pathname.  If\n this pathname denotes a directory, then the directory must be empty in\n order to be deleted.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>file</CODE> - The file that denotes the abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory is\n          successfully deleted; <code>false</code> otherwise\r\n<DT><B>Throws:</B>\r\n<DD><CODE>java.lang.SecurityException</CODE> - If a security manager exists and its <code><CODE>SecurityManager.checkDelete(java.lang.String)</CODE></code> method denies\n          delete access to the file</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getIcon()\"><!-- --></A><H3>\r\ngetIcon</H3>\r\n<PRE>\r\npublic abstract javax.swing.Icon <B>getIcon</B>()</PRE>\r\n<DL>\r\n<DD>Returns the filesystem's icon associated with this file, or null if it can't be determined.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The filesystem's icon associated with this file, or null if it can't be determined.</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isMarked()\"><!-- --></A><H3>\r\nisMarked</H3>\r\n<PRE>\r\npublic boolean <B>isMarked</B>()</PRE>\r\n<DL>\r\n<DD>Returns true if the file has been marked in the view, false otherwise\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>true if the file has been marked in the view, false otherwise</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"setMarked(boolean)\"><!-- --></A><H3>\r\nsetMarked</H3>\r\n<PRE>\r\npublic void <B>setMarked</B>(boolean&nbsp;flag)</PRE>\r\n<DL>\r\n<DD>Sets the marked flag. This method is usually called by the UI View to signal that the file\n has been marked for selection. It helps to draw the file name with another color, and to\n perform operations on the file.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>flag</CODE> - </DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"setMultiPart(java.util.Hashtable)\"><!-- --></A><H3>\r\nsetMultiPart</H3>\r\n<PRE>\r\npublic void <B>setMultiPart</B>(java.util.Hashtable&lt;java.lang.String,java.lang.String&gt;&nbsp;multiPart)</PRE>\r\n<DL>\r\n<DD>Sets the hashtbale multipart. This method is called when the file is too big\n and must be splitted. The hashtable cointains the information about\n every small file\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>multiPart</CODE> - </DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getMultiPart()\"><!-- --></A><H3>\r\ngetMultiPart</H3>\r\n<PRE>\r\npublic java.util.Hashtable&lt;java.lang.String,java.lang.String&gt; <B>getMultiPart</B>()</PRE>\r\n<DL>\r\n<DD>gets the hashtbale multipart. This method is usually called when I want\n to check if this file is too big or not, checking the size of the hashtable\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getFile()\"><!-- --></A><H3>\r\ngetFile</H3>\r\n<PRE>\r\npublic java.io.File <B>getFile</B>()</PRE>\r\n<DL>\r\n<DD>gets the content of the JFMFile if it exists.\r\n<P>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<!-- ========= END OF CLASS DATA ========= -->\r\n<HR>\r\n\r\n\r\n<!-- ======= START OF BOTTOM NAVBAR ====== -->\r\n<A NAME=\"navbar_bottom\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_bottom\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_bottom_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMFile.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMClassLoader.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMFile.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF=\"#field_summary\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;<A HREF=\"#field_detail\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_bottom\"></A>\r\n<!-- ======== END OF BOTTOM NAVBAR ======= -->\r\n\r\n<HR>\r\n\r\n</BODY>\r\n</HTML>\r\n", "id": 32468.0}