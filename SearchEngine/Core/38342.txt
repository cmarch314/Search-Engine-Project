{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Polyhedron 3 Traits Halfedge Definition Figure depicts the relationship between a halfedge and its incident halfedges vertices and facets A halfedge is an oriented edge between two vertices It is always paired with a halfedge pointing in the opposite direction The opposite member function returns this halfedge of opposite orientation If a halfedge is incident to a facet the next member function points to the successor halfedge around this facet For border edges the next member function points to the successor halfedge along the hole For more than two border edges at a vertex the next halfedge along a hole is not uniquely defined but a consistent assignment of the next halfedge will be maintained in the data structure An invariant is that successive assignments of the form h h next cycle counterclockwise around the facet or hole and traverse all halfedges incident to this facet or hole A similar invariant is that successive assignments of the form h h next opposite cycle clockwise around the vertex and traverse all halfedges incident to this vertex Two circulators are provided for these circular orders Figure The three classes Vertex Halfedge and Facet of the polyhedral surface Member functions with shaded background are mandatory The others are optionally supported The incidences encoded in opposite and next are available for each instantiation of polyhedral surfaces The other incidences are optionally available as indicated with type tags The prev member function points to the preceding halfedge around the same facet It is always available though it might perform a search around the facet using the next member function to find the previous halfedge if the underlying halfedge data structure does not provide an efficient prev member function for halfedges Handles to the incident vertex and facet are optionally stored The circulators are assignable to the Halfedge handle The circulators are bidirectional if the halfedge provided to the polyhedron with the Items template argument provides a member function prev otherwise they are of the forward category include CGAL Polyhedron 3 h Types Polyhedron 3 Traits Halfedge Vertex type of incident vertices Polyhedron 3 Traits Halfedge Facet type of incident facets Polyhedron 3 Traits Halfedge Vertex handle handle to vertex Polyhedron 3 Traits Halfedge Halfedge handle handle to halfedge Polyhedron 3 Traits Halfedge Facet handle handle to facet Polyhedron 3 Traits Halfedge Halfedge around vertex circulator circulator of halfedges around a vertex Polyhedron 3 Traits Halfedge Halfedge around facet circulator circulator of halfedges around a facet Polyhedron 3 Traits Halfedge Vertex const handle Polyhedron 3 Traits Halfedge Halfedge const handle Polyhedron 3 Traits Halfedge Facet const handle Polyhedron 3 Traits Halfedge Halfedge around vertex const circulator Polyhedron 3 Traits Halfedge Halfedge around facet const circulator Polyhedron 3 Traits Halfedge Supports halfedge prev CGAL Tag true or CGAL Tag false Polyhedron 3 Traits Halfedge Supports halfedge vertex CGAL Tag true or CGAL Tag false Polyhedron 3 Traits Halfedge Supports halfedge face CGAL Tag true or CGAL Tag false Creation Polyhedron 3 Traits Halfedge h default constructor Operations Halfedge handle h opposite Halfedge const handle h opposite const the opposite halfedge Halfedge handle h next Halfedge const handle h next const the next halfedge around the facet Halfedge handle h prev Halfedge const handle h prev const the previous halfedge around the facet Halfedge handle h next on vertex Halfedge const handle h next on vertex const the next halfedge around the vertex clockwise Is equal to h next opposite Halfedge handle h prev on vertex Halfedge const handle h prev on vertex const the previous halfedge around the vertex counterclockwise Is equal to h opposite prev bool h is border const is true if h is a border halfedge bool h is border edge const is true if h or h opposite is a border halfedge Halfedge around vertex circulator h vertex begin Halfedge around vertex const circulator h vertex begin const circulator of halfedges around the vertex clockwise Halfedge around facet circulator h facet begin Halfedge around facet const circulator h facet begin const circulator of halfedges around the facet counterclockwise std size t h vertex degree const the degree of the incident vertex i e number of edges emanating from this vertex bool h is bivalent const returns true if the incident vertex has exactly two incident edges bool h is trivalent const returns true if the incident vertex has exactly three incident edges std size t h facet degree const the degree of the incident facet i e number of edges on the boundary of this facet bool h is triangle const returns true if the incident facet is a triangle bool h is quad const returns true if the incident facet is a quadrilateral Operations available if Supports halfedge vertex CGAL Tag true Vertex handle h vertex Vertex const handle h vertex const the incident vertex of h Operations available if Supports halfedge facet CGAL Tag true Facet handle h facet Facet const handle h facet const the incident facet of h If h is a border halfedge the result is default construction of the handle See Also CGAL Polyhedron 3 Traits Vertex CGAL Polyhedron 3 Traits Facet CGAL Polyhedron 3 Traits Implementation The member functions prev and prev on vertex work in constant time if Supports halfedge prev CGAL Tag true Otherwise both methods search for the previous halfedge around the incident facet Next Polyhedron 3 Traits Vertex Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Polyhedron_ref/Class_Polyhedron_3-Traits---Halfedge.html", "title": "polyhedron_3&lt;traits&gt;::halfedge", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Polyhedron_ref/Polyhedron_3_Halfedge.tex' -->\n<html> <head>  \n<title>Polyhedron_3&lt;Traits&gt;::Halfedge</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_857\"></A>\n\n<A NAME=\"Cross_link_anchor_858\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_838\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Polyhedron_3<Traits>::Halfedge\"></A>\n<h2><I>CGAL::Polyhedron_3&lt;Traits&gt;::Halfedge</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nFigure&nbsp;\n  <A HREF=\"#figurePolyOptionalMethods\"><IMG \n  SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference arrow\" WIDTH=\"10\" HEIGHT=\"10\"></A>\n\ndepicts the relationship between a halfedge and its incident\nhalfedges, vertices, and facets.  A halfedge is an oriented edge\nbetween two vertices. It is always paired with a halfedge pointing in\nthe <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> direction. The <I><A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> member function returns\nthis halfedge of <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>. If a halfedge is incident to a\nfacet the <I>next()</I> member function points to the <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A>\nhalfedge around this facet. For border edges the <I>next()</I> member\nfunction points to the <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A> halfedge along the hole. For more\nthan two border edges at a vertex, the next halfedge along a hole is\nnot uniquely defined, but a consistent assignment of the next halfedge\nwill be maintained in the data structure. An invariant is that\nsuccessive assignments of the form <I>h = h-&gt;next()</I> cycle\ncounterclockwise around the facet (or hole) and traverse all halfedges\nincident to this facet (or hole). A similar invariant is that successive\nassignments of the form <I>h = h-&gt;next()-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> cycle\nclockwise around the vertex and traverse all halfedges incident to\nthis vertex. Two circulators are provided for these circular orders.\n<P>\n\n<CENTER>\n    <A NAME=\"figurePolyOptionalMethods\">\n    <A HREF=\"fig/poly_optional.gif\">\n        <img src=\"fig/poly_optional_small.gif\" \n             alt=\"Class Diagram\"></A><BR>\n\n<A HREF=\"fig/poly_optional.gif\">Figure:</A>\n    The three classes <I>Vertex</I>, <I>Halfedge</I>, and \n          <I>Facet</I> of the polyhedral surface. Member\n          functions with shaded background are mandatory. The others\n          are optionally supported.\n    </CENTER>\n<P>\n\nThe incidences encoded in <I><A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> and <I>next()</I> are\navailable for each instantiation of polyhedral surfaces.  The other\nincidences are optionally available as indicated with type tags.  The\n<I>prev()</I> member function points to the preceding halfedge around\nthe same facet. It is always available, though it might perform a\nsearch around the facet using the <I>next()</I> member function to find\nthe previous halfedge if the underlying halfedge data structure does\nnot provide an efficient <I>prev()</I> member function for halfedges.\nHandles to the incident vertex and facet are optionally stored.\n<P>\n\nThe circulators are assignable to the <I>Halfedge_handle</I>. The\ncirculators are bidirectional if the halfedge provided to the\npolyhedron with the <I>Items</I> template argument provides a member\nfunction <I>prev()</I>, otherwise they are of the forward category.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Polyhedron_3.h\">CGAL/Polyhedron_3.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    type of incident vertices.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Facet\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    type of incident facets.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to vertex.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to halfedge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Facet_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to facet.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_around_vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulator of\n  halfedges around a vertex.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_around_facet_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulator of\n  halfedges around a facet.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Vertex_const_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_const_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Facet_const_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_around_vertex_const_circulator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Halfedge_around_facet_const_circulator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Supports_halfedge_prev\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> or \n  <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Supports_halfedge_vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH>  <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> or \n  <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A>::Supports_halfedge_face\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH>  <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> or \n  <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Polyhedron_3-Traits---Halfedge.html#Cross_link_anchor_858\">Polyhedron_3&lt;Traits&gt;::Halfedge</A> h;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_opposite69;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_opposite69_const;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> halfedge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_next69;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.next () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_next69_const;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.next () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the next halfedge around the facet.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_prev69;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.prev () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_prev69_const;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.prev () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the previous halfedge around the facet.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_next_on_vertex69;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.next_on_vertex () \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_next_on_vertex69_const;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.next_on_vertex () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the next halfedge around the vertex (clockwise). Is equal\n    to <I>h.next()-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_prev_on_vertex69;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.prev_on_vertex () \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_prev_on_vertex69_const;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.prev_on_vertex () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the previous halfedge around the vertex (counterclockwise). \n    Is equal to <I>h.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()-&gt;prev()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_border69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.is_border () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    is true if <I>h</I> is a border halfedge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_border_edge69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.is_border_edge () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    is true if <I>h</I> or <I>h.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> is a border halfedge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_vertex_circulator_vertex_begin69;\"></A>\nHalfedge_around_vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.vertex_begin () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_vertex_const_circulator_vertex_begin69_const;\"></A>\nHalfedge_around_vertex_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.vertex_begin () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    circulator of halfedges around the vertex (clockwise).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_facet_circulator_facet_begin69;\"></A>\nHalfedge_around_facet_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.facet_begin () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_facet_const_circulator_facet_begin69_const;\"></A>\nHalfedge_around_facet_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.facet_begin () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    circulator of halfedges around the facet (counterclockwise).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_vertex_degree69_const;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.vertex_degree () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the degree of the \n  incident vertex, i.e., number of edges emanating from this vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_bivalent69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.is_bivalent () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the\n  incident vertex has exactly two incident edges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_trivalent69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.is_trivalent () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the\n  incident vertex has exactly three incident edges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_std::size_t_facet_degree69_const;\"></A>\nstd::size_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.facet_degree () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the degree of the\n  incident facet, i.e., number of edges on the boundary of this facet.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_triangle69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.is_triangle () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the \n  incident facet is a triangle.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_quad69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.is_quad () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the \n  incident facet is a quadrilateral.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations available if <I>Supports_halfedge_vertex</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> \n           <I>CGAL::Tag_true</I></H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertex69;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.vertex () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_const_handle_vertex69_const;\"></A>\nVertex_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.vertex () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the incident vertex of <I>h</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations available if <I>Supports_halfedge_facet</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> \n           <I>CGAL::Tag_true</I></H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Facet_handle_facet69;\"></A>\nFacet_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.facet () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Facet_const_handle_facet69_const;\"></A>\nFacet_const_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.facet () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the incident facet of <I>h</I>.  If <I>h</I> is a border halfedge \n      the result is default construction of the handle.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Polyhedron_3-Traits---Vertex.html#Cross_link_anchor_859\">CGAL::Polyhedron_3&lt;Traits&gt;::Vertex</A></I><BR>\n\n<I><A HREF=\"Class_Polyhedron_3-Traits---Facet.html#Cross_link_anchor_855\">CGAL::Polyhedron_3&lt;Traits&gt;::Facet</A></I><BR>\n\n<I><A HREF=\"Class_Polyhedron_3.html#Cross_link_anchor_853\">CGAL::Polyhedron_3</A>&lt;Traits&gt;</I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe member functions <I>prev()</I> and <I>prev_on_vertex()</I> work in\nconstant time if <I>Supports_halfedge_prev</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH>\n<I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>. Otherwise both methods search for the previous\nhalfedge around the incident facet.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Polyhedron_3-Traits---Vertex.html\"><I>Polyhedron_3&lt;Traits&gt;::Vertex</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_28!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38342.0}