{"text": "ICS 45C Fall 2 14 News Course Reference Schedule Project Guide Code Examples About Alex ICS 45C Fall 2 14 Schedule All assigned readings are from the Savitch text 5th Edition It is a good idea to skim the assigned reading before the lecture for the main ideas attend lecture and then to go through the assigned reading again to fill in the details that you missed both in your initial skim of the reading and in the lecture Some lectures have little or no reading corresponding to them In some cases this is because a block of reading corresponds to more than one lecture In other cases the material covered in that lecture is not discussed in the textbook DateLecture TopicsReadingsProject WorkWeek Th 1 2 Course introduction and goalsThe challenge of learning a second programming languageThe challenge of learning C as a second programming languageHistorical perspective and philosophical backdropWhy C is the way it is design goalsVirtualization Running more than one operating system simultaneously Week 1Tu 1 7 Quick overview of the ICS 45C VM development environmentCompilation and linking of a C programThe main functionTypes and static type checkingBasic built in data typesConsole output using std cout briefly Expressions and statementsThe if statementwhile and for loops Ch 1Ch 2 1 2 3 Work through Project Aim to have the ICS 45C VM set up and ready to run today Th 1 9 The distinction between lvalues and rvaluesDeclaration vs definitionCalling and declaring functionsParameters and argumentsBehind the scenes of a C programThe Von Neumann architecture briefly Ch 3 Week 2Tu 1 14 Behind the scenes of a C program continued Registers instruction pointers stack pointers and frame pointersCalling conventionsSeparate compilation and linkingThe include directiveGuarding against multiple inclusion Ch 11 1 Th 1 16 A brief overview of console input using std cinThe std string typeReferencesPass by value vs pass by reference parametersType conversions between basic built in types Ch 4 1 4 2Ch 9 3 F 1 17 Project due 11 59pmWeek 3Tu 1 21 Function overloadingDefault argumentsBehind the scenes of a C program continued The heap also known as the free store Heap based memory allocationThe importance of cleaning up heap allocated memoryPointersnew and deleteThe nullptr constant Ch 4 1 4 2Ch 9 3Ch 1 1 Th 1 23 Single dimension arraysStatically and dynamically allocated arraysHow arrays and pointers are relatedPassing arrays as parameters to functionsThe delete operatorC style strings and why we mostly avoid them Ch 5 1 5 3 Week 4M 1 27Project 1 due 11 59pmTu 1 28 Constants and the const qualifierHow const affects references and pointersOn the need for creating new typesStructuresMembers in a structureStatically and dynamically allocated structuresThe and operators Ch 1 2Ch 6 Th 1 3 The lack of a distinction between built in types and user defined typesWhat is object oriented programming ClassesDeclaring classesAccess control public and private ConstructorsMember variables and member functions in a classStatically and dynamically allocated objects of a classSeparating interface from implementation Ch 7 1 7 2 Week 5Tu 11 4 Properly implementing constructors e g using initializers The this pointerMaking a class const aware Well behaved classesManaging object lifetimeManaging other objects allocated by an objectDestructorsBuilding a well behaved ArrayList class Ch 1 3 Th 11 6 Building a well behaved ArrayList class continued Copy constructorsOverloading the assignment operatorGuarding against self assignment F 11 7Project 2 due 11 59pmWeek 6Tu 11 11 UNIVERSITY HOLIDAY Veteran s Day NO CLASS TODAY Th 11 13 Understanding the HashMap class from Project 3Unit testingWriting unit tests using Google Test Week 7Tu 11 18 MIDTERM regular lecture time and location Th 11 2 Function objects std function and lambda expressionsstd The C Standard LibraryStandard collections vector and listIteratorsauto and type inferenceGeneric algorithms Ch 19 Week 8Tu 11 25 InheritanceConstructors and derived classesOrder of construction and destruction of member variablesLayout of objects of derived classesVirtual functions and polymorphism Ch 14Ch 15 W 11 26Project 3 due 11 59pmTh 11 27 UNIVERSITY HOLIDAY Thanksgiving NO CLASS TODAY F 11 28 UNIVERSITY HOLIDAY Thanksgiving NO LABS TODAY Week 9Tu 12 2 Why destructors sometimes need to be virtual but constructors don t and can t Pure virtual functionsAbstract base classesWhy a class with nothing but pure virtual functions is still usefulImplicit type conversionsExplicit constructors Th 12 4 Exceptions in C Throwing and catching exceptionsWhy using exceptions requires a more carefully thought out design Ch 18 Week 1 Tu 12 9 The resource acquisition is initialization RAII techniqueDepending on destructors to automate release of memory and other resources Th 12 11 Template functionsWhy C provides lousy error messages when you misuse a templateTemplate classes briefly Ch 16 1 F 12 12Project 4 due 11 59pmFinals WeekTh 12 18 FINAL EXAM 4 pm 6 pm PSLH 1 ", "_id": "http://www.ics.uci.edu/~thornton/ics45c/Schedule.html", "title": "ics 45c fall 2014, schedule", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2014, Schedule</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2014 |\r\n<a href=\"index.html\">News</a> |\r\n<a href=\"CourseReference.html\">Course Reference</a> |\r\n<a href=\"Schedule.html\">Schedule</a> |\r\n<a href=\"ProjectGuide\">Project Guide</a> |\r\n<a href=\"CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2014<br />\r\n   Schedule</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p>All assigned readings are from the Savitch text, 5th Edition.  It is a good idea to skim the assigned reading <i>before</i> the lecture for the main ideas, attend lecture, and then to go through the assigned reading again to fill in the details that you missed, both in your initial skim of the reading and in the lecture.</p>\r\n\r\n<p>Some lectures have little or no reading corresponding to them.  In some cases, this is because a block of reading corresponds to more than one lecture.  In other cases, the material covered in that lecture is not discussed in the textbook.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>Date</td>\r\n    <td>Lecture Topics</td>\r\n    <td>Readings</td>\r\n    <td>Project Work</td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 0</td>\r\n  </tr>\r\n  <tr>\r\n  <tr>\r\n    <td>Th 10/2</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Course introduction and goals</li>\r\n        <li>The challenge of learning a second programming language</li>\r\n        <li>The challenge of learning C++ as a second programming language</li>\r\n        <li>Historical perspective and philosophical backdrop</li>\r\n        <li>Why C++ is the way it is: design goals</li>\r\n        <li>Virtualization: Running more than one operating system simultaneously</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 10/7</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Quick overview of the <i>ICS 45C VM</i> development environment</li>\r\n        <li>Compilation and linking of a C++ program</li>\r\n        <li>The <b>main()</b> function</li>\r\n        <li>Types and static type checking</li>\r\n        <li>Basic built-in data types</li>\r\n        <li>Console output using <b>std::cout</b> (briefly)</li>\r\n        <li>Expressions and statements</li>\r\n        <li>The <b>if</b> statement</li>\r\n        <li><b>while</b> and <b>for</b> loops</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 1</li>\r\n        <li>Ch. 2.1 - 2.3</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Work through <a href=\"ProjectGuide/Project0\">Project #0</a></li>\r\n        <li>Aim to have the ICS 45C VM set up and ready to run today</li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 10/9</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>The distinction between lvalues and rvalues</li>\r\n        <li>Declaration vs. definition</li>\r\n        <li>Calling and declaring functions</li>\r\n        <li>Parameters and arguments</li>\r\n        <li>Behind the scenes of a C++ program</li>\r\n        <li>The Von Neumann architecture (briefly)</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 3</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 2</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 10/14</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Behind the scenes of a C++ program (continued)</li>\r\n        <li>Registers, instruction pointers, stack pointers, and frame pointers</li>\r\n        <li>Calling conventions</li>\r\n        <li>Separate compilation and linking</li>\r\n        <li>The <b>#include</b> directive</li>\r\n        <li>Guarding against multiple inclusion</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 11.1</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 10/16</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>A brief overview of console input using <b>std::cin</b></li>\r\n        <li>The <b>std::string</b> type</li>\r\n        <li>References</li>\r\n        <li>Pass-by-value vs. pass-by-reference parameters</li>\r\n        <li>Type conversions between basic built-in types</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 4.1 - 4.2</li>\r\n        <li>Ch. 9.3</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>F 10/17</td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td><a href=\"ProjectGuide/Project0\">Project #0</a> due 11:59pm</td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 10/21</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n         <li>Function overloading</li>\r\n         <li>Default arguments</li>\r\n         <li>Behind the scenes of a C++ program (continued)</li>\r\n         <li>The heap (also known as the free store)</li>\r\n         <li>Heap-based memory allocation</li>\r\n         <li>The importance of cleaning up heap-allocated memory</li>\r\n         <li>Pointers</li>\r\n         <li><b>new</b> and <b>delete</b></li>\r\n         <li>The <b>nullptr</b> constant</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 4.1 - 4.2</li>\r\n        <li>Ch. 9.3</li>\r\n        <li>Ch. 10.1</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 10/23</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Single-dimension arrays</li>\r\n        <li>Statically- and dynamically-allocated arrays</li>\r\n        <li>How arrays and pointers are related</li>\r\n        <li>Passing arrays as parameters to functions</li>\r\n        <li>The <b>delete[]</b> operator</li>\r\n        <li>C-style strings (and why we mostly avoid them)</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 5.1 - 5.3</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 4</td>\r\n  </tr>\r\n  <tr>\r\n    <td>M 10/27</td>\r\n    <td></td>\r\n    <td></td>\r\n    <td><a href=\"ProjectGuide/Project1\">Project #1</a> due 11:59pm</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 10/28</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Constants and the <b>const</b> qualifier</li>\r\n        <li>How <b>const</b> affects references and pointers</li>\r\n        <li>On the need for creating new types</li>\r\n        <li>Structures</li>\r\n        <li>Members in a structure</li>\r\n        <li>Statically- and dynamically-allocated structures</li>\r\n        <li>The <b>.</b> and <b>-&gt;</b> operators</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 10.2</li>\r\n        <li>Ch. 6</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 10/30</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>The (lack of a) distinction between built-in types and user-defined types</li>\r\n        <li>What is object-oriented programming?</li>\r\n        <li>Classes</li>\r\n        <li>Declaring classes</li>\r\n        <li>Access control (<b>public</b> and <b>private</b>)</li>\r\n        <li>Constructors</li>\r\n        <li>Member variables and member functions in a class</li>\r\n        <li>Statically- and dynamically-allocated objects of a class</li>\r\n        <li>Separating interface from implementation</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 7.1 - 7.2</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 5</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 11/4</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Properly implementing constructors (e.g., using initializers)</li>\r\n        <li>The <b>this</b> pointer</li>\r\n        <li>Making a class <b>const</b>-aware</li>\r\n        <li>\"Well-behaved\" classes</li>\r\n        <li>Managing object lifetime</li>\r\n        <li>Managing other objects allocated by an object</li>\r\n        <li>Destructors</li>\r\n        <li>Building a \"well-behaved\" ArrayList class</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 10.3</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 11/6</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Building a \"well-behaved\" ArrayList class (continued)</li>\r\n        <li>Copy constructors</li>\r\n        <li>Overloading the assignment operator</li>\r\n        <li>Guarding against self-assignment</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>F 11/7</td>\r\n    <td></td>\r\n    <td></td>\r\n    <td><a href=\"ProjectGuide/Project2\">Project #2</a> due 11:59pm</td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 6</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 11/11</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li><b>UNIVERSITY HOLIDAY: Veteran's Day &mdash; NO CLASS TODAY</b></li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 11/13</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Understanding the HashMap class from <a href=\"ProjectGuide/Project3\">Project #3</a></li>\r\n        <li>Unit testing</li>\r\n        <li>Writing unit tests using Google Test</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 7</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 11/18</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li><b>MIDTERM: regular lecture time and location</b></li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 11/20</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Function objects, <b>std::function</b>, and lambda expressions</li>\r\n        <li><b>std</b>: The C++ Standard Library</li>\r\n        <li>Standard collections: <b>vector</b> and <b>list</b></li>\r\n        <li>Iterators</li>\r\n        <li><b>auto</b> and type inference</li>\r\n        <li>Generic algorithms</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 19</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 8</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 11/25</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Inheritance</li>\r\n        <li>Constructors and derived classes</li>\r\n        <li>Order of construction and destruction of member variables</li>\r\n        <li>Layout of objects of derived classes</li>\r\n        <li>Virtual functions and polymorphism</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 14</li>\r\n        <li>Ch. 15</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>W 11/26</td>\r\n    <td></td>\r\n    <td></td>\r\n    <td><a href=\"ProjectGuide/Project3\">Project #3</a> due 11:59pm</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 11/27</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li><b>UNIVERSITY HOLIDAY: Thanksgiving &mdash; NO CLASS TODAY</b></li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>F 11/28</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li><b>UNIVERSITY HOLIDAY: Thanksgiving &mdash; NO LABS TODAY</b></li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 9</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 12/2</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Why destructors sometimes need to be virtual, but constructors don't (and can't!)</li>\r\n        <li>Pure virtual functions</li>\r\n        <li>Abstract base classes</li>\r\n        <li>Why a class with nothing but pure virtual functions is still useful</li>\r\n        <li>Implicit type conversions</li>\r\n        <li>Explicit constructors</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 12/4</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Exceptions in C++</li>\r\n        <li>Throwing and catching exceptions</li>\r\n        <li>Why using exceptions requires a more carefully thought-out design</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 18</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Week 10</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Tu 12/9</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>The \"resource acquisition is initialization\" (RAII) technique</li>\r\n        <li>Depending on destructors to automate release of memory and other resources</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 12/11</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Template functions</li>\r\n        <li>Why C++ provides lousy error messages when you misuse a template</li>\r\n        <li>Template classes (briefly)</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li>Ch. 16.1</li>\r\n      </ul>\r\n    </td>\r\n    <td>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>F 12/12</td>\r\n    <td></td>\r\n    <td></td>\r\n    <td><a href=\"ProjectGuide/Project4\">Project #4</a> due 11:59pm</td>\r\n  </tr>\r\n  <tr class=\"divider\">\r\n    <td colspan=\"5\">Finals Week</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Th 12/18</td>\r\n    <td>\r\n      <ul class=\"nomarker\">\r\n        <li><b>FINAL EXAM: 4:00pm-6:00pm, PSLH 100</b></li>\r\n      </ul>\r\n    </td>\r\n    <td></td>\r\n    <td></td>\r\n  </tr>\r\n</table>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 2621.0}