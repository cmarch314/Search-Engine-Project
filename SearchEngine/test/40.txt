{"text": "ICS 45C Fall 2 14 News Course Reference Schedule Project Guide Code Examples About Alex ICS 45C Fall 2 14 Code Example Unit Testing with Google Test The moniker for this code example is GoogleTest Background What is unit testing Many times when we write larger programs built out of many smaller pieces it s difficult to test the individual pieces when in the context of the entire program When we write classes for example our goal is to write a reusable component one that we could potentially use not only in many places within the program we re writing but maybe in other programs if a similar need arose It s often the case that our class will have features that aren t fully exercised in the code we re writing or at least that don t get exercised in an obvious easy to duplicate way yet we ll still want to be sure that the features work the way they should In order to achieve our goal of making sure that the class itself works we need to test it on its own independent of the rest of the program This will allow us to focus our attention on individual behaviors of the class without worrying about what complex interactions we need to set up in our whole program to cause the behavior to occur This kind of testing where we focus on a single small piece of a program a single class a single module sometimes even a single function in isolation from the others is called unit testing A data structure implementation like the one you re building in Project 3 is a great example of where this can be a really useful technique though there are plenty of others There are some who would say that every line of code in a program should be covered by at least one unit test this can be difficult to achieve in practice but is a worthy goal if you can achieve it It should be noted though that fully unit testing a program requires techniques we ve not yet learned so it s probably beyond the limits of what we can accomplish in this course Unit testing frameworks When you write unit tests regardless of what programming language you re writing them in you face a similar set of problems You need to write a set of individual separate tests each isolated from the others and each focusing on one behavior of the code you re testing You d like to be able to run all of the tests and see which ones failed and to make it easy for them to be found i e if you write your tests as functions you shouldn t have to manually add them to a main function in order for them to be called Your tests will tend to set up a scenario run a test and compare the result to what s been expected So it would be handy if there was a generic way to do that Your tests will need to report their output ideally they ll display which test failed what the expected result was and what the actual result was Because these are problems you will always face when writing unit tests you will find that in most programming languages there are unit testing frameworks available that provide out of the box solutions to all of these problems and sometimes more Once in a while a language s standard library will include one e g Python s standard library has a unittest module but more often than not these are third party libraries written by others though they re generally provided in open source form which means that they re usually free and that you can participate in their development if you re so inclined C like many other programming languages has no built in unit testing framework in its standard library but there are multiple projects available in open source that address it One of them called Google Test because it was written by developers at Google though it s available to the community as open source software is already installed on your ICS 45C VM and is the one that we ll be using in our work this quarter Google Test automates the parts of unit testing that would otherwise be tedious to write ourselves letting us instead focus our attention on the tests we want to write We set up our scenario specify what the results should be and Google Test does the rest it can find and run all of our tests automatically reports on which tests succeeded and which failed and even shows us information about each failure what the expected and actual results were what line of code in our test function contained the discrepancy etc As usual with any kind of library we ll have to learn a little bit in order to use Google Test but it requires surprisingly little knowledge to get off the ground and start writing our tests Google Test basics Google Test is actually quite simple to use in practice While there are more complex uses of it than I m showing here using it in a basic way is very simple indeed Here s what you want to do Where should your tests be written In the gtest directory within your project directory you would want to create a source file in which would be a set of related tests A good rule of thumb is that you d have one of these for each class you wanted to test though I sometimes break them up even further than that sometimes In Project 3 we ve already provided this source file so all you ll need to do is write test functions in it You won t need to write any header files assuming that code in one test doesn t need to call into code from any other which it generally doesn t and Google Test will automatically find and execute all of your tests for you so you won t need to worry about writing a main function There is a main function required but I ve already written it and provided it in every project template in a source file called gtestmain cpp which is a short one that basically tells Google Test Find every test function in every source file and run them all automatically What are tests You can think of each individual test as a C function albeit one with a slightly peculiar looking syntax Tests are run in isolation from one another there are no guarantees about the order in which the tests are going to be run so you don t want to write a test that assumes that some other test has already been completed Each test looks something like this TEST TestCaseName testName code for the test A test begins with the word TEST all uppercase followed by two names in parentheses followed by the test s body between curly braces So it looks like a function though it has no declared return type and the name of the test is actually specified within the parentheses In every other way you can think of these as C functions and more or less be right about it Individual tests are grouped together into what are called test cases a slightly odd name but you can think of it as test group if it helps For each test you write you specify the name of the test case first then the name of the individual test So the test above is a test called testName in a test case called TestCaseName What does each test test Each test you write is intended to focus on one behavior of the code you re testing Note that I didn t say one function or one member function for the simple reason that you quite often can t test one function without using others For example if you consider the Song class we wrote in a previous example you wouldn t be able to test getArtist by itself what you would be testing is When a Song is constructed and given a particular artist a subsequent call to getArtist returns the same artist or If a call to setArtist is followed by a call to getArtist getArtist will return whatever artist was passed to setArtist This is what we call behaviors behaviors are sequences of calls to functions for which there are known results It s often the case that you need a sequence of calls before you have a result you can verify How much should each test test Each test should focus on a single behavior not a single function The goal is this When a test fails you should know exactly what scenario failed rather than having to look through a long sequence of test code to try to decide what part of it is wrong If you want to test three different behaviors of the same function write three separate tests Since each test has almost no overhead associated with it it s quite easy to write many of them and if you find that lots of tests need to share the same setup you can even use test fixtures see the documentation for more details to simplify them though we ll skip that in the interest of simplicity for now Assertions and expectations In Google Test there are two ways to specify results that should be checked by your test assertions and expectations They are nearly the same with one key difference An assertion specifies something that must be true at the point where they re written If they re not the test is aborted and is considered to have failed and the report will show why An expectation specifies something that must be true at the point where they re written If they re not the test is considered to have failed but the test continues executing anyway so you can see if other expectations also fail in the same test and the report will show all expectations that failed and why Which of these you want is mainly a matter of taste but they both have the key characteristic that they are a way to say This test won t succeed except under the following condition How you write them is to make calls to functions whose names begin with either ASSERT or EXPECT For example if you want to write a test that asserts that two things are equal you might say this ASSERT EQ a size Note too that the order of these parameters is important the first is the expected value and the second is the value we re testing So the above is a way to say I assert that the size of a should be It ll still work if you get them backward but the report that you get back from Google Test will be written backward too So it s best that we get the order right Check out the Google Test documentation for a list of what assertions are expectations are available they re quite extensive and there are even ways to create your own How to name your tests If each test is intended to test some behavior the best way to name our tests is to give them names that indicate what that behavior is What does the test actually verify The names are important because Google Test generates a report that shows the names of the tests that fail good test names mean that I might well be able to understand what my problem is simply by reading the report and seeing what the actual and expected results were If unit tests are a tool to make testing and debugging easier we should do what we can to help them to do that job naming plays a huge vital role So for example if I was to write a test for the Song class from a previous code example where I wanted to show that a Song s artist is whatever was given at the time it was constructed I might write something like this TEST SongTests containTheArtistGivenWhenConstructed Song song Paul Simon So Beautiful or So What ASSERT EQ Paul Simon song getArtist You might argue that you could also just as easily test the title but I would argue that this is a different behavior so it should be a different test TEST SongTests containTheTitleGivenWhenConstructed Song song Arcade Fire Afterlife ASSERT EQ Afterlife song getTitle And note too that I used different constants in each case That s no accident varying your test data is a good way to be sure that you re not depending on the code you re testing to be making an assumption it shouldn t Finding out more about Google Test You would be well advised to spend a little bit of time reading through Google Test s documentation particularly the Google Test Primer so you can get a sense for what s available and how it works This code example is not nearly all inclusive mainly because Google s documentation is already so complete my goal here was to introduce you to the basic concepts and also give you an idea of how to approach writing unit tests in a more general sense The documentation is linked below Google Test DocumentationGoogle Test Primer The code Note that you will only be able to download the code for this code example if you first update your ICS 45C VM environment so that it is at least as new as this 2 14 11 16 15 43 code example template updated The official moniker for this code example is GoogleTest so your best bet is to do this Create a new project using the code example project template Change into the project directory Issue the command download code GoogleTest to download the code example into your project directory s app directory Alternatively you can click the link to the tarball below GoogleTest tar gz", "_id": "http://www.ics.uci.edu/~thornton/ics45c/CodeExamples/GoogleTest/", "title": "ics 45c fall 2014, code example: unit testing with google test", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2014, Code Example: Unit Testing with Google Test</title>\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2014 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2014<br />\r\n   Code Example: Unit Testing with Google Test</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><i>The moniker for this code example is <b>GoogleTest</b></i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p class=\"subtitle\">What is unit testing?</p>\r\n\r\n<p>Many times when we write larger programs built out of many smaller pieces, it's difficult to test the individual pieces when in the context of the entire program.  When we write classes, for example, our goal is to write a reusable component &mdash; one that we could potentially use not only in many places within the program we're writing, but maybe in other programs, if a similar need arose.  It's often the case that our class will have features that aren't fully exercised in the code we're writing &mdash; or, at least, that don't get exercised in an obvious, easy-to-duplicate way &mdash; yet we'll still want to be sure that the features work the way they should.</p>\r\n\r\n<p>In order to achieve our goal of making sure that the class itself works, we need to test it on its own, independent of the rest of the program.  This will allow us to focus our attention on individual behaviors of the class without worrying about what complex interactions we need to set up in our whole program to cause the behavior to occur.  This kind of testing, where we focus on a single, small piece of a program &mdash; a single class, a single module, sometimes even a single function &mdash; in isolation from the others is called <i>unit testing</i>.  A data structure implementation, like the one you're building in <a href=\"../ProjectGuide/Project3\">Project #3</a> is a great example of where this can be a really useful technique, though there are plenty of others.  (There are some who would say that every line of code in a program should be covered by at least one unit test; this can be difficult to achieve in practice, but is a worthy goal if you can achieve it.  It should be noted, though, that fully unit testing a program requires techniques we've not yet learned, so it's probably beyond the limits of what we can accomplish in this course.)</p>\r\n\r\n<p class=\"subtitle\">Unit testing frameworks</p>\r\n\r\n<p>When you write unit tests, regardless of what programming language you're writing them in, you face a similar set of problems:</p>\r\n\r\n<ul>\r\n  <li>You need to write a set of individual, separate tests, each isolated from the others, and each focusing on one behavior of the code you're testing.</li>\r\n  <li>You'd like to be able to run all of the tests and see which ones failed, and to make it easy for them to be found (i.e., if you write your tests as functions, you shouldn't have to manually add them to a <b>main()</b> function in order for them to be called).</li>\r\n  <li>Your tests will tend to set up a scenario, run a test, and compare the result to what's been expected.  So it would be handy if there was a generic way to do that.</li>\r\n  <li>Your tests will need to report their output; ideally, they'll display which test failed, what the expected result was, and what the actual result was.</li>\r\n</ul>\r\n\r\n<p>Because these are problems you will always face when writing unit tests, you will find that, in most programming languages, there are <i>unit testing frameworks</i> available that provide out-of-the-box solutions to all of these problems (and sometimes more).  Once in a while, a language's standard library will include one &mdash; e.g., Python's standard library has a <b>unittest</b> module &mdash; but, more often than not, these are third-party libraries written by others, though they're generally provided in open-source form, which means that they're usually free and that you can participate in their development if you're so inclined.</p>\r\n\r\n<p>C++, like many other programming languages, has no built-in unit testing framework in its standard library, but there are multiple projects available in open source that address it.  One of them, called <a href=\"https://code.google.com/p/googletest/wiki/Documentation\">Google Test</a> (because it was written by developers at Google, though it's available to the community as open-source software), is already installed on your ICS 45C VM, and is the one that we'll be using in our work this quarter.  Google Test automates the parts of unit testing that would otherwise be tedious to write ourselves, letting us instead focus our attention on the tests we want to write.  We set up our scenario, specify what the results should be, and Google Test does the rest; it can find and run all of our tests automatically, reports on which tests succeeded and which failed, and even shows us information about each failure (what the expected and actual results were, what line of code in our test function contained the discrepancy, etc.).</p>\r\n\r\n<p>As usual with any kind of library, we'll have to learn a little bit in order to use Google Test, but it requires surprisingly little knowledge to get off the ground and start writing our tests.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Google Test basics</p>\r\n\r\n<p>Google Test is actually quite simple to use in practice.  While there are more complex uses of it than I'm showing here, using it in a basic way is very simple indeed.  Here's what you want to do.</p>\r\n\r\n<p class=\"subtitle\">Where should your tests be written?</p>\r\n\r\n<p>In the <b>gtest</b> directory within your project directory, you would want to create a source file, in which would be a set of related tests.  A good rule of thumb is that you'd have one of these for each class you wanted to test, though I sometimes break them up even further than that sometimes.  (In <a href=\"../ProjectGuide/Project3\">Project #3</a> we've already provided this source file, so all you'll need to do is write test functions in it.)</p>\r\n\r\n<p>You won't need to write any header files, assuming that code in one test doesn't need to call into code from any other &mdash; which it generally doesn't &mdash; and Google Test will automatically find and execute all of your tests for you, so you won't need to worry about writing a <b>main()</b> function.  (There is a <b>main()</b> function required, but I've already written it and provided it in every project template in a source file called <b>gtestmain.cpp</b>, which is a short one that basically tells Google Test: \"Find every test function in every source file and run them all automatically.\")</p>\r\n\r\n<p class=\"subtitle\">What are tests?</p>\r\n\r\n<p>You can think of each individual test as a C++ function, albeit one with a slightly peculiar-looking syntax.  Tests are run in isolation from one another &mdash; there are no guarantees about the order in which the tests are going to be run, so you don't want to write a test that assumes that some other test has already been completed.  Each test looks something like this:</p>\r\n\r\n<blockquote><pre>\r\nTEST(TestCaseName, testName)\r\n{\r\n    // code for the test\r\n}\r\n</pre></blockquote>\r\n\r\n<p>A test begins with the word <b>TEST</b> (all uppercase), followed by two names in parentheses, followed by the test's body between curly braces.  So it looks like a function, though it has no declared return type, and the name of the test is actually specified within the parentheses.  In every other way, you can think of these as C++ functions and, more or less, be right about it.</p>\r\n\r\n<p>Individual tests are grouped together into what are called <i>test cases</i> (a slightly odd name, but you can think of it as <i>test group</i> if it helps).  For each test you write, you specify the name of the test case first, then the name of the individual test.  So the test above is a test called <b>testName</b> in a test case called <b>TestCaseName</b>.</p>\r\n\r\n<p class=\"subtitle\">What does each test test?</p>\r\n\r\n<p>Each test you write is intended to focus on one <i>behavior</i> of the code you're testing.  Note that I didn't say one <i>function</i> or one <i>member function</i>, for the simple reason that you quite often can't test one function without using others.  For example, if you consider the <b>Song</b> class we wrote in a previous example, you wouldn't be able to test <b>getArtist()</b> by itself; what you would be testing is \"When a Song is constructed and given a particular artist, a subsequent call to getArtist() returns the same artist\" or \"If a call to setArtist() is followed by a call to getArtist(), getArtist() will return whatever artist was passed to setArtist().\"  This is what we call <i>behaviors</i>; behaviors are <i>sequences</i> of calls to functions for which there are known results.  It's often the case that you need a sequence of calls before you have a result you can verify.</p>\r\n\r\n<p class=\"subtitle\">How much should each test test?</p>\r\n\r\n<p>Each test should focus on a single behavior, not a single function.  The goal is this: When a test fails, you should know exactly what scenario failed, rather than having to look through a long sequence of test code to try to decide what part of it is wrong.  If you want to test three different behaviors of the same function, write three separate tests.</p>\r\n\r\n<p>Since each test has almost no overhead associated with it, it's quite easy to write many of them; and if you find that lots of tests need to share the same setup, you can even use <i>test fixtures</i> (see the documentation for more details) to simplify them, though we'll skip that in the interest of simplicity for now.</p>\r\n\r\n<p class=\"subtitle\">Assertions and expectations</p>\r\n\r\n<p>In Google Test, there are two ways to specify results that should be checked by your test: <i>assertions</i> and <i>expectations</i>.  They are nearly the same, with one key difference:</p>\r\n\r\n<ul>\r\n  <li>An <i>assertion</i> specifies something that must be true at the point where they're written.  If they're not, the test is aborted and is considered to have failed, and the report will show why.</li>\r\n  <li>An <i>expectation</i> specifies something that must be true at the point where they're written.  If they're not, the test is considered to have failed, but the test continues executing anyway, so you can see if other expectations also fail in the same test, and the report will show all expectations that failed and why.</li>\r\n</ul>\r\n\r\n<p>Which of these you want is mainly a matter of taste, but they both have the key characteristic that they are a way to say \"This test won't succeed except under the following condition.\"</p>\r\n\r\n<p>How you write them is to make calls to functions whose names begin with either <b>ASSERT_</b> or <b>EXPECT_</b>.  For example, if you want to write a test that asserts that two things are equal, you might say this:</p>\r\n\r\n<blockquote><pre>\r\nASSERT_EQ(0, a.size());\r\n</pre></blockquote>\r\n\r\n<p>Note, too, that the order of these parameters is important: the first is the expected value, and the second is the value we're testing.  So the above is a way to say \"I assert that the size of a should be 0.\"  (It'll still work if you get them backward, but the report that you get back from Google Test will be written backward, too.  So it's best that we get the order right!)</p>\r\n\r\n<p>Check out the Google Test documentation for a list of what assertions are expectations are available; they're quite extensive (and there are even ways to create your own).</p>\r\n\r\n</p>\r\n\r\n<p class=\"subtitle\">How to name your tests</p>\r\n\r\n<p>If each test is intended to test some behavior, the best way to name our tests is to give them names that indicate what that behavior is.  What does the test actually verify?  The names are important because Google Test generates a report that shows the names of the tests that fail; good test names mean that I might well be able to understand what my problem is simply by reading the report and seeing what the actual and expected results were.  If unit tests are a tool to make testing and debugging easier, we should do what we can to help them to do that job; naming plays a huge, vital role.</p>\r\n\r\n<p>So, for example, if I was to write a test for the <b>Song</b> class from a previous code example, where I wanted to show that a Song's artist is whatever was given at the time it was constructed, I might write something like this:</p>\r\n\r\n<blockquote><pre>\r\nTEST(SongTests, containTheArtistGivenWhenConstructed)\r\n{\r\n    Song song{\"Paul Simon\", \"So Beautiful or So What\"};\r\n    ASSERT_EQ(\"Paul Simon\", song.getArtist());\r\n}\r\n</pre></blockquote>\r\n\r\n<p>You might argue that you could also just as easily test the title, but I would argue that this is a different behavior, so it should be a different test.</p>\r\n\r\n<blockquote><pre>\r\nTEST(SongTests, containTheTitleGivenWhenConstructed)\r\n{\r\n    Song song{\"Arcade Fire\", \"Afterlife\"};\r\n    ASSERT_EQ(\"Afterlife\", song.getTitle());\r\n}\r\n</pre></blockquote>\r\n\r\n<p>(And note, too, that I used different constants in each case.  That's no accident; varying your test data is a good way to be sure that you're not depending on the code you're testing to be making an assumption it shouldn't.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Finding out more about Google Test</p>\r\n\r\n<p>You would be well advised to spend a little bit of time reading through Google Test's documentation, particularly the Google Test Primer, so you can get a sense for what's available and how it works.  This code example is not nearly all-inclusive, mainly because Google's documentation is already so complete; my goal here was to introduce you to the basic concepts, and also give you an idea of how to approach writing unit tests in a more general sense.</p>\r\n\r\n<p>The documentation is linked below.</p>\r\n\r\n<ul>\r\n  <li><a href=\"https://code.google.com/p/googletest/wiki/Documentation\">Google Test Documentation</a></li>\r\n  <li><a href=\"https://code.google.com/p/googletest/wiki/Primer\">Google Test Primer</a></li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The code</p>\r\n\r\n<p>Note that you will only be able to download the code for this code example if you first update your ICS 45C VM environment, so that it is at least as new as this:</p>\r\n\r\n<blockquote><pre>\r\n2014-11-16 15:00:43\r\ncode_example template updated\r\n</pre></blockquote>\r\n\r\n<p>The official moniker for this code example is <b>GoogleTest</b>, so your best bet is to do this:</p>\r\n\r\n<ul>\r\n  <li>Create a new project using the <b>code_example</b> project template.</li>\r\n  <li>Change into the project directory.</li>\r\n  <li>Issue the command <b>./download_code GoogleTest</b> to download the code example into your project directory's <b>app</b> directory.</li>\r\n</ul>\r\n\r\n<p>Alternatively, you can click the link to the tarball below:</p>\r\n\r\n<ul>\r\n  <li><a href=\"GoogleTest.tar.gz\">GoogleTest.tar.gz</a></li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 40.0}