{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 4 1 Using OEChem oemolstreams Up 4 Reading and Writing Next 4 3 Molecular File Formats 4 2 Reading Molecules with a Generator Method The preferred way to read molecules in OEChem is to use the generator methods provided by oemolistreams These methods provide syntax similar to using a for x in y loop to iterate over the elements of a list usr bin env python ch4 2 py from openeye oechem import ifs oemolistream ofs oemolostream for mol in ifs GetOEGraphMols OEWriteMolecule ofs mol Download as text Note that using this syntax there is no need to create a molecule object A single molecule object is created by the generator method GetOEGraphMols and is re used on each loop iteration As such this syntax should not be used to put molecules into a list or other persistent container If you need to create a molecule object that is persistent and can be used after the loop completes there are a couple of alternatives Probably the most efficient is to change the looping criteria slightly and create a new molecule object each time through the loop This first example tests the state of the input stream to determine when the loop is finished usr bin env python ch4 3 py from openeye oechem import ifs oemolistream ofs oemolostream create an empty list mollist loop over input while ifs IsValid mol OEGraphMol OEReadMolecule ifs mol mollist append mol for mol in mollist OEWriteMolecule ofs mol Download as text Alternatively you can use iterator like syntax and then construct a new molecule object from the current one The OEGraphMol constructor can be used except this time we use the mol as an argument to the function creating a new molecule from our temporary one In the next example each time through the loop a new molecule is created and stored in a Python list Then iteration over the list is used to write the molecules back out from openeye oechem import ifs oemolistream ofs oemolostream create an empty list mollist loop over input for mol in ifs GetOEGraphMols newmol OEGraphMol mol create a new molecule mollist append newmol append to list for mol in mollist OEWriteMolecule ofs mol Note for C Users In the C theory manual this same syntax is in the section describing reading molecules with iterators The Python generator methods are a new functionality introduced in Python 2 2 In OEChem they are used to provide the C iterator functionality without requiring the Python user to explicitly create an iterator object OEChem Python Theory Manual Version 1 3 1 Previous 4 1 Using OEChem oemolstreams Up 4 Reading and Writing Next 4 3 Molecular File Formats Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node18.html", "title": "4.2 reading molecules with a generator method", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>4.2 Reading Molecules with a Generator Method</title>\n<META NAME=\"description\" CONTENT=\"4.2 Reading Molecules with a Generator Method\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node19.html\">\n<LINK REL=\"previous\" HREF=\"node17.html\">\n<LINK REL=\"up\" HREF=\"node16.html\">\n<LINK REL=\"next\" HREF=\"node19.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node17.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node19.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node17.html\">4.1 Using OEChem oemolstreams</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node19.html\">4.3 Molecular File Formats</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION006200000000000000000\">\n4.2 Reading Molecules with a Generator Method</A>\n</H1>\n\n<P>\nThe preferred way to read molecules in OEChem is to use the generator\nmethods provided by oemolistreams. These methods provide syntax\nsimilar to using a <code>for x in y</code> loop to iterate over the elements of a\nlist.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch4-2.py\nfrom openeye.oechem import *\n\nifs = oemolistream()\nofs = oemolostream()\n\nfor mol in ifs.GetOEGraphMols():\n    OEWriteMolecule(ofs, mol)\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nNote that using this syntax there is no need to create a molecule\nobject. A single molecule object is created by the generator method\n(<code>GetOEGraphMols</code>) and is re-used on each loop iteration.  As such,\nthis syntax should not be used to put molecules into a list or other\npersistent container.  If you need to create a molecule object that is\npersistent and can be used after the loop completes, there are a couple\nof alternatives.\n\n<P>\nProbably the most efficient is to change the looping criteria slightly\nand create a new molecule object each time through the loop. This first\nexample tests the state of the input stream to determine when the loop is\nfinished.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch4-3.py\nfrom openeye.oechem import *\n\nifs = oemolistream()\nofs = oemolostream()\n\n# create an empty list\nmollist = []\n\n# loop over input\nwhile ifs.IsValid():\n    mol = OEGraphMol()\n    OEReadMolecule(ifs, mol)\n    mollist.append(mol)\n\nfor mol in mollist:\n    OEWriteMolecule(ofs, mol)\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch4-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nAlternatively, you can use iterator-like syntax and then construct a\nnew molecule object from the current one.  The OEGraphMol constructor\ncan be used, except this time we use the ``mol'' as an argument to the\nfunction, creating a new molecule from our temporary one. In the next\nexample, each time through the loop, a new molecule is created and\nstored in a Python list. Then iteration over the list is used to write\nthe molecules back out.\n\n<P>\n<dl><dd><pre class=\"verbatim\">from openeye.oechem import *\n\nifs = oemolistream()\nofs = oemolostream()\n\n# create an empty list\nmollist=[]\n\n# loop over input\nfor mol in ifs.GetOEGraphMols():\n    newmol = OEGraphMol(mol)            # create a new molecule\n    mollist.append(newmol)              # append to list\n\nfor mol in mollist:\n    OEWriteMolecule(ofs, mol)\n</pre></dl>\n\n<P>\nNote for C++ Users: In the C++ theory manual, this same syntax is in\nthe section describing reading molecules with iterators. The Python\ngenerator methods are a new functionality introduced in Python 2.2.\nIn OEChem they are used to provide the C++ iterator functionality\nwithout requiring the Python user to explicitly create an iterator\nobject.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node17.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node16.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node19.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node17.html\">4.1 Using OEChem oemolstreams</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node16.html\">4. Reading and Writing</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node19.html\">4.3 Molecular File Formats</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37888.0}