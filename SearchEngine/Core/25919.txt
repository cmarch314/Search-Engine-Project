{"text": "Distributed Representations and Collective Agreement Les Gasser1 2 Gabriel Ripoche1 3 Bob Sandusky1 Jean Paul Sansonnet3 Bill Turner3 1Graduate School of Library and Information Science University of Illinois at Urbana Champaign 2Institute for Software Research U C Irvine 3LIMSI CNRS Orsay France SQA Project Memo UIUC 2 4 3 March 2 4 Abstract of paper to appear at 4S EASST Meeting Paris France August 2 4 participants do not know how to handle scientific expertise which no longer merits neither total confidence nor total distrust public proofs inherit all the problems of scientific proof but in addition they have to take into account all the problems of providing agreement 4S EASST call for papers 2 4 Free Open Source Software F OSS communities develop large scale software using complex distributed collaborative processes F OSS is an arena in which public proofs based on limited evidence variable social capital and questionable expertise are routinely made developers unknown to one another try proving that a design strategy is good or that a specific repair will be reliable politicians managers and advocates debate the merits of open versus closed software strategies and acquisition policies and so on Many of these debates certainly those within the developer communities are founded on concrete artifacts such as software codes and representations such as problem reports screenshots and execution traces whose accumulation use and interpretation are distributed across space and time These distributed objects are used as direct representations of facts as supporting evidence and as discourse media in public debates Yet because they extend across space and time they are fundamentally mysterious in these roles For example we find serious limitations in many common assumptions about how software codes experience reports and problem interpretations work as representations for supporting problem solving and argumentation Similarly we only have limited accounts of how they support practices of software use In one instance we have examined closely problem reports archived longitudinally in large distributed issue management repositories don t behave as faithful reflections of user experiences and source code conditions and participants can t use them directly and unambiguously to support specific positions or design decisions Instead in practice these reports appear as massive contentious assemblages of information constantly stressed by ongoing reorganization and reinterpretation In many cases recorded comments conflict readers can t interpret comments problems are reported more than once in different ways and it is often difficult to correlate or link reports and with underlying manifestations Empirical observations like these reveal many interesting issues of representation and practice In this paper we unpack several kinds of representations and practices common in F OSS communities linking them to the problems of 1 creating consensus 2 building social capital and 3 taking definitive actions such as committing to specific software coding solutions or allocating developer resources ", "_id": "http://www.ics.uci.edu/~wscacchi/Papers/UIUC/4S-rep+agreemt-public-abstract-04.html", "title": "distributed representations and collective agreement", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <title>Distributed Representations and Collective Agreement</title>\n  </head>\n\n  <body>\n<h2>Distributed Representations and Collective Agreement</h2>\n\n<h3>Les Gasser<sup>1,2</sup>, Gabriel Ripoche<sup>1,3</sup>, Bob Sandusky<sup>1</sup>, Jean-Paul Sansonnet<sup>3</sup>, Bill Turner<sup>3</sup><br><br>\n<sup>1</sup>Graduate School of Library and Information Science, \nUniversity of Illinois at Urbana/Champaign<br>\n<sup>2</sup>Institute for Software Research, U.C. Irvine<br>\n<sup>3</sup>LIMSI/CNRS, Orsay, France<br><br>\n\nSQA Project Memo UIUC-2004-03<br>\nMarch, 2004<br><br>\n<i>Abstract of paper to appear at 4S/EASST Meeting , Paris, France, August, 2004.</i>\n</h3>\n\n<blockquote><i>\n  \"[participants] do not know how to handle scientific expertise which\n  no longer merits neither total confidence nor total\n  distrust....[public proofs] inherit all the problems of...scientific\n  proof, but, in addition, they have to take into account all the\n  problems of providing agreement.\"</i> [4S/EASST call for papers, 2004]\n</blockquote>\n\n<p>Free/Open Source Software (F/OSS) communities develop large-scale\nsoftware using complex distributed, collaborative processes. F/OSS is\nan arena in which \"public proofs\" based on limited evidence, variable\nsocial capital, and questionable expertise are routinely made:\ndevelopers unknown to one another try proving that a design strategy\nis good or that a specific repair will be reliable; politicians,\nmanagers, and advocates debate the merits of open versus closed\nsoftware strategies and acquisition policies, and so on.</p>\n\n<p>Many of these debates (certainly those within the developer\ncommunities) are founded on concrete artifacts (such as software\ncodes) and representations (such as problem reports, screenshots, and\nexecution traces) whose accumulation, use, and interpretation are\ndistributed across space and time. These distributed objects are used\nas direct representations of facts, as supporting evidence, and as\ndiscourse media in public debates. Yet because they extend across\nspace and time, they are fundamentally mysterious in these roles. For\nexample, we find serious limitations in many common assumptions about\nhow software codes, experience reports, and problem interpretations\nwork as representations for supporting problem-solving and\nargumentation.  Similarly, we only have limited accounts of how they\nsupport practices of software use. In one instance we have examined\nclosely, problem reports archived longitudinally in large distributed\nissue-management repositories don't behave as faithful reflections of\nuser experiences and source code conditions, and participants can't\nuse them directly and unambiguously to support specific positions or\ndesign decisions. Instead, in practice these reports appear as\nmassive, contentious assemblages of information constantly stressed by\nongoing reorganization and reinterpretation. In many cases, recorded\ncomments conflict, readers can't interpret comments, problems are\nreported more than once in different ways, and it is often difficult\nto correlate or link reports and with underlying\nmanifestations. Empirical observations like these reveal many\ninteresting issues of representation and practice. In this paper we\nunpack several kinds of representations and practices common in F/OSS\ncommunities, linking them to the problems of 1) creating consensus, 2)\nbuilding social capital, and 3) taking definitive actions such as\ncommitting to specific software coding solutions or allocating\ndeveloper resources.</p>\n\n</body>\n</html>\n", "id": 25919.0}