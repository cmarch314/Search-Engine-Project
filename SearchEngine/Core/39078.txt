{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Container from circulator C Definition The adaptor Container from circulator C is a class that converts any circulator type C to a kind of container class i e a class that provides an iterator and a const iterator type and two member functions begin and end that return the appropriate iterators By analogy to STL container classes these member functions return a const iterator in the case that the container itself is constant and a mutable iterator otherwise include CGAL circulator h Types typedef C Circulator Container from circulator C iterator Container from circulator C const iterator Container from circulator C value type Container from circulator C reference Container from circulator C const reference Container from circulator C pointer Container from circulator C const pointer Container from circulator C size type Container from circulator C difference type Creation Container from circulator C container any iterator of container will have a singular value Container from circulator C container C c any iterator of container will have a singular value if the circulator c corresponds to an empty sequence Operations iterator container begin the start iterator const iterator container begin const the start const iterator iterator container end the past the end iterator const iterator container end const the past the end const iterator The iterator and const iterator types are of the appropriate iterator category In addition to the operations required for their category they have a member function current circulator that returns a circulator pointing to the same position as the iterator does See Also Circulator from iterator Circulator from container Circulator Example The generic reverse algorithm from the STL can be used with an adaptor if at least a bidirectional circulator c is given Circulator c c is assumed to be a bidirectional circulator CGAL Container from circulator Circulator container c reverse container begin container end Implementation The iterator adaptor keeps track of the number of rounds a circulator has done around the ring like data structure a kind of winding number It is used to distinguish between the start position and the end position which will be denoted by the same circulator internally This winding number is zero for the begin iterator and one for the end iterator It is incremented whenever the internal circulator passes the begin position Two iterators are equal if their internally used circulators and winding numbers are equal This is more general than necessary since an iterator equal to end iterator is not supposed to be incremented any more which is here still possible in a defined manner The implementation is different for random access iterators The random access iterator has to be able to compute the size of the data structure in constant time This is for example needed if the difference of the past the end iterator and the begin iterator is taken which is exactly the size of the data structure Therefore if the circulator is of the random access category the adapter chooses the minimal circulator for the internal anchor position The minimal circulator is part of the random access circulator requirements see Page For the random access iterator the adaptor implements a total ordering relation that is currently not required for random access circulators Next CGAL For all Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Circulator_ref/Class_Container_from_circulator.html", "title": "container_from_circulator&lt;c&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Circulator_ref/Container_from_circulator.tex' -->\n<html> <head>  \n<title>Container_from_circulator&lt;C&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1659\"></A>\n\n<A NAME=\"Cross_link_anchor_1660\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1515\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Container_from_circulator<C>\"></A>\n<h2><I>CGAL::Container_from_circulator&lt;C&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe adaptor <I><A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;</I> is a class that converts any\ncirculator type <I>C</I> to a kind of container class, i.e.&nbsp;a class\nthat provides an <I>iterator</I> and a <I>const_iterator</I>\ntype and two member functions - <I>begin()</I> and <I>end()</I>\n- that return the appropriate iterators. By analogy to STL container classes these member functions return a const iterator in\nthe case that the container itself is constant and a mutable iterator\notherwise.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator.h\">CGAL/circulator.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Circulator\"></A>\n<A NAME=\"Typedef_Circulator\"></A>\ntypedef C\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::const_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::value_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::reference\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::const_reference\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::pointer\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::const_pointer\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::size_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt;::difference_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt; container;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    any iterator of <I>container</I> will have a singular value.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A>&lt;C&gt; container (  C c);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    any iterator of <I>container</I> will have a singular value if the \n    circulator <I>c</I> corresponds to an empty sequence.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_begin69;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    container.begin () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the start iterator.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_iterator_begin69_const;\"></A>\nconst_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    container.begin () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the start const iterator.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator_end69;\"></A>\niterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    container.end () \n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past-the-end iterator.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_iterator_end69_const;\"></A>\nconst_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    container.end () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past-the-end const iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe <I>iterator</I> and <I>const_iterator</I> types are of the\nappropriate iterator category. In addition to the operations required\nfor their category, they have a member function\n<I>current_circulator()</I> that returns a circulator pointing to the\nsame position as the iterator does.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A></I>, \n<I><A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A></I>,\n<I><A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A></I>.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe generic <TT>reverse()</TT> algorithm from the STL can be used with an\nadaptor if at least a bidirectional circulator <TT>c</TT> is given.\n<P>\n\n<pre class=\"ExampleCode\">\n<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A> c;  // c is assumed to be a bidirectional circulator.\n<A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1659\">CGAL::Container_from_circulator</A>&lt;<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>&gt; container(c);\nreverse( container.begin(), container.end());\n</pre>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe iterator adaptor keeps track of the number of rounds a circulator\nhas done around the ring-like data structure (a kind of winding\nnumber). It is used to distinguish between the start position and the\nend position which will be denoted by the same circulator internally.\nThis winding number is zero for the <I>begin()</I>-iterator and one\nfor the <I>end()</I>-iterator.  It is incremented whenever the\ninternal circulator passes the <I>begin()</I> position. Two\niterators are equal if their internally used circulators and winding\nnumbers are equal. \nThis is more general than necessary since an iterator equal to\n<I>end()</I>-iterator is not supposed to be incremented \n any more, which is here still possible in a defined manner.\n<P>\n\nThe implementation is different for random access iterators.\nThe random access iterator has to be able to compute the size of the\ndata structure in constant time. This is for example needed if the\ndifference of the past-the-end iterator and the begin iterator is\ntaken, which is exactly the  size of the data structure.\nTherefore, if the circulator is of the random-access category, the\nadapter chooses the minimal circulator for the internal anchor\nposition. The minimal circulator is part of the random access\ncirculator requirements, see\nPage&nbsp;<A HREF=\"Concept_Circulator.html#sectionMinCircleRequ\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.  For the random\naccess iterator the adaptor implements a total ordering relation that\nis currently not required for random access circulators.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Macro_CGAL_For_all.html\"><I>CGAL_For_all</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39078.0}