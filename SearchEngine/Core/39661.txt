{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Segment tree k Traits Definition An object of the class Segment tree k is a k dimensional segment tree that can store k dimensional intervals of type Interval The class allows to perform window queries enclosing queries and inverse range queries on the keys The class Segment tree k is parameterized with a segment tree traits class Traits that defines among other things the type of the Interval In order to perform an inverse range query a range query of width has to be performed We prefered not to offer an extra function for this sort of query since the inverse range query is a special case of the range query Furthermore offering an inverse range query in the segment tree class implies offering this function also in the range tree class and having an extra item in the traits class that accesses the inverse range query point CGAL provides traits class implementations that allow to use the segment tree with point classes from the CGAL kernel as keys These classes are CGAL Range segment tree traits set 2 R CGAL Range segment tree traits set 3 R CGAL Segment tree traits map 2 R and CGAL Segment tree traits map 3 R The concept RangeSegmentTreeTraits d defines the requirements that segment tree traits classes must fulfill This allows the advanced user to develop further segment tree traits classes include CGAL Segment tree k h Types Segment tree k Traits Traits the type of the segment tree traits class typedef Traits Key Key typedef Traits Interval Interval Creation Segment tree k Traits S Introduces an empty segment tree S template class ForwardIterator Segment tree k Traits S ForwardIterator first ForwardIterator last Introduces a segment tree S and initializes it with the data in the range first last Precondition value type first Traits Interval Operations template class ForwardIterator void S make tree ForwardIterator first ForwardIterator last Introduces a segment tree S and initializes it with the data in the range first last This function can only be applied once on an empty segment tree Precondition value type first Traits Interval template class OutputIterator OutputIterator S window query Interval window OutputIterator out writes all intervals that have non empty intersection with interval window to the container where out points to and returns an output iterator that points to the last location the function wrote to Precondition value type out Traits Interval template class OutputIterator OutputIterator S enclosing query Interval window OutputIterator out writes all intervals that enclose in the interval window to the container where out points to and returns an output iterator that points to the last location the function wrote to Precondition value type out Traits Interval Example This example illustrates the use of the predefined segment tree on 3 dimensional interval data with no value associated After the definition of the traits type and tree type some intervals are constructed and the tree is build according to the intervals Then a window query is performed and the query elements are given out include CGAL Cartesian h include CGAL Segment tree k h include CGAL Range segment tree traits h typedef CGAL Cartesian int K typedef CGAL Range segment tree set traits 3 K Traits typedef CGAL Segment tree 3 Traits Segment tree 3 type int main typedef Traits Interval Interval typedef Traits Key Key std list Interval InputList OutputList InputList push back Interval Key 1 5 7 Key 2 7 9 InputList push back Interval Key 2 7 6 Key 3 8 9 InputList push back Interval Key 6 9 5 Key 9 13 8 InputList push back Interval Key 1 3 4 Key 3 9 8 Segment tree 3 type Segment tree 3 InputList begin InputList end Interval a Key 3 6 5 Key 7 12 8 Segment tree 3 window query a std back inserter OutputList std list Interval iterator j OutputList1 begin std cout n window query 3 6 5 7 12 8 n while j OutputList end std cout j first x j first y std cout j first z j second x std cout j second y j second z std endl j Next Segment tree traits map 2 R T Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/SearchStructures_ref/Class_Segment_tree_k.html", "title": "segment_tree_k&lt;traits&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './SearchStructures_ref/Segment_tree_k.tex' -->\n<html> <head>  \n<title>Segment_tree_k&lt;Traits&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1264\"></A>\n\n<A NAME=\"Cross_link_anchor_1265\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1330\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Segment_tree_k<Traits>\"></A>\n<h2><I>CGAL::Segment_tree_k&lt;Traits&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn object of the class  <I><A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A></I> is a <MATH><I>k</I></MATH>-dimensional segment tree\nthat can store k-dimensional intervals  of type <I><A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>. \nThe class allows to perform\nwindow queries, enclosing queries, and inverse range queries on the keys.  The class <I><A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A></I> is parameterized with\na segment tree traits class <I>Traits</I> that defines, among other things, \nthe type of the <I><A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>. \nIn order to perform an inverse range query, a range query of\n<MATH><I><IMG BORDER=0 WIDTH=5 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_epsilon.gif\"></I></MATH> width has to be performed. We prefered not to offer an\nextra function for this sort of query, since the inverse range\nquery is a special case of the range query. Furthermore, offering\nan inverse range query in the segment tree class implies offering this\nfunction also in the range tree class and having an extra item in\nthe traits class that accesses the inverse range query point.\n<P>\n\nC<SMALL>GAL</SMALL> provides traits class implementations that allow to use \nthe segment tree with point classes from the C<SMALL>GAL</SMALL> kernel as keys.\nThese classes are <I><A HREF=\"Class_Range_segment_tree_traits_set_2.html#Cross_link_anchor_1250\">CGAL::Range_segment_tree_traits_set_2</A>&lt;R&gt;</I>,\n<I><A HREF=\"Class_Range_segment_tree_traits_set_3.html#Cross_link_anchor_1252\">CGAL::Range_segment_tree_traits_set_3</A>&lt;R&gt;</I>, \n<I><A HREF=\"Class_Segment_tree_traits_map_2.html#Cross_link_anchor_1266\">CGAL::Segment_tree_traits_map_2</A>&lt;R&gt;</I> and\n<I><A HREF=\"Class_Segment_tree_traits_map_3.html#Cross_link_anchor_1268\">CGAL::Segment_tree_traits_map_3</A>&lt;R&gt;</I>.  The concept\nRangeSegmentTreeTraits_d defines the requirements that segment tree traits\nclasses must fulfill. This allows the advanced user to develop further\nsegment tree traits classes.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Segment_tree_k.h\">CGAL/Segment_tree_k.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A>&lt;Traits&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the type of the segment tree traits class.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Key\"></A>\n<A NAME=\"Typedef_Key\"></A>\ntypedef Traits::Key\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Key;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Interval\"></A>\n<A NAME=\"Typedef_Interval\"></A>\ntypedef Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A>&lt;Traits&gt; S;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces an empty segment tree <I>S</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt; class ForwardIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A>&lt;Traits&gt; S ( ForwardIterator first,  ForwardIterator last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces a segment tree <I>S</I> and initializes it with the data\nin the range <I>[first, last)</I>.<BR>\n\n<EM>Precondition: </EM><I>value_type(first) == Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class ForwardIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_make_tree6ForwardIterator_first+_ForwardIterator_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    S.make_tree ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator first,<BR>\n\nForwardIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Introduces a segment tree <I>S</I> and initializes it with the data\nin the range <I>[first, last)</I>. This function can only be applied\nonce on an empty segment tree.<BR>\n\n<EM>Precondition: </EM><I>value_type(first) == Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_window_query6Interval_window+_OutputIterator_out9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.window_query ( <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> window,  OutputIterator out)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    writes all intervals that have non empty <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> with interval <I>window</I> to the container\nwhere <I>out</I> points to, and returns an output iterator that points\nto the last location the function wrote to.<BR>\n\n<EM>Precondition: </EM><I>value_type(out) == Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_enclosing_query6Interval_window+_OutputIterator_out9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    S.enclosing_query ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> window,<BR>\n\nOutputIterator out)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    writes all intervals that enclose in the interval <I>window</I> to the container\nwhere <I>out</I> points to, and returns an output iterator that points\nto the last location the function wrote to.<BR>\n\n<EM>Precondition: </EM><I>value_type(out) == Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A></I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThis example illustrates the use of the predefined segment tree\non 3-dimensional interval data (with no value associated). After\nthe definition of the traits type and tree type, some intervals\nare constructed and the tree is build according to the\nintervals. Then, a window query is performed and the query\nelements are given out.\n<P>\n\n<pre class=\"Verbatim\">\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Segment_tree_k.html#Cross_link_anchor_1265\">Segment_tree_k</A>.h&gt;\n#include &lt;CGAL/Range_segment_tree_traits.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;int&gt; K;\ntypedef CGAL::Range_segment_tree_set_traits_3&lt;K&gt; Traits;\ntypedef CGAL::Segment_tree_3&lt;Traits&gt; Segment_tree_3_type;\n\nint main()\n{\n  typedef Traits::<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\n  typedef Traits::Key Key;\n  std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt; InputList, OutputList;\n\n  InputList.push_back(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(Key(1,5,7), Key(2,7,9)));\n  InputList.push_back(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(Key(2,7,6), Key(3,8,9)));\n  InputList.push_back(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(Key(6,9,5), Key(9,13,8)));\n  InputList.push_back(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(Key(1,3,4), Key(3,9,8)));\n \n  Segment_tree_3_type Segment_tree_3(InputList.begin(),InputList.end());\n\n  <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> a(Key(3,6,5), Key(7,12,8));\n  Segment_tree_3.window_query(a,std::back_inserter(OutputList));\n  std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt;::iterator j = OutputList1.begin();\n  std::cout &lt;&lt; &quot;\\n window_query (3,6,5),(7,12,8) \\n&quot;;\n  while(j!=OutputList.end()){\n    std::cout &lt;&lt; (*j).first.x() &lt;&lt; &quot;,&quot; &lt;&lt; (*j).first.y() &lt;&lt; &quot;,&quot;;\n    std::cout &lt;&lt; (*j).first.z() &lt;&lt;&quot;, &quot; &lt;&lt; (*j).second.x() &lt;&lt; &quot;,&quot;;\n    std::cout &lt;&lt; (*j).second.y() &lt;&lt; &quot;,&quot; &lt;&lt; (*j).second.z() &lt;&lt; std::endl; \n    j++;\n  }\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Segment_tree_traits_map_2.html\"><I>Segment_tree_traits_map_2&lt;R,T&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_60!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39661.0}