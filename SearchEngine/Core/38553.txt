{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 51Geometric Optimisation Bernd G rtner Thomas Herrmann Michael Hoffmann and Sven Sch nherr Geometric optimisation deals with problems of computing geometric objects which are optimal subject to certain criteria and constraints Our running example will be the problem of computing the sphere of smallest radius which contains a given point set in d dimensional Euclidean space The geometric optimisation algorithms in CGAL fall into three categories Bounding Volumes Optimal Distances and Advanced Techniques 51 1 Bounding and Inscribed Volumes This category contains algorithms which for a given point set compute the best circumscribing or inscribed object from a specific class If the class consists of all spheres in d dimensional Euclidean space and best is defined as having smallest radius then we obtain the smallest enclosing sphere problem already mentioned above In the following example a smallest enclosing circle CGAL Min circle 2 Traits is constructed from points on a line and written to standard output The example shows that it is advisable to switch on random shuffling in order to deal with a bad order of the input points include CGAL Homogeneous h include CGAL Min circle 2 h include CGAL Min circle 2 traits 2 h include CGAL Gmpz h include iostream typedefs typedef CGAL Gmpz NT typedef CGAL Homogeneous NT K typedef CGAL Min circle 2 traits 2 K Traits typedef CGAL Min circle 2 Traits Min circle typedef K Point 2 Point main int main int char int n 1 Point P new Point n for int i i n i P i Point i 2 i i 1 2 3 Min circle mc1 P P n false very slow Min circle mc2 P P n true fast CGAL set pretty mode std cout std cout mc2 delete P return Other classes for which we provide solutions are ellipses CGAL Min ellipse 2 Traits rectangles CGAL min rectangle 2 parallelograms CGAL min parallelogram 2 and strips CGAL min strip 2 in the plane with appropriate optimality criteria In addition to spheres for points CGAL Min sphere d Traits and spheres for spheres CGAL Min sphere of spheres d Traits there is another class of objects which allows for solutions in arbitrary dimension namely annuli CGAL Min annulus d Traits Bounding volumes can be used to obtain simple approximations of complicated objects For example consider the problem of deciding whether two moving polygons currently intersect An obvious solution is to discretize time and perform a full intersection test for any time step If the polygons are far apart most of the time this is unnecessary Instead simple bounding volumes for examples circles are computed for both polygons at their initial positions At subsequent time steps an intersection test between the moving bounding circles replaces the actual intersection test only if the circles do intersect the expensive intersection test between the polygons is performed In practice bounding volume hierarchies are often used on top of simple bounding volumes to approximate complicated objects more accurately As far as inscribed volumes are concerned we provide algorithms for computing maximal inscribed k gons triangles quadrilaterals of a planar point set P Maximal k gons are convex and it is known that their vertices can be chosen to be vertices of the convex hull of P Hence the functions CGAL maximum area inscribed k gon 2 and CGAL maximum perimeter inscribed k gon 2 operate on convex polygons only The example below shows that the largest area triangle green and the largest perimeter triangle orange containing the top point of a point set are different in general We further provide an algorithm for computing the maximal area inscribed axis parallel rectangle Given a set of points in the plane the class CGAL Largest empty iso rectangle 2 T is a data structure that maintains an iso rectangle with the largest area among all iso rectangles that are inside a given iso rectangles and that do not contain any point of the point set Bounding and inscribed volumes are also frequently applied to extract geometric properties of objects For example the smallest enclosing annulus of a point set can be used to test whether a set of points is approximately cospherical Here the width of the annulus or its area or still another criterion that we use is a good measure for this property The largest area triangle is for example used in heuristics for matching archaeological aerial photographs Largest perimeter triangles are used in scoring cross country soaring flights where the goal is basically to fly as far as possible but still return to the departure airfield To score simply based on the total distance flown is not a good measure since circling in thermals allows to increase it easily Bounding volumes also define geometric center points of objects For example if two objects are to be matched approximately one approch is to first apply the translation that maps the centers of their smallest enclosing spheres onto each other Simpler centers are possible of course center of gravity center of bounding box but more advanced bounding volumes might give better results in some cases It can also make sense to consider several center points instead of just one For example we provide algorithms to cover a planar point set with between two and four minimal boxes CGAL rectangular p center 2 Below is an example covering with three boxes the center points are shown in red To avoid later disappointment one very nice class of bounding volumes namely ellipsoids in three and higherdimensional space is currently not supported by CGAL The reason is that the algebraic complexity of this problem is still beyond the level which would allow us to come up with a solution that satisfies the CGAL standards We are working on a solution for 3 space though 51 2 Optimal Distances This section currently consists of two algorithms only On one hand one can compute the computation of the distance between the convex hulls of two given point sets in d dimensional Euclidean space CGAL Polytope distance d Traits Moreover it is possible to compute the width of a point set in three dimensions CGAL Width 3 Traits The obvious application is collision detection between convex bodies in space In the spirit of the bounding volume application above it also makes sense for nonconvex objects a full intersection test between complicated objects could in a first stage be approximated with the test between the convex hulls of the objects Only if the hulls intersect a full intersection test is necessary To dampen fears concerning the performance of the distance computation we want to mention that the convex hulls of the input point sets are not explicitly computed This avoids a runtime which grows exponentially in d In fact the runtime is almost always linear in the size of the two point sets 51 3 Advanced techniques Geometric optimisation is a well studied subject also in theory Consequently general design principles have been developed from which solutions to diverse problems arise For example although the problems of computing the smallest enclosing sphere of a point set and the problem of computing the distance between two convex hulls seem to be quite different they are both instances of a more general optimisation problem named quadratic programming To be more specific CGAL s solutions for the two quadratic programming instances just mentioned are based on a general quadratic programming solver which will be documented as a separate unit in future releases Two techniques that we make available in this section are CGAL monotone matrix search and CGAL sorted matrix search They deal with the problem of efficiently finding largest entries in matrices with certain structural properties Many concrete problems can be modelled as matrix search problems and for some of them we provide explicit solutions that allow you to solve them without knowing about the matrix search technique Examples are the computation of all furthest neighbors for the vertices of a convex polygon maximal k gons inscribed into a planar point set and computing rectangular p centers Next chapter Geometric Optimisation Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation/Chapter_main.html", "title": "geometric optimisation", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation/main.tex' -->\n<html> <head>  \n<title>Geometric Optimisation</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_51\"></a>\n  \n<h1>Chapter 51<BR>Geometric Optimisation</h1>\n <A NAME=\"Optimisation\"></A>\n\n<EM>Bernd G&auml;rtner, Thomas Herrmann, Michael Hoffmann, and Sven Sch&ouml;nherr</EM><BR>\n\n\n<P>\n\nGeometric optimisation deals with problems of computing geometric\nobjects which are optimal subject to certain criteria and constraints.\nOur running example will be the problem of computing the sphere of\nsmallest radius which contains a given point set in <MATH><I>d</I></MATH>-dimensional\nEuclidean space.\n<P>\n\n<center>\n<img border=\"0\" src=\"ball.gif\" align=\"center\">\n</center>\n<P>\n\nThe geometric optimisation algorithms in C<SMALL>GAL</SMALL> fall into three categories,\n``Bounding Volumes'', ``Optimal Distances'' and ``Advanced Techniques''.\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>51.1&nbsp;&nbsp;&nbsp;Bounding and Inscribed Volumes</h2>\n<A NAME=\"c:opt:sec:bounding\"></A>\n<P>\n\nThis category contains algorithms which for a given point set compute\nthe ``best'' circumscribing (or inscribed) object from a specific\nclass. If the class consists of all spheres in <MATH><I>d</I></MATH>-dimensional\nEuclidean space and ``best'' is defined as having smallest radius,\nthen we obtain the smallest enclosing sphere problem already mentioned\nabove.\n<P>\n\nIn the following example a smallest enclosing circle\n(<I><A HREF=\"../Optimisation_ref/Class_Min_circle_2.html#Cross_link_anchor_1138\">CGAL::Min_circle_2</A>&lt;Traits&gt;</I>) is constructed from points \non a line and written to standard output. The example\nshows that it is advisable to switch on random shuffling \nin order to deal with a `bad' order of the input points.\n<P>\n\n<pre class=\"ExampleCode\">#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Optimisation_ref/Class_Min_circle_2.html#Cross_link_anchor_1139\">Min_circle_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Optimisation_ref/Class_Min_circle_2_traits_2.html#Cross_link_anchor_1141\">Min_circle_2_traits_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n#include &lt;iostream&gt;\n\n// typedefs\ntypedef  <A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A>                      NT;\ntypedef  <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;NT&gt;           K;\ntypedef  <A HREF=\"../Optimisation_ref/Class_Min_circle_2_traits_2.html#Cross_link_anchor_1140\">CGAL::Min_circle_2_traits_2</A>&lt;K&gt;  Traits;\ntypedef  <A HREF=\"../Optimisation_ref/Class_Min_circle_2.html#Cross_link_anchor_1138\">CGAL::Min_circle_2</A>&lt;Traits&gt;      Min_circle;\n\ntypedef  K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                      Point;\n\n// main\nint\nmain( int, char**)\n{\n    int     n = 100;\n    Point*  P = new Point[ n];\n\n    for ( int i = 0; i &lt; n; ++i)\n\tP[ i] = Point( (i%2 == 0 ? i : -i), 0);\n    // (0,0), (-1,0), (2,0), (-3,0), ...\n\n    Min_circle  mc1( P, P+n, false);    // very slow\n    Min_circle  mc2( P, P+n, true);     // fast\n\n    <A HREF=\"../IOstream_ref/Function_set_pretty_mode.html#Cross_link_anchor_1749\">CGAL::set_pretty_mode</A>( std::cout);\n    std::cout &lt;&lt; mc2;\n\n    delete[] P;\n\n    return( 0);\n}\n</pre>\n<P>\n\nOther classes for which we provide solutions are ellipses\n(<I><A HREF=\"../Optimisation_ref/Class_Min_ellipse_2.html#Cross_link_anchor_1143\">CGAL::Min_ellipse_2</A>&lt;Traits&gt;</I>), rectangles (<I><A HREF=\"../Optimisation_ref/Function_min_rectangle_2.html#Cross_link_anchor_1148\">CGAL::min_rectangle_2</A></I>),\nparallelograms (<I><A HREF=\"../Optimisation_ref/Function_min_parallelogram_2.html#Cross_link_anchor_1150\">CGAL::min_parallelogram_2</A></I>) and strips\n(<I><A HREF=\"../Optimisation_ref/Function_min_strip_2.html#Cross_link_anchor_1152\">CGAL::min_strip_2</A></I>) in the plane, with appropriate optimality\ncriteria. In addition to spheres for points \n(<I><A HREF=\"../Optimisation_ref/Class_Min_sphere_d.html#Cross_link_anchor_1162\">CGAL::Min_sphere_d</A>&lt;Traits&gt;</I>) and spheres for spheres \n(<I><A HREF=\"../Optimisation_ref/Class_Min_sphere_of_spheres_d.html#Cross_link_anchor_1166\">CGAL::Min_sphere_of_spheres_d</A>&lt;Traits&gt;</I>), there\nis another class of objects which allows for solutions in arbitrary\ndimension, namely annuli (<I><A HREF=\"../Optimisation_ref/Class_Min_annulus_d.html#Cross_link_anchor_1164\">CGAL::Min_annulus_d</A>&lt;Traits&gt;</I>).\n<P>\n\n<center>\n<img border=\"0\" src=\"annulus.gif\" align=\"center\">\n</center>\n<P>\n\nBounding volumes can be used to obtain simple approximations of\ncomplicated objects. For example, consider the problem of deciding\nwhether two moving polygons currently intersect. An obvious solution\nis to discretize time and perform a full <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test for any\ntime step. If the polygons are far apart most of the time, this is\nunnecessary. Instead, simple bounding volumes (for examples, circles)\nare computed for both polygons at their initial positions. At\nsubsequent time steps, an <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test between the moving\nbounding circles replaces the actual <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test; only if the\ncircles do intersect, the expensive <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test between the\npolygons is performed. In practice, bounding <A HREF=\"../Kernel_23_ref/Function_volume.html#Cross_link_anchor_269\">volume</A> hierarchies are\noften used on top of simple bounding volumes to approximate\ncomplicated objects more accurately.\n<P>\n\nAs far as inscribed volumes are concerned, we provide algorithms for\ncomputing maximal inscribed <MATH><I>k</I></MATH>-gons (triangles, quadrilaterals,\n...) of a planar point set <MATH><I>P</I></MATH>. Maximal <MATH><I>k</I></MATH>-gons are convex, and it\nis known that their vertices can be chosen to be vertices of the\nconvex hull of <MATH><I>P</I></MATH>. Hence, the functions\n<I><A HREF=\"../Optimisation_ref/Function_maximum_area_inscribed_k_gon_2.html#Cross_link_anchor_1182\">CGAL::maximum_area_inscribed_k_gon_2</A></I> and\n<I><A HREF=\"../Optimisation_ref/Function_maximum_perimeter_inscribed_k_gon_2.html#Cross_link_anchor_1184\">CGAL::maximum_perimeter_inscribed_k_gon_2</A></I> operate on convex polygons\nonly. The example below shows that the largest <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> triangle (green)\nand the largest perimeter triangle (orange, containing the top point)\nof a point set are different in general.\n<P>\n\n<center>\n<img border=\"0\" src=\"max_triangle.gif\" align=\"center\">\n</center>\n<P>\n\nWe further provide an algorithm for computing the maximal <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A>\ninscribed axis <A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A> rectangle\n<P>\n\nGiven a set of points in the plane, the class <I><A HREF=\"../Optimisation_ref/Class_Largest_empty_iso_rectangle_2.html#Cross_link_anchor_1193\">CGAL::Largest_empty_iso_rectangle_2</A>&lt;T&gt;</I>\nis a data structure that maintains an iso-rectangle with the largest <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> among\nall iso-rectangles that are inside a given iso-rectangles, and\nthat do not contain any point of the point set.\n<P>\n\n<center>\n<img border=\"0\" src=\"largestEmptyRect.gif\" align=\"center\">\n</center>\n<P>\n\nBounding and inscribed volumes are also frequently applied to extract\ngeometric properties of objects. For example, the smallest enclosing\nannulus of a point set can be used to test whether a set of points is\napproximately cospherical. Here, the width of the annulus (or its\n<A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A>, or still another criterion that we use) is a good measure for\nthis property. The largest <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> triangle is for example used in\nheuristics for matching archaeological aerial photographs. Largest\nperimeter triangles are used in scoring cross country soaring flights,\nwhere the goal is basically to fly as far as possible, but still\nreturn to the departure airfield. To score simply based on the total\ndistance flown is not a good measure, since circling in thermals\nallows to increase it easily.\n<P>\n\nBounding volumes also define geometric ``center points'' of objects.\nFor example, if two objects are to be matched (approximately), one\napproch is to first apply the translation that maps the centers of\ntheir smallest enclosing spheres onto each other.  Simpler centers are\npossible, of course (center of gravity, center of bounding box), but\nmore advanced bounding volumes might give better results in some\ncases. It can also make sense to consider several center points\ninstead of just one. For example, we provide algorithms to cover a\nplanar point set with between two and four minimal boxes\n(<I><A HREF=\"../Optimisation_ref/Function_rectangular_p_center_2.html#Cross_link_anchor_1157\">CGAL::rectangular_p_center_2</A></I>). Below is an example covering with\nthree boxes; the center points are shown in red.\n<P>\n\n<center>\n<img border=\"0\" src=\"pcenter.gif\" align=\"center\">\n</center>\n<P>\n\nTo avoid later disappointment: one very nice class of bounding\nvolumes, namely ellipsoids in three- and higherdimensional space, is\ncurrently not supported by C<SMALL>GAL</SMALL>. The reason is that the algebraic\ncomplexity of this problem is still beyond the level which would allow\nus to come up with a solution that satisfies the C<SMALL>GAL</SMALL> standards. We\nare working on a solution for 3-space, though.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>51.2&nbsp;&nbsp;&nbsp;Optimal Distances</h2>\n<P>\n\nThis section currently consists of two algorithms only. On one hand,\none can compute the computation of the distance between the convex\nhulls of two given point sets in <MATH><I>d</I></MATH>-dimensional Euclidean space\n(<I><A HREF=\"../Optimisation_ref/Class_Polytope_distance_d.html#Cross_link_anchor_1204\">CGAL::Polytope_distance_d</A>&lt;Traits&gt;</I>). Moreover, it is possible to\ncompute the width of a point set in three dimensions\n(<I><A HREF=\"../Optimisation_ref/Class_Width_3.html#Cross_link_anchor_1199\">CGAL::Width_3</A>&lt;Traits&gt;</I>).\n<P>\n\n<center>\n<img border=\"0\" src=\"polydist.gif\" align=\"center\">\n</center>\n<P>\n\nThe obvious application is collision detection between convex bodies\nin space. In the spirit of the bounding <A HREF=\"../Kernel_23_ref/Function_volume.html#Cross_link_anchor_269\">volume</A> application above, it\nalso makes sense for nonconvex objects: a full <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test\nbetween complicated objects could in a first stage be approximated\nwith the test between the convex hulls of the objects. Only if the\nhulls intersect, a full <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> test is necessary.\n<P>\n\nTo dampen fears concerning the performance of the distance\ncomputation, we want to mention that the convex hulls of the input\npoint sets are not explicitly computed. This avoids a runtime which\ngrows exponentially in <MATH><I>d</I></MATH>. In fact, the runtime is almost always\nlinear in the size of the two point sets.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>51.3&nbsp;&nbsp;&nbsp;Advanced techniques</h2>\n<P>\n\nGeometric optimisation is a well-studied subject also in theory.\nConsequently, general design principles have been developed from which\nsolutions to diverse problems arise. For example, although the\nproblems of computing the smallest enclosing sphere of a point set and\nthe problem of computing the distance between two convex hulls seem to\nbe quite different, they are both instances of a more general\noptimisation problem, named ``quadratic programming''. To be more\nspecific, C<SMALL>GAL</SMALL>'s solutions for the two quadratic programming\ninstances just mentioned are based on a general quadratic programming\nsolver, which will be documented as a separate unit in future\nreleases.\n<P>\n\nTwo techniques that we make available in this section are\n<I><A HREF=\"../Optimisation_ref/Function_monotone_matrix_search.html#Cross_link_anchor_1206\">CGAL::monotone_matrix_search</A></I> and <I><A HREF=\"../Optimisation_ref/Function_sorted_matrix_search.html#Cross_link_anchor_1212\">CGAL::sorted_matrix_search</A></I>. They deal\nwith the problem of efficiently finding largest entries in matrices\nwith certain structural properties. Many concrete problems can be\nmodelled as matrix search problems, and for some of them we provide\nexplicit solutions that allow you to solve them without knowing about\nthe matrix search technique. Examples are, the computation of all\nfurthest neighbors for the vertices of a convex polygon, maximal\n<MATH><I>k</I></MATH>-gons inscribed into a planar point set, and computing rectangular\n<MATH><I>p</I></MATH>-centers.\n<P>\n\n<A NAME=\"Index_anchor_1035\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_1036\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_1037\"></A>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Optimisation_ref/Chapter_intro.html\">Geometric Optimisation</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_51!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38553.0}