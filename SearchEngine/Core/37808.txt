{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 21 2 Predefined OEChem Functors Up 21 Predicate Functions Next 21 4 Composition Functors in 21 3 Writing your own Functors in Python Deriving new instances of OEUnaryFunctions and OEUnaryPredicates requires C but for many cases a special case of these has been instantiated for atoms and bonds OEPyAtomPredicate and OEPyBondPredicate are special case predicates that take a Python function as the single argument In essence we are creating a callback that itself holds a callback This Python function must be defined a certain way First it can only take a single argument an atom for an OEPyAtomPredicate and a bond for an OEPyBondPredicate Second it must return 1 if the atom bond satisifies the condition and otherwise Since it may sometimes be necessary to create predicates that hold state a class instance method can be used Just make sure that the method to which a pointer will be stored inside the C predicate stays in scope while the predicate is used The following example shows a user defined functor which screens for atoms whose atomic mass is greater than 15 usr bin env python ch21 2 py from openeye oechem import def AtomWgtGT15 atom if OEGetAverageWeight atom GetAtomicNum 15 return 1 return WeightGT15 PyAtomPredicate AtomWgtGT15 mol OEGraphMol OEParseSmiles mol c1c O c O c Cl cc1CCCBr OETriposAtomNames mol for atom in mol GetAtoms WeightGT15 print atom GetName has weight 15 Download as text OEChem Python Theory Manual Version 1 3 1 Previous 21 2 Predefined OEChem Functors Up 21 Predicate Functions Next 21 4 Composition Functors in Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node189.html", "title": "21.3 writing your own functors in python", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>21.3 Writing your own Functors in Python</title>\n<META NAME=\"description\" CONTENT=\"21.3 Writing your own Functors in Python\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node190.html\">\n<LINK REL=\"previous\" HREF=\"node188.html\">\n<LINK REL=\"up\" HREF=\"node186.html\">\n<LINK REL=\"next\" HREF=\"node190.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node188.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node186.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node190.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node188.html\">21.2 Predefined OEChem Functors</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node186.html\">21. Predicate Functions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node190.html\">21.4 Composition Functors in</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0023300000000000000000\">\n21.3 Writing your own Functors in Python</A>\n</H1>\n\n<P>\nDeriving new instances of OEUnaryFunctions and OEUnaryPredicates\nrequires C++, but for many cases, a special case of these has been\ninstantiated for atoms and bonds.  OEPyAtomPredicate and\nOEPyBondPredicate are special case predicates that take a Python\nfunction as the single argument. In essence, we are creating a\ncallback that itself holds a callback. This Python function must be\ndefined a certain way. First, it can only take a single argument, an\natom for an OEPyAtomPredicate and a bond for an\nOEPyBondPredicate. Second, it must return 1 if the atom(bond)\nsatisifies the condition and 0 otherwise. Since it may sometimes be\nnecessary to create predicates that hold state, a class instance\nmethod can be used. Just make sure that the method (to which a pointer\nwill be stored inside the C++ predicate) stays in scope while the predicate is\nused.\n\n<P>\nThe following example shows a user defined functor which screens for atoms\nwhose atomic mass is greater than 15.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch21-2.py\n\nfrom openeye.oechem import *\n\ndef AtomWgtGT15(atom):\n    if OEGetAverageWeight(atom.GetAtomicNum())&gt;15:\n        return 1\n    return 0\n\nWeightGT15 = PyAtomPredicate(AtomWgtGT15)\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"c1c(O)c(O)c(Cl)cc1CCCBr\")\nOETriposAtomNames(mol)\n\nfor atom in mol.GetAtoms(WeightGT15):\n    print atom.GetName(), \"has weight &gt; 15.\"\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch21-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node188.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node186.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node190.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node188.html\">21.2 Predefined OEChem Functors</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node186.html\">21. Predicate Functions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node190.html\">21.4 Composition Functors in</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37808.0}