{"text": "View Javadoc 1 package swirl workspace 2 3 import java io ByteArrayOutputStream 4 import java io IOException 5 import java io InputStream 6 import java util Enumeration 7 import java util HashSet 8 import java util Iterator 9 import java util Vector 1 11 import javax servlet ServletException 12 import javax servlet http HttpServletRequest 13 import javax servlet http HttpServletResponse 14 import javax xml parsers DocumentBuilder 15 import javax xml parsers DocumentBuilderFactory 16 import javax xml parsers ParserConfigurationException 17 18 import org apache commons httpclient Header 19 import org apache commons httpclient HostConfiguration 2 import org apache commons httpclient HttpURL 21 import org apache commons logging Log 22 import org apache commons logging LogFactory 23 import org apache webdav lib methods PropFindMethod 24 import org w3c dom Document 25 import org w3c dom Element 26 import org w3c dom NodeList 27 import org w3c dom Text 28 29 import swirl workspace common DocumentLogger 3 import swirl workspace common NetUtils 31 32 33 This command is a base class for commands that proxy multiple DAV servers 34 and aggregate their responses to send back to the client 35 36 author Ben Pillet 37 38 public class AggregateCommand extends BaseSwirlCommand 39 4 how big should a copy buffer be to copy streams 41 public static final int BUFFER SIZE 2 48 42 43 the HTTP status code 2 7 for multistatus 44 public static final int MULTISTATUS 2 7 45 46 the XML document to send back to the client 47 private Document responseBody 48 49 the root lt multistatus gt element of the responseBody 5 private Element multistatus 51 52 53 keeps track of seen hrefs so that there are no duplicates in response to 54 client 55 56 private HashSet seenHrefs new HashSet 57 58 used to encode the hrefs that come back from the peers 59 private HostPathCodec codec 6 61 commons logging log that maps to this Command 62 private Log log LogFactory getLog this getClass 63 64 65 Constructor 66 67 param req the request for this command from the user 68 param resp the response to the user 69 param host the peer to proxy 7 param path the directory on the peer 71 param peerManager the collection of peers to proxy to 72 param cod how to encode the hrefs from each of the peers 73 74 public AggregateCommand final HttpServletRequest req 75 final HttpServletResponse resp final String host 76 final String path final PeerManager peerManager 77 final HostPathCodec cod 78 79 super req resp host path peerManager 8 this codec cod 81 82 83 84 this method is automatically called by the execute method and should be 85 overriden if the HTTP returns code is not 2 7 and the return 86 content type is not text xml 87 88 public void setResponseHeaders 89 9 getResponse setStatus MULTISTATUS multistatus 91 getResponse setHeader Content Type text xml charset UTF 8 92 93 94 95 generates a list of peers to proxy to If the host is not set all of 96 the peers will be proxied If the host is set only peers with a 97 matching host will be proxied 98 99 return collection of Peer objects 1 1 1 public Vector getTargetPeers 1 2 1 3 Vector ret new Vector 1 4 1 5 if log isDebugEnabled 1 6 1 7 log debug getTargetPeers with getHost getHost 1 8 1 9 11 for Iterator it getPeerManager getPeersIterator it hasNext 111 112 Peer peer Peer it next 113 114 String peerHost 115 116 try 117 118 peerHost peer getUniqueID 119 12 catch Exception ex 121 122 log warn problem getting host for peer ex 123 124 125 if getHost length getHost equals peerHost 126 127 if log isDebugEnabled 128 129 log debug getTargetPeers adding peer peer host 13 getHost peerHost peerHost 131 132 ret add peer 133 134 135 136 if log isDebugEnabled 137 138 log debug getTargetPeers returning ret n rgetHost 139 getHost r ngetPath getPath 14 141 142 return ret 143 144 145 146 Creates the PropFindMethod to send to each peer 147 148 return a method to execute on the peer 149 15 public PropFindMethod createMethod 151 152 153 PropFindMethod method new PropFindMethod getPath replaceAll 154 2 155 156 PropFindMethod method new PropFindMethod NetUtils encodeLastElement getPath 157 PropFindMethod method new PropFindMethod NetUtils encodeEachElement getPath 158 159 if log isDebugEnabled 16 161 log debug creating method with path getPath 162 but it thinks method getPath 163 164 165 return method 166 167 168 169 Generic implementation of execute that performs the following steps 17 171 ul 172 li 173 1 sets the response headers 174 li 175 li 176 2 gets the peers to proxy to 177 li 178 li 179 3 initializes a response document 18 li 181 li 182 4 for each target peer 183 li 184 li 185 4 1 creates an HttpMethod to send to the peer 186 li 187 li 188 4 2 executes the HttpMethod 189 li 19 li 191 4 3 processes and or mangles the response 192 li 193 li 194 4 4 adds the peer s response to the client s response 195 li 196 li 197 5 sends the response back to the client 198 li 199 ul 2 2 1 return status code for response to client 2 2 2 3 throws IOException if there s a problem contacting the client 2 4 throws ServletException if there s a problem generating an XML document 2 5 2 6 public int execute throws IOException 2 7 ServletException 2 8 2 9 int status HttpServletResponse SC INTERNAL SERVER ERROR 21 211 setResponseHeaders 212 213 Vector targets getTargetPeers 214 215 if log isDebugEnabled 216 217 log debug targets targets 218 219 22 Document body getDocumentBuilder newDocument 221 222 initResponseBody body 223 224 copy req body into a string so it can be used repeatedly 225 ByteArrayOutputStream reqBody new ByteArrayOutputStream 226 InputStream in getRequest getInputStream 227 byte buffer new byte BUFFER SIZE 228 int length 229 23 while length in read buffer 1 231 232 reqBody write buffer length 233 234 235 if log isDebugEnabled 236 237 log debug reqBody reqBody 238 239 24 boolean returnMultistatus false 241 242 for Iterator it targets iterator it hasNext 243 244 try 245 246 Peer peer Peer it next 247 248 if log isDebugEnabled 249 25 log debug working on peer 251 252 253 PropFindMethod method createMethod 254 255 if log isDebugEnabled 256 257 log debug method path method getPath 258 259 26 HostConfiguration hostConf new HostConfiguration 261 HttpURL tempHost peer getHttpURL 262 263 if log isDebugEnabled 264 265 log debug tempHost tempHost 266 267 268 hostConf setHost tempHost 269 method setHostConfiguration hostConf 27 method setFollowRedirects true 271 method setRequestBody reqBody toString 272 273 method setRequestHeader Host 274 peer getHost peer getPort 275 for Enumeration headerNames getRequest getHeaderNames 276 headerNames hasMoreElements 277 278 String name String headerNames nextElement 279 28 if name equals Host name equals Cookie 281 282 if log isDebugEnabled 283 284 log debug copying header from client to peer name 285 name val 286 getRequest getHeader name 287 288 method setRequestHeader name 289 getRequest getHeader name 29 291 292 293 if log isDebugEnabled 294 295 log debug method path method getPath 296 297 298 logMethod method 299 3 try 3 1 3 2 if log isDebugEnabled 3 3 3 4 log debug before executeHttpRequestMethod depth 3 5 method getDepth 3 6 3 7 3 8 int ret peer executeHttpRequestMethod method 3 9 31 logMethod method 311 312 if log isDebugEnabled 313 314 log debug ret ret 315 316 reason method getStatusText 317 318 319 if ret MULTISTATUS 32 321 returnMultistatus true 322 323 Document peerDocument method getResponseDocument 324 325 DocumentLogger logDocument log peerDocument 326 processPeerResponse peerDocument peer 327 328 329 NodeList nl responseBody getElementsByTagNameNS DAV prop 33 if nl null 331 Node nodeProp nl item 332 if nodeProp null 333 Node davQuota responseBody createElementNS DAV D quota 334 Node quotaValue responseBody createTextNode 1 335 davQuota appendChild quotaValue 336 Node davQuotaUsed responseBody createElementNS DAV D quotaused 337 Node usedValue responseBody createTextNode 1 338 davQuotaUsed appendChild usedValue 339 nodeProp appendChild davQuota 34 nodeProp appendChild davQuotaUsed 341 342 343 344 345 else 346 347 if log isDebugEnabled 348 349 log debug setting status ret ret 35 351 status ret 352 353 HTTPclient requires that method response body be 354 read regardless of if it is used 355 byte methodBody method getResponseBody 356 357 358 catch Exception ex 359 36 log error some error ex 361 362 363 method releaseConnection 364 method recycle 365 366 catch Exception ex 367 368 log error Some error happened ex 369 37 371 372 if log isDebugEnabled 373 374 log debug returnMultistatus returnMultistatus 375 376 377 if returnMultistatus 378 379 DocumentLogger logDocument log 38 returning propfind body to client body 381 status MULTISTATUS 382 DocumentLogger writeDocument body getResponse getOutputStream 383 384 385 return status 386 387 388 389 This method is automatically called and prepares the responseBody to be 39 populated by adding a lt multistatus gt element to it 391 392 param body the document to initialize 393 394 public void initResponseBody final Document body 395 396 this responseBody body 397 multistatus body createElement D multistatus 398 multistatus setAttribute xmlns D DAV 399 body appendChild multistatus 4 4 1 4 2 4 3 This emthod is called for each response that comes from a peer 4 4 4 5 param peerDocument the body of the response from the peer 4 6 param peer the peer that returned the response 4 7 4 8 public void processPeerResponse final Document peerDocument final Peer peer 4 9 41 if peerDocument null 411 412 NodeList peerResponses peerDocument getElementsByTagName D response 413 414 for int i i peerResponses getLength i 415 416 Element peerResponse Element peerResponses item i 417 418 if modifyResponse peerResponse peer 419 42 multistatus appendChild responseBody importNode peerResponse 421 true 422 423 424 425 426 427 428 Return JAXP document builder instance 429 43 return an initialized DocumentBuilder 431 432 throws ServletException wraps ParserConfigurationException 433 434 protected DocumentBuilder getDocumentBuilder throws ServletException 435 436 DocumentBuilder documentBuilder null 437 DocumentBuilderFactory documentBuilderFactory null 438 439 try 44 441 documentBuilderFactory DocumentBuilderFactory newInstance 442 documentBuilderFactory setNamespaceAware false 443 documentBuilder documentBuilderFactory newDocumentBuilder 444 445 catch ParserConfigurationException e 446 447 throw new ServletException webdavservlet jaxpfailed 448 449 45 return documentBuilder 451 452 453 454 Utility method to log the contents of a method request 455 456 param method the method to log 457 458 throws IOException if method throws an IOException 459 46 protected void logMethod final PropFindMethod method throws IOException 461 462 StringBuffer buf new StringBuffer 463 464 buf append method n 465 buf append method getName n 466 buf append method getURI n 467 468 Header headers method getRequestHeaders 469 47 for int i i headers length i 471 472 buf append headers i 473 474 475 if log isDebugEnabled 476 477 log debug buf 478 479 48 481 482 modifyReponse mangles the lt href gt elemtn in peerResponse to encode 483 the peer the respone came from 484 485 param peerResponse the response from the peer to mangle 486 param peer the peer who returned it 487 488 return should the proxy send this response to the client because it 489 hasn t seen it yet 49 491 private boolean modifyResponse final Element peerResponse final Peer peer 492 493 NodeList hrefs peerResponse getElementsByTagName D href 494 String peerHost 495 496 try 497 498 peerHost peer getUniqueID 499 5 for int i i hrefs getLength i 5 1 5 2 Element href Element hrefs item i 5 3 Text hrefText Text href getFirstChild 5 4 5 5 if log isDebugEnabled 5 6 5 7 log debug hrefText hrefText 5 8 5 9 51 if hrefText null 511 512 String newHref codec encodeHostInPath hrefText getData 513 peerHost 514 515 if log isDebugEnabled 516 517 log debug seenHrefs seenHrefs nnewHref 518 newHref 519 52 521 if seenHrefs contains newHref 522 523 hrefText setData newHref 524 seenHrefs add newHref 525 if log isDebugEnabled 526 527 log debug returning true 528 529 53 return true 531 532 533 534 535 catch Exception ex 536 537 log warn problem getting host for peer ex 538 539 54 if log isDebugEnabled 541 542 if log isDebugEnabled 543 544 log debug returning false 545 546 547 548 return false 549 55 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/AggregateCommand.html", "title": "aggregatecommand xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>AggregateCommand xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/AggregateCommand.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.io.ByteArrayOutputStream;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.io.IOException;\n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> java.io.InputStream;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.util.Enumeration;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.util.HashSet;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.util.Iterator;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> java.util.Vector;\n<a name=\"10\" href=\"#10\">10</a>  \n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> javax.servlet.ServletException;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> javax.servlet.http.HttpServletRequest;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> javax.servlet.http.HttpServletResponse;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> javax.xml.parsers.DocumentBuilder;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> javax.xml.parsers.DocumentBuilderFactory;\n<a name=\"16\" href=\"#16\">16</a>  <strong>import</strong> javax.xml.parsers.ParserConfigurationException;\n<a name=\"17\" href=\"#17\">17</a>  \n<a name=\"18\" href=\"#18\">18</a>  <strong>import</strong> org.apache.commons.httpclient.Header;\n<a name=\"19\" href=\"#19\">19</a>  <strong>import</strong> org.apache.commons.httpclient.HostConfiguration;\n<a name=\"20\" href=\"#20\">20</a>  <strong>import</strong> org.apache.commons.httpclient.HttpURL;\n<a name=\"21\" href=\"#21\">21</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"22\" href=\"#22\">22</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"23\" href=\"#23\">23</a>  <strong>import</strong> org.apache.webdav.lib.methods.PropFindMethod;\n<a name=\"24\" href=\"#24\">24</a>  <strong>import</strong> org.w3c.dom.Document;\n<a name=\"25\" href=\"#25\">25</a>  <strong>import</strong> org.w3c.dom.Element;\n<a name=\"26\" href=\"#26\">26</a>  <strong>import</strong> org.w3c.dom.NodeList;\n<a name=\"27\" href=\"#27\">27</a>  <strong>import</strong> org.w3c.dom.Text;\n<a name=\"28\" href=\"#28\">28</a>  \n<a name=\"29\" href=\"#29\">29</a>  <strong>import</strong> swirl.workspace.common.DocumentLogger;\n<a name=\"30\" href=\"#30\">30</a>  <strong>import</strong> swirl.workspace.common.NetUtils;\n<a name=\"31\" href=\"#31\">31</a>  \n<a name=\"32\" href=\"#32\">32</a>  <em>/**<em>*</em></em>\n<a name=\"33\" href=\"#33\">33</a>  <em> * This command is a base class for commands that proxy multiple DAV servers</em>\n<a name=\"34\" href=\"#34\">34</a>  <em> * and aggregate their responses to send back to the client</em>\n<a name=\"35\" href=\"#35\">35</a>  <em> *</em>\n<a name=\"36\" href=\"#36\">36</a>  <em> * @author Ben Pillet</em>\n<a name=\"37\" href=\"#37\">37</a>  <em> */</em>\n<a name=\"38\" href=\"#38\">38</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../swirl/workspace/AggregateCommand.html\">AggregateCommand</a> <strong>extends</strong> <a href=\"../../swirl/workspace/BaseSwirlCommand.html\">BaseSwirlCommand</a>\n<a name=\"39\" href=\"#39\">39</a>  {\n<a name=\"40\" href=\"#40\">40</a>      <em>/**<em>* how big should a copy buffer be to copy streams */</em></em>\n<a name=\"41\" href=\"#41\">41</a>      <strong>public</strong> <strong>static</strong> <strong>final</strong> <strong>int</strong> BUFFER_SIZE = 2048;\n<a name=\"42\" href=\"#42\">42</a>  \n<a name=\"43\" href=\"#43\">43</a>      <em>/**<em>* the HTTP status code (207) for multistatus */</em></em>\n<a name=\"44\" href=\"#44\">44</a>      <strong>public</strong> <strong>static</strong> <strong>final</strong> <strong>int</strong> MULTISTATUS = 207;\n<a name=\"45\" href=\"#45\">45</a>  \n<a name=\"46\" href=\"#46\">46</a>      <em>/**<em>* the XML document to send back to the client */</em></em>\n<a name=\"47\" href=\"#47\">47</a>      <strong>private</strong> Document responseBody;\n<a name=\"48\" href=\"#48\">48</a>  \n<a name=\"49\" href=\"#49\">49</a>      <em>/**<em>* the root &amp;lt;multistatus/&amp;gt; element of the responseBody */</em></em>\n<a name=\"50\" href=\"#50\">50</a>      <strong>private</strong> Element multistatus;\n<a name=\"51\" href=\"#51\">51</a>  \n<a name=\"52\" href=\"#52\">52</a>      <em>/**<em>*</em></em>\n<a name=\"53\" href=\"#53\">53</a>  <em>     * keeps track of seen hrefs so that there are no duplicates in response to</em>\n<a name=\"54\" href=\"#54\">54</a>  <em>     * client</em>\n<a name=\"55\" href=\"#55\">55</a>  <em>     */</em>\n<a name=\"56\" href=\"#56\">56</a>      <strong>private</strong> HashSet seenHrefs = <strong>new</strong> HashSet();\n<a name=\"57\" href=\"#57\">57</a>  \n<a name=\"58\" href=\"#58\">58</a>      <em>/**<em>* used to encode the hrefs that come back from the peers */</em></em>\n<a name=\"59\" href=\"#59\">59</a>      <strong>private</strong> <a href=\"../../swirl/workspace/HostPathCodec.html\">HostPathCodec</a> codec;\n<a name=\"60\" href=\"#60\">60</a>  \n<a name=\"61\" href=\"#61\">61</a>      <em>/**<em>* commons-logging log that maps to this Command */</em></em>\n<a name=\"62\" href=\"#62\">62</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"63\" href=\"#63\">63</a>  \n<a name=\"64\" href=\"#64\">64</a>      <em>/**<em>*</em></em>\n<a name=\"65\" href=\"#65\">65</a>  <em>     * Constructor</em>\n<a name=\"66\" href=\"#66\">66</a>  <em>     *</em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     * @param req the request for this command from the user</em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     * @param resp the response to the user</em>\n<a name=\"69\" href=\"#69\">69</a>  <em>     * @param host the peer to proxy</em>\n<a name=\"70\" href=\"#70\">70</a>  <em>     * @param path the directory on the peer</em>\n<a name=\"71\" href=\"#71\">71</a>  <em>     * @param peerManager the collection of peers to proxy to</em>\n<a name=\"72\" href=\"#72\">72</a>  <em>     * @param cod how to encode the hrefs from each of the peers</em>\n<a name=\"73\" href=\"#73\">73</a>  <em>     */</em>\n<a name=\"74\" href=\"#74\">74</a>      <strong>public</strong> <a href=\"../../swirl/workspace/AggregateCommand.html\">AggregateCommand</a>(<strong>final</strong> HttpServletRequest req,\n<a name=\"75\" href=\"#75\">75</a>                              <strong>final</strong> HttpServletResponse resp, <strong>final</strong> String host,\n<a name=\"76\" href=\"#76\">76</a>                              <strong>final</strong> String path, <strong>final</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> peerManager,\n<a name=\"77\" href=\"#77\">77</a>                              <strong>final</strong> <a href=\"../../swirl/workspace/HostPathCodec.html\">HostPathCodec</a> cod)\n<a name=\"78\" href=\"#78\">78</a>      {\n<a name=\"79\" href=\"#79\">79</a>          <strong>super</strong>(req, resp, host, path, peerManager);\n<a name=\"80\" href=\"#80\">80</a>          <strong>this</strong>.codec = cod;\n<a name=\"81\" href=\"#81\">81</a>      }\n<a name=\"82\" href=\"#82\">82</a>  \n<a name=\"83\" href=\"#83\">83</a>      <em>/**<em>*</em></em>\n<a name=\"84\" href=\"#84\">84</a>  <em>     * this method is automatically called by the execute method and should be</em>\n<a name=\"85\" href=\"#85\">85</a>  <em>     * overriden if the HTTP returns code is not 207 and the return</em>\n<a name=\"86\" href=\"#86\">86</a>  <em>     * content-type is not text/xml</em>\n<a name=\"87\" href=\"#87\">87</a>  <em>     */</em>\n<a name=\"88\" href=\"#88\">88</a>      <strong>public</strong> <strong>void</strong> setResponseHeaders()\n<a name=\"89\" href=\"#89\">89</a>      {\n<a name=\"90\" href=\"#90\">90</a>          getResponse().setStatus(MULTISTATUS); <em class=\"comment\">// multistatus</em>\n<a name=\"91\" href=\"#91\">91</a>          getResponse().setHeader(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/xml; charset=\\&quot;UTF-8\\&quot;\"</span>);\n<a name=\"92\" href=\"#92\">92</a>      }\n<a name=\"93\" href=\"#93\">93</a>  \n<a name=\"94\" href=\"#94\">94</a>      <em>/**<em>*</em></em>\n<a name=\"95\" href=\"#95\">95</a>  <em>     * generates a list of peers to proxy to. If the host is not set, all of</em>\n<a name=\"96\" href=\"#96\">96</a>  <em>     * the peers will be proxied. If the host is set, only peers with a</em>\n<a name=\"97\" href=\"#97\">97</a>  <em>     * matching host will be proxied.</em>\n<a name=\"98\" href=\"#98\">98</a>  <em>     *</em>\n<a name=\"99\" href=\"#99\">99</a>  <em>     * @return collection of Peer objects</em>\n<a name=\"100\" href=\"#100\">100</a> <em>     */</em>\n<a name=\"101\" href=\"#101\">101</a>     <strong>public</strong> Vector getTargetPeers()\n<a name=\"102\" href=\"#102\">102</a>     {\n<a name=\"103\" href=\"#103\">103</a>         Vector ret = <strong>new</strong> Vector();\n<a name=\"104\" href=\"#104\">104</a> \n<a name=\"105\" href=\"#105\">105</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"106\" href=\"#106\">106</a>         {\n<a name=\"107\" href=\"#107\">107</a>             log.debug(<span class=\"string\">\"getTargetPeers with getHost(): \"</span> + getHost());\n<a name=\"108\" href=\"#108\">108</a>         }\n<a name=\"109\" href=\"#109\">109</a> \n<a name=\"110\" href=\"#110\">110</a>         <strong>for</strong>(Iterator it = getPeerManager().getPeersIterator(); it.hasNext();)\n<a name=\"111\" href=\"#111\">111</a>         {\n<a name=\"112\" href=\"#112\">112</a>             <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer = (Peer)it.next();\n<a name=\"113\" href=\"#113\">113</a> \n<a name=\"114\" href=\"#114\">114</a>             String peerHost = <span class=\"string\">\"\"</span>;\n<a name=\"115\" href=\"#115\">115</a> \n<a name=\"116\" href=\"#116\">116</a>             <strong>try</strong>\n<a name=\"117\" href=\"#117\">117</a>             {\n<a name=\"118\" href=\"#118\">118</a>                 peerHost = peer.getUniqueID();\n<a name=\"119\" href=\"#119\">119</a>             }\n<a name=\"120\" href=\"#120\">120</a>             <strong>catch</strong>(Exception ex)\n<a name=\"121\" href=\"#121\">121</a>             {\n<a name=\"122\" href=\"#122\">122</a>                 log.warn(<span class=\"string\">\"problem getting host for \"</span> + peer, ex);\n<a name=\"123\" href=\"#123\">123</a>             }\n<a name=\"124\" href=\"#124\">124</a> \n<a name=\"125\" href=\"#125\">125</a>             <strong>if</strong>((getHost().length() == 0) || getHost().equals(peerHost))\n<a name=\"126\" href=\"#126\">126</a>             {\n<a name=\"127\" href=\"#127\">127</a>             \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"128\" href=\"#128\">128</a>     \t        {\n<a name=\"129\" href=\"#129\">129</a>             \t\tlog.debug(<span class=\"string\">\"getTargetPeers: adding peer \"</span> + peer + <span class=\"string\">\"  host: \"</span>\n<a name=\"130\" href=\"#130\">130</a>             \t\t\t\t+ getHost() + <span class=\"string\">\"  peerHost: \"</span> + peerHost);\n<a name=\"131\" href=\"#131\">131</a>     \t        }\n<a name=\"132\" href=\"#132\">132</a>                 ret.add(peer);\n<a name=\"133\" href=\"#133\">133</a>             }\n<a name=\"134\" href=\"#134\">134</a>         }\n<a name=\"135\" href=\"#135\">135</a> \n<a name=\"136\" href=\"#136\">136</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"137\" href=\"#137\">137</a>         {\n<a name=\"138\" href=\"#138\">138</a>             log.debug(<span class=\"string\">\"getTargetPeers returning \"</span> + ret + <span class=\"string\">\"\\n\\rgetHost(): \"</span>\n<a name=\"139\" href=\"#139\">139</a>                       + getHost() + <span class=\"string\">\"\\r\\ngetPath(): \"</span> + getPath());\n<a name=\"140\" href=\"#140\">140</a>         }\n<a name=\"141\" href=\"#141\">141</a> \n<a name=\"142\" href=\"#142\">142</a>         <strong>return</strong> ret;\n<a name=\"143\" href=\"#143\">143</a>     }\n<a name=\"144\" href=\"#144\">144</a> \n<a name=\"145\" href=\"#145\">145</a>     <em>/**<em>*</em></em>\n<a name=\"146\" href=\"#146\">146</a> <em>     * Creates the PropFindMethod to send to each peer</em>\n<a name=\"147\" href=\"#147\">147</a> <em>     *</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     * @return a method to execute on the peer</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     */</em>\n<a name=\"150\" href=\"#150\">150</a>     <strong>public</strong> PropFindMethod createMethod()\n<a name=\"151\" href=\"#151\">151</a>     {\n<a name=\"152\" href=\"#152\">152</a>         <em class=\"comment\">/*</em>\n<a name=\"153\" href=\"#153\">153</a> <em class=\"comment\">        PropFindMethod method = new PropFindMethod(getPath().replaceAll(\" \",</em>\n<a name=\"154\" href=\"#154\">154</a> <em class=\"comment\">                                                                        \"%20\"));</em>\n<a name=\"155\" href=\"#155\">155</a> <em class=\"comment\">        */</em>\n<a name=\"156\" href=\"#156\">156</a>         <em class=\"comment\">//PropFindMethod method = new PropFindMethod((NetUtils.encodeLastElement(getPath())));</em>\n<a name=\"157\" href=\"#157\">157</a>         PropFindMethod method = <strong>new</strong> PropFindMethod((NetUtils.encodeEachElement(getPath())));\n<a name=\"158\" href=\"#158\">158</a> \n<a name=\"159\" href=\"#159\">159</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"160\" href=\"#160\">160</a>         {\n<a name=\"161\" href=\"#161\">161</a>             log.debug(<span class=\"string\">\"creating method with path: \"</span> + getPath()\n<a name=\"162\" href=\"#162\">162</a>                       + <span class=\"string\">\"  but it thinks: \"</span> + method.getPath());\n<a name=\"163\" href=\"#163\">163</a>         }\n<a name=\"164\" href=\"#164\">164</a> \n<a name=\"165\" href=\"#165\">165</a>         <strong>return</strong> method;\n<a name=\"166\" href=\"#166\">166</a>     }\n<a name=\"167\" href=\"#167\">167</a> \n<a name=\"168\" href=\"#168\">168</a>     <em>/**<em>*</em></em>\n<a name=\"169\" href=\"#169\">169</a> <em>     * Generic implementation of execute that performs the following steps</em>\n<a name=\"170\" href=\"#170\">170</a> <em>     *</em>\n<a name=\"171\" href=\"#171\">171</a> <em>     * &lt;ul></em>\n<a name=\"172\" href=\"#172\">172</a> <em>     * &lt;li></em>\n<a name=\"173\" href=\"#173\">173</a> <em>     * 1. sets the response headers</em>\n<a name=\"174\" href=\"#174\">174</a> <em>     * &lt;/li></em>\n<a name=\"175\" href=\"#175\">175</a> <em>     * &lt;li></em>\n<a name=\"176\" href=\"#176\">176</a> <em>     * 2. gets the peers to proxy to</em>\n<a name=\"177\" href=\"#177\">177</a> <em>     * &lt;/li></em>\n<a name=\"178\" href=\"#178\">178</a> <em>     * &lt;li></em>\n<a name=\"179\" href=\"#179\">179</a> <em>     * 3. initializes a response document</em>\n<a name=\"180\" href=\"#180\">180</a> <em>     * &lt;/li></em>\n<a name=\"181\" href=\"#181\">181</a> <em>     * &lt;li></em>\n<a name=\"182\" href=\"#182\">182</a> <em>     * 4. for each target peer</em>\n<a name=\"183\" href=\"#183\">183</a> <em>     * &lt;/li></em>\n<a name=\"184\" href=\"#184\">184</a> <em>     * &lt;li></em>\n<a name=\"185\" href=\"#185\">185</a> <em>     * 4.1. creates an HttpMethod to send to the peer</em>\n<a name=\"186\" href=\"#186\">186</a> <em>     * &lt;/li></em>\n<a name=\"187\" href=\"#187\">187</a> <em>     * &lt;li></em>\n<a name=\"188\" href=\"#188\">188</a> <em>     * 4.2. executes the HttpMethod</em>\n<a name=\"189\" href=\"#189\">189</a> <em>     * &lt;/li></em>\n<a name=\"190\" href=\"#190\">190</a> <em>     * &lt;li></em>\n<a name=\"191\" href=\"#191\">191</a> <em>     * 4.3. processes and/or mangles the response</em>\n<a name=\"192\" href=\"#192\">192</a> <em>     * &lt;/li></em>\n<a name=\"193\" href=\"#193\">193</a> <em>     * &lt;li></em>\n<a name=\"194\" href=\"#194\">194</a> <em>     * 4.4. adds the peer's response to the client's response</em>\n<a name=\"195\" href=\"#195\">195</a> <em>     * &lt;/li></em>\n<a name=\"196\" href=\"#196\">196</a> <em>     * &lt;li></em>\n<a name=\"197\" href=\"#197\">197</a> <em>     * 5. sends the response back to the client</em>\n<a name=\"198\" href=\"#198\">198</a> <em>     * &lt;/li></em>\n<a name=\"199\" href=\"#199\">199</a> <em>     * &lt;/ul></em>\n<a name=\"200\" href=\"#200\">200</a> <em>     *</em>\n<a name=\"201\" href=\"#201\">201</a> <em>     * @return status code for response to client</em>\n<a name=\"202\" href=\"#202\">202</a> <em>     *</em>\n<a name=\"203\" href=\"#203\">203</a> <em>     * @throws IOException if there's a problem contacting the client</em>\n<a name=\"204\" href=\"#204\">204</a> <em>     * @throws ServletException if there's a problem generating an XML document</em>\n<a name=\"205\" href=\"#205\">205</a> <em>     */</em>\n<a name=\"206\" href=\"#206\">206</a>     <strong>public</strong> <strong>int</strong> execute() throws IOException,\n<a name=\"207\" href=\"#207\">207</a>                                 ServletException\n<a name=\"208\" href=\"#208\">208</a>     {\n<a name=\"209\" href=\"#209\">209</a>         <strong>int</strong> status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n<a name=\"210\" href=\"#210\">210</a> \n<a name=\"211\" href=\"#211\">211</a>         setResponseHeaders();\n<a name=\"212\" href=\"#212\">212</a> \n<a name=\"213\" href=\"#213\">213</a>         Vector targets = getTargetPeers();\n<a name=\"214\" href=\"#214\">214</a> \n<a name=\"215\" href=\"#215\">215</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"216\" href=\"#216\">216</a>         {\n<a name=\"217\" href=\"#217\">217</a>             log.debug(<span class=\"string\">\"targets: \"</span> + targets);\n<a name=\"218\" href=\"#218\">218</a>         }\n<a name=\"219\" href=\"#219\">219</a> \n<a name=\"220\" href=\"#220\">220</a>         Document body = getDocumentBuilder().newDocument();\n<a name=\"221\" href=\"#221\">221</a> \n<a name=\"222\" href=\"#222\">222</a>         initResponseBody(body);\n<a name=\"223\" href=\"#223\">223</a> \n<a name=\"224\" href=\"#224\">224</a>         <em class=\"comment\">//copy req.body into a string so it can be used repeatedly</em>\n<a name=\"225\" href=\"#225\">225</a>         ByteArrayOutputStream reqBody = <strong>new</strong> ByteArrayOutputStream();\n<a name=\"226\" href=\"#226\">226</a>         InputStream in = getRequest().getInputStream();\n<a name=\"227\" href=\"#227\">227</a>         byte[] buffer = <strong>new</strong> byte[BUFFER_SIZE];\n<a name=\"228\" href=\"#228\">228</a>         <strong>int</strong> length = 0;\n<a name=\"229\" href=\"#229\">229</a> \n<a name=\"230\" href=\"#230\">230</a>         <strong>while</strong>((length = in.read(buffer)) != -1)\n<a name=\"231\" href=\"#231\">231</a>         {\n<a name=\"232\" href=\"#232\">232</a>             reqBody.write(buffer, 0, length);\n<a name=\"233\" href=\"#233\">233</a>         }\n<a name=\"234\" href=\"#234\">234</a> \n<a name=\"235\" href=\"#235\">235</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"236\" href=\"#236\">236</a>         {\n<a name=\"237\" href=\"#237\">237</a>             log.debug(<span class=\"string\">\"reqBody: \"</span> + reqBody);\n<a name=\"238\" href=\"#238\">238</a>         }\n<a name=\"239\" href=\"#239\">239</a> \n<a name=\"240\" href=\"#240\">240</a>         <strong>boolean</strong> returnMultistatus = false;\n<a name=\"241\" href=\"#241\">241</a> \n<a name=\"242\" href=\"#242\">242</a>         <strong>for</strong>(Iterator it = targets.iterator(); it.hasNext();)\n<a name=\"243\" href=\"#243\">243</a>         {\n<a name=\"244\" href=\"#244\">244</a>             <strong>try</strong>\n<a name=\"245\" href=\"#245\">245</a>             {\n<a name=\"246\" href=\"#246\">246</a>                 <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer = (Peer)it.next();\n<a name=\"247\" href=\"#247\">247</a> \n<a name=\"248\" href=\"#248\">248</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"249\" href=\"#249\">249</a>                 {\n<a name=\"250\" href=\"#250\">250</a>                     log.debug(<span class=\"string\">\"working on \"</span> + peer);\n<a name=\"251\" href=\"#251\">251</a>                 }\n<a name=\"252\" href=\"#252\">252</a> \n<a name=\"253\" href=\"#253\">253</a>                 PropFindMethod method = createMethod();\n<a name=\"254\" href=\"#254\">254</a> \n<a name=\"255\" href=\"#255\">255</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"256\" href=\"#256\">256</a>                 {\n<a name=\"257\" href=\"#257\">257</a>                     log.debug(<span class=\"string\">\"method.path: \"</span> + method.getPath());\n<a name=\"258\" href=\"#258\">258</a>                 }\n<a name=\"259\" href=\"#259\">259</a> \n<a name=\"260\" href=\"#260\">260</a>                 HostConfiguration hostConf = <strong>new</strong> HostConfiguration();\n<a name=\"261\" href=\"#261\">261</a>                 HttpURL tempHost = peer.getHttpURL();\n<a name=\"262\" href=\"#262\">262</a> \n<a name=\"263\" href=\"#263\">263</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"264\" href=\"#264\">264</a>                 {\n<a name=\"265\" href=\"#265\">265</a>                     log.debug(<span class=\"string\">\"tempHost: \"</span> + tempHost);\n<a name=\"266\" href=\"#266\">266</a>                 }\n<a name=\"267\" href=\"#267\">267</a> \n<a name=\"268\" href=\"#268\">268</a>                 hostConf.setHost(tempHost);\n<a name=\"269\" href=\"#269\">269</a>                 method.setHostConfiguration(hostConf);\n<a name=\"270\" href=\"#270\">270</a>                 method.setFollowRedirects(<strong>true</strong>);\n<a name=\"271\" href=\"#271\">271</a>                 method.setRequestBody(reqBody.toString());\n<a name=\"272\" href=\"#272\">272</a> \n<a name=\"273\" href=\"#273\">273</a>                 <em class=\"comment\">//method.setRequestHeader(\"Host\",</em>\n<a name=\"274\" href=\"#274\">274</a>                 <em class=\"comment\">//    peer.getHost() + ':' + peer.getPort());</em>\n<a name=\"275\" href=\"#275\">275</a>                 <strong>for</strong>(Enumeration headerNames = getRequest().getHeaderNames();\n<a name=\"276\" href=\"#276\">276</a>                     headerNames.hasMoreElements();)\n<a name=\"277\" href=\"#277\">277</a>                 {\n<a name=\"278\" href=\"#278\">278</a>                     String name = (String)headerNames.nextElement();\n<a name=\"279\" href=\"#279\">279</a> \n<a name=\"280\" href=\"#280\">280</a>                     <strong>if</strong>(!(name.equals(<span class=\"string\">\"Host\"</span>) || name.equals(<span class=\"string\">\"Cookie\"</span>)))\n<a name=\"281\" href=\"#281\">281</a>                     {\n<a name=\"282\" href=\"#282\">282</a>                     \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"283\" href=\"#283\">283</a>             \t        {\n<a name=\"284\" href=\"#284\">284</a>                     \t\tlog.debug(<span class=\"string\">\"copying header from client to peer name: \"</span>\n<a name=\"285\" href=\"#285\">285</a> \t                                  + name + <span class=\"string\">\" val: \"</span>\n<a name=\"286\" href=\"#286\">286</a> \t                                  + getRequest().getHeader(name));\n<a name=\"287\" href=\"#287\">287</a>             \t        }\n<a name=\"288\" href=\"#288\">288</a>                         method.setRequestHeader(name,\n<a name=\"289\" href=\"#289\">289</a>                                                 getRequest().getHeader(name));\n<a name=\"290\" href=\"#290\">290</a>                     }\n<a name=\"291\" href=\"#291\">291</a>                 }\n<a name=\"292\" href=\"#292\">292</a> \n<a name=\"293\" href=\"#293\">293</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"294\" href=\"#294\">294</a>                 {\n<a name=\"295\" href=\"#295\">295</a>                     log.debug(<span class=\"string\">\"method.path: \"</span> + method.getPath());\n<a name=\"296\" href=\"#296\">296</a>                 }\n<a name=\"297\" href=\"#297\">297</a> \n<a name=\"298\" href=\"#298\">298</a>                 <em class=\"comment\">//logMethod(method);</em>\n<a name=\"299\" href=\"#299\">299</a> \n<a name=\"300\" href=\"#300\">300</a>                 <strong>try</strong>\n<a name=\"301\" href=\"#301\">301</a>                 {\n<a name=\"302\" href=\"#302\">302</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"303\" href=\"#303\">303</a>                     {\n<a name=\"304\" href=\"#304\">304</a>                         log.debug(<span class=\"string\">\"before executeHttpRequestMethod depth: \"</span>\n<a name=\"305\" href=\"#305\">305</a>                                   + method.getDepth());\n<a name=\"306\" href=\"#306\">306</a>                     }\n<a name=\"307\" href=\"#307\">307</a> \n<a name=\"308\" href=\"#308\">308</a>                     <strong>int</strong> ret = peer.executeHttpRequestMethod(method);\n<a name=\"309\" href=\"#309\">309</a> \n<a name=\"310\" href=\"#310\">310</a>                     logMethod(method);\n<a name=\"311\" href=\"#311\">311</a> \n<a name=\"312\" href=\"#312\">312</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"313\" href=\"#313\">313</a>                     {\n<a name=\"314\" href=\"#314\">314</a>                         log.debug(<span class=\"string\">\"ret: \"</span> + ret);\n<a name=\"315\" href=\"#315\">315</a> \n<a name=\"316\" href=\"#316\">316</a>                         <em class=\"comment\">// + \"  reason: \" + method.getStatusText());</em>\n<a name=\"317\" href=\"#317\">317</a>                     }\n<a name=\"318\" href=\"#318\">318</a> \n<a name=\"319\" href=\"#319\">319</a>                     <strong>if</strong>(ret == MULTISTATUS)\n<a name=\"320\" href=\"#320\">320</a>                     {\n<a name=\"321\" href=\"#321\">321</a>                         returnMultistatus = <strong>true</strong>;\n<a name=\"322\" href=\"#322\">322</a> \n<a name=\"323\" href=\"#323\">323</a>                         Document peerDocument = method.getResponseDocument();\n<a name=\"324\" href=\"#324\">324</a> \n<a name=\"325\" href=\"#325\">325</a>                         DocumentLogger.logDocument(log, peerDocument);\n<a name=\"326\" href=\"#326\">326</a>                         processPeerResponse(peerDocument, peer);\n<a name=\"327\" href=\"#327\">327</a> \n<a name=\"328\" href=\"#328\">328</a>                         <em class=\"comment\">/*</em>\n<a name=\"329\" href=\"#329\">329</a> <em class=\"comment\">                        NodeList nl = responseBody.getElementsByTagNameNS(\"DAV:\", \"prop\");</em>\n<a name=\"330\" href=\"#330\">330</a> <em class=\"comment\">                        if (nl != null) {</em>\n<a name=\"331\" href=\"#331\">331</a> <em class=\"comment\">                            Node nodeProp = nl.item(0);</em>\n<a name=\"332\" href=\"#332\">332</a> <em class=\"comment\">                            if (nodeProp != null) {</em>\n<a name=\"333\" href=\"#333\">333</a> <em class=\"comment\">                                Node davQuota = responseBody.createElementNS(\"DAV:\", \"D:quota\");</em>\n<a name=\"334\" href=\"#334\">334</a> <em class=\"comment\">                                Node quotaValue = responseBody.createTextNode(\"10000000\");</em>\n<a name=\"335\" href=\"#335\">335</a> <em class=\"comment\">                                davQuota.appendChild(quotaValue);</em>\n<a name=\"336\" href=\"#336\">336</a> <em class=\"comment\">                                Node davQuotaUsed = responseBody.createElementNS(\"DAV:\", \"D:quotaused\");</em>\n<a name=\"337\" href=\"#337\">337</a> <em class=\"comment\">                                Node usedValue = responseBody.createTextNode(\"1000000\");</em>\n<a name=\"338\" href=\"#338\">338</a> <em class=\"comment\">                                davQuotaUsed.appendChild(usedValue);</em>\n<a name=\"339\" href=\"#339\">339</a> <em class=\"comment\">                                nodeProp.appendChild(davQuota);</em>\n<a name=\"340\" href=\"#340\">340</a> <em class=\"comment\">                                nodeProp.appendChild(davQuotaUsed);</em>\n<a name=\"341\" href=\"#341\">341</a> <em class=\"comment\">                            }</em>\n<a name=\"342\" href=\"#342\">342</a> <em class=\"comment\">                        }</em>\n<a name=\"343\" href=\"#343\">343</a> <em class=\"comment\">                        */</em>\n<a name=\"344\" href=\"#344\">344</a>                     }\n<a name=\"345\" href=\"#345\">345</a>                     <strong>else</strong>\n<a name=\"346\" href=\"#346\">346</a>                     {\n<a name=\"347\" href=\"#347\">347</a>                     \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"348\" href=\"#348\">348</a>             \t        {\n<a name=\"349\" href=\"#349\">349</a>                     \t\tlog.debug(<span class=\"string\">\"setting status ret: \"</span> + ret);\n<a name=\"350\" href=\"#350\">350</a>             \t        }\n<a name=\"351\" href=\"#351\">351</a>                         status = ret;\n<a name=\"352\" href=\"#352\">352</a> \n<a name=\"353\" href=\"#353\">353</a>                         <em class=\"comment\">//HTTPclient requires that method.response body be</em>\n<a name=\"354\" href=\"#354\">354</a>                         <em class=\"comment\">// read regardless of if it is used</em>\n<a name=\"355\" href=\"#355\">355</a>                         byte[] methodBody = method.getResponseBody();\n<a name=\"356\" href=\"#356\">356</a>                     }\n<a name=\"357\" href=\"#357\">357</a>                 }\n<a name=\"358\" href=\"#358\">358</a>                 <strong>catch</strong>(Exception ex)\n<a name=\"359\" href=\"#359\">359</a>                 {\n<a name=\"360\" href=\"#360\">360</a>                     log.error(<span class=\"string\">\"some error\"</span>, ex);\n<a name=\"361\" href=\"#361\">361</a>                 }\n<a name=\"362\" href=\"#362\">362</a> \n<a name=\"363\" href=\"#363\">363</a>                 method.releaseConnection();\n<a name=\"364\" href=\"#364\">364</a>                 method.recycle();\n<a name=\"365\" href=\"#365\">365</a>             }\n<a name=\"366\" href=\"#366\">366</a>             <strong>catch</strong>(Exception ex)\n<a name=\"367\" href=\"#367\">367</a>             {\n<a name=\"368\" href=\"#368\">368</a>                 log.error(<span class=\"string\">\"Some error happened\"</span>, ex);\n<a name=\"369\" href=\"#369\">369</a>             }\n<a name=\"370\" href=\"#370\">370</a>         }\n<a name=\"371\" href=\"#371\">371</a> \n<a name=\"372\" href=\"#372\">372</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"373\" href=\"#373\">373</a>         {\n<a name=\"374\" href=\"#374\">374</a>             log.debug(<span class=\"string\">\"returnMultistatus: \"</span> + returnMultistatus);\n<a name=\"375\" href=\"#375\">375</a>         }\n<a name=\"376\" href=\"#376\">376</a> \n<a name=\"377\" href=\"#377\">377</a>         <strong>if</strong>(returnMultistatus)\n<a name=\"378\" href=\"#378\">378</a>         {\n<a name=\"379\" href=\"#379\">379</a>             DocumentLogger.logDocument(log,\n<a name=\"380\" href=\"#380\">380</a>                                        <span class=\"string\">\"returning propfind body to client\"</span>, body);\n<a name=\"381\" href=\"#381\">381</a>             status = MULTISTATUS;\n<a name=\"382\" href=\"#382\">382</a>             DocumentLogger.writeDocument(body, getResponse().getOutputStream());\n<a name=\"383\" href=\"#383\">383</a>         }\n<a name=\"384\" href=\"#384\">384</a> \n<a name=\"385\" href=\"#385\">385</a>         <strong>return</strong> status;\n<a name=\"386\" href=\"#386\">386</a>     }\n<a name=\"387\" href=\"#387\">387</a> \n<a name=\"388\" href=\"#388\">388</a>     <em>/**<em>*</em></em>\n<a name=\"389\" href=\"#389\">389</a> <em>     * This method is automatically called and prepares the responseBody to be</em>\n<a name=\"390\" href=\"#390\">390</a> <em>     * populated by adding a &amp;lt;multistatus/&amp;gt; element to it</em>\n<a name=\"391\" href=\"#391\">391</a> <em>     *</em>\n<a name=\"392\" href=\"#392\">392</a> <em>     * @param body the document to initialize</em>\n<a name=\"393\" href=\"#393\">393</a> <em>     */</em>\n<a name=\"394\" href=\"#394\">394</a>     <strong>public</strong> <strong>void</strong> initResponseBody(<strong>final</strong> Document body)\n<a name=\"395\" href=\"#395\">395</a>     {\n<a name=\"396\" href=\"#396\">396</a>         <strong>this</strong>.responseBody = body;\n<a name=\"397\" href=\"#397\">397</a>         multistatus = body.createElement(<span class=\"string\">\"D:multistatus\"</span>);\n<a name=\"398\" href=\"#398\">398</a>         multistatus.setAttribute(<span class=\"string\">\"xmlns:D\"</span>, <span class=\"string\">\"DAV:\"</span>);\n<a name=\"399\" href=\"#399\">399</a>         body.appendChild(multistatus);\n<a name=\"400\" href=\"#400\">400</a>     }\n<a name=\"401\" href=\"#401\">401</a> \n<a name=\"402\" href=\"#402\">402</a>     <em>/**<em>*</em></em>\n<a name=\"403\" href=\"#403\">403</a> <em>     * This emthod is called for each response that comes from a peer.</em>\n<a name=\"404\" href=\"#404\">404</a> <em>     *</em>\n<a name=\"405\" href=\"#405\">405</a> <em>     * @param peerDocument the body of the response from the peer</em>\n<a name=\"406\" href=\"#406\">406</a> <em>     * @param peer the peer that returned the response</em>\n<a name=\"407\" href=\"#407\">407</a> <em>     */</em>\n<a name=\"408\" href=\"#408\">408</a>     <strong>public</strong> <strong>void</strong> processPeerResponse(<strong>final</strong> Document peerDocument, <strong>final</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer)\n<a name=\"409\" href=\"#409\">409</a>     {\n<a name=\"410\" href=\"#410\">410</a>         <strong>if</strong>(peerDocument != <strong>null</strong>)\n<a name=\"411\" href=\"#411\">411</a>         {\n<a name=\"412\" href=\"#412\">412</a>             NodeList peerResponses = peerDocument.getElementsByTagName(<span class=\"string\">\"D:response\"</span>);\n<a name=\"413\" href=\"#413\">413</a> \n<a name=\"414\" href=\"#414\">414</a>             <strong>for</strong>(<strong>int</strong> i = 0; i &lt; peerResponses.getLength(); ++i)\n<a name=\"415\" href=\"#415\">415</a>             {\n<a name=\"416\" href=\"#416\">416</a>                 Element peerResponse = (Element)peerResponses.item(i);\n<a name=\"417\" href=\"#417\">417</a> \n<a name=\"418\" href=\"#418\">418</a>                 <strong>if</strong>(mod<strong>if</strong>yResponse(peerResponse, peer))\n<a name=\"419\" href=\"#419\">419</a>                 {\n<a name=\"420\" href=\"#420\">420</a>                     multistatus.appendChild(responseBody.importNode(peerResponse,\n<a name=\"421\" href=\"#421\">421</a>                                                                     <strong>true</strong>));\n<a name=\"422\" href=\"#422\">422</a>                 }\n<a name=\"423\" href=\"#423\">423</a>             }\n<a name=\"424\" href=\"#424\">424</a>         }\n<a name=\"425\" href=\"#425\">425</a>     }\n<a name=\"426\" href=\"#426\">426</a> \n<a name=\"427\" href=\"#427\">427</a>     <em>/**<em>*</em></em>\n<a name=\"428\" href=\"#428\">428</a> <em>     * Return JAXP document builder instance.</em>\n<a name=\"429\" href=\"#429\">429</a> <em>     *</em>\n<a name=\"430\" href=\"#430\">430</a> <em>     * @return an initialized DocumentBuilder</em>\n<a name=\"431\" href=\"#431\">431</a> <em>     *</em>\n<a name=\"432\" href=\"#432\">432</a> <em>     * @throws ServletException wraps ParserConfigurationException</em>\n<a name=\"433\" href=\"#433\">433</a> <em>     */</em>\n<a name=\"434\" href=\"#434\">434</a>     <strong>protected</strong> DocumentBuilder getDocumentBuilder() throws ServletException\n<a name=\"435\" href=\"#435\">435</a>     {\n<a name=\"436\" href=\"#436\">436</a>         DocumentBuilder documentBuilder = <strong>null</strong>;\n<a name=\"437\" href=\"#437\">437</a>         DocumentBuilderFactory documentBuilderFactory = <strong>null</strong>;\n<a name=\"438\" href=\"#438\">438</a> \n<a name=\"439\" href=\"#439\">439</a>         <strong>try</strong>\n<a name=\"440\" href=\"#440\">440</a>         {\n<a name=\"441\" href=\"#441\">441</a>             documentBuilderFactory = DocumentBuilderFactory.newInstance();\n<a name=\"442\" href=\"#442\">442</a>             documentBuilderFactory.setNamespaceAware(false);\n<a name=\"443\" href=\"#443\">443</a>             documentBuilder = documentBuilderFactory.newDocumentBuilder();\n<a name=\"444\" href=\"#444\">444</a>         }\n<a name=\"445\" href=\"#445\">445</a>         <strong>catch</strong>(ParserConfigurationException e)\n<a name=\"446\" href=\"#446\">446</a>         {\n<a name=\"447\" href=\"#447\">447</a>             <strong>throw</strong> <strong>new</strong> ServletException(<span class=\"string\">\"webdavservlet.jaxpfailed\"</span>);\n<a name=\"448\" href=\"#448\">448</a>         }\n<a name=\"449\" href=\"#449\">449</a> \n<a name=\"450\" href=\"#450\">450</a>         <strong>return</strong> documentBuilder;\n<a name=\"451\" href=\"#451\">451</a>     }\n<a name=\"452\" href=\"#452\">452</a> \n<a name=\"453\" href=\"#453\">453</a>     <em>/**<em>*</em></em>\n<a name=\"454\" href=\"#454\">454</a> <em>     * Utility method to log the contents of a method request</em>\n<a name=\"455\" href=\"#455\">455</a> <em>     *</em>\n<a name=\"456\" href=\"#456\">456</a> <em>     * @param method the method to log</em>\n<a name=\"457\" href=\"#457\">457</a> <em>     *</em>\n<a name=\"458\" href=\"#458\">458</a> <em>     * @throws IOException if method throws an IOException</em>\n<a name=\"459\" href=\"#459\">459</a> <em>     */</em>\n<a name=\"460\" href=\"#460\">460</a>     <strong>protected</strong> <strong>void</strong> logMethod(<strong>final</strong> PropFindMethod method) throws IOException\n<a name=\"461\" href=\"#461\">461</a>     {\n<a name=\"462\" href=\"#462\">462</a>         StringBuffer buf = <strong>new</strong> StringBuffer();\n<a name=\"463\" href=\"#463\">463</a> \n<a name=\"464\" href=\"#464\">464</a>         buf.append(<span class=\"string\">\"method: \\n\"</span>);\n<a name=\"465\" href=\"#465\">465</a>         buf.append(method.getName() + <span class=\"string\">\"\\n\"</span>);\n<a name=\"466\" href=\"#466\">466</a>         buf.append(method.getURI() + <span class=\"string\">\"\\n\"</span>);\n<a name=\"467\" href=\"#467\">467</a> \n<a name=\"468\" href=\"#468\">468</a>         Header[] headers = method.getRequestHeaders();\n<a name=\"469\" href=\"#469\">469</a> \n<a name=\"470\" href=\"#470\">470</a>         <strong>for</strong>(<strong>int</strong> i = 0; i &lt; headers.length; ++i)\n<a name=\"471\" href=\"#471\">471</a>         {\n<a name=\"472\" href=\"#472\">472</a>             buf.append(headers[i]);\n<a name=\"473\" href=\"#473\">473</a>         }\n<a name=\"474\" href=\"#474\">474</a> \n<a name=\"475\" href=\"#475\">475</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"476\" href=\"#476\">476</a>         {\n<a name=\"477\" href=\"#477\">477</a>             log.debug(buf);\n<a name=\"478\" href=\"#478\">478</a>         }\n<a name=\"479\" href=\"#479\">479</a>     }\n<a name=\"480\" href=\"#480\">480</a> \n<a name=\"481\" href=\"#481\">481</a>     <em>/**<em>*</em></em>\n<a name=\"482\" href=\"#482\">482</a> <em>     * modifyReponse mangles the &amp;lt;href&amp;gt; elemtn in peerResponse to encode</em>\n<a name=\"483\" href=\"#483\">483</a> <em>     * the peer the respone came from</em>\n<a name=\"484\" href=\"#484\">484</a> <em>     *</em>\n<a name=\"485\" href=\"#485\">485</a> <em>     * @param peerResponse the response from the peer to mangle</em>\n<a name=\"486\" href=\"#486\">486</a> <em>     * @param peer the peer who returned it</em>\n<a name=\"487\" href=\"#487\">487</a> <em>     *</em>\n<a name=\"488\" href=\"#488\">488</a> <em>     * @return should the proxy send this response to the client because it</em>\n<a name=\"489\" href=\"#489\">489</a> <em>     *         hasn't seen it yet.</em>\n<a name=\"490\" href=\"#490\">490</a> <em>     */</em>\n<a name=\"491\" href=\"#491\">491</a>     <strong>private</strong> <strong>boolean</strong> modifyResponse(<strong>final</strong> Element peerResponse, <strong>final</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer)\n<a name=\"492\" href=\"#492\">492</a>     {\n<a name=\"493\" href=\"#493\">493</a>         NodeList hrefs = peerResponse.getElementsByTagName(<span class=\"string\">\"D:href\"</span>);\n<a name=\"494\" href=\"#494\">494</a>         String peerHost = <span class=\"string\">\"\"</span>;\n<a name=\"495\" href=\"#495\">495</a> \n<a name=\"496\" href=\"#496\">496</a>         <strong>try</strong>\n<a name=\"497\" href=\"#497\">497</a>         {\n<a name=\"498\" href=\"#498\">498</a>             peerHost = peer.getUniqueID();\n<a name=\"499\" href=\"#499\">499</a> \n<a name=\"500\" href=\"#500\">500</a>             <strong>for</strong>(<strong>int</strong> i = 0; i &lt; hrefs.getLength(); ++i)\n<a name=\"501\" href=\"#501\">501</a>             {\n<a name=\"502\" href=\"#502\">502</a>                 Element href = (Element)hrefs.item(i);\n<a name=\"503\" href=\"#503\">503</a>                 Text hrefText = (Text)href.getFirstChild();\n<a name=\"504\" href=\"#504\">504</a> \n<a name=\"505\" href=\"#505\">505</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"506\" href=\"#506\">506</a>                 {\n<a name=\"507\" href=\"#507\">507</a>                     log.debug(<span class=\"string\">\"hrefText: \"</span> + hrefText);\n<a name=\"508\" href=\"#508\">508</a>                 }\n<a name=\"509\" href=\"#509\">509</a> \n<a name=\"510\" href=\"#510\">510</a>                 <strong>if</strong>(hrefText != <strong>null</strong>)\n<a name=\"511\" href=\"#511\">511</a>                 {\n<a name=\"512\" href=\"#512\">512</a>                     String newHref = codec.encodeHostInPath(hrefText.getData(),\n<a name=\"513\" href=\"#513\">513</a>                                                             peerHost);\n<a name=\"514\" href=\"#514\">514</a> \n<a name=\"515\" href=\"#515\">515</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"516\" href=\"#516\">516</a>         \t        {\n<a name=\"517\" href=\"#517\">517</a>                     \tlog.debug(<span class=\"string\">\"seenHrefs: \"</span> + seenHrefs + <span class=\"string\">\"\\nnewHref: \"</span>\n<a name=\"518\" href=\"#518\">518</a>                     \t\t\t+ newHref);\n<a name=\"519\" href=\"#519\">519</a>         \t        }\n<a name=\"520\" href=\"#520\">520</a> \n<a name=\"521\" href=\"#521\">521</a>                     <strong>if</strong>(!seenHrefs.contains(newHref))\n<a name=\"522\" href=\"#522\">522</a>                     {\n<a name=\"523\" href=\"#523\">523</a>                         hrefText.setData(newHref);\n<a name=\"524\" href=\"#524\">524</a>                         seenHrefs.add(newHref);\n<a name=\"525\" href=\"#525\">525</a>                         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"526\" href=\"#526\">526</a>             \t        {\n<a name=\"527\" href=\"#527\">527</a>             \t        \tlog.debug(<span class=\"string\">\"returning true\"</span>);\n<a name=\"528\" href=\"#528\">528</a>             \t        }\n<a name=\"529\" href=\"#529\">529</a> \n<a name=\"530\" href=\"#530\">530</a>                         <strong>return</strong> <strong>true</strong>;\n<a name=\"531\" href=\"#531\">531</a>                     }\n<a name=\"532\" href=\"#532\">532</a>                 }\n<a name=\"533\" href=\"#533\">533</a>             }\n<a name=\"534\" href=\"#534\">534</a>         }\n<a name=\"535\" href=\"#535\">535</a>         <strong>catch</strong>(Exception ex)\n<a name=\"536\" href=\"#536\">536</a>         {\n<a name=\"537\" href=\"#537\">537</a>             log.warn(<span class=\"string\">\"problem getting host for \"</span> + peer, ex);\n<a name=\"538\" href=\"#538\">538</a>         }\n<a name=\"539\" href=\"#539\">539</a> \n<a name=\"540\" href=\"#540\">540</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"541\" href=\"#541\">541</a>         {\n<a name=\"542\" href=\"#542\">542</a>         \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"543\" href=\"#543\">543</a> \t        {\n<a name=\"544\" href=\"#544\">544</a>         \t\tlog.debug(<span class=\"string\">\"returning false\"</span>);\n<a name=\"545\" href=\"#545\">545</a> \t        }\n<a name=\"546\" href=\"#546\">546</a>         }\n<a name=\"547\" href=\"#547\">547</a> \n<a name=\"548\" href=\"#548\">548</a>         <strong>return</strong> false;\n<a name=\"549\" href=\"#549\">549</a>     }\n<a name=\"550\" href=\"#550\">550</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32835.0}