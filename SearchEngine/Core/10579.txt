{"text": "ICS 18 Strategy and board game programming Project Proposal The first task required of each programming team is to submit a proposal naming the project members describing the game to be programmed and assigning responsibilities for programming and other project tasks to the project members The Game Choose a game to program The game should be complicated enough that a heuristic search is necessary to solve it so tic tac toe programs will not be allowed It should not involve chance i e no card games or backgammon Its rules should be simple since I d prefer you spend more time on evaluation and search and less time on just getting your program running chess is borderline I d prefer you chose other games and besides you need to use all the tricks in the book to match the performance of existing chess programs Both players should be able to know the whole board situation so no hiding information from each other as in battleship Finally I d suggest you stay away from Go even though it fits all these other criteria because the number of different moves that can be made at each step makes it very difficult for computer search algorithms to make good Go players With all these negatives what are some good games that you could propose to program I ve listed them on a separate web page Project tasks Your proposal should list the software components that will be included in your project and determine which team members are responsible for which components Search complexity Your proposal should say how many different legal moves are available at a typical position in your game this number is known as the branching factor If there are b legal moves and you perform minimax search to a depth of k moves you should search roughly bk positions Assuming you can search 1 positions second a pretty typical number how large can k be if you want your search to finish in one second Note the actual search depth will likely be better than this estimate Alpha beta pruning will roughly double the depth you can reach but other pruning techniques are available and may turn out to be necessary depending on the branching factor of your game Evaluation terms Your proposal should make a preliminary guess at what sort of information needs to be included in the evaluation function and describe how you will go about computing that information Probably this will not end up describing how your final product works but you need to start with something here Platforms Your proposal should state what kind of machine you use and what language you will program in My preference would be Java due to its portability and ease of setting up user interfaces but you may use other languages such as C C etc If you use a Mac Linux based PC Windows 98 or other platform not generally available in the ICS labs you should make sure that a portable machine will be available for project demonstrations If you wish to have your code preserved on a web site I will make room available for this on the course web page This may give you another reason for choosing Java over other languages Using other people s code You may use user interface code written by people other than project members as long as the code is available for such use and you give full credit for it in your project documentation All components of the game engine itself including the board representation search code move generation and position evaluation should be written yourselves David Eppstein Dept Information Computer Science UC Irvine ", "_id": "http://www.ics.uci.edu/~eppstein/180a/proposal.html", "title": "game programming", "html": "<HTML><HEAD>\n<TITLE>Game Programming</TITLE>\n<META name=\"Owner\" value=\"eppstein\">\n<META name=\"Reply-To\" value=\"eppstein@ics.uci.edu\">\n</HEAD><BODY>\n<IMG SRC=\"icslogo2.gif\" WIDTH=472 HEIGHT=72 ALT=\"\"><P>\n<A HREF=\"index.html\">\n<H1>ICS 180: Strategy and board game programming</H1></A>\n\n<H2>Project Proposal</H2>\n\nThe first task required of each programming team is to submit a proposal,\nnaming the project members, describing the game to be programmed, and\nassigning responsibilities for programming and other project tasks to the\nproject members.\n\n<H3>The Game</H3>\n\nChoose a game to program.\nThe game should be complicated enough that a heuristic search is\nnecessary to solve it (so tic-tac-toe programs will not be allowed).\nIt should not involve chance (i.e., no card games or backgammon).\nIts rules should be simple, since I'd prefer you spend more time on\nevaluation and search and less time on just getting your program running\n(chess is borderline, I'd prefer you chose other games, and besides you\nneed to use all the tricks in the book to match\nthe performance of existing chess programs).\nBoth players should be able to know the whole board situation\n(so no hiding information from each other as in battleship).\nFinally, I'd suggest you stay away from Go, even though it fits all\nthese other criteria, because the number of different moves that can be\nmade at each step makes it very difficult for computer search algorithms\nto make good Go players.\n\n<P>With all these negatives, <A HREF=\"games.html\">what are some good\ngames</A> that you could propose to program? I've listed them on\na <A HREF=\"games.html\">separate web page</A>.\n\n<H2>Project tasks</H2>\n\nYour proposal should <A HREF=\"components.html\">list the software\ncomponents</A> that will be included in your project,\nand determine which team members are responsible for\nwhich components.\n\n<H2>Search complexity</H2>\n\nYour proposal should say how many different legal moves are available\nat a typical position in your game (this number is known as the\n<I>branching factor</I>).  If there are b legal moves, and you perform\nminimax search to a depth of k moves, you should search roughly\nb<sup>k</sup> positions.  Assuming you can search 100,000 positions/second\n(a pretty typical number), how large can k be if you want your search to\nfinish in one second?\n\n<P>(Note, the actual search depth will likely be better than this estimate.\nAlpha-beta pruning will roughly double the depth you can reach, but other\npruning techniques are available and\nmay turn out to be necessary depending on the branching factor of your game.)\n\n<H2>Evaluation terms</H2>\n\nYour proposal should make a preliminary guess at\nwhat sort of information needs to be included in the\n<A HREF=\"components.html\">evaluation function</A>,\nand describe how you will go about computing that information.\nProbably this will not end up describing how your final product\nworks, but you need to start with something here.\n\n<H2>Platforms</H2>\n\nYour proposal should state what kind of machine you use and what\nlanguage you will program in.\nMy preference would be Java (due to its portability and ease of setting\nup user interfaces) but you may use other languages \nsuch as C, C++, etc. \nIf you use a Mac, Linux-based PC, Windows '98, or other platform not generally\navailable in the ICS labs, you should make sure that\na portable machine will be available for project demonstrations.\n\n<P>If you wish to have your code preserved on a web site,\nI will make room available for this on the course web page.\nThis may give you another reason for choosing Java over other languages.\n\n<H2>Using other people's code</H2>\n\nYou may use user interface code written by people other than project\nmembers, as long as the code is available for such use and you give full\ncredit for it in your project documentation.\nAll components of the game engine itself, including the board\nrepresentation, search code, move generation, and position evaluation,\nshould be written yourselves.\n\n<HR>\n<A HREF=\"/~eppstein/\">David Eppstein,\n<A HREF=\"/\">Dept. Information & Computer Science</A>,\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A>,\n<!--#flastmod file=\"proposal.html\" -->.\n</BODY></HTML>\n", "id": 10579.0}