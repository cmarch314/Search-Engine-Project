{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL surface neighbor coordinates 3 Definition The function surface neighbor coordinates 3 computes natural neighbor coordinates for surface points associated to a finite set of sample points issued from the surface The coordinates are computed from the intersection of the Voronoi cell of the query point p with the tangent plane to the surface at p If the sampling is sufficiently dense the coordinate system meets the properties described in the manual pages and in BF 2 Fl 3 The query point p needs to lie inside the convex hull of the projection of the sample points onto the tangent plane at p include CGAL surface neighbor coordinates 3 h template class OutputIterator class InputIterator class Kernel CGAL Triple OutputIterator typename Kernel FT bool surface neighbor coordinates 3 InputIterator first InputIterator beyond typename Kernel Point 3 p typename Kernel Vector 3 normal OutputIterator out Kernel K The sample points are provided in the range first beyond InputIterator value type is the point type Kernel Point 3 The tangent plane is defined by the point p and the vector normal The parameter K determines the kernel type that will instantiate the template parameter of Voronoi intersection 2 traits 3 K The natural neighbor coordinates for p are computed in the power diagram that results from the intersection of the 3D Voronoi diagram of with the tangent plane The sequence of point coordinate pairs that is computed by the function is placed starting at out The function returns a triple with an iterator that is placed past the end of the resulting sequence of point coordinate pairs the normalization factor of the coordinates and a boolean value which is set to true iff the coordinate computation was successful i e if p lies inside the convex hull of the projection of the points onto the tangent plane template class OutputIterator class InputIterator class ITraits CGAL Triple OutputIterator typename ITraits FT bool surface neighbor coordinates 3 InputIterator first InputIterator beyond typename ITraits Point 2 p OutputIterator out ITraits traits the same as above only that the traits class must be instantiated by the user ITraits must be equivalent to Voronoi intersection 2 traits 3 K The next functions return in addition a second boolean value the fourth value of the quadrupel that certifies whether or not the Voronoi cell of p can be affected by points that lie outside the input range i e outside the ball centered on p passing through the furthest sample point from p in the range first beyond If the sample points are collected by a k nearest neighbor or a range search query this permits to check whether the neighborhood which has been considered is large enough template class OutputIterator class InputIterator class Kernel CGAL Quadruple OutputIterator typename Kernel FT bool bool surface neighbor coordinates certified 3 InputIterator first InputIterator beyond typename Kernel Point 3 p typename Kernel Vector 3 normal OutputIterator out Kernel K Similar to the first function The additional fourth return value is true if the furthest point in the range first beyond is further away from p than twice the distance from p to the furthest vertex of the intersection of the Voronoi cell of p with the tangent plane defined by p normal It is false otherwise template class OutputIterator class InputIterator class Kernel CGAL Quadruple OutputIterator typename Kernel FT bool bool surface neighbor coordinates certified 3 InputIterator first InputIterator beyond typename Kernel Point 2 p typename Kernel FT max distance OutputIterator out Kernel kernel The same as above except that this function takes the maximal distance from p to the points in the range first beyond as additional parameter template class OutputIterator class InputIterator class ITraits CGAL Quadruple OutputIterator typename ITraits FT bool bool surface neighbor coordinates certified 3 InputIterator first InputIterator beyond typename ITraits Point 2 p OutputIterator out ITraits traits The same as above only that the traits class must be instantiated by the user and without the parameter max distance ITraits must be equivalent to Voronoi intersection 2 traits 3 K template class OutputIterator class InputIterator class ITraits CGAL Quadruple OutputIterator typename ITraits FT bool bool surface neighbor coordinates certified 3 InputIterator first InputIterator beyond typename ITraits Point 2 p typename ITraits FT max distance OutputIterator out ITraits traits The same as above with the parameter max distance The next function allows to filter some potential neighbors of the query point p from via its three dimensional Delaunay triangulation All surface neighbors of p are necessarily neighbors in the Delaunay triangulation of p template class Dt class OutputIterator CGAL Triple OutputIterator typename Dt Geom traits FT bool surface neighbor coordinates 3 Dt dt typename Dt Geom traits Point 2 p typename Dt Geom traits Vector 3 normal OutputIterator out typename Dt Face handle start typename Dt Face handle computes the surface neighbor coordinates with respect to the points that are vertices of the Delaunay triangulation dt The type Dt must be equivalent to Delaunay triangulation 3 Gt Tds The optional parameter start is used as a starting place for the search of the conflict zone It may be the result of the call dt locate p This function instantiates the template parameter ITraits to be Voronoi intersection 2 traits 3 Dt Geom traits template class Dt class OutputIterator class ITraits CGAL Triple OutputIterator typename Dt Geom traits FT bool surface neighbor coordinates 3 Dt dt typename Dt Geom traits Point 2 p OutputIterator out ITraits traits typename Dt Face handle start typename Dt Face handle The same as above only that the parameter traits instantiates the geometric traits class Its type ITraits must be equivalent to Voronoi intersection 2 traits 3 K Requirements Dt is equivalent to the class Delaunay triangulation 3 OutputIterator value type is equivalent to std pair Dt Point 3 Dt Geom traits FT i e a pair associating a point and its natural neighbor coordinate ITraits is equivalent to the class Voronoi intersection 2 traits 3 K See AlsoCGAL linear interpolation CGAL sibson c1 interpolation CGAL farin c1 interpolation CGAL Voronoi intersection 2 traits 3 K CGAL surface neighbors 3 ImplementationThis functions construct the regular triangulation of the input points instantiated with Voronoi intersection 2 traits 3 Kernel or ITraits if provided They return the result of the function call regular neighbor coordinates 2 with the regular triangulation and p as arguments Next surface neighbors 3 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Interpolation_ref/Function_surface_neighbor_coordinates_3.html", "title": "surface_neighbor_coordinates_3", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Interpolation_ref/surface_neighbor_coordinates_3.tex' -->\n<html> <head>  \n<title>surface_neighbor_coordinates_3</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1134\"></A>\n\n<A NAME=\"Cross_link_anchor_1135\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1031\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::surface_neighbor_coordinates_3\"></A>\n<h2><I>CGAL::surface_neighbor_coordinates_3</I></h2>\n\n     \n     \n     \n<A NAME=\"Index_anchor_1032\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1135\">surface_neighbor_coordinates_3</A></I> computes natural neighbor coordinates for\nsurface points associated to a finite set of sample points issued from\nthe surface. The coordinates are computed from the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the\nVoronoi cell of the query point <I>p</I> with the tangent plane to the\nsurface at <I>p</I>. If the sampling is sufficiently dense, the\ncoordinate system meets the properties described in the manual pages\nand in [<A HREF=\"../biblio.html#Biblio_bf-lcss-02\">BF02</A>],[<A HREF=\"../biblio.html#Biblio_cgal:f-csapc-03\">Fl&ouml;03</A>].  The query\npoint <I>p</I> needs to lie inside the convex hull of the projection of\nthe sample points onto the tangent plane at <I>p</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/surface_neighbor_coordinates_3.h\">CGAL/surface_neighbor_coordinates_3.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Kernel::FT+_bool_9_surface_neighbor_coordinates_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_3__p+_const_typename_Kernel::Vector_3__normal+_OutputIterator_out+_const_Kernel__K9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1135\">surface_neighbor_coordinates_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/FunctionObjectConcept_Kernel--Vector_3.html#Cross_link_anchor_474\">Kernel::Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> K)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The sample points <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> are provided in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH>.\n  <I>InputIterator::value_type</I> is the point type\n  <I><A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A></I>. The tangent plane is defined by the point\n  <I>p</I> and the vector <I>normal</I>.  The parameter <I>K</I>\n  determines the kernel type that will instantiate\n  the template parameter of <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.<BR>\n\nThe natural neighbor coordinates for <I>p</I> are computed in the\n  power diagram that results from the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the <MATH><I>3D</I></MATH> Voronoi\n  diagram of <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> with the tangent plane. The sequence of\n  point/coordinate pairs that is computed by the function is placed\n  starting at <I>out</I>. The function returns a triple with an\n  iterator that is placed past-the-end of the resulting sequence of\n  point/coordinate pairs, the normalization factor of the coordinates\n  and a boolean value which is set to true iff the coordinate\n  computation was successful, i.e. if <I>p</I> lies inside the convex\n  hull of the projection of the points <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> onto the tangent\n  plane.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_ITraits::FT+_bool_9_surface_neighbor_coordinates_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+OutputIterator_out+_const_ITraits__traits9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename ITraits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1135\">surface_neighbor_coordinates_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the same as above only that the traits class\n  must be instantiated by the user. <I>ITraits</I> must be equivalent\n  to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe next functions return, in addition, a second boolean value (the\nfourth value of the quadrupel) that certifies whether or not, the\nVoronoi cell of <I>p</I> can be affected by points that lie outside the\ninput range, i.e. outside the ball centered on <I>p</I> passing\nthrough the furthest sample point from <I>p</I> in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH>. If the sample\npoints are collected by a <MATH><I>k</I></MATH>-nearest neighbor or a range search\nquery, this permits to check whether the neighborhood which has been\nconsidered is large enough.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Quadruple6_OutputIterator+_typename_Kernel::FT+_bool+_bool_9_surface_neighbor_coordinates_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_3__p+_const_typename_Kernel::Vector_3__normal+_OutputIterator_out+_const_Kernel__K9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Quadruple.html#Cross_link_anchor_1585\">CGAL::Quadruple</A>&lt; OutputIterator, typename <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT, bool, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbor_coordinates_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/FunctionObjectConcept_Kernel--Vector_3.html#Cross_link_anchor_474\">Kernel::Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> K)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Similar to the first function. The additional fourth return\n  value is <I>true</I> if the furthest point in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH> is further\n  away from <I>p</I> than twice the distance from <I>p</I> to the\n  furthest vertex of the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the Voronoi cell of <I>p</I>\n  with the tangent plane defined by <I>(p,normal)</I>. It is\n  <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Quadruple6_OutputIterator+_typename_Kernel::FT+_bool+_bool_9_surface_neighbor_coordinates_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_2__p+_const_typename_Kernel::FT__max_distance+_OutputIterator_out+_const_Kernel__kernel9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Quadruple.html#Cross_link_anchor_1585\">CGAL::Quadruple</A>&lt; OutputIterator, typename <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT, bool, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbor_coordinates_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT max_distance,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> kernel)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above except that this function takes the\n  maximal distance from p to the points in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH> as\n  additional parameter.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Quadruple6_OutputIterator+_typename_ITraits::FT+_bool+_bool_9_surface_neighbor_coordinates_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+_OutputIterator_out+_const_ITraits__traits9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Quadruple.html#Cross_link_anchor_1585\">CGAL::Quadruple</A>&lt; OutputIterator, typename ITraits::FT, bool, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbor_coordinates_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above only\n  that the traits class must be instantiated by the user and without\n  the parameter <I>max_distance</I>.  <I>ITraits</I> must be equivalent\n  to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Quadruple6_OutputIterator+_typename_ITraits::FT+_bool+_bool_9_surface_neighbor_coordinates_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+_const_typename_ITraits::FT__max_distance+_OutputIterator_out+_const_ITraits__traits9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Quadruple.html#Cross_link_anchor_1585\">CGAL::Quadruple</A>&lt; OutputIterator, typename ITraits::FT, bool, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbor_coordinates_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\ntypename ITraits::FT max_distance,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above with the parameter\n  <I>max_distance</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe next function allows to filter some potential neighbors of the\nquery point <I>p</I> from <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> via its three-dimensional\nDelaunay triangulation. All surface neighbors of <I>p</I> are\nnecessarily neighbors in the Delaunay triangulation of <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\">\n <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> {p}</I></MATH>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Dt, class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Dt::Geom_traits::FT+_bool_9_surface_neighbor_coordinates_36const_Dt__dt+_const_typename_Dt::Geom_traits::Point_2__p+_const_typename_Dt::Geom_traits::Vector_3__normal+_OutputIterator_out+_typename_Dt::Face_handle_start_=_typename_Dt::Face_handle699;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename Dt::Geom_traits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1135\">surface_neighbor_coordinates_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Dt dt,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\ntypename Dt::Face_handle start = typename Dt::Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes\n  the surface neighbor coordinates with respect to the points that are\n  vertices of the Delaunay triangulation <I>dt</I>. The type <I>Dt</I>\n  must be equivalent to <I><A HREF=\"../Triangulation_3_ref/Class_Delaunay_triangulation_3.html#Cross_link_anchor_974\">Delaunay_triangulation_3</A>&lt;Gt, Tds&gt;</I>. The\n  optional parameter <I>start</I> is used as a starting\n  place for the search of the conflict zone. It may be the result of\n  the call <I>dt.locate(p)</I>. This function instantiates the template\n  parameter <I>ITraits</I> to be\n  <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;Dt::Geom_traits&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Dt, class OutputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Dt::Geom_traits::FT+_bool_9_surface_neighbor_coordinates_36const_Dt__dt+_const_typename_Dt::Geom_traits::Point_2__p+_OutputIterator_out+_const_ITraits__traits+_typename_Dt::Face_handle_start_=_typename_Dt::Face_handle699;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename Dt::Geom_traits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1135\">surface_neighbor_coordinates_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Dt dt,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits,<BR>\n\ntypename Dt::Face_handle start = typename Dt::Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above only that the parameter <I>traits</I> instantiates\n  the geometric traits class. Its type <I>ITraits</I> must be\n  equivalent to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<OL>\n<LI><I>Dt</I> is equivalent to the class\n  <I><A HREF=\"../Triangulation_3_ref/Class_Delaunay_triangulation_3.html#Cross_link_anchor_974\">Delaunay_triangulation_3</A></I>.\n<LI><I>OutputIterator::value_type</I> is equivalent to\n  <I>std::pair&lt;Dt::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>, Dt::Geom_traits::FT&gt;</I>, i.e. a pair\n  associating a point and its natural neighbor coordinate.\n<LI><I>ITraits</I> is equivalent to the class <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n</OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_linear_interpolation.html#Cross_link_anchor_1110\">CGAL::linear_interpolation</A></I><BR>\n\n<I><A HREF=\"Function_sibson_c1_interpolation.html#Cross_link_anchor_1112\">CGAL::sibson_c1_interpolation</A></I><BR>\n\n<I><A HREF=\"Function_farin_c1_interpolation.html#Cross_link_anchor_1114\">CGAL::farin_c1_interpolation</A></I><BR>\n\n<I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1132\">CGAL::Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I><BR>\n\n<I><A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1136\">CGAL::surface_neighbors_3</A></I>\n<P>\n\n<H3>Implementation</H3>This functions construct the regular triangulation of the input points \ninstantiated with <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> or <I>ITraits</I> if provided. \nThey return the result of the function call \n<I><A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A></I> \nwith the regular triangulation and <I>p</I> as arguments.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_surface_neighbors_3.html\"><I>surface_neighbors_3</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_50!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38056.0}