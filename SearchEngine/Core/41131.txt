{"text": " Home Trees Indices Help Package CHEM Package datatype Module finger Class Finger hide private frames no frames Class Finger object Finger This class encapsulates most fingerprint operations Blank fingerprint print Finger 128 128 Of course a valid length must be passed print Finger 2394 Traceback most recent call last ValueError FPmk Len must From Finger object print ImmutableFinger Finger 128 fue 3kdfj J2dkf7Mk1 128 fue 3kdfj J2dkf7Mk1 From string Fingerpints can be generated from fingerprint string consisting of 1 an integer length 2 a period 3 any number of characters selected from a z A Z 9 print Finger 128 fue 3kdfj J2dkf7Mk1 128 fue 3kdfj J2dkf7Mk1 Extra characters are truncated print Finger 128 fue 3kdfj J2dkf7Mk1 343432 128 fue 3kdfj J2dkf7Mk1 Illegal characters generates an exception print Finger 182 Q Traceback most recent call last ValueError FPin error reading fingerprint Most likely illegal character From random Fingerprints can be generated from a random number generator f Finger 12 3 A valid lenght and density must be used f Finger 1 12 Traceback most recent call last ValueError FPrand len must and density must be bewteen and 1 inclusive Instance Methods hide private repr self init self args init self Finger f Finger init self char c Finger init self int len double density Finger init self int len Finger This class encapsulates most fingerprint operations str args str self void char len self In this module there are a large number of functions cmp args cmp self Finger other int getitem args getitem self int idx int and args and self Finger o Finger or args or self Finger o Finger setitem args setitem self int idx int v density self In this module there are a large number of functions bitcount self In this module there are a large number of functions Bitcount self In this module there are a large number of functions hash self Once a Fingerprint is created if it is an ImmutableFinger it can be hashed reduce self This function implements the reduce method so Finger instances can be pickled and unpickled Class Variables hide private swig setmethods setattr lambda self name value swig getmethods getattr lambda self name swig destroy finger delete Finger del lambda self Method Details hide private init self args Constructor init self Finger f Finger init self char c Finger init self int len double density Finger init self int len Finger This class encapsulates most fingerprint operations Blank fingerprint print Finger 128 128 Of course a valid length must be passed print Finger 2394 Traceback most recent call last ValueError FPmk Len must From Finger object print ImmutableFinger Finger 128 fue 3kdfj J2dkf7Mk1 128 fue 3kdfj J2dkf7Mk1 From string Fingerpints can be generated from fingerprint string consisting of 1 an integer length 2 a period 3 any number of characters selected from a z A Z 9 print Finger 128 fue 3kdfj J2dkf7Mk1 128 fue 3kdfj J2dkf7Mk1 Extra characters are truncated print Finger 128 fue 3kdfj J2dkf7Mk1 343432 128 fue 3kdfj J2dkf7Mk1 Illegal characters generates an exception print Finger 182 Q Traceback most recent call last ValueError FPin error reading fingerprint Most likely illegal character From random Fingerprints can be generated from a random number generator f Finger 12 3 A valid lenght and density must be used f Finger 1 12 Traceback most recent call last ValueError FPrand len must and density must be bewteen and 1 inclusive str args Informal representation operator str self void char In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py len self Length operator In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py Returns int cmp args Comparison operator cmp self Finger other int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py getitem args Indexing operator getitem self int idx int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py and args And operator and self Finger o Finger In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py or args Or operator or self Finger o Finger In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py setitem args Index assignment operator setitem self int idx int v In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py density self In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py Returns double bitcount self In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py Returns int Bitcount self In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py Returns float hash self Hashing function Once a Fingerprint is created if it is an ImmutableFinger it can be hashed hash ImmutableFinger 128 12319fj329jewi93j1 1186272689 hash Finger 128 12319fj329jewi93j1 Traceback most recent call last TypeError This object is mutable and unhashable reduce self This function implements the reduce method so Finger instances can be pickled and unpickled import pickle f1 Finger 128 3 f1 id 1 s pickle dumps f1 f2 pickle loads s f1 f2 1 f2 id f1 id 1 Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 33 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.datatype.finger.Finger-class.html", "title": "chem.datatype.finger.finger", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.datatype.finger.Finger</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.datatype-module.html\">Package&nbsp;datatype</a> ::\n        <a href=\"CHEM.datatype.finger-module.html\">Module&nbsp;finger</a> ::\n        Class&nbsp;Finger\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.datatype.finger.Finger-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class Finger</h1><br /><br />\n<pre class=\"base-tree\">\n<a href=\"CHEM.datatype.finger._object-class.html\">_object</a> --+\n          |\n         <strong class=\"uidshort\">Finger</strong>\n</pre>\n\n<hr />\n<pre class=\"literalblock\">\n\nThis class encapsulates most fingerprint operations.\n\nBlank fingerprint:\n\n&gt;&gt;&gt; print Finger(128)\n128.----------------------\n\nOf course, a valid length must be passed:\n&gt;&gt;&gt; print Finger(-2394)\nTraceback (most recent call last):\n    ...\nValueError: FPmk: Len must &gt; 0.\n\n\nFrom Finger object:\n\n&gt;&gt;&gt; print ImmutableFinger(Finger('128.fue*3kdfj-J2dkf7Mk1*--'))\n128.fue*3kdfj-J2dkf7Mk1*--\n\nFrom string:\n\nFingerpints can be generated from fingerprint string consisting of:\n1. an integer length\n2. a period '.'\n3. any number of characters selected from [a-z,A-Z,0-9,-,*]\n&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*') \n128.fue*3kdfj-J2dkf7Mk1*--\n\nExtra characters are truncated:\n&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*----------343432')\n128.fue*3kdfj-J2dkf7Mk1*--\n\nIllegal characters generates an exception.\n&gt;&gt;&gt; print Finger('182.*#,$$(Q*')\nTraceback (most recent call last):\n    ...\nValueError: FPin: error reading fingerprint. Most likely illegal character.\n\n\nFrom random:\n\nFingerprints can be generated from a random number generator:\n&gt;&gt;&gt; f=Finger(120,.3)\n\nA valid lenght and density must be used:\n&gt;&gt;&gt; f=Finger(-1,12.0)\nTraceback (most recent call last):\n    ...\nValueError: FPrand: len must &gt; 0 and density must be bewteen 0 and 1 (inclusive).\n\n</pre><br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"__repr__\"></a><span class=\"summary-sig-name\">__repr__</span>(<span class=\"summary-sig-arg\">self</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__init__\" class=\"summary-sig-name\">__init__</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __init__(self, Finger f) -&gt; Finger\n__init__(self, char c) -&gt; Finger\n__init__(self, int len, double density) -&gt; Finger\n__init__(self, int len) -&gt; Finger\n\nThis class encapsulates most fingerprint operations.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__str__\" class=\"summary-sig-name\">__str__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __str__(self, void ?) -&gt; char</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__len__\" class=\"summary-sig-name\">__len__</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      * In this module there are a large number of functions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__cmp__\" class=\"summary-sig-name\">__cmp__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __cmp__(self, Finger other) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__getitem__\" class=\"summary-sig-name\">__getitem__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __getitem__(self, int idx) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__and__\" class=\"summary-sig-name\">__and__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __and__(self, Finger o) -&gt; Finger</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__or__\" class=\"summary-sig-name\">__or__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __or__(self, Finger o) -&gt; Finger</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__setitem__\" class=\"summary-sig-name\">__setitem__</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      __setitem__(self, int idx, int v)</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#density\" class=\"summary-sig-name\">density</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      * In this module there are a large number of functions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#bitcount\" class=\"summary-sig-name\">bitcount</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      * In this module there are a large number of functions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#Bitcount\" class=\"summary-sig-name\">Bitcount</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      * In this module there are a large number of functions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__hash__\" class=\"summary-sig-name\">__hash__</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Once a Fingerprint is created, if it is an ImmutableFinger, it can\n      be hashed:</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger.Finger-class.html#__reduce__\" class=\"summary-sig-name\">__reduce__</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      This function implements the __reduce__ method so Finger instances\n      can be pickled and unpickled.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__swig_setmethods__\"></a><span class=\"summary-name\">__swig_setmethods__</span> = <code title=\"{}\">{}</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__setattr__\"></a><span class=\"summary-name\">__setattr__</span> = <code title=\"lambda self, name, value:\">lambda self, name, value:</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__swig_getmethods__\"></a><span class=\"summary-name\">__swig_getmethods__</span> = <code title=\"{}\">{}</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__getattr__\"></a><span class=\"summary-name\">__getattr__</span> = <code title=\"lambda self, name:\">lambda self, name:</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__swig_destroy__\"></a><span class=\"summary-name\">__swig_destroy__</span> = <code title=\"_finger.delete_Finger\">_finger.delete_Finger</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"__del__\"></a><span class=\"summary-name\">__del__</span> = <code title=\"lambda self:\">lambda self:</code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"__init__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__init__</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Constructor)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\n\n__init__(self, Finger f) -&gt; Finger\n__init__(self, char c) -&gt; Finger\n__init__(self, int len, double density) -&gt; Finger\n__init__(self, int len) -&gt; Finger\n\nThis class encapsulates most fingerprint operations.\n\nBlank fingerprint:\n\n&gt;&gt;&gt; print Finger(128)\n128.----------------------\n\nOf course, a valid length must be passed:\n&gt;&gt;&gt; print Finger(-2394)\nTraceback (most recent call last):\n    ...\nValueError: FPmk: Len must &gt; 0.\n\n\nFrom Finger object:\n\n&gt;&gt;&gt; print ImmutableFinger(Finger('128.fue*3kdfj-J2dkf7Mk1*--'))\n128.fue*3kdfj-J2dkf7Mk1*--\n\nFrom string:\n\nFingerpints can be generated from fingerprint string consisting of:\n1. an integer length\n2. a period '.'\n3. any number of characters selected from [a-z,A-Z,0-9,-,*]\n&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*') \n128.fue*3kdfj-J2dkf7Mk1*--\n\nExtra characters are truncated:\n&gt;&gt;&gt; print Finger('128.fue*3kdfj-J2dkf7Mk1*----------343432')\n128.fue*3kdfj-J2dkf7Mk1*--\n\nIllegal characters generates an exception.\n&gt;&gt;&gt; print Finger('182.*#,$$(Q*')\nTraceback (most recent call last):\n    ...\nValueError: FPin: error reading fingerprint. Most likely illegal character.\n\n\nFrom random:\n\nFingerprints can be generated from a random number generator:\n&gt;&gt;&gt; f=Finger(120,.3)\n\nA valid lenght and density must be used:\n&gt;&gt;&gt; f=Finger(-1,12.0)\nTraceback (most recent call last):\n    ...\nValueError: FPrand: len must &gt; 0 and density must be bewteen 0 and 1 (inclusive).\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__str__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__str__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Informal representation operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__str__(self, void ?) -&gt; char</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__len__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__len__</span>(<span class=\"sig-arg\">self</span>)</span>\n    <br /><em class=\"fname\">(Length operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n    <dt>Returns:</dt>\n        <dd><pre class=\"literalblock\">\nint\n\n</pre></dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__cmp__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__cmp__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Comparison operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__cmp__(self, Finger other) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__getitem__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__getitem__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Indexing operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__getitem__(self, int idx) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__and__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__and__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(And operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__and__(self, Finger o) -&gt; Finger</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__or__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__or__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Or operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__or__(self, Finger o) -&gt; Finger</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__setitem__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__setitem__</span>(<span class=\"sig-arg\">*args</span>)</span>\n    <br /><em class=\"fname\">(Index assignment operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>__setitem__(self, int idx, int v)</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"density\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">density</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n    <dt>Returns:</dt>\n        <dd><pre class=\"literalblock\">\ndouble\n\n</pre></dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"bitcount\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">bitcount</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n    <dt>Returns:</dt>\n        <dd><pre class=\"literalblock\">\nint\n\n</pre></dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"Bitcount\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">Bitcount</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n    <dt>Returns:</dt>\n        <dd><pre class=\"literalblock\">\nfloat\n\n</pre></dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__hash__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__hash__</span>(<span class=\"sig-arg\">self</span>)</span>\n    <br /><em class=\"fname\">(Hashing function)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Once a Fingerprint is created, if it is an ImmutableFinger, it can be \n  hashed:\n<pre class=\"py-doctest\">\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>hash(ImmutableFinger(<span class=\"py-string\">'128.12319fj329jewi93j1'</span>))\n<span class=\"py-output\">1186272689</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span>hash(Finger(<span class=\"py-string\">'128.12319fj329jewi93j1'</span>))\n<span class=\"py-except\">Traceback (most recent call last):</span>\n<span class=\"py-except\">    ...</span>\n<span class=\"py-except\">TypeError: This object is mutable and unhashable.</span></pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__reduce__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__reduce__</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  This function implements the __reduce__ method so Finger instances can\n  be pickled and unpickled.\n<pre class=\"py-doctest\">\n<span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">import</span> pickle\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>f1=Finger(128,.3)\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>f1.id=100\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>s=pickle.dumps(f1)\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>f2=pickle.loads(s)\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>f1==f2\n<span class=\"py-output\">1</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span>f2.id==f1.id\n<span class=\"py-output\">1</span></pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:33 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 41131.0}