{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 11Planar Nef Polyhedra Michael Seel 11 1 Introduction When working with polygonal and polyhedral sets the mathematical model determines the kind of point set that can be represented Nef polyhedra are the most general rectilinear polyhedral model Topological simpler models that are contained in the domain of Nef polyhedra are convex polytopes normally defined as the convex hull of a nonempty finite set of points Convex polytopes are compact closed and manifold sets elementary polyhedra normally defined as the union of a finite number of convex polytopes polyhedral sets nomally defined as the intersection of a finite number of closed halfspaces Such sets are closed and convex but need not to be compact linear polyhedra normally defined as the set of all points belonging to the simplices of a simplicial complex A planar Nef polyhedron is any set that can be obtained from a finite set of open halfspaces by set complement and set intersection operations Due to the fact that all other binary set operations like union difference and symmetric difference can be reduced to intersection and complement calculations Nef polyhedra are also closed under those operations Apart from the set complement operation there are more topological unary set operations that are closed in the domain of Nef polyhedra Given a Nef polyhedron one can determine its interior its boundary and its closure and also composed operations like regularization defined to be the closure of the interior or a point set Figure Two Nef polyhedra in the plane A closed halfspace on the left and a complex polyhedron on the right Note that the points on the squared boundary are at infinity 11 2 Construction and Composition Following the above definition the data type Nef polyhedron 2 T allows construction of elementary Nef polyhedra and the binary and unary composition by the mentioned set operations In the following examples skip the typedefs at the beginning at first and take the types Point and Line to be models of the standard two dimensional CGAL kernel CGAL Point 2 K and CGAL Line 2 K Their user interface is thus defined in the corresponding reference pages file examples Nef 2 construction C include CGAL Gmpz h include CGAL Filtered extended homogeneous h include CGAL Nef polyhedron 2 h typedef CGAL Gmpz RT typedef CGAL Filtered extended homogeneous RT Extended kernel typedef CGAL Nef polyhedron 2 Extended kernel Nef polyhedron typedef Nef polyhedron Point Point typedef Nef polyhedron Line Line int main Nef polyhedron N1 Nef polyhedron COMPLETE Line l 2 4 2 l 2x 4y 2 Nef polyhedron N2 l Nef polyhedron INCLUDED Nef polyhedron N3 N2 complement CGAL assertion N1 N2 join N3 Point p1 p2 1 1 p3 2 15 Point triangle 3 p1 p2 p3 Nef polyhedron N4 triangle triangle 3 Nef polyhedron N5 N2 intersection N4 CGAL assertion N5 N2 N5 N4 return Planar halfspaces as used in the definition are modelled by oriented lines In the previous example N1 is the Nef polyhedron representing the full plane N2 is the closed halfspace left of the oriented line with equation 2x 4y 2 including the line N3 is the complement of N2 and therefore it must hold that N2 N3 N1 Additionally one can construct Nef polyhedra from iterator ranges that hold simple polygonal chains In the example N4 is the triangle spanned by the vertices 1 1 2 15 Note that the construction from a simple polygonal chain has several cases and preconditions that are described in the reference manual page of Nef polyhedron 2 T The operator in the last assertion is a subset or equal comparison of two polyhedra Nef polyhedra have input and output operators that allows one to output them via streams and read them from streams Graphical output is currently possible to a CGAL Window stream The output operation is defined in CGAL IO Nef polyhedron 2 Window stream h For an elaborate example see the demo programs in the directory demo Nef 2 11 3 Exploration By recursively composing binary and unary operations one can end with a very complex rectilinear structure To explore that structure there is a data type Nef polyhedron 2 T Explorer that allows read only exploration of the rectilinear structure To understand its usability we need more knowledge about the representation of Nef polyhedra The rectilinear structure underlying a Nef polyhedron is stored in a selective plane map Plane map here means a straightline embedded bidirected graph with face objects such that each point in the plane can be uniquely assigned to an object vertex edge face of the planar subdivision defined by the graph Selective means that each object vertex edge face has a Boolean value associated with it to indicate set inclusion or exclusion The plane map is defined by the interface data type Nef polyhedron 2 T Topological explorer Embedding the vertices by standard affine points does not suffice to model the unboundedness of halfspaces and ray like structures Therefore the planar subdivision is bounded symbolically by an axis parallel square box of infimaximal size centered at the origin of our coordinate system All structures extending to infinity are pruned by the box Lines and rays have symbolic endpoints on the box Faces are circularly closed Infimaximal here means that its geometric extend is always large enough but finite for our intuition Assume you approach the box with an affine point then this point is always inside the box The same holds for straight lines they always intersect the box There are more accurate notions of large enough but the previous propositions are enough at this point Due to the fact that the infimaximal box is included in the plane map the vertices and edges are partitioned with respect to this box Vertices inside the box are called standard vertices and they are embedded by affine points of type Explorer Point Vertices on the box are called non standard vertices and they get their embedding where a ray intersects the box their embedding is defined by an object of type Explorer Ray By their straightline embedding edges represent either segments rays lines or box segments depending on the character of their source and target vertices During exploration box objects can be tracked down by the interface of Nef polyhedron 2 T Explorer that is derived from Nef polyhedron 2 T Topological explorer and adds just the box exploration functionality to the interface of the latter In the following code fragment we iterate over all vertices of a Nef polhedron and check whether their embedding is an affine point or a point on the infimaximal frame typedef Nef polyhedron Explorer Explorer Explorer E N4 explorer Explorer Vertex const iterator v for v E vertices begin v E vertices end v if E is standard v Explorer Point p E point v affine embedding of v else non standard Explorer Ray r E ray v extended embedding of v Note that box edges only serve as boundary edges combinatorically to close the faces that extend to infinity geometrically Their status can be queried by the following operation typedef Nef polyhedron Explorer Explorer Explorer E N4 explorer Explorer Halfedge const iterator e for e E halfedges begin e E halfedges end e if E is frame edge e e is part of square box 11 4 Traits Classes Now finally we clarify what the template parameter of class Nef polyhedron 2 T actually models T carries the implementation of a so called extended geometric kernel Currently there are three kernel models CGAL Extended cartesian FT CGAL Extended homogeneous RT and CGAL Filtered extended homogeneous RT The latter is the most optimized one The former two are simpler versions corresponding to the simple planar affine kernels Actually it holds that type equality in pseudo code notation CGAL Nef polyhedron 2 CGAL Extended cartesian FT Point CGAL Cartesian FT Point 2 CGAL Nef polyhedron 2 CGAL Extended homogeneous RT Point CGAL Homogeneous RT Point 2 CGAL Nef polyhedron 2 CGAL Filtered extended homogeneous RT Point CGAL Homogeneous RT Point 2 Similar equations hold for the types Line and Direction in the local scope of Nef polyhedron 2 advanced For its notions and requirements see the desciption of the concept ExtendedKernelTraits 2 in the reference manual advanced 11 5 Implementation The underlying set operations are realized by an efficient and complete algorithm for the overlay of two plane maps The algorithm is efficient in the sense that its running time is bounded by the size of the inputs plus the size of the output times a logarithmic factor The algorithm is complete in the sense that it can handle all inputs and requires no general position assumption Next chapter Planar Nef Polyhedra Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Nef_2/Chapter_main.html", "title": "planar nef polyhedra", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Nef_2/main.tex' -->\n<html> <head>  \n<title>Planar Nef Polyhedra</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_11\"></a>\n  \n<h1>Chapter 11<BR>Planar Nef Polyhedra</h1>\n\n<A NAME=\"chap:nef_2\"></A>\n<EM>Michael Seel</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>11.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nWhen working with polygonal and polyhedral sets, the mathematical\nmodel determines the kind of point set that can be represented. Nef\npolyhedra are the most general rectilinear polyhedral model.\n<P>\n\nTopological simpler models that are contained in the domain of\nNef polyhedra are:\n<UL>\n<LI><I>convex polytopes</I> normally defined as the convex hull\n  of a nonempty finite set of points. Convex polytopes are \n  compact closed and manifold sets. \n<LI><I>elementary polyhedra</I> normally defined as the union\n  of a finite number of convex polytopes. \n<LI><I>polyhedral sets</I> nomally defined as the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>\n  of a finite number of closed halfspaces. Such sets are closed and\n  convex but need not to be compact. \n<LI><I>linear polyhedra</I> normally defined as the set of all\npoints belonging to the simplices of a <I>simplicial complex</I>. \n</UL>\n<P>\n\nA planar <I>Nef polyhedron</I> is any set that can be obtained from a\nfinite set of open halfspaces by set complement and set <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>\noperations. Due to the fact that all other binary set operations like\nunion, difference and symmetric difference can be reduced to\n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> and complement calculations, Nef polyhedra are also closed\nunder those operations. Apart from the set complement operation there\nare more topological unary set operations that are closed in the\ndomain of Nef polyhedra. Given a Nef polyhedron one can determine its\ninterior, its boundary, and its closure, and also composed operations\nlike regularization (defined to be the closure of the interior or a\npoint set).\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>Two Nef polyhedra in the plane. A closed halfspace on the \nleft and a complex polyhedron on the right. Note that the points \non the squared boundary are at infinity.<A NAME=\"nefexamples\"></A>\n\n<CENTER>\n<IMG BORDER=0 SRC=\"./halfplane.gif\" ALIGN=center\nALT=\"a halfplane\">\n<IMG BORDER=0 SRC=\"./complex.gif\" ALIGN=center\nALT=\"a complex polyhedron\">\n</CENTER>\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>11.2&nbsp;&nbsp;&nbsp;Construction and Composition</h2>\n<P>\n\nFollowing the above definition, the data type\n<I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;</I> allows construction of elementary Nef\npolyhedra and the binary and unary composition by the mentioned set\noperations.\n<P>\n\nIn the following examples skip the typedefs at the beginning at first\nand take the types <I>Point</I> and <I>Line</I> to be models of the\nstandard two-dimensional CGAL kernel (<I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt;K&gt;</I>\nand <I><A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_49\">CGAL::Line_2</A>&lt;K&gt;</I>). Their user interface is thus defined in\nthe corresponding reference pages.\n<P>\n\n<pre class=\"ExampleCode\">// file : examples/Nef_2/construction.C\n\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Nef_2_ref/Class_Filtered_extended_homogeneous.html#Cross_link_anchor_725\">Filtered_extended_homogeneous</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A> RT;\ntypedef <A HREF=\"../Nef_2_ref/Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt; Extended_kernel;\ntypedef <A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt;Extended_kernel&gt; Nef_polyhedron;\ntypedef Nef_polyhedron::Point Point;\ntypedef Nef_polyhedron::Line  Line;\n\nint main() {\n\n  Nef_polyhedron N1(Nef_polyhedron::<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2#Enum_Content\">COMPLETE</A>);\n\n  Line l(2,4,2); // l : 2x + 4y + 2 = 0\n  Nef_polyhedron N2(l,Nef_polyhedron::<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A>);\n  Nef_polyhedron N3 = N2.complement();\n  CGAL_assertion(N1 == N2.join(N3));\n\n  Point p1(0,0), p2(10,10), p3(-20,15);\n  Point triangle[3] = { p1, p2, p3 };\n  Nef_polyhedron N4(triangle, triangle+3);\n  Nef_polyhedron N5 = N2.<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>(N4);\n  CGAL_assertion(N5 &lt;= N2 &amp;&amp; N5 &lt;= N4);\n\n  return 0;\n}\n\n\n</pre>\n<P>\n\nPlanar halfspaces (as used in the definition) are modelled by oriented\nlines. In the previous example <I>N1</I> is the Nef polyhedron\nrepresenting the full plane, <I>N2</I> is the closed halfspace left of\nthe oriented line with equation <MATH><I>2x + 4y + 2 = 0</I></MATH> including the line,\n<I>N3</I> is the complement of <I>N2</I> and therefore it must hold that\n<MATH><I>N2  <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> N3 = N1</I></MATH>.\n<P>\n\nAdditionally one can construct Nef polyhedra from iterator ranges that\nhold simple polygonal chains. In the example <I>N4</I> is the triangle\nspanned by the vertices <MATH><I>(0,0)</I></MATH>, <MATH><I>(10,10)</I></MATH>, <MATH><I>(-20,15)</I></MATH>.  Note that the\nconstruction from a simple polygonal chain has several cases and\npreconditions that are described in the reference manual page of\n<I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;</I>. The <I>operator&lt;=</I> in the last assertion\nis a subset-or-equal comparison of two polyhedra.\n<P>\n\nNef polyhedra have input and output operators that allows one to\noutput them via streams and read them from streams. Graphical output\nis currently possible to a <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I>. The output\noperation is defined in\n<I>CGAL/IO/Nef_polyhedron_2_Window_stream.h</I>. For an elaborate\nexample see the demo programs in the directory <I>demo/Nef_2</I>.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>11.3&nbsp;&nbsp;&nbsp;Exploration</h2>\n<P>\n\nBy recursively composing binary and unary operations one can end with\na very complex rectilinear structure. To explore that structure there\nis a data type <I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A></I> that allows\nread-only exploration of the rectilinear structure. To understand its\nusability we need more knowledge about the representation of Nef\npolyhedra.\n<P>\n\nThe rectilinear structure underlying a Nef polyhedron is stored in a\nselective plane map. Plane map here means a straightline embedded\nbidirected graph with face objects such that each point in the plane\ncan be uniquely assigned to an object (vertex, edge, face) of the\nplanar subdivision defined by the graph. Selective means that each\nobject (vertex, edge, face) has a Boolean value associated with it to\nindicate set inclusion or exclusion.\n<P>\n\nThe plane map is defined by the interface data type\n<I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::<A HREF=\"../Nef_2_ref/Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A></I>. Embedding the vertices by\nstandard affine points does not suffice to model the unboundedness of\nhalfspaces and ray-like structures. Therefore the planar subdivision\nis bounded symbolically by an axis-<A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A> <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> box of infimaximal\nsize centered at the origin of our coordinate system. All structures\nextending to infinity are pruned by the box. Lines and rays have\nsymbolic endpoints on the box. Faces are circularly closed.\nInfimaximal here means that its geometric extend is always large\nenough (but finite for our intuition). Assume you approach the box\nwith an affine point, then this point is always inside the box. The\nsame holds for straight lines; they always intersect the box. There\nare more accurate notions of ``large enough'', but the previous\npropositions are enough at this point. Due to the fact that the\ninfimaximal box is included in the plane map, the vertices and edges\nare partitioned with respect to this box.\n<P>\n\nVertices inside the box are called standard vertices and they are\nembedded by affine points of type <I><A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Point</I>. Vertices on\nthe box are called non-standard vertices and they get their embedding\nwhere a ray intersects the box (their embedding is defined by an\nobject of type <I><A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Ray</I>). By their straightline embedding,\nedges represent either segments, rays, lines, or box segments\ndepending on the character of their source and target vertices.\n<P>\n\nDuring exploration, box objects can be tracked down by the interface\nof <I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A></I> that is derived from\n<I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::<A HREF=\"../Nef_2_ref/Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A></I> and adds just the box\nexploration functionality to the interface of the latter. In the\nfollowing code fragment we iterate over all vertices of a Nef\npolhedron and check whether their embedding is an affine point or a\npoint on the infimaximal frame.\n<pre class=\"ExampleCode\">\ntypedef Nef_polyhedron::<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A> <A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>;\n<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A> E = N4.explorer();\n<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Vertex_const_iterator v;\nfor (v = E.vertices_begin(); v != E.vertices_end(); ++v)\n  if ( E.is_standard(v) ) \n    <A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Point p = E.point(v) // affine embedding of v\n  else /* non-standard */ \n    <A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Ray r = E.ray(v) // extended embedding of v\n</pre>\n<P>\n\nNote that box edges only serve as boundary edges (combinatorically) to\nclose the faces that extend to infinity (geometrically). Their status\ncan be queried by the following operation:\n<pre class=\"ExampleCode\">\ntypedef Nef_polyhedron::<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A> <A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>;\n<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A> E = N4.explorer();\n<A HREF=\"../Nef_2_ref/Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>::Halfedge_const_iterator e;\nfor (e = E.halfedges_begin(); e != E.halfedges_end(); ++e)\n  if ( E.is_frame_edge(e) ) // e is part of <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> box.\n</pre>\n<P>\n\n<a name=\"Section_4\"></a>\n        \n<h2>11.4&nbsp;&nbsp;&nbsp;Traits Classes</h2>\n<P>\n\nNow finally we clarify what the template parameter of class\n<I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;</I> actually models. <I>T</I> carries the\nimplementation of a so-called extended geometric kernel.\n<P>\n\nCurrently there are three kernel models:\n<I><A HREF=\"../Nef_2_ref/Class_Extended_cartesian.html#Cross_link_anchor_720\">CGAL::Extended_cartesian</A>&lt;FT&gt;</I>,\n<I><A HREF=\"../Nef_2_ref/Class_Extended_homogeneous.html#Cross_link_anchor_722\">CGAL::Extended_homogeneous</A>&lt;RT&gt;</I>, and\n<I><A HREF=\"../Nef_2_ref/Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt;</I>. The latter is the most\noptimized one. The former two are simpler versions corresponding to\nthe simple planar affine kernels.  Actually, it holds that (type\nequality in pseudo-code notation):\n<pre class=\"ExampleCode\">\n<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"../Nef_2_ref/Class_Extended_cartesian.html#Cross_link_anchor_720\">CGAL::Extended_cartesian</A>&lt;FT&gt; &gt;::Point \n  == <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;FT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n\n<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"../Nef_2_ref/Class_Extended_homogeneous.html#Cross_link_anchor_722\">CGAL::Extended_homogeneous</A>&lt;RT&gt; &gt;::Point\n   == <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n\n<A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"../Nef_2_ref/Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt; &gt;::Point\n   == <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n</pre>\nSimilar equations hold for the types <I>Line</I> and <I>Direction</I> in\nthe local scope of <I><A HREF=\"../Nef_2_ref/Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;...&gt;</I>.\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nFor its notions and requirements see the desciption of the concept\n<I><A HREF=\"../Nef_2_ref/Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A></I> in the reference manual.\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<a name=\"Section_5\"></a>\n        \n<h2>11.5&nbsp;&nbsp;&nbsp;Implementation</h2>\n<P>\n\nThe underlying set operations are realized by an efficient and\ncomplete algorithm for the overlay of two plane maps. The algorithm is\nefficient in the sense that its running time is bounded by the size of\nthe inputs plus the size of the output times a logarithmic factor. The\nalgorithm is complete in the sense that it can handle all inputs and\nrequires no general position assumption.\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Nef_2_ref/Chapter_intro.html\">Planar Nef Polyhedra</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_11!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38349.0}