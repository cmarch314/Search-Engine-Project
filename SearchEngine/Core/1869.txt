{"text": "ICS 31 DAVID G KAY UC IRVINE WINTER 2 15 Lab Assignment 1 This assignment is due at the end of lab on Friday January 9 Preparation Do this part individually before coming to lab 1 Do everything on the course refrence sheet the syllabus under the heading What to do this week to get started in ICS 31 This includes filling out the questionnaire at eee uci edu survey ics31 w15 q and registering yourself at checkmate ics uci edu and piazza com 2 Read through the Lab Work part of this assignment before you come to lab to get an idea of what you ll be doing with your partner 3 If you haven t already read the guidelines for pair programming They describe how you will be doing all your work in the lab Pair programming is not as simple as just working together there are specific roles and specific things each person needs to do 4 We encourage you to talk with each other and help each other understand how to do the assignments There are some limits though in particular remember that knowing how to do it when the quizzes and exams come for example is much more important than just putting down the answer If you haven t already read the guidelines for collaboration and independent work You may also wish to read some general advice about how to approach college work not all of the practices that served you well in secondary school will work well here 5 Read Chapter 1 of the Zyante e text or Chapter 1 of the Perkovic textbook they provide some background including some issues we talked about in class These preparation sections of each assignment will include the reading in the texts and some exercises for you to try out as you read This is all wrapped together in the Zyante e text you ll just do the activities as they show up But you should do the same thing if you re using the Perkovic book People learn best when they apply what they read as they go so it s best to read the book with a computer at hand so you can type things in and try them out There s always a big gap between thinking you understand something you read and actually being able to apply it We expect these exercises to go quickly but if you find yourself spending more than a couple of minutes on an exercise without making any progress you should ask about it on Piazza probably rather than continuing to spin your wheels unproductively Note that this also means you should get started early so that you ll have the time to get any questions answered Perkovic reading notes In Chapter 1 on page 3 the author characterizes different career paths in computing But he mis characterizes work in Human Computer Interaction HCI when he says Artistic computer professionals design the interfaces that clients use to interact with an application Designing interfaces is not primarily an artistic activity and many people who work in HCI have no particular artistic interest or ability Instead HCI designers are experimenters observing how actual users perform when using a design and refining the design based on what they observe UCI is a world leader in HCI research ICS offers half a dozen undergrad courses in various aspects of HCI 6 Read sections 2 1 2 7 of the Zyante e text or sections 2 1 and 2 2 of the Perkovic text You don t have to do all of this by Wednesday but we ll be talking about some of this material in class on Thursday As you re reading in Zyante or Perkovic it s important that you apply what you re reading it s impossible to learn this material without actually working through it Zyante provides interactive parts animations Try sections question sets Perkovic provides Practice Problem sections You should try to do nearly all of these in whichever text you re using Don t get stalled for a long time on any single question but if you have trouble ask someone Especially early in the course it may seem tedious and slow because you re just learning your way But the effort here will pay off in a greater facility later or to put it negatively failing to do this now will result in disappointing performance later We don t require you to turn in your answers to these practice problems most of the solutions are shown in Zyante and appear at the end of the chapter in Perkovic But don t just read the problem turn to the solution and say Yeah that looks right Write down your answer first force yourself to work it through That s how you learn 7 If you d like to install Python on your personal machine follow these instructions If you re in a Laptop Only section sections 7 8 you ll need to do this Your TA or lab tutor may be able to help in lab Lab Work Do this part with your partner in lab a Choose a partner for this assignment on the partner selection web page following the link in the message you received Remember that you ll choose a different partner for each lab assignment so you ll work with this partner only on this assignment Your partner must be enrolled in the same lab section you re enrolled in Make sure you know your partner s name first and last and contact information Email or cellphone or whatever in case one of you can t make it to lab All your computer based work on this and every lab assignment must follow the pair programming guidelines b It s especially important that you be able to receive electronic mail sent to your UCInet ID you uci edu You may redirect this mail to another account of your choosing but don t let that mail go unread With your partner test this out by sending each other Email at your UCI addresses There s nothing to turn in for this part c Locate and launch the IDLE software IDLE starts up with a Python Shell window where we ll see the results of most of our programs IDLE also lets you open up a program window do this now by choosing New Window from the File menu Give that window a name right away and save it by choosing Save As from the file menu and specifying the name lab1 py You can save it anywhere on your machine just don t forget where you put it and remember to recycle discard it after you re done so that the next student on your lab machine doesn t use your work by mistake In your lab1 py file you can type print statements that contain expressions when you run the code in the file choose Run Module from the Run menu or press the F5 key the results are printed in the Python Shell window Try it Type print Hello in your lab1 py file and then run it You should see Hello in the shell window It is also possible to type expressions without the print directly into the shell window after IDLE s prompt of three greater than signs This behaves a little differently though and most beginners find it confusing so for now we re going to type all our Python code in a code window and run it when we re ready Experiment with IDLE to get familiar with it following the suggestions below One person drives types the other navigates observes questions suggests if you don t know what this is about go back and read the pair programming guidelines The main point of this assignment is to get you familiar with the mechanics of IDLE Python and pair programming Try printing the values of some expressions like print 123 456 and print 2 5 is the operator for exponents and print 5 4 3 2 1 Type in some definitions like number of students 356 and number of staff 16 and then try printing expressions like number of students number of staff That is type the Python statement print number of students number of staff At this point we ll just say print the expresion X and you ll know to type the Python statement print X in your lab1 py file and then run it Probably you ve already done this a few times Type some things that Python can t evaluate and see what messages Python produces Error messages are not bad they re an inevitable part of programming Don t think of them as the computer yelling at you it s just trying to tell you why it couldn t process something The language of error messages can be cryptic but you will learn how to pick through them for useful clues to what Python thinks the problem is Save a copy of the Python Shell window that shows your work for this part using Save a Copy As from the File menu A good name for the file would be lab1c txt stick with a naming pattern like this for the rest of the quarter It s fine if your interactions show false starts and mistakes it s also fine if you just produce a short clean copy Edit the file to make sure it includes your name and your partner s at the top when you re done with the assignment this is one of the files you ll submit via Checkmate You will also submit your lab1 py file containing whatever Python code you wrote for this part Don t know what Checkmate is Look at the What to do this week section of the course syllabus d Switch roles now if you haven t already so the navigator can drive and vice versa Don t worry if the new driver is less familiar with Python or IDLE than the first driver Both will get more experienced rapidly As we mentioned briefly above the Python shell window can be useful for testing out small things but it doesn t save the code we type so as our code gets longer and more involved we need the technique we ve already started using We create a new window into which we can type Python code to save as a Python py file That s the way we ll be doing our work this quarter The factorial function written in mathematical notation with an exclamation point so n factorial would be n is used in calculating how many ways there are to arrange things like the number of different ways to arrange five students in a row The value of n is n n 1 n 2 1 so 5 5 4 3 2 1 12 Create a new window from the File menu and save it as lab1d py On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information like this Paula Programmer 11223344 and Andrew Anteater 44332211 ICS 31 Lab sec 7 Lab Asst 1d Type the following function definition into your new window Actually do the typing so you can get used to the way it works don t just copy and paste We ll go over the details of this code in class some time soon for now this is just a typing exercise and you shouldn t try too hard to figure out how it works If you re not used to typing programs be careful to type accurately In particular the spacing at the beginnings of the lines matters in Python Watch what happens every time you type a right parenthesis and watch what happens when you hit Return after typing a colon def factorial n int int Compute n n factorial if n When you re done run the code select Run Module from the Run menu or type the F5 key Don t be surprised to get error messages you ve probably just mis typed something and programming languages are pickier than the pickiest human proofreader Just use the messages to help you identify each typo until you get an error free result Now try changing the print statement s to print expressions like factorial 12 factorial 5 1 and factorial factorial 5 Re run the code to see what the results are Python can handle long numbers effortlessly but any computer is finite what do you think might happen if you evaluate factorial factorial 5 You can try this but you ll have to stop the evaluation by selecting Restart Shell from the Shell menu Make sure both partners names are at the top of the Python file you typed save that file and submit it via Checkmate But before you submit it run the file one last time It should produce correct results If it doesn t correct the mistakes before you submit it Whenever you submit a Python file in ICS 31 the file should produce correct results when you or we run it you won t receive credit if it produces an error message e In IDLE create a new file and save it as lab1e py When you have your personal ICS lab account save the file on your personal H drive or on a removable thumb drive If you save it on the common C drive someone else might pick it up later by mistake we hope but it would still lead to a lot of awkward questions about academic honesty Keeping personal information secure is a real world skill people who work with health and other personal information can get in huge trouble if they leave personal information open to unauthorized access On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information like this Paula Programmer 11223344 and Andrew Anteater 44332211 ICS 31 Lab sec 7 Lab Asst 1e Now put in a couple of print statements that print some expressions any expressions you make them up and run the code in the file Once you have this working continue with the rest of this assignment Type your solutions to the rest of the lab into your lab1e py file which you will submit via Checkmate It s a good idea if each partner keeps a copy of the lab work at the end of each session just in case someone can t make it to the next lab f Python exercises If you re moving along quickly it s possible that you ll get to some problems below that address topics we haven t gotten to yet in class Feel free to try them it s also fine to wait until class catches up 1 Write Python expressions that correspond to each of the following statements The sum of the five even integers from 2 to 1 The average of this group of test scores 75 83 5 61 43 2 to the 1 th power A moving anteater has a mass of 5 kg and a velocity speed of 15 meters per second Compute its kinetic energy using this formula 1 2 times the mass times the velocity squared 2 We re designing a game where players can create castle defenses against invaders Each side of the castle consists of a sequence of wall parts and cannons We represent a six segment side with no cannons as wwwwww a five segment side with one cannon in the middle would be wwcww Define these two variables wall w cannon c Using the variables wall and cannon the string operators and and parentheses write string expressions that evaluate to wc wcw wwwcwww wccwccwccwcc wwwcwwwcwwwcwwwcw wwwwcwwwwcwwwwcwwwwcwwww Try making your string expressions as compact as you can 3 Scores on a quiz range from to 5 In the Python Shell evaluate the following assignment statement which represents the quiz scores of all the students in a class test scores 432522 523455 23 Using the variable test scores and the indexing operators write four separate expressions whose values are each of the following quiz score for the 1st student the 5th student the 1 th student and the 16th student Remember zero based indexing 4 Evaluate the following assignment statement s anteater For each of the following write a boolean expression that represents the English statement The first character of string s is a The last character of string s is r The fourth character of string s is x The first three characters of string s match the string zot 5 Write Python assignment statements that correspond to each of the following Assign 3 14159 to variable pi Assign the values Toyota Camry and 2 14 to the variables make model and year Assign a list containing strings Computer Science Informatics and Computer Game Science to the variable ICS majors Assign the variable a to be the average of the odd numbers from 3 to 9 6 Write boolean expressions corresponding to each of the following statements 2 plus 35 is greater than 2 to the power of 4 The string hello is not equivalent to the string goodbye The remainder when 1 is divided by 3 is less or equal to 1 The list apple orange banana mango contains 5 elements The number 63 is an even number 7 Execute the following assignment statement s abcdefghijklmnopqrstuvwxyz Using only string concatenation and the indexing operator on the string s write Python expressions that result in the following dog tv ics uci g Done and it s not Friday yet Good for you But you should know that the rest of the class will catch up to you and that later assignments will take everyone longer And ask yourself Are you sure that both you and your partner understand everything in this assignment Could each of you re solve each problem easily Does each of you understand every technical term used Take this opportunity to make sure each of you has a solid foundation in the basics If you like try some of the problems at Codingbat com h Remember that each partner must complete a partner evaluation form and submit it individually Do this by connecting to the partner app you ll need to log in with your UCInet ID The partner evaluations will typically be available on the day the lab is due Make sure you know your partner s name first and last so you can evaluate the right person Please complete your evaluation by the end of the day on Friday or Saturday morning at the latest It only takes a couple of minutes and not doing it hurts your participation score What to turn in It would be an excellent idea to go back and re read the assignment carefully now to make sure you ve completed all the steps specified Then one member of each pair not both must submit via Checkmate the files you created for parts c d e and f above make sure both partners names appear at the top of each file Also remember that each student must complete a partner evaluation form these evaluations contribute to your class participation score Get in the habit of doing this every week on Friday after you ve submitted your assignment the partner evaluations close on Saturday Written by David G Kay in Fall 2 12 for ICS 31 based on materials from ICS H21 H22 and Informatics 41 modified by David G Kay Winter and Fall 2 13 Winter 2 14 Fall 2 14 Winter 2 15 Python exercises by David Lepe Winter 2 14 David G Kay kay uci edu Sunday January 11 2 15 12 23 PM", "_id": "http://www.ics.uci.edu/~kay/courses/31/hw/lab1.html", "title": "ics 31 lab 1", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\" />\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Tuesday, November 22, 2005 9:30 AM\" />\n<TITLE>ICS 31 Lab 1</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"33CB8976\" />\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"Homework Assignments for Informatics 41, the Informatics Core Course, using How to Design Programs by Felleisen, Findler, Flatt, and Krishnamurthi and Fluency by Snyder, at UC Irvine.\" />\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2001-2004 by David G. Kay.  All rights reserved.\" />\n<link href=\"http://www.ics.uci.edu/~kay/courses/31/mainstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<p><FONT size=\"2\"  >ICS 31 &bull; DAVID G. KAY &bull; UC IRVINE &bull; WINTER 2015</FONT></p>\n<p><FONT   SIZE=6><B>Lab Assignment 1 </B></FONT>\n</p>\n<P><font  >This assignment is due at the end of lab on Friday, January 9.</font></P>\n<P><font  ><strong>Preparation</strong></font> (Do this part individually, before coming to lab)</P>\n<P><font  ><strong>(1)</strong> Do everything on the course refrence sheet (the syllabus) under the heading &quot;What to do this week to get started in ICS 31.&quot; This includes filling out the questionnaire at <a href=\"http://eee.uci.edu/survey/ics31.w15.q\"><code>eee.uci.edu/survey/ics31.w15.q</code></a> and registering yourself at <a href=\"http://checkmate.ics.uci.edu/\"><code>checkmate.ics.uci.edu</code></a> and <a href=\"https://piazza.com/uci/winter2015/ics31\"><code>piazza.com</code></a>. </font></P>\n<P><strong>(2)</strong> Read through the Lab Work part of this assignment before you come to lab, to get an idea of what you'll be doing with your partner.</P>\n<P><strong>(3)</strong> If you haven't already, read the <a href=\"http://www.ics.uci.edu/~kay/courses/31/pair.html\">guidelines for pair programming</a>. They describe how you will be doing all your work in the lab. Pair programming is not as simple as just working together; there are specific roles and specific things each person needs to do.</P>\n<P><strong>(4) </strong>We encourage you to talk with each other and help each other understand how to do the assignments. There are some limits, though; in particular, remember that knowing <em>how</em> to do it (when the quizzes and exams come, for example) is much more important than just putting down the answer. If you haven't already, read the <a href=\"http://www.ics.uci.edu/~kay/courses/31/collab.html\">guidelines for collaboration and independent work</a>. You may also wish to read some general advice about <a href=\"http://www.ics.uci.edu/~kay/college.html\">how to approach college work</a>; not all of the practices that served you well in secondary school will work well here.\n</P>\n<P><strong>(5)</strong> Read Chapter 1 of the Zyante e-text or Chapter 1 of the Perkovic textbook; they provide some background, including some issues we talked about in class.</P>\n<P>These &quot;preparation&quot; sections of each assignment will include the reading in the texts and some exercises for you to try out as you read. This is all wrapped together in the Zyante e-text; you'll just do the activities as they show up. But you should do the same thing if you're using the Perkovic book: People learn best when they apply what they read as they go, so it's best to read the book with a computer at hand so you can type things in and try them out. There's always a big gap between thinking you understand something you read and actually being able to apply it. We expect these exercises to go quickly, but if you find yourself spending more than a couple of minutes on an exercise without making any progress, you should ask about it (on Piazza, probably) rather than continuing to spin your wheels unproductively. Note that this also means you should get started early, so that you'll have the time to get any questions answered.</P>\n<P>[Perkovic reading notes: In Chapter 1 on page 3, the author characterizes different career paths in computing. But he mis-characterizes work in Human-Computer Interaction (HCI) when he says, &quot;Artistic computer professionals design the interfaces that clients use to interact with an application.&quot; Designing interfaces is not primarily an artistic activity and many people who work in HCI have no particular artistic interest or ability. Instead, HCI designers are experimenters, observing how actual users perform when using a design and refining the design based on what they observe. UCI is a world leader in HCI research; ICS offers half a dozen undergrad courses in various aspects of HCI.]</P>\n<P><strong>(6)</strong> Read sections 2.1\u20132.7 of the Zyante e-text or sections 2.1 and 2.2 of the Perkovic text. You don't have to do all of this by Wednesday, but we'll be talking about some of this material in class on Thursday.</P>\n<P>As you're reading (in Zyante or Perkovic), it's important that you apply what you're reading; it's impossible to learn this material without actually working through it. Zyante provides interactive parts (animations, &quot;Try&quot; sections, question sets); Perkovic provides &quot;Practice Problem&quot; sections. You should try to do nearly all of these in whichever text you're using. Don't get stalled for a long time on any single question, but if you have trouble, ask someone.  Especially early in the course, it may seem tedious and slow because you're just learning your way. But the effort here will pay off in a greater facility later (or, to put it negatively, failing to do this now will result in disappointing performance later).</P>\n<P>We don't require you to turn in your answers to these practice problems; most of the solutions are shown in Zyante and appear at the end of the chapter in Perkovic. But don't just read the problem, turn to the solution, and say, &quot;Yeah, that looks right.&quot; Write down your answer first; force yourself to work it through. That's how you learn.</P>\n<P><strong>(7)</strong> If you'd like to install Python on your personal machine, follow <a href=\"http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Assignment0/\">these instructions</a>. (If you're in a &quot;Laptop Only&quot; section, sections 7\u20138, you'll need to do this. Your TA or lab tutor may be able to help in lab.)</P>\n<P>&nbsp;</P>\n<p><font  ><strong>Lab Work</strong></font> (Do this part with your partner in lab)</p>\n<p><strong>(a)</strong> Choose a partner for this assignment on the partner selection web page, following the link in the message you received. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only on this assignment. Your partner must be enrolled in the same lab section you're enrolled in. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. \n All your computer-based work on this (and every) lab assignment must follow the <a href=\"http://www.ics.uci.edu/~kay/courses/31/pair.html\">pair programming guidelines</a>.\n<p><strong>(b)</strong> It's especially important that you be able to receive electronic mail sent to your UCInet ID (<code>you@uci.edu</code>). You may redirect this mail to another account of your choosing, but don't let that mail go unread. <!--Redirecting is a good idea (the course reference sheet says how), since your UCI mailbox is small and when it fills up, messages sent to you get lost. -->\n<p>With your partner, test this out by sending each other Email at your UCI addresses. There's nothing to turn in for this part.\n<p><strong>(c)</strong> Locate and launch the IDLE software.\n  \nIDLE starts up with a &quot;Python Shell&quot; window where we'll see the results of most of our programs. IDLE also lets you open up a program window; do this now, by choosing &quot;New Window&quot; from the File menu. Give that window a name right away and save it, by choosing &quot;Save As&quot; from the file menu and specifying the name <code>lab1.py</code> . (You can save it anywhere on your machine; just don't forget where you put it and remember to recycle/discard it after you're done so that the next student on your lab machine doesn't use your work by mistake.)\n<p>In your \n  <code>lab1.py</code> file, you can type <code>print</code> statements that contain expressions; when you run the  code in the file (choose &quot;Run Module&quot; from the Run menu or press the F5 key), the results are printed in the Python Shell window. Try it: Type <code>print('Hello')</code> in your <code>lab1.py</code> file and then run it. You should se<code>e Hello </code>\nin the shell window.\n<p>[It is also possible to type expressions, without the <code>print</code>, directly into the shell window after IDLE's &quot;prompt&quot; of three greater-than signs (&quot;<code>&gt;&gt;&gt;</code>\"). This behaves a little differently, though, and most beginners find it confusing, so for now we're going to type all our Python code in a code window and run it when we're ready.]\n<p>Experiment with IDLE to get familiar with it, following the suggestions below. One person \"drives\" (types); the other \"navigates\" (observes, questions, suggests); if you don't know what this is about, go back and read the <a href=\"http://www.ics.uci.edu/~kay/courses/31/pair.html\">pair programming guidelines</a>. The main point of this assignment is to get you familiar with the mechanics of IDLE, Python, and pair programming.\n<p>Try printing the values of some expressions, like <code>print(123 + 456</code>) and <code>print(2 ** 5)</code> (<code>**</code> is the operator for exponents) and <code>print(5 * 4 * 3 * 2 * 1)</code>. \n<p>Type in some definitions, like <code>number_of_students = 356</code> and <code>number_of_staff = 16</code> and then try printing expressions like <code>number_of_students / number_of_staff</code>.\n\n\n(That is, type the Python statement <code>print(number_of_students / number_of_staff)</code>. At this point we'll just say &quot;print the expresion X&quot; and you'll know to type the Python statement <code>print(</code>X<code>)</code> in your <code>lab1.py</code> file and then run it.)\n<p>Probably you've already done this a few times: Type some things that Python can't evaluate and see what messages Python produces. (Error messages are not bad; they're an inevitable part of programming. Don't think of them as the computer yelling at you; it's just trying to tell you why it couldn't process something.  The language of error messages can be cryptic, but you will learn how to pick through them for useful clues to what Python thinks the problem is.) \n<p>Save a copy of the Python Shell window that shows your work for this part (using Save a Copy As from the File menu). A good name for the file would be <code>lab1c.txt</code>; stick with a naming pattern like this for the rest of the quarter. It's fine if your interactions show false starts and mistakes; it's also fine if you just produce a short, clean copy. Edit the file to make sure it includes your name and your partner's at the top; when you're done with the assignment, this is one of the files you'll submit via Checkmate. You will also submit your <code>lab1.py</code> file containing whatever Python code you wrote for this part. (Don't know what Checkmate is? Look at the \"What to do this week\" section of the course syllabus).\n<p>\n<strong>(d)</strong> Switch roles now, if you haven't already, so the navigator can drive and vice versa. Don't worry if the new driver is less familiar with Python or IDLE than the first driver. Both will get more experienced rapidly.\n<p>\nAs we mentioned briefly above, the Python shell window can be useful for testing out small things, but it doesn't save the code we type, so as our code gets longer and more involved, we need the technique we've already started using: We create a new window into which we can type Python code to save as a Python (<code>.py</code>) file. That's the way we'll be doing our work this quarter.\n<p>The factorial function (written in mathematical notation with an exclamation point, so \"n factorial\" would be n!) is used in calculating how many ways there are to arrange things (like the number of different ways to arrange five students in a row). The value of n! is n \u00b7 (n-1) \u00b7 (n-2) \u00b7 ... \u00b7 1, so 5! = 5 \u00b7 4 \u00b7 3 \u00b7 2 \u00b7 1 = 120.\n<p>Create a new window (from the File menu) and save it as  <code>lab1d.py</code>. On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information, like this: \n<pre>\n #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Asst 1d.\n</pre>\n<p>Type the following function definition into your new window. Actually do the typing so you can get used to the way it works; don't just copy and paste. (We'll go over the details of this code in class some time soon; for now, this is just a typing exercise and you shouldn't try too hard to figure out how it works. If you're not used to typing programs, be careful to type accurately. In particular, the spacing at the beginnings of the lines matters in Python.) \n  Watch what happens every time you type a right-parenthesis, and watch what happens when you hit Return after typing a colon.\n<pre>\ndef factorial (n: int) -> int:\n    ''' Compute n! (n factorial) '''\n    if n <= 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\nassert factorial(0) == 1 \nassert factorial(5) == 120 \n\nprint(\"10! is\", factorial(10))\nprint(\"100! is\", factorial(100))\n</pre>\n<p>\n  When you're done, run the code (select Run Module from the Run menu or type the F5 key). Don't be surprised to get error messages; you've probably just mis-typed something, and programming languages are pickier than the pickiest human proofreader. Just use the messages to help you identify each typo until you get an error-free result.\n<p>Now try changing the print statement(s) to print expressions like<code> factorial(120)</code>, <code>factorial(50 * 10)</code>, and <code>factorial(factorial(5))</code>. Re-run the code to see what the results are.</p>\n<p>\nPython can handle long numbers effortlessly, but any computer is finite; what do you think might happen if you evaluate <code>factorial(factorial(50))</code>? You can try this, but you'll have to stop the evaluation by selecting Restart Shell from the Shell menu.\n<p>Make sure both partners' names are at the top of the Python file you typed, save that file, and submit it via Checkmate.\n\nBut before you submit it, run the file one last time. It should produce correct results. If it doesn't, correct the mistakes before you submit it. Whenever you submit a Python file in ICS 31, the file should produce correct results when you (or we) run it; you won't receive credit if it produces an error message.\n<p><strong>(e)</strong> \n<!-- In the Python Shell in IDLE, type any expression, like <code>17 * 5</code>, and hit Return. The shell evaluates it and displays its value. Now type <code>print(17 * 5)</code> and evaluate it. You get the same value. (The book will get to Python's print statement a little later, but we're going to find it useful now.) </p>\n<p>But try it with a string expression: Evaluate <code>'ics31'[2]</code>, then evaluate <code>print('ics31'[2])</code>. You get the same value, but without the quotation marks. When we're working on small pieces of our code directly in the Python interpreter (the Python Shell window), it doesn't matter much to us whether we see the quotes or not. But in a real program, we don't usually want quotes around our strings. We don't know quite enough yet to write complete programs, but as you work on the exercises in this assignment, you may want to type them into a Python file to edit and save them. If you type Python code into a Python file and run it (from the Run menu), you need to print expressions to see their values. </p>\n-->In IDLE, create a new file and save it as <code>lab1e.py</code>. When you have your personal ICS lab account, save the file on your personal H: drive (or on a removable thumb drive). If you save it on the common C: drive, someone else might pick it up later (by mistake, we hope, but it would still lead to a lot of awkward questions about academic honesty). Keeping personal information secure is a real-world skill; people who work with health and other personal information can get in huge trouble if they leave personal information open to unauthorized access.\n<p>On the first line of the file type a pound sign followed by the names and IDs of both partners and some other identifying information, like this: \n<pre>\n #  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Asst 1e.\n</pre>\n<p>Now put in a couple of print statements that print some expressions\u2014any expressions, you make them up\u2014and run the code in the file. Once you have this working, continue with the rest of this assignment. Type your solutions to the rest of the lab into your  <code>lab1e.py</code> file, which you will submit via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)</p>\n\n<p><strong>(f)</strong> \n<!-- Exercise 2.12 \u2014 Three problems\nBroad topic: Writing expressions from English\nSpecific topic: Numeric expressions involving addition, average, exponents, mod, and division\nProblem domain: None; just mechanical\n\nReplacement--> Python exercises. [If you're moving along quickly, it's possible that you'll get to some problems below that address topics we haven't gotten to yet in class. Feel free to try them; it's also fine to wait until class catches up.]<p>\n<b>(1)</b> Write Python expressions that correspond to each of the following statements:</p>\n<ul>\n<li>\nThe sum of the five even integers from 2 to 10.\n</li><li>\nThe average of this group of test scores: 75%, 83.5%, 61%, 43%\n</li><li>\n2 to the 10th power\n</li><li>\nA moving anteater has a mass of 50 kg and a velocity (speed) of 15 meters per second.\nCompute its kinetic energy using this formula:  1/2 times the mass times the velocity squared.\n</li></ul>\n<!--\nSolutions\n2 + 4 + 6 + 8 + 10\n(75 + 83.5 + 61 + 43) / 4\n2 ** 10\n.5 * 50 * (15 ** 2)\n-->\n<!--\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.13 \u2014 Two problems\nBroad topic: Writing expressions from English\nSpecific topic: String concatenation\nProblem domain: None; just mechanical\n\nReplacement-->\n<b>(2)</b> We're designing a game where players can create castle defenses against invaders.\nEach side of the castle consists of a sequence of wall parts and cannons:  We\nrepresent a six-segment side with no cannons as <code>'wwwwww'</code>; a five-segment\nside with one cannon in the middle would be <code>'wwcww'</code>.</p>\n<p>Define these two variables:</p>\n<pre><code>wall = 'w'\ncannon = 'c'</code></pre>\n<p>Using the variables <code>wall</code> and <code>cannon</code>, the string operators <code>+</code> and <code>*</code>, and parentheses, write string expressions that evaluate to:</p>\n<ul>\n<li><code> \u2018wc\u2019 </code></li>\n<li><code> \u2018wcw\u2019 </code></li>\n<li><code> \u2018wwwcwww\u2019 </code></li>\n<li><code> \u2018wccwccwccwcc\u2019 </code></li>\n<li><code> \u2018wwwcwwwcwwwcwwwcw\u2019 </code></li>\n<li><code> \u2018wwwwcwwwwcwwwwcwwwwcwwww\u2019 </code></li>\n</code></ul>\n\u0001Try making your string expressions as compact as you can.<!--\nSolutions\nwall + cannon\nwall + cannon + wall\n3 * wall + cannon + 3 * wall\n(wall + 2 * cannon) * 4\n4 * (3 * wall + cannon) + wall\nwall * 2 + (wall*2 + cannon + wall*2) * 4 + wall * 2 \n-->\n<!-- \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.14 \u2014 Three problems\nBroad topic: Writing expressions from English\nSpecific topic: Indexing operators on strings\nProblem domain: None; just mechanical\n\nReplacement -->\n<p><b>(3)</b>\nScores on a quiz range from 0 to 5.\nIn the Python Shell, evaluate the following assignment statement (which represents the quiz scores of all the students in a class):\n</p>\n<code> >>> test_scores = \u20184325220523455023\u2019</code>\n<p>\nUsing the variable <code>test_scores</code> and the indexing operators,\nwrite four separate expressions whose values are each of\nthe following:  quiz score for the 1st student, the 5th student,\nthe 10th student, and the 16th student.  Remember zero-based indexing.\n</p>\n<!--\nSolution\ntest_scores[0]\ntest_scores[4]\ntest_scores[9]\ntest_scores[15]\n-->\n<!-- \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.15 \u2014 Four problems\nBroad topic: Writing expressions from English\nSpecific topic: Boolean expressions and indexing operators\nProblem domain: None; just mechanical\n\nReplacement -->\n<p><b>(4)</b>\nEvaluate the following assignment statement:</p>\n<code> >>> s = \u2018anteater\u2019</code>\n<p>\nFor each of the following, write a boolean expression that represents the English statement:\n<ul>\n<li>The first character of string <code>s</code> is <code>\u2018a\u2019</code>\n</li>\n<li>The last character of string <code>s</code> is <code>\u2018r\u2019</code>\n</li>\n<li>The fourth character of string <code>s</code> is <code>\u2018x\u2019</code>\n</li>\n<li>The first three characters of string <code>s</code> match the string <code>\u2018zot\u2019</code><!-- Solution\ns[0] == \u2018a\u2019\ns[-1] == \u2018r\u2019\ns[3] == \u2018x\u2019\ns[0:3] == \u2018zot\u2019\n-->\n<!--\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.16 \u2014 Four problems\nBroad topic: Writing expressions from English\nSpecific topic: Variable assignment\nProblem domain: Mechanical, office supplies, and names\n\nReplacement -->\n</li></ul>\n<p><b>(5)</b> Write Python assignment statements that correspond to each of the following:</p>\n<ul>\n<li>Assign 3.14159 to variable <code>pi</code>\n</li>\n<li>Assign the values\n<code>\u2018Toyota\u2019</code>, <code>\u2018Camry\u2019</code>, and <code>2014</code>\nto the variables <code>make</code>, <code>model</code>, and <code>year</code> \n</li>\n<li>Assign a list containing strings <code>\u2018Computer Science\u2019</code>, <code>\u2018Informatics\u2019</code>, and <code>\u2018Computer Game Science\u2019</code> to the variable <code>\u0001ICS_majors</code>\n</li>\n<li>Assign the variable <code>a</code> to be the average of the odd numbers from 3 to 9.\n</li>\n</ul>\n<!--\n<pre>Solution\npi = 3.14156\nmake = \u2018Toyota\u2019; model = 'Camry'; year = 2014\n\t(typically we'd write these on separate lines\n\twithout the semicolons)\nICS_majors = [\u2018Computer Science\u2019, \u2018Informatics\u2019, \u2018Computer Game Science\u2019]\na = (3 + 5 + 7 + 9) / 4\n</pre>\n-->\n<!--\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.17 \u2014 Four problems\nBroad topic: Writing expressions from English\nSpecific topic: Boolean expressions\nProblem domain: None; just mechanical\n\nReplacement -->\n<p><b>(6)</b>\nWrite boolean expressions corresponding to each of the following statements:</p>\n<ul>\n<li>20 plus 35 is greater than 2 to the power of 4\n</li>\n<li>The string <code>\u2018hello\u2019</code> is not equivalent to the string <code>\u2018goodbye\u2019</code>\n</li>\n<li>The remainder when 10 is divided by 3 is less or equal to 1.\n</li>\n<li>The list <code>[\u2018apple\u2019, \u2018orange\u2019, \u2018banana\u2019, \u2018mango\u2019]</code> contains 5 elements.\n</li>\n<li>The number 63 is an even number.\n</li>\n</ul>\n<!--Solution\n20 + 35 > 2**4\n\u2018hello\u2019 != \u2018goodbye\u2019\n10 % 3 <= 1\nlen([\u2018apple\u2019, \u2018orange\u2019, \u2018banana\u2019, \u2018mango\u2019]) == 5\n63 % 2 == 0\n-->\n<!--\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\nExercise 2.21 \u2014 One problem\nBroad topic: Writing expressions from English\nSpecific topic: String concatenation and indexing operators\nProblem domain: None; just mechanical\n\nReplacement -->\n<p><b>(7)</b>\nExecute the following assignment statement:<br />\n<code> >>> s = \u2018abcdefghijklmnopqrstuvwxyz\u2019</code>\n</p>\n<p>Using only string concatenation and the indexing operator on the string <code>s</code>, write Python expressions that result in the following:</p>\n<ul><li><code>\u0001\u2018dog\u2019</code>\n</li>\n<li><code>\u2018tv\u2019</code>\n</li>\n<li><code>\u2018ics\u2019</code>\n</li>\n<li><code>\u2018uci\u2019</code>\n</li>\n</ul>\n<!--\nSolution\n\ns[3] + s[14] + s[6]\ns[19] + s[21]\ns[8] + s[2] + s[18]\ns[20] + s[2] + [8]\n-->\n\n<!--  ORIGINAL PERKOVIC EXERCISES\nAt the end of Chapter 2, do the following exercises. Where the exercises say to write Python expressions or evaluate them in the shell window, instead you should put those expressions into your   <code>lab1e.py</code> file and print their values.</p>\n<p> Exercise 2.12: choose three parts from (a) to (e); Exercise\n  2.13: chose one from (a) to (c) plus one from (d) to (f); Exercise\n  \n  2.14: choose three of the letters listed; Exercise\n  \n2.15: choose four from (a) to (g).</p>\n<p>Then do Exercise 2.16 (a), (b), (d), and (e); Exercise\n  2.17 (a), (c), (d), and (e); Exercise 2.21.</p>\n-->\n<p><strong>(g)</strong> Done, and it's not Friday yet? Good for you! But you should know that the rest of the class will catch up to you and that later assignments will take everyone longer. And ask yourself: Are you sure that both you and your partner understand everything in this assignment? Could each of you re-solve each problem easily? Does each of you understand every technical term used?</p>\n<p>Take this opportunity to make sure each of you has a solid foundation in the basics. If you like, try some of the problems at <a href=\"http://codingbat.com/python\">Codingbat.com.</a></p>\n<p><strong>(h) </strong>Remember that each partner must complete a partner evaluation form and submit it individually. Do this by connecting to the <a href=\"http://ics31-partner-app.appspot.com/\">partner app</a>; you'll need to log in with your UCInet ID. The partner evaluations will typically be available on the day the lab is due.</p>\n<p>Make sure you know your partner's name, first and last, so you can evaluate the right person. Please complete your evaluation by the end of the day on Friday, or Saturday morning at the latest. It only takes a couple of minutes and not doing it hurts your participation score. </p>\n<p><strong>What to turn in:</strong> It would be an excellent idea to go back and re-read the assignment carefully now, to make sure you've completed all the steps specified. Then one member of each pair (not both!) must submit via Checkmate the files you created for parts (c), (d), (e) and (f) above; make sure both partners' names appear at the top of each file. Also remember that each student must complete a partner evaluation form; these evaluations contribute to your class participation score. Get in the habit of doing this every week on Friday after you've submitted your assignment; the partner evaluations close on Saturday.\n  \n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \">&nbsp;</p>\n<p style=\"color: rgb(0, 0, 0); font-family: Times; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \"><font face=\"Helvetica\" size=\"1\">Written by David G. Kay in Fall 2012 for ICS 31, based on materials from ICS H21, H22, and Informatics 41; modified by David G. Kay, Winter and Fall 2013, Winter 2014, Fall 2014, Winter 2015. Python exercises by David Lepe, Winter 2014.</font><br class=\"Apple-interchange-newline\">\n<HR />\n<FONT  ><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>, <a href=mailto:kay@uci.edu>kay@uci.edu</A> </FONT><span><br />\n<font size=\"2\"  >\n<!-- #BeginDate format:fcAm1a -->Sunday, January 11, 2015 12:23 PM<!-- #EndDate -->\n</font></span>\n</BODY>\n</HTML>\n", "id": 1869.0}