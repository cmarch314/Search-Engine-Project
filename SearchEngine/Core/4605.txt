{"text": "Last Published 2 14 7 14Version 8 6 Documentation Home Documentation Installing and Managing AsterixDB using Managix AsterixDB 1 1 An ADM and AQL Primer AsterixDB Javascript SDK Asterix Data Model ADM Asterix Query Language AQL AQL Functions AQL Allen s Relations Functions AQL Support of Similarity Queries Accessing External Data REST API to AsterixDB Asterix Data Model ADM Table of Contents Primitive Types BooleanInt8 Int16 Int32 Int64FloatDoubleStringPointLineRectangleCirclePolygonDateTimeDatetimeDuration Year month duration Day time durationIntervalDerived Types RecordOrderedListUnorderedList An instance of Asterix data model ADM can be a primitive type int32 int64 string float double date time datetime etc or null or a derived type Primitive Types Back to TOC Boolean Back to TOC boolean data type can have one of the two values true or false Example let t true let f false return true t false f The expected result is true true false false Int8 Int16 Int32 Int64 Back to TOC Integer types using 8 16 32 or 64 bits The ranges of these types are int8 127 to 127int16 32767 to 32767int32 2147483647 to 2147483647int64 9223372 368547758 8 to 9223372 368547758 7 Example let v8 int8 125 let v16 int16 32765 let v32 294967295 let v64 int64 17 return int8 v8 int16 v16 int32 v32 int64 v64 The expected result is int8 125i8 int16 32765i16 int32 294967295 int64 17 i64 Float Back to TOC float represents approximate numeric data values using 4 bytes The range of a float value can be from 2 149 to 2 2 23 2 127 for both positive and negative Beyond these ranges will get INF or INF Example let v1 float NaN let v2 float INF let v3 float INF let v4 float 2 13 5 return v1 v1 v2 v2 v3 v3 v4 v4 The expected result is v1 NaNf v2 Infinityf v3 Infinityf v4 2 13 5f Double Back to TOC double represents approximate numeric data values using 8 bytes The range of a double value can be from 2 1 22 to 2 2 52 2 1 23 for both positive and negative Beyond these ranges will get INF or INF Example let v1 double NaN let v2 double INF let v3 double INF let v4 double 2 13 593823748327284 return v1 v1 v2 v2 v3 v3 v4 v4 The expected result is v1 NaNd v2 Infinityd v3 Infinityd v4 2 13 5938237483274d String Back to TOC string represents a sequence of characters Example let v1 string This is a string let v2 string This is a quoted string return v1 v1 v2 v2 The expected result is v1 This is a string v2 This is a quoted string Point Back to TOC point is the fundamental two dimensional building block for spatial types It consists of two double coordinates x and y Example let v1 point 8 1 d 1 E5 let v2 point 5 1 E 1 d 1 E5 return v1 v1 v2 v2 The expected result is v1 point 8 1 1 v2 point 5 1E 1 1 Line Back to TOC line consists of two points that represent the start and the end points of a line segment Example let v1 line 1 1234 11 1e 1 1 2E 2 11 22 let v2 line 1234 1 e 1 1 5E 2 1 2 return v1 v1 v2 v2 The expected result is v1 line 1 1234 1 11 1 2 11 22 v2 line 1234 1 E 1 1 5 1 2 Rectangle Back to TOC rectangle consists of two points that represent the bottom left and upper right corners of a rectangle Example let v1 rectangle 5 1 11 8 87 6 15 6548 let v2 rectangle 1234 1 e 1 5 5487 48765 return v1 v1 v2 v2 The expected result is v1 rectangle 5 1 11 8 87 6 15 6548 v2 rectangle 1234 1 E 1 5 5487 48765 Circle Back to TOC circle consists of one point that represents the center of the circle and a radius of type double Example let v1 circle 1 1234 11 1e 1 1 2E 2 let v2 circle 1234 1 e 1 1 5E 2 return v1 v1 v2 v2 The expected result is v1 circle 1 1234 1 11 1 2 v2 circle 1234 1 E 1 1 5 Polygon Back to TOC polygon consists of n points that represent the vertices of a simple closed polygon Example let v1 polygon 1 2 1 3e2 2 14E 5 2 15 3 5e 2 3 6 4 6E 3 4 81 let v2 polygon 1 1 5e2 2 15E 5 2 5 1 3 3e3 2 5 E 5 2 15 3 5e 2 3 6 4 6 E 3 4 75 2 1 e2 2 E 5 2 1 3 5 3 25 4 33E 3 4 75 return v1 v1 v2 v2 The expected result is v1 polygon 1 2 13 214 2 15 35 3 6 46 4 81 v2 polygon 1 1 5 2 15E5 2 5 1 33 25 2 15 35 3 6 46 4 75 2 1 2 2 1 3 5 3 25 433 4 75 Date Back to TOC date represents a time point along the Gregorian calendar system specified by the year month and day ASTERIX supports the date from 9999 1 1 to 9999 12 31 A date value can be represented in two formats extended format and basic format Extended format is represented as yyyy mm dd for year month day Each field should be padded if there are less digits than the format specified Basic format is in the format of yyyymmdd Example let v1 date 2 13 1 1 let v2 date 197 1 1 return v1 v1 v2 v2 The expected result is v1 date 2 13 1 1 v2 date 197 1 1 Time Back to TOC time type describes the time within the range of a day It is represented by three fields hour minute and second Millisecond field is optional as the fraction of the second field Its extended format is as hh mm ss mmm and the basic format is hhmmss mmm The value domain is from to 23 59 59 999 Timezone field is optional for a time value Timezone is represented as hh mm for extended format or hhmm for basic format Note that the sign designators cannot be omitted Z can also be used to represent the UTC local time If no timezone information is given it is UTC by default Example let v1 time 12 12 12 39Z let v2 time 8 return v1 v1 v2 v2 The expected result is v1 time 12 12 12 39Z v2 time 8 Z Datetime Back to TOC A datetime value is a combination of an date and time representing a fixed time point along the Gregorian calendar system The value is among 9999 1 1 and 9999 12 31 23 59 59 999 A datetime value is represented as a combination of the representation of its date part and time part separated by a separator T Either extended or basic format can be used and the two parts should be the same format Millisecond field and timezone field are optional as specified in the time type Example let v1 datetime 2 13 1 1T12 12 12 39Z let v2 datetime 197 1 1T 8 return v1 v1 v2 v2 The expected result is v1 datetime 2 13 1 1T12 12 12 39Z v2 datetime 197 1 1T 8 Z Duration Year month duration Day time duration Back to TOC duration represents a duration of time A duration value is specified by integers on at least one of the following fields year month day hour minute second and millisecond A duration value is in the format of PnYnMnDTnHnMn mmmS The millisecond part as the fraction of the second field is optional and when no millisecond field is used the decimal point should also be absent Negative durations are also supported for the arithmetic operations between time instance types date time and datetime and is used to roll the time back for the given duration For example date 2 12 1 1 duration P3D will return date 2 11 12 29 There are also two sub duration types namely year month duration and day time duration year month duration represents only the years and months of a duration while day time duration represents only the day to millisecond fields Different from the duration type both these two subtypes are totally ordered so they can be used for comparison and index construction Note that a canonical representation of the duration is always returned regardless whether the duration is in the canonical representation or not from the user s input More information about canonical representation can be found from XPath dayTimeDuration Canonical Representation and yearMonthDuration Canonical Representation Example let v1 duration P1 Y12MT12M let v2 duration PT2 943S return v1 v1 v2 v2 The expected result is v1 duration P1 1YT12M v2 duration PT2 943S Interval Back to TOC interval represents inclusive exclusive ranges of time It is defined by two time point values with the same temporal type date time or datetime Example let v1 interval from date date 2 13 1 1 date 2 13 5 5 let v2 interval from time time 1 1 time 2139 1 49 8 let v3 interval from datetime datetime 2 13 1 1T 1 1 datetime 2 13 5 5T2139 1 49 8 return v1 v1 v2 v2 v3 v3 The expected result is v1 interval date 2 13 1 1 2 13 5 5 v2 interval time 1 1 Z 13 39 1 49Z v3 interval datetime 2 13 1 1T 1 1 Z 2 13 5 5T13 39 1 49Z Derived Types Back to TOC Record Back to TOC A record contains a set of elds where each eld is described by its name and type A record type is either open or closed Open records can contain elds that are not part of the type de nition while closed records cannot Syntactically record constructors are surrounded by curly braces An example would be id 2135 8 name Alice Bob OrderedList Back to TOC An orderedList is a sequence of values for which the order is determined by creation or insertion OrderedList constructors are denoted by brackets An example would be alice 123 bob null UnorderedList Back to TOC An unorderedList is an unordered sequence of values similar to bags in SQL UnorderedList constructors are denoted by two opening flower braces followed by data and two closing flower braces like An example would be hello 9328 world 1 2 null Copyright 2 14 All Rights Reserved ", "_id": "http://asterixdb.ics.uci.edu/documentation/aql/datamodel.html", "title": "asterixdb - ", "html": "<!DOCTYPE html>\n<!--\n | Generated by Apache Maven Doxia at 2014-07-14\n | Rendered using Apache Maven Fluido Skin 1.3.0\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"Date-Revision-yyyymmdd\" content=\"20140714\" />\n    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>AsterixDB - </title>\n    <link rel=\"stylesheet\" href=\"../css/apache-maven-fluido-1.3.0.min.css\" />\n    <link rel=\"stylesheet\" href=\"../css/site.css\" />\n    <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\" />\n\n      \n    <script type=\"text/javascript\" src=\"../js/apache-maven-fluido-1.3.0.min.js\"></script>\n\n                          \n        \n<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-41536543-1', 'uci.edu');\n        ga('send', 'pageview');</script>\n          \n            </head>\n        <body class=\"topBarDisabled\">\n          \n                \n                    \n    \n        <div class=\"container-fluid\">\n          <div id=\"banner\">\n        <div class=\"pull-left\">\n                                    <a href=\"http://asterixdb.ics.uci.edu/\" id=\"bannerLeft\">\n                                                                                                <img src=\"../images/asterixlogo.png\"  alt=\"AsterixDB\"/>\n                </a>\n                      </div>\n        <div class=\"pull-right\">  </div>\n        <div class=\"clear\"><hr/></div>\n      </div>\n\n      <div id=\"breadcrumbs\">\n        <ul class=\"breadcrumb\">\n                \n                    \n                  <li id=\"publishDate\">Last Published: 2014-07-14</li>\n                      \n                \n                    \n                 <li id=\"projectVersion\" class=\"pull-right\">Version: 0.8.6</li>\n      \n                                            <li class=\"divider pull-right\">|</li>\n                        \n    <li class=\"pull-right\">              <a href=\"../index.html\" title=\"Documentation Home\">\n        Documentation Home</a>\n  </li>\n\n                        </ul>\n      </div>\n\n            \n      <div class=\"row-fluid\">\n        <div id=\"leftColumn\" class=\"span3\">\n          <div class=\"well sidebar-nav\">\n                \n                    \n                <ul class=\"nav nav-list\">\n                    <li class=\"nav-header\">Documentation</li>\n                                \n      <li>\n    \n                          <a href=\"../install.html\" title=\"Installing and Managing AsterixDB using Managix\">\n          <i class=\"none\"></i>\n        Installing and Managing AsterixDB using Managix</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/primer.html\" title=\"AsterixDB 101: An ADM and AQL Primer\">\n          <i class=\"none\"></i>\n        AsterixDB 101: An ADM and AQL Primer</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/js-sdk.html\" title=\"AsterixDB Javascript SDK\">\n          <i class=\"none\"></i>\n        AsterixDB Javascript SDK</a>\n            </li>\n                  \n      <li class=\"active\">\n    \n            <a href=\"#\"><i class=\"none\"></i>Asterix Data Model (ADM)</a>\n          </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/manual.html\" title=\"Asterix Query Language (AQL)\">\n          <i class=\"none\"></i>\n        Asterix Query Language (AQL)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/functions.html\" title=\"AQL Functions\">\n          <i class=\"none\"></i>\n        AQL Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/allens.html\" title=\"AQL Allen's Relations Functions\">\n          <i class=\"none\"></i>\n        AQL Allen's Relations Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/similarity.html\" title=\"AQL Support of Similarity Queries\">\n          <i class=\"none\"></i>\n        AQL Support of Similarity Queries</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/externaldata.html\" title=\"Accessing External Data\">\n          <i class=\"none\"></i>\n        Accessing External Data</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../api.html\" title=\"REST API to AsterixDB\">\n          <i class=\"none\"></i>\n        REST API to AsterixDB</a>\n            </li>\n            </ul>\n                \n                    \n                \n          <hr class=\"divider\" />\n\n           <div id=\"poweredBy\">\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                                                                                                                         <a href=\"https://code.google.com/p/hyracks/\" title=\"Hyracks\" class=\"builtBy\">\n        <img class=\"builtBy\"  alt=\"Hyracks\" src=\"../images/hyrax_ts.png\"    />\n      </a>\n                      </div>\n          </div>\n        </div>\n        \n                \n        <div id=\"bodyColumn\"  class=\"span9\" >\n                                  \n            <h1>Asterix Data Model (ADM)</h1>\n<div class=\"section\">\n<h2><a name=\"toc\" id=\"toc\">Table of Contents</a><a name=\"Table_of_Contents\"></a></h2>\n\n<ul>\n  \n<li><a href=\"#PrimitiveTypes\">Primitive Types</a>\n  \n<ul>\n    \n<li><a href=\"#PrimitiveTypesBoolean\">Boolean</a></li>\n    \n<li><a href=\"#PrimitiveTypesInt\">Int8 / Int16 / Int32 / Int64</a></li>\n    \n<li><a href=\"#PrimitiveTypesFloat\">Float</a></li>\n    \n<li><a href=\"#PrimitiveTypesDouble\">Double</a></li>\n    \n<li><a href=\"#PrimitiveTypesString\">String</a></li>\n    \n<li><a href=\"#PrimitiveTypesPoint\">Point</a></li>\n    \n<li><a href=\"#PrimitiveTypesLine\">Line</a></li>\n    \n<li><a href=\"#PrimitiveTypesRectangle\">Rectangle</a></li>\n    \n<li><a href=\"#PrimitiveTypesCircle\">Circle</a></li>\n    \n<li><a href=\"#PrimitiveTypesPolygon\">Polygon</a></li>\n    \n<li><a href=\"#PrimitiveTypesDate\">Date</a></li>\n    \n<li><a href=\"#PrimitiveTypesTime\">Time</a></li>\n    \n<li><a href=\"#PrimitiveTypesDateTime\">Datetime</a></li>\n    \n<li><a href=\"#PrimitiveTypesDuration\">Duration/Year-month-duration/Day-time-duration</a></li>\n    \n<li><a href=\"#PrimitiveTypesInterval\">Interval</a></li>\n  </ul></li>\n  \n<li><a href=\"#DerivedTypes\">Derived Types</a>\n  \n<ul>\n    \n<li><a href=\"#DerivedTypesRecord\">Record</a></li>\n    \n<li><a href=\"#DerivedTypesOrderedList\">OrderedList</a></li>\n    \n<li><a href=\"#DerivedTypesUnorderedList\">UnorderedList</a></li>\n  </ul></li>\n</ul>\n<p>An instance of Asterix data model (ADM) can be a <i><i>primitive type</i></i> (<tt>int32</tt>, <tt>int64</tt>, <tt>string</tt>, <tt>float</tt>, <tt>double</tt>, <tt>date</tt>, <tt>time</tt>, <tt>datetime</tt>, etc. or <tt>null</tt>) or a <i><i>derived type</i></i>.</p></div>\n<div class=\"section\">\n<h2><a name=\"PrimitiveTypes\" id=\"PrimitiveTypes\">Primitive Types</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Primitive_Types_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesBoolean\" id=\"PrimitiveTypesBoolean\">Boolean</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"BooleanBack_to_TOC\"></a></h3>\n<p><tt>boolean</tt> data type can have one of the two values: <i><i>true</i></i> or <i><i>false</i></i>.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $t := true\nlet $f := false\nreturn { &quot;true&quot;: $t, &quot;false&quot;: $f }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;true&quot;: true, &quot;false&quot;: false }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesInt\" id=\"PrimitiveTypesInt\">Int8 / Int16 / Int32 / Int64</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Int8__Int16__Int32__Int64_Back_to_TOC\"></a></h3>\n<p>Integer types using 8, 16, 32, or 64 bits. The ranges of these types are:</p>\n\n<ul>\n  \n<li><tt>int8</tt>: -127 to 127</li>\n  \n<li><tt>int16</tt>: -32767 to 32767</li>\n  \n<li><tt>int32</tt>: -2147483647 to 2147483647</li>\n  \n<li><tt>int64</tt>: -9223372036854775808 to 9223372036854775807</li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v8 := int8(&quot;125&quot;)\nlet $v16 := int16(&quot;32765&quot;)\nlet $v32 := 294967295\nlet $v64 := int64(&quot;1700000000000000000&quot;)\nreturn { &quot;int8&quot;: $v8, &quot;int16&quot;: $v16, &quot;int32&quot;: $v32, &quot;int64&quot;: $v64}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;int8&quot;: 125i8, &quot;int16&quot;: 32765i16, &quot;int32&quot;: 294967295, &quot;int64&quot;: 1700000000000000000i64 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesFloat\" id=\"PrimitiveTypesFloat\">Float</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Float_Back_to_TOC\"></a></h3>\n<p><tt>float</tt> represents approximate numeric data values using 4 bytes. The range of a float value can be from 2^(-149) to (2-2^(-23)&#xb7;2^(127) for both positive and negative. Beyond these ranges will get <tt>INF</tt> or <tt>-INF</tt>.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := float(&quot;NaN&quot;)\nlet $v2 := float(&quot;INF&quot;)\nlet $v3 := float(&quot;-INF&quot;)\nlet $v4 := float(&quot;-2013.5&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: NaNf, &quot;v2&quot;: Infinityf, &quot;v3&quot;: -Infinityf, &quot;v4&quot;: -2013.5f }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesDouble\" id=\"PrimitiveTypesDouble\">Double</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Double_Back_to_TOC\"></a></h3>\n<p><tt>double</tt> represents approximate numeric data values using 8 bytes. The range of a double value can be from (2^(-1022)) to (2-2^(-52))&#xb7;2^(1023) for both positive and negative. Beyond these ranges will get <tt>INF</tt> or <tt>-INF</tt>.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := double(&quot;NaN&quot;)\nlet $v2 := double(&quot;INF&quot;)\nlet $v3 := double(&quot;-INF&quot;)\nlet $v4 := double(&quot;-2013.593823748327284&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: NaNd, &quot;v2&quot;: Infinityd, &quot;v3&quot;: -Infinityd, &quot;v4&quot;: -2013.5938237483274d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesString\" id=\"PrimitiveTypesString\">String</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"String_Back_to_TOC\"></a></h3>\n<p><tt>string</tt> represents a sequence of characters.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := string(&quot;This is a string.&quot;)\nlet $v2 := string(&quot;\\&quot;This is a quoted string\\&quot;&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: &quot;This is a string.&quot;, &quot;v2&quot;: &quot;\\&quot;This is a quoted string\\&quot;&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesPoint\" id=\"PrimitiveTypesPoint\">Point</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Point_Back_to_TOC\"></a></h3>\n<p><tt>point</tt> is the fundamental two-dimensional building block for spatial types. It consists of two <tt>double</tt> coordinates x and y.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := point(&quot;80.10d, -10E5&quot;)\nlet $v2 := point(&quot;5.10E-10d, -10E5&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: point(&quot;80.1,-1000000.0&quot;), &quot;v2&quot;: point(&quot;5.1E-10,-1000000.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesLine\" id=\"PrimitiveTypesLine\">Line</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Line_Back_to_TOC\"></a></h3>\n<p><tt>line</tt> consists of two points that represent the start and the end points of a line segment.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := line(&quot;10.1234,11.1e-1 +10.2E-2,-11.22&quot;)\nlet $v2 := line(&quot;0.1234,-1.00e-10 +10.5E-2,-01.02&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: line(&quot;10.1234,1.11 0.102,-11.22&quot;), &quot;v2&quot;: line(&quot;0.1234,-1.0E-10 0.105,-1.02&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesRectangle\" id=\"PrimitiveTypesRectangle\">Rectangle</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"RectangleBack_to_TOC\"></a></h3>\n<p><tt>rectangle</tt> consists of two points that represent the <i><i>bottom left</i></i> and <i><i>upper right</i></i> corners of a rectangle.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := rectangle(&quot;5.1,11.8 87.6,15.6548&quot;)\nlet $v2 := rectangle(&quot;0.1234,-1.00e-10 5.5487,0.48765&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: rectangle(&quot;5.1,11.8 87.6,15.6548&quot;), &quot;v2&quot;: rectangle(&quot;0.1234,-1.0E-10 5.5487,0.48765&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesCircle\" id=\"PrimitiveTypesCircle\">Circle</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"CircleBack_to_TOC\"></a></h3>\n<p><tt>circle</tt> consists of one point that represents the center of the circle and a radius of type <tt>double</tt>.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := circle(&quot;10.1234,11.1e-1 +10.2E-2&quot;)\nlet $v2 := circle(&quot;0.1234,-1.00e-10 +10.5E-2&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: circle(&quot;10.1234,1.11 0.102&quot;), &quot;v2&quot;: circle(&quot;0.1234,-1.0E-10 0.105&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesPolygon\" id=\"PrimitiveTypesPolygon\">Polygon</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"PolygonBack_to_TOC\"></a></h3>\n<p><tt>polygon</tt> consists of <i><i>n</i></i> points that represent the vertices of a <i><i>simple closed</i></i> polygon.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := polygon(&quot;-1.2,+1.3e2 -2.14E+5,2.15 -3.5e+2,03.6 -4.6E-3,+4.81&quot;)\nlet $v2 := polygon(&quot;-1.0,+10.5e2 -02.15E+50,2.5 -1.0,+3.3e3 -2.50E+05,20.15 +3.5e+2,03.6 -4.60E-3,+4.75 -2,+1.0e2 -2.00E+5,20.10 30.5,03.25 -4.33E-3,+4.75&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: polygon(&quot;-1.2,130.0 -214000.0,2.15 -350.0,3.6 -0.0046,4.81&quot;), &quot;v2&quot;: polygon(&quot;-1.0,1050.0 -2.15E50,2.5 -1.0,3300.0 -250000.0,20.15 350.0,3.6 -0.0046,4.75 -2.0,100.0 -200000.0,20.1 30.5,3.25 -0.00433,4.75&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesDate\" id=\"PrimitiveTypesDate\">Date</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"DateBack_to_TOC\"></a></h3>\n<p><tt>date</tt> represents a time point along the Gregorian calendar system specified by the year, month and day. ASTERIX supports the date from <tt>-9999-01-01</tt> to <tt>9999-12-31</tt>.</p>\n<p>A date value can be represented in two formats, extended format and basic format.</p>\n\n<ul>\n  \n<li>Extended format is represented as <tt>[-]yyyy-mm-dd</tt> for <tt>year-month-day</tt>. Each field should be padded if there are less digits than the format specified.</li>\n  \n<li>Basic format is in the format of <tt>[-]yyyymmdd</tt>.</li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := date(&quot;2013-01-01&quot;)\nlet $v2 := date(&quot;-19700101&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: date(&quot;2013-01-01&quot;), &quot;v2&quot;: date(&quot;-1970-01-01&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesTime\" id=\"PrimitiveTypesTime\">Time</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"TimeBack_to_TOC\"></a></h3>\n<p><tt>time</tt> type describes the time within the range of a day. It is represented by three fields: hour, minute and second. Millisecond field is optional as the fraction of the second field. Its extended format is as <tt>hh:mm:ss[.mmm]</tt> and the basic format is <tt>hhmmss[mmm]</tt>. The value domain is from <tt>00:00:00.000</tt> to <tt>23:59:59.999</tt>.</p>\n<p>Timezone field is optional for a time value. Timezone is represented as <tt>[+|-]hh:mm</tt> for extended format or <tt>[+|-]hhmm</tt> for basic format. Note that the sign designators cannot be omitted. <tt>Z</tt> can also be used to represent the UTC local time. If no timezone information is given, it is UTC by default.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := time(&quot;12:12:12.039Z&quot;)\nlet $v2 := time(&quot;000000000-0800&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: time(&quot;12:12:12.039Z&quot;), &quot;v2&quot;: time(&quot;08:00:00.000Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesDateTime\" id=\"PrimitiveTypesDateTime\">Datetime</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"DatetimeBack_to_TOC\"></a></h3>\n<p>A <tt>datetime</tt> value is a combination of an <tt>date</tt> and <tt>time</tt>, representing a fixed time point along the Gregorian calendar system. The value is among <tt>-9999-01-01 00:00:00.000</tt> and <tt>9999-12-31 23:59:59.999</tt>.</p>\n<p>A <tt>datetime</tt> value is represented as a combination of the representation of its <tt>date</tt> part and <tt>time</tt> part, separated by a separator <tt>T</tt>. Either extended or basic format can be used, and the two parts should be the same format.</p>\n<p>Millisecond field and timezone field are optional, as specified in the <tt>time</tt> type.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := datetime(&quot;2013-01-01T12:12:12.039Z&quot;)\nlet $v2 := datetime(&quot;-19700101T000000000-0800&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: datetime(&quot;2013-01-01T12:12:12.039Z&quot;), &quot;v2&quot;: datetime(&quot;-1970-01-01T08:00:00.000Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesDuration\" id=\"PrimitiveTypesDuration\">Duration/Year-month-duration/Day-time-duration</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"DurationYear-month-durationDay-time-durationBack_to_TOC\"></a></h3>\n<p><tt>duration</tt> represents a duration of time. A duration value is specified by integers on at least one of the following fields: year, month, day, hour, minute, second, and millisecond.</p>\n<p>A duration value is in the format of <tt>[-]PnYnMnDTnHnMn.mmmS</tt>. The millisecond part (as the fraction of the second field) is optional, and when no millisecond field is used, the decimal point should also be absent.</p>\n<p>Negative durations are also supported for the arithmetic operations between time instance types (<tt>date</tt>, <tt>time</tt> and <tt>datetime</tt>), and is used to roll the time back for the given duration. For example <tt>date(&quot;2012-01-01&quot;) + duration(&quot;-P3D&quot;)</tt> will return <tt>date(&quot;2011-12-29&quot;)</tt>.</p>\n<p>There are also two sub-duration types, namely <tt>year-month-duration</tt> and <tt>day-time-duration</tt>. <tt>year-month-duration</tt> represents only the years and months of a duration, while <tt>day-time-duration</tt> represents only the day to millisecond fields. Different from the <tt>duration</tt> type, both these two subtypes are totally ordered, so they can be used for comparison and index construction.</p>\n<p>Note that a canonical representation of the duration is always returned, regardless whether the duration is in the canonical representation or not from the user&#x2019;s input. More information about canonical representation can be found from <a class=\"externalLink\" href=\"http://www.w3.org/TR/xpath-functions/#canonical-dayTimeDuration\">XPath dayTimeDuration Canonical Representation</a> and <a class=\"externalLink\" href=\"http://www.w3.org/TR/xpath-functions/#canonical-yearMonthDuration\">yearMonthDuration Canonical Representation</a>.</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := duration(&quot;P100Y12MT12M&quot;)\nlet $v2 := duration(&quot;-PT20.943S&quot;)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: duration(&quot;P101YT12M&quot;), &quot;v2&quot;: duration(&quot;-PT20.943S&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3><a name=\"PrimitiveTypesInterval\" id=\"PrimitiveTypesInterval\">Interval</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"IntervalBack_to_TOC\"></a></h3>\n<p><tt>interval</tt> represents inclusive-exclusive ranges of time. It is defined by two time point values with the same temporal type(<tt>date</tt>, <tt>time</tt> or <tt>datetime</tt>).</p>\n\n<ul>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := interval-from-date(date(&quot;2013-01-01&quot;), date(&quot;20130505&quot;))\nlet $v2 := interval-from-time(time(&quot;00:01:01&quot;), time(&quot;213901049+0800&quot;))\nlet $v3 := interval-from-datetime(datetime(&quot;2013-01-01T00:01:01&quot;), datetime(&quot;20130505T213901049+0800&quot;))\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: interval-date(&quot;2013-01-01, 2013-05-05&quot;), &quot;v2&quot;: interval-time(&quot;00:01:01.000Z, 13:39:01.049Z&quot;), &quot;v3&quot;: interval-datetime(&quot;2013-01-01T00:01:01.000Z, 2013-05-05T13:39:01.049Z&quot;) }\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"DerivedTypes\" id=\"DerivedTypes\">Derived Types</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Derived_TypesBack_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3><a name=\"DerivedTypesRecord\" id=\"DerivedTypesRecord\">Record</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"RecordBack_to_TOC\"></a></h3>\n<p>A <tt>record</tt> contains a set of &#xfb01;elds, where each &#xfb01;eld is described by its name and type. A record type is either open or closed. Open records can contain &#xfb01;elds that are not part of the type de&#xfb01;nition, while closed records cannot. Syntactically, record constructors are surrounded by curly braces &#x201c;{&#x2026;}&#x201d;.</p>\n<p>An example would be</p>\n\n<div class=\"source\">\n<pre>    { &quot;id&quot;: 213508, &quot;name&quot;: &quot;Alice Bob&quot; }\n</pre></div></div>\n<div class=\"section\">\n<h3><a name=\"DerivedTypesOrderedList\" id=\"DerivedTypesOrderedList\">OrderedList</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"OrderedListBack_to_TOC\"></a></h3>\n<p>An <tt>orderedList</tt> is a sequence of values for which the order is determined by creation or insertion. OrderedList constructors are denoted by brackets: &#x201c;[&#x2026;]&#x201d;.</p>\n<p>An example would be</p>\n\n<div class=\"source\">\n<pre>    [&quot;alice&quot;, 123, &quot;bob&quot;, null]\n</pre></div></div>\n<div class=\"section\">\n<h3><a name=\"DerivedTypesUnorderedList\" id=\"DerivedTypesUnorderedList\">UnorderedList</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"UnorderedListBack_to_TOC\"></a></h3>\n<p>An <tt>unorderedList</tt> is an unordered sequence of values, similar to bags in SQL. UnorderedList constructors are denoted by two opening flower braces followed by data and two closing flower braces, like &#x201c;{{&#x2026;}}&#x201d;.</p>\n<p>An example would be</p>\n\n<div class=\"source\">\n<pre>    {{&quot;hello&quot;, 9328, &quot;world&quot;, [1, 2, null]}}\n</pre></div></div></div>\n                  </div>\n            </div>\n          </div>\n\n    <hr/>\n\n    <footer>\n            <div class=\"container-fluid\">\n              <div class=\"row span12\">Copyright &copy;                   2014.\n          All Rights Reserved.      \n                    \n      </div>\n\n                          \n        \n                </div>\n    </footer>\n  </body>\n</html>\n", "id": 4605.0}