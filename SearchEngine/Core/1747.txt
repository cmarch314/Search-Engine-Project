{"text": "The Project FAQ Project 1 due Friday April 12 Download the soot framework get yourself familiar with various command line options and phases and implement an intra procedural analysis that print out all heap load store statements Here is an article containing instructions to implement an intra procedural analysis in soot http www bodden de 2 8 9 22 soot intra Ignore the dataflow analysis part all we need to do in the first project is to implement an intra procedural transform that iterates over the set of all Jimple statements and print out those that read and write heap locations Specifically each Java method in soot is represented by a SootMethod object From this object we retrieve the body of the method by calling getActiveBody This will give us a Body object through which we have access to all information of the Java method such as local variables and statements As we are interested in obtaining the statements i e Units we can use method getUnits to get a chain of statements the method contains Write a while loop that iterates over the statements in the chain In Jimple each statement is an object of interfact Stmt which has many different implementing classes Among these Stmt classes we are interested in JAssignStmt which represents assignment statements e g anything of the form a b In order to identify statements that access the heap we need to understand what the left hand side LHS and RHS operands are for each statement To do this we can call methods getLeftOp and getRightOp on each statement object These calls return objects of type Value which is an interface representing all expressions locals constants and references in a Java program We are particularly interested in InstanceFieldRef StaticFieldRef and ArrayRef each of which represents a type of heap access In particular If the LHS RHS of an assignment is an InstanceFieldRef the assignment is of the form a f b heap write b a f heap read If the LHS RHS of an assignment is a StaticFieldRef the assignment is of the form A f b heap write b A f heap read If the LHS RHS of an assignment is an ArrayRef the assignment is of the form a i b heap write b a i heap read The output of the analysis should have the following format Statement a f b heap write Statement b a i heap read Project 2 due Sunday May 3 The goal of the second project is to implement an intraprocedural constant propagation analysis There are two versions of the analysis The first one is a MUST analysis that identifies for each statement of the form x a where a can be a complex expression the constant value that x must have This analysis is used widely inside compilers The second analysis is a MAY analysis which computes for each statement of the form x a all potential constant values that x may receive at run time We will implement both versions in the project by instantiating the general monotone framework we discussed in the class You need to first define the lattice the bottom element i e unknown the top element i e anything the transfer functions and the meet operator Implement a worklist based fixedpoint computation algorithm Make sure your analysis terminates in the presence of loops Since the analysis is intraprocedural there is no need to analyze call relationships However you do need to perform worst case approximation when handling call sites We consider only simple assignments that manipulate integer values with operations Note that for the MAY analysis it is not obvious how to make the analysis converge One simple solution is to do widening as discussed in abstract interpretation For variables that are defined inside a loop we can simply assign them a top lattice element so that the analysis can quickly stabilize The output of the analysis should have the following format Statement a b the must and may sets for a are and Statement b c a the must and may sets for b are and Note that the must set must contain one single element and the may set might contain multiple elements Project 3 due Wednesday May 22 The goal of the third project is to implement a CFA analysis for Java As discussed in the class CFA for a functional language computes what function values may reach each variable in the program In the object oriented world CFA identifies at each call site what methods may potentially be invoked Of course the easiest way to get this information is to simply do a class hierarchy analysis CHA that identifies at a call a f the type of a and all its subtypes and returns all of the methods defined in these types A more precise analysis would first compute objects i e allocation sites that variable a points to and return only the methods in the classes instantiated in these allocation sites We will implement this analysis in the project by formulating the analysis as a constraint based system To simplify the analysis we assume a program only has allocation sites of the form A a new A assignment statements of the form a b and method calls This is an interprocedural analysis which means we do need to consider method calls For each type of statement the following constraints will be generated 1 A a new A new A pts a 2 a b pts b pts a 3 r a f b where f s definition is O f B p return v pts a pts this pts b pts p pts v pts r Build a constraint graph where each node represents a variable and each edge represents a subset relationship Develop an iterative algorithm to traverse the graph to find the solution Since this is a flow insensitive analysis note that all dataflow analyses are flow sensitive we do not even need a control flow graph You can simply iterate over the statements i e units to build the constraint graph The output of the analysis should have the following format Call site a f the methods potentially invoked here are A f SubA1 f SubA2 f etc Call site b g the methods potentially invoked here are B g etc Project 4 due Sunday June 9 In this project we will implement a 1 CFA analysis based on the CFA analysis we have implemented in Project 3 1 CFA is a context sensitive analysis that distinguishes points to information of each variable under different calling contexts What we need to do in this project is to create copies for nodes in the constraint graph we built in Project 3 Suppose we have a method m that has five variables and m is invoked at six different places i e there are six call sites that may have m as a target in the call graph For each variable in m we need to create six copies each representing a calling context At a call site m a c1 we add an edge from a to a copy of the first formal parameter node in m representing c1 Because variables for different contexts are distinguished the information passed into the method at one call site can only flow back to the same call site and thus we have much more precise points to information computed from 1 CFA The output of the analysis should have the same format as CFA Information about the soot framework 1 Soot is a Java compiler infrastructure that takes bytecode as input i e class files and generates SSA based intermediate representation i e Jimple You can implement your analysis on top of the Jimple representation Soot also provides an option to do program transformation and bytecode rewriting 2 Where can I download it http www sable mcgill ca soot Here you can find various soot tutorials 3 Soot API 4 The recent release of soot supports the use of option pp to save the effort of explicitly adding all library classes into the soot classpath ", "_id": "http://www.ics.uci.edu/~guoqingx/courses/253/sp2013/project.html", "title": "cs 295--run-time techniques for efficient and reliable program execution", "html": "<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\nxmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\nxmlns:w=\"urn:schemas-microsoft-com:office:word\"\r\nxmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\r\nxmlns=\"http://www.w3.org/TR/REC-html40\">\r\n\r\n<head>\r\n<meta http-equiv=Content-Type content=\"text/html; charset=windows-1252\">\r\n<meta name=ProgId content=Word.Document>\r\n<meta name=Generator content=\"Microsoft Word 14\">\r\n<meta name=Originator content=\"Microsoft Word 14\">\r\n<link rel=File-List href=\"project_files/filelist.xml\">\r\n<title>CS 295--Run-time Techniques for Efficient and Reliable Program Execution</title>\r\n<!--[if gte mso 9]><xml>\r\n <o:DocumentProperties>\r\n  <o:Author>harrygxu</o:Author>\r\n  <o:LastAuthor>harrygxu</o:LastAuthor>\r\n  <o:Revision>88</o:Revision>\r\n  <o:TotalTime>925</o:TotalTime>\r\n  <o:Created>2013-03-28T20:26:00Z</o:Created>\r\n  <o:LastSaved>2013-05-23T21:15:00Z</o:LastSaved>\r\n  <o:Pages>2</o:Pages>\r\n  <o:Words>1402</o:Words>\r\n  <o:Characters>7998</o:Characters>\r\n  <o:Lines>66</o:Lines>\r\n  <o:Paragraphs>18</o:Paragraphs>\r\n  <o:CharactersWithSpaces>9382</o:CharactersWithSpaces>\r\n  <o:Version>14.00</o:Version>\r\n </o:DocumentProperties>\r\n <o:OfficeDocumentSettings>\r\n  <o:AllowPNG/>\r\n </o:OfficeDocumentSettings>\r\n</xml><![endif]-->\r\n<link rel=themeData href=\"project_files/themedata.thmx\">\r\n<link rel=colorSchemeMapping href=\"project_files/colorschememapping.xml\">\r\n<!--[if gte mso 9]><xml>\r\n <w:WordDocument>\r\n  <w:Zoom>80</w:Zoom>\r\n  <w:TrackMoves/>\r\n  <w:TrackFormatting/>\r\n  <w:ValidateAgainstSchemas/>\r\n  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>\r\n  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>\r\n  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>\r\n  <w:DoNotPromoteQF/>\r\n  <w:LidThemeOther>EN-US</w:LidThemeOther>\r\n  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>\r\n  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>\r\n  <w:Compatibility>\r\n   <w:BreakWrappedTables/>\r\n   <w:SnapToGridInCell/>\r\n   <w:WrapTextWithPunct/>\r\n   <w:UseAsianBreakRules/>\r\n   <w:DontGrowAutofit/>\r\n   <w:SplitPgBreakAndParaMark/>\r\n   <w:DontVertAlignCellWithSp/>\r\n   <w:DontBreakConstrainedForcedTables/>\r\n   <w:DontVertAlignInTxbx/>\r\n   <w:Word11KerningPairs/>\r\n   <w:CachedColBalance/>\r\n   <w:UseFELayout/>\r\n  </w:Compatibility>\r\n  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>\r\n  <m:mathPr>\r\n   <m:mathFont m:val=\"Cambria Math\"/>\r\n   <m:brkBin m:val=\"before\"/>\r\n   <m:brkBinSub m:val=\"&#45;-\"/>\r\n   <m:smallFrac m:val=\"off\"/>\r\n   <m:dispDef/>\r\n   <m:lMargin m:val=\"0\"/>\r\n   <m:rMargin m:val=\"0\"/>\r\n   <m:defJc m:val=\"centerGroup\"/>\r\n   <m:wrapIndent m:val=\"1440\"/>\r\n   <m:intLim m:val=\"subSup\"/>\r\n   <m:naryLim m:val=\"undOvr\"/>\r\n  </m:mathPr></w:WordDocument>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n <w:LatentStyles DefLockedState=\"false\" DefUnhideWhenUsed=\"true\"\r\n  DefSemiHidden=\"true\" DefQFormat=\"false\" DefPriority=\"99\"\r\n  LatentStyleCount=\"267\">\r\n  <w:LsdException Locked=\"false\" Priority=\"0\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Normal\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"heading 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 7\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 8\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"9\" QFormat=\"true\" Name=\"heading 9\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 7\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 8\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" Name=\"toc 9\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"35\" QFormat=\"true\" Name=\"caption\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"10\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Title\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"1\" Name=\"Default Paragraph Font\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"11\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtitle\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"22\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Strong\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"20\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"59\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Table Grid\"/>\r\n  <w:LsdException Locked=\"false\" UnhideWhenUsed=\"false\" Name=\"Placeholder Text\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"1\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"No Spacing\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" UnhideWhenUsed=\"false\" Name=\"Revision\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"34\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"List Paragraph\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"29\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Quote\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"30\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Quote\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 1\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 2\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 3\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 4\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 5\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"60\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Shading Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"61\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"62\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Light Grid Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"63\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"64\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Shading 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"65\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"66\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium List 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"67\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 1 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"68\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 2 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"69\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Medium Grid 3 Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"70\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Dark List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"71\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Shading Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"72\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful List Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"73\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" Name=\"Colorful Grid Accent 6\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"19\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtle Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"21\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Emphasis\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"31\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Subtle Reference\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"32\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Intense Reference\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"33\" SemiHidden=\"false\"\r\n   UnhideWhenUsed=\"false\" QFormat=\"true\" Name=\"Book Title\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"37\" Name=\"Bibliography\"/>\r\n  <w:LsdException Locked=\"false\" Priority=\"39\" QFormat=\"true\" Name=\"TOC Heading\"/>\r\n </w:LatentStyles>\r\n</xml><![endif]-->\r\n<style>\r\n<!--\r\n /* Font Definitions */\r\n @font-face\r\n\t{font-family:SimSun;\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-alt:\\5B8B\\4F53;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:3 680460288 22 0 262145 0;}\r\n@font-face\r\n\t{font-family:\"MS Gothic\";\r\n\tpanose-1:2 11 6 9 7 2 5 8 2 4;\r\n\tmso-font-alt:\"\\FF2D\\FF33 \\30B4\\30B7\\30C3\\30AF\";\r\n\tmso-font-charset:128;\r\n\tmso-generic-font-family:modern;\r\n\tmso-font-pitch:fixed;\r\n\tmso-font-signature:-536870145 1791491579 18 0 131231 0;}\r\n@font-face\r\n\t{font-family:\"Cambria Math\";\r\n\tpanose-1:2 4 5 3 5 4 6 3 2 4;\r\n\tmso-font-charset:1;\r\n\tmso-generic-font-family:roman;\r\n\tmso-font-format:other;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:0 0 0 0 0 0;}\r\n@font-face\r\n\t{font-family:\"\\@SimSun\";\r\n\tpanose-1:2 1 6 0 3 1 1 1 1 1;\r\n\tmso-font-charset:134;\r\n\tmso-generic-font-family:auto;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:3 680460288 22 0 262145 0;}\r\n@font-face\r\n\t{font-family:Gungsuh;\r\n\tpanose-1:2 3 6 0 0 1 1 1 1 1;\r\n\tmso-font-charset:129;\r\n\tmso-generic-font-family:roman;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-1342176593 1775729915 48 0 524447 0;}\r\n@font-face\r\n\t{font-family:\"\\@Gungsuh\";\r\n\tpanose-1:2 3 6 0 0 1 1 1 1 1;\r\n\tmso-font-charset:129;\r\n\tmso-generic-font-family:roman;\r\n\tmso-font-pitch:variable;\r\n\tmso-font-signature:-1342176593 1775729915 48 0 524447 0;}\r\n@font-face\r\n\t{font-family:\"\\@MS Gothic\";\r\n\tpanose-1:2 11 6 9 7 2 5 8 2 4;\r\n\tmso-font-charset:128;\r\n\tmso-generic-font-family:modern;\r\n\tmso-font-pitch:fixed;\r\n\tmso-font-signature:-536870145 1791491579 18 0 131231 0;}\r\n /* Style Definitions */\r\n p.MsoNormal, li.MsoNormal, div.MsoNormal\r\n\t{mso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-parent:\"\";\r\n\tmargin:0in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\nh2\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 2 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:2;\r\n\tfont-size:18.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\nh3\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 3 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:3;\r\n\tfont-size:13.5pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\nh4\r\n\t{mso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-link:\"Heading 4 Char\";\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tmso-outline-level:4;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;\r\n\tfont-weight:bold;}\r\na:link, span.MsoHyperlink\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tcolor:blue;\r\n\ttext-decoration:underline;\r\n\ttext-underline:single;}\r\na:visited, span.MsoHyperlinkFollowed\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tcolor:purple;\r\n\ttext-decoration:underline;\r\n\ttext-underline:single;}\r\np\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-margin-top-alt:auto;\r\n\tmargin-right:0in;\r\n\tmso-margin-bottom-alt:auto;\r\n\tmargin-left:0in;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\np.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast\r\n\t{mso-style-noshow:yes;\r\n\tmso-style-priority:34;\r\n\tmso-style-unhide:no;\r\n\tmso-style-qformat:yes;\r\n\tmso-style-type:export-only;\r\n\tmargin-top:0in;\r\n\tmargin-right:0in;\r\n\tmargin-bottom:0in;\r\n\tmargin-left:.5in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-add-space:auto;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:minor-fareast;}\r\nspan.Heading2Char\r\n\t{mso-style-name:\"Heading 2 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 2\";\r\n\tmso-ansi-font-size:13.0pt;\r\n\tmso-bidi-font-size:13.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;}\r\nspan.Heading3Char\r\n\t{mso-style-name:\"Heading 3 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 3\";\r\n\tmso-ansi-font-size:12.0pt;\r\n\tmso-bidi-font-size:12.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;}\r\nspan.Heading4Char\r\n\t{mso-style-name:\"Heading 4 Char\";\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:9;\r\n\tmso-style-unhide:no;\r\n\tmso-style-locked:yes;\r\n\tmso-style-link:\"Heading 4\";\r\n\tmso-ansi-font-size:12.0pt;\r\n\tmso-bidi-font-size:12.0pt;\r\n\tfont-family:\"Cambria\",\"serif\";\r\n\tmso-ascii-font-family:Cambria;\r\n\tmso-ascii-theme-font:major-latin;\r\n\tmso-fareast-font-family:\"Times New Roman\";\r\n\tmso-fareast-theme-font:major-fareast;\r\n\tmso-hansi-font-family:Cambria;\r\n\tmso-hansi-theme-font:major-latin;\r\n\tmso-bidi-font-family:\"Times New Roman\";\r\n\tmso-bidi-theme-font:major-bidi;\r\n\tcolor:#4F81BD;\r\n\tmso-themecolor:accent1;\r\n\tfont-weight:bold;\r\n\tfont-style:italic;}\r\n.MsoChpDefault\r\n\t{mso-style-type:export-only;\r\n\tmso-default-props:yes;\r\n\tfont-size:10.0pt;\r\n\tmso-ansi-font-size:10.0pt;\r\n\tmso-bidi-font-size:10.0pt;\r\n\tmso-fareast-font-family:SimSun;}\r\n@page WordSection1\r\n\t{size:8.5in 11.0in;\r\n\tmargin:1.0in 1.0in 1.0in 1.0in;\r\n\tmso-header-margin:.5in;\r\n\tmso-footer-margin:.5in;\r\n\tmso-paper-source:0;}\r\ndiv.WordSection1\r\n\t{page:WordSection1;}\r\n /* List Definitions */\r\n @list l0\r\n\t{mso-list-id:834493817;\r\n\tmso-list-type:hybrid;\r\n\tmso-list-template-ids:688655602 959475852 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}\r\n@list l0:level1\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;\r\n\tmso-ansi-font-size:14.0pt;}\r\n@list l0:level2\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level3\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l0:level4\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level5\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level6\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l0:level7\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level8\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l0:level9\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l1\r\n\t{mso-list-id:1988043964;\r\n\tmso-list-type:hybrid;\r\n\tmso-list-template-ids:-764218202 1805274498 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}\r\n@list l1:level1\r\n\t{mso-level-text:\"\\(%1\\)\";\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level2\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level3\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l1:level4\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level5\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level6\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\n@list l1:level7\r\n\t{mso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level8\r\n\t{mso-level-number-format:alpha-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1:level9\r\n\t{mso-level-number-format:roman-lower;\r\n\tmso-level-tab-stop:none;\r\n\tmso-level-number-position:right;\r\n\ttext-indent:-9.0pt;}\r\nol\r\n\t{margin-bottom:0in;}\r\nul\r\n\t{margin-bottom:0in;}\r\n-->\r\n</style>\r\n<!--[if gte mso 10]>\r\n<style>\r\n /* Style Definitions */\r\n table.MsoNormalTable\r\n\t{mso-style-name:\"Table Normal\";\r\n\tmso-tstyle-rowband-size:0;\r\n\tmso-tstyle-colband-size:0;\r\n\tmso-style-noshow:yes;\r\n\tmso-style-priority:99;\r\n\tmso-style-parent:\"\";\r\n\tmso-padding-alt:0in 5.4pt 0in 5.4pt;\r\n\tmso-para-margin:0in;\r\n\tmso-para-margin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:10.0pt;\r\n\tfont-family:\"Times New Roman\",\"serif\";}\r\n</style>\r\n<![endif]--><!--[if gte mso 9]><xml>\r\n <o:shapedefaults v:ext=\"edit\" spidmax=\"1026\"/>\r\n</xml><![endif]--><!--[if gte mso 9]><xml>\r\n <o:shapelayout v:ext=\"edit\">\r\n  <o:idmap v:ext=\"edit\" data=\"1\"/>\r\n </o:shapelayout></xml><![endif]-->\r\n</head>\r\n\r\n<body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>\r\n\r\n<div class=WordSection1>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:18.0pt;mso-fareast-font-family:\"Times New Roman\"'>The Project\r\nFAQ <o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Project 1\r\n(due Friday April 12):<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Download the soot framework, get yourself familiar with various\r\ncommand-line options and phases, and implement an intra-procedural analysis that\r\nprint out all heap load/store statements. Here is an article containing\r\ninstructions to implement an intra-procedural analysis in soot\r\nhttp://www.bodden.de/2008/09/22/soot-intra/. Ignore the dataflow analysis\r\npart--all we need to do in the first project is to implement an\r\nintra-procedural transform that iterates over the set of all Jimple statements\r\nand print out those that read and write heap locations.<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'><o:p>&nbsp;</o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Specifically, each Java method in soot is represented by a <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/SootMethod.html\">SootMethod</a>\r\nobject. From this object, we retrieve the body of the method by calling <i\r\nstyle='mso-bidi-font-style:normal'><a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/SootMethod.html#getActiveBody%28%29\">getActiveBody()</a></i>.\r\nThis will give us a <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/Body.html#method\">Body</a>\r\nobject, through which we have access to all information of the Java method,\r\nsuch as local variables and statements. As we are interested in obtaining the\r\nstatements (i.e., Units), we can use method <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/Body.html#getUnits%28%29\">getUnits()</a>\r\nto get a chain of statements the method contains. Write a while loop that\r\niterates over the statements in the chain. In Jimple, each statement is an\r\nobject of interfact <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/Stmt.html\">Stmt</a>,\r\nwhich has many different implementing classes. Among these Stmt classes, we are\r\ninterested in <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/internal/JAssignStmt.html\">JAssignStmt</a>,\r\nwhich represents assignment statements (e.g., anything of the form a = b). In\r\norder to identify statements that access the heap, we need to understand what\r\nthe left-hand-side (LHS) and RHS operands are for each statement. To do this,\r\nwe can call methods <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/internal/AbstractDefinitionStmt.html#getLeftOp()\">getLeftOp()</a>\r\nand <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/internal/AbstractDefinitionStmt.html#getLeftOp()\">getRightOp()</a>\r\non each statement object. These calls return objects of type <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/Value.html\">Value</a>, which is\r\nan interface representing all expressions, locals, constants, and references in\r\na Java program. We are particularly interested in <a\r\nhref=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/InstanceFieldRef.html\">InstanceFieldRef</a>,\r\n<a href=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/StaticFieldRef.html\">StaticFieldRef</a>,\r\nand <a href=\"http://www.sable.mcgill.ca/soot/doc/soot/jimple/ArrayRef.html\">ArrayRef</a>,\r\neach of which represents a type of heap access. In particular,<o:p></o:p></span></p>\r\n\r\n<p class=MsoListParagraphCxSpFirst style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><span style='font-size:14.0pt;mso-fareast-font-family:\r\n\"Times New Roman\";mso-bidi-font-weight:bold'>If the LHS/RHS of an assignment is\r\nan InstanceFieldRef, the assignment is of the form a.f = b(heap write) /b = a.f\r\n(heap read);<o:p></o:p></span></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><span style='font-size:14.0pt;mso-fareast-font-family:\r\n\"Times New Roman\";mso-bidi-font-weight:bold'>If the LHS/RHS of an assignment is\r\na StaticFieldRef, the assignment is of the form A.f = b (heap write)/b=A.f\r\n(heap read);<o:p></o:p></span></p>\r\n\r\n<p class=MsoListParagraphCxSpLast style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><span style='font-size:14.0pt;mso-fareast-font-family:\r\n\"Times New Roman\";mso-bidi-font-weight:bold'>If the LHS/RHS of an assignment is\r\nan ArrayRef, the assignment is of the form a[i] = b (heap write)/b=a[i] (heap\r\nread);<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>The output\r\nof the analysis should have the following format:<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Statement a.f = b, heap write;<br>\r\nStatement b = a[i], heap read;<br>\r\n...<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>------------------------------------------------------------------<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Project 2\r\n(due Sunday May 3)<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>The goal of the second project is to implement an intraprocedural\r\nconstant propagation analysis. There are two versions of the analysis. The\r\nfirst one is a MUST analysis that identifies, for each statement of the form x =\r\na (where a can be a complex expression), the constant value that x must have.\r\nThis analysis is used widely inside compilers. The second analysis is a MAY\r\nanalysis, which computes, for each statement of the form x = a, all potential\r\nconstant values that x *may* receive at run time. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>We will implement both versions in the project by instantiating the\r\ngeneral monotone framework we discussed in the class. You need to first define\r\nthe lattice, the bottom element (i.e., unknown), the top element (i.e.,\r\nanything), the transfer functions, and the meet operator. Implement a\r\nworklist-based fixedpoint computation algorithm. Make sure your analysis\r\nterminates in the presence of loops. Since the analysis is intraprocedural,\r\nthere is no need to analyze call relationships. However, you do need to perform\r\nworst-case approximation when handling call sites. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>We consider only simple assignments that manipulate integer values with\r\n+,-,*,/ operations. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Note that for the MAY analysis, it is not obvious how to make the\r\nanalysis converge. One simple solution is to do ``widening`` (as discussed in\r\nabstract interpretation). For variables that are defined inside a loop, we can\r\nsimply assign them a ``top`` lattice element so that the analysis can quickly\r\nstabilize. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>The output\r\nof the analysis should have the following format:<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Statement a = b, the must and may sets for a are {...} and {...}<br>\r\nStatement b = c * a, the must and may sets for b are {...} and {...}<br>\r\n...<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Note that the must set must contain one single element and the may set\r\nmight contain multiple elements.<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>------------------------------------------------------------------<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Project 3\r\n(due Wednesday May 22)<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>The goal of the third project is to implement a 0-CFA analysis for Java.\r\nAs discussed in the class, 0-CFA for a functional language computes what\r\nfunction values may reach each variable in the program. In the object-oriented\r\nworld, 0-CFA identifies, at each call site, what methods may potentially be\r\ninvoked. Of course, the easiest way to get this information is to simply do a\r\nclass hierarchy analysis (CHA) that identifies, at a call a.f(), the type of a\r\nand all its subtypes, and returns all of the methods defined in these types. A\r\nmore precise analysis would first compute objects (i.e., allocation sites) that\r\nvariable a points to and return only the methods in the classes instantiated in\r\nthese allocation sites. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>We will implement this analysis in the project by formulating the\r\nanalysis as a constraint-based system. To simplify the analysis, we assume a\r\nprogram only has allocation sites of the form A a = new A(), assignment\r\nstatements of the form a = b, and method calls. This is an interprocedural\r\nanalysis, which means we do need to consider method calls. For each type of\r\nstatement, the following constraints will be generated:<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpFirst style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l1 level1 lfo2'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>(1)<span style='font:7.0pt \"Times New Roman\"'> </span></span></span></b><![endif]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>A a = new\r\nA() =&gt; {new A()} </span></b><b><span lang=ZH-CN style='font-size:14.0pt;\r\nfont-family:\"MS Gothic\"'>&#8849;</span></b><b><span lang=ZH-CN\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> </span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>pts(a)<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l1 level1 lfo2'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>(2)<span style='font:7.0pt \"Times New Roman\"'> </span></span></span></b><![endif]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>a = b =&gt;\r\npts(b) </span></b><b><span lang=ZH-CN style='font-size:14.0pt;font-family:\"MS Gothic\"'>&#8849;</span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> </span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>pts(a) <o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l1 level1 lfo2'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>(3)<span style='font:7.0pt \"Times New Roman\"'> </span></span></span></b><![endif]><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>r = a.f(b),\r\nwhere f`s definition is <o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:15.0pt'><b><span style='font-size:14.0pt;\r\nmso-fareast-font-family:\"Times New Roman\"'>O f(B p) { ...; return v; }<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:15.0pt'><b><span style='font-size:14.0pt;\r\nmso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpLast style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:15.0pt'><b><span style='font-size:14.0pt;\r\nmso-fareast-font-family:\"Times New Roman\"'>=&gt; pts(a) </span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;font-family:\"MS Gothic\"'>&#8849;</span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> </span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>pts(this) </span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;font-family:\"Gungsuh\",\"serif\"'>&#8743;</span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> pts(b) </span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;font-family:\"MS Gothic\"'>&#8849;</span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> </span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>pts(p) </span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;font-family:\"Gungsuh\",\"serif\"'>&#8743;</span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> pts(v) </span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;font-family:\"MS Gothic\"'>&#8849;</span></b><b><span\r\nlang=ZH-CN style='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'> </span></b><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>pts(r) <o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Build a constraint-graph where each node represents a variable and each\r\nedge represents a ``subset`` relationship. Develop an iterative algorithm to\r\ntraverse the graph to find the solution. <o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Since this is a flow-insensitive analysis (note that all dataflow\r\nanalyses are *flow-sensitive*), we do not even need a control flow graph. You\r\ncan simply iterate over the statements (i.e. units) to build the constraint\r\ngraph.<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>The output\r\nof the analysis should have the following format:<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>Call site a.f(...), the methods potentially invoked here are\r\n&lt;A.f(...)&gt;, &lt;SubA1.f(...)&gt; , &lt;SubA2.f(...)&gt;, etc.<br>\r\nCall site b.g(...), the methods potentially invoked here are &lt;B.g(...)&gt;,\r\netc.<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>------------------------------------------------------------------<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Project 4\r\n(due Sunday June 9)<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\";mso-bidi-font-weight:\r\nbold'>In this project, we will implement a 1-CFA analysis, based on the 0-CFA\r\nanalysis we have implemented in Project 3. 1-CFA is a context-sensitive\r\nanalysis that distinguishes points-to information of each variable under\r\ndifferent calling contexts. What we need to do in this project is to create\r\ncopies for nodes in the constraint graph we built in Project 3. Suppose we have\r\na method m that has five variables, and m is invoked at six different places (i.e.,\r\nthere are six call sites that may have m as a target in the call graph). For\r\neach variable in m, we need to create six copies, each representing a calling\r\ncontext. At a call site m(a) //c1, we add an edge from a to a copy of the first\r\nformal parameter node in m representing c1. Because variables for different\r\ncontexts are distinguished, the information passed into the method at one call\r\nsite can only flow back to the same call site, and thus, we have much more\r\nprecise points-to information computed from 1-CFA. The output of the analysis\r\nshould have the same format as 0-CFA.<o:p></o:p></span></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>------------------------------------------------------------------<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b><span\r\nstyle='font-size:14.0pt;mso-fareast-font-family:\"Times New Roman\"'>Information\r\nabout the soot framework<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpFirst style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l0 level1 lfo4'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-bidi-font-size:12.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>1.<span style='font:7.0pt \"Times New Roman\"'>&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span></span></span></b><![endif]><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'>Soot is a Java compiler infrastructure that takes bytecode\r\nas input (i.e., .class files) and generates SSA-based intermediate\r\nrepresentation (i.e., Jimple). You can implement your analysis on top of the\r\nJimple representation. Soot also provides an option to do program\r\ntransformation and bytecode rewriting.<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><b><span style='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l0 level1 lfo4'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-bidi-font-size:12.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>2.<span style='font:7.0pt \"Times New Roman\"'>&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span></span></span></b><![endif]><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'>Where can I download it? (<a\r\nhref=\"http://www.sable.mcgill.ca/soot/\">http://www.sable.mcgill.ca/soot/</a>). <a\r\nhref=\"http://www.sable.mcgill.ca/soot/tutorial/index.html\">Here</a> you can\r\nfind various soot tutorials.<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l0 level1 lfo4'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-bidi-font-size:12.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>3.<span style='font:7.0pt \"Times New Roman\"'>&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span></span></span></b><![endif]><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'><a href=\"http://www.sable.mcgill.ca/soot/doc\">Soot API</a>.<o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto;text-indent:-.25in;mso-list:l0 level1 lfo4'><![if !supportLists]><b><span\r\nstyle='font-size:14.0pt;mso-bidi-font-size:12.0pt;mso-fareast-font-family:\"Times New Roman\"'><span\r\nstyle='mso-list:Ignore'>4.<span style='font:7.0pt \"Times New Roman\"'>&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span></span></span></b><![endif]><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'>The recent release of soot supports the use of option\r\n``-pp`` to save the effort of explicitly adding all library classes into the\r\nsoot classpath. <o:p></o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><b><span style='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpMiddle><b><span style='mso-fareast-font-family:\r\n\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoListParagraphCxSpLast style='mso-margin-top-alt:auto;mso-margin-bottom-alt:\r\nauto;mso-add-space:auto'><b><span style='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></b></p>\r\n\r\n<p class=MsoNormal align=center style='text-align:center'><span\r\nstyle='mso-fareast-font-family:\"Times New Roman\"'><o:p>&nbsp;</o:p></span></p>\r\n\r\n</div>\r\n\r\n</body>\r\n\r\n</html>\r\n", "id": 1747.0}