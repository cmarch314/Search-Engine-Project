{"text": "1 Introduction CyberT works by calculating a bayesian regularized t statistic for each gene This is a lot of language to basically say that we calculate a t statistic for each gene but we tweak the variance of each group a little using genes with similar expression values The Mann Whitney or Wilcoxon Rank Sum or Mann Whitney Wilcoxon MWW test is the non parametric version of the t test Non parametric in this case means that the statistic works on the ranks of the data rather than assuming some parameterized underlying distribution Proper analysis of the t statistic is dependent on assuming that each group is from a normal distribution i e is from a distribution parameterized by a mean and variance The MWW statistic is very closely related to the area under the receiver operating characteristic curve i e the area under the ROC curve or AUC In fact if x is a vector of predictions on a set of positive examples and y is a vector of predictions on a set of negative examples then AUC x y MWW x y x y In this post I m going to demonstrate how to calculate the AUC for each gene in a microarray dataset This basically says if we used a single gene s expression value as a predictor for two different phenotypes what would the AUC of this predictor be Or another way to think of it is as a MWW statistic that is normalized to be between and 1 or really between 5 and 1 One can also calculate p values for these AUC s based on the p values of the MWW stats 2 The Function Here is a function to do this calculation This actually calculates a one vs rest for all groups calcAUCArray Function to calculate the AUC by row for a matrix of predictions Input x the data frame or array repPerCond a vector of the number per condition assumes the data frame is in order calcAUCArray function x repPerCond calcPVals T classFactor factor rep 1 length repPerCond repPerCond The Auc is equiv to the Mann Whitney or Wilcox test For generalizations beyond 2 class do a one vs rest scheme classIndices tapply 1 ncol x classFactor list theRes sapply classIndices function inds sapply as data frame t x function y maxW length inds length y inds theTest wilcox test y inds y inds res theTest statistic maxW This line flips the prediction AUC 5 is worse than random theRes apply theRes 2 function x ifelse x 5 x 1 x colnames theRes paste AUC Cond 1 length repPerCond sep if calcPVals thePVals sapply classIndices function inds sapply as data frame t x function y theTest wilcox test y inds y inds theTest p value colnames thePVals paste AUC PVal Cond 1 length repPerCond sep theRes cbind theRes thePVals theRes 3 An Example Here let s fake up some data and show how the MWW could be useful in finding some genes of interest First make some fake completely normal data data data frame matrix rnorm 1 nrow 1 colnames data c sprintf Ctrl d 1 5 sprintf Expt d 1 5 head data Ctrl1 Ctrl2 Ctrl3 Ctrl4 Ctrl5 Expt1 1 1 5 75 25 1 3 88148 2 4442575 2396374 164 639 46255951 2 4274524 1467435 19292496 3 934266 1 3382232 1 44391446 3 32498 54 38788724 1 18156 93 4588947 442722 1 74483569 4 1 61588825 78319953 7895495 3512329 1 7633533 8 2 991 5 15815873 71218677 54358175 1 1996652 9436978 64 61365 6 1 68811312 1 21523 8171754 1 148944 1 62371 5 1 39887543 Expt2 Expt3 Expt4 Expt5 1 1977868 1 2951139 94278682 4581 5214 2 1 131822 3654534 45353342 514351 83 3 9689614 7129198 7177276 1 175522844 4 1 799745 4597961 564 8353 1 4465736 5 4 4646 52489 7 49722154 9 112 2 6 5671171 939 662 12485235 362181267 Then let s randomly pick a gene and just right shift the expression of just the Expt cols here by 2 fakeGeneId sample 1 1 1 fakeGeneId 1 1 data fakeGeneId 6 1 data fakeGeneId 6 1 2 Now let s calculate the AUCs and p values here repPerCond c 5 5 5 in each group aucs calcAUCArray data repPerCond aucs AUC Cond 1 AUC Cond 2 AUC PVal Cond 1 AUC PVal Cond 2 V1 W 56 56 841269841 841269841 V2 W 6 6 69 47619 69 47619 V3 W 6 6 69 47619 69 47619 V4 W 6 6 69 47619 69 47619 V5 W 76 76 222222222 222222222 V6 W 68 68 42 634921 42 634921 V7 W 52 52 1 1 V8 W 8 8 15 793651 15 793651 V9 W 56 56 841269841 841269841 V1 W 1 1 79365 8 79365 8 aucs fakeGeneId AUC Cond 1 AUC Cond 2 AUC PVal Cond 1 AUC PVal Cond 2 1 1 79365 8 79365 8 There you go AUCs and you should see a much lower p value for the fakeGeneId File translated from TEX by TTH version 3 85 On 7 Apr 2 11 17 54 ", "_id": "http://www.ics.uci.edu/~dock/mkayala/bioblog/aucCalculation/aucCalc.html", "title": " introduction", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n           \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<html>\n<meta name=\"GENERATOR\" content=\"TtH 3.85\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n <style type=\"text/css\"> div.p { margin-top: 7pt;}</style>\n <style type=\"text/css\"><!--\n td div.comp { margin-top: -0.6ex; margin-bottom: -1ex;}\n td div.comb { margin-top: -0.6ex; margin-bottom: -.6ex;}\n td div.hrcomp { line-height: 0.9; margin-top: -0.8ex; margin-bottom: -1ex;}\n td div.norm {line-height:normal;}\n span.roman {font-family: serif; font-style: normal; font-weight: normal;} \n span.overacc2 {position: relative;  left: .8em; top: -1.2ex;}\n span.overacc1 {position: relative;  left: .6em; top: -1.2ex;} --></style>\n \n\n \n<title> Introduction</title>\n\n <h2><a name=\"tth_sEc1\">\n1</a>&nbsp;&nbsp;Introduction</h2>\n\n<div class=\"p\"><!----></div>\nCyberT works by calculating a bayesian regularized t-statistic for each gene.   \nThis is a lot of language to basically say that we calculate a t-statistic for each gene, but we tweak the variance of each group a little using genes with similar expression values.  \n\n<div class=\"p\"><!----></div>\nThe Mann-Whitney (or Wilcoxon Rank-Sum, or Mann-Whitney-Wilcoxon (MWW)) test is the non-parametric version of the t-test.  \nNon-parametric in this case means that the statistic works on the ranks of the data, rather than assuming some parameterized underlying distribution.  \nProper analysis of the t-statistic is dependent on assuming that each group is from a normal distribution, i.e., is from a distribution parameterized by a mean and variance.\nThe MWW statistic is very closely related to the area under the receiver operating characteristic curve, i.e., the area under the ROC curve, or AUC.\nIn fact, if x is a vector of predictions on a set of positive examples, and y is a vector of predictions on a set of negative examples, then:\n\n<br clear=\"all\" /><table border=\"0\" width=\"100%\"><tr><td>\n<table align=\"center\" cellspacing=\"0\"  cellpadding=\"2\"><tr><td nowrap=\"nowrap\" align=\"center\">\n <span class=\"roman\">AUC</span>(x,y) = <span class=\"roman\">MWW</span>(x, y)/(<font face=\"symbol\">|</font\n>x<font face=\"symbol\">|</font\n> * <font face=\"symbol\">|</font\n>y<font face=\"symbol\">|</font\n>) </td></tr></table>\n</td></tr></table>\n\n\n\n<div class=\"p\"><!----></div>\nIn this post, I'm going to demonstrate how to calculate the AUC for each gene in a microarray dataset.  \nThis basically says, if we used a single gene's expression value as a predictor for two different phenotypes, what would the AUC of this predictor be?\nOr another way to think of it is as a MWW statistic that is normalized to be between 0 and 1, or really between 0.5 and 1.\nOne can also calculate p-values for these AUC's based on the p-values of the MWW stats.\n\n<div class=\"p\"><!----></div>\n <h2><a name=\"tth_sEc2\">\n2</a>&nbsp;&nbsp;The Function</h2>\n\n<div class=\"p\"><!----></div>\nHere is a function to do this calculation.  This actually calculates a one-vs-rest for all groups.\n\n<div class=\"p\"><!----></div>\n   <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;######################################################################\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;calcAUCArray\n&#62;&nbsp;#\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;Function&nbsp;to&nbsp;calculate&nbsp;the&nbsp;AUC&nbsp;by&nbsp;row&nbsp;for&nbsp;a&nbsp;matrix&nbsp;of&nbsp;predictions\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;Input:\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;the&nbsp;data.frame&nbsp;or&nbsp;array&nbsp;\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repPerCond&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;a&nbsp;vector&nbsp;of&nbsp;the&nbsp;number&nbsp;per&nbsp;condition&nbsp;(assumes&nbsp;\n&#62;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;data.frame&nbsp;is&nbsp;in&nbsp;order).\n&#62;&nbsp;######################################################################\n&#62;&nbsp;calcAUCArray&nbsp;&lt;-&nbsp;function(x,&nbsp;repPerCond,&nbsp;calcPVals&nbsp;=&nbsp;T){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classFactor&nbsp;&lt;-&nbsp;factor(rep(1:length(repPerCond),&nbsp;repPerCond))\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#The&nbsp;Auc&nbsp;is&nbsp;equiv&nbsp;to&nbsp;the&nbsp;Mann-Whitney&nbsp;or&nbsp;Wilcox&nbsp;test.&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#For&nbsp;generalizations&nbsp;beyond&nbsp;2&nbsp;class,&nbsp;do&nbsp;a&nbsp;one-vs-rest&nbsp;scheme.\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classIndices&nbsp;&lt;-&nbsp;tapply(1:ncol(x),&nbsp;classFactor,&nbsp;list)\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theRes&nbsp;&lt;-&nbsp;sapply(classIndices,&nbsp;function(inds){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sapply(as.data.frame(t(x)),&nbsp;function(y){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxW&nbsp;&lt;-&nbsp;length(inds)*length(y[-inds]);\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theTest&nbsp;&lt;-&nbsp;&nbsp;wilcox.test(y[inds],&nbsp;y[-inds]);\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;&lt;-&nbsp;theTest$statistic/maxW;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;This&nbsp;line&nbsp;flips&nbsp;the&nbsp;prediction&nbsp;(AUC&nbsp;&lt;&nbsp;0.5&nbsp;is&nbsp;worse&nbsp;than&nbsp;random)\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theRes&nbsp;&lt;-&nbsp;apply(theRes,&nbsp;2,&nbsp;function(x){ifelse(x&nbsp;&#62;&nbsp;0.5,&nbsp;x,&nbsp;1-x)})\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colnames(theRes)&nbsp;&lt;-&nbsp;paste(\"AUC_Cond_\",&nbsp;1:length(repPerCond),&nbsp;sep='');\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(calcPVals){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thePVals&nbsp;&lt;-&nbsp;sapply(classIndices,&nbsp;function(inds){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sapply(as.data.frame(t(x)),&nbsp;function(y){\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theTest&nbsp;&lt;-&nbsp;&nbsp;wilcox.test(y[inds],&nbsp;y[-inds]);\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theTest$p.value;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colnames(thePVals)&nbsp;&lt;-&nbsp;paste(\"AUC_PVal_Cond_\",&nbsp;1:length(repPerCond),&nbsp;sep='');\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theRes&nbsp;&lt;-&nbsp;cbind(theRes,&nbsp;thePVals)\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theRes;\n+&nbsp;}&nbsp;\n&nbsp;\n</pre> </font>\n\n<div class=\"p\"><!----></div>\n <h2><a name=\"tth_sEc3\">\n3</a>&nbsp;&nbsp;An Example</h2>\n\n<div class=\"p\"><!----></div>\nHere, let's fake up some data and show how the MWW could be useful in finding some genes of interest.\nFirst, make some fake completely normal data:\n\n<div class=\"p\"><!----></div>\n  <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;data&nbsp;&lt;-&nbsp;data.frame(matrix(rnorm(100),&nbsp;nrow=10))\n&#62;&nbsp;colnames(data)&nbsp;&lt;-&nbsp;c(sprintf('Ctrl%d',&nbsp;1:5),&nbsp;\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf('Expt%d',&nbsp;1:5))\n&#62;&nbsp;head(data)\n&nbsp;\n</pre> </font>\n  <font color=\"#0000FF\">\n<pre>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expt1\n1&nbsp;&nbsp;1.05075025&nbsp;-1.30088148&nbsp;&nbsp;2.04442575&nbsp;&nbsp;0.2396374&nbsp;-0.1640639&nbsp;0.46255951\n2&nbsp;-0.04274524&nbsp;&nbsp;0.14674350&nbsp;&nbsp;0.19292496&nbsp;-3.0934266&nbsp;&nbsp;1.3382232&nbsp;1.44391446\n3&nbsp;&nbsp;0.32498054&nbsp;-0.38788724&nbsp;-1.18156093&nbsp;&nbsp;0.4588947&nbsp;&nbsp;0.4427220&nbsp;1.74483569\n4&nbsp;&nbsp;1.61588825&nbsp;-0.78319953&nbsp;-0.07895495&nbsp;-0.3512329&nbsp;&nbsp;1.7633533&nbsp;0.08020991\n5&nbsp;-0.15815873&nbsp;-0.71218677&nbsp;-0.54358175&nbsp;&nbsp;1.1996652&nbsp;-0.9436978&nbsp;0.64061365\n6&nbsp;-1.68811312&nbsp;-0.01021523&nbsp;&nbsp;0.81717540&nbsp;&nbsp;1.0148944&nbsp;-1.6237105&nbsp;1.39887543\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expt2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expt3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expt4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Expt5\n1&nbsp;&nbsp;0.1977868&nbsp;&nbsp;1.2951139&nbsp;-0.94278682&nbsp;-0.458105214\n2&nbsp;&nbsp;1.1318220&nbsp;-0.3654534&nbsp;&nbsp;0.45353342&nbsp;-0.514351083\n3&nbsp;-0.9689614&nbsp;-0.7129198&nbsp;&nbsp;0.07177276&nbsp;-1.175522844\n4&nbsp;-1.7997450&nbsp;-0.4597961&nbsp;&nbsp;0.56408353&nbsp;&nbsp;1.044657360\n5&nbsp;-0.4004646&nbsp;&nbsp;0.5248907&nbsp;&nbsp;0.49722154&nbsp;&nbsp;0.009011202\n6&nbsp;&nbsp;0.5671171&nbsp;&nbsp;0.9390662&nbsp;-0.12485235&nbsp;&nbsp;0.362181267\n&nbsp;\n</pre> </font>\n\n<div class=\"p\"><!----></div>\nThen, let's randomly pick a gene and just right shift the expression of just the Expt cols here by 2.\n\n<div class=\"p\"><!----></div>\n  <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;fakeGeneId&nbsp;&lt;-&nbsp;sample(1:10,&nbsp;1)\n&#62;&nbsp;fakeGeneId\n&nbsp;\n</pre> </font>\n  <font color=\"#0000FF\">\n<pre>\n[1]&nbsp;10\n&nbsp;\n</pre> </font>\n  <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;data[fakeGeneId,&nbsp;6:10]&nbsp;&lt;-&nbsp;data[fakeGeneId,&nbsp;6:10]&nbsp;+&nbsp;2;\n&nbsp;\n</pre> </font>\n\n<div class=\"p\"><!----></div>\nNow, let's calculate the AUCs and p-values here.\n\n<div class=\"p\"><!----></div>\n  <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;repPerCond&nbsp;&lt;-&nbsp;c(5,5)&nbsp;#&nbsp;5&nbsp;in&nbsp;each&nbsp;group\n&#62;&nbsp;aucs&nbsp;&lt;-&nbsp;calcAUCArray(data,&nbsp;repPerCond)\n&#62;&nbsp;aucs\n&nbsp;\n</pre> </font>\n  <font color=\"#0000FF\">\n<pre>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AUC_Cond_1&nbsp;AUC_Cond_2&nbsp;AUC_PVal_Cond_1&nbsp;AUC_PVal_Cond_2\nV1.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.841269841&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.841269841\nV2.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190\nV3.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190\nV4.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.60&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.690476190\nV5.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.222222222&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.222222222\nV6.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.68&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.420634921&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.420634921\nV7.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.000000000\nV8.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.150793651&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.150793651\nV9.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.56&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.841269841&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.841269841\nV10.W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.007936508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.007936508\n&nbsp;\n</pre> </font>\n  <font color=\"#FF0000\">\n<pre>\n&#62;&nbsp;aucs[fakeGeneId,]\n&nbsp;\n</pre> </font>\n  <font color=\"#0000FF\">\n<pre>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AUC_Cond_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AUC_Cond_2&nbsp;AUC_PVal_Cond_1&nbsp;AUC_PVal_Cond_2&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;1.000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.000000000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.007936508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.007936508&nbsp;\n&nbsp;\n</pre> </font>\n\n<div class=\"p\"><!----></div>\nThere you go!  AUCs and you should see a much lower p-value for the fakeGeneId!\n\n<div class=\"p\"><!----></div>\n\n<br /><br /><hr /><small>File translated from\nT<sub><font size=\"-1\">E</font></sub>X\nby <a href=\"http://hutchinson.belmont.ma.us/tth/\">\nT<sub><font size=\"-1\">T</font></sub>H</a>,\nversion 3.85.<br />On  7 Apr 2011, 17:54.</small>\n</html>\n", "id": 42596.0}