{"text": "Main Page Modules Data Structures File List Data Fields Globals Related Pages APBS Programmers Guide 4 APBS was written by Nathan A Baker Additional contributing authors listed in the code documentation Table of Contents Programming Style Application programming interface documentation Modules Class list Class members Class methods License APBS Adaptive Poisson Boltzmann Solver Nathan A Baker baker biochem wustl edu Dept of Biochemistry and Molecular Biophysics Center for Computational Biology Washington University in St Louis Additional contributing authors listed in the code documentation Copyright c 2 2 2 5 Washington University in St Louis All Rights Reserved Portions Copyright c 1999 2 2 The Regents of the University of California Portions Copyright c 1995 Michael Holst This program is free software you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation either version 2 of the License or at your option any later version This program is distributed in the hope that it will be useful but WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU General Public License for more details You should have received a copy of the GNU General Public License along with this program if not write to the Free Software Foundation Inc 59 Temple Place Suite 33 Boston MA 2111 13 7 USA This documentation provides information about the programming interface provided by the APBS software and a general guide to linking to the APBS libraries Information about installation configuration and general usage can be found in the User s Guide Programming Style APBS was developed following the Clean OO C style of Mike Holst In short Clean OO C code is written in a object oriented ISO C compliant fashion and can be compiled with either a C or C compiler Following this formalism all public data is enclosed in structures which resemble C classes These structures and member functions are then declared in a public header file which provides a concise description of the interface for the class Private functions and data are included in private header files or simply the source code files themselves which are not distributed When using the library the end user only sees the public header file and the compiled library and is therefore hopefully oblivious to the private members and functions Each class is also equipped with a constructor and destructor function which is responsible for allocating and freeing any memory required by the instatiated objects As mentioned above public data members are enclosed in C structures which are visible to the end user Public member functions are generated by mangling the class and function names and passing a pointer to the object on which the member function is supposed to act For example a public member function with the C declaration public double Foo bar int i double d would be declared as double Foo bar Foo thee int i double d where VEXTERNC is a compiler dependent macro the underscore replaces the C double colon and thee replaces the this variable implicit in all C classes Since they do not appear in public header files private functions could be declared in any format pleasing to the user however the above declaration convention should generally be used for both public and private functions Within the source code the public and private function declarations definitions are prefaced by the macros VPUBLIC and VPRIVATE respectively These are macros which reduce global name pollution similar to encapsulating private data withing C classes The only C functions not explicitly covered by the above declaration scheme are the constructors used to allocate and initialize class data members and destructors used to free allocated memory These are declared in the following fashion a constructor with the C declaration public void Foo Foo int i double d would be declared as Foo Foo ctor int i double d which returns a pointer to the newly constructed Foo object Likewise a destructor declared as public void Foo Foo in C would be void Foo dtor Foo thee in Clean OO C Finally inline functions in C are simply treated as macros in Clean OO C and declared defined using define statements in the public header file See any of the APBS header files for more information on Clean OO C programming styles Application programming interface documentation The API documentation for this code was generated by doxygen You can either view the API documentation by using the links at the top of this page or the slight re worded re interpreted list below Class overview Class declarations Class members Class methods Generated on Tue Dec 6 1 5 31 2 5 for APBS by 1 3 5", "_id": "http://www.ics.uci.edu/~dock/manuals/apbs/html/programmer/index.html", "title": "apbs: apbs programmers guide", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">\n<title>APBS: APBS Programmers Guide</title>\n<link href=\"apbs.css\" rel=\"stylesheet\" type=\"text/css\">\n</head><body>\n<!-- Generated by Doxygen 1.3.5 -->\n<div class=\"qindex\"><a class=\"qindexHL\" href=\"index.html\">Main&nbsp;Page</a> | <a class=\"qindex\" href=\"modules.html\">Modules</a> | <a class=\"qindex\" href=\"annotated.html\">Data&nbsp;Structures</a> | <a class=\"qindex\" href=\"files.html\">File&nbsp;List</a> | <a class=\"qindex\" href=\"functions.html\">Data&nbsp;Fields</a> | <a class=\"qindex\" href=\"globals.html\">Globals</a> | <a class=\"qindex\" href=\"pages.html\">Related&nbsp;Pages</a></div>\n<h1>APBS Programmers Guide </h1>\n<p>\n<h3 align=\"center\">0.4.0 </h3><center></center><p>\n<center> APBS was written by Nathan A. Baker.<br>\n Additional contributing authors listed in the code documentation. </center><p>\n<hr>\n <h2><a class=\"anchor\" name=\"toc\">\nTable of Contents</a></h2>\n<ul>\n<li>\n<a class=\"el\" href=\"index.html#style\">Programming Style</a> </li>\n<li>\n<a class=\"el\" href=\"index.html#api\">Application programming interface documentation</a> <ul>\n<li>\n<a href=\"modules.html\">Modules</a> </li>\n<li>\n<a href=\"annotated.html\">Class list</a> </li>\n<li>\n<a href=\"functions.html\">Class members</a> </li>\n<li>\n<a href=\"globals.html\">Class methods</a> </li>\n</ul>\n</li>\n</ul>\n<p>\n<hr>\n <h2><a class=\"anchor\" name=\"license\">\nLicense</a></h2>\nAPBS -- Adaptive Poisson-Boltzmann Solver <br>\n<br>\n Nathan A. Baker (<a href=\"mailto:baker@biochem.wustl.edu\">baker@biochem.wustl.edu</a>) <br>\n Dept. of Biochemistry and Molecular Biophysics <br>\n Center for Computational Biology <br>\n Washington University in St. Louis <br>\n <br>\n<br>\n Additional contributing authors listed in the code documentation. <br>\n<br>\n Copyright (c) 2002-2005. Washington University in St. Louis.<br>\n All Rights Reserved.<br>\n Portions Copyright (c) 1999-2002. The Regents of the University of California. <br>\n Portions Copyright (c) 1995. Michael Holst.<br>\n <p>\nThis program is free software; you can redistribute it and/or modify it under the terms of the <a href=\"http://www.gnu.org/licenses/gpl.txt\">GNU General Public License</a> as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <p>\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. <p>\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA<p>\n<hr>\n <p>\nThis documentation provides information about the programming interface provided by the APBS software and a general guide to linking to the APBS libraries. Information about installation, configuration, and general usage can be found in the <a href=\"user.html\">User's Guide</a>. <hr>\n<h2><a class=\"anchor\" name=\"style\">\nProgramming Style</a></h2>\nAPBS was developed following the <a href=\"http://scicomp.ucsd.edu/~mholst/codes/maloc/cleanc.html\">Clean OO C</a> style of Mike Holst. In short, Clean OO C code is written in a object-oriented, ISO C-compliant fashion, and can be compiled with either a C or C++ compiler. <p>\nFollowing this formalism, all public data is enclosed in structures which resemble C++ classes. These structures and member functions are then declared in a public header file which provides a concise description of the interface for the class. Private functions and data are included in private header files (or simply the source code files themselves) which are not distributed. When using the library, the end-user only sees the public header file and the compiled library and is therefore (hopefully) oblivious to the private members and functions. Each class is also equipped with a constructor and destructor function which is responsible for allocating and freeing any memory required by the instatiated objects.<p>\nAs mentioned above, public data members are enclosed in C structures which are visible to the end-user. Public member functions are generated by mangling the class and function names <em>and</em> passing a pointer to the object on which the member function is supposed to act. For example, a public member function with the C++ declaration <pre><div>\n   public double Foo::bar(int i, double d)\n   </pre></div> would be declared as <pre><div>\n   double Foo_bar(Foo *thee, int i, double d)\n   </pre></div> where <code>VEXTERNC</code> is a compiler-dependent macro, the underscore <code>_</code> replaces the C++ double-colon <code>::</code>, and <code>thee</code> replaces the <code>this</code> variable implicit in all C++ classes. Since they do not appear in public header files, private functions could be declared in any format pleasing to the user, however, the above declaration convention should generally be used for both public and private functions. Within the source code, the public and private function declarations/definitions are prefaced by the macros <code>VPUBLIC</code> and <code>VPRIVATE</code>, respectively. These are macros which reduce global name pollution, similar to encapsulating private data withing C++ classes.<p>\nThe only C++ functions not explicitly covered by the above declaration scheme are the constructors (used to allocate and initialize class data members) and destructors (used to free allocated memory). These are declared in the following fashion: a constructor with the C++ declaration <pre><div>\n    public void Foo::Foo(int i, double d)\n    </pre></div> would be declared as <pre><div>\n     Foo* Foo_ctor(int i, double d)\n     </pre></div> which returns a pointer to the newly constructed <code>Foo</code> object. Likewise, a destructor declared as <pre><div>\n     public void Foo::~Foo()\n     </pre></div> in C++ would be <pre><div>\n     void Foo_dtor(Foo **thee)\n     </pre></div> in Clean OO C. <p>\nFinally, inline functions in C++ are simply treated as macros in Clean OO C and declared/defined using <code>#define</code> statements in the public header file. <p>\nSee any of the APBS header files for more information on Clean OO C programming styles.<h2><a class=\"anchor\" name=\"api\">\nApplication programming interface documentation</a></h2>\nThe API documentation for this code was generated by <a href=\"http://www.doxygen.org\">doxygen</a>. You can either view the API documentation by using the links at the top of this page, or the slight re-worded/re-interpreted list below: <ul>\n<li>\n<a href=\"modules.html\">Class overview</a> </li>\n<li>\n<a href=\"annotated.html\">Class declarations</a> </li>\n<li>\n<a href=\"functions.html\">Class members</a> </li>\n<li>\n<a href=\"globals.html\">Class methods</a> </li>\n</ul>\n<hr size=\"1\"><address style=\"align: right;\"><small>Generated on Tue Dec 6 10:05:31 2005 for APBS by\n<a href=\"http://www.doxygen.org/index.html\">\n<img src=\"doxygen.png\" alt=\"doxygen\" align=\"middle\" border=0 > \n</a>1.3.5 </small></address>\n</body>\n</html>\n", "id": 36950.0}