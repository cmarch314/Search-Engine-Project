{"text": "View Javadoc 1 2 Created on Jul 29 2 4 3 4 package swirl workspace common 5 6 import java io ByteArrayOutputStream 7 import java io IOException 8 import java io OutputStream 9 import java io PrintWriter 1 11 import javax xml transform Result 12 import javax xml transform Source 13 import javax xml transform Transformer 14 import javax xml transform TransformerFactory 15 import javax xml transform dom DOMSource 16 import javax xml transform stream StreamResult 17 18 import org apache commons logging Log 19 import org apache commons logging LogFactory 2 import org dom4j io OutputFormat 21 import org dom4j io XMLWriter 22 import org w3c dom Document 23 24 25 DOCUMENT ME 26 27 author dingx 28 29 public final class DocumentLogger 3 31 logger for this class 32 private static Log myLog LogFactory getLog DocumentLogger class 33 34 35 Hiding the constructor since this is a bunch of utils 36 37 private DocumentLogger 38 39 4 Write an XML document out to the log with a message 41 42 param log the log to output to 43 param msg the message to accompany the document 44 param doc the document to log 45 46 public static void logDocument final Log log final String msg 47 final org dom4j Document doc 48 49 ByteArrayOutputStream output new ByteArrayOutputStream 5 51 writeDocument doc output 52 53 if log isDebugEnabled 54 55 log debug msg output toString 56 57 58 59 6 Write an XML document out to the log 61 62 param log the log to output to 63 param doc the document to log 64 65 public static void logDocument final Log log final Document doc 66 67 logDocument log doc 68 69 7 71 Write an XML document out to the log with a message 72 73 param log the log to output to 74 param msg the message to accompany the document 75 param doc the document to log 76 77 public static void logDocument final Log log final String msg 78 final Document doc 79 8 ByteArrayOutputStream output new ByteArrayOutputStream 81 82 writeDocument doc output 83 84 if log isDebugEnabled 85 86 log debug msg output toString 87 88 89 9 91 Utility method to write the contents of an XML document to an 92 outputstream This method utilizes the Transformer class 93 94 param body the document to output 95 param stream the stream to write to 96 97 public static void writeDocument final Document body 98 final OutputStream stream 99 1 if body null 1 1 1 2 PrintWriter out new PrintWriter stream true 1 3 1 4 try 1 5 1 6 Source source new DOMSource body 1 7 Result result new StreamResult out 1 8 Transformer xformer TransformerFactory newInstance 1 9 newTransformer 11 111 xformer setOutputProperty http www w3 org 1999 XSL Transform indent 112 yes 113 xformer transform source result 114 115 catch Exception e 116 117 myLog error e e 118 119 12 121 122 123 Write the document body out to a stream 124 125 param body the document to write 126 param stream the stream to write to 127 128 public static void writeDocument final org dom4j Document body 129 final OutputStream stream 13 131 if body null 132 133 PrintWriter out new PrintWriter stream true 134 OutputFormat format OutputFormat createPrettyPrint 135 XMLWriter writer new XMLWriter out format 136 137 try 138 139 writer write body 14 writer flush 141 142 catch IOException ex 143 144 myLog error trouble writing doc to stream ex 145 146 147 148 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/common/DocumentLogger.html", "title": "documentlogger xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>DocumentLogger xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../apidocs/swirl/workspace/common/DocumentLogger.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Jul 29, 2004</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> */</em>\n<a name=\"4\" href=\"#4\">4</a>   <strong>package</strong> <a href=\"../../../swirl/workspace/common/package-summary.html\">swirl.workspace.common</a>;\n<a name=\"5\" href=\"#5\">5</a>   \n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.io.ByteArrayOutputStream;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.io.IOException;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> java.io.OutputStream;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> java.io.PrintWriter;\n<a name=\"10\" href=\"#10\">10</a>  \n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> javax.xml.transform.Result;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> javax.xml.transform.Source;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> javax.xml.transform.Transformer;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> javax.xml.transform.TransformerFactory;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> javax.xml.transform.dom.DOMSource;\n<a name=\"16\" href=\"#16\">16</a>  <strong>import</strong> javax.xml.transform.stream.StreamResult;\n<a name=\"17\" href=\"#17\">17</a>  \n<a name=\"18\" href=\"#18\">18</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"19\" href=\"#19\">19</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"20\" href=\"#20\">20</a>  <strong>import</strong> org.dom4j.io.OutputFormat;\n<a name=\"21\" href=\"#21\">21</a>  <strong>import</strong> org.dom4j.io.XMLWriter;\n<a name=\"22\" href=\"#22\">22</a>  <strong>import</strong> org.w3c.dom.Document;\n<a name=\"23\" href=\"#23\">23</a>  \n<a name=\"24\" href=\"#24\">24</a>  <em>/**<em>*</em></em>\n<a name=\"25\" href=\"#25\">25</a>  <em> * DOCUMENT ME!</em>\n<a name=\"26\" href=\"#26\">26</a>  <em> *</em>\n<a name=\"27\" href=\"#27\">27</a>  <em> * @author dingx</em>\n<a name=\"28\" href=\"#28\">28</a>  <em> */</em>\n<a name=\"29\" href=\"#29\">29</a>  <strong>public</strong> <strong>final</strong> <strong>class</strong> <a href=\"../../../swirl/workspace/common/DocumentLogger.html\">DocumentLogger</a>\n<a name=\"30\" href=\"#30\">30</a>  {\n<a name=\"31\" href=\"#31\">31</a>      <em>/**<em>* logger for this class */</em></em>\n<a name=\"32\" href=\"#32\">32</a>      <strong>private</strong> <strong>static</strong> Log myLog = LogFactory.getLog(DocumentLogger.<strong>class</strong>);\n<a name=\"33\" href=\"#33\">33</a>  \n<a name=\"34\" href=\"#34\">34</a>      <em>/**<em>*</em></em>\n<a name=\"35\" href=\"#35\">35</a>  <em>     * Hiding the constructor since this is a bunch of utils</em>\n<a name=\"36\" href=\"#36\">36</a>  <em>     */</em>\n<a name=\"37\" href=\"#37\">37</a>      <strong>private</strong> <a href=\"../../../swirl/workspace/common/DocumentLogger.html\">DocumentLogger</a>(){}\n<a name=\"38\" href=\"#38\">38</a>  \n<a name=\"39\" href=\"#39\">39</a>      <em>/**<em>*</em></em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     * Write an XML document out to the log with a message</em>\n<a name=\"41\" href=\"#41\">41</a>  <em>     *</em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     * @param log the log to output to</em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * @param msg the message to accompany the document</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     * @param doc the document to log</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     */</em>\n<a name=\"46\" href=\"#46\">46</a>      <strong>public</strong> <strong>static</strong> <strong>void</strong> logDocument(<strong>final</strong> Log log, <strong>final</strong> String msg,\n<a name=\"47\" href=\"#47\">47</a>                                     <strong>final</strong> org.dom4j.Document doc)\n<a name=\"48\" href=\"#48\">48</a>      {\n<a name=\"49\" href=\"#49\">49</a>          ByteArrayOutputStream output = <strong>new</strong> ByteArrayOutputStream();\n<a name=\"50\" href=\"#50\">50</a>  \n<a name=\"51\" href=\"#51\">51</a>          writeDocument(doc, output);\n<a name=\"52\" href=\"#52\">52</a>  \n<a name=\"53\" href=\"#53\">53</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"54\" href=\"#54\">54</a>          {\n<a name=\"55\" href=\"#55\">55</a>              log.debug(msg + <span class=\"string\">\"  \"</span> + output.toString());\n<a name=\"56\" href=\"#56\">56</a>          }\n<a name=\"57\" href=\"#57\">57</a>      }\n<a name=\"58\" href=\"#58\">58</a>  \n<a name=\"59\" href=\"#59\">59</a>      <em>/**<em>*</em></em>\n<a name=\"60\" href=\"#60\">60</a>  <em>     * Write an XML document out to the log</em>\n<a name=\"61\" href=\"#61\">61</a>  <em>     *</em>\n<a name=\"62\" href=\"#62\">62</a>  <em>     * @param log the log to output to</em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     * @param doc the document to log</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     */</em>\n<a name=\"65\" href=\"#65\">65</a>      <strong>public</strong> <strong>static</strong> <strong>void</strong> logDocument(<strong>final</strong> Log log, <strong>final</strong> Document doc)\n<a name=\"66\" href=\"#66\">66</a>      {\n<a name=\"67\" href=\"#67\">67</a>          logDocument(log, <span class=\"string\">\"\"</span>, doc);\n<a name=\"68\" href=\"#68\">68</a>      }\n<a name=\"69\" href=\"#69\">69</a>  \n<a name=\"70\" href=\"#70\">70</a>      <em>/**<em>*</em></em>\n<a name=\"71\" href=\"#71\">71</a>  <em>     * Write an XML document out to the log with a message</em>\n<a name=\"72\" href=\"#72\">72</a>  <em>     *</em>\n<a name=\"73\" href=\"#73\">73</a>  <em>     * @param log the log to output to</em>\n<a name=\"74\" href=\"#74\">74</a>  <em>     * @param msg the message to accompany the document</em>\n<a name=\"75\" href=\"#75\">75</a>  <em>     * @param doc the document to log</em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     */</em>\n<a name=\"77\" href=\"#77\">77</a>      <strong>public</strong> <strong>static</strong> <strong>void</strong> logDocument(<strong>final</strong> Log log, <strong>final</strong> String msg,\n<a name=\"78\" href=\"#78\">78</a>                                     <strong>final</strong> Document doc)\n<a name=\"79\" href=\"#79\">79</a>      {\n<a name=\"80\" href=\"#80\">80</a>          ByteArrayOutputStream output = <strong>new</strong> ByteArrayOutputStream();\n<a name=\"81\" href=\"#81\">81</a>  \n<a name=\"82\" href=\"#82\">82</a>          writeDocument(doc, output);\n<a name=\"83\" href=\"#83\">83</a>  \n<a name=\"84\" href=\"#84\">84</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"85\" href=\"#85\">85</a>          {\n<a name=\"86\" href=\"#86\">86</a>              log.debug(msg + <span class=\"string\">\"  \"</span> + output.toString());\n<a name=\"87\" href=\"#87\">87</a>          }\n<a name=\"88\" href=\"#88\">88</a>      }\n<a name=\"89\" href=\"#89\">89</a>  \n<a name=\"90\" href=\"#90\">90</a>      <em>/**<em>*</em></em>\n<a name=\"91\" href=\"#91\">91</a>  <em>     * Utility method to write the contents of an XML document to an</em>\n<a name=\"92\" href=\"#92\">92</a>  <em>     * outputstream. This method utilizes the Transformer class</em>\n<a name=\"93\" href=\"#93\">93</a>  <em>     *</em>\n<a name=\"94\" href=\"#94\">94</a>  <em>     * @param body the document to output</em>\n<a name=\"95\" href=\"#95\">95</a>  <em>     * @param stream the stream to write to</em>\n<a name=\"96\" href=\"#96\">96</a>  <em>     */</em>\n<a name=\"97\" href=\"#97\">97</a>      <strong>public</strong> <strong>static</strong> <strong>void</strong> writeDocument(<strong>final</strong> Document body,\n<a name=\"98\" href=\"#98\">98</a>                                       <strong>final</strong> OutputStream stream)\n<a name=\"99\" href=\"#99\">99</a>      {\n<a name=\"100\" href=\"#100\">100</a>         <strong>if</strong>(body != <strong>null</strong>)\n<a name=\"101\" href=\"#101\">101</a>         {\n<a name=\"102\" href=\"#102\">102</a>             PrintWriter out = <strong>new</strong> PrintWriter(stream, <strong>true</strong>);\n<a name=\"103\" href=\"#103\">103</a> \n<a name=\"104\" href=\"#104\">104</a>             <strong>try</strong>\n<a name=\"105\" href=\"#105\">105</a>             {\n<a name=\"106\" href=\"#106\">106</a>                 Source source = <strong>new</strong> DOMSource(body);\n<a name=\"107\" href=\"#107\">107</a>                 Result result = <strong>new</strong> StreamResult(out);\n<a name=\"108\" href=\"#108\">108</a>                 Transformer xformer = TransformerFactory.newInstance()\n<a name=\"109\" href=\"#109\">109</a>                                                         .newTransformer();\n<a name=\"110\" href=\"#110\">110</a> \n<a name=\"111\" href=\"#111\">111</a>                 xformer.setOutputProperty(<span class=\"string\">\"{http://www.w3.org/1999/XSL/Transform}indent\"</span>,\n<a name=\"112\" href=\"#112\">112</a>                                           <span class=\"string\">\"yes\"</span>);\n<a name=\"113\" href=\"#113\">113</a>                 xformer.transform(source, result);\n<a name=\"114\" href=\"#114\">114</a>             }\n<a name=\"115\" href=\"#115\">115</a>             <strong>catch</strong>(Exception e)\n<a name=\"116\" href=\"#116\">116</a>             {\n<a name=\"117\" href=\"#117\">117</a>                 myLog.error(e, e);\n<a name=\"118\" href=\"#118\">118</a>             }\n<a name=\"119\" href=\"#119\">119</a>         }\n<a name=\"120\" href=\"#120\">120</a>     }\n<a name=\"121\" href=\"#121\">121</a> \n<a name=\"122\" href=\"#122\">122</a>     <em>/**<em>*</em></em>\n<a name=\"123\" href=\"#123\">123</a> <em>     * Write the document body out to a stream</em>\n<a name=\"124\" href=\"#124\">124</a> <em>     *</em>\n<a name=\"125\" href=\"#125\">125</a> <em>     * @param body the document to write</em>\n<a name=\"126\" href=\"#126\">126</a> <em>     * @param stream the stream to write to</em>\n<a name=\"127\" href=\"#127\">127</a> <em>     */</em>\n<a name=\"128\" href=\"#128\">128</a>     <strong>public</strong> <strong>static</strong> <strong>void</strong> writeDocument(<strong>final</strong> org.dom4j.Document body,\n<a name=\"129\" href=\"#129\">129</a>                                      <strong>final</strong> OutputStream stream)\n<a name=\"130\" href=\"#130\">130</a>     {\n<a name=\"131\" href=\"#131\">131</a>         <strong>if</strong>(body != <strong>null</strong>)\n<a name=\"132\" href=\"#132\">132</a>         {\n<a name=\"133\" href=\"#133\">133</a>             PrintWriter out = <strong>new</strong> PrintWriter(stream, <strong>true</strong>);\n<a name=\"134\" href=\"#134\">134</a>             OutputFormat format = OutputFormat.createPrettyPrint();\n<a name=\"135\" href=\"#135\">135</a>             XMLWriter writer = <strong>new</strong> XMLWriter(out, format);\n<a name=\"136\" href=\"#136\">136</a> \n<a name=\"137\" href=\"#137\">137</a>             <strong>try</strong>\n<a name=\"138\" href=\"#138\">138</a>             {\n<a name=\"139\" href=\"#139\">139</a>                 writer.write(body);\n<a name=\"140\" href=\"#140\">140</a>                 writer.flush();\n<a name=\"141\" href=\"#141\">141</a>             }\n<a name=\"142\" href=\"#142\">142</a>             <strong>catch</strong>(IOException ex)\n<a name=\"143\" href=\"#143\">143</a>             {\n<a name=\"144\" href=\"#144\">144</a>                 myLog.error(<span class=\"string\">\"trouble writing doc to stream \"</span>, ex);\n<a name=\"145\" href=\"#145\">145</a>             }\n<a name=\"146\" href=\"#146\">146</a>         }\n<a name=\"147\" href=\"#147\">147</a>     }\n<a name=\"148\" href=\"#148\">148</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 33049.0}