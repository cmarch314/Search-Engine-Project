{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 6Kernel Related Tools 6 1 Introduction The following manual sections describe various tools that might be useful for various kinds of users of the CGAL kernel The kernel concept archetype describes a minimal model for the CGAL kernel that can be used for testing CGAL kernel compatibility of geometrical algorithm implementations It can be useful for all people developing CGAL style code that uses the CGAL kernel 6 2 Kernel Concept Archetype 6 2 1 Introduction CGAL defines the concept of a geometry kernel Such a kernel provides types construction objects and generalized predicates Most implementations of CG algorithms and data structures in the basic library of CGAL were done in a way that classes or functions can be parametrized with a geometric traits class In most cases this geometric traits class must be a model of the CGAL geometry kernel concept but there are some exceptions The CGAL distribution comes with a number of models or geometry kernels for instance the Cartesian kernel CGAL Cartesian or the homogeneous kernel CGAL Homogeneous that can be used with the packages of the basic library But does it mean that packages of the basic library are fully compatible with the CGAL kernel concept if they can be used with these CGAL kernel models Not neccesarily because such a package might also use member functions or global functions operators that are implemented for CGAL kernel types but not for other classes or kernels That s why it is important to verify whether the documented requirements of a package are really covered by the implementation Manual verification is error prone so there should be something better available in a generic library for this application That s why the CGAL kernel concept archetype CGAL Kernel archetype was developed It provides all functionality required by the CGAL kernel concept but nothing more so it can be seen as a minimal implementation of a model for the CGAL kernel concept It can be used for testing successful compilation of packages of the basic library with a minimal model Deprecated kernel functionality is not supported All geometrical types like the 2d 3d point or segment types of CGAL Kernel archetype have copy constructors default constructors and an assignment operator and nothing else Comparison operators are by default not supported but can be switched on by the flag CGAL CONCEPT ARCHETYPE ALLOW COMPARISONS The geometrical types of the concept archetype encapsulate no data members so runtime checks with the archetype are not very useful CGAL Kernel archetype is only meant for compilation checks with a minimal model in the testsuites of CGAL packages The header file for the concept archetype is CGAL Kernel archetype h The package supports the two and three dimensional part of the CGAL kernel concept The d dimensional part is not supported 6 2 2 Restricting the Interface Normally packages of the Basic Library or Extension packages use only a small subset of the functionality offered by models of the CGAL kernel concept In these cases testing with a model that offers only this used and documented subset makes sense CGAL Kernel archetype normally offers the full functionality all types functors and constructions of a CGAL kernel model but it is possible to restrict the interface If you want to do this you have to define the macro CGAL CA LIMITED INTERFACE before the inclusion of CGAL Kernel archetype h for switching on the interface limitation Now you have to tell the kernel archetype what types have to be provided by it For every type you have to define a macro The name of the macro is CGAL CA NAME OF KERNEL TYPE where NAME OF KERNEL TYPE is the name of the kernel type written in capitals that has to be provided by the kernel archetype for a specific package Lets have a look at a small example The kernel archetype has to provide in some test suite a limited interface The interface has to offer type definitions for Point 3 and Plane 3 and the 3d orientation functor type definition Orientation 3 limit interface of the Kernel archetype define CGAL CA LIMITED INTERFACE define CGAL CA POINT 3 define CGAL CA PLANE 3 define CGAL CA ORIENTATION 3 include CGAL Kernel archetype h Now other kernel functionality is removed from the interface of CGAL Kernel archetype so access to these other kernel types will result in a compile time error Another option is to use an own archetype class that encapsulates only the needed type definitions and the corresponding member functions See the following code snippet for a simple example include CGAL Kernel archetype h build an own archetype class get needed types from the kernel archetype typedef CGAL Kernel archetype KA typedef KA Point 3 KA Point 3 typedef KA Plane 3 KA Plane 3 typedef KA Construct opposite plane 3 KA Construct opposite plane 3 reuse the types from the kernel archetype in the own archetype class struct My archetype typedef KA Point 3 Point 3 typedef KA Plane 3 Plane 3 typedef KA Construct opposite plane 3 Construct opposite plane 3 Construct opposite plane 3 construct opposite plane 3 object return Construct opposite plane 3 6 2 3 Example Program The following example shows a program for checking the 2d convex hull algorithm of CGAL with the archetype You can see the usage of the CGAL Kernel archetype that replaces a CGAL kernel that is normally used test convex hull 2 C include CGAL basic h include CGAL convex hull 2 h include CGAL Kernel archetype h include list typedef CGAL Kernel archetype K typedef K Point 2 Point 2 int main std list Point 2 input Point 2 act input push back act std list Point 2 output K traits CGAL convex hull 2 input begin input end std back inserter output traits return Next chapter Reference Pages Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23/Chapter_kernel_tools.html", "title": "kernel related tools", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23/kernel_tools.tex' -->\n<html> <head>  \n<title>Kernel Related Tools</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_kernel_tools.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_6\"></a>\n  \n<h1>Chapter 6<BR>Kernel Related Tools</h1>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>6.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nThe following manual sections describe various tools that might be useful for\nvarious kinds of users of the C<SMALL>GAL</SMALL> kernel. The kernel concept archetype\ndescribes a minimal model for the C<SMALL>GAL</SMALL> kernel that can be used for testing C<SMALL>GAL</SMALL> kernel compatibility of geometrical algorithm implementations. It can be useful\nfor all people developing C<SMALL>GAL</SMALL>-style code that uses the C<SMALL>GAL</SMALL> kernel.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>6.2&nbsp;&nbsp;&nbsp;Kernel Concept Archetype</h2>\n<P>\n\n<h3>6.2.1&nbsp;&nbsp;&nbsp;Introduction</h3>\n<P>\n\nC<SMALL>GAL</SMALL> defines the concept of a geometry kernel. Such a kernel provides types,\nconstruction objects and generalized predicates. Most implementations of CG\nalgorithms and data structures in the basic library of C<SMALL>GAL</SMALL> were done in a way\nthat classes or functions can be parametrized with a geometric traits class.\n<P>\n\nIn most cases this geometric traits class must be a model of the C<SMALL>GAL</SMALL> geometry\nkernel concept (but there are some exceptions).\n<P>\n\nThe C<SMALL>GAL</SMALL> distribution comes with a number of models (or geometry kernels), for\ninstance the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n kernel (<I><A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A></I>) or the homogeneous kernel\n(<I><A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A></I>), that can be used with the packages of the basic\nlibrary.\n<P>\n\nBut does it mean that packages of the basic library are fully compatible with\nthe C<SMALL>GAL</SMALL> kernel concept if they can be used with these C<SMALL>GAL</SMALL> kernel models? Not\nneccesarily, because such a package might also use member functions or global\nfunctions/operators, that are implemented for C<SMALL>GAL</SMALL> kernel types but not for\nother classes or kernels.\n<P>\n\nThat's why it is important to verify whether the documented requirements of a\npackage are really covered by the implementation. Manual verification is error\nprone, so there should be something better available in a generic library for\nthis application.\n<P>\n\nThat's why the C<SMALL>GAL</SMALL> kernel concept archetype <I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I> was\ndeveloped. It provides all functionality required by the C<SMALL>GAL</SMALL> kernel concept,\nbut nothing more, so it can be seen as a minimal implementation of a model for\nthe C<SMALL>GAL</SMALL> kernel concept.  It can be used for testing successful compilation of\npackages of the basic library with a minimal model. Deprecated kernel\nfunctionality is not supported. All geometrical types (like the 2d/3d point or\nsegment types) of <I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I> have copy constructors, default\nconstructors and an assignment operator, and nothing else.  Comparison\noperators are by default not supported, but can be switched on by the flag <I> CGAL_CONCEPT_ARCHETYPE_ALLOW_COMPARISONS</I>.\n<P>\n\nThe geometrical types of the concept archetype encapsulate no data members, so\nruntime checks with the archetype are not very useful\n(<I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I> is only meant for compilation checks with a\nminimal model in the testsuites of C<SMALL>GAL</SMALL> packages).\n<P>\n\nThe header file for the concept archetype is <I>CGAL/<A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_26\">Kernel_archetype</A>.h</I>.\n<P>\n\nThe package supports the two- and three-dimensional part of the C<SMALL>GAL</SMALL> kernel\nconcept. The d-dimensional part is not supported.\n<P>\n\n<h3>6.2.2&nbsp;&nbsp;&nbsp;Restricting the Interface</h3>\n<P>\n\nNormally packages of the Basic Library or Extension packages use only a small\nsubset of the functionality offered by models of the C<SMALL>GAL</SMALL> kernel concept. In\nthese cases testing with a model that offers only this (used and) documented\nsubset makes sense. <I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I> normally offers the full\nfunctionality (all types, functors and constructions of a C<SMALL>GAL</SMALL> kernel model),\nbut it is possible to restrict the interface.<BR>\n\nIf you want to do this, you\nhave to define the macro <I>CGAL_CA_LIMITED_INTERFACE</I> (before the\ninclusion of <I>CGAL/<A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_26\">Kernel_archetype</A>.h</I>) for switching on the interface\nlimitation. Now you have to tell the kernel archetype what types have to be\nprovided by it. For every type you have to define a macro.  The name of the\nmacro is <I>CGAL_CA_NAME_OF_KERNEL_TYPE</I>, where <I> NAME_OF_KERNEL_TYPE</I> is the name of the kernel type (written in capitals)\nthat has to be provided by the kernel archetype for a specific package.  Lets\nhave a look at a small example. The kernel archetype has to provide in some\ntest suite a limited interface.  The interface has to offer type definitions\nfor <I><A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A></I> and <I><A HREF=\"../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A></I> and the 3d \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n functor type\ndefinition <I>Orientation_3</I>:\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n<P>\n\n<pre class=\"ExampleCode\">\n// limit interface of the Kernel_archetype\n#define CGAL_CA_LIMITED_INTERFACE\n#define CGAL_CA_POINT_3\n#define CGAL_CA_PLANE_3\n#define CGAL_CA_ORIENTATION_3\n\n#include &lt;CGAL/Kernel_archetype.h&gt;\n</pre>\n<P>\n\n<!-- REMOVE_LINKS_END -->\n<P>\n\nNow other kernel functionality is removed from the interface of\n<I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I>, so access to these other kernel types will result\nin a compile-time error.\nAnother option is to use an own archetype class that encapsulates only the \nneeded type definitions and the corresponding member functions. \nSee the following code snippet for a simple example.\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n<P>\n\n<pre class=\"ExampleCode\">\n#include &lt;CGAL/Kernel_archetype.h&gt;\n\n// build an own archetype class ...\n\n// get needed types from the kernel archetype ...\ntypedef CGAL::Kernel_archetype           KA;\ntypedef KA::Point_3                      KA_Point_3;\ntypedef KA::Plane_3                      KA_Plane_3;\ntypedef KA::Construct_opposite_plane_3   KA_Construct_opposite_plane_3;\n\n// reuse the types from the kernel archetype in the own archetype class\nstruct My_archetype {\n  typedef KA_Point_3                    Point_3;\n  typedef KA_Plane_3                    Plane_3;\n  typedef KA_Construct_opposite_plane_3 Construct_opposite_plane_3;\n  \n  Construct_opposite_plane_3\n  construct_opposite_plane_3_object()\n  { return Construct_opposite_plane_3(); }\n};\n</pre>\n<P>\n\n<!-- REMOVE_LINKS_END -->\n<P>\n\n<h3>6.2.3&nbsp;&nbsp;&nbsp;Example Program</h3>\n<P>\n\nThe following example shows a program for checking the 2d convex hull algorithm\nof CGAL with the archetype. You can see the usage of the\n<I><A HREF=\"../Kernel_23_ref/Class_Kernel_archetype.html#Cross_link_anchor_25\">CGAL::Kernel_archetype</A></I> that replaces a C<SMALL>GAL</SMALL> kernel that is normally used.\n<P>\n\n<!-- REMOVE_LINKS_BEGIN -->\n<P>\n\n<B>test_convex_hull_2.C :</B>\n<P>\n\n<pre class=\"ExampleCode\">\n#include &lt;CGAL/basic.h&gt;\n#include &lt;CGAL/convex_hull_2.h&gt;\n#include &lt;CGAL/Kernel_archetype.h&gt;\n#include &lt;list&gt;\n\ntypedef CGAL::Kernel_archetype      K;\ntypedef K::Point_2                  Point_2;\n\nint main()\n{\n  std::list&lt;Point_2&gt; input;\n  \n  Point_2 act;\n  input.push_back(act);\n\n  std::list&lt;Point_2&gt; output;\n\n  K  traits;\n\n  CGAL::convex_hull_2(input.begin(), input.end(),\n                      std::back_inserter(output), traits);\t\t        \n  return 0;\n}\n</pre>\n<P>\n\n<!-- REMOVE_LINKS_END -->\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Kernel_23_ref/Chapter_main.html\">Reference Pages</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_6!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39165.0}