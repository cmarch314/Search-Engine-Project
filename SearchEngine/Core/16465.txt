{"text": "ICS 32 Winter 2 15 News Course Reference Schedule Project Guide Code Examples About Alex ICS 32 Winter 2 15 Project 2 Send Me On My Way Due date and time Wednesday February 4 11 59pm This project is to be done in pairs using the pair programming technique Background There are relatively few interesting programs written in any programming language that are completely self contained almost any program you can think of that would fit the description of being interesting in some way will either read its input from or write its output to some source external to the program This is what allows us to use the same program to solve different problems albeit different problems of the same type and to use those solutions in other programs You ve no doubt seen both in previous coursework and in this course that one way for a program to take external input is to read it from a file This is the principle at work when you start a word processor like Microsoft Word by double clicking on a document stored on your hard drive the word processor is opened then it reads the document and displays its contents along with whatever formatting or art is included within it Of course word processors would be much less useful if they were incapable of opening existing documents However files aren t where the story ends Programs are capable of reading input and writing output in other ways too and learning how to use other mechanisms in Python programs pushes out the boundaries around what we can accomplish Think about the programs you use every day it doesn t take long to realize that the ones that hold your interest most strongly that enable the most exciting outcomes are those that read their input and write their output by connecting to other computers somewhere else in the world via the Internet We use many programs web browsers email clients mobile applications multiplayer games and more every day that do this So we should want to be able to do the same in the programs we write in Python This project allows you to take a first step into a more connected world by introducing you to the use of sockets objects in Python that represent one end of a connection between one program and another the other might be on the same machine on another machine in the same room or on a machine halfway across the world You ll learn about the importance of protocols in the communication between programs and will implement a game that you can play either standalone on your own computer or via your Internet connection Along the way you ll also be introduced in more detail to the use of modules in Python and to writing programs that are made up of more than one module a technique that we ll revisit repeatedly as the size and complexity of the programs we write begins to increase You ll find that the design decisions you make such as keeping functions small and self contained organizing your functions and other code by putting it into appropriate modules will be an important part of being able to complete your work Additionally you ll use a small library that I m providing in order to seed your work on the project Be sure to look through the code examples related to sockets and the Internet as we continue covering these topics in lecture they will provide the background that you ll need in order to implement that part of your program Choosing a partner During your lab section on Wednesday January 21 choose a partner from among the students who are officially enrolled in the same lab section as you you must choose someone different from whoever you chose for Project 1 It s fine even preferable to read this project write up on your own ahead of time though so you and your partner can hit the ground running when you start working together but do not start working on your solution until you are partnered up We understand that you might be eager but the goal here is to take a shared journey with someone else not to arrive on the first day and say Okay we re already done Once you ve selected a partner notify your TA of your partnership during the lab section Your TA will approve the partnership and make a note of it at which time you re officially partners Until you ve received this approval you are not yet partners For those of you who are unable to attend lab on Wednesday January 21 there s a backup plan your TA will randomly select partnerships from among the students remaining after the section is over and will notify you and your new partner via email Once your TA has selected a partner for you in this fashion we will not allow you to switch to another one so the best way to control your destiny is to choose a partner yourself during your lab section on Wednesday January 21 If you re having trouble finding a partner notify your TA during your lab section so that you can be assisted in finding one You will not receive credit on this project if you work on it alone without the prior consent of the instructor Please note that prior consent does not include approaching us the day the project is due having completed it on your own and telling us that you haven t been able to find a partner Pair programming is a part of the course and we expect everyone to participate in it when asked Be sure too that you ve read the section entitled Pair programming on the front page of the Project Guide so you re aware of what it means to participate in pair programming Reusing your own work from a previous quarter Be aware that if you ve taken this course previously or if you ve partnered with someone who has the previous quarter s code cannot be used in whole or in part during your work on the project this quarter as we expect partnerships to do their own work if one partner brings a partial or complete solution to the table the other partner is deprived of the journey of solving the problem which is the objective of these projects This rule is detailed more thoroughly along with other academic honesty rules on the front page of the Project Guide but you should be aware that there are ramifications for both partners if you reuse code from a previous iteration of the course when partnering Your best move in this situation is to not to refer to your previous quarter s work at all This is generally a good practice when retaking a course anyway because the reason you re retaking the course is because there are things you didn t learn well enough previously in order to pass it But it s especially important when working with a partner The program For this project you ll implement a console based game that you will initially be able to play on your own computer but will extend so that you can play via the Internet by connecting to a central shared server The game For this project you ll implement a console based implementation of a game called Connect Four The rules of the game are straightforward and many of you may already know them if you re not familiar with the rules of the game or haven t seen them in a while Wikipedia s Connect Four page is as good a place to go as any to become familiar with it Note that our implementation will include not only the traditional rules regarding dropping pieces into columns but also the Pop Out variation discussed on the Wikipedia page While Connect Four boards come in a variety of sizes our implementation will default to 7x6 i e seven columns and six rows Also one very minor wrinkle that we re adding to the rules on the Wikipedia page is that the red player always moves first A starting point the connectfour module Unlike the previous project this project begins with a starting point in the form of a library that I ve already implemented that contains the underlying game logic You will be required to build your game on top of it and you will not be allowed to change it which will be an instructive experience learning to use other people s libraries without having to make modifications is a valuable ability Before proceeding much further with the project it might be a good idea to spend some time reading through the code its docstrings and its comments to get an understanding of what s been provided You can also try some focused experimentation in the Python interpreter so you can understand how the provided module works you ll need that understanding in order to complete your work connectfour py Be sure that you respect the constants that are defined in this module For example whenever possible use connectfour BOARD COLUMNS to denote the number of columns on the board connectfour BOARD ROWS to denote the number of rows on the board and so on It should be possible to change the values of these constants to reasonable alternative values and your program should still work and should adjust if for example the number of columns and rows changes The requirements You will actually be writing two programs to satisfy this project The vast majority of the code will be shared between the two programs In fact one of your goals is to find a way to reuse as much of it as possible if you find yourself copying and pasting code between the programs you should instead consider a way to use the put the code in one place and use it in both The first program a console only version of Connect Four One of your two programs will allow you to play one game of Connect Four using only console interaction i e no networks or sockets The user is repeatedly shown the current state of the game whose turn it is and what the board looks like The board should always be shown in the following format 1 2 3 4 5 6 7 R Y R R R Y Y You have some latitude in how you ask the user to specify a move but it needs to be clear what the user should do Columns should be selected by typing a number between 1 the far left column and 7 the far right When the user is asked to specify a move but an invalid one is specified such as dropping into a column that is full an error message should be printed and the user should be asked again to specify a move In general erroneous input at the console should not cause the program to crash it should simply cause the user to be asked to specify his or her move again The game proceeds one move at a time until the game ends at which point the program ends The second program a networked version of Connect Four Your second program will instead allow you to play a game of Connect Four via a network by connecting to a server that I ve provided Your program always acts as a client When this program starts the user will need to specify the host either an IP address such as 192 168 1 1 1 or a hostname such as www ics uci edu where a Connect Four server is running along with the port on which that server is listening Additionally the user should be asked to specify a username The username can be anything the user would like except it cannot contain whitespace characters e g spaces or tabs So for example boo or HappyTonight are legitimate usernames but Hello There is not Once the user has specified where to connect the program should attempt to connect to the server If the connection is unsuccessful print an error message specifying why and end the program If on the other hand the connection is successful the game should proceed with the client acting as the red player and moving first and the server which acts as an artificial intelligence acting as the yellow player For red player moves the user should specify the move at the console as in your first program for yellow player moves the program should instead wait for input via the socket As in the first program the game proceeds one move at a time until the game ends at which point the program ends Where is the ICS 32 Connect Four server Information about where the server is running will be distributed via email I ll also keep you posted about planned downtime e g if I need to fix a problem if I know that the machine where it s running will be down etc It may be necessary to move the server from time to time when I do that I will let everyone know via email Please note that the ICS 32 Connect Four server is running on a machine on the ICS network that is not exposed to the open Internet In order to connect to it you will need to be connected to the campus network which means you ll either need to be on campus or you ll need to be connected to something called the campus VPN which allows you to access the campus network from off campus Connecting to the campus VPN requires that you install some software which you can obtain from UCI s Office of Information Technology at the following link Campus VPN software Open the link above find the section titled Software VPN as opposed to WebVPN which won t work for this purpose and click the link titled Download the Software VPN This will require you to log in with your UCInetID and password at which point you ll be offered links to Windows Mac OS X or Linux versions of the VPN software Download the one that s appropriate for your operating system and install it instructions are available at this link Installing the campus VPN software The ICS 32 Connect Four Server Protocol I32CFSP What is a protocol Though each of you will be writing a completely separate program your programs are expected to be able to connect to the ICS 32 Connect Four server via the Internet There is only one server that we ll all share so that requires us to agree on a single way to converse with it so that each program will know precisely how to inform the other about what moves are being made as the game progresses Part of our agreement is that we ll use a standard abstraction for Internet communication called sockets A socket is an object that hides the underlying details of a network connection Though the underlying network technology is complex though information is actually sent across the Internet by breaking it up into small pieces and sending those pieces out into the network separately so that they may arrive at their destination in a different order than they were sent and so that some parts of it may not arrive at all and will have to be re sent a socket hides all of this and makes the connection appear to your program to consist of two streams an input stream and an ouptut stream Data placed into the output stream of one program s socket will arrive in the same order in the input stream of the other s It is important to realize that networks are unreliable there s no guarantee that the data you send will ever get to the recipient but you can be guaranteed that if it does it will be placed into the input stream of the recipient s socket in the same order that you sent it Using sockets is not enough though Any time you want programs to be able to communicate with the Internet there needs to be a protocol which is a set of rules governing what each party will send and receive and when they will do it You can think of a protocol like a very rigidly defined kind of conversation with each participating knowing its role so that it will know what to say and what to expect the other participant to say at any given time Many protocols have been defined that govern how various programs send and receive information via the Internet For example the Hypertext Transfer Protocol HTTP is what your browser uses to connect to a web server request a web page and receive a response That protocol is defined in all of its detail at this link It has nothing to do with this project but if you re curious how a real network protocol is defined look no further And note that the primary author of the protocol was here at UCI at the time Since all browsers and all web servers conform to the same HTTP protocol they can interoperate even though they are writen by different groups of people run on different operating systems and provide different user interfaces For this project we ll need a protocol Our protocol is a custom protocol called the ICS 32 Connect Four Server Protocol since technical people are so fond of acronyms we ll use an acronym too I32CFSP The definition of I32CFSP I32CFSP conversations are relatively simple they are predominantly centered around sending moves back and forth with the assumption being that both conversants will be able to determine the game s state simply by applying these moves locally for this reason the game s state is not transmitted between conversants I32CFSP conversations are between two participants which we ll call the server and the client The server is the participant that listens for and accepts the conversation the client is the participant that initiates it You ll be implementing the client in this project I ve already implemented the server The client is always the red player and the server is always the yellow player this means that the client always moves first I32CFSP conversations proceed in the following sequence The server awaits a connection from a clientThe client makes a socket connection to the serverThe server accepts the client s connectionThe client sends the characters I32CFSP HELLO followed by a space a username that identifies the user followed by an end of line sequence End of line sequences are always r n in Python terms The server sends the characters WELCOME followed by a space followed by the username sent by the client followed by an end of line sequence The client requests a game against an artificial intelligence by sending the characters AI GAME followed by an end of line sequence The server indicates that it s prepared to play a game by sending back the characters READY followed by an end of line sequence From here the client and the server alternate sending moves with the opposite participant moving each time This continues until the game has ended When a participant wants to drop a piece into a column the characters DROP col followed by an end of line sequence are sent where col is the column number 1 being the far left column 7 being the far right column into which a piece is to be droppedWhen a participant wants to pop a piece from the bottom of a column the characters POP col followed by an end of line sequence are sent instead where col is the column number 1 being the far left column 7 being the far right column from which a piece should be poppedMore specifically things proceed as follows The client sends its first move such as DROP 3 If this is a valid move the server responds with OKAY followed by an end of line sequence unless the game is now over in which case the server responds with WINNER RED or WINNER YELLOW followed by an end of line sequence depending on whether the winner was the red player or the yellow player If this is not a valid move the server responds with INVALID followed by an end of line sequence If the game is not yet complete the server now takes its turn to move It sends its move in the format specified above e g DROP 5 or POP 2 Immediately following this the server sends READY if the game is still in progress or either WINNER RED or WINNER YELLOW if there is a winner As soon as the game is over when the server has sent WINNER RED or WINNER YELLOW both participants close their connections as the conversation is now over An example conversation for a game in which each player continually drops pieces into the same column looks like this ClientServerI32CFSP HELLO booWELCOME booAI GAMEREADYDROP 3OKAYDROP 4READYDROP 3OKAYDROP 4READYDROP 8INVALIDREADYDROP 3OKAYDROP 4READYDROP 3WINNER RED How you should handle erroneous socket input Your program is not permitted to assume that all input it receives will be correct When it receives input that does not conform to the protocol your program must immediately close the connection This is a rudimentary but nonetheless effective form of security if someone connects and won t play by the rules hang up on them While the server is resilient about accepting invalid moves the client is not if the server sends an invalid move the client should close the connection immediately A note about the design of I32CFSP You may wonder why the first message is more cryptic than the others the first message is I32CFSP HELLO instead of just HELLO while the others are mostly regular English words Just like it s important that file formats contain enough information to make it clear what format the file is in for example the JPEG image format contains the characters Exif in a particular place as well as a couple of other distinguishing characteristics that have nothing to do with the image they represent it s also important that a protocol begins with a message that will distinguish it from other protocols By starting our conversation with something special like I32CFSP HELLO the server can be sure that the client intends to have a conversation using our protocol rather than something else After all you can connect any program that uses sockets even a browser to the ICS 32 Connect Four Server though the conversation won t get very far before the server realizes that it s receiving the wrong kind of traffic and hangs up Module requirements Because one of the goals of this project is to explore writing programs consisting of multiple Python modules you will be required to separate this program into at least the following five modules The provided connectfour py module is one of the four it implements the underlying game logic but performs no interaction with a user and does nothing with sockets or network communication You should be able to use this as is with no modifications to what s been provided One module that implements the I32CFSP and all socket handling If you re going to connect read write etc via a socket you would do that in functions written in this module One module that implements the console only user interface and one of the two programs entry points i e it s got an if name main block at the bottom and is the one you would execute in order to run the console only version of the game One module that implements the user interface for the networked version of the game that plays against an artificial intelligence It too will need an if name main block at the bottom and would be the one you would execute in order to run the networked version of the game One module that consists of the functions that are the same in both user interfaces Examples would include a function that prints the current game board to the console and a function that asks the user what move he or she would like to make next Other than connectfour py which you should not modify you can name your modules whatever you d like but as usual the names should be meaningful and indicate the modules purpose You should also stick to the Python convention of naming your module using all lowercase letters and multiple words if you have them separated by underscores e g connectfour console py instead of ConnectFourConsole py or Connect Four Console py Advice about working incrementally As the programs you write get larger it becomes progressively more important that you work on them a little bit at a time As we ve talked about already this quarter you should always be on the hunt for stable ground a program that does some part even some very small part of what it s supposed to do but that you can verify Once you ve got a portion of your program working and verified you re on stable ground I quite often think about what you might call big picture and small picture kinds of stable ground I m generally working toward a bigger picture goal within that I work toward a sequence of smaller picture goals as I divide up the bigger picture problem into smaller parts I recommend a similar approach here There are a lot of ways to cut a problem like this up but here s one sequence of bigger picture goals that you might find helpful Familiarize yourself with the code in the provided connectfour py file including spending some time in the Python interpreter experimenting with its public functions Implement the console only version of the game but don t worry yet about sockets or networks As you work however consider what parts of your console version might be reusable in your networked version Don t feel the need to break them out into a separate module yet but at least try to design potentially shared functionality as functions e g a function that takes a game board as a parameter and prints it that could be moved to another module later The onus will be on finding ways to break larger functions into smaller ones Read through the code I wrote in connectfour py and note how many small utility functions there are and note how they re often reused in multiple places I didn t always write it that way initially As I discovered duplication I took advantage of it by moving the duplicated code into its own functions you should be thinking of ways to do the same Finally implement the networked version of the game You ll find that this presents new challenges the sockets and the network communication can be tricky but that a fair amount of the work here will already be done since it shares at least some of its code with the console version Reusing code and how it affects your Quality and Design score While there are two separate programs here the console version and the networked version there are substantial similarities between them The game still proceeds move by move the user is still shown the current state of the board before each move is made the local player s are asked to specify a move at the console and so on The parts of your two programs that are the same should be written once Your goal from a design perspective is to find ways to avoid duplicating code between the two programs This is one of the important aspects of your design that we ll be considering when assessing your program s Quality and Design score Limitations All of your socket related code should use only the socket module from the Python Standard Library to handle any sockets in general you ll need to open your own sockets and do your own reading and writing to them Since our protocol is entirely text based I suggest using the pseudo file objects we saw in lecture which you create by calling makefile on a socket object once it s connected There are fuller featured tools in the standard library such as asynchat and socketserver that hide a lot of the underlying details we may find these modules useful later this quarter but I d like you to have the experience of managing your own sockets for this project Deliverables Only one of the two partners should submit the project we are aware of the partnerships so we will be able to figure out which project submissions belong to which pairing Put the names and student IDs of both partners in a comment at the top of each of your py files then submit the files to Checkmate Take a moment to be sure that you ve submitted all of your files Follow this link for a discussion of how to submit your project via Checkmate Be aware that I ll be holding you to all of the rules specified in that document including the one that says that you re responsible for submitting the version of the project that you want greaded We won t regrade a project simply because you submitted the wrong version accidentally Do I have to submit connectfour py That s up to you It s not necessary but it doesn t hurt anything However please be aware that we ll be testing your program against the original connectfour module provided here even if you submit one because one of the requirements in this project is that you use our connectfour module as is Can I submit after the deadline Yes it is possible subject to the late work policy for this course which is described in the section titled Late work at this link Section detailing the selection of partners added by Alex Thornton Fall 2 13 Heavily redesigned and rewritten by Alex Thornton Spring 2 13 Originally written by Alex Thornton Winter 2 13 ", "_id": "http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Project2/", "title": "ics 32 winter 2015, project #2: send me on my way", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2015, Project #2: Send Me On My Way</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2015 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2015<br />\r\n   Project #2: <i>Send Me On My Way</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Wednesday, February 4, 11:59pm</i></p>\r\n\r\n<p class=\"center\"><i>This project is to be done in pairs using the \"pair programming\" technique</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>There are relatively few interesting programs written in any programming language that are completely self-contained; almost any program you can think of that would fit the description of being \"interesting\" in some way will either read its input from or write its output to some source external to the program.  This is what allows us to use the same program to solve different problems &mdash; albeit different problems of the same type &mdash; and to use those solutions in other programs.</p>\r\n\r\n<p>You've no doubt seen, both in previous coursework and in this course, that one way for a program to take external input is to read it from a file.  This is the principle at work when you start a word processor like Microsoft Word by double-clicking on a document stored on your hard drive; the word processor is opened, then it reads the document and displays its contents, along with whatever formatting or art is included within it.  Of course, word processors would be much less useful if they were incapable of opening existing documents.</p>\r\n\r\n<p>However, files aren't where the story ends.  Programs are capable of reading input and writing output in other ways, too, and learning how to use other mechanisms in Python programs pushes out the boundaries around what we can accomplish.  Think about the programs you use every day; it doesn't take long to realize that the ones that hold your interest most strongly, that enable the most exciting outcomes, are those that read their input and write their output by connecting to other computers somewhere else in the world via the Internet.  We use many programs &mdash; web browsers, email clients, mobile applications, multiplayer games, and more &mdash; every day that do this.  So we should want to be able to do the same in the programs we write in Python.</p>\r\n\r\n<p>This project allows you to take a first step into a more connected world by introducing you to the use of <i>sockets</i>, objects in Python that represent one end of a connection between one program and another &mdash; the other might be on the same machine, on another machine in the same room, or on a machine halfway across the world.  You'll learn about the importance of <i>protocols</i> in the communication between programs, and will implement a game that you can play either standalone (on your own computer) or via your Internet connection.</p>\r\n\r\n<p>Along the way, you'll also be introduced in more detail to the use of <i>modules</i> in Python, and to writing programs that are made up of more than one module, a technique that we'll revisit repeatedly as the size and complexity of the programs we write begins to increase.  You'll find that the design decisions you make &mdash; such as keeping functions small and self-contained, organizing your functions and other code by putting it into appropriate modules &mdash; will be an important part of being able to complete your work.  Additionally, you'll use a small library that I'm providing in order to seed your work on the project.</p>\r\n\r\n<p>Be sure to look through the <a href=\"../../CodeExamples\">code examples</a> related to sockets and the Internet as we continue covering these topics in lecture; they will provide the background that you'll need in order to implement that part of your program.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Choosing a partner</p>\r\n\r\n<p>During your lab section on Wednesday, January 21, choose a partner from among the students who are <i>officially enrolled in the same lab section as you</i>; you must choose someone different from whoever you chose for <a href=\"../Project1\">Project #1</a>.  It's fine, even preferable, to read this project write-up on your own ahead of time, though, so you and your partner can hit the ground running when you start working together, but do not start working on your solution until you are partnered up.  (We understand that you might be eager, but the goal here is to take a shared journey with someone else, not to arrive on the first day and say \"Okay, we're already done!\")</p>\r\n\r\n<p>Once you've selected a partner, notify your TA of your partnership during the lab section.  Your TA will approve the partnership and make a note of it, at which time you're officially partners!  (Until you've received this approval, you are not yet partners.)</p>\r\n\r\n<p>For those of you who are unable to attend lab on Wednesday, January 21, there's a backup plan: your TA will randomly select partnerships from among the students remaining after the section is over, and will notify you and your new partner via email.  Once your TA has selected a partner for you in this fashion, we will not allow you to switch to another one, so the best way to control your destiny is to choose a partner yourself during your lab section on Wednesday, January 21.</p>\r\n\r\n<p>If you're having trouble finding a partner, notify your TA during your lab section, so that you can be assisted in finding one.</p>\r\n\r\n<p><i>You will not receive credit on this project if you work on it alone, without the prior consent of the instructor.</i>  (Please note that \"prior consent\" does not include approaching us the day the project is due, having completed it on your own, and telling us that you haven't been able to find a partner.  Pair programming is a part of the course, and we expect everyone to participate in it when asked.)</p>\r\n\r\n<p>Be sure, too, that you've read the section entitled <i>Pair programming</i> on the <a href=\"../index.html\">front page of the Project Guide</a>, so you're aware of what it means to participate in pair programming.</p>\r\n\r\n<p class=\"subtitle\">Reusing your own work from a previous quarter</p>\r\n\r\n<p>Be aware that if you've taken this course previously &mdash; or if you've partnered with someone who has &mdash; the previous quarter's code cannot be used, in whole or in part, during your work on the project this quarter, as we expect partnerships to do their own work; if one partner brings a partial or complete solution to the table, the other partner is deprived of the journey of solving the problem (which is the objective of these projects).  This rule is detailed more thoroughly, along with other academic honesty rules, on the <a href=\"../index.html\">front page of the Project Guide</a>, but you should be aware that there are ramifications for <i>both partners</i> if you reuse code from a previous iteration of the course when partnering.</p>\r\n\r\n<p>Your best move, in this situation, is to not to refer to your previous quarter's work at all.  This is generally a good practice when retaking a course, anyway, because the reason you're retaking the course is because there are things you didn't learn well enough previously in order to pass it.  But it's especially important when working with a partner.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>For this project, you'll implement a console-based game that you will initially be able to play on your own computer, but will extend so that you can play via the Internet by connecting to a central, shared server.</p>\r\n\r\n<p class=\"subtitle\">The game</p>\r\n\r\n<p>For this project, you'll implement a console-based implementation of a game called Connect Four.  The rules of the game are straightforward and many of you may already know them; if you're not familiar with the rules of the game, or haven't seen them in a while, <a href=\"http://en.wikipedia.org/wiki/Connect_four\">Wikipedia's Connect Four page</a> is as good a place to go as any to become familiar with it.</p>\r\n\r\n<p>Note that our implementation will include not only the traditional rules regarding dropping pieces into columns, but also the \"Pop Out\" variation discussed on the Wikipedia page.  While Connect Four boards come in a variety of sizes, our implementation will default to 7x6 (i.e., seven columns and six rows).</p>\r\n\r\n<p>Also, one very minor wrinkle that we're adding to the rules on the Wikipedia page is that the red player always moves first.</p>\r\n\r\n<p class=\"subtitle\">A starting point: the <i>connectfour</i> module</p>\r\n\r\n<p>Unlike the <a href=\"../Project1\">previous project</a>, this project begins with a <i>starting point</i>, in the form of a library that I've already implemented that contains the underlying game logic.  You will be required to build your game on top of it (and you will not be allowed to change it), which will be an instructive experience; learning to use other people's libraries without having to make modifications is a valuable ability.  Before proceeding much further with the project, it might be a good idea to spend some time reading through the code, its docstrings, and its comments to get an understanding of what's been provided.  You can also try some focused experimentation in the Python interpreter so you can understand how the provided module works; you'll need that understanding in order to complete your work.</p>\r\n\r\n<ul>\r\n  <li><a href=\"connectfour.py\"><b>connectfour.py</b></a></li>\r\n</ul>\r\n\r\n<p>Be sure that you respect the constants that are defined in this module.  For example, whenever possible, use <b>connectfour.BOARD_COLUMNS</b> to denote the number of columns on the board, <b>connectfour.BOARD_ROWS</b> to denote the number of rows on the board, and so on.  It should be possible to change the values of these constants to reasonable alternative values and your program should still work (and should adjust if, for example, the number of columns and rows changes).</p>\r\n\r\n<p class=\"subtitle\">The requirements</p>\r\n\r\n<p>You will actually be writing two programs to satisfy this project.  The vast majority of the code will be shared between the two programs.  In fact, one of your goals is to find a way to reuse as much of it as possible; if you find yourself copying and pasting code between the programs, you should instead consider a way to use the put the code in one place and use it in both.</p>\r\n\r\n<p class=\"subtitle\">The first program: a console-only version of Connect Four</p>\r\n\r\n<p>One of your two programs will allow you to play one game of Connect Four using only console interaction (i.e., no networks or sockets).  The user is repeatedly shown the current state of the game &mdash; whose turn it is and what the board looks like.  The board should always be shown in the following format:</p>\r\n\r\n<blockquote><pre>\r\n1  2  3  4  5  6  7\r\n.  .  .  .  .  .  .\r\n.  .  .  .  .  .  .\r\n.  .  .  .  .  .  .\r\n.  .  R  .  .  .  .\r\n.  .  Y  R  .  .  .\r\n.  R  R  Y  .  Y  .\r\n</pre></blockquote>\r\n\r\n<p>You have some latitude in how you ask the user to specify a move, but it needs to be clear what the user should do.  Columns should be selected by typing a number between 1 (the far-left column) and 7 (the far-right).</p>\r\n\r\n<p>When the user is asked to specify a move but an invalid one is specified (such as dropping into a column that is full), an error message should be printed and the user should be asked again to specify a move.  In general, erroneous input at the console should not cause the program to crash; it should simply cause the user to be asked to specify his or her move again.</p>\r\n\r\n<p>The game proceeds, one move at a time, until the game ends, at which point the program ends.</p>\r\n\r\n<p class=\"subtitle\">The second program: a networked version of Connect Four</p>\r\n\r\n<p>Your second program will instead allow you to play a game of Connect Four via a network, by connecting to a <i>server</i> that I've provided.  Your program always acts as a <i>client</i>.</p>\r\n\r\n<p>When this program starts, the user will need to specify the <i>host</i> (either an IP address, such as <b>192.168.1.101</b>, or a hostname, such as <b>www.ics.uci.edu</b>) where a Connect Four server is running, along with the <i>port</i> on which that server is listening.</p>\r\n\r\n<p>Additionally, the user should be asked to specify a <i>username</i>.  The username can be anything the user would like, except it cannot contain whitespace characters (e.g., spaces or tabs).  So, for example, <b>boo</b> or <b>HappyTonight</b> are legitimate usernames, but <b>Hello There</b> is not.</p>\r\n\r\n<p>Once the user has specified where to connect, the program should attempt to connect to the server.  If the connection is unsuccessful, print an error message specifying why and end the program.  If, on the other hand, the connection is successful, the game should proceed, with the client acting as the red player (and moving first) and the server &mdash; which acts as an artificial intelligence &mdash; acting as the yellow player.  For red player moves, the user should specify the move at the console, as in your first program; for yellow player moves, the program should instead wait for input via the socket.</p>\r\n\r\n<p>As in the first program, the game proceeds, one move at a time, until the game ends, at which point the program ends.</p>\r\n\r\n<p class=\"subtitle\">Where is the ICS 32 Connect Four server?</p>\r\n\r\n<p>Information about where the server is running will be distributed via email; I'll also keep you posted about planned downtime (e.g., if I need to fix a problem, if I know that the machine where it's running will be down, etc.).  It may be necessary to move the server from time to time; when I do that, I will let everyone know via email.</p>\r\n\r\n<p>Please note that the ICS 32 Connect Four server is running on a machine on the ICS network that is not exposed to the open Internet.  In order to connect to it, you will need to be connected to the campus network, which means you'll either need to be on campus <i>or</i> you'll need to be connected to something called the <i>campus VPN</i>, which allows you to access the campus' network from off-campus.</p>\r\n\r\n<p>Connecting to the campus VPN requires that you install some software, which you can obtain from UCI's Office of Information Technology at the following link:</p>\r\n\r\n<ul>\r\n  <li><a href=\"http://www.nacs.uci.edu/security/vpn/\">Campus VPN software</a></li>\r\n</ul>\r\n\r\n<p>Open the link above, find the section titled <b>Software VPN</b> (as opposed to <b>WebVPN</b>, which won't work for this purpose), and click the link titled <b>Download the Software VPN</b>.  This will require you to log in with your UCInetID and password, at which point you'll be offered links to Windows, Mac OS X, or Linux versions of the VPN software.  Download the one that's appropriate for your operating system and install it; instructions are available at this link:</p>\r\n\r\n<ul>\r\n  <li><a href=\"http://www.nacs.uci.edu/security/vpn/vpninstall.html\">Installing the campus VPN software</a></li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The ICS 32 Connect Four Server Protocol (I32CFSP)</p>\r\n\r\n<p class=\"subtitle\">What is a protocol?</p>\r\n\r\n<p>Though each of you will be writing a completely separate program, your programs are expected to be able to connect to the ICS 32 Connect Four server via the Internet.  There is only one server that we'll all share, so that requires us to agree on a single way to converse with it, so that each program will know precisely how to inform the other about what moves are being made as the game progresses.</p>\r\n\r\n<p>Part of our agreement is that we'll use a standard abstraction for Internet communication called <i>sockets</i>.  A socket is an object that hides the underlying details of a network connection.  Though the underlying network technology is complex, though information is actually sent across the Internet by breaking it up into small pieces and sending those pieces out into the network separately (so that they may arrive at their destination in a different order than they were sent, and so that some parts of it may not arrive at all and will have to be re-sent), a socket hides all of this and makes the connection appear, to your program, to consist of two <i>streams</i>, an input stream and an ouptut stream.  Data placed into the output stream of one program's socket will arrive in the same order in the input stream of the other's.  It is important to realize that networks are <i>unreliable</i>; there's no guarantee that the data you send will ever get to the recipient, but you can be guaranteed that, if it does, it will be placed into the input stream of the recipient's socket in the same order that you sent it.</p>\r\n\r\n<p>Using sockets is not enough, though.  Any time you want programs to be able to communicate with the Internet, there needs to be a <i>protocol</i>, which is a set of rules governing what each party will send and receive, and when they will do it.  You can think of a protocol like a very rigidly-defined kind of conversation, with each participating knowing its role, so that it will know what to say and what to expect the other participant to say at any given time.</p>\r\n\r\n<p>Many protocols have been defined that govern how various programs send and receive information via the Internet.  For example, the Hypertext Transfer Protocol (HTTP) is what your browser uses to connect to a web server, request a web page, and receive a response.  (That protocol is defined in all of its detail at <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\">this link</a>.  It has nothing to do with this project, but if you're curious how a \"real\" network protocol is defined, look no further.  And note that the primary author of the protocol was here at UCI at the time.)  Since all browsers and all web servers conform to the same HTTP protocol, they can interoperate, even though they are writen by different groups of people, run on different operating systems, and provide different user interfaces.</p>\r\n\r\n<p>For this project, we'll need a protocol.  Our protocol is a custom protocol called the <i>ICS 32 Connect Four Server Protocol</i>; since technical people are so fond of acronyms, we'll use an acronym, too: <i>I32CFSP</i>.</p>\r\n\r\n<p class=\"subtitle\">The definition of I32CFSP</p>\r\n\r\n<p>I32CFSP conversations are relatively simple: they are predominantly centered around sending moves back and forth, with the assumption being that both conversants will be able to determine the game's state simply by applying these moves locally; for this reason, the game's state is not transmitted between conversants.</p>\r\n\r\n<p>I32CFSP conversations are between two participants, which we'll call the <i>server</i> and the <i>client</i>.  The server is the participant that listens for and accepts the conversation; the client is the participant that initiates it.  (You'll be implementing the client in this project; I've already implemented the server.)  The client is always the red player and the server is always the yellow player; this means that the client always moves first.  I32CFSP conversations proceed in the following sequence.</p>\r\n\r\n<ul>\r\n  <li>The server awaits a connection from a client</li>\r\n  <li>The client makes a socket connection to the server</li>\r\n  <li>The server accepts the client's connection</li>\r\n  <li>The client sends the characters <b>I32CFSP_HELLO</b>, followed by a space, a <i>username</i> that identifies the user, followed by an end-of-line sequence.  End-of-line sequences are always '\\r\\n', in Python terms.</li>\r\n  <li>The server sends the characters <b>WELCOME</b>, followed by a space, followed by the username sent by the client, followed by an end-of-line sequence.</li>\r\n  <li>The client requests a game against an artificial intelligence by sending the characters <b>AI_GAME</b>, followed by an end-of-line sequence.</li>\r\n  <li>The server indicates that it's prepared to play a game by sending back the characters <b>READY</b>, followed by an end-of-line sequence.</li>\r\n  <li>From here, the client and the server alternate sending moves, with the opposite participant moving each time.  This continues until the game has ended.\r\n    <ul>\r\n      <li>When a participant wants to drop a piece into a column, the characters <b>DROP <i>col</i></b>, followed by an end-of-line sequence, are sent, where <i>col</i> is the column number (1 being the far left column, 7 being the far right column) into which a piece is to be dropped</li>\r\n      <li>When a participant wants to pop a piece from the bottom of a column, the characters <b>POP <i>col</i></b>, followed by an end-of-line sequence, are sent instead, where <i>col</i> is the column number (1 being the far left column, 7 being the far right column) from which a piece should be popped</li>\r\n      <li>More specifically, things proceed as follows:\r\n        <ul>\r\n          <li>The client sends its first move, such as <b>DROP 3</b>.\r\n            <ul>\r\n              <li>If this is a valid move, the server responds with <b>OKAY</b>, followed by an end-of-line sequence, unless the game is now over, in which case the server responds with <b>WINNER_RED</b> or <b>WINNER_YELLOW</b>, followed by an end-of-line sequence, depending on whether the winner was the red player or the yellow player.</li>\r\n              <li>If this is not a valid move, the server responds with <b>INVALID</b>, followed by an end-of-line sequence.</li>\r\n            </ul>\r\n          </li>\r\n          <li>If the game is not yet complete, the server now takes its turn to move.  It sends its move in the format specified above (e.g., <b>DROP 5</b> or <b>POP 2</b>).\r\n            <ul>\r\n              <li>Immediately following this, the server sends <b>READY</b> if the game is still in progress, or either <b>WINNER_RED</b> or <b>WINNER_YELLOW</b> if there is a winner.</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n  <li>As soon as the game is over &mdash; when the server has sent <b>WINNER_RED</b> or <b>WINNER_YELLOW</b> &mdash; both participants close their connections, as the conversation is now over.</li>\r\n</ul>\r\n\r\n<p>An example conversation, for a game in which each player continually drops pieces into the same column, looks like this:</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>Client</td>\r\n    <td>Server</td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>I32CFSP_HELLO boo</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>WELCOME boo</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>AI_GAME</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>READY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DROP 3</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>OKAY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>DROP 4</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>READY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DROP 3</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>OKAY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>DROP 4</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>READY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DROP 8</td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>INVALID</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>READY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DROP 3</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>OKAY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>DROP 4</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>READY</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DROP 3</b></td>\r\n    <td></td>\r\n  </tr>\r\n  <tr>\r\n    <td></td>\r\n    <td><b>WINNER_RED</b></td>\r\n  </tr>\r\n</table>\r\n\r\n<p class=\"subtitle\">How you should handle erroneous socket input</p>\r\n\r\n<p>Your program is not permitted to assume that all input it receives will be correct.  When it receives input that does not conform to the protocol, your program must immediately close the connection.  (This is a rudimentary, but nonetheless effective, form of security; if someone connects and won't play by the rules, hang up on them.)</p>\r\n\r\n<p>While the server is resilient about accepting invalid moves, the client is not; if the server sends an invalid move, the client should close the connection immediately.</p>\r\n\r\n<p class=\"subtitle\">A note about the design of I32CFSP</p>\r\n\r\n<p>You may wonder why the first message is more cryptic than the others; the first message is <b>I32CFSP_HELLO</b> instead of just <b>HELLO</b>, while the others are mostly regular English words.  Just like it's important that file formats contain enough information to make it clear what format the file is in &mdash; for example, the JPEG image format contains the characters <b>Exif</b> in a particular place, as well as a couple of other distinguishing characteristics that have nothing to do with the image they represent &mdash; it's also important that a protocol begins with a message that will distinguish it from other protocols.  By starting our conversation with something \"special\" like <b>I32CFSP_HELLO</b>, the server can be sure that the client intends to have a conversation using our protocol, rather than something else.  (After all, you can connect any program that uses sockets, even a browser, to the ICS 32 Connect Four Server, though the conversation won't get very far before the server realizes that it's receiving the wrong kind of traffic and hangs up.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Module requirements</p>\r\n\r\n<p>Because one of the goals of this project is to explore writing programs consisting of multiple Python modules, you will be required to separate this program into at least the following five modules:</p>\r\n\r\n<ul>\r\n  <li>The provided <b>connectfour.py</b> module is one of the four; it implements the underlying game logic, but performs no interaction with a user and does nothing with sockets or network communication.  You should be able to use this as-is, with no modifications to what's been provided.</li>\r\n  <li>One module that implements the I32CFSP and all socket handling.  If you're going to connect, read, write, etc., via a socket, you would do that in functions written in this module.</li>\r\n  <li>One module that implements the console-only user interface and one of the two programs' <i>entry points</i> (i.e., it's got an <b>if __name__ == '__main__':</b> block at the bottom, and is the one you would execute in order to run the console-only version of the game.</li>\r\n  <li>One module that implements the user interface for the networked version of the game that plays against an artificial intelligence.  It, too, will need an <b>if __name__ == '__main__':</b> block at the bottom, and would be the one you would execute in order to run the networked version of the game.</li>\r\n  <li>One module that consists of the functions that are the same in both user interfaces.  Examples would include a function that prints the current game board to the console and a function that asks the user what move he or she would like to make next.</li>\r\n</ul>\r\n\r\n<p>Other than <b>connectfour.py</b>, which you should not modify, you can name your modules whatever you'd like, but, as usual, the names should be meaningful and indicate the modules' purpose.  You should also stick to the Python convention of naming your module using all lowercase letters and multiple words (if you have them) separated by underscores (e.g., <b>connectfour_console.py</b> instead of <b>ConnectFourConsole.py</b> or <b>Connect Four Console.py</b>).</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Advice about working incrementally</p>\r\n\r\n<p>As the programs you write get larger, it becomes progressively more important that you work on them a little bit at a time.  As we've talked about already this quarter, you should always be on the hunt for <i>stable ground</i>, a program that does some part (even some very small part) of what it's supposed to do, but that you can verify.  Once you've got a portion of your program working and verified, you're on stable ground.</p>\r\n\r\n<p>I quite often think about what you might call \"big-picture\" and \"small-picture\" kinds of stable ground.  I'm generally working toward a bigger-picture goal; within that, I work toward a sequence of smaller-picture goals as I divide up the bigger-picture problem into smaller parts.  I recommend a similar approach here.  There are a lot of ways to cut a problem like this up, but here's one sequence of bigger-picture goals that you might find helpful.</p>\r\n\r\n<ul>\r\n  <li>Familiarize yourself with the code in the provided <i>connectfour.py</i> file, including spending some time in the Python interpreter experimenting with its public functions.</li>\r\n  <li>Implement the console-only version of the game, but don't worry yet about sockets or networks.  As you work, however, consider what parts of your console version might be reusable in your networked version.  Don't feel the need to break them out into a separate module yet, but at least try to design potentially shared functionality as functions (e.g., a function that takes a game board as a parameter and prints it) that could be moved to another module later.  The onus will be on finding ways to break larger functions into smaller ones.  (Read through the code I wrote in <i>connectfour.py</i> and note how many small utility functions there are, and note how they're often reused in multiple places.  I didn't always write it that way initially.  As I discovered duplication, I took advantage of it by moving the duplicated code into its own functions; you should be thinking of ways to do the same.)</li>\r\n  <li>Finally, implement the networked version of the game.  You'll find that this presents new challenges &mdash; the sockets and the network communication can be tricky &mdash; but that a fair amount of the work here will already be done, since it shares at least some of its code with the console version.</li>\r\n</ul>\r\n\r\n<p class=\"subtitle\">Reusing code and how it affects your \"Quality and Design\" score</p>\r\n\r\n<p>While there are two separate programs here &mdash; the console version and the networked version &mdash; there are substantial similarities between them.  The game still proceeds move by move, the user is still shown the current state of the board before each move is made, the local player(s) are asked to specify a move at the console, and so on.  The parts of your two programs that are the same should be written once.  Your goal, from a design perspective, is to find ways to avoid duplicating code between the two programs.</p>\r\n\r\n<p>This is one of the important aspects of your design that we'll be considering when assessing your program's <i>Quality and Design</i> score.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Limitations</p>\r\n\r\n<p>All of your socket-related code should use only the <b>socket</b> module from the Python Standard Library to handle any sockets; in general, you'll need to open your own sockets, and do your own reading and writing to them.  Since our protocol is entirely text-based, I suggest using the pseudo-file objects we saw in lecture (which you create by calling <b>makefile</b> on a socket object once it's connected).  There are fuller-featured tools in the standard library, such as <b>asynchat</b> and <b>socketserver</b>, that hide a lot of the underlying details; we may find these modules useful later this quarter, but I'd like you to have the experience of managing your own sockets for this project.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Only one of the two partners should submit the project; we are aware of the partnerships, so we will be able to figure out which project submissions belong to which pairing.  Put the names and student IDs of both partners in a comment at the top of each of your <b>.py</b> files, then submit the files to Checkmate.  Take a moment to be sure that you've submitted all of your files.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want greaded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\r\n\r\n<p class=\"subtitle\">Do I have to submit <i>connectfour.py</i>?</p>\r\n\r\n<p>That's up to you.  It's not necessary, but it doesn't hurt anything.  However, please be aware that we'll be testing your program against the original <i>connectfour</i> module provided here, even if you submit one, because one of the requirements in this project is that you use our <i>connectfour</i> module as-is.</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Section detailing the selection of partners added by Alex Thornton, Fall 2013.</li>\r\n  <li>Heavily redesigned and rewritten by Alex Thornton, Spring 2013.</li>\r\n  <li>Originally written by Alex Thornton, Winter 2013.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 16465.0}