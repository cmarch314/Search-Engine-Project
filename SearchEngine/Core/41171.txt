{"text": " Home Trees Indices Help Package CHEM Package ML Package features Module BaseFeatureExtractor Class BaseFeatureExtractor hide private frames no frames Class BaseFeatureExtractor Abstract base class for all feature extractor classes Feature extractor classes are those that can map input data objects into feature vectors actually represented as feature dictionaries given the typical sparseness of such vectors Most commonly this is used ultimately for kernel functions which should simply take any pair of objects and calculate some similarity score between them given positive definite limitations for use in a support vector machine SVM style machine learning application without ever requiring an explicit vector representation of the data objects For current practical purposes most of our kernels are based on some data feature dictionary mapping on which we can then apply any of a variety of vector based similarity measures to complete the kernel function These include scalar dot product Tanimoto MinMax Gaussian etc The input objects need not be of any particular type as far as this interface is concerned They may be strings molecules OEMolBase vectors etc It is up to the implementing class to make those distinctions The results of these extractors will be feature dictionaries for each input object These are simple dictionary objects representing sparse feature vectors with the most common interpretation having the dictionary item keys as string representations of the features and the item values as the number of times that feature appears in the data object The general output of these extractors will be a text file representation of these feature dictionaries the specifics of which are specified by the FeatureDictWriter class Modules in the Similarity package can then apply the assorted similarity measures on these feature dictionaries to produce a Gram matrix of similarity scores for input into an SVM or other learning machine Instance Methods hide private init self Default constructor loadOptions self options Load relevant options derived from an optparse OptionParser into the state of this object loadArgs self args Similar to loadOptions handle the arguments that come out of optparse OptionParser main self argv closeOutfile True Main method callable from command line call self obj Primary abstract method objectDescription self obj Abstract method getNameID self obj Overridable method outputFeatures self objIter outFile Convenience method shared by all extractors to generate and output features for all input objects Class Variables hide private parser CHEM DB rdb search NameRxnPatternMatchingModel Searc inputIter CHEM DB rdb search NameRxnPatternMatchingModel Se outFile CHEM DB rdb search NameRxnPatternMatchingModel Sear inputFunction CHEM DB rdb search NameRxnPatternMatchingMode Method Details hide private init self Constructor Default constructor Sets up expected command line options Sub classes can add their own options on top of these though should beware of overwriting an option letter loadOptions self options Load relevant options derived from an optparse OptionParser into the state of this object Sub classes should have this handle any of the options it added to the command line parser via the constructor loadArgs self args Similar to loadOptions handle the arguments that come out of optparse OptionParser Subclass is responsible for translating the command line arguments into an actual input iterator and output file object A default implementation is available here assuming the arguments should be interpreted as a simple input and simple output file If this is not the case the sub class should override this method or modify the self inputFunction member in its constructor For example using something like an oemolistream or FeatureDictReader main self argv closeOutfile True Main method callable from command line Setup several common options that all of the sub classes will share call self obj Call operator Primary abstract method Build a dictionary of an input object s important features Should be such that it is easy to compare any two objects feature dictionaries This uses the callable interface which means the object is a functor which should be used like a function call For example from SpectrumExtractor import SpectrumExtractor featureExtractor SpectrumExtractor featureExtractor k 1 featureDict featureExtractor teststring Note that the extractor object looks like a function call features featureDict keys features sort for feature in features print feature featureDict feature e 1 g 1 i 1 n 1 r 1 s 2 t 3 objectDescription self obj Abstract method Return a string description of the input object Individual extractor classes should implement the proper thing to do here For example if the input is a SMILES string just return the string itself but if the input object is an OEMolBase object it could generate a SMILES string for it etc getNameID self obj Overridable method Return a string name or ID label for the input object For molecule objects this will probably be mol GetTitle Otherwise default to a sentinel value outputFeatures self objIter outFile Convenience method shared by all extractors to generate and output features for all input objects Generated features will be output in feature dictionary format to the output file Class Variable Details hide private parser Value None inputIter Value None outFile Value None inputFunction Value None Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 32 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html", "title": "chem.ml.features.basefeatureextractor.basefeatureextractor", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.ML-module.html\">Package&nbsp;ML</a> ::\n        <a href=\"CHEM.ML.features-module.html\">Package&nbsp;features</a> ::\n        <a href=\"CHEM.ML.features.BaseFeatureExtractor-module.html\">Module&nbsp;BaseFeatureExtractor</a> ::\n        Class&nbsp;BaseFeatureExtractor\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class BaseFeatureExtractor</h1><br /><br />\n<p>Abstract base class for all feature extractor classes.</p>\n  <p>Feature extractor classes are those that can map input data objects \n  into feature vectors (actually represented as feature dictionaries given \n  the typical sparseness of such vectors).</p>\n  <p>Most commonly this is used ultimately for kernel functions which \n  should simply take any pair of objects and calculate some similarity \n  score between them (given positive definite limitations) for use in a \n  support vector machine  (SVM) style machine-learning application, without\n  ever requiring an explicit vector representation of the data objects.</p>\n  <p>For current practical purposes, most of our kernels are based on some \n  data -&gt; feature dictionary mapping, on which we can then apply any of \n  a variety of vector-based similarity measures to complete the kernel \n  function.  These include scalar dot product, Tanimoto, MinMax, Gaussian, \n  etc.</p>\n  <p>The input objects need not be of any particular type as far as this \n  interface is concerned.  They may be strings, molecules (OEMolBase), \n  vectors, etc.  It is up to the implementing class to make those \n  distinctions.</p>\n  <p>The results of these extractors will be feature dictionaries for each \n  input object.  These are simple dictionary objects representing sparse \n  feature vectors with the most common interpretation having the dictionary\n  item keys as string representations of the features, and the item values \n  as the number of times that feature appears in the data object.</p>\n  The general output of these extractors will be a text file \n  representation of these feature dictionaries, the specifics of which are \n  specified by the FeatureDictWriter class.  Modules in the Similarity \n  package can then apply the assorted similarity measures on these feature \n  dictionaries to produce a Gram matrix of similarity scores for input into\n  an SVM or other learning machine.<br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#__init__\" class=\"summary-sig-name\">__init__</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Default constructor.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#loadOptions\" class=\"summary-sig-name\">loadOptions</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">options</span>)</span><br />\n      Load relevant options derived from an optparse.OptionParser into \n      the state of this object.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#loadArgs\" class=\"summary-sig-name\">loadArgs</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">args</span>)</span><br />\n      Similar to loadOptions, handle the arguments that come out of \n      optparse.OptionParser.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#main\" class=\"summary-sig-name\">main</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">argv</span>,\n        <span class=\"summary-sig-arg\">closeOutfile</span>=<span class=\"summary-sig-default\">True</span>)</span><br />\n      Main method, callable from command line.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#__call__\" class=\"summary-sig-name\">__call__</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj</span>)</span><br />\n      Primary abstract method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#objectDescription\" class=\"summary-sig-name\">objectDescription</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj</span>)</span><br />\n      Abstract method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#getNameID\" class=\"summary-sig-name\">getNameID</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj</span>)</span><br />\n      Overridable method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#outputFeatures\" class=\"summary-sig-name\">outputFeatures</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">objIter</span>,\n        <span class=\"summary-sig-arg\">outFile</span>)</span><br />\n      Convenience method shared by all extractors to generate and output\n      features for all input objects.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#parser\" class=\"summary-name\">parser</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Searc<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#inputIter\" class=\"summary-name\">inputIter</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Se<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#outFile\" class=\"summary-name\">outFile</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Sear<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.features.BaseFeatureExtractor.BaseFeatureExtractor-class.html#inputFunction\" class=\"summary-name\">inputFunction</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingMode<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"__init__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__init__</span>(<span class=\"sig-arg\">self</span>)</span>\n    <br /><em class=\"fname\">(Constructor)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Default constructor.  Sets up expected command-line options.</p>\n  Sub-classes can add their own options on top of these, though should \n  beware of overwriting an option letter.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"loadOptions\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">loadOptions</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">options</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Load relevant options derived from an optparse.OptionParser into the \n  state of this object.</p>\n  Sub-classes should have this handle any of the options it added to the\n  command-line parser via the constructor.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"loadArgs\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">loadArgs</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Similar to loadOptions, handle the arguments that come out of \n  optparse.OptionParser.</p>\n  <p>Subclass is responsible for translating the command-line arguments \n  into an actual input iterator and output file object.</p>\n  A default implementation is available here, assuming the arguments \n  should be interpreted as a simple input and simple output file. If this \n  is not the case, the sub-class should override this method or modify the \n  self.inputFunction member in its constructor. For example using something\n  like an oemolistream or FeatureDictReader.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"main\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">main</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">argv</span>,\n        <span class=\"sig-arg\">closeOutfile</span>=<span class=\"sig-default\">True</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Main method, callable from command line.</p>\n  Setup several common options that all of the sub-classes will \n  share.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__call__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__call__</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj</span>)</span>\n    <br /><em class=\"fname\">(Call operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Primary abstract method.  Build a dictionary of an input object's \n  important features.</p>\n  <p>Should be such that it is easy to compare any two objects' feature \n  dictionaries.</p>\n  This uses the &quot;callable&quot; interface, which means the object \n  is a functor which should be used like a function call.  For example: \n  &gt;&gt;&gt; from SpectrumExtractor import SpectrumExtractor; \n  &gt;&gt;&gt; featureExtractor = SpectrumExtractor(); &gt;&gt;&gt; \n  featureExtractor.k = 1; &gt;&gt;&gt; featureDict = \n  featureExtractor(&quot;teststring&quot;);     # Note that the extractor \n  object looks like a function call &gt;&gt;&gt; features = \n  featureDict.keys(); &gt;&gt;&gt; features.sort(); &gt;&gt;&gt; for \n  feature in features: ...     print feature, featureDict[feature] e 1 g 1 \n  i 1 n 1 r 1 s 2 t 3\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"objectDescription\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">objectDescription</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Abstract method.  Return a string description of the input object.</p>\n  Individual extractor classes should implement the proper thing to do \n  here. For example, if the input is a SMILES string, just return the \n  string itself, but if the input object is an OEMolBase object, it could \n  generate a SMILES string for it, etc.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"getNameID\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">getNameID</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Overridable method.  Return a string name or ID label for the input \n  object.</p>\n  For molecule objects, this will probably be mol.GetTitle(). Otherwise,\n  default to a sentinel value.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"outputFeatures\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">outputFeatures</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">objIter</span>,\n        <span class=\"sig-arg\">outFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Convenience method shared by all extractors to generate and output \n  features for all input objects.</p>\n  Generated features will be output in feature dictionary format to the \n  output file.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== CLASS VARIABLE DETAILS ==================== -->\n<a name=\"section-ClassVariableDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variable Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariableDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"parser\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">parser</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"inputIter\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">inputIter</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"outFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">outFile</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"inputFunction\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">inputFunction</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:32 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 41171.0}