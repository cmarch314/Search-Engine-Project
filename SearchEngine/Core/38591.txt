{"text": "OEChem C Theory Manual Version 1 3 1 Previous 22 3 Functors have State Up 22 Predicate Functors Next 22 5 Call Backs 22 4 OEUnaryPredicate In OEChem we define a very limited set of functors called the OEUnaryPredicate and OEBinaryPredicate These two classes are abstract base classes which define interfaces with the following restrictions First they only return boolean Second they must define an operator which is a const function i e doesn t change the state of the predicate Third the unary predicate is a template of 1 argument ArgType whose operator must take a single argument of type const to ArgType Similarly the binary predicate is a template of 2 arguments ArgType1 ArgType2 whose operator must take two arguments one of const to ArgType1 and another of const to ArgType2 Fourth these predicates must define a virtual constructor function CreateCopy which returns a pointer to a copy of the predicate This is useful for generating copies of a functor which has been passed into a function as a reference to the OEUnaryPredicate base class Fifth these predicates define Eval functions which are wrappers around operator and effectively make operator a virtual function While these restrictions may seem limiting at first glance they actually produce a set of reliable behaviors which are quite useful Unary predicates are used throughout OEChem as filters on the atoms bonds conformers and molecules a programmer is interested in examining via iterator interfaces OEChem C Theory Manual Version 1 3 1 Previous 22 3 Functors have State Up 22 Predicate Functors Next 22 5 Call Backs Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node175.html", "title": "22.4 oeunarypredicate", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>22.4 OEUnaryPredicate</title>\n<META NAME=\"description\" CONTENT=\"22.4 OEUnaryPredicate\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node176.html\">\n<LINK REL=\"previous\" HREF=\"node174.html\">\n<LINK REL=\"up\" HREF=\"node171.html\">\n<LINK REL=\"next\" HREF=\"node176.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node174.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node176.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node174.html\">22.3 Functors have State</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node176.html\">22.5 Call-Backs</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0025400000000000000000\">\n22.4 OEUnaryPredicate</A>\n</H1>\n\n<P>\nIn OEChem, we define a very limited set of functors called the\n<code>OEUnaryPredicate</code> and <code>OEBinaryPredicate</code>.  These two classes\nare abstract base classes which define interfaces with the following\nrestrictions.  First, they only return boolean.  Second, they must define\nan <code>operator()</code> which is a const function (<I>i.e.</I> - doesn't change\nthe state of the predicate).  Third, the unary predicate is a template of 1\nargument ArgType whose <code>operator()</code> must take a single argument of\ntype const &amp; to ArgType.  Similarly, the binary predicate is a template of\n2 arguments (ArgType1, ArgType2) whose <code>operator()</code> must take two\narguments, one of const &amp; to ArgType1 and another of const &amp; to ArgType2.\nFourth, these predicates must define a virtual constructor function\n(<code>CreateCopy</code>) which returns a pointer to a copy of the predicate.\nThis is useful for generating copies of a functor which has been passed\ninto a function as a reference to the <code>OEUnaryPredicate</code> base class.\nFifth, these predicates define <code>Eval</code> functions which are wrappers\naround <code>operator()</code> and effectively make <code>operator()</code> a virtual\nfunction.\n\n<P>\nWhile these restrictions may seem limiting at first glance, they actually\nproduce a set of reliable behaviors which are quite useful.  Unary\npredicates are used throughout OEChem as filters on the atoms, bonds,\nconformers, and molecules a programmer is interested in examining via\niterator interfaces.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node174.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node176.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node174.html\">22.3 Functors have State</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node176.html\">22.5 Call-Backs</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38591.0}