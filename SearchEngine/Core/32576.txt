{"text": "Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD org itr rescue dataGuard localFileSystem Class JFMLocalFile java lang Object org itr rescue dataGuard localFileSystem JFMFile org itr rescue dataGuard localFileSystem JFMLocalFile All Implemented Interfaces java lang Comparable public class JFMLocalFileextends JFMFile TODO change me Author sergiu Field Summary Fields inherited from class org itr rescue dataGuard localFileSystem JFMFiledata displayName marked multiPart Constructor SummaryJFMLocalFile java lang Object data Constructor of this file Method Summary booleancanRead Tests whether the application can read the file denoted by the abstract pathname booleancanWrite Tests whether the application can modify to the file denoted by the abstract pathname intcompareTo JFMFile pathname Compares two abstract pathnames lexicographically JFMFilecreateFile java lang String name Creates the file named by the abstract pathname denoted by the parameter booleandelete Deletes the file or directory denoted by the abstract pathname booleanequals java lang Object obj Tests this abstract pathname for equality with the given object booleanexists Tests whether the file or directory denoted by the abstract pathname exists JFMFilegetAbsoluteFile Returns the absolute form of this abstract pathname java lang StringgetAbsolutePath Returns the absolute pathname string of this abstract pathname JFMFilegetCanonicalFile Returns the canonical form of this abstract pathname java lang StringgetCanonicalPath Returns the canonical pathname string of this abstract pathname java io FilegetFile gets the content of the JFMFile if it exists javax swing IcongetIcon Returns the filesystem s icon associated with this file or null if it can t be determined java io InputStreamgetInputStream Returns an InputStream to read from this file or null if it can t be done the filesystem doesn t support it java lang StringgetMimeType This method returns the string that represents the mime type of this file or null if it can t be determined java lang StringgetName This string represents the short name of the file e g java io OutputStreamgetOutputStream Returns an OutputStream to write to this file or null if the write operation isn t supported or doesn t make sense from the filesystem s point of view java lang StringgetParent Returns the pathname string of this abstract pathname s parent or null if this pathname does not name a parent directory JFMFilegetParentFile Returns the abstract pathname of this abstract pathname s parent or null if this pathname does not name a parent directory java lang StringgetPath Converts this abstract pathname into a pathname string java lang StringgetSystemDisplayName Returns the system display name as returned by the filesystem viewer or null inthashCode Computes a hash code for this abstract pathname booleanisAbsolute Tests whether this abstract pathname is absolute booleanisDirectory Tests whether the file denoted by this abstract pathname is a directory booleanisFile Tests whether the file denoted by this abstract pathname is a normal file booleanisHidden Tests whether the file named by this abstract pathname is a hidden file longlastModified Returns the time that the file denoted by this abstract pathname was last modified longlength Returns the length of the file denoted by this abstract pathname JFMFile listFiles Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname JFMFilemkdir java lang String name Creates the directory named by the abstract pathname denoted by the parameter Methods inherited from class org itr rescue dataGuard localFileSystem JFMFilecompareTo getDisplayName getMultiPart getRootDriveFile isMarked setDisplayName setMarked setMultiPart toString Methods inherited from class java lang Objectclone finalize getClass notify notifyAll wait wait wait Constructor Detail JFMLocalFile public JFMLocalFile java lang Object data Constructor of this file Method Detail getInputStream public java io InputStream getInputStream Description copied from class JFMFileReturns an InputStream to read from this file or null if it can t be done the filesystem doesn t support it Specified by getInputStream in class JFMFile Returns an InputStream to read from the fileSee Also org jfm md filesystems JFMFile getInputStream listFiles public JFMFile listFiles Description copied from class JFMFileReturns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname If this abstract pathname does not denote a directory then this method returns null Otherwise an array of File objects is returned one for each file or directory in the directory Pathnames denoting the directory itself and the directory s parent directory are not included in the result Each resulting abstract pathname is constructed from this abstract pathname using the File File String constructor Therefore if this pathname is absolute then each resulting pathname is absolute if this pathname is relative then each resulting pathname will be relative to the same directory There is no guarantee that the name strings in the resulting array will appear in any specific order they are not in particular guaranteed to appear in alphabetical order Specified by listFiles in class JFMFile Returns An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname The array will be empty if the directory is empty Returns null if this abstract pathname does not denote a directory or if an I O error occurs See Also org jfm md filesystems JFMFile listFiles getOutputStream public java io OutputStream getOutputStream Description copied from class JFMFileReturns an OutputStream to write to this file or null if the write operation isn t supported or doesn t make sense from the filesystem s point of view The way that this is implemented in every filesystem can vary The call to this method might get the file to be emptied as in the LocalFileSystem implementation You have been warned Specified by getOutputStream in class JFMFile Returns An OutputStream to write to this fileSee Also org jfm md filesystems JFMFile getOutputStream getName public java lang String getName Description copied from class JFMFileThis string represents the short name of the file e g foo txt Specified by getName in class JFMFile See Also org jfm md filesystems JFMFile getName getParent public java lang String getParent Description copied from class JFMFileReturns the pathname string of this abstract pathname s parent or null if this pathname does not name a parent directory The parent of an abstract pathname consists of the pathname s prefix if any and each name in the pathname s name sequence except for the last If the name sequence is empty then the pathname does not name a parent directory Specified by getParent in class JFMFile Returns The pathname string of the parent directory named by this abstract pathname or null if this pathname does not name a parentSee Also org jfm md filesystems JFMFile getParent getMimeType public java lang String getMimeType Description copied from class JFMFileThis method returns the string that represents the mime type of this file or null if it can t be determined Specified by getMimeType in class JFMFile Returns the mime type of this fileSee Also org jfm md filesystems JFMFile getMimeType getParentFile public JFMFile getParentFile Description copied from class JFMFileReturns the abstract pathname of this abstract pathname s parent or null if this pathname does not name a parent directory The parent of an abstract pathname consists of the pathname s prefix if any and each name in the pathname s name sequence except for the last If the name sequence is empty then the pathname does not name a parent directory Specified by getParentFile in class JFMFile Returns The abstract pathname of the parent directory named by this abstract pathname or null if this pathname does not name a parentSee Also org jfm md filesystems JFMFile getParentFile getPath public java lang String getPath Description copied from class JFMFileConverts this abstract pathname into a pathname string The resulting string uses the default name separator character to separate the names in the name sequence Specified by getPath in class JFMFile Returns The string form of this abstract pathnameSee Also org jfm md filesystems JFMFile getPath isAbsolute public boolean isAbsolute Description copied from class JFMFileTests whether this abstract pathname is absolute The definition of absolute pathname is system dependent On UNIX systems a pathname is absolute if its prefix is On Microsoft Windows systems a pathname is absolute if its prefix is a drive specifier followed by or if its prefix is Some other filesystems implementations FTP NFS SMB etc can have their own definition of the absolute pathname ven though I would recommend sticking to the UNIX definition Specified by isAbsolute in class JFMFile Returns true if this abstract pathname is absolute false otherwiseSee Also org jfm md filesystems JFMFile isAbsolute getAbsolutePath public java lang String getAbsolutePath Description copied from class JFMFileReturns the absolute pathname string of this abstract pathname If this abstract pathname is already absolute then the pathname string is simply returned as if by the JFMFile getPath method If this abstract pathname is the empty abstract pathname then the pathname string of the current user directory which is named by the system property user dir is returned Otherwise this pathname is resolved in a system dependent way On UNIX systems a relative pathname is made absolute by resolving it against the current user directory On Microsoft Windows systems a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname if any if not it is resolved against the current user directory Specified by getAbsolutePath in class JFMFile Returns The absolute pathname string denoting the same file or directory as this abstract pathnameSee Also org jfm md filesystems JFMFile getAbsolutePath getAbsoluteFile public JFMFile getAbsoluteFile Description copied from class JFMFileReturns the absolute form of this abstract pathname Specified by getAbsoluteFile in class JFMFile Returns The absolute abstract pathname denoting the same file or directory as this abstract pathnameSee Also org jfm md filesystems JFMFile getAbsoluteFile getCanonicalPath public java lang String getCanonicalPath throws FSException Description copied from class JFMFileReturns the canonical pathname string of this abstract pathname A canonical pathname is both absolute and unique The precise definition of canonical form is system dependent This method first converts this pathname to absolute form if necessary as if by invoking the JFMFile getAbsolutePath method and then maps it to its unique form in a system dependent way This typically involves removing redundant names such as and from the pathname resolving symbolic links on UNIX platforms and converting drive letters to a standard case on Microsoft Windows platforms Every pathname that denotes an existing file or directory has a unique canonical form Every pathname that denotes a nonexistent file or directory also has a unique canonical form The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created Similarly the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is deleted Specified by getCanonicalPath in class JFMFile Returns The canonical pathname string denoting the same file or directory as this abstract pathname Throws FSException If an filesystem error occurs which is possible because the construction of the canonical pathname may require filesystem queriesSee Also org jfm md filesystems JFMFile getCanonicalPath getCanonicalFile public JFMFile getCanonicalFile throws FSException Description copied from class JFMFileReturns the canonical form of this abstract pathname Specified by getCanonicalFile in class JFMFile Returns The canonical pathname string denoting the same file or directory as this abstract pathname Throws FSException If an filesystem error occurs which is possible because the construction of the canonical pathname may require filesystem queriesSee Also org jfm md filesystems JFMFile getCanonicalFile isDirectory public boolean isDirectory Description copied from class JFMFileTests whether the file denoted by this abstract pathname is a directory Specified by isDirectory in class JFMFile Returns true if and only if the file denoted by this abstract pathname exists and is a directory false otherwiseSee Also org jfm md filesystems JFMFile isDirectory isFile public boolean isFile Description copied from class JFMFileTests whether the file denoted by this abstract pathname is a normal file A file is normal if it is not a directory and in addition satisfies other system dependent criteria Any non directory file created by a Java application is guaranteed to be a normal file Specified by isFile in class JFMFile Returns true if and only if the file denoted by this abstract pathname exists and is a normal file false otherwiseSee Also org jfm md filesystems JFMFile isFile isHidden public boolean isHidden Description copied from class JFMFileTests whether the file named by this abstract pathname is a hidden file The exact definition of hidden is system dependent On UNIX systems a file is considered to be hidden if its name begins with a period character On Microsoft Windows systems a file is considered to be hidden if it has been marked as such in the filesystem Specified by isHidden in class JFMFile Returns true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platformSee Also org jfm md filesystems JFMFile isHidden lastModified public long lastModified Description copied from class JFMFileReturns the time that the file denoted by this abstract pathname was last modified Specified by lastModified in class JFMFile Returns A long value representing the time the file was last modified measured in milliseconds since the epoch GMT January 1 197 or L if the file does not exist or if an I O error occursSee Also org jfm md filesystems JFMFile lastModified length public long length Description copied from class JFMFileReturns the length of the file denoted by this abstract pathname The return value is unspecified if this pathname denotes a directory Specified by length in class JFMFile Returns The length in bytes of the file denoted by this abstract pathname or L if the file does not existSee Also org jfm md filesystems JFMFile length compareTo public int compareTo JFMFile pathname Description copied from class JFMFileCompares two abstract pathnames lexicographically The ordering defined by this method depends upon the underlying system On UNIX systems alphabetic case is significant in comparing pathnames on Microsoft Windows systems it is not Specified by compareTo in class JFMFile Parameters pathname The abstract pathname to be compared to this abstract pathname Returns Zero if the argument is equal to this abstract pathname a value less than zero if this abstract pathname is lexicographically less than the argument or a value greater than zero if this abstract pathname is lexicographically greater than the argumentSee Also org jfm md filesystems JFMFile compareTo org jfm md filesystems JFMFile equals public boolean equals java lang Object obj Description copied from class JFMFileTests this abstract pathname for equality with the given object Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname Whether or not two abstract pathnames are equal depends upon the underlying system On UNIX systems alphabetic case is significant in comparing pathnames on Microsoft Windows systems it is not With other filesystems implementation it s their responsability to decide wether it should be case sensitive or not Specified by equals in class JFMFile Parameters obj The object to be compared with this abstract pathname Returns true if and only if the objects are the same false otherwiseSee Also Object equals java lang Object hashCode public int hashCode Description copied from class JFMFileComputes a hash code for this abstract pathname Because equality of abstract pathnames is inherently system dependent so is the computation of their hash codes On UNIX systems the hash code of an abstract pathname is equal to the exclusive or of its pathname string and the decimal value 1234321 On Microsoft Windows systems the hash code is equal to the exclusive or of its pathname string convered to lower case and the decimal value 1234321 Specified by hashCode in class JFMFile Returns A hash code for this abstract pathnameSee Also Object hashCode canRead public boolean canRead Description copied from class JFMFileTests whether the application can read the file denoted by the abstract pathname Specified by canRead in class JFMFile Returns true if and only if the file specified by this abstract pathname exists and can be read by the application false otherwiseSee Also org jfm md filesystems JFMFile canRead canWrite public boolean canWrite Description copied from class JFMFileTests whether the application can modify to the file denoted by the abstract pathname Specified by canWrite in class JFMFile Returns true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file false otherwise See Also org jfm md filesystems JFMFile canWrite exists public boolean exists Description copied from class JFMFileTests whether the file or directory denoted by the abstract pathname exists Specified by exists in class JFMFile Returns true if and only if the file or directory denoted by this abstract pathname exists false otherwiseSee Also org jfm md filesystems JFMFile exists mkdir public JFMFile mkdir java lang String name Description copied from class JFMFileCreates the directory named by the abstract pathname denoted by the parameter Specified by mkdir in class JFMFile Returns The new file object created or null otherwiseSee Also org jfm md filesystems JFMFile mkdir createFile public JFMFile createFile java lang String name Description copied from class JFMFileCreates the file named by the abstract pathname denoted by the parameter Specified by createFile in class JFMFile Returns The new file object created or null otherwise delete public boolean delete Description copied from class JFMFileDeletes the file or directory denoted by the abstract pathname If this pathname denotes a directory then the directory must be empty in order to be deleted Specified by delete in class JFMFile Returns true if and only if the file or directory is successfully deleted false otherwiseSee Also org jfm md filesystems JFMFile delete getIcon public javax swing Icon getIcon Description copied from class JFMFileReturns the filesystem s icon associated with this file or null if it can t be determined Specified by getIcon in class JFMFile Returns The filesystem s icon associated with this file or null if it can t be determined See Also org jfm md filesystems JFMFile getIcon getSystemDisplayName public java lang String getSystemDisplayName Description copied from class JFMFileReturns the system display name as returned by the filesystem viewer or null Specified by getSystemDisplayName in class JFMFile Returns getFile public java io File getFile Description copied from class JFMFilegets the content of the JFMFile if it exists Overrides getFile in class JFMFile Overview Package Class Use Tree Deprecated Index Help PREV CLASS NEXT CLASS FRAMES NO FRAMES All Classes SUMMARY NESTED FIELD CONSTR METHOD DETAIL FIELD CONSTR METHOD", "_id": "http://www.ics.uci.edu/~projects/DataGuard/javadoc/org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html", "title": "\r\njfmlocalfile\r\n", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<!--NewPage-->\r\n<HTML>\r\n<HEAD>\r\n<!-- Generated by javadoc (build 1.6.0_01) on Tue Jul 03 14:38:37 PDT 2007 -->\r\n<TITLE>\r\nJFMLocalFile\r\n</TITLE>\r\n\r\n<META NAME=\"date\" CONTENT=\"2007-07-03\">\r\n\r\n<LINK REL =\"stylesheet\" TYPE=\"text/css\" HREF=\"../../../../stylesheet.css\" TITLE=\"Style\">\r\n\r\n<SCRIPT type=\"text/javascript\">\r\nfunction windowTitle()\r\n{\r\n    if (location.href.indexOf('is-external=true') == -1) {\r\n        parent.document.title=\"JFMLocalFile\";\r\n    }\r\n}\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n</NOSCRIPT>\r\n\r\n</HEAD>\r\n\r\n<BODY BGCOLOR=\"white\" onload=\"windowTitle();\">\r\n<HR>\r\n\r\n\r\n<!-- ========= START OF TOP NAVBAR ======= -->\r\n<A NAME=\"navbar_top\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_top\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_top_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMLocalFile.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMLocalFile.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF=\"#fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_top\"></A>\r\n<!-- ========= END OF TOP NAVBAR ========= -->\r\n\r\n<HR>\r\n<!-- ======== START OF CLASS DATA ======== -->\r\n<H2>\r\n<FONT SIZE=\"-1\">\r\norg.itr_rescue.dataGuard.localFileSystem</FONT>\r\n<BR>\r\nClass JFMLocalFile</H2>\r\n<PRE>\r\njava.lang.Object\r\n  <IMG SRC=\"../../../../resources/inherit.gif\" ALT=\"extended by \"><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">org.itr_rescue.dataGuard.localFileSystem.JFMFile</A>\r\n      <IMG SRC=\"../../../../resources/inherit.gif\" ALT=\"extended by \"><B>org.itr_rescue.dataGuard.localFileSystem.JFMLocalFile</B>\r\n</PRE>\r\n<DL>\r\n<DT><B>All Implemented Interfaces:</B> <DD>java.lang.Comparable</DD>\r\n</DL>\r\n<HR>\r\n<DL>\r\n<DT><PRE>public class <B>JFMLocalFile</B><DT>extends <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></DL>\r\n</PRE>\r\n\r\n<P>\r\nTODO change me!!!\r\n<P>\r\n\r\n<P>\r\n<DL>\r\n<DT><B>Author:</B></DT>\r\n  <DD>sergiu</DD>\r\n</DL>\r\n<HR>\r\n\r\n<P>\r\n<!-- =========== FIELD SUMMARY =========== -->\r\n\r\n<A NAME=\"field_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Field Summary</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n&nbsp;<A NAME=\"fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">\r\n<TH ALIGN=\"left\"><B>Fields inherited from class org.itr_rescue.dataGuard.localFileSystem.<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></B></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#data\">data</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#displayName\">displayName</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#marked\">marked</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#multiPart\">multiPart</A></CODE></TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<!-- ======== CONSTRUCTOR SUMMARY ======== -->\r\n\r\n<A NAME=\"constructor_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Constructor Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#JFMLocalFile(java.lang.Object)\">JFMLocalFile</A></B>(java.lang.Object&nbsp;data)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor of this file.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<!-- ========== METHOD SUMMARY =========== -->\r\n\r\n<A NAME=\"method_summary\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"2\"><FONT SIZE=\"+2\">\r\n<B>Method Summary</B></FONT></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#canRead()\">canRead</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can read the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#canWrite()\">canWrite</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the application can modify to the file denoted by the\n abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;int</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">compareTo</A></B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;pathname)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares two abstract pathnames lexicographically.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#createFile(java.lang.String)\">createFile</A></B>(java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the file named by the abstract pathname denoted by the parameter.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#delete()\">delete</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deletes the file or directory denoted by the abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#equals(java.lang.Object)\">equals</A></B>(java.lang.Object&nbsp;obj)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests this abstract pathname for equality with the given object.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#exists()\">exists</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file or directory denoted by the abstract pathname\n exists.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getAbsoluteFile()\">getAbsoluteFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute form of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getAbsolutePath()\">getAbsolutePath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the absolute pathname string of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getCanonicalFile()\">getCanonicalFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical form of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getCanonicalPath()\">getCanonicalPath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the canonical pathname string of this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.io.File</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getFile()\">getFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gets the content of the JFMFile if it exists.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;javax.swing.Icon</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getIcon()\">getIcon</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the filesystem's icon associated with this file, or null if it can't be determined.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.io.InputStream</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getInputStream()\">getInputStream</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getMimeType()\">getMimeType</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method returns the string that represents the mime-type of this file, or null if it can't be determined.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getName()\">getName</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This string represents the short name of the file (e.g.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.io.OutputStream</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getOutputStream()\">getOutputStream</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an OutputStream to write to this file, or null if the write operation isn't supported\n (or doesn;t make sense from the filesystem's point of view).</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getParent()\">getParent</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the pathname string of this abstract pathname's parent, or\n <code>null</code> if this pathname does not name a parent directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getParentFile()\">getParentFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the abstract pathname of this abstract pathname's parent,\n or <code>null</code> if this pathname does not name a parent\n directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getPath()\">getPath</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts this abstract pathname into a pathname string.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;java.lang.String</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#getSystemDisplayName()\">getSystemDisplayName</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the system display name as returned by the filesystem viewer, or null</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;int</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#hashCode()\">hashCode</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computes a hash code for this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isAbsolute()\">isAbsolute</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether this abstract pathname is absolute.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isDirectory()\">isDirectory</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a\n directory.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isFile()\">isFile</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file denoted by this abstract pathname is a normal\n file.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;boolean</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#isHidden()\">isHidden</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether the file named by this abstract pathname is a hidden\n file.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;long</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#lastModified()\">lastModified</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the time that the file denoted by this abstract pathname was\n last modified.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;long</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#length()\">length</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the length of the file denoted by this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[]</CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#listFiles()\">listFiles</A></B>()</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.</TD>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD ALIGN=\"right\" VALIGN=\"top\" WIDTH=\"1%\"><FONT SIZE=\"-1\">\r\n<CODE>&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></FONT></TD>\r\n<TD><CODE><B><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html#mkdir(java.lang.String)\">mkdir</A></B>(java.lang.String&nbsp;name)</CODE>\r\n\r\n<BR>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates the directory named by the abstract pathname denoted by the parameter.</TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;<A NAME=\"methods_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">\r\n<TH ALIGN=\"left\"><B>Methods inherited from class org.itr_rescue.dataGuard.localFileSystem.<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></B></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(java.lang.Object)\">compareTo</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getDisplayName()\">getDisplayName</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMultiPart()\">getMultiPart</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getRootDriveFile()\">getRootDriveFile</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isMarked()\">isMarked</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setDisplayName(java.lang.String)\">setDisplayName</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMarked(boolean)\">setMarked</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#setMultiPart(java.util.Hashtable)\">setMultiPart</A>, <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#toString()\">toString</A></CODE></TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;<A NAME=\"methods_inherited_from_class_java.lang.Object\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#EEEEFF\" CLASS=\"TableSubHeadingColor\">\r\n<TH ALIGN=\"left\"><B>Methods inherited from class java.lang.Object</B></TH>\r\n</TR>\r\n<TR BGCOLOR=\"white\" CLASS=\"TableRowColor\">\r\n<TD><CODE>clone, finalize, getClass, notify, notifyAll, wait, wait, wait</CODE></TD>\r\n</TR>\r\n</TABLE>\r\n&nbsp;\r\n<P>\r\n\r\n<!-- ========= CONSTRUCTOR DETAIL ======== -->\r\n\r\n<A NAME=\"constructor_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Constructor Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"JFMLocalFile(java.lang.Object)\"><!-- --></A><H3>\r\nJFMLocalFile</H3>\r\n<PRE>\r\npublic <B>JFMLocalFile</B>(java.lang.Object&nbsp;data)</PRE>\r\n<DL>\r\n<DD>Constructor of this file.\r\n<P>\r\n</DL>\r\n\r\n<!-- ============ METHOD DETAIL ========== -->\r\n\r\n<A NAME=\"method_detail\"><!-- --></A>\r\n<TABLE BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">\r\n<TH ALIGN=\"left\" COLSPAN=\"1\"><FONT SIZE=\"+2\">\r\n<B>Method Detail</B></FONT></TH>\r\n</TR>\r\n</TABLE>\r\n\r\n<A NAME=\"getInputStream()\"><!-- --></A><H3>\r\ngetInputStream</H3>\r\n<PRE>\r\npublic java.io.InputStream <B>getInputStream</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getInputStream()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns an InputStream to read from this file, or null if it can't be done (the filesystem doesn't support it)\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getInputStream()\">getInputStream</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>an InputStream to read from the file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getInputStream()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"listFiles()\"><!-- --></A><H3>\r\nlistFiles</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>[] <B>listFiles</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#listFiles()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.\n\n <p> If this abstract pathname does not denote a directory, then this\n method returns <code>null</code>.  Otherwise an array of\n <code>File</code> objects is returned, one for each file or directory in\n the directory.  Pathnames denoting the directory itself and the\n directory's parent directory are not included in the result.  Each\n resulting abstract pathname is constructed from this abstract pathname\n using the <code><CODE>File(File,&nbsp;String)</CODE></code> constructor.  Therefore if this pathname\n is absolute then each resulting pathname is absolute; if this pathname\n is relative then each resulting pathname will be relative to the same\n directory.\n\n <p> There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#listFiles()\">listFiles</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract\n          pathname.  The array will be empty if the directory is\n          empty.  Returns <code>null</code> if this abstract pathname\n          does not denote a directory, or if an I/O error occurs.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#listFiles()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getOutputStream()\"><!-- --></A><H3>\r\ngetOutputStream</H3>\r\n<PRE>\r\npublic java.io.OutputStream <B>getOutputStream</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getOutputStream()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns an OutputStream to write to this file, or null if the write operation isn't supported\n (or doesn;t make sense from the filesystem's point of view).\n The way that this is implemented in every filesystem can vary.\n The call to this method might get the file to be emptied (as in the LocalFileSystem implementation)\n You have been warned.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getOutputStream()\">getOutputStream</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>An OutputStream to write to this file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getOutputStream()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getName()\"><!-- --></A><H3>\r\ngetName</H3>\r\n<PRE>\r\npublic java.lang.String <B>getName</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getName()\">JFMFile</A></CODE></B></DD>\r\n<DD>This string represents the short name of the file (e.g. foo.txt)\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getName()\">getName</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getName()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getParent()\"><!-- --></A><H3>\r\ngetParent</H3>\r\n<PRE>\r\npublic java.lang.String <B>getParent</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParent()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the pathname string of this abstract pathname's parent, or\n <code>null</code> if this pathname does not name a parent directory.\n\n <p> The <em>parent</em> of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParent()\">getParent</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The pathname string of the parent directory named by this\n          abstract pathname, or <code>null</code> if this pathname\n          does not name a parent<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getParent()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getMimeType()\"><!-- --></A><H3>\r\ngetMimeType</H3>\r\n<PRE>\r\npublic java.lang.String <B>getMimeType</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMimeType()\">JFMFile</A></CODE></B></DD>\r\n<DD>This method returns the string that represents the mime-type of this file, or null if it can't be determined.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getMimeType()\">getMimeType</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>the mime type of this file<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getMimeType()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getParentFile()\"><!-- --></A><H3>\r\ngetParentFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getParentFile</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParentFile()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the abstract pathname of this abstract pathname's parent,\n or <code>null</code> if this pathname does not name a parent\n directory.\n\n <p> The <em>parent</em> of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getParentFile()\">getParentFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The abstract pathname of the parent directory named by this\n          abstract pathname, or <code>null</code> if this pathname\n          does not name a parent<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getParentFile()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getPath()\"><!-- --></A><H3>\r\ngetPath</H3>\r\n<PRE>\r\npublic java.lang.String <B>getPath</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\">JFMFile</A></CODE></B></DD>\r\n<DD>Converts this abstract pathname into a pathname string.  The resulting\n string uses the <CODE>default name-separator character</CODE> to\n separate the names in the name sequence.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\">getPath</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The string form of this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getPath()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isAbsolute()\"><!-- --></A><H3>\r\nisAbsolute</H3>\r\n<PRE>\r\npublic boolean <B>isAbsolute</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isAbsolute()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On UNIX systems, a pathname is\n absolute if its prefix is <code>\"/\"</code>.  On Microsoft Windows systems, a\n pathname is absolute if its prefix is a drive specifier followed by\n <code>\"\\\\\"</code>, or if its prefix is <code>\"\\\\\"</code>.\n Some other filesystems implementations (FTP, NFS, SMB, etc.) can have their own definition\n of the <i>absolute pathname</i>, ven though I would recommend sticking to the UNIX definition.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isAbsolute()\">isAbsolute</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if this abstract pathname is absolute,\n          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isAbsolute()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getAbsolutePath()\"><!-- --></A><H3>\r\ngetAbsolutePath</H3>\r\n<PRE>\r\npublic java.lang.String <B>getAbsolutePath</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the absolute pathname string of this abstract pathname.\n\n <p> If this abstract pathname is already absolute, then the pathname\n string is simply returned as if by the <code><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getPath()\"><CODE>JFMFile.getPath()</CODE></A></code>\n method.  If this abstract pathname is the empty abstract pathname then\n the pathname string of the current user directory, which is named by the\n system property <code>user.dir</code>, is returned.  Otherwise this\n pathname is resolved in a system-dependent way.  On UNIX systems, a\n relative pathname is made absolute by resolving it against the current\n user directory.  On Microsoft Windows systems, a relative pathname is made absolute\n by resolving it against the current directory of the drive named by the\n pathname, if any; if not, it is resolved against the current user\n directory.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()\">getAbsolutePath</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The absolute pathname string denoting the same file or\n          directory as this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getAbsolutePath()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getAbsoluteFile()\"><!-- --></A><H3>\r\ngetAbsoluteFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getAbsoluteFile</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsoluteFile()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the absolute form of this abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsoluteFile()\">getAbsoluteFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The absolute abstract pathname denoting the same file or\n          directory as this abstract pathname<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getAbsoluteFile()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getCanonicalPath()\"><!-- --></A><H3>\r\ngetCanonicalPath</H3>\r\n<PRE>\r\npublic java.lang.String <B>getCanonicalPath</B>()\r\n                                  throws <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalPath()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the canonical pathname string of this abstract pathname.\n\n <p> A canonical pathname is both absolute and unique.  The precise\n definition of canonical form is system-dependent.  This method first\n converts this pathname to absolute form if necessary, as if by invoking the\n <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getAbsolutePath()\"><CODE>JFMFile.getAbsolutePath()</CODE></A> method, and then maps it to its unique form in a\n system-dependent way.  This typically involves removing redundant names\n such as <tt>\".\"</tt> and <tt>\"..\"</tt> from the pathname, resolving\n symbolic links (on UNIX platforms), and converting drive letters to a\n standard case (on Microsoft Windows platforms).\n\n <p> Every pathname that denotes an existing file or directory has a\n unique canonical form.  Every pathname that denotes a nonexistent file\n or directory also has a unique canonical form.  The canonical form of\n the pathname of a nonexistent file or directory may be different from\n the canonical form of the same pathname after the file or directory is\n created.  Similarly, the canonical form of the pathname of an existing\n file or directory may be different from the canonical form of the same\n pathname after the file or directory is deleted.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalPath()\">getCanonicalPath</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></CODE> - If an filesystem error occurs, which is possible because the\n          construction of the canonical pathname may require\n          filesystem queries<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getCanonicalPath()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getCanonicalFile()\"><!-- --></A><H3>\r\ngetCanonicalFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>getCanonicalFile</B>()\r\n                         throws <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalFile()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the canonical form of this abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getCanonicalFile()\">getCanonicalFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The canonical pathname string denoting the same file or\n          directory as this abstract pathname\r\n<DT><B>Throws:</B>\r\n<DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/FSException.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">FSException</A></CODE> - If an filesystem error occurs, which is possible because the\n          construction of the canonical pathname may require\n          filesystem queries<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getCanonicalFile()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isDirectory()\"><!-- --></A><H3>\r\nisDirectory</H3>\r\n<PRE>\r\npublic boolean <B>isDirectory</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isDirectory()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the file denoted by this abstract pathname is a\n directory.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isDirectory()\">isDirectory</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a directory;\n          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isDirectory()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isFile()\"><!-- --></A><H3>\r\nisFile</H3>\r\n<PRE>\r\npublic boolean <B>isFile</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isFile()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the file denoted by this abstract pathname is a normal\n file.  A file is <em>normal</em> if it is not a directory and, in\n addition, satisfies other system-dependent criteria.  Any non-directory\n file created by a Java application is guaranteed to be a normal file.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isFile()\">isFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname exists <em>and</em> is a normal file;\n          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isFile()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"isHidden()\"><!-- --></A><H3>\r\nisHidden</H3>\r\n<PRE>\r\npublic boolean <B>isHidden</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isHidden()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the file named by this abstract pathname is a hidden\n file.  The exact definition of <em>hidden</em> is system-dependent.  On\n UNIX systems, a file is considered to be hidden if its name begins with\n a period character (<code>'.'</code>).  On Microsoft Windows systems, a file is\n considered to be hidden if it has been marked as such in the filesystem.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#isHidden()\">isHidden</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file denoted by this\n          abstract pathname is hidden according to the conventions of the\n          underlying platform<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#isHidden()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"lastModified()\"><!-- --></A><H3>\r\nlastModified</H3>\r\n<PRE>\r\npublic long <B>lastModified</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#lastModified()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the time that the file denoted by this abstract pathname was\n last modified.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#lastModified()\">lastModified</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>A <code>long</code> value representing the time the file was\n          last modified, measured in milliseconds since the epoch\n          (00:00:00 GMT, January 1, 1970), or <code>0L</code> if the\n          file does not exist or if an I/O error occurs<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#lastModified()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"length()\"><!-- --></A><H3>\r\nlength</H3>\r\n<PRE>\r\npublic long <B>length</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#length()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the length of the file denoted by this abstract pathname.\n The return value is unspecified if this pathname denotes a directory.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#length()\">length</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The length, in bytes, of the file denoted by this abstract\n          pathname, or <code>0L</code> if the file does not exist<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#length()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\"><!-- --></A><H3>\r\ncompareTo</H3>\r\n<PRE>\r\npublic int <B>compareTo</B>(<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A>&nbsp;pathname)</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">JFMFile</A></CODE></B></DD>\r\n<DD>Compares two abstract pathnames lexicographically.  The ordering\n defined by this method depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#compareTo(org.itr_rescue.dataGuard.localFileSystem.JFMFile)\">compareTo</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>pathname</CODE> - The abstract pathname to be compared to this abstract\n                    pathname\r\n<DT><B>Returns:</B><DD>Zero if the argument is equal to this abstract pathname, a\n                value less than zero if this abstract pathname is\n                lexicographically less than the argument, or a value greater\n                than zero if this abstract pathname is lexicographically\n                greater than the argument<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#compareTo(org.jfm.md.filesystems.JFMFile)</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"equals(java.lang.Object)\"><!-- --></A><H3>\r\nequals</H3>\r\n<PRE>\r\npublic boolean <B>equals</B>(java.lang.Object&nbsp;obj)</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#equals(java.lang.Object)\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests this abstract pathname for equality with the given object.\n Returns <code>true</code> if and only if the argument is not\n <code>null</code> and is an abstract pathname that denotes the same file\n or directory as this abstract pathname.  Whether or not two abstract\n pathnames are equal depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not. With other filesystems implementation ... it's their responsability\n to decide wether it should be case sensitive or not.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#equals(java.lang.Object)\">equals</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n<DT><B>Parameters:</B><DD><CODE>obj</CODE> - The object to be compared with this abstract pathname\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the objects are the same;\n          <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>Object.equals(java.lang.Object)</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"hashCode()\"><!-- --></A><H3>\r\nhashCode</H3>\r\n<PRE>\r\npublic int <B>hashCode</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#hashCode()\">JFMFile</A></CODE></B></DD>\r\n<DD>Computes a hash code for this abstract pathname.  Because equality of\n abstract pathnames is inherently system-dependent, so is the computation\n of their hash codes.  On UNIX systems, the hash code of an abstract\n pathname is equal to the exclusive <em>or</em> of its pathname string\n and the decimal value <code>1234321</code>.  On Microsoft Windows systems, the hash\n code is equal to the exclusive <em>or</em> of its pathname string,\n convered to lower case, and the decimal value <code>1234321</code>.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#hashCode()\">hashCode</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>A hash code for this abstract pathname<DT><B>See Also:</B><DD><CODE>Object.hashCode()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canRead()\"><!-- --></A><H3>\r\ncanRead</H3>\r\n<PRE>\r\npublic boolean <B>canRead</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canRead()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the application can read the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canRead()\">canRead</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file specified by this\n          abstract pathname exists <em>and</em> can be read by the\n          application; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#canRead()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"canWrite()\"><!-- --></A><H3>\r\ncanWrite</H3>\r\n<PRE>\r\npublic boolean <B>canWrite</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canWrite()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the application can modify to the file denoted by the\n abstract pathname.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#canWrite()\">canWrite</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file system actually\n          contains a file denoted by this abstract pathname <em>and</em>\n          the application is allowed to write to the file;\n          <code>false</code> otherwise.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#canWrite()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"exists()\"><!-- --></A><H3>\r\nexists</H3>\r\n<PRE>\r\npublic boolean <B>exists</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#exists()\">JFMFile</A></CODE></B></DD>\r\n<DD>Tests whether the file or directory denoted by the abstract pathname\n exists.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#exists()\">exists</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory denoted\n          by this abstract pathname exists; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#exists()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"mkdir(java.lang.String)\"><!-- --></A><H3>\r\nmkdir</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>mkdir</B>(java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#mkdir(java.lang.String)\">JFMFile</A></CODE></B></DD>\r\n<DD>Creates the directory named by the abstract pathname denoted by the parameter.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#mkdir(java.lang.String)\">mkdir</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The new file object created or null otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#mkdir()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"createFile(java.lang.String)\"><!-- --></A><H3>\r\ncreateFile</H3>\r\n<PRE>\r\npublic <A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A> <B>createFile</B>(java.lang.String&nbsp;name)</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#createFile(java.lang.String)\">JFMFile</A></CODE></B></DD>\r\n<DD>Creates the file named by the abstract pathname denoted by the parameter.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#createFile(java.lang.String)\">createFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The new file object created or null otherwise</DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"delete()\"><!-- --></A><H3>\r\ndelete</H3>\r\n<PRE>\r\npublic boolean <B>delete</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#delete()\">JFMFile</A></CODE></B></DD>\r\n<DD>Deletes the file or directory denoted by the abstract pathname.  If\n this pathname denotes a directory, then the directory must be empty in\n order to be deleted.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#delete()\">delete</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD><code>true</code> if and only if the file or directory is\n          successfully deleted; <code>false</code> otherwise<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#delete()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getIcon()\"><!-- --></A><H3>\r\ngetIcon</H3>\r\n<PRE>\r\npublic javax.swing.Icon <B>getIcon</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getIcon()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the filesystem's icon associated with this file, or null if it can't be determined.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getIcon()\">getIcon</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD>The filesystem's icon associated with this file, or null if it can't be determined.<DT><B>See Also:</B><DD><CODE>org.jfm.md.filesystems.JFMFile#getIcon()</CODE></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getSystemDisplayName()\"><!-- --></A><H3>\r\ngetSystemDisplayName</H3>\r\n<PRE>\r\npublic java.lang.String <B>getSystemDisplayName</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getSystemDisplayName()\">JFMFile</A></CODE></B></DD>\r\n<DD>Returns the system display name as returned by the filesystem viewer, or null\r\n<P>\r\n<DD><DL>\r\n<DT><B>Specified by:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getSystemDisplayName()\">getSystemDisplayName</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n\r\n<DT><B>Returns:</B><DD></DL>\r\n</DD>\r\n</DL>\r\n<HR>\r\n\r\n<A NAME=\"getFile()\"><!-- --></A><H3>\r\ngetFile</H3>\r\n<PRE>\r\npublic java.io.File <B>getFile</B>()</PRE>\r\n<DL>\r\n<DD><B>Description copied from class: <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getFile()\">JFMFile</A></CODE></B></DD>\r\n<DD>gets the content of the JFMFile if it exists.\r\n<P>\r\n<DD><DL>\r\n<DT><B>Overrides:</B><DD><CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html#getFile()\">getFile</A></CODE> in class <CODE><A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFile.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\">JFMFile</A></CODE></DL>\r\n</DD>\r\n<DD><DL>\r\n</DL>\r\n</DD>\r\n</DL>\r\n<!-- ========= END OF CLASS DATA ========= -->\r\n<HR>\r\n\r\n\r\n<!-- ======= START OF BOTTOM NAVBAR ====== -->\r\n<A NAME=\"navbar_bottom\"><!-- --></A>\r\n<A HREF=\"#skip-navbar_bottom\" title=\"Skip navigation links\"></A>\r\n<TABLE BORDER=\"0\" WIDTH=\"100%\" CELLPADDING=\"1\" CELLSPACING=\"0\" SUMMARY=\"\">\r\n<TR>\r\n<TD COLSPAN=2 BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">\r\n<A NAME=\"navbar_bottom_firstrow\"><!-- --></A>\r\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"3\" SUMMARY=\"\">\r\n  <TR ALIGN=\"center\" VALIGN=\"top\">\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../overview-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Overview</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-summary.html\"><FONT CLASS=\"NavBarFont1\"><B>Package</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#FFFFFF\" CLASS=\"NavBarCell1Rev\"> &nbsp;<FONT CLASS=\"NavBarFont1Rev\"><B>Class</B></FONT>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"class-use/JFMLocalFile.html\"><FONT CLASS=\"NavBarFont1\"><B>Use</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"package-tree.html\"><FONT CLASS=\"NavBarFont1\"><B>Tree</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../deprecated-list.html\"><FONT CLASS=\"NavBarFont1\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../index-files/index-1.html\"><FONT CLASS=\"NavBarFont1\"><B>Index</B></FONT></A>&nbsp;</TD>\r\n  <TD BGCOLOR=\"#EEEEFF\" CLASS=\"NavBarCell1\">    <A HREF=\"../../../../help-doc.html\"><FONT CLASS=\"NavBarFont1\"><B>Help</B></FONT></A>&nbsp;</TD>\r\n  </TR>\r\n</TABLE>\r\n</TD>\r\n<TD ALIGN=\"right\" VALIGN=\"top\" ROWSPAN=3><EM>\r\n</EM>\r\n</TD>\r\n</TR>\r\n\r\n<TR>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMFileSystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>PREV CLASS</B></A>&nbsp;\r\n&nbsp;<A HREF=\"../../../../org/itr_rescue/dataGuard/localFileSystem/JFMLocalFilesystem.html\" title=\"class in org.itr_rescue.dataGuard.localFileSystem\"><B>NEXT CLASS</B></A></FONT></TD>\r\n<TD BGCOLOR=\"white\" CLASS=\"NavBarCell2\"><FONT SIZE=\"-2\">\r\n  <A HREF=\"../../../../index.html?org/itr_rescue/dataGuard/localFileSystem/JFMLocalFile.html\" target=\"_top\"><B>FRAMES</B></A>  &nbsp;\r\n&nbsp;<A HREF=\"JFMLocalFile.html\" target=\"_top\"><B>NO FRAMES</B></A>  &nbsp;\r\n&nbsp;<SCRIPT type=\"text/javascript\">\r\n  <!--\r\n  if(window==top) {\r\n    document.writeln('<A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>');\r\n  }\r\n  //-->\r\n</SCRIPT>\r\n<NOSCRIPT>\r\n  <A HREF=\"../../../../allclasses-noframe.html\"><B>All Classes</B></A>\r\n</NOSCRIPT>\r\n\r\n\r\n</FONT></TD>\r\n</TR>\r\n<TR>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\n  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF=\"#fields_inherited_from_class_org.itr_rescue.dataGuard.localFileSystem.JFMFile\">FIELD</A>&nbsp;|&nbsp;<A HREF=\"#constructor_summary\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_summary\">METHOD</A></FONT></TD>\r\n<TD VALIGN=\"top\" CLASS=\"NavBarCell3\"><FONT SIZE=\"-2\">\r\nDETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF=\"#constructor_detail\">CONSTR</A>&nbsp;|&nbsp;<A HREF=\"#method_detail\">METHOD</A></FONT></TD>\r\n</TR>\r\n</TABLE>\r\n<A NAME=\"skip-navbar_bottom\"></A>\r\n<!-- ======== END OF BOTTOM NAVBAR ======= -->\r\n\r\n<HR>\r\n\r\n</BODY>\r\n</HTML>\r\n", "id": 32576.0}