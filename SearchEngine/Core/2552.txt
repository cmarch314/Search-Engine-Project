{"text": "Last Published 2 14 7 14Version 8 6 Documentation Home Documentation Installing and Managing AsterixDB using Managix AsterixDB 1 1 An ADM and AQL Primer AsterixDB Javascript SDK Asterix Data Model ADM Asterix Query Language AQL AQL Functions AQL Allen s Relations Functions AQL Support of Similarity Queries Accessing External Data REST API to AsterixDB AsterixDB Support of Similarity Queries Table of Contents MotivationData Types and Similarity FunctionsSimilarity Selection QueriesSimilarity Join QueriesUsing Indexes to Support Similarity Queries Motivation Back to TOC Similarity queries are widely used in applications where users need to find records that satisfy a similarity predicate while exact matching is not sufficient These queries are especially important for social and Web applications where errors abbreviations and inconsistencies are common As an example we may want to find all the movies starring Schwarzenegger while we don t know the exact spelling of his last name despite his popularity in both the movie industry and politics As another example we want to find all the Facebook users who have similar friends To meet this type of needs AsterixDB supports similarity queries using efficient indexes and algorithms Data Types and Similarity Functions Back to TOC AsterixDB supports edit distance on strings and Jaccard on sets For instance in our TinySocial example the friend ids of a Facebook user forms a set of friends and we can define a similarity between the sets of friends of two users We can also convert a string to a set of grams of a length n called n grams and define the Jaccard similarity between the two gram sets of the two strings Formally the n grams of a string are its substrings of length n For instance the 3 grams of the string schwarzenegger are sch chw hwa ger AsterixDB provides tokenization functions to convert strings to sets and the similarity functions Similarity Selection Queries Back to TOC The following query asks for all the Facebook users whose name is similar to Suzanna Tilson i e their edit distance is at most 2 use dataverse TinySocial for user in dataset FacebookUsers let ed edit distance user name Suzanna Tilson where ed 2 return user The following query asks for all the Facebook users whose set of friend ids is similar to 1 5 9 i e their Jaccard similarity is at least 6 use dataverse TinySocial for user in dataset FacebookUsers let sim similarity jaccard user friend ids 1 5 9 where sim 6f return user AsterixDB allows a user to use a similarity operator to express a condition by defining the similarity function and threshold using set statements earlier For instance the above query can be equivalently written as use dataverse TinySocial set simfunction jaccard set simthreshold 6f for user in dataset FacebookUsers where user friend ids 1 5 9 return user In this query we first declare Jaccard as the similarity function using simfunction and then specify the threshold 6f using simthreshold Similarity Join Queries Back to TOC AsterixDB supports fuzzy joins between two sets The following query finds for each Facebook user all Twitter users with names similar to their name based on the edit distance use dataverse TinySocial set simfunction edit distance set simthreshold 3 for fbu in dataset FacebookUsers return id fbu id name fbu name similar users for t in dataset TweetMessages let tu t user where tu name fbu name return twitter screenname tu screen name twitter name tu name Using Indexes to Support Similarity Queries Back to TOC AsterixDB uses two types of indexes to support similarity queries namely ngram index and keyword index NGram Index An ngram index is constructed on a set of strings We generate n grams for each string and build an inverted list for each n gram that includes the ids of the strings with this gram A similarity query can be answered efficiently by accessing the inverted lists of the grams in the query and counting the number of occurrences of the string ids on these inverted lists The similar idea can be used to answer queries with Jaccard similarity A detailed description of these techniques is available at this paper For instance the following DDL statements create an ngram index on the FacebookUsers name attribute using an inverted index of 3 grams use dataverse TinySocial create index fbUserIdx on FacebookUsers name type ngram 3 The number 3 in ngram 3 is the length n in the grams This index can be used to optimize similarity queries on this attribute using edit distance edit distance check jaccard or jaccard check queries on this attribute where the similarity is defined on sets of 3 grams This index can also be used to optimize queries with the contains predicate i e substring matching since it can be also be solved by counting on the inverted lists of the grams in the query string Keyword Index A keyword index is constructed on a set of strings or sets e g OrderedList UnorderedList Instead of generating grams as in an ngram index we generate tokens e g words and for each token construct an inverted list that includes the ids of the records with this token The following two examples show how to create keyword index on two different types Keyword Index on String Type use dataverse TinySocial create index fbMessageIdx on FacebookMessages message type keyword for o in dataset FacebookMessages let jacc similarity jaccard check word tokens o message word tokens love like verizon 2f where jacc return o Keyword Index on UnorderedList Type use dataverse TinySocial create index fbUserIdx fids on FacebookUsers friend ids type keyword for c in dataset FacebookUsers let jacc similarity jaccard check c friend ids 3 1 5f where jacc return c As shown above keyword index can be used to optimize queries with token based similarity predicates including similarity jaccard and similarity jaccard check Copyright 2 14 All Rights Reserved ", "_id": "http://asterixdb.ics.uci.edu/documentation/aql/similarity.html", "title": "asterixdb - ", "html": "<!DOCTYPE html>\n<!--\n | Generated by Apache Maven Doxia at 2014-07-14\n | Rendered using Apache Maven Fluido Skin 1.3.0\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"Date-Revision-yyyymmdd\" content=\"20140714\" />\n    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>AsterixDB - </title>\n    <link rel=\"stylesheet\" href=\"../css/apache-maven-fluido-1.3.0.min.css\" />\n    <link rel=\"stylesheet\" href=\"../css/site.css\" />\n    <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\" />\n\n      \n    <script type=\"text/javascript\" src=\"../js/apache-maven-fluido-1.3.0.min.js\"></script>\n\n                          \n        \n<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-41536543-1', 'uci.edu');\n        ga('send', 'pageview');</script>\n          \n            </head>\n        <body class=\"topBarDisabled\">\n          \n                \n                    \n    \n        <div class=\"container-fluid\">\n          <div id=\"banner\">\n        <div class=\"pull-left\">\n                                    <a href=\"http://asterixdb.ics.uci.edu/\" id=\"bannerLeft\">\n                                                                                                <img src=\"../images/asterixlogo.png\"  alt=\"AsterixDB\"/>\n                </a>\n                      </div>\n        <div class=\"pull-right\">  </div>\n        <div class=\"clear\"><hr/></div>\n      </div>\n\n      <div id=\"breadcrumbs\">\n        <ul class=\"breadcrumb\">\n                \n                    \n                  <li id=\"publishDate\">Last Published: 2014-07-14</li>\n                      \n                \n                    \n                 <li id=\"projectVersion\" class=\"pull-right\">Version: 0.8.6</li>\n      \n                                            <li class=\"divider pull-right\">|</li>\n                        \n    <li class=\"pull-right\">              <a href=\"../index.html\" title=\"Documentation Home\">\n        Documentation Home</a>\n  </li>\n\n                        </ul>\n      </div>\n\n            \n      <div class=\"row-fluid\">\n        <div id=\"leftColumn\" class=\"span3\">\n          <div class=\"well sidebar-nav\">\n                \n                    \n                <ul class=\"nav nav-list\">\n                    <li class=\"nav-header\">Documentation</li>\n                                \n      <li>\n    \n                          <a href=\"../install.html\" title=\"Installing and Managing AsterixDB using Managix\">\n          <i class=\"none\"></i>\n        Installing and Managing AsterixDB using Managix</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/primer.html\" title=\"AsterixDB 101: An ADM and AQL Primer\">\n          <i class=\"none\"></i>\n        AsterixDB 101: An ADM and AQL Primer</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/js-sdk.html\" title=\"AsterixDB Javascript SDK\">\n          <i class=\"none\"></i>\n        AsterixDB Javascript SDK</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/datamodel.html\" title=\"Asterix Data Model (ADM)\">\n          <i class=\"none\"></i>\n        Asterix Data Model (ADM)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/manual.html\" title=\"Asterix Query Language (AQL)\">\n          <i class=\"none\"></i>\n        Asterix Query Language (AQL)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/functions.html\" title=\"AQL Functions\">\n          <i class=\"none\"></i>\n        AQL Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/allens.html\" title=\"AQL Allen's Relations Functions\">\n          <i class=\"none\"></i>\n        AQL Allen's Relations Functions</a>\n            </li>\n                  \n      <li class=\"active\">\n    \n            <a href=\"#\"><i class=\"none\"></i>AQL Support of Similarity Queries</a>\n          </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/externaldata.html\" title=\"Accessing External Data\">\n          <i class=\"none\"></i>\n        Accessing External Data</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../api.html\" title=\"REST API to AsterixDB\">\n          <i class=\"none\"></i>\n        REST API to AsterixDB</a>\n            </li>\n            </ul>\n                \n                    \n                \n          <hr class=\"divider\" />\n\n           <div id=\"poweredBy\">\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                                                                                                                         <a href=\"https://code.google.com/p/hyracks/\" title=\"Hyracks\" class=\"builtBy\">\n        <img class=\"builtBy\"  alt=\"Hyracks\" src=\"../images/hyrax_ts.png\"    />\n      </a>\n                      </div>\n          </div>\n        </div>\n        \n                \n        <div id=\"bodyColumn\"  class=\"span9\" >\n                                  \n            <h1>AsterixDB Support of Similarity Queries</h1>\n<div class=\"section\">\n<h2><a name=\"toc\" id=\"toc\">Table of Contents</a><a name=\"Table_of_Contents\"></a></h2>\n\n<ul>\n  \n<li><a href=\"#Motivation\">Motivation</a></li>\n  \n<li><a href=\"#DataTypesAndSimilarityFunctions\">Data Types and Similarity Functions</a></li>\n  \n<li><a href=\"#SimilaritySelectionQueries\">Similarity Selection Queries</a></li>\n  \n<li><a href=\"#SimilarityJoinQueries\">Similarity Join Queries</a></li>\n  \n<li><a href=\"#UsingIndexesToSupportSimilarityQueries\">Using Indexes to Support Similarity Queries</a></li>\n</ul></div>\n<div class=\"section\">\n<h2><a name=\"Motivation\" id=\"Motivation\">Motivation</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Motivation_Back_to_TOC\"></a></h2>\n<p>Similarity queries are widely used in applications where users need to find records that satisfy a similarity predicate, while exact matching is not sufficient. These queries are especially important for social and Web applications, where errors, abbreviations, and inconsistencies are common. As an example, we may want to find all the movies starring Schwarzenegger, while we don&#x2019;t know the exact spelling of his last name (despite his popularity in both the movie industry and politics :-)). As another example, we want to find all the Facebook users who have similar friends. To meet this type of needs, AsterixDB supports similarity queries using efficient indexes and algorithms.</p></div>\n<div class=\"section\">\n<h2><a name=\"DataTypesAndSimilarityFunctions\" id=\"DataTypesAndSimilarityFunctions\">Data Types and Similarity Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Data_Types_and_Similarity_Functions_Back_to_TOC\"></a></h2>\n<p>AsterixDB supports <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">edit distance</a> (on strings) and <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Jaccard_index\">Jaccard</a> (on sets). For instance, in our <a href=\"primer.html#ADM:_Modeling_Semistructed_Data_in_AsterixDB\">TinySocial</a> example, the <tt>friend-ids</tt> of a Facebook user forms a set of friends, and we can define a similarity between the sets of friends of two users. We can also convert a string to a set of grams of a length &#x201c;n&#x201d; (called &#x201c;n-grams&#x201d;) and define the Jaccard similarity between the two gram sets of the two strings. Formally, the &#x201c;n-grams&#x201d; of a string are its substrings of length &#x201c;n&#x201d;. For instance, the 3-grams of the string <tt>schwarzenegger</tt> are <tt>sch</tt>, <tt>chw</tt>, <tt>hwa</tt>, &#x2026;, <tt>ger</tt>.</p>\n<p>AsterixDB provides <a href=\"functions.html#Tokenizing_Functions\">tokenization functions</a> to convert strings to sets, and the <a href=\"functions.html#Similarity_Functions\">similarity functions</a>.</p></div>\n<div class=\"section\">\n<h2><a name=\"SimilaritySelectionQueries\" id=\"SimilaritySelectionQueries\">Similarity Selection Queries</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Similarity_Selection_Queries_Back_to_TOC\"></a></h2>\n<p>The following <a href=\"functions.html#edit-distance\">query</a> asks for all the Facebook users whose name is similar to <tt>Suzanna Tilson</tt>, i.e., their edit distance is at most 2.</p>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    for $user in dataset('FacebookUsers')\n    let $ed := edit-distance($user.name, &quot;Suzanna Tilson&quot;)\n    where $ed &lt;= 2\n    return $user\n</pre></div>\n<p>The following <a href=\"functions.html#similarity-jaccard\">query</a> asks for all the Facebook users whose set of friend ids is similar to <tt>[1,5,9]</tt>, i.e., their Jaccard similarity is at least 0.6.</p>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    for $user in dataset('FacebookUsers')\n    let $sim := similarity-jaccard($user.friend-ids, [1,5,9])\n    where $sim &gt;= 0.6f\n    return $user\n</pre></div>\n<p>AsterixDB allows a user to use a similarity operator <tt>~=</tt> to express a condition by defining the similarity function and threshold using &#x201c;set&#x201d; statements earlier. For instance, the above query can be equivalently written as:</p>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    set simfunction &quot;jaccard&quot;;\n    set simthreshold &quot;0.6f&quot;;\n\n    for $user in dataset('FacebookUsers')\n    where $user.friend-ids ~= [1,5,9]\n    return $user\n</pre></div>\n<p>In this query, we first declare Jaccard as the similarity function using <tt>simfunction</tt> and then specify the threshold <tt>0.6f</tt> using <tt>simthreshold</tt>.</p></div>\n<div class=\"section\">\n<h2><a name=\"SimilarityJoinQueries\" id=\"SimilarityJoinQueries\">Similarity Join Queries</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Similarity_Join_Queries_Back_to_TOC\"></a></h2>\n<p>AsterixDB supports fuzzy joins between two sets. The following <a href=\"primer.html#Query_5_-_Fuzzy_Join\">query</a> finds, for each Facebook user, all Twitter users with names similar to their name based on the edit distance.</p>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    set simfunction &quot;edit-distance&quot;;\n    set simthreshold &quot;3&quot;;\n\n    for $fbu in dataset FacebookUsers\n    return {\n        &quot;id&quot;: $fbu.id,\n        &quot;name&quot;: $fbu.name,\n        &quot;similar-users&quot;: for $t in dataset TweetMessages\n                            let $tu := $t.user\n                            where $tu.name ~= $fbu.name\n                            return {\n                            &quot;twitter-screenname&quot;: $tu.screen-name,\n                            &quot;twitter-name&quot;: $tu.name\n                            }\n    };\n</pre></div></div>\n<div class=\"section\">\n<h2><a name=\"UsingIndexesToSupportSimilarityQueries\" id=\"UsingIndexesToSupportSimilarityQueries\">Using Indexes to Support Similarity Queries</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Using_Indexes_to_Support_Similarity_Queries_Back_to_TOC\"></a></h2>\n<p>AsterixDB uses two types of indexes to support similarity queries, namely &#x201c;ngram index&#x201d; and &#x201c;keyword index&#x201d;.</p>\n<div class=\"section\">\n<h3>NGram Index<a name=\"NGram_Index\"></a></h3>\n<p>An &#x201c;ngram index&#x201d; is constructed on a set of strings. We generate n-grams for each string, and build an inverted list for each n-gram that includes the ids of the strings with this gram. A similarity query can be answered efficiently by accessing the inverted lists of the grams in the query and counting the number of occurrences of the string ids on these inverted lists. The similar idea can be used to answer queries with Jaccard similarity. A detailed description of these techniques is available at this <a class=\"externalLink\" href=\"http://www.ics.uci.edu/~chenli/pub/icde2009-memreducer.pdf\">paper</a>.</p>\n<p>For instance, the following DDL statements create an ngram index on the <tt>FacebookUsers.name</tt> attribute using an inverted index of 3-grams.</p>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    create index fbUserIdx on FacebookUsers(name) type ngram(3);\n</pre></div>\n<p>The number &#x201c;3&#x201d; in &#x201c;ngram(3)&#x201d; is the length &#x201c;n&#x201d; in the grams. This index can be used to optimize similarity queries on this attribute using <a href=\"functions.html#edit-distance\">edit-distance</a>, <a href=\"functions.html#edit-distance-check\">edit-distance-check</a>, <a href=\"functions.html#similarity-jaccard\">jaccard</a>, or <a href=\"functions.html#similarity-jaccard-check\">jaccard-check</a> queries on this attribute where the similarity is defined on sets of 3-grams. This index can also be used to optimize queries with the &#x201c;<a href=\"functions.html#contains\">contains()</a>&#x201d; predicate (i.e., substring matching) since it can be also be solved by counting on the inverted lists of the grams in the query string.</p></div>\n<div class=\"section\">\n<h3>Keyword Index<a name=\"Keyword_Index\"></a></h3>\n<p>A &#x201c;keyword index&#x201d; is constructed on a set of strings or sets (e.g., OrderedList, UnorderedList). Instead of generating grams as in an ngram index, we generate tokens (e.g., words) and for each token, construct an inverted list that includes the ids of the records with this token. The following two examples show how to create keyword index on two different types:</p>\n<div class=\"section\">\n<h4>Keyword Index on String Type<a name=\"Keyword_Index_on_String_Type\"></a></h4>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    create index fbMessageIdx on FacebookMessages(message) type keyword;\n\n    for $o in dataset('FacebookMessages')\n    let $jacc := similarity-jaccard-check(word-tokens($o.message), word-tokens(&quot;love like verizon&quot;), 0.2f)\n    where $jacc[0]\n    return $o\n</pre></div></div>\n<div class=\"section\">\n<h4>Keyword Index on UnorderedList Type<a name=\"Keyword_Index_on_UnorderedList_Type\"></a></h4>\n\n<div class=\"source\">\n<pre>    use dataverse TinySocial;\n\n    create index fbUserIdx_fids on FacebookUsers(friend-ids) type keyword;\n\n    for $c in dataset('FacebookUsers')\n    let $jacc := similarity-jaccard-check($c.friend-ids, {{3,10}}, 0.5f)\n    where $jacc[0]\n    return $c\n</pre></div>\n<p>As shown above, keyword index can be used to optimize queries with token-based similarity predicates, including <a href=\"functions.html#similarity-jaccard\">similarity-jaccard</a> and <a href=\"functions.html#similarity-jaccard-check\">similarity-jaccard-check</a>.</p></div></div></div>\n                  </div>\n            </div>\n          </div>\n\n    <hr/>\n\n    <footer>\n            <div class=\"container-fluid\">\n              <div class=\"row span12\">Copyright &copy;                   2014.\n          All Rights Reserved.      \n                    \n      </div>\n\n                          \n        \n                </div>\n    </footer>\n  </body>\n</html>\n", "id": 2552.0}