{"text": "Overview ICS 31 Introduction to Programming Introduction This lecture will overview four topics related to this course Learning what material will we cover in ICS 31 Computing Human Resources what resources are available and how we will learn to use them Perspectives on Programming a short discussion of programming and education built around Quotes that I have collected on my web page there are hundreds there Software Production This is some big picture material that I present to introductory programming students Especially interesting is the table on Software Project Metrics This lecture like the ones to follow has a problem set at the end But instead of doing these problems with the reading because this is the first day of class we will spend time in class looking at and solving these problems They mostly concern the precise use of a natural language there are many parallels here to the precise use of a programming langauge Course Goals A First Course in Programming First and most importantly ICS 31 assumes no knowledge of programming But it does assume some knowledge of using computers and software and the course moves quickly We assume that you have used Windows in some form XP Windows 7 etc or Mac OS X or the Linux operating system We further assume that you know how to browse the web download and unzip files locate folder files in your file system and rename move delete them send receive email etc ICS 31 introduces the concepts and skills needed to begin serious programming It is taught in the Python language it as a powerful language with a a large library of modules that you can spend years exploring and mastering Some of its more advanced features are covered in ICS 32 33 the follow on courses to this one some Python features are beyond the scope of even these more advanced courses During ICS 31 we will cover a wide variety of introductory and intermediate Python language features Below I ve tried to categorize the fundamentals of programming in Python What I think should be covered in ICS 31 includes how to read EBNF descriptions of Python s syntax how to tokenize identifiers keywords operators delimiters literals comments Python programs including indentation how to declare and picture variable names that refer bind to objects how to write modules and import names from modules how to read documentation and use from modules functions and classes how to classify and understand operators terminology arithmetic relational logical textual sequence how to analyze and synthesize expressions precedence and associativity short circuit evaluation how to analyze and synthesize statements if for while break try except including exception handling how to analyze statements via hand simulation and the debugger how to use iterator protocols including file reading and string processing how to write use and test your own functions including lambda and classes how to use standard Python composite types lists tuples named tuples dictionaries sets and frozensets and others stacks queues and priority queues how to write your own classes how to use functions in an advanced way as data as return values how to write recursive functions how to construct clarify simplify test and debug programs systematically how to analyze functions for efficiency Basically you will learn the core of programming and Python we hope that if you need to learn more you will have the necessary skills on which to build whether you learn more by yourself or in courses Likewise we will learn to use the Eclipse Integrated Development Environment IDE including its interpreter and debugger Finally we will cover a variety of skill in programming material topics such as program composition analysis testing debugging simplification and style You will work on programming assignments based on the material you learn each involves writing a few functions or scripts that exercise combinations of langauge features that we cover During this time we will learn how to program and test our code incrementally and understand the debugging leverage that we get from doing so as well as formally studying the Eclipse Debug Perspective We will cover this material rigorously I believe that even students with some background in Python will learn lots of little details and maybe a few big ones that we will exploit and build on as we cover new material later in the quarter Do not get behind during the initial phase of this course everything builds on it especially the terminology and if you know the early material make sure you start paying attention when we get to the material you don t know Expectations for Learning As members of a course working together in teaching and learning we should share the following expectations Instructor Starts and stops class on time Assigns the minimal amount of homework but enough so that students learn all the required material and are comfortable programming ICS 31 is a 4 unit course At UCI each unit typically requires 3 hours week of work which means you should spend about 12 hours week working on ICS 33 Of this 12 hours 7 hours week will be in class lecture lab leaving 5 hours week for lecture prepartion quizzes and programming Distributes course materials in a timely manner Returns solutions graded homework promptly Is available for providing individual help Student Attends class is punctual and participates does reading asks answer questions Completes all homework spending the requisite time to learn all the required material Studies course materials READ READ READ and is prepared for class Examines solutions graded homework to improve knowledge and rectify misconceptions about the course material and promptly reports any possible grading mistakes Seeks individual help when it is needed The biggest source of problems for students taking ICS 31 is skipping classes not doing readings homework fully and poor time management on programming assignments waiting too long to start them or not making sufficient daily progress on them You are scheduled to spend about 12 hours in ICS 31 1 weeks of work at 12 hours week please allow for this much time in your schedule and use this time wisely I believe that with the right attitude and work ethic any UCI student can learn and demonstrate that he she has learned the material required for ICS 31 and pass this course But it does take a desire to do so and the action necessary on your part Resources The Course Web I will place all materials for this course on the course web some are there now others will become available later in the quarter You will also use the web for submitting programs for grading These materials are organized using the following index on the course home page Here is a brief description of these main entries Fact Sheet A page providing information about course staff getting help and meeting times this is the home page for the course Announcements A page archiving messages I send to the class typically on a weekly basis Email Archive A page archiving all email I send to the class typically on a daily basis MessageBoard Forums A page holding various forums on which students can post questions to get answers from the ICS 31 staff or other students Syllabus A link to a long page providing detailed information about the mechanics of how this course is run print a copy Lecture Schedule Notes A page indexing all lectures and labs their on line lecture notes and their associated problem sets Programming Assignments A page indexing all programming assignments including their assign due dates Weekly Schedule A page listing all readings and homework assignments and their due dates week by week contains more detail than the Lecture Schedule Notes link Handouts General A page indexing a variety of handouts related to the course Course Software A page indexing course software most useful at the start of the course for downloading and installing Java Python and Eclipse Sample Programs A page indexing various programs students can download examine and run Python Langauge Reference An online reference to the Python language it may be a bit to high level for beginning programmers Python Library Reference An online reference to the Python library it may be a bit to high level for beginning programmers Course Library Reference Documentation of the modules in ICS 31 s standard Python classes Solutions in EEE Drop Box A page indexing my solutions to all course assignments quizzes programs and exams updated as appropriate Grades zippled xls file A zipped file you can download with all your course grades typically indexed by the last 5 digits of your UCI ID Anonymous Email A page students can use to send the instructor anonymous email when personal email might be awkward Don t ask a question I won t know whom to answer Checkmate Homework Dropoff A page students use to submite their homework mostly weekly programming assignments but sometimes quizzes During this course you will be constantly reading web pages and sometimes downloading materials from them onto your computer Generally it is critical to become an expert navigating the course web with a browser specifically you should become familiar with the pages used repeated in this course so that you can easily find all the materials you need If you run across any missing links please drop me a short e mail so that I can correct them quickly Computer Labsand Software I expect that most students will be using their own computers for programming assignments You are encouraged to use your own machine for all aspects of the course that it is capable of supporting You can download all the required course software to your personal computer for free In addition to using their own machines students can do their coursework on the machines in the ICS Labs The main upside of using the ICS labs is that it will be easy to get ICS 31 staff to help you there All labs are located in in the ICS building in rooms 18 189 192 and 364 ICS courses often schedule lab hours to complement lecture hours during which students can learn how to use software tools and work on their programming assignments all under the supervision of ICS 31 staff members We will have 4 hours of lab scheduled each week All the machines in the ICS Labs run Windows 7 and are loaded with all the necessary course software browsers the Eclipse Integrated Development Environment IDE Python and all the other course related software These labs provide a convenient space for students to work on their assignments where the course staff is available to answer questions immediately Human Resources Students start ICS 31 with a wide variety of aptitudes and skills At times even the best students run into problems misconceptions mental roadblocks etc It is imperative that you quickly determine that you have a problem and then get it diagnosed and corrected as soon as possible There are many different resources that you can elect to use Instructor From my perspective the best place to get help is from me the biggest problem is that I m typically teaching hundreds of students each quarter Still I have office hours most days these are open office hours no appointment is necessary If you cannot see me during any of these times you can contact me by e mail or contact me during my online office hours M Th and Su TAs The Teaching Assistants will supervise the labs They are there primarily to help you debug your programs and explain gaps or misconception in your knowledge of Python Your TA is also responsible for grading your programs so he she i the first person you should see if you have any questions about how your programming assignments were graded The TAs will aid me grading quizzes and exams Lab Tutors Lab Tutors will help the TAs in the labs They are there primarily to help you debug your programs and explain gaps or misconception in your knowledge of Python Students I encourage students in my courses to seek out each other if they have questions The student answering the question will benefit as much as the student asking it One beneficial reason to come to UCI is for the interaction with other outstanding students Of course for graded materials there are dos and don ts related to getting help to ensure academic integrity follow these rules The most useful online mechanism for handing questions discussions is EEE s MessageBoard Forums easily reachable from the course web s index These forums allow students to ask questions or start discussions easily as well as supply answers or participate in the discsussion further Initially I have created four forums for ICS 31 Python and Eclipse Lecture Material Programming Assignments Quizzes and Exams Find Programming Partners If the need arises for other forums tell me if you think another would be useful I will create them You can instruct EEE to email you links to any active discussions in the forums In past quarters these forums have seen a tremendous amount of traffic course material has been clarified questions have been asked and answered and many interesting side discussions have ensued But the efficacy depends on your participation I will broadcast information to all the students and staff in ICS 31 using the ICS 31 Email List ics31 S14 classes uci edu All students and staff in the course will automatically receive emails sent to this address and all messages sent via this discussion list will be archived on the Email Archive easily reachable from the course web s index Most student initiated questions discussions should use the forums mentioned above but sometimes students can use this email list to inform the instructor staff and other students about some timely issue e g Checkmate not responding to program submissions Learning when and how to seek help from others is an important skill to acquire one that you will use continually in your professional career For example if you encounter a programming problem that you cannot solve in 5 minutes and see no further steps toward a solution you should be able to explain the problem concisely using all the programming terminology that you have learned to someone else and then understand and apply an informed answer possibly collaborating to reach a solution Instructors TAs and Lab Tutors all have experience handling such questions and are trained to help students learn to become more self sufficient while still answering their questions for example we might tell you a general technique for solving a collection of similar problems instead of just telling you the answer Sometimes this process is a bit frustrating for students seeking help especially if they started the assignment late and are caught in a time bind but ultimately this approach makes them better programmers The appropriate homily is Give a person a fish and you feed them for a day teach a person to fish and you feed them for life Think seriously about using the human resources that UCI provides which includes me our TAs and Lab Tutors and your fellow students just as you would think about using computational resources the former resources are even more important than the latter Knowing when and how to seek help is a strength not a weakness A Bit about Me I hope to get to know you all individually during the quarter Here is some information about me I grew up on the North Shore of Chicago in the town of Wilmette and attended New Trier West High School I was an undergraduate Mathematics major at Carnegie Mellon University CMU from 1972 1975 after which I taught a introductory programming there for a year I went to graduate school in Computer Science at Stanford While there I wrote a book Karel the Robot A Gentle Introduction to the Art of Programming and its associated software since updated by Mark Stehlik and Jim Roberts at CMU Over the years my book has been revised and extended by Joe Bergin to C Java and now Python and it is still used in Colleges and High Schools around the world From 1985 1995 I taught introductory and intermediate programming at the University of Washington in Seattle sending lots of my students to work at Microsoft the times allowed many of them to become millionaires From 1996 2 7 I returned to teach at CMU for the last two years there I served as the Freshman Advisor for incomming Freshman in Computer Science about 15 year In 2 7 I joined the Bren School of Information and Computer Science with a joint appointment in Computer Science and Informatics returning to teach in a public university where my wife is heading the Nursing program During my Freshman year in high school I had a Math teacher named Mr Lill One class during a test my mechanical pencil broke I asked Mr Lill to borrow one of his pencils but he said no I asked him whether I could borrow a friend s pencil but he said no to that too He told me to always come prepared to class and sat me back down at my desk where I failed the test because I was unable to write any answers I had a very low opinion of Mr Lill for a long time for years and I thought about this incident for many years but he taught me an important lesson that stayed with me much longer than the mathematics he taught I hope I don t have to be anyone s Mr Lill but I will assume that roll if necessary there are lots of lessons to be taught at UCI and not all of them concern the content of the course material I have posted this story on my course web pages for many many years Amazingly in 2 9 when I was attending a reception for students admitted to ICS at UCI I started talking with a student and his parents Offhandedly I asked where the father grew up it was near me I asked what high school he went to it was mine I asked what year he started it was the same year that I started At that point we exchanged names and recognized each other we were not close friends in High School and had not seen each other since graduation The absolute first comment he made to me was Do you remember the day in Mr Lill s class when he wouldn t let you borrow the pencil I was totally floored Obviously the lesson that I learned so painfully that day was also learned by many others but at a lesser cost As a senior in High School I wanted to take both AP Chemistry and AP Physics but they were scheduled at the same time I had great respect for and enjoyed being in the classroom with the Chemistry teacher Mr Kunz so I signed up for AP Chemistry I asked the AP Physics teacher for a list of all the problems that he assigned from the textbook and spent the year reading the book and working those problems the book had answers but not worked solutions so I could see if I was right but not know why not if I was wrong for many of those problems in the back The result was that I discovered that I could learn myself from what are now considered very rudimentary learning materials compared to the internet A big goal of college is to teach students to be able to learn by themselves Student Feedback The most interesting short comment that I received on a Faculty Course Evaluation form FCE was You teach a biased class After some reflection I had to agree with that student 1 Almost everything I do in my class is highly biased choosing which programming topics to teach how to sequence these topics which ones to emphasize which ones to relegate as mere details deciding programming assignments and test questions and how to award credit for these problems etc You are sitting in my classroom because you have decided to obtain the UCI bias on how to learn programming I once read a book written about MIT The author observed that everyone there majored in the same thing MIT Yes they all learned a different vocabulary and facts and practiced reasoning and problem solving in different disciplines but what everyone really was doing there was learning to think like an MIT graduate Along these lines I want you to eventually acquire a Pattis simulator in your head By running it you can determine how I would approach a problem how I would critique a solution etc You don t have to agree with the results it produces but it is there for you to consult The most interesting long comment I received on a course evaluation form was labeled A Relevant Allegory In order to teach someone to boil water he would first spend a day giving the history of pots including size shape and what metals work best The next day he d lecture on the chemical properties of water On day three he d talk about boiled water through the ages That night he d tell people to go home and use boiled water to make spaghetti carbonera But never once would he tell you to put the water in the pot and heat it That s what his programming classes are like completely irrelevant to the task at hand I like this comment because it is witty well written and true although maybe not in the extreme that the author states Teaching students to boil water is great for a high school class but in college we are trying to achieve something deeper we might instead study phase transitions in matter That is we don t just learn particulars drill and practice we learn general theories and in spite of what this student says how to apply them to particular cases I want to teach programming in such a way that when students are exposed to new and novel situations they will be able to use their general knowledge to fall back and analyze the problem figure out what they know and what they need to learn to solve the problem and ultimately synthesize a solution I acknowledge that learning from first principles is tougher than memorization and that sometimes students feel that the material covered is not applied But I believe that everything that I teach has many concrete applications This is the difference between education and training Learning a Programming Language Learning In this section I d like to work from the general to the specific from education to programming illustrated with various Quotes I have collected on my web page Let s start with three interesting quotes the first from a graduate student at the University of Washington and the second from Jacob Bronowski a distinguished philosopher of science the third from Edward Teller a physicist There is a division in the student population between those who go to college to learn and those who go to college to earn a diploma J Blau letter to the editor Chronicle of Higher Education May 24 2 2 It is important that students bring a certain ragamuffin barefoot irreverance to their studies they are not here to worship what is known but to question it J Bronowski I believe in excellence It is a basic need of every human soul All of us can be excellent because fortunately we are exceedingly diverse in our ambitions and talents E Teller You have to decide why you are attending UCI Your choice will have a lot to say about what you do in this class and others Here is a simple question that makes it concrete which of the following students would you rather be Student 1 attends UCI but on graduation day is informed that all records of the student s performance at UCI have been lost in the future UCI will acknowledge only that the student attended for four years and graduated with an ICS degree but there are no more details to tell Student 2 attends UCI but on graduation day is hit on the head and develops amnesia although UCI shows the student to have graduated with a 4 in CS the student cannot remember any of the material learned through those four years I enjoy teaching because I am constantly challenged by students to think more deeply about what I know and how I can teach it Teaching as best I can is my job challenging what you hear to better understand it and question my knowledge of the subject is yours Such challenges make me rethink and revise my opinions more than you might imagine and think about better ways of presenting and explaining complicated material Everyone can excel in Computer Science at UCI different students will gravitate torwards different parts of the field but it is a big field with many connections to applications in other disciplines and there is room for everyone to be excellent at something Many of you will be excellent at programming some of you will be good at it and that will be enough for you But everyone should acquire a basic understanding and basic skills in programming Just as I question myself a huge part of learning requires students to question themselves and as seen above me as well Learning is more about questions than answers as the following quotes illustrate Good teaching is more a giving of the right questions than a giving of the right answers J Albers A prudent question is one half of wisdom F Bacon Questions are the important thing answers are less important Learning to ask a good question is the heart of intelligence Learning the answer well answers are for students Questions are for thinkers R Schank in The Connosseur s Guide to the Mind The function of genius is not to give new answers but to pose new questions which time and mediocrity can resolve H Trevor Howard When the physics nobel laureate I Rabi was a child his mother would always ask him at the dinner table not what he learned in his classes that day but what interesting questions he asked Neil Postman a famous education technology and media critic tells the following story about the importance of asking the right question Two priests were arguing about whether it was appropriate to pray and smoke at the same time They each resolved to ask their bishop for guidance When they met again each claimed that the bishop supported his position They went on to explore their interactions with the bishop in a bit more detail The first said I asked the bishop whether it was appropriate to smoke while praying and he said that praying is a transcendant activity that should not be debased by smoking The second said I asked the bishop whether it was appropriate to pray while smoking and he said that praying was appropriate any time I know that some students enrolled in this course have already learned some programming and that the first few weeks of the quarter might be a review for them I urge them to use this time to attain a deeper more integrated understanding of this material as the following quote illustrates The voyage of discovery is not in seeking new landscapes but in having new eyes M Proust Remember too that teaching and learning are two different but cooperative activities I ll do my best to teach but you need to do your best to learn as well We think too much about effective methods of teaching and not enough about effective methods of learning No matter how good teaching may be each student must take the responsibility for his own education J Carolus S J Learning results from what the student does and thinks and only from what the student does and thinks The teacher can advance learning only by influencing the student to learn H Simon The truth is when all is said and done one does not teach a subject one teaches a student how to learn it Teaching may look like administering a dose but even a dose must be worked on by the body if it is to cure Each individual must cure his or her own ignorance J Barzun Begin Here pp 35 Here is an old joke that illustrates this idea One day a mother comes home from work and asks her son What did you do today The son replied I taught our dog how to play the piano The mother incredulous asked Our dog can play the piano to which the son laughed and replied Of course not mom I said that I taught him I didn t say that he learned how Finally don t be afraid to struggle and fail if learning were simple and effortless we d all be a lot smarter I myself have had many failures and I ve learned that if you are not failing a lot you are probably not being as creative as you could be you aren t stretching your imagination J Backus primary inventor of FORTRAN Learning is never done without errors and defeat V Lenin You have to honor failure because failure is just the negative space around success R Nelson in Wired 6 2 4 page 166 I have learned throughout my life as a composer chiefly through my mistakes and pursuits of false assumptions not my exposure to founts of wisdom and knowledge I Stravinsky Unfortunately the K 12 educational world that we live in doesn t encourages students to try at really hard things and fail Everyone wants to make sure they never fail This attitude is bad in many dimensions College is a safe place to try hard and fail and succeed eventually too mistakes are failures only if you don t learn from them Language Let s leave learning behind but not for too long and talk a bit about language This course is meta lingual we will use a language English to learn a language Python Some argue as illustrated below that language is what reality and certainly education is primarily about independent of the subject material thoughts are linguistic As a concrete example we will learn lots of technical terms during the first few weeks of the course and then use them repeated as levers to explore and describe advanced Python concepts When it comes time to ask questions about the material or questions about debugging a program that you are writing knowing how to ask using these technical terms and understand the answers given in these technical terms makes the process more precise and concise In an important sense this course is concerned not only about doing programming but just as much with how to talk about programs and talk about doing programming That language is an instrument of human reason and not merely a medium for the expression of thought is a truth generally admitted G Boole The real technology behind all our other technologies is language It actually creates the world our consciousness lives in A Codrescu It is wrong to think that the task of physics is to find out how nature is Physics concerns what we say about nature N Bohr Precise language is not the problem Clear language is the problem R Feynman We think only through the medium of words Languages are true analytical methods Algebra which is adapted to its purpose in every species of expression in the most simple most exact and best manner possible is at the same time a language and an analytical method The art of reasoning is nothing more than a language well arranged A Lavoisier Knowledge of a subject means knowledge of the language of that subject which includes not only what its words mean but far more important how its words mean As one learns the language of a subject one is also learning what the subject is It cannot be said often enough that what we call a subject consists mostly if not entirely of its language If you eliminate all the words of a subject you have eliminated the subject Biology is not plants and animals It is language about plants and animals History is not events It is language describing and interpreting events Astronomy is not planets and stars It is a way of talking about planets and stars N Postman Language serves not only to express thought but to make possible thoughts which could not exist without it B Russell The limits of your language are the limits of your world L Wittgenstein Programming Finally let s talk about programming and programming languages Most of the quotes below are lengthy and come from emminent computer scientists or just fantastic programmers who are trying to communicate what programming is about and why it is so fascinating to them The programmer like the poet works only slightly removed from pure thought stuff He builds castles in the air from air creating by exertion of the imagination Few media of creation are so flexible so easy to polish and rework so readily capable of realizing grand conceptual structures Yet the program construct unlike the poet s words is real in the sense that it moves and works producing visible outputs separate from the construct itself It prints results draws pictures produces sounds moves arms The magic of myth and legend has come true in our time One types the correct incantation on a keyboard and a display screen comes to life showing things that never were nor could be The computer resembles the magic of legend in this respect too If one character one pause of the incantation is not strictly in proper form the magic doesn t work Human beings are not accustomed to being perfect and few areas of human activity demand it Adjusting to the requirement for perfection is I think the most difficult part of learning to program F Brooks The Mythical Man Month pages 7 8 It s programming the only job I can think of where I get to be both an engineer and an artist There s an incredible rigorous technical element to it which I like because you have to do very precise thinking On the other hand it has a wildly creative side where the boundaries of imagination are the only real limitation A Hertzfeld original Mac programmer When I speak about computer programming as an art I am thinking primarily of it as an art form in an aesthetic sense The chief goal of my work as an educator and author is to help people learn how to write beautiful programs My feeling is that when we prepare a program the experience can be just like composing poetry or music Some programs are elegant some are exquisite some are sparkling My claim is that it is possible to write grand programs noble programs truly magnificent ones computer programming is an art because it applies accumulated knowledge to the world because it requires skill and ingenuity and especially because it produces objects of beauty Programmers who subconsciously view themselves as artists will enjoy what they do and will do it better D Knuth Computer Programming as an Art Turing Award Speech 1974 A good programming language is a conceptual universe for thinking about programming A language that doesn t affect the way you think about programming is not worth knowing A Perlis A programming language is a system of notation for describing computations A useful programming language must therefore be suited for both description i e for human writers and readers of programs and for computation i e for efficient implementation on computers But human beings and computers are so different that it is difficult to find notational devices that are well suited to the capabilities of both R Tennant Principles of Programming Languages Prentice Hall 1981 Now I like to focus on aesthetics because at some level the root of learning in all disciplines is learning their aesthetics learning to separate the beautiful from the ugly Central to this discussion is the dichotomy between complexity and simplicity in programming As is illustrated many times below what makes programming hard is complexity in the tools used and complexity of the final product it is too easy to create overly complicated designs and implementations which inevitably are incorrect We must strive to keep everything simple this is where creativity in programming lies Programming is one of many human activities in which simplicity and beauty are bound tightly The competent programmer is fully aware of the strictly limited size of his own skull therefore he approaches the programming task in full humility and among other things he avoids clever tricks like the plague E Dijkstra in The Humble Programmer his 1972 Turing Award Lecture Beauty is more important in computing than anywhere else in technology because software is so complicated Beauty is the ultimate defense against complexity The geniuses of the computer field on the the other hand are the people with the keenest aesthetic senses the ones who are capable of creating beauty Beauty is decisive at every level the most important interfaces the most important programming languages the winning algorithms are the beautiful ones Good programmers know what is beautiful and bad programmers don t D Gelernter Machine Beauty Basic Books 1998 Great software likewise requires a fanatical devotion to beauty If you look inside good software you find that parts that no one is ever supposed to see are beautiful too When it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way It drives me crazy to see code that s badly indented or that uses ugly variable names P Graham in Hackers and Painters pg 29 Controlling complexity is the essence of computer programming B Kernighan creator of the C programming language Fools ignore complexity pragmatists suffer it experts avoid it geniuses remove it Simplicity does not precede complexity but follows it A Perlis Computer Science is the first engineering discipline in which the complexity of the objects created is limited solely by the skill of the creator and not by the strength of raw materials B Reid Design and programming are human activities forget that and all is lost B Stroustrup Technical skill is mastery of complexity while creativity is mastery of simplicity E C Zeeman I d like to present the following quote last it will provide an import perpective for many of our discussions about features in the Python language It fully recognizes the psychological aspect of programming and is directly related to the complexity of the tools that we use when we build complex artifacts Millions for compilers but hardly a penny for understanding human programming language use Now programming languages are obviously symmetrical the computer on one side the human on the other In an appropriate science of computer languages one would expect that half the effort would be on the computer side understanding how to translate the languages into executable form and half on the human side understanding how to design languages that are easy or productive to use Yet we do not even have an enumeration of all the psychologicial functions programing languages serve for the user Of course there is lots of programming language design but it comes from computer scientists And though technical papers on languages contain mainly appeals to ease of use and learning they patently contain almost no psychologicial evidence nor any appeal to psychological science A Newell and S Card Software System Costs In the early days computers were built by hand which made them expensive They were physcially large consumed huge amount of power were slow and their memories were small so they could run only small programs As a result the cost of developing a working computing system was mostly spent on hardware At present computers are cheaply mass produced they are small consume minimal power are fast and have large memories Now the cost of developing a working computing system is mostly spent on software To deliver new systems cheaply and on time we must focus on improving the production of software When implementing a computer system a 5 improvement in developing software is worth about as much as a 5 improvement in developing hardware because these latter costs are so minimal to start with In his Turing Award lecture The Humble Programmer Edgser Dijkstra a famous Computer Scientist put it as follows As long as there were no machines programming was no problem at all when we had a few weak computers programming became a mild problem and now 1972 that we have gigantic computers programming has become a gigantic problem As the power of available machines grew by a factor of more than a thousand society s ambition to apply these new machines grew in proportion and it was the poor programmer who found his job in this exploded field of tension between the ends and the means The increased power of the hardware together with the perhaps more dramatic increase in its reliability made solutions feasible that the programmer had not dared to dream about a few years before And now a few years later he had to dream about them and even worse he had to transform such dreams into reality It is no wonder that we found ourselves in a software crisis In fact Moore s Law empirical states that computer communication hardware doubles in performance speed memory and halves in resources size cost about every 18 months This exponential law has held for the past 3 years of computing which has seen changes in computing technology by a factor of a million PCs today perform a billion operations per second if Moore s Law continues to hold for another 4 years PCs will be performing a thousand trillion operations per second about as many as the human brain performs with many more logical elements each operating at a much slower than electronic speed A Software Development Model Over the last 3 years the following model called the Iterated Waterfall model has proven itself an important one for developing large software systems direclty applying it to smaller projects is a bit cumbersome but it is often applied in a modified way Each higher phase must finish before a lower phase begins like water falling but there are opportunities to return to earlier phases a problem at a later phase may back up to an earlier one and all phases can be reached again iterated during maintenance A more recent software methodology better adapted for smaller projects that require fewer programmers is called Extreme Programming It shares the idea of incremental development with the iterated waterfall model but reaches these objectives a bit differently In fact maintenance is a curious term to appply to software because unlike cars for example Software has no parts that wear out and need to be replaced Software has no fluids that evaporate and need to be replished So what constitutes software maintenance Fixing latent errors Improving performance Increasing functionality Writing new code to meet new specifications Redesigning Reimplementing Recoding Rewriting old code to simplify it for future anticipated changes So software has organic features it continues to grow and evolve In fact reliably working software continues to be used a long time The current Air Traffic controller system is decades old there have been a few attempts to design and code a replacement but after billions of dollars little progress has been made many say because the specification keeps changing see the next chart Relative Costs to Fix Errors Review the Iterated Waterfall model of software development The following chart shows the cost to fix an error depending on when the error was discoved during this process Notice that the sooner an error is discovered the less expensive it is to fix When we write Python programs we will learn about language features that allow us to detect errors more quickly and thus fix them earlier and save our time which is the biggest cost of taking this course Software Lifetime Costs We have learned that reliably working software continues to be used a long time Therefore the following charts should come as no surprise although it typically does The upshot of this chart is that software must be built initially in such a way that it is easy to maintain because over the lifetime of a product maintenance costs dominate One easy way to remember this chart is that the maintenance cost looks like a Pac Man icon gobbling up the initial cost to build Software Project Sizes Although we will write only small software systems in this course we should still keep the construction of large software systems in mind As we have seen in industry often small software systems grow into large ones Software project sizes are roughly categorized as follows where K means 1 lines of code and M means 1 million lines of code Tiny 1KSmall 1K 1 KMedium 1 K 1 KLarge 1 K 1 MHuge 1M Writing a very large software project is like building a skyscraper in terms of workforce cost and timetable But it is notoriously difficult to predict software costs and schedules compared to the building trades While most construction jobs can be estimated within 1 of time and budget software jobs are lucky to be estimated with 3 Something like 6 of all software projects fail to be completed or deployed many 1 million projects are abandoned with no usable product produced This is known as the software crisis which many attribute to the relative newness of programming as a discipline The area of Software Engineering is young but quickly growing and maturing as software finds its way into everything that we produce Software Project Metrics Although software projects scale many magnitudes in sizes the ones shown below are medium to huge worker productivit rates fall into a much smaller range The following data came from an article How to Break the Software Logjam from Fortune magazine Sept 25 1989 pages 1 112 CompanyProductLinesx1KTimeworker yrsCostx 1M LineLines Month WorkerFordContinental843 51 8212 IBMCheckout Scanner9 58 3 33129Lotus1 2 3 Spreadsheet4 263 22 55127CitibankATM 78 15 13 217433NASASpace Shuttle25 6 22 1 1 2 4797 The Citibank ATM project was considered to be very successful Without it all the other metrics would differ only by a factor of 2 Note that Code Lines Month is a bad metric to measure programmer productivity This is because a poor programmer may quickly produce many lines to do a simple task while a good programmer will carefully write fewer lines of code to accomplish the same task often producing simpler and easier to modify code reproducing the same functionality in fewer lines of code Here are two relevant quotes from my homepage there are lots of other interesting and relevant quotes there We flew down weekly to meet with IBM but they thought the way to measure software was the amount of code we wrote when really the better the software the fewer lines of code W Gates discussing the writing of the original DOS operating system Once the engineers find out that this is how they re being evaluated by how many lines of code per day they are writing they ll revert to cut and past programming to optimize their productivity rating They ll repeat the same code logic in as many places as possible in an effort not to look lazy Long term benefits like maintainability and portability will be sacrificed on account of a poorly chosen metric B Blunden in Cube Farm page 14 But Code Lines is a good metric to measure maintenance cost which we have seen overshadows by a large fact the original cost to build software So the cost of maintaining a program is roughly proportional to its size This leads to an interesting anomoly A programmer may exhibit what appears to be negative productivity by working to shrink the size of a program but the result is reduced maintanence cost over the lifetime of the software Problem Set Mastering programming starts with mastering the syntax form and semantics meaning of a programming language Before we begin our study of computer languages we can investigate these topics in a natural language Although these are not questions about programming answering them requires thinking like a programmer Interpret each of the following real headlines in two ways rewrite each in a longer but less ambiguous form Police Squad Helps Dog Bite Victim Milk Drinkers Turn to Powder Kids Make Nutritious Snacks Stolen Painting Found by Tree Red Tape Holds Up New Bridge Old School Pillars are Replace by Alumni Hospitals are Sued by 7 Foot Doctors Earthquake Buildings Sway from San Francisco to LA Tuna Biting Off Coast of Washington Teacher Strikes Idle Kids Local High School Dropouts Cut in Half UCI Graduates Blind Senior Citizen White House Ducks Report on Pornography I m sure lots of these are available online Here is one URL for Headlines from 1997 Assume that a state originally had no litter laws so it was legal to litter A newspaper reports Legaslature Voids Judge s Reversal of Governer s Veto of Anti Litter Law Is it now legal or illegal to litter A man is looking at a photograph he says of it Brothers and sisters have I none but this man s father is my father s son What is the relationship between the speaker and the person in the picture What is the simplest most convincing arguments for your answer What would be a good metric to assess the productivity of letter carrier working for the US Post Office Think about why a simple metric like letters delivered per day has flaws what other kinds of data should be taken into account Assume that Company X builds a software system that comprises 25 lines of code for 1 they spent extra time to make it compact and easy to maintain Assume that Company Y builds a software system that comprises 1 lines of code for 25 they wrote it quickly and cheaply Finally assume that it costs 2 cents year to maintain a line of code here we won t distinguish between well poorly written code just code size What is the 1 year cost for each of these companies to build and maintain their software product What other important issues for success are not covered in this simple analysis Which software company is likely to thrive Assume white clothes are best washed in hot water but colored clothes must be washed in cold water so the colors don t run You have a large pile of laundry to do which will fit in one white and one colored load You want everything reasonably clean Which load do you do first Think about robustness in the face of errors If you have a washing machine and dryer that each take 3 minutes to run and you have 1 piles of laundry that you must wash and dry how long will the entire process take disregard the time to load unload What is the difference between precision and accuracy look these words up in a dictionary if you need to Write a precise statement that is not accurate Write an accurate statement that is not precise The bottom of an escalator has two signs Shoes must be worn Dogs must be carried Although these signs read similarly syntax they have very different interpretations semantics about which no native English speakers would give a second thought Carefully examine these two sentences and explain their difference possibly by restating the intent of these signs using more words Hint Shoes must be worn does not refer to shoes being old worn out Repunctuate the following sentences you may add or remove punctuation marks to reverse their meanings The republicans say the democrats will win A woman without her man is nothing Repunctuate the following paragraph you may add or remove punctuation marks to make the letter more one of loathing than admiration Dear Jack I want a man who knows what love is all about You are generous kind and thoughtful People who are not like you admit to being useless and inferior You have ruined me for other men I yearn for you I have no feelings whatsoever when we re apart I can be forever happy will you let me be yours Jill Write two different interpretations for the statement You cannot put too much water in a nuclear reactor Write three different interpretations for the statement I saw the man on the hill with a telescope ", "_id": "http://www.ics.uci.edu/~pattis/ICS-31/lectures/overview/lecture.html", "title": "ics-31 overview", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>ICS-31 Overview</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Overview</h1>\r\n<p>\r\n<h2>ICS-31: Introduction to Programming</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis lecture will overview four topics related to this course:\r\n<ul>\r\n  <li>Learning: what material will we cover in ICS-31\r\n  <li>Computing/Human Resources:  what resources are available\r\n        (and how we will learn to use them).\r\n  <li>Perspectives on Programming: a short discussion of programming and\r\n        education built around \r\n<a href=\"http://www.ics.uci.edu/~pattis/quotations.html\" target=\"_blank\">\r\n       Quotes</a>\r\n        that I have collected on my web page (there are hundreds there)\r\n  <li>Software Production: This is some \"big picture\" material that I present\r\n        to introductory programming students.\r\n      Especially interesting is the table on\r\n      <a href=\"#ProjectMetrics\">Software Project Metrics</a>\r\n</ul>\r\nThis lecture, like the ones to follow, has a problem set at the end.\r\nBut instead of doing these problems with the reading -because this\r\n  is the first day of class- we will spend time in class looking at and\r\n   solving these problems.\r\nThey mostly concern the precise use of a natural language: there are many\r\n  parallels here to the precise use of a programming langauge.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<a name=\"CourseGoals\">\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Course Goals</h3>\r\n\r\n<!-- 1st Programming Course  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"FirstCourse\"></a>\r\n  <b>A First Course in Programming</b></td>\r\n<td width =\"80%\">\r\nFirst and most importantly, ICS-31 assumes <b>no knowledge of programming</b>.\r\nBut, it does assume some knowledge of using computers and software and the\r\n  course moves quickly.\r\nWe assume that you have used Windows in some form (XP, Windows 7, etc.), or Mac\r\n  OS X, or the Linux operating system.\r\nWe further assume that you know how to browse the web, download and unzip\r\n  files, locate folder/files in your file system and rename/move/delete them,\r\n  send/receive email, etc.\r\n<p>\r\nICS-31 introduces the concepts and skills needed to begin serious programming.\r\nIt is taught in the <b>Python</b> language: it as a powerful language with a\r\n  a large library of modules that you can spend years exploring and mastering.\r\nSome of its more advanced features are covered in ICS-32/-33 -the follow-on\r\n  courses to this one; some Python features are beyond the scope of even these\r\n  more advanced courses.\r\n<p>\r\nDuring ICS-31 we will cover a wide variety of introductory and intermediate\r\n  Python language features\r\nBelow I've tried to categorize the fundamentals of programming in Python\r\nWhat I think should be covered in ICS-31 includes:\r\n<ul>\r\n<li>how to read EBNF descriptions of Python's syntax,\r\n<li>how to tokenize (identifiers, keywords, operators, delimiters, literals,\r\n       comments) Python programs, including indentation\r\n<li>how to declare and picture (variable) names that refer/bind to objects\r\n<li>how to write modules and import names from modules\r\n<li>how to read (documentation) and use (from modules) functions and classes\r\n<li>how to classify and understand operators\r\n      (terminology; arithmetic, relational, logical, textual, sequence)\r\n<li>how to analyze and synthesize expressions\r\n    (precedence and associativity, short-circuit evaluation),\r\n<li>how to analyze and synthesize statements\r\n    (<b>if</b>, <b>for</b>, <b>while</b>, <b>break</b>,\r\n    <b>try</b>/<b>except</b>) including exception handling); how to analyze\r\n    statements via hand-simulation and the debugger\r\n<li>how to use iterator protocols, including file reading (and string\r\n    processing)\r\n<li>how to write, use, and test your own functions (including lambda) and\r\n     classes\r\n<li>how to use standard Python composite types (lists, tuples, named-tuples\r\n      dictionaries, sets, and frozensets) and others (stacks, queues, and\r\n      priority queues)\r\n<li>how to write your own classes\r\n<li>how to use functions in an advanced way: as data, as return values\r\n<li>how to write recursive functions\r\n<li>how to construct, clarify, simplify, test, and debug programs\r\n       systematically\r\n<li>how to analyze functions for efficiency.\r\n</ul>\r\n\r\nBasically you will learn the core of programming and Python; we hope that if\r\n  you need to learn more, you will have the necessary skills on which to build,\r\n  whether you learn more by yourself or in courses.\r\n<p>\r\nLikewise, we will learn to use the Eclipse Integrated Development Environment\r\n  (IDE), including its interpreter and debugger.\r\nFinally, we will cover a variety of <i>skill in programming</i> material:\r\n  topics such as program composition, analysis, testing, debugging,\r\n  simplification, and style.\r\nYou will work on programming assignments based on the material you learn;\r\n  each involves writing a few functions or scripts, that exercise combinations\r\n  of langauge features that we cover.\r\nDuring this time we will learn how to program and test our code incrementally,\r\n  and understand the debugging leverage that we get from doing so (as well\r\n  as formally studying the Eclipse Debug Perspective).\r\n<p>\r\nWe will cover this material rigorously.\r\nI believe that even students with some background in Python will learn lots\r\n  of little details (and maybe a few big ones) that we will exploit and build\r\n  on as we cover new material later in the quarter.\r\nDo not get behind during the initial phase of this course; everything builds\r\n  on it (especially the terminology); and if you know the early material,\r\n  make sure you start paying attention when we get to the material you don't\r\n  know.\r\n<p>\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Expectations  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Expectations\"></a><b>Expectations for Learning</b></td>\r\n<td width =\"80%\">\r\nAs members of a course, working together in teaching and learning, we should\r\n  share the following expectations.\r\n\r\n  <p>\r\n<p>\r\n<b>Instructor:</b>\r\n<ul>\r\n  <li>Starts and stops class on time.\r\n  <li>Assigns the minimal amount of homework, but enough so that students learn\r\n        all the required material and are comfortable programming.\r\n        <ul>ICS-31 is a 4 unit course.\r\n            At UCI, each unit typically requires 3 hours/week of work, which\r\n              means you should spend about 12 hours/week working on ICS-33.\r\n            Of this 12 hours, 7 hours/week will be in-class lecture/lab,\r\n              leaving 5 hours/week for lecture prepartion, quizzes, and\r\n              programming.\r\n        </ul>\r\n  <li>Distributes course materials in a timely manner.\r\n  <li>Returns solutions/graded homework promptly.\r\n  <li>Is available for providing individual help.\r\n</ul>\r\n<b>Student:</b>\r\n<ul>\r\n  <li>Attends class, is punctual, and participates (does reading, asks/answer\r\n        questions).\r\n  <li>Completes all homework, spending the requisite time to learn all the\r\n         required material.\r\n  <li>Studies course materials (READ! READ! READ!) and is prepared for class.\r\n  <li>Examines solutions/graded homework to improve knowledge and rectify\r\n        misconceptions about the course material (and promptly reports any\r\n        possible grading mistakes).\r\n  <li>Seeks individual help when it is needed.\r\n</ul>\r\nThe biggest source of problems for students taking ICS-31 is skipping classes,\r\n  not doing readings/homework fully, and poor time management on programming\r\n  assignments (waiting too long to start them, or not making sufficient\r\n  daily progress on them).\r\nYou are scheduled to spend about 120 hours in ICS-31 (10 weeks of work at 12\r\n  hours/week); please allow for this much time in your schedule, and use this\r\n  time wisely.\r\n<p>\r\nI believe that with the right attitude and work ethic, any UCI student can\r\n  learn (and demonstrate that he/she has learned) the material required for\r\n  ICS-31, and pass this course.\r\nBut it does take a desire to do so, and the action necessary on your part.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n\r\n<a name=\"Resources\">\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Resources</h3>\r\n\r\n\r\n<!-- WWW  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"WWW\"></a><b>The Course Web</td>\r\n<td width =\"80%\">\r\nI will place all materials for this course on the course web: some are there\r\n  now, others will become available later in the quarter.\r\nYou will also use the web for submitting programs for grading.\r\nThese materials are organized using the following index on the course\r\n  home page.\r\n<ul>\r\n  <image src=\"images/browserindex.jpg\"></image>\r\n</ul>\r\nHere is a brief description of these main entries\r\n<ul>\r\n  <li><b>Fact Sheet</b>: A page providing information about course\r\n           staff, getting help, and meeting times; this is the home-page for\r\n           the course.\r\n  <li><b>Announcements</b>: A page archiving messages I send to the\r\n           class, typically on a weekly basis.\r\n  <li><b>Email Archive</b>: A page archiving all email I send to the\r\n           class, typically on a daily basis.\r\n  <li><b>MessageBoard Forums</b>: A page holding various forums on which\r\n           students can post questions to get answers from the ICS-31 staff or\r\n           other students.\r\n  <li><b>Syllabus</b>: A link to a long page providing detailed information\r\n           about the mechanics of how this course is run (print a copy).\r\n  <p>\r\n  <li><b>Lecture Schedule/Notes</b>: A page indexing all lectures and labs,\r\n         their on-line lecture notes, and their associated problem sets.\r\n  <li><b>Programming Assignments</b>: A page indexing all programming\r\n         assignments, including their assign/due dates.\r\n  <li><b>Weekly Schedule</b>: A page listing all readings and homework\r\n         assignments (and their due dates), week by week; contains more detail\r\n         than the <b>Lecture Schedule/Notes</b> link.\r\n  <p>\r\n  <li><b>Handouts (General)</b>: A page indexing a variety of handouts related\r\n         to the course.\r\n  <li><b>Course Software</b>: A page indexing course software (most useful\r\n          at the start of the course, for downloading and installing Java,\r\n          Python, and Eclipse).\r\n  <li><b>Sample Programs</b>: A page indexing various programs students can\r\n           download, examine, and run.\r\n  <p>\r\n  <li><b>Python Langauge Reference</b>: An online reference to the Python\r\n           language; it may be a bit to high-level for beginning programmers\r\n  <li><b>Python Library Reference</b>: An online reference to the Python\r\n           library; it may be a bit to high-level for beginning programmers\r\n  <li><b>Course Library Reference</b>: Documentation of the modules in ICS-31's\r\n          standard Python classes.\r\n  <p>\r\n  <li><b>Solutions (in EEE Drop Box)</b>: A page indexing my solutions to all\r\n           course assignments (quizzes, programs, and exams); updated as\r\n           appropriate\r\n  <li><b>Grades (zippled .xls file)</b>: A zipped file you can download with\r\n           all your course grades (typically indexed by the last 5 digits of \r\n           your UCI ID).\r\n  <p>\r\n  <li><b>Anonymous Email</b>: A page students can use to send the instructor\r\n           anonymous email (when personal email might be awkward).\r\n         Don't ask a question: I won't know whom to answer.\r\n  <p>\r\n  <li><b>Checkmate Homework Dropoff</b>: A page students use to submite their\r\n           homework (mostly weekly programming assignments, but sometimes\r\n           quizzes).\r\n  </ul>\r\nDuring this course you will be constantly reading web pages, and sometimes\r\n  downloading materials from them onto your computer.\r\nGenerally, it is critical to become an expert navigating the course web with a\r\n  browser; specifically you should become familiar with the pages used \r\n  repeated in this course (so that you can easily find all the materials you\r\n  need).\r\n<p>\r\nIf you run across any \"missing links\", please drop me a short e-mail so that I\r\n  can correct them quickly.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Computer Labs  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"ComputerLabs\"></a><b>Computer Labs<br>and Software</b></td>\r\n<td width =\"80%\">\r\nI expect that most students will be using their own computers for programming\r\n  assignments.\r\nYou are encouraged to use your own machine for all aspects of the course that\r\n  it is capable of supporting.\r\nYou can download all the required course software to your personal computer for\r\n  free.\r\n<p>\r\nIn addition to using their own machines, students can do their coursework on\r\n  the machines in the <a href=\"http://www.ics.uci.edu/~lab\">ICS Labs</a>.\r\nThe main upside of using the ICS labs is that it will be easy to get ICS-31\r\n  staff to help you there.\r\nAll labs are located in in the ICS building, in rooms 180, 189, 192, and 364.\r\n<p>\r\nICS courses often schedule lab hours (to complement lecture hours), during\r\n  which students can learn how to use software tools and work on their\r\n  programming assignments, all under the supervision of ICS-31 staff members.\r\nWe will have 4 hours of lab scheduled each week.\r\n<p>\r\nAll the machines in the ICS Labs run Windows 7 and are loaded with all the\r\n  necessary course software: browsers, the Eclipse Integrated Development\r\n  Environment (IDE), Python, and all the other course-related\r\n  software.\r\nThese labs provide a convenient space for students to work on their assignments\r\n  where the course staff is available to answer questions immediately.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Human Resources  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"HumanResources\"></a><b>Human Resources</b></td>\r\n<td width =\"80%\">\r\nStudents start ICS-31 with a wide variety of aptitudes and skills. \r\nAt times, even the best students run into problems, misconceptions, mental\r\n  roadblocks, etc.\r\nIt is imperative that you quickly determine that you have a problem, and then\r\n  get it diagnosed and corrected as soon as possible.\r\nThere are many different resources that you can elect to use:\r\n<ul>\r\n  <li><b>Instructor</b>: From my perspective, the best place to get help is\r\n           from me; the biggest problem is that I'm typically teaching hundreds\r\n           of students each quarter.\r\n         Still, I have office hours most days; these are open office hours: no\r\n           appointment is necessary.\r\n         If you cannot see me during any of these times, you  can contact me \r\n           by e-mail or contact me during my online office hours M-Th and Su.\r\n  <li><b>TAs</b>: The Teaching Assistants will supervise the labs.\r\n         They are there primarily to help you debug your programs, and explain\r\n           gaps or misconception in your knowledge of Python.\r\n         Your TA is also responsible for grading your programs, so he/she i the\r\n            first person you should see if you have any questions about how your\r\n            programming assignments were graded.\r\n         The TAs will aid me grading quizzes and exams.\r\n  <li><b>Lab Tutors</b>: Lab Tutors will help the TAs in  the labs.\r\n         They are there primarily to help you debug your programs, and explain\r\n           gaps or misconception in your knowledge of Python.\r\n  <li><b>Students</b>: I encourage students in my courses to seek out each\r\n           other if they have questions.\r\n         The student answering the question will benefit as much as the student\r\n            asking it.\r\n         One beneficial reason to come to UCI is for the interaction with other\r\n           outstanding students.\r\n      Of course, for graded materials there are dos and don'ts related to\r\n           getting help, to ensure academic integrity; follow these rules.\r\n</ul>\r\nThe most useful online mechanism for handing questions/discussions is EEE's\r\n    <a href=\"https://eee.uci.edu/toolbox/messageboard/m15310\" target=\"main\">\r\n    MessageBoard Forums</a> (easily reachable from the course web's index).\r\nThese forums allow students to ask questions (or start discussions) easily, as\r\n  well as supply answers (or participate in the discsussion further).\r\nInitially, I have created four forums for ICS-31:\r\n<ol>\r\n<li>Python and Eclipse\r\n<li>Lecture Material\r\n<li>Programming Assignments\r\n<li>Quizzes and Exams\r\n<li>Find Programming Partners\r\n</ol>\r\nIf the need arises for other forums (tell me if you think another would be\r\n  useful), I will create them.\r\nYou can instruct EEE to email you links to any active discussions in the\r\n  forums.\r\nIn past quarters, these forums have seen a tremendous amount of traffic: course\r\n  material has been clarified, questions have been asked and answered, and many\r\n  interesting side-discussions have ensued.\r\nBut the efficacy depends on your participation.\r\n<p>\r\nI will broadcast information to all the students (and staff) in ICS-31\r\n  using the <a href=\"mailto:ics31-S14@classes.uci.edu\"> ICS-31 Email List</a>\r\n  (ics31-S14@classes.uci.edu).\r\nAll students and staff in the course will automatically receive emails sent to\r\n  this address and all messages sent via this discussion list will be archived\r\n  on the\r\n    <a href=\"https://eee.uci.edu/classmail/s14/36540/\" target=\"main\">\r\n    Email Archive</a> (easily reachable from the course web's index).\r\nMost student-initiated questions/discussions should use the forums mentioned\r\n  above, but sometimes students can use this email list to inform the\r\n  instructor, staff, and other students about some timely issue: e.g.,\r\n  Checkmate not responding to program submissions.\r\n<p>\r\nLearning when and how to seek help from others is an important skill to acquire\r\n  -one that you will use continually in your professional career.\r\nFor example, if you encounter a programming problem that you cannot solve in 5\r\n  minutes (and see no further steps toward a solution), you should be able to\r\n  explain the problem concisely (using all the programming terminology that you\r\n  have learned) to someone else, and then understand and apply an informed\r\n  answer, possibly collaborating to reach a solution.\r\n<p>\r\nInstructors, TAs, and Lab Tutors all have experience handling such questions,\r\n  and are trained to help students learn to become more self-sufficient\r\n  -while still answering their questions: for example, we might tell you a\r\n  general technique for solving a collection of similar problems instead of \r\n just telling you \"the answer\".\r\nSometimes this process is a bit frustrating for students seeking help\r\n  (especially if they started the assignment late and are caught in a\r\n  time-bind), but ultimately this approach makes them better programmers.\r\nThe appropriate homily is, <i>\"Give a person a fish and you feed them for a\r\n  day; teach a person to fish and you feed them for life.\"</i>\r\n<p>\r\nThink seriously about using the human resources that UCI provides (which\r\n  includes me, our TAs,<!--Grader,--> and Lab Tutors, and your fellow\r\n  students), just as you would think about using computational resources:\r\n  the former resources are even more important than the latter.\r\n<p>\r\n<b>Knowing when (and how) to seek help is a strength, not a weakness.</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- A Bit about Me-->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Me\"></a><b>A Bit about Me<b></td>\r\n<td width =\"80%\">\r\nI hope to get to know you all individually during the quarter.\r\nHere is some information about me.\r\n<p>\r\nI grew up on the North Shore of Chicago (in the town of Wilmette) and attended\r\n   New Trier West High School.\r\nI was an undergraduate Mathematics major at Carnegie Mellon University (CMU)\r\n  from 1972-1975, after which I taught a introductory programming there for a\r\n  year.\r\nI went to graduate school in Computer Science at Stanford.\r\nWhile there, I wrote a book, <i>Karel the Robot: A Gentle Introduction to the\r\n  Art of Programming</i>, and its associated software (since updated by Mark\r\n  Stehlik and Jim Roberts at CMU).\r\nOver the years, my book has been revised and extended by Joe Bergin to C++,\r\n  Java, and now Python, and it is still used in Colleges and High Schools\r\n  around the world.\r\n<p>\r\nFrom 1985-1995 I taught introductory and intermediate programming at the\r\n  University of Washington in Seattle (sending lots of my students to work\r\n  at Microsoft; the times allowed many of them to become millionaires).\r\nFrom 1996-2007 I returned to teach at CMU; for the last two years there,\r\n  I served as the Freshman Advisor for incomming Freshman in Computer\r\n  Science (about 150/year).\r\nIn 2007, I joined the Bren School of Information and Computer Science (with\r\n  a joint appointment in Computer Science and Informatics), returning to teach\r\n  in a public university (where my wife is heading the Nursing program).\r\n<p>\r\nDuring my Freshman year in high school, I had a Math teacher named Mr. Lill.\r\nOne class, during a test, my mechanical pencil broke.\r\nI asked Mr. Lill to borrow one of his pencils; but he said no.\r\nI asked him whether I could borrow a friend's pencil; but he said no to that\r\n  too.\r\nHe told me to always come prepared to class, and sat me back down at my desk\r\n  (where I failed the test because I was unable to write any answers).\r\nI had a very low opinion of Mr. Lill for a long time -for years, and I thought\r\n  about this incident for many years; but he taught me an important lesson that\r\n  stayed with me much longer than the mathematics he taught.\r\nI hope I don't have to be anyone's \"Mr. Lill\", but I will assume that roll if\r\n  necessary: there are lots of lessons to be taught at UCI and not all of them\r\n  concern the content of the course material.\r\n<p>\r\nI have posted this story on my course web pages for many many years.\r\nAmazingly, in 2009, when I was attending a reception for students\r\n  admitted to ICS at UCI, I started talking with a student and his parents.\r\nOffhandedly I asked where the father grew up; it was near me; I asked what\r\n  high school he went to; it was mine; I asked what year he started; it was\r\n  the same year that I started!\r\nAt that point we exchanged names, and recognized each other: we were not\r\n  close friends in High School and had not seen each other since graduation.\r\nThe absolute first comment he made to me was, \"Do you remember the day in Mr.\r\n  Lill's class when he wouldn't let you borrow the pencil.\"\r\nI was totally floored.\r\nObviously the lesson that I learned so painfully that day was also learned by\r\n  many others, but at a lesser cost.\r\n<p>\r\nAs a senior in High School I wanted to take both AP Chemistry and AP Physics,\r\n  but they were scheduled at the same time.\r\nI had great respect for and enjoyed being in the classroom with the Chemistry\r\n  teacher, Mr. Kunz, so I signed up for AP Chemistry.\r\nI asked the AP Physics teacher for a list of all the problems that he assigned\r\n  from the textbook, and spent the year reading the book and working those\r\n  problems (the book had answers -but not worked solutions, so I could see if\r\n  I was right, but not know why not if I was wrong- for many of those problems\r\n  in the back).\r\nThe result was that I discovered that I could learn myself, from what are now\r\n  considered very rudimentary learning materials (compared to the internet).\r\nA big goal of college is to teach students to be able to learn by themselves.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"FCE\"></a><b>Student Feedback</b></td>\r\n<td width =\"80%\">\r\nThe most interesting short comment that I received on a Faculty/Course\r\n  Evaluation form (FCE) was, \"You teach  a biased class.\"\r\nAfter some reflection, I had to agree with that student 100%.\r\nAlmost everything I do in my class is highly biased: choosing which programming\r\n  topics to teach, how to sequence these topics (which ones to emphasize, which\r\n  ones to relegate as mere details), deciding programming assignments and test\r\n  questions (and how to award credit for these problems), etc.\r\nYou are sitting in my classroom because you have decided to obtain the UCI\r\n  bias on how to learn programming.\r\n<p>\r\nI once read a book written about MIT.\r\nThe author observed that everyone there majored in the same thing: MIT.\r\nYes, they all learned a different vocabulary and facts, and practiced reasoning\r\n   and problem solving in different disciplines, but what everyone really was\r\n   doing there was learning to think like an MIT graduate.\r\nAlong these lines, I want you to eventually acquire a Pattis simulator in\r\n  your head.\r\nBy running it, you can determine how I would approach a problem; how I would\r\n  critique a solution, etc.\r\nYou don't have to agree with the results it produces, but it is there for\r\n  you to consult.\r\n<p>\r\nThe most interesting long comment I received on a course evaluation form was\r\nlabeled <b>A Relevant Allegory</b>:\r\n<p>\r\n<i>\r\n  \"In order to teach someone to boil water, he would first spend a day giving\r\n     the history of pots, including size, shape, and what metals work best.\r\n   The next day he'd lecture on the chemical properties of water.\r\n   On day three, he'd talk about boiled water through the ages.\r\n   That night, he'd tell people to go home and use boiled water to make\r\n     spaghetti carbonera.\r\n   But never once would he tell you to put the water in the pot and heat it.\r\n   That's what his programming classes are like -completely irrelevant to the\r\n     task at hand.\"\r\n</i>\r\n<p>   \r\nI like this comment because it is witty, well-written, and true -although\r\n  maybe not in the extreme that the author states.\r\nTeaching students to boil water is great for a high school class, but\r\n  in college we are trying to achieve something deeper: we might, instead,\r\n  study phase transitions in matter.\r\nThat is, we don't just learn particulars (drill and practice); we learn\r\n  general theories and -in spite of what this student says- how to apply\r\n  them to particular cases.\r\nI want to teach programming in such a way that when students are exposed to\r\n  new and novel situations, they will be able to use their general knowledge\r\n  to fall back and analyze the problem, figure out what they know and what\r\n  they need to learn to solve the problem, and ultimately synthesize a\r\n  solution.\r\nI acknowledge that learning from first principles is tougher than memorization,\r\n  and that sometimes students feel that the material covered is not \"applied\".\r\nBut, I believe that everything that I teach has many concrete applications.\r\nThis is the difference between education and training.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<a name=\"LearningProgramming\">\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Learning a Programming Language</h3>\r\n\r\n\r\n<!-- Learning Programming  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Learning\"></a><b>Learning</b></td>\r\n<td width =\"80%\">\r\nIn this section I'd like to work from the general to the specific,\r\n  from education to programming, illustrated with various\r\n  <a href=\"http://www.ics.uci.edu/~pattis/quotations.html\" target=\"_blank\">\r\n    Quotes</a>\r\n  I have collected on my web page.\r\nLet's start with three interesting quotes: the first from a graduate student\r\n  at the University of Washington, and the second from Jacob Bronowski, a\r\n  distinguished philosopher of science, the third from Edward Teller, a\r\n  physicist.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThere is a division in the student population between those who go to college\r\n  to learn and those who go to college to earn a diploma. \r\n<p align=\"right\"><i>- J. Blau (letter to the editor, Chronicle of Higher Education, May 24, 2002)</i>\r\n<p>\r\n<tr><td align=\"left\" valign=\"top\">\r\nIt is important that students bring a certain ragamuffin, barefoot irreverance\r\n  to their studies; they are not here to worship what is known, but to\r\n  question it.\r\n<p align=\"right\"><i>- J. Bronowski</i>\r\n<p>\r\n<tr><td align=\"left\" valign=\"top\">\r\nI believe in excellence.\r\nIt is a basic need of every human soul.\r\nAll of us can be excellent, because, fortunately, we are exceedingly diverse\r\n  in our ambitions and talents. \r\n<p align=\"right\"><i>- E. Teller</i>\r\n</table>\r\n<p>\r\nYou have to decide why you are attending UCI.\r\nYour choice will have a lot to say about what you do in this class and others.\r\nHere is a simple question that makes it concrete:\r\n  which of the following students would you rather be?\r\nStudent 1 attends UCI, but on graduation day is informed that all records of\r\n  the student's performance at UCI have been lost; in the future, UCI will\r\n  acknowledge only that the student attended for four years and graduated\r\n  with an ICS degree, but there are no more details to tell.\r\nStudent 2 attends UCI, but on graduation day is hit on the head and develops\r\n  amnesia; although UCI shows the student to have graduated with a 4.0 in CS,\r\n  the student cannot remember any of the material learned through those four\r\n  years.\r\n<p>\r\nI enjoy teaching because I am constantly challenged by students to think more\r\n  deeply about what I know and how I can teach it.\r\nTeaching as best I can is my job; challenging what you hear -to better\r\n   understand it and question my knowledge of the subject- is yours.\r\nSuch challenges make me rethink and revise my opinions (more than you might\r\n  imagine) and think about better ways of presenting and explaining\r\n  complicated material.\r\n<p>\r\nEveryone can excel in Computer Science at UCI: different students will\r\n  gravitate torwards different parts of the field, but it is a big field -with\r\n  many connections to applications in other disciplines- and there is room for\r\n  everyone to be excellent at something.\r\nMany of you will be excellent at programming; some of you will be good at it,\r\n  and that will be enough for you.\r\nBut, everyone should acquire a basic understanding and basic skills in\r\n  programming.\r\n<p>\r\nJust as I question myself, a huge part of learning requires students to\r\n  question themselves (and, as seen above, me as well).\r\nLearning is more about questions than answers, as the following quotes\r\n  illustrate.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nGood teaching is more a giving of the right questions than a giving of the\r\n   right answers.\r\n<p align=\"right\"><i>- J. Albers</i>\r\n<p>\r\nA prudent question is one-half of wisdom.\r\n<p align=\"right\"><i>- F. Bacon</i>\r\n<p>\r\nQuestions are the important thing, answers are less important.\r\nLearning to ask a good question is the heart of intelligence.\r\nLearning the answer---well, answers are for students.\r\nQuestions are for thinkers. \r\n<p align=\"right\"><i>- R. Schank (in \"The Connosseur's Guide to the Mind\")</i>\r\n<p>\r\nThe function of genius is not to give new answers, but to pose new questions\r\n   which time and mediocrity can resolve. \r\n<p align=\"right\"><i>- H. Trevor-Howard</i>\r\n<p>\r\n</table>\r\n<p>\r\nWhen the physics nobel-laureate I. Rabi was a child, his mother would\r\n  always ask him at the dinner table not what he learned in his classes that\r\n  day, but what interesting questions he asked.\r\n<p>\r\nNeil Postman, a famous education, technology, and media critic tells the\r\n  following story about the importance of asking the right question:\r\n<blockquote>\r\nTwo priests were arguing about whether it was appropriate to pray and\r\n  smoke at the same time.\r\nThey each resolved to ask their bishop for guidance.\r\nWhen they met again, each claimed that the bishop supported his position!\r\nThey went on to explore their interactions with the bishop in a bit more\r\n  detail.\r\nThe first said, \"I asked the bishop whether it was appropriate to smoke while\r\n  praying, and he said that praying is a transcendant activity that should not\r\n  be debased by smoking.\"\r\nThe second said, \"I asked the bishop whether it was appropriate to pray while\r\n  smoking, and he said that praying was appropriate any time.\"\r\n</blockquote>\r\nI know that some students enrolled in this course have already learned some\r\n  programming, and that the first few weeks of the quarter might be a review\r\n  for them.\r\nI urge them to use this time to attain a deeper, more integrated understanding\r\n  of this material, as the following quote illustrates.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe voyage of discovery is not in seeking new landscapes but in having new\r\n  eyes.\r\n<p align=\"right\"><i>- M. Proust</i>\r\n</table>\r\n<p>\r\nRemember too, that teaching and learning are two different, but cooperative\r\n  activities.\r\nI'll do my best to teach, but you need to do your best to learn as well.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe think too much about effective methods of teaching and not enough about\r\n  effective methods of learning.\r\nNo matter how good teaching may be, each student must take the responsibility\r\n  for his own education. \r\n<p align=\"right\"><i>- J. Carolus S.J.</i>\r\n<p>\r\nLearning results from what the student does and thinks, and only from what\r\n  the student does and thinks.\r\nThe teacher can advance learning only by influencing the student to learn.\r\n<p align=\"right\"><i>- H. Simon</i>\r\n<p>\r\nThe truth is, when all is said and done, one does not <i>teach a subject</i>,\r\n  one teaches a student how to learn it.\r\nTeaching may look like administering a dose, but even a dose must be worked\r\n  on by the body if it is to cure.\r\nEach individual must cure his or her own ignorance.\r\n<p align=\"right\"><i>- J. Barzun (\"Begin Here\", pp 35), </i>\r\n</table>\r\n<p>\r\nHere is an old joke that illustrates this idea:\r\n<blockquote>\r\nOne day a mother comes home from work and asks her son, \"What did you do\r\n  today?\"\r\nThe son replied, \"I taught our dog how to play the piano.\"\r\nThe mother, incredulous, asked, \"Our dog can play the piano?\", to which the\r\n  son laughed and replied, \"Of course not mom. I said that I taught him; I\r\n  didn't say that he learned how.\" \r\n</blockquote>\r\nFinally, don't be afraid to \"struggle\" and \"fail\"; if learning were\r\n  simple and effortless, we'd all be a lot smarter.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nI, myself, have had many failures and I've learned that if you are not failing\r\n  a lot, you are probably not being as creative as you could be -you aren't\r\n  stretching your imagination. \r\n<p align=\"right\"><i>- J. Backus (primary inventor of FORTRAN)</i>\r\n<p>\r\nLearning is never done without errors and defeat. \r\n<p align=\"right\"><i>- V. Lenin</i>\r\n<p>\r\nYou have to honor failure, because failure is just the negative space around\r\n  success. \r\n<p align=\"right\"><i>- R. Nelson (in Wired 06/2004 page 166)</i>\r\n<p>\r\nI have learned throughout my life as a composer chiefly through my mistakes\r\n  and pursuits of false assumptions, not my exposure to founts of wisdom and\r\n  knowledge. \r\n<p align=\"right\"><i>- I. Stravinsky</i>\r\n</table>\r\n<p>\r\n\r\nUnfortunately, the K-12 educational world that we live in doesn't encourages\r\n  students to try (at really hard things) and fail.\r\nEveryone wants to make sure they never fail.\r\nThis attitude is bad in many dimensions.\r\nCollege is a safe place to try hard and fail (and succeed eventually too);\r\n  mistakes are failures only if you don't learn from them.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Language  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Language\"></a><b>Language</b></td>\r\n<td width =\"80%\">\r\nLet's leave learning behind (but not for too long!) and talk a bit\r\n  about language.\r\nThis course is meta-lingual: we will use a language (English) to learn a\r\n  language (Python).\r\nSome argue, as illustrated below, that language is what reality (and\r\n  certainly education) is primarily about: independent of the subject\r\n  material, thoughts are linguistic.\r\n<p>\r\nAs a concrete example, we will learn lots of technical terms during the\r\n first few weeks of the course, and then use them repeated as levers to\r\n  explore and describe advanced Python concepts.\r\nWhen it comes time to ask questions about the material, or questions about\r\n  debugging a program that you are writing, knowing how to ask using these\r\n   technical terms -and understand the answers given in these technical terms-\r\n   makes the process more precise and concise.\r\nIn an important sense, this course is concerned not only about\r\n  doing programming, but just as much with how to talk about programs and \r\n  talk about doing programming.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThat language is an instrument of human reason, and not merely a medium for the expression of thought, is a truth generally admitted. \r\n<p align=\"right\"><i>- G. Boole</i>\r\n<p>\r\nThe real technology -behind all our other technologies- is language.\r\nIt actually creates the world our consciousness lives in.\r\n<p align=\"right\"><i>- A. Codrescu</i>\r\n<p>\r\nIt is wrong to think that the task of physics is to find out how nature is.\r\nPhysics concerns what we say about nature.\r\n<p align=\"right\"><i>- N. Bohr</i>\r\n<p>\r\nPrecise language is not the problem. Clear language is the problem.\r\n<p align=\"right\"><i>- R. Feynman</i>\r\n<p>\r\nWe think only through the medium of words.\r\nLanguages are true analytical methods.\r\nAlgebra, which is adapted to its purpose in every species of expression, in\r\n  the most simple, most exact, and best manner possible, is at the same time\r\n  a language and an analytical method.\r\nThe art of reasoning is nothing more than a language well arranged. \r\n<p align=\"right\"><i>- A. Lavoisier</i>\r\n<p>\r\nKnowledge of a subject means knowledge of the language of that subject, which\r\n includes not only what its words mean, but far more important, how its\r\n words mean.\r\nAs one learns the language of a subject, one is also learning what the subject\r\n  is.\r\nIt cannot be said often enough that what we call a subject consists mostly,\r\n  if not entirely, of its language. If you eliminate all the words of a\r\n  subject, you have eliminated the subject.\r\nBiology is not plants and animals.\r\nIt is language about plants and animals.\r\nHistory is not events.\r\nIt is language describing and interpreting events.\r\nAstronomy is not planets and stars. It is a way of talking about planets and\r\n  stars.\r\n<p align=\"right\"><i>- N. Postman</i>\r\n<p>\r\nLanguage serves not only to express thought but to make possible thoughts which could not exist without it. \r\n<p align=\"right\"><i>- B. Russell</i>\r\n<p>\r\nThe limits of your language are the limits of your world. \r\n<p align=\"right\"><i>- L. Wittgenstein </i>\r\n</table>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Programming  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Programming\"></a><b>Programming</b></td>\r\n<td width =\"80%\">\r\nFinally, let's talk about programming and programming languages.\r\nMost of the quotes below are lengthy, and come from emminent computer\r\n  scientists (or just fantastic programmers) who are trying to communicate\r\n  what programming is about and why it is so fascinating to them.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe programmer, like the poet, works only slightly removed from pure\r\n  thought-stuff.\r\nHe builds castles in the air, from air, creating by exertion of the\r\n  imagination.\r\nFew media of creation are so flexible, so easy to polish and rework, so\r\n  readily capable of realizing grand conceptual structures.\r\nYet the program construct, unlike the poet's words, is real in the sense that\r\n  it moves and works, producing visible outputs separate from the construct\r\n  itself.\r\nIt prints results, draws pictures, produces sounds, moves arms.\r\nThe magic of myth and legend has come true in our time.\r\nOne types the correct incantation on a keyboard, and a display screen comes to\r\n  life, showing things that never were nor could be. ...\r\nThe computer resembles the magic of legend in this respect, too.\r\nIf one character, one pause, of the incantation is not strictly in proper\r\n  form, the magic doesn't work.\r\nHuman beings are not accustomed to being perfect, and few areas of human\r\n  activity demand it.\r\nAdjusting to the requirement for perfection is, I think, the most difficult\r\n  part of learning to program. \r\n<p align=\"right\"><i>- F. Brooks (\"The Mythical Man Month\", pages 7-8)</i>\r\n<p>\r\nIt's [programming] the only job I can think of where I get to be both an\r\n  engineer and an artist.\r\nThere's an incredible, rigorous, technical element to it, which I like because\r\n  you have to do very precise thinking.\r\nOn the other hand, it has a wildly creative side where the boundaries of\r\n  imagination are the only real limitation. \r\n<p align=\"right\"><i>- A. Hertzfeld (original Mac programmer)</i>\r\n<p>\r\nWhen I speak about computer programming as an art, I am thinking primarily of\r\n  it as an art form, in an aesthetic sense.\r\nThe chief goal of my work as an educator and author is to help people learn\r\n  how to write beautiful programs ... \r\nMy feeling is that when we prepare a program, the experience can be just like\r\n  composing poetry or music ...\r\nSome programs are elegant, some are exquisite, some are sparkling.\r\nMy claim is that it is possible to write grand programs, noble programs, truly\r\n  magnificent ones!  ...  computer programming is an art, because it applies\r\n  accumulated knowledge to the world, because it requires skill and ingenuity,\r\n  and especially because it produces objects of beauty.\r\nProgrammers who subconsciously view themselves as artists will enjoy what they \r\n do and will do it better. \r\n<p align=\"right\"><i>- D. Knuth (Computer Programming as an Art. Turing Award Speech 1974)</i>\r\n<p>\r\nA good programming language is a conceptual universe for thinking about\r\n  programming. \r\nA language that doesn't affect the way you think about programming is not\r\n  worth knowing. \r\n<p align=\"right\"><i>- A. Perlis</i>\r\n<p>\r\nA programming language is a system of notation for describing computations.\r\nA useful programming language must therefore be suited for both description\r\n (i.e., for human writers and readers of programs) and for computation\r\n (i.e., for efficient implementation on computers).\r\nBut human beings and computers are so different that it is difficult to find\r\n  notational devices that are well suited to the capabilities of both. \r\n<p align=\"right\"><i>- R. Tennant (Principles of Programming Languages, Prentice Hall, 1981)</i>\r\n</table>\r\n<p>\r\nNow, I like to focus on aesthetics, because at some level, the\r\n  root of learning in all disciplines is learning their aesthetics:\r\n  learning to separate the beautiful from the ugly.\r\nCentral to this discussion is the dichotomy between complexity and \r\n simplicity in programming.\r\nAs is illustrated many times below, what makes programming hard is\r\n  complexity in the tools used and complexity of the final product: it is\r\n  too easy to create overly complicated designs and implementations (which\r\n  inevitably are incorrect).\r\nWe must strive to keep everything simple: this is where creativity in\r\n   programming lies.\r\nProgramming is one of many human activities in which simplicity and beauty\r\n  are bound tightly.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nThe competent programmer is fully aware of the strictly limited size of his\r\n  own skull; therefore he approaches the programming task in full humility,\r\n  and among other things he avoids clever tricks like the plague. \r\n<p align=\"right\"><i>- E. Dijkstra (in \"The Humble Programmer\",\r\n   his 1972 Turing Award Lecture)</i>\r\n<p>\r\nBeauty is more important in computing than anywhere else in technology because\r\n  software is so complicated.\r\nBeauty is the ultimate defense against complexity.\r\n...\r\nThe geniuses of the computer field, on the the other hand, are the\r\n  people with the keenest aesthetic senses, the ones who are \r\n  capable of creating beauty.\r\nBeauty is decisive at every level: the most important interfaces, the most\r\n  important programming languages, the winning algorithms are the beautiful\r\n  ones.\r\n...\r\nGood programmers know what is beautiful and bad programmers don't.\r\n<p align=\"right\"><i>- D. Gelernter (\"Machine Beauty\", Basic Books, 1998)</i>\r\n<p>\r\nGreat software, likewise, requires a fanatical devotion to beauty.\r\nIf you look inside good software, you find that parts that no one is ever\r\n  supposed to see are beautiful too.\r\nWhen it comes to code I behave in a way that would make me eligible for\r\n  prescription drugs if I approached everyday life the same way.\r\nIt drives me crazy to see code that's badly indented, or that uses ugly\r\n  variable names.\r\n<p align=\"right\"><i>- P. Graham (in \"Hackers and Painters\" pg. 29)</i>\r\n<p>\r\nControlling complexity is the essence of computer programming. \r\n<p align=\"right\"><i>- B. Kernighan (creator of the C programming language)</i>\r\n<p>\r\nFools ignore complexity; pragmatists suffer it; experts avoid it; geniuses\r\n  remove it. ...\r\nSimplicity does not precede complexity, but follows it.\r\n<p align=\"right\"><i>- A. Perlis</i>\r\n<p>\r\nComputer Science is the first engineering discipline in which the complexity of\r\n  the objects created is limited solely by the skill of  the creator, and not\r\n  by the strength of raw materials.\r\n<p align=\"right\"><i>- B. Reid</i>\r\n<p>\r\nDesign and programming are human activities; forget that and all is lost. \r\n<p align=\"right\"><i>- B. Stroustrup</i>\r\n<p>\r\nTechnical skill is mastery of complexity, while creativity is mastery of\r\n  simplicity.\r\n<p align=\"right\"><i>- E. C. Zeeman</i>\r\n</table>\r\n<p>\r\nI'd like to present the following quote last; it will provide an import\r\n  perpective for many of our discussions about features in the Python\r\n  language.\r\nIt fully recognizes the psychological aspect of programming and is directly\r\n  related to the complexity of the tools that we use when we build complex\r\n  artifacts.\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nMillions for compilers, but hardly a penny for understanding human programming\r\n  language use.\r\nNow, programming languages are obviously symmetrical, the computer on one\r\n  side, the human on the other.\r\nIn an appropriate science of computer languages, one would expect that half\r\n  the effort would be on the computer side, understanding how to translate\r\n  the languages into executable form, and half on the human side, understanding\r\n  how to design languages that are easy or productive to use.\r\nYet, we do not even have an enumeration of all the psychologicial functions\r\n  programing languages serve for the user.\r\nOf course, there is lots of programming language <i>design</i>, but it comes\r\n  from computer scientists.\r\nAnd though technical papers on languages contain mainly appeals to ease of use\r\n  and learning, they patently contain almost no psychologicial evidence nor any\r\n  appeal to psychological science.\r\n<p align=\"right\"><i>- A. Newell and S. Card</i>\r\n</table>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<a name=\"Software\">\r\n<hr align=\"left\" width=\"33%\">\r\n<h3>Software</h3>\r\n\r\n\r\n<!-- System Costs  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"Costs\"></a><b>System Costs</b></td>\r\n<td width =\"80%\">\r\nIn the early days, computers were built by hand, which made them expensive.\r\nThey were physcially large, consumed huge amount of power, were slow, and their\r\n  memories were small; so they could run only small programs.\r\nAs a result, the cost of developing a working computing system was mostly spent\r\n  on hardware.\r\n<p>\r\nAt present, computers are cheaply mass produced: they are small, consume\r\n  minimal power, are fast, and have large memories.\r\nNow, the cost of developing a working computing system is mostly spent on\r\n  software.\r\nTo deliver new systems cheaply and on time, we must focus on improving the\r\n production of software.\r\nWhen implementing a computer system, a 5% improvement in developing software\r\n  is worth about as much as a 50% improvement in developing hardware (because\r\n  these latter costs are so minimal to start with).\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n<image src=\"images/cost.gif\"></image>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"></td>\r\n<td width =\"80%\">\r\nIn his Turing Award lecture, \"The Humble Programmer\", Edgser Dijkstra (a famous\r\n  Computer Scientist) put it as follows: \r\n\"As long as there were no machines, programming was no problem at all;\r\n when we had a few weak computers, programming became a mild problem,\r\n and now [1972] that we have gigantic computers, programming has become a\r\n gigantic problem.\r\n\r\n ...As the power of available machines grew by a factor of more than a\r\n thousand, society's ambition to apply these new machines grew in proportion,\r\n and it was the poor programmer who found his job in this exploded field of\r\n tension between the ends and the means.\r\n \r\n  The increased power of the hardware, together with the perhaps more dramatic\r\n  increase in its reliability, made solutions feasible that the programmer had\r\n  not dared to dream about a few years before.\r\n\r\n  And now, a few years later, he <i>had</i> to dream about them and even worse,\r\n  he had to transform such dreams into reality! It is no wonder that we found\r\n  ourselves in a software crisis.\"\r\n  <p>\r\nIn fact,\r\n  <a href=\"http://www.intel.com/technology/mooreslaw/index.htm\"\r\n   target=\"_blank\">Moore's \"Law\"</a> \r\n (empirical) states that computer/communication hardware doubles\r\n in performance (speed, memory) and halves in resources (size, cost) about\r\n  every 18 months.\r\nThis exponential law has held for the past 30 years of computing, which has\r\n  seen changes in computing technology by a factor of a million.\r\nPCs today perform a billion operations per second; if Moore's Law continues to\r\n  hold for another 40 years, PCs will be performing a thousand trillion\r\n  operations per second (about as many as the human brain performs; with many\r\n  more logical elements, each operating at a much slower -than electronic-\r\n  speed).\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Software Development Model  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"SoftwareDevelopment\"></a><b>A Software Development Model</b></td>\r\n<td width =\"80%\">\r\nOver the last 30 years the following model, called the\r\n  <b>Iterated Waterfall</b> model, has proven itself an important one, for\r\n  developing large software systems (direclty applying it to smaller projects\r\n  is a bit cumbersome, but it is often applied in a modified way).\r\nEach higher phase must finish before a lower phase begins (like water falling),\r\n  but there are opportunities to return to earlier phases: a problem at a later\r\n  phase may back up to an earlier one; and all phases can be reached again\r\n  (iterated) during maintenance.\r\nA more recent software methodology (better adapted for smaller projects that\r\n  require  fewer programmers) is called \r\n  <a href=\"http://www.extremeprogramming.org/\" target=\"_blank\">Extreme Programming</a>.\r\nIt shares the idea of incremental development with the iterated waterfall\r\n  model, but reaches these objectives a bit differently.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n<image src=\"images/waterfall.gif\"></image>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"></td>\r\n<td width =\"80%\">\r\n In fact, maintenance is a curious term to appply to software, because\r\n   unlike cars, for example, \r\n<ul>\r\n  <li>Software has no parts that wear out and need to be replaced\r\n  <li>Software has no fluids that evaporate and need to be replished\r\n</ul>\r\nSo what constitutes software maintenance?\r\n<ul>\r\n   <li>Fixing (latent) errors\r\n   <li>Improving performance\r\n   <li>Increasing functionality\r\n   <ul>\r\n     <li>Writing new code to meet new specifications\r\n   </ul>\r\n   <li>Redesigning/Reimplementing/Recoding\r\n   <ul>\r\n     <li>Rewriting old code to simplify it for future (anticipated) changes\r\n   </ul>\r\n</ul>\r\nSo software has organic features: it continues to grow and evolve.\r\nIn fact, reliably working software continues to be used a long time.\r\nThe current Air-Traffic controller system is decades old; there have\r\n  been a few attempts to design and code a replacement, but after\r\n  billions of dollars, little progress has been made (many say because\r\n  the specification keeps changing: see the next chart).\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Fixing Errors  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"FixingErrors\"></a><b>Relative Costs to Fix Errors</b></td>\r\n<td width =\"80%\">\r\nReview the Iterated Waterfall model of software development.\r\nThe following chart shows the cost to fix an error, depending on when the error\r\n  was discoved during this process.\r\nNotice that the sooner an error is discovered, the less expensive it is to fix. \r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n<image src=\"images/fix.gif\"></image>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"></td>\r\n<td width =\"80%\">\r\nWhen we write Python programs, we will learn about language features that allow\r\n  us to detect errors more quickly (and thus, fix them earlier and save our\r\n  time, which is the  biggest cost of taking this course)\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Lifetime Costs  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"LifetimeCosts\"></a><b>Software Lifetime Costs</b></td>\r\n<td width =\"80%\">\r\nWe have learned that reliably working software continues to be used a\r\n  long time.\r\nTherefore, the following charts should come as no surprise\r\n (although it typically does).\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n<image src=\"images/lifetime.gif\"></image>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"></td>\r\n<td width =\"80%\">\r\nThe upshot of this chart is that software must be built initially in such a way\r\n  that it is easy to maintain, because over the lifetime of a product,\r\n  maintenance costs dominate.\r\nOne easy way to remember this chart is that the <i>maintenance cost</i> looks\r\n  like a Pac-Man icon, gobbling up the <i>initial cost</i> to build.\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Project Sizes  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"ProjectSizes\"></a><b>Software Project Sizes</b></td>\r\n<td width =\"80%\">\r\nAlthough we will write only small software systems in this course, we should\r\n  still keep the construction of large software systems in mind.\r\nAs we have seen in industry, often small software systems grow into large ones.\r\nSoftware project sizes are roughly categorized as follows (where K means 1,000\r\n  lines of code and M means 1 million lines of code)\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\"><td width =\"20%\"><b>Tiny:</b></td><td width =\"80%\">< 1K</td>\r\n<tr valign=\"top\"><td width =\"20%\"><b>Small:</b></td><td width =\"80%\"> 1K - 10 K</td>\r\n<tr valign=\"top\"><td width =\"20%\"><b>Medium:</b></td><td width =\"80%\"> 10K - 100K</td>\r\n<tr valign=\"top\"><td width =\"20%\"><b>Large:</b></td><td width =\"80%\"> 100K - 1 M</td>\r\n<tr valign=\"top\"><td width =\"20%\"><b>Huge:</b></td><td width =\"80%\"> > 1M</td>\r\n</tbody>\r\n</table>\r\n<p>\r\nWriting a very large software project is like building a skyscraper, in terms\r\n  of workforce, cost, and timetable.\r\nBut, it is notoriously difficult to predict software costs and schedules,\r\n  compared to the building trades.\r\n <p>\r\nWhile most construction jobs can be estimated within 10% of time and budget,\r\n  software jobs are lucky to be estimated with 300%.\r\nSomething like 60% of all software projects fail to be completed or deployed.\r\n  -many $100 million projects are abandoned, with no usable product produced.\r\nThis is known as the <b>software crisis</b>, which many attribute to the\r\n  relative newness of programming as a discipline (<60 years; civil\r\n  engineering is thousands of years old); others say that the difference\r\n  between two large programs is much greater than the difference between two\r\n  large buildings, which is why constructing programs is harder than\r\n  constructing buildings; still others ponder the nature of digital systems\r\n  and the ability for small mistakes to cause large problems.\r\n<p>\r\nThe area of Software Engineering is young, but quickly growing and maturing as\r\n  software  finds its way into everything that we produce.\r\n</td>\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n<!-- Project Metrics  -->\r\n\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><a name=\"ProjectMetrics\"></a><b>Software Project Metrics</b></td>\r\n<td width =\"80%\">\r\nAlthough software projects scale many magnitudes in sizes (the ones shown below\r\n  are medium to huge), worker productivit rates fall into a much smaller range.\r\nThe following data came from an article, \"How to Break the Software Logjam\"\r\n  from  Fortune magazine, Sept. 25, 1989 (pages 100-112).\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"1\" rules=\"nonall\" width=\"100%\">\r\n<thead>\r\n<tr valign=\"top\" align=\"right\">\r\n  <th align=\"left\">Company</th><th align=\"left\">Product</th>\r\n  <th>Lines<br>x1K</th><th>Time<br>worker-yrs</th><th>Cost<br>x$1M</th>\r\n  <th>$/Line</th><th>Lines<br>/Month<br>/Worker</th></tr>\r\n<tbody>\r\n<tr valign=\"top\" align=\"right\">\r\n  <td align=\"left\">Ford</td><td align=\"left\">Continental</td>\r\n  <td>84</td><td>3.5</td><td>1.8</td>\r\n  <td>21</td><td>200</td></tr>\r\n<tr valign=\"top\" align=\"right\">\r\n  <td align=\"left\">IBM</td><td align=\"left\">Checkout Scanner</td>\r\n  <td>90</td><td>58.0</td><td>3.0</td>\r\n  <td>33</td><td>129</td></tr>\r\n<tr valign=\"top\" align=\"right\">\r\n  <td align=\"left\">Lotus</td><td align=\"left\">1 2 3 Spreadsheet</td>\r\n  <td>400</td><td>263.0</td><td>22.0</td>\r\n  <td>55</td><td>127</td></tr>\r\n<tr valign=\"top\" align=\"right\">\r\n  <td align=\"left\">Citibank</td><td align=\"left\">ATM*</td>\r\n  <td>780</td><td>150.0</td><td>13.2</td>\r\n  <td>17</td><td>433</td></tr>\r\n<tr valign=\"top\" align=\"right\">\r\n  <td align=\"left\">NASA</td><td align=\"left\">Space Shuttle</td>\r\n  <td>25,600</td><td>22,100</td><td>1,200</td>\r\n  <td>47</td><td>97</td></tr>\r\n</tbody>\r\n</table>\r\n*The Citibank ATM project was considered to be very successful.\r\nWithout it, all the other metrics would differ only by a factor of 2.\r\n<p>\r\nNote that <b>Code Lines/Month</b> is a bad metric to measure programmer\r\n  productivity.\r\nThis is because a poor programmer may quickly produce many lines to do a\r\n simple task; while a good programmer will carefully write fewer lines of code\r\n  to accomplish the same task, often producing simpler and easier to modify\r\n  code, reproducing the same functionality in fewer lines of code.\r\nHere are two relevant quotes from my homepage (there are lots of other\r\n  interesting and relevant quotes there).\r\n<p>\r\n<table width =\"100%\" cellspacing=\"0\" cellpadding=\"1\" border=\"1\" rules=\"all\">\r\n<tr><td align=\"left\" valign=\"top\">\r\nWe flew down weekly to meet with IBM, but they thought the way to measure\r\n  software was the amount of code we wrote, when really the better the\r\n  software, the fewer lines of code.\r\n<p align=\"right\"><i>- W. Gates (discussing the writing of the original\r\n    DOS operating system)</i>\r\n<p>\r\nOnce the engineers find out that this is how they're being evaluated\r\n  [by how many lines of code per day they are writing]\r\n  they'll revert to cut-and-past programming to optimize their productivity\r\n  rating.\r\nThey'll repeat the same code logic in as many places as possible in an effort\r\n  not to look lazy.\r\nLong-term benefits like maintainability and portability will be sacrificed on\r\n  account of a poorly chosen metric.\r\n<p align=\"right\"><i>- B. Blunden (in \"Cube Farm\", page 140)</i>\r\n</table>\r\n<p>\r\nBut <b>Code Lines</b> is a good metric to measure maintenance cost (which we\r\n  have seen overshadows by a large fact the original cost to build software).\r\nSo, the cost of maintaining a program is roughly proportional to its size.\r\n<p>\r\nThis leads to an interesting anomoly: A programmer may exhibit what appears to\r\n  be negative productivity by working to shrink the size of a program; but, the\r\n  result is reduced maintanence cost over the lifetime of the software.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Problem Set  -->\r\n\r\n<a name=\"ProblemSet\"></a>\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"></a><b>Problem Set</b></td>\r\n<td width =\"80%\">\r\nMastering programming starts with mastering the syntax (form) and semantics\r\n (meaning) of a programming language.\r\nBefore we begin our study of computer languages, we can investigate these\r\n  topics in a natural language.\r\nAlthough these are not questions about programming, answering them requires\r\n  thinking like a programmer.\r\n<ol type=\"1\">\r\n<li>\r\n  Interpret each of the following (real) headlines in two ways; rewrite each\r\n  in a longer but less ambiguous form.\r\n  <ol type =\"a\">\r\n    <li>Police Squad Helps Dog Bite Victim\r\n    <li>Milk Drinkers Turn to Powder\r\n    <li>Kids Make Nutritious Snacks\r\n    <li>Stolen Painting Found by Tree\r\n    <li>Red Tape Holds Up New Bridge\r\n    <li>Old School Pillars are Replace by Alumni\r\n    <li>Hospitals are Sued by 7 Foot Doctors\r\n    <li>Earthquake! Buildings Sway from San Francisco to LA\r\n    <li>Tuna Biting Off Coast of Washington\r\n    <li>Teacher Strikes Idle Kids\r\n    <li>Local High School Dropouts Cut in Half\r\n    <li>UCI Graduates Blind Senior Citizen\r\n    <li>White House Ducks Report on Pornography\r\n  </ol>\r\n  I'm sure lots of these are available online. \r\n  Here is one URL for \r\n    <a href=\"http://www.snopes.com/humor/nonsense/head97.htm\">\r\n      Headlines from 1997</a>\r\n  <p>\r\n\r\n<li>\r\n  Assume that a state originally had no litter laws (so it was legal to\r\n    litter).\r\n  A newspaper reports, \"Legaslature Voids Judge's Reversal of Governer's Veto\r\n    of Anti-Litter Law.\" Is it now legal or illegal to litter?\r\n\r\n<p>\r\n<li>\r\n  A man is looking at a photograph; he says of it.\r\n  <ul><li>\"Brothers and sisters have I none, but this man's father is my\r\n      father's son\".\r\n  </ul>\r\n  What is the relationship between the speaker and the person in the picture?\r\n  What is the simplest, most convincing arguments for your answer?\r\n\r\n<p>\r\n<li>\r\n  What would be a good metric to assess the productivity of letter carrier\r\n    working for the US Post Office? Think about why a simple metric, like \r\n    letters delivered per day, has flaws; what other kinds of data should be\r\n     taken into account?\r\n  \r\n<p>\r\n<li>\r\n  Assume that Company X builds a software system that comprises 250,000 lines\r\n    of code for $1,000,000: they spent extra time to make it compact and easy\r\n    to maintain.\r\n  Assume that Company Y builds a software system that comprises 1,000,000 lines\r\n    of code for $250,000: they wrote it quickly and cheaply.\r\n  Finally, assume that it costs 20 cents/year to maintain a line of code (here\r\n    we won't distinguish between well-/poorly-written code, just code size.\r\n  What is the 10 year cost for each of these companies to build and maintain\r\n    their software product? What other important issues for success are not\r\n    covered in this simple analysis?\r\n  Which software company is likely to thrive?\r\n  \r\n<p>\r\n<li>\r\n  Assume white clothes are best washed in hot water, but colored clothes must\r\n    be washed in cold water (so the colors don't run).\r\n  You have a large pile of laundry to do, which will fit in one white and one\r\n    colored load.\r\n  You want everything reasonably clean.\r\n  Which load do you do first? Think about robustness in the face of errors.\r\n  \r\n<p>\r\n<li>\r\n  If you have a washing machine and dryer that each take 30 minutes to run,\r\n    and you have 10 piles of laundry that you must wash and dry, how long will\r\n    the entire process take (disregard the time to load/unload)?\r\n\r\n<p>\r\n<li>\r\n  What is the difference between <i>precision</i> and <i>accuracy</i> (look\r\n    these words up in a dictionary if you need to)?\r\n  Write a precise statement that is not accurate.\r\n  Write an accurate statement that is not precise.\r\n\r\n<p>\r\n<li>\r\n  The bottom of an escalator has two signs\r\n  <ul>\r\n     <li>Shoes must be worn!\r\n     <li>Dogs must be carried!\r\n  </ul>\r\n  Although these signs read similarly (syntax), they have very different\r\n    interpretations (semantics), about which no native English speakers\r\n    would give a second thought.\r\n  Carefully examine these two sentences and explain their difference, possibly\r\n     by restating the intent of these signs using more words.\r\n  Hint: \"Shoes must be worn!\" does not refer to shoes being old/worn-out.\r\n\r\n<p>\r\n<li>\r\n  Repunctuate the following sentences (you may add or remove punctuation\r\n    marks) to reverse their meanings\r\n  <ul>\r\n     <li>The republicans say the democrats will win.\r\n     <li>A woman without her man is nothing.\r\n  </ul>\r\n\r\n<p>\r\n<li>\r\n  Repunctuate the following paragraph (you may add or remove punctuation\r\n    marks) to make the letter more one of loathing than admiration.\r\n  <ul>\r\nDear Jack:\r\nI want a man who knows what love is all\r\nabout. You are generous, kind, and thoughtful.\r\nPeople who are not like you admit to being\r\nuseless and inferior. You have ruined me for\r\nother men. I yearn for you. I have no feelings\r\nwhatsoever when we're apart. I can be forever happy\r\n-will you let me be yours? Jill.\r\n</ul>\r\n\r\n\r\n<!---\r\nDear Jack:\r\nI want a man who knows what love is. All\r\nabout you are generous, kind, and thoughtful\r\npeople, who are not like you. Admit to being\r\nuseless and inferior. You have ruined me. For\r\nother men I yearn. For you, I have no feelings\r\nwhatsoever. When we're apart, I can be forever happy.\r\nWill you let me be? Yours, Jill.\r\n--->\r\n\r\n\r\n<p>\r\n<li>\r\nWrite two different interpretations for the statement, \"You\r\n  cannot put too much water in a nuclear reactor.\"\r\nWrite three different interpretations for the statement, \"I saw\r\n  the man on the hill with a telescope.\"\r\n</tbody>\r\n</table>\r\n<p>\r\n\r\n\r\n</body>\r\n</html>\r\n", "id": 35910.0}