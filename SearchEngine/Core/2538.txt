{"text": "Last Published 2 14 7 14Version 8 6 Documentation Home Documentation Installing and Managing AsterixDB using Managix AsterixDB 1 1 An ADM and AQL Primer AsterixDB Javascript SDK Asterix Data Model ADM Asterix Query Language AQL AQL Functions AQL Allen s Relations Functions AQL Support of Similarity Queries Accessing External Data REST API to AsterixDB The Asterix Query Language Version 1 Table of Contents 1 Introduction2 Expressions3 Statements 1 Introduction Back to TOC This document is intended as a reference guide to the full syntax and semantics of the Asterix Query Language AQL the language for talking to AsterixDB This guide covers both the data manipulation language DML aspects of AQL including its support for queries and data modification as well as its data definition language DDL aspects New AsterixDB users are encouraged to read and work through the friendlier guide AsterixDB 1 1 An ADM and AQL Primer before attempting to make use of this document In addition readers are advised to read and understand the Asterix Data Model ADM reference guide since a basic understanding of ADM concepts is a prerequisite to understanding AQL In what follows we detail the features of the AQL language in a grammar guided manner We list and briefly explain each of the productions in the AQL grammar offering examples for clarity in cases where doing so seems needed or helpful 2 Expressions Back to TOC Query Expression An AQL query can be any legal AQL expression Expression OperatorExpr IfThenElse FLWOR QuantifiedExpression AQL is a fully composable expression language Each AQL expression returns zero or more Asterix Data Model ADM instances There are four major kinds of expressions in AQL At the topmost level an AQL expression can be an OperatorExpr similar to a mathematical expression an IfThenElse to choose between two alternative values a FLWOR expression the heart of AQL pronounced flower expression or a QuantifiedExpression which yields a boolean value Each will be detailed as we explore the full AQL grammar Primary Expressions PrimaryExpr Literal VariableRef ParenthesizedExpression FunctionCallExpr DatasetAccessExpression ListConstructor RecordConstructor The most basic building block for any AQL expression is the PrimaryExpr This can be a simple literal constant value a reference to a query variable that is in scope a parenthesized expression a function call an expression accessing the ADM contents of a dataset a newly constructed list of ADM instances or a newly constructed ADM record Literals Literal StringLiteral IntegerLiteral FloatLiteral DoubleLiteral null true false StringLiteral ESCAPE QUOT ESCAPE APOS ESCAPE QUOT ESCAPE APOS IntegerLiteral DIGITS DIGITS 9 FloatLiteral DIGITS f F DIGITS DIGITS f F DIGITS f F DoubleLiteral DIGITS DIGITS DIGITS DIGITS Literals constants in AQL can be strings integers floating point values double values boolean constants or the constant value null The null value in AQL has unknown or missing value semantics similar to though not identical to nulls in the relational query language SQL The following are some simple examples of AQL literals Since AQL is an expression language each example is also a complete legal AQL query Examples a string 42 Variable References VariableRef VARIABLE VARIABLE LETTER LETTER DIGIT LETTER A Z a z A variable in AQL can be bound to any legal ADM value A variable reference refers to the value to which an in scope variable is bound E g a variable binding may originate from one of the for or let clauses of a FLWOR expression or from an input parameter in the context of an AQL function body Examples tweet id Parenthesized Expressions ParenthesizedExpression Expression As in most languages an expression may be parenthesized Since AQL is an expression language the following example expression is actually also a complete legal AQL query whose result is the value 2 As such you can have Big Fun explaining to your boss how AsterixDB and AQL can turn your 1 node shared nothing Big Data cluster into a 5M calculator in its spare time Example 1 1 Function Calls FunctionCallExpr FunctionOrTypeName Expression Expression Functions are included in AQL like most languages as a way to package useful functionality or to componentize complicated or reusable AQL computations A function call is a legal AQL query expression that represents the ADM value resulting from the evaluation of its body expression with the given parameter bindings the parameter value bindings can themselves be any AQL expressions The following example is a built in function call expression whose value is 8 Example string length a string Dataset Access DatasetAccessExpression dataset Identifier Identifier Expression Identifier IDENTIFIER StringLiteral IDENTIFIER LETTER LETTER DIGIT SPECIALCHARS SPECIALCHARS Querying Big Data is the main point of AsterixDB and AQL Data in AsterixDB reside in datasets collections of ADM records each of which in turn resides in some namespace known as a dataverse data universe Data access in a query expression is accomplished via a DatasetAccessExpression Dataset access expressions are most commonly used in FLWOR expressions where variables are bound to their contents Note that the Identifier that identifies a dataset or any other Identifier in AQL can also be a StringLiteral This is especially useful to avoid conficts with AQL keywords e g dataset null or type The following are three examples of legal dataset access expressions The first one accesses a dataset called Customers in the dataverse called SalesDV The second one accesses the Customers dataverse in whatever the current dataverse is The third one does the same thing as the second but uses a slightly older AQL syntax Examples dataset SalesDV Customers dataset Customers dataset Customers Constructors ListConstructor OrderedListConstructor UnorderedListConstructor OrderedListConstructor Expression Expression UnorderedListConstructor Expression Expression RecordConstructor FieldBinding FieldBinding FieldBinding Expression Expression A major feature of AQL is its ability to construct new ADM data instances This is accomplished using its constructors for each of the major ADM complex object structures namely lists ordered or unordered and records Ordered lists are like JSON arrays while unordered lists have bag multiset semantics Records are built from attributes that are field name field value pairs again like JSON See the AsterixDB Data Model document for more details on each The following examples illustrate how to construct a new ordered list with 3 items a new unordered list with 4 items and a new record with 2 fields respectively List elements can be homogeneous as in the first example which is the common case or they may be heterogeneous as in the second example The data values and field name values used to construct lists and records in constructors are all simply AQL expressions Thus the list elements field names and field values used in constructors can be simple literals as in these three examples or they can come from query variable references or even arbitrarily complex AQL expressions Examples a b c 42 forty two AsterixDB 3 14f project name AsterixDB project members vinayakb dtabass chenli Note When constructing nested records there needs to be a space between the closing braces to avoid confusion with the token that ends an unordered list constructor a b c will fail to parse while a b c will work Path Expressions ValueExpr PrimaryExpr Field Index Field Identifier Index Expression Components of complex types in ADM are accessed via path expressions Path access can be applied to the result of an AQL expression that yields an instance of such a type e g a record or list instance For records path access is based on field names For ordered lists path access is based on zero based array style indexing AQL also supports an I m feeling lucky style index accessor for selecting an arbitrary element from an ordered list Attempts to access non existent fields or list elements produce a null i e missing information result as opposed to signaling a runtime error The following examples illustrate field access for a record index based element access for an ordered list and also a composition thereof Examples list a b c list a b c 2 list a b c list 2 Logical Expressions OperatorExpr AndExpr or AndExpr AndExpr RelExpr and RelExpr As in most languages boolean expressions can be built up from smaller expressions by combining them with the logical connectives and or Legal boolean values in AQL are true false and null Nulls in AQL are treated much like SQL treats its unknown truth value in boolean expressions The following is an example of a conjuctive range predicate in AQL It will yield true if a is bound to 4 null if a is bound to null and false otherwise Example a 3 and a 5 Comparison Expressions RelExpr AddExpr AddExpr AQL has the usual list of suspects plus one for comparing pairs of atomic values The plus one is the last operator listed above which is the roughly equal operator provided for similarity queries See the separate document on AsterixDB Similarity Queries for more details on similarity matching An example comparison expression which yields the boolean value true is shown below Example 5 3 Arithmetic Expressions AddExpr MultExpr MultExpr MultExpr UnaryExpr idiv UnaryExpr UnaryExpr ValueExpr AQL also supports the usual cast of characters for arithmetic expressions The example below evaluates to 25 Example 3 2 4 2 FLWOR Expression FLWOR ForClause LetClause Clause return Expression Clause ForClause LetClause WhereClause OrderbyClause GroupClause LimitClause DistinctClause ForClause for Variable at Variable in Expression LetClause let Variable Expression WhereClause where Expression OrderbyClause order by Expression asc desc Expression asc desc GroupClause group by Variable Expression Variable Expression with VariableRef VariableRef LimitClause limit Expression offset Expression DistinctClause distinct by Expression Expression Variable VARIABLE The heart of AQL is the FLWOR for let where orderby return expression The roots of this expression were borrowed from the expression of the same name in XQuery A FLWOR expression starts with one or more clauses that establish variable bindings A for clause binds a variable incrementally to each element of its associated expression it includes an optional positional variable for counting numbering the bindings By default no ordering is implied or assumed by a for clause A let clause binds a variable to the collection of elements computed by its associated expression Following the initial for or let clause s a FLWOR expression may contain an arbitrary sequence of other clauses The where clause in a FLWOR expression filters the preceding bindings via a boolean expression much like a where clause does in a SQL query The order by clause in a FLWOR expression induces an ordering on the data The group by clause discussed further below forms groups based on its group by expressions optionally naming the expressions values which together form the grouping key for the expression The with subclause of a group by clause specifies the variable s whose values should be grouped based on the grouping key s following the grouping clause only the grouping key s and the variables named in the with subclause remain in scope and the named grouping variables now contain lists formed from their input values The limit clause caps the number of values returned optionally starting its result count from a specified offset Web applications can use this feature for doing pagination The distinct clause is similar to the group by clause but it forms no groups it serves only to eliminate duplicate values As indicated by the grammar the clauses in an AQL query can appear in any order To interpret a query one can think of data as flowing down through the query from the first clause to the return clause The following example shows a FLWOR expression that selects and returns one user from the dataset FacebookUsers Example for user in dataset FacebookUsers where user id 8 return user The next example shows a FLWOR expression that joins two datasets FacebookUsers and FacebookMessages returning user message pairs The results contain one record per pair with result records containing the user s name and an entire message Example for user in dataset FacebookUsers for message in dataset FacebookMessages where message author id user id return uname user name message message message In the next example a let clause is used to bind a variable to all of a user s FacebookMessages The query returns one record per user with result records containing the user s name and the set of all messages by that user Example for user in dataset FacebookUsers let messages for message in dataset FacebookMessages where message author id user id return message message return uname user name messages messages The following example returns all TwitterUsers ordered by their followers count most followers first and language When ordering null is treated as being smaller than any other value if nulls are encountered in the ordering key s Example for user in dataset TwitterUsers order by user followers count desc user lang asc return user The next example illustrates the use of the group by clause in AQL After the group by clause in the query only variables that are either in the group by list or in the with list are in scope The variables in the clause s with list will each contain a collection of items following the group by clause the collected items are the values that the source variable was bound to in the tuples that formed the group For grouping null is handled as a single value Example for x in dataset FacebookMessages let messages x message group by loc x sender location with messages return location loc message messages The use of the limit clause is illustrated in the next example Example for user in dataset TwitterUsers order by user followers count desc limit 2 return user The final example shows how AQL s distinct by clause works Each variable in scope before the distinct clause is also in scope after the distinct by clause This clause works similarly to group by but for each variable that contains more than one value after the distinct by clause one value is picked nondeterministically If the variable is in the distinct by list then its value will be deterministic Nulls are treated as a single value when they occur in a grouping field Example for x in dataset FacebookMessages distinct by x sender location return location x sender location message x message Conditional Expression IfThenElse if Expression then Expression else Expression A conditional expression is useful for choosing between two alternative values based on a boolean condition If its first if expression is true its second then expression s value is returned and otherwise its third else expression is returned The following example illustrates the form of a conditional expression Example if 2 3 then yes else no Quantified Expressions QuantifiedExpression some every Variable in Expression Variable in Expression satisfies Expression Quantified expressions are used for expressing existential or universal predicates involving the elements of a collection The following pair of examples illustrate the use of a quantified expression to test that every or some element in the set 1 2 3 of integers is less than three The first example yields false and second example yields true It is useful to note that if the set were instead the empty set the first expression would yield true every value in an empty set satisfies the condition while the second expression would yield false since there isn t some value as there are no values in the set that satisfies the condition Examples every x in 1 2 3 satisfies x 3 some x in 1 2 3 satisfies x 3 3 Statements Back to TOC Statement SingleStatement EOF SingleStatement DataverseDeclaration FunctionDeclaration CreateStatement DropStatement LoadStatement SetStatement InsertStatement DeleteStatement Query In addition to expresssions for queries AQL supports a variety of statements for data definition and manipulation purposes as well as controlling the context to be used in evaluating AQL expressions AQL supports record level ACID transactions that begin and terminate implicitly for each record inserted deleted or searched while a given AQL statement is being executed This section details the statements supported in the AQL language Declarations DataverseDeclaration use dataverse Identifier The world of data in an AsterixDB cluster is organized into data namespaces called dataverses To set the default dataverse for a series of statements the use dataverse statement is provided As an example the following statement sets the default dataverse to be TinySocial Example use dataverse TinySocial The set statement in AQL is used to control aspects of the expression evalation context for queries SetStatement set Identifier StringLiteral As an example the following set statements request that Jaccard similarity with a similarity threshold 6 be used for set similarity matching when the operator is used in a query expression Example set simfunction jaccard set simthreshold 6f When writing a complex AQL query it can sometimes be helpful to define one or more auxilliary functions that each address a sub piece of the overall query The declare function statement supports the creation of such helper functions FunctionDeclaration declare function Identifier ParameterList Expression ParameterList VARIABLE VARIABLE The following is a very simple example of a temporary AQL function definition Example declare function add a b a b Lifecycle Management Statements CreateStatement create DataverseSpecification TypeSpecification DatasetSpecification IndexSpecification FunctionSpecification QualifiedName Identifier Identifier DoubleQualifiedName Identifier Identifier Identifier The create statement in AQL is used for creating persistent artifacts in the context of dataverses It can be used to create new dataverses datatypes datasets indexes and user defined AQL functions Dataverses DataverseSpecification dataverse Identifier IfNotExists with format StringLiteral The create dataverse statement is used to create new dataverses To ease the authoring of reusable AQL scripts its optional IfNotExists clause allows creation to be requested either unconditionally or only if the the dataverse does not already exist If this clause is absent an error will be returned if the specified dataverse already exists The with format clause is a placeholder for future functionality that can safely be ignored The following example creates a dataverse named TinySocial Example create dataverse TinySocial Types TypeSpecification type FunctionOrTypeName IfNotExists as TypeExpr FunctionOrTypeName QualifiedName IfNotExists if not exists TypeExpr RecordTypeDef TypeReference OrderedListTypeDef UnorderedListTypeDef RecordTypeDef closed open RecordField RecordField RecordField Identifier TypeExpr TypeReference Identifier OrderedListTypeDef TypeExpr UnorderedListTypeDef TypeExpr The create type statement is used to create a new named ADM datatype This type can then be used to create datasets or utilized when defining one or more other ADM datatypes Much more information about the Asterix Data Model ADM is available in the data model reference guide to ADM A new type can be a record type a renaming of another type an ordered list type or an unordered list type A record type can be defined as being either open or closed Instances of a closed record type are not permitted to contain fields other than those specified in the create type statement Instances of an open record type may carry additional fields and open is the default for a new type if neither option is specified The following example creates a new ADM record type called FacebookUser type Since it is closed its instances will contain only what is specified in the type definition The first four fields are traditional typed name value pairs The friend ids field is an unordered list of 32 bit integers The employment field is an ordered list of instances of another named record type EmploymentType Example create type FacebookUserType as closed id int32 alias string name string user since datetime friend ids int32 employment EmploymentType Datasets DatasetSpecification internal dataset QualifiedName Identifier IfNotExists PrimaryKey on Identifier hints Properties external dataset QualifiedName Identifier IfNotExists using AdapterName Configuration hints Properties AdapterName Identifier Configuration KeyValuePair KeyValuePair KeyValuePair StringLiteral StringLiteral Properties Property Property Property Identifier StringLiteral IntegerLiteral FunctionSignature FunctionOrTypeName IntegerLiteral PrimaryKey primary key Identifier Identifier The create dataset statement is used to create a new dataset Datasets are named unordered collections of ADM record instances they are where data lives persistently and are the targets for queries in AsterixDB Datasets are typed and AsterixDB will ensure that their contents conform to their type definitions An Internal dataset the default is a dataset that is stored in and managed by AsterixDB It must have a specified unique primary key that can be used to partition data across nodes of an AsterixDB cluster The primary key is also used in secondary indexes to uniquely identify the indexed primary data records An External dataset is stored outside of AsterixDB currently datasets in HDFS or on the local filesystem s of the cluster s nodes are supported External dataset support allows AQL queries to treat external data as though it were stored in AsterixDB making it possible to query legacy file data e g Hive data without having to physically import it into AsterixDB For an external dataset an appropriate adaptor must be selected to handle the nature of the desired external data See the guide to external data for more information on the available adaptors The following example creates an internal dataset for storing FacefookUserType records It specifies that their id field is their primary key Example create internal dataset FacebookUsers FacebookUserType primary key id The next example creates an external dataset for storing LineitemType records The choice of the hdfs adaptor means that its data will reside in HDFS The create statement provides parameters used by the hdfs adaptor the URL and path needed to locate the data in HDFS and a description of the data format Example create external dataset Lineitem LineitemType using hdfs hdfs hdfs HOST PORT path HDFS PATH input format text input format format delimited text delimiter Indices IndexSpecification index Identifier IfNotExists on QualifiedName Identifier Identifier type IndexType IndexType btree rtree keyword ngram IntegerLiteral The create index statement creates a secondary index on one or more fields of a specified dataset Supported index types include btree for totally ordered datatypes rtree for spatial data and keyword and ngram for textual string data AsterixDB currently requires indexed fields to be part of the named type associated with a dataset Future plans include support for indexing of open fields as well The following example creates a btree index called fbAuthorIdx on the author id field of the FacebookMessages dataset This index can be useful for accelerating exact match queries range search queries and joins involving the author id field Example create index fbAuthorIdx on FacebookMessages author id type btree The following example creates an rtree index called fbSenderLocIdx on the sender location field of the FacebookMessages dataset This index can be useful for accelerating queries that use the spatial intersect function in a predicate involving the sender location field Example create index fbSenderLocIndex on FacebookMessages sender location type rtree The following example creates a 3 gram index called fbUserIdx on the name field of the FacebookUsers dataset This index can be used to accelerate some similarity or substring maching queries on the name field For details refer to the document on similarity queries Example create index fbUserIdx on FacebookUsers name type ngram 3 The following example creates a keyword index called fbMessageIdx on the message field of the FacebookMessages dataset This keyword index can be used to optimize queries with token based similarity predicates on the message field For details refer to the document on similarity queries Example create index fbMessageIdx on FacebookMessages message type keyword Functions The create function statement creates a named function that can then be used and reused in AQL queries The body of a function can be any AQL expression involving the function s parameters FunctionSpecification function FunctionOrTypeName IfNotExists ParameterList Expression The following is a very simple example of a create function statement It differs from the declare function example shown previously in that it results in a function that is persistently registered by name in the specified dataverse Example create function add a b a b Removal DropStatement drop dataverse Identifier IfExists type FunctionOrTypeName IfExists dataset QualifiedName IfExists index DoubleQualifiedName IfExists function FunctionSignature IfExists IfExists if exists The drop statement in AQL is the inverse of the create statement It can be used to drop dataverses datatypes datasets indexes and functions The following examples illustrate uses of the drop statement Example drop dataset FacebookUsers if exists drop index fbSenderLocIndex drop type FacebookUserType drop dataverse TinySocial drop function add Import Export Statements LoadStatement load dataset QualifiedName using AdapterName Configuration pre sorted The load statement is used to initially populate a dataset via bulk loading of data from an external file An appropriate adaptor must be selected to handle the nature of the desired external data The load statement accepts the same adaptors and the same parameters as external datasets See the guide to external data for more information on the available adaptors The following example shows how to bulk load the FacebookUsers dataset from an external file containing data that has been prepared in ADM format Example load dataset FacebookUsers using localfs path localhost Users zuck AsterixDB load fbu adm format adm Modification Statements Insert InsertStatement insert into dataset QualifiedName Query The AQL insert statement is used to insert data into a dataset The data to be inserted comes from an AQL query expression The expression can be as simple as a constant expression or in general it can be any legal AQL query Inserts in AsterixDB are processed transactionally with the scope of each insert transaction being the insertion of a single object plus its affiliated secondary index entries if any If the query part of an insert returns a single object then the insert statement itself will be a single atomic transaction If the query part returns multiple objects then each object inserted will be handled independently as a tranaction The following example illustrates a query based insertion Example insert into dataset UsersCopy for user in dataset FacebookUsers return user Delete DeleteStatement delete Variable from dataset QualifiedName where Expression The AQL delete statement is used to delete data from a target dataset The data to be deleted is identified by a boolean expression involving the variable bound to the target dataset in the delete statement Deletes in AsterixDB are processed transactionally with the scope of each delete transaction being the deletion of a single object plus its affiliated secondary index entries if any If the boolean expression for a delete identifies a single object then the delete statement itself will be a single atomic transaction If the expression identifies multiple objects then each object deleted will be handled independently as a transaction The following example illustrates a single object deletion Example delete user from dataset FacebookUsers where user id 8 We close this guide to AQL with one final example of a query expression Example for praise in great brilliant awesome return string concat AsterixDB is praise Copyright 2 14 All Rights Reserved ", "_id": "http://asterixdb.ics.uci.edu/documentation/aql/manual.html", "title": "asterixdb - ", "html": "<!DOCTYPE html>\n<!--\n | Generated by Apache Maven Doxia at 2014-07-14\n | Rendered using Apache Maven Fluido Skin 1.3.0\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"Date-Revision-yyyymmdd\" content=\"20140714\" />\n    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>AsterixDB - </title>\n    <link rel=\"stylesheet\" href=\"../css/apache-maven-fluido-1.3.0.min.css\" />\n    <link rel=\"stylesheet\" href=\"../css/site.css\" />\n    <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\" />\n\n      \n    <script type=\"text/javascript\" src=\"../js/apache-maven-fluido-1.3.0.min.js\"></script>\n\n                          \n        \n<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-41536543-1', 'uci.edu');\n        ga('send', 'pageview');</script>\n          \n            </head>\n        <body class=\"topBarDisabled\">\n          \n                \n                    \n    \n        <div class=\"container-fluid\">\n          <div id=\"banner\">\n        <div class=\"pull-left\">\n                                    <a href=\"http://asterixdb.ics.uci.edu/\" id=\"bannerLeft\">\n                                                                                                <img src=\"../images/asterixlogo.png\"  alt=\"AsterixDB\"/>\n                </a>\n                      </div>\n        <div class=\"pull-right\">  </div>\n        <div class=\"clear\"><hr/></div>\n      </div>\n\n      <div id=\"breadcrumbs\">\n        <ul class=\"breadcrumb\">\n                \n                    \n                  <li id=\"publishDate\">Last Published: 2014-07-14</li>\n                      \n                \n                    \n                 <li id=\"projectVersion\" class=\"pull-right\">Version: 0.8.6</li>\n      \n                                            <li class=\"divider pull-right\">|</li>\n                        \n    <li class=\"pull-right\">              <a href=\"../index.html\" title=\"Documentation Home\">\n        Documentation Home</a>\n  </li>\n\n                        </ul>\n      </div>\n\n            \n      <div class=\"row-fluid\">\n        <div id=\"leftColumn\" class=\"span3\">\n          <div class=\"well sidebar-nav\">\n                \n                    \n                <ul class=\"nav nav-list\">\n                    <li class=\"nav-header\">Documentation</li>\n                                \n      <li>\n    \n                          <a href=\"../install.html\" title=\"Installing and Managing AsterixDB using Managix\">\n          <i class=\"none\"></i>\n        Installing and Managing AsterixDB using Managix</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/primer.html\" title=\"AsterixDB 101: An ADM and AQL Primer\">\n          <i class=\"none\"></i>\n        AsterixDB 101: An ADM and AQL Primer</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/js-sdk.html\" title=\"AsterixDB Javascript SDK\">\n          <i class=\"none\"></i>\n        AsterixDB Javascript SDK</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/datamodel.html\" title=\"Asterix Data Model (ADM)\">\n          <i class=\"none\"></i>\n        Asterix Data Model (ADM)</a>\n            </li>\n                  \n      <li class=\"active\">\n    \n            <a href=\"#\"><i class=\"none\"></i>Asterix Query Language (AQL)</a>\n          </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/functions.html\" title=\"AQL Functions\">\n          <i class=\"none\"></i>\n        AQL Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/allens.html\" title=\"AQL Allen's Relations Functions\">\n          <i class=\"none\"></i>\n        AQL Allen's Relations Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/similarity.html\" title=\"AQL Support of Similarity Queries\">\n          <i class=\"none\"></i>\n        AQL Support of Similarity Queries</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/externaldata.html\" title=\"Accessing External Data\">\n          <i class=\"none\"></i>\n        Accessing External Data</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../api.html\" title=\"REST API to AsterixDB\">\n          <i class=\"none\"></i>\n        REST API to AsterixDB</a>\n            </li>\n            </ul>\n                \n                    \n                \n          <hr class=\"divider\" />\n\n           <div id=\"poweredBy\">\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                                                                                                                         <a href=\"https://code.google.com/p/hyracks/\" title=\"Hyracks\" class=\"builtBy\">\n        <img class=\"builtBy\"  alt=\"Hyracks\" src=\"../images/hyrax_ts.png\"    />\n      </a>\n                      </div>\n          </div>\n        </div>\n        \n                \n        <div id=\"bodyColumn\"  class=\"span9\" >\n                                  \n            <h1>The Asterix Query Language, Version 1.0</h1>\n<div class=\"section\">\n<h2><a name=\"toc\" id=\"toc\">Table of Contents</a><a name=\"Table_of_Contents\"></a></h2>\n\n<ul>\n  \n<li><a href=\"#Introduction\">1. Introduction</a></li>\n  \n<li><a href=\"#Expressions\">2. Expressions</a></li>\n  \n<li><a href=\"#Statements\">3. Statements</a></li>\n</ul></div>\n<div class=\"section\">\n<h2><a name=\"Introduction\" id=\"Introduction\">1. Introduction</a><font size=\"4\"> <a href=\"#toc\">[Back to TOC]</a></font><a name=\"a1._Introduction_Back_to_TOC\"></a></h2>\n<p>This document is intended as a reference guide to the full syntax and semantics of the Asterix Query Language (AQL), the language for talking to AsterixDB. This guide covers both the data manipulation language (DML) aspects of AQL, including its support for queries and data modification, as well as its data definition language (DDL) aspects.  New AsterixDB users are encouraged to read and work through the (friendlier) guide &#x201c;AsterixDB 101: An ADM and AQL Primer&#x201d; before attempting to make use of this document. In addition, readers are advised to read and understand the Asterix Data Model (ADM) reference guide since a basic understanding of ADM concepts is a prerequisite to understanding AQL.<br />In what follows, we detail the features of the AQL language in a grammar-guided manner: We list and briefly explain each of the productions in the AQL grammar, offering examples for clarity in cases where doing so seems needed or helpful.</p></div>\n<div class=\"section\">\n<h2><a name=\"Expressions\" id=\"Expressions\">2. Expressions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"a2._Expressions_Back_to_TOC\"></a></h2>\n\n<div class=\"source\">\n<pre>Query ::= Expression\n</pre></div>\n<p>An AQL query can be any legal AQL expression.</p>\n\n<div class=\"source\">\n<pre>Expression ::= ( OperatorExpr | IfThenElse | FLWOR | QuantifiedExpression )\n</pre></div>\n<p>AQL is a fully composable expression language. Each AQL expression returns zero or more Asterix Data Model (ADM) instances. There are four major kinds of expressions in AQL. At the topmost level, an AQL expression can be an OperatorExpr (similar to a mathematical expression), an IfThenElse (to choose between two alternative values), a FLWOR expression (the heart of AQL, pronounced &#x201c;flower expression&#x201d;), or a QuantifiedExpression (which yields a boolean value). Each will be detailed as we explore the full AQL grammar.</p>\n<div class=\"section\">\n<h3>Primary Expressions<a name=\"Primary_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>PrimaryExpr ::= Literal\n              | VariableRef\n              | ParenthesizedExpression\n              | FunctionCallExpr\n              | DatasetAccessExpression\n              | ListConstructor\n              | RecordConstructor\n</pre></div>\n<p>The most basic building block for any AQL expression is the PrimaryExpr. This can be a simple literal (constant) value, a reference to a query variable that is in scope, a parenthesized expression, a function call, an expression accessing the ADM contents of a dataset, a newly constructed list of ADM instances, or a newly constructed ADM record.</p>\n<div class=\"section\">\n<h4>Literals<a name=\"Literals\"></a></h4>\n\n<div class=\"source\">\n<pre>Literal        ::= StringLiteral\n                 | IntegerLiteral\n                 | FloatLiteral\n                 | DoubleLiteral\n                 | &quot;null&quot;\n                 | &quot;true&quot;\n                 | &quot;false&quot;\nStringLiteral  ::= (&quot;\\&quot;&quot; (&lt;ESCAPE_QUOT&gt; | ~[&quot;\\&quot;&quot;])* &quot;\\&quot;&quot;)\n                 | (&quot;\\'&quot; (&lt;ESCAPE_APOS&gt; | ~[&quot;\\'&quot;])* &quot;\\'&quot;)\n&lt;ESCAPE_QUOT&gt;  ::= &quot;\\\\\\&quot;&quot;\n&lt;ESCAPE_APOS&gt;  ::= &quot;\\\\\\'&quot;\nIntegerLiteral ::= &lt;DIGITS&gt;\n&lt;DIGITS&gt;       ::= [&quot;0&quot; - &quot;9&quot;]+\nFloatLiteral   ::= &lt;DIGITS&gt; ( &quot;f&quot; | &quot;F&quot; )\n                 | &lt;DIGITS&gt; ( &quot;.&quot; &lt;DIGITS&gt; ( &quot;f&quot; | &quot;F&quot; ) )?\n                 | &quot;.&quot; &lt;DIGITS&gt; ( &quot;f&quot; | &quot;F&quot; )\nDoubleLiteral  ::= &lt;DIGITS&gt;\n                 | &lt;DIGITS&gt; ( &quot;.&quot; &lt;DIGITS&gt; )?\n                 | &quot;.&quot; &lt;DIGITS&gt;                      \n</pre></div>\n<p>Literals (constants) in AQL can be strings, integers, floating point values, double values, boolean constants, or the constant value null. The null value in AQL has &#x201c;unknown&#x201d; or &#x201c;missing&#x201d; value semantics, similar to (though not identical to) nulls in the relational query language SQL.</p>\n<p>The following are some simple examples of AQL literals. Since AQL is an expression language, each example is also a complete, legal AQL query (!).</p>\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>&quot;a string&quot;\n42\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Variable References<a name=\"Variable_References\"></a></h4>\n\n<div class=\"source\">\n<pre>VariableRef ::= &lt;VARIABLE&gt;\n&lt;VARIABLE&gt;  ::= &quot;$&quot; &lt;LETTER&gt; (&lt;LETTER&gt; | &lt;DIGIT&gt; | &quot;_&quot;)*\n&lt;LETTER&gt;    ::= [&quot;A&quot; - &quot;Z&quot;, &quot;a&quot; - &quot;z&quot;]\n</pre></div>\n<p>A variable in AQL can be bound to any legal ADM value. A variable reference refers to the value to which an in-scope variable is bound. (E.g., a variable binding may originate from one of the for or let clauses of a FLWOR expression or from an input parameter in the context of an AQL function body.)</p>\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>$tweet\n$id\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Parenthesized Expressions<a name=\"Parenthesized_Expressions\"></a></h4>\n\n<div class=\"source\">\n<pre>ParenthesizedExpression ::= &quot;(&quot; Expression &quot;)&quot;\n</pre></div>\n<p>As in most languages, an expression may be parenthesized.</p>\n<p>Since AQL is an expression language, the following example expression is actually also a complete, legal AQL query whose result is the value 2. (As such, you can have Big Fun explaining to your boss how AsterixDB and AQL can turn your 1000-node shared-nothing Big Data cluster into a $5M calculator in its spare time.)</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>( 1 + 1 )\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Function Calls<a name=\"Function_Calls\"></a></h4>\n\n<div class=\"source\">\n<pre>FunctionCallExpr ::= FunctionOrTypeName &quot;(&quot; ( Expression ( &quot;,&quot; Expression )* )? &quot;)&quot;\n</pre></div>\n<p>Functions are included in AQL, like most languages, as a way to package useful functionality or to componentize complicated or reusable AQL computations. A function call is a legal AQL query expression that represents the ADM value resulting from the evaluation of its body expression with the given parameter bindings; the parameter value bindings can themselves be any AQL expressions.</p>\n<p>The following example is a (built-in) function call expression whose value is 8.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>string-length(&quot;a string&quot;)\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Dataset Access<a name=\"Dataset_Access\"></a></h4>\n\n<div class=\"source\">\n<pre>DatasetAccessExpression ::= &quot;dataset&quot; ( ( Identifier ( &quot;.&quot; Identifier )? )\n                          | ( &quot;(&quot; Expression &quot;)&quot; ) )\nIdentifier              ::= &lt;IDENTIFIER&gt; | StringLiteral\n&lt;IDENTIFIER&gt;            ::= &lt;LETTER&gt; (&lt;LETTER&gt; | &lt;DIGIT&gt; | &lt;SPECIALCHARS&gt;)*\n&lt;SPECIALCHARS&gt;          ::= [&quot;$&quot;, &quot;_&quot;, &quot;-&quot;]\n</pre></div>\n<p>Querying Big Data is the main point of AsterixDB and AQL. Data in AsterixDB reside in datasets (collections of ADM records), each of which in turn resides in some namespace known as a dataverse (data universe). Data access in a query expression is accomplished via a DatasetAccessExpression. Dataset access expressions are most commonly used in FLWOR expressions, where variables are bound to their contents.</p>\n<p>Note that the Identifier that identifies a dataset (or any other Identifier in AQL) can also be a StringLiteral. This is especially useful to avoid conficts with AQL keywords (e.g. &#x201c;dataset&#x201d;, &#x201c;null&#x201d;, or &#x201c;type&#x201d;).</p>\n<p>The following are three examples of legal dataset access expressions. The first one accesses a dataset called Customers in the dataverse called SalesDV. The second one accesses the Customers dataverse in whatever the current dataverse is. The third one does the same thing as the second but uses a slightly older AQL syntax.</p>\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>dataset SalesDV.Customers\ndataset Customers\ndataset(&quot;Customers&quot;)\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Constructors<a name=\"Constructors\"></a></h4>\n\n<div class=\"source\">\n<pre>ListConstructor          ::= ( OrderedListConstructor | UnorderedListConstructor )\nOrderedListConstructor   ::= &quot;[&quot; ( Expression ( &quot;,&quot; Expression )* )? &quot;]&quot;\nUnorderedListConstructor ::= &quot;{{&quot; ( Expression ( &quot;,&quot; Expression )* )? &quot;}}&quot;\nRecordConstructor        ::= &quot;{&quot; ( FieldBinding ( &quot;,&quot; FieldBinding )* )? &quot;}&quot;\nFieldBinding             ::= Expression &quot;:&quot; Expression\n</pre></div>\n<p>A major feature of AQL is its ability to construct new ADM data instances. This is accomplished using its constructors for each of the major ADM complex object structures, namely lists (ordered or unordered) and records. Ordered lists are like JSON arrays, while unordered lists have bag (multiset) semantics. Records are built from attributes that are field-name/field-value pairs, again like JSON. (See the AsterixDB Data Model document for more details on each.)</p>\n<p>The following examples illustrate how to construct a new ordered list with 3 items, a new unordered list with 4 items, and a new record with 2 fields, respectively. List elements can be homogeneous (as in the first example), which is the common case, or they may be heterogeneous (as in the second example). The data values and field name values used to construct lists and records in constructors are all simply AQL expressions. Thus the list elements, field names, and field values used in constructors can be simple literals (as in these three examples) or they can come from query variable references or even arbitrarily complex AQL expressions.</p>\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n\n{{ 42, &quot;forty-two&quot;, &quot;AsterixDB!&quot;, 3.14f }}\n\n{\n  &quot;project name&quot;: &quot;AsterixDB&quot;\n  &quot;project members&quot;: {{ &quot;vinayakb&quot;, &quot;dtabass&quot;, &quot;chenli&quot; }}\n}\n</pre></div></div>\n<div class=\"section\">\n<h5>Note<a name=\"Note\"></a></h5>\n<p>When constructing nested records there needs to be a space between the closing braces to avoid confusion with the <tt>}}</tt> token that ends an unordered list constructor: <tt>{ &quot;a&quot; : { &quot;b&quot; : &quot;c&quot; }}</tt> will fail to parse while <tt>{ &quot;a&quot; : { &quot;b&quot; : &quot;c&quot; } }</tt> will work.</p></div></div></div>\n<div class=\"section\">\n<h3>Path Expressions<a name=\"Path_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>ValueExpr ::= PrimaryExpr ( Field | Index )*\nField     ::= &quot;.&quot; Identifier\nIndex     ::= &quot;[&quot; ( Expression | &quot;?&quot; ) &quot;]&quot;\n</pre></div>\n<p>Components of complex types in ADM are accessed via path expressions. Path access can be applied to the result of an AQL expression that yields an instance of such a type, e.g., a record or list instance. For records, path access is based on field names. For ordered lists, path access is based on (zero-based) array-style indexing. AQL also supports an &#x201c;I&#x2019;m feeling lucky&#x201d; style index accessor, [?], for selecting an arbitrary element from an ordered list. Attempts to access non-existent fields or list elements produce a null (i.e., missing information) result as opposed to signaling a runtime error.</p>\n<p>The following examples illustrate field access for a record, index-based element access for an ordered list, and also a composition thereof.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>({&quot;list&quot;: [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}).list\n\n([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])[2]\n\n({ &quot;list&quot;: [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}).list[2]\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Logical Expressions<a name=\"Logical_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>OperatorExpr ::= AndExpr ( &quot;or&quot; AndExpr )*\nAndExpr      ::= RelExpr ( &quot;and&quot; RelExpr )*\n</pre></div>\n<p>As in most languages, boolean expressions can be built up from smaller expressions by combining them with the logical connectives and/or. Legal boolean values in AQL are true, false, and null. (Nulls in AQL are treated much like SQL treats its unknown truth value in boolean expressions.)</p>\n<p>The following is an example of a conjuctive range predicate in AQL. It will yield true if $a is bound to 4, null if $a is bound to null, and false otherwise.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>$a &gt; 3 and $a &lt; 5\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Comparison Expressions<a name=\"Comparison_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>RelExpr ::= AddExpr ( ( &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;&lt;=&quot; | &quot;&gt;=&quot; | &quot;=&quot; | &quot;!=&quot; | &quot;~=&quot; ) AddExpr )?\n</pre></div>\n<p>AQL has the usual list of suspects, plus one, for comparing pairs of atomic values. The &#x201c;plus one&#x201d; is the last operator listed above, which is the &#x201c;roughly equal&#x201d; operator provided for similarity queries. (See the separate document on <a href=\"similarity.html\">AsterixDB Similarity Queries</a> for more details on similarity matching.)</p>\n<p>An example comparison expression (which yields the boolean value true) is shown below.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>5 &gt; 3\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Arithmetic Expressions<a name=\"Arithmetic_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>AddExpr  ::= MultExpr ( ( &quot;+&quot; | &quot;-&quot; ) MultExpr )*\nMultExpr ::= UnaryExpr ( ( &quot;*&quot; | &quot;/&quot; | &quot;%&quot; | &quot;^&quot;| &quot;idiv&quot; ) UnaryExpr )*\nUnaryExpr ::= ( ( &quot;+&quot; | &quot;-&quot; ) )? ValueExpr\n</pre></div>\n<p>AQL also supports the usual cast of characters for arithmetic expressions. The example below evaluates to 25.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>3 ^ 2 + 4 ^ 2\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>FLWOR Expression<a name=\"FLWOR_Expression\"></a></h3>\n\n<div class=\"source\">\n<pre>FLWOR         ::= ( ForClause | LetClause ) ( Clause )* &quot;return&quot; Expression\nClause         ::= ForClause | LetClause | WhereClause | OrderbyClause\n                 | GroupClause | LimitClause | DistinctClause\nForClause      ::= &quot;for&quot; Variable ( &quot;at&quot; Variable )? &quot;in&quot; ( Expression )\nLetClause      ::= &quot;let&quot; Variable &quot;:=&quot; Expression\nWhereClause    ::= &quot;where&quot; Expression\nOrderbyClause  ::= &quot;order&quot; &quot;by&quot; Expression ( ( &quot;asc&quot; ) | ( &quot;desc&quot; ) )? \n                   ( &quot;,&quot; Expression ( ( &quot;asc&quot; ) | ( &quot;desc&quot; ) )? )*\nGroupClause    ::= &quot;group&quot; &quot;by&quot; ( Variable &quot;:=&quot; )? Expression ( &quot;,&quot; ( Variable &quot;:=&quot; )? Expression )*\n                   &quot;with&quot; VariableRef ( &quot;,&quot; VariableRef )*\nLimitClause    ::= &quot;limit&quot; Expression ( &quot;offset&quot; Expression )?\nDistinctClause ::= &quot;distinct&quot; &quot;by&quot; Expression ( &quot;,&quot; Expression )*\nVariable       ::= &lt;VARIABLE&gt;\n</pre></div>\n<p>The heart of AQL is the FLWOR (for-let-where-orderby-return) expression. The roots of this expression were borrowed from the expression of the same name in XQuery. A FLWOR expression starts with one or more clauses that establish variable bindings. A <tt>for</tt> clause binds a variable incrementally to each element of its associated expression; it includes an optional positional variable for counting/numbering the bindings. By default no ordering is implied or assumed by a <tt>for</tt> clause. A <tt>let</tt> clause binds a variable to the collection of elements computed by its associated expression.</p>\n<p>Following the initial <tt>for</tt> or <tt>let</tt> clause(s), a FLWOR expression may contain an arbitrary sequence of other clauses. The <tt>where</tt> clause in a FLWOR expression filters the preceding bindings via a boolean expression, much like a <tt>where</tt> clause does in a SQL query. The <tt>order by</tt> clause in a FLWOR expression induces an ordering on the data. The <tt>group by</tt> clause, discussed further below, forms groups based on its group by expressions, optionally naming the expressions&#x2019; values (which together form the grouping key for the expression). The <tt>with</tt> subclause of a <tt>group by</tt> clause specifies the variable(s) whose values should be grouped based on the grouping key(s); following the grouping clause, only the grouping key(s) and the variables named in the with subclause remain in scope, and the named grouping variables now contain lists formed from their input values. The <tt>limit</tt> clause caps the number of values returned, optionally starting its result count from a specified offset. (Web applications can use this feature for doing pagination.) The <tt>distinct</tt> clause is similar to the <tt>group-by</tt> clause, but it forms no groups; it serves only to eliminate duplicate values. As indicated by the grammar, the clauses in an AQL query can appear in any order. To interpret a query, one can think of data as flowing down through the query from the first clause to the <tt>return</tt> clause.</p>\n<p>The following example shows a FLWOR expression that selects and returns one user from the dataset FacebookUsers.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>for $user in dataset FacebookUsers\nwhere $user.id = 8\nreturn $user\n</pre></div>\n<p>The next example shows a FLWOR expression that joins two datasets, FacebookUsers and FacebookMessages, returning user/message pairs. The results contain one record per pair, with result records containing the user&#x2019;s name and an entire message.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>for $user in dataset FacebookUsers\nfor $message in dataset FacebookMessages\nwhere $message.author-id = $user.id\nreturn\n  {\n    &quot;uname&quot;: $user.name,\n    &quot;message&quot;: $message.message\n  };\n</pre></div>\n<p>In the next example, a <tt>let</tt> clause is used to bind a variable to all of a user&#x2019;s FacebookMessages. The query returns one record per user, with result records containing the user&#x2019;s name and the set of all messages by that user.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>for $user in dataset FacebookUsers\nlet $messages := \n  for $message in dataset FacebookMessages\n  where $message.author-id = $user.id\n  return $message.message\nreturn\n  {\n    &quot;uname&quot;: $user.name,\n    &quot;messages&quot;: $messages\n  };\n</pre></div>\n<p>The following example returns all TwitterUsers ordered by their followers count (most followers first) and language. When ordering <tt>null</tt> is treated as being smaller than any other value if <tt>null</tt>s are encountered in the ordering key(s).</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>  for $user in dataset TwitterUsers\n  order by $user.followers_count desc, $user.lang asc\n  return $user\n</pre></div>\n<p>The next example illustrates the use of the <tt>group by</tt> clause in AQL. After the <tt>group by</tt> clause in the query, only variables that are either in the <tt>group by</tt> list or in the <tt>with</tt> list are in scope. The variables in the clause&#x2019;s <tt>with</tt> list will each contain a collection of items following the <tt>group by</tt> clause; the collected items are the values that the source variable was bound to in the tuples that formed the group. For grouping <tt>null</tt> is handled as a single value.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>  for $x in dataset FacebookMessages\n  let $messages := $x.message\n  group by $loc := $x.sender-location with $messages\n  return\n    {\n      &quot;location&quot; : $loc,\n      &quot;message&quot; : $messages\n    }\n</pre></div>\n<p>The use of the <tt>limit</tt> clause is illustrated in the next example.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>  for $user in dataset TwitterUsers\n  order by $user.followers_count desc\n  limit 2\n  return $user\n</pre></div>\n<p>The final example shows how AQL&#x2019;s <tt>distinct by</tt> clause works. Each variable in scope before the distinct clause is also in scope after the <tt>distinct by</tt> clause. This clause works similarly to <tt>group by</tt>, but for each variable that contains more than one value after the <tt>distinct by</tt> clause, one value is picked nondeterministically. (If the variable is in the <tt>distinct by</tt> list, then its value will be deterministic.) Nulls are treated as a single value when they occur in a grouping field.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>  for $x in dataset FacebookMessages\n  distinct by $x.sender-location\n  return\n    {\n      &quot;location&quot; : $x.sender-location,\n      &quot;message&quot; : $x.message\n    }\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Conditional Expression<a name=\"Conditional_Expression\"></a></h3>\n\n<div class=\"source\">\n<pre>IfThenElse ::= &quot;if&quot; &quot;(&quot; Expression &quot;)&quot; &quot;then&quot; Expression &quot;else&quot; Expression\n</pre></div>\n<p>A conditional expression is useful for choosing between two alternative values based on a boolean condition. If its first (<tt>if</tt>) expression is true, its second (<tt>then</tt>) expression&#x2019;s value is returned, and otherwise its third (<tt>else</tt>) expression is returned.</p>\n<p>The following example illustrates the form of a conditional expression.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>if (2 &lt; 3) then &quot;yes&quot; else &quot;no&quot;\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Quantified Expressions<a name=\"Quantified_Expressions\"></a></h3>\n\n<div class=\"source\">\n<pre>QuantifiedExpression ::= ( ( &quot;some&quot; ) | ( &quot;every&quot; ) ) Variable &quot;in&quot; Expression\n                         ( &quot;,&quot; Variable &quot;in&quot; Expression )* &quot;satisfies&quot; Expression\n</pre></div>\n<p>Quantified expressions are used for expressing existential or universal predicates involving the elements of a collection.</p>\n<p>The following pair of examples illustrate the use of a quantified expression to test that every (or some) element in the set [1, 2, 3] of integers is less than three. The first example yields <tt>false</tt> and second example yields <tt>true</tt>.</p>\n<p>It is useful to note that if the set were instead the empty set, the first expression would yield <tt>true</tt> (&#x201c;every&#x201d; value in an empty set satisfies the condition) while the second expression would yield <tt>false</tt> (since there isn&#x2019;t &#x201c;some&#x201d; value, as there are no values in the set, that satisfies the condition).</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Examples<a name=\"Examples\"></a></h5>\n\n<div class=\"source\">\n<pre>every $x in [ 1, 2, 3 ] satisfies $x &lt; 3\nsome $x in [ 1, 2, 3 ] satisfies $x &lt; 3\n</pre></div></div></div></div></div>\n<div class=\"section\">\n<h2><a name=\"Statements\" id=\"Statements\">3. Statements</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"a3._Statements_Back_to_TOC\"></a></h2>\n\n<div class=\"source\">\n<pre>Statement ::= ( SingleStatement ( &quot;;&quot; )? )* &lt;EOF&gt;\nSingleStatement ::= DataverseDeclaration\n                  | FunctionDeclaration\n                  | CreateStatement\n                  | DropStatement\n                  | LoadStatement\n                  | SetStatement\n                  | InsertStatement\n                  | DeleteStatement\n                  | Query                      \n</pre></div>\n<p>In addition to expresssions for queries, AQL supports a variety of statements for data definition and manipulation purposes as well as controlling the context to be used in evaluating AQL expressions. AQL supports record-level ACID transactions that begin and terminate implicitly for each record inserted, deleted, or searched while a given AQL statement is being executed.</p>\n<p>This section details the statements supported in the AQL language.</p>\n<div class=\"section\">\n<h3>Declarations<a name=\"Declarations\"></a></h3>\n\n<div class=\"source\">\n<pre>DataverseDeclaration ::= &quot;use&quot; &quot;dataverse&quot; Identifier\n</pre></div>\n<p>The world of data in an AsterixDB cluster is organized into data namespaces called dataverses. To set the default dataverse for a series of statements, the use dataverse statement is provided.</p>\n<p>As an example, the following statement sets the default dataverse to be TinySocial.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>use dataverse TinySocial;\n</pre></div>\n<p>The set statement in AQL is used to control aspects of the expression evalation context for queries.</p>\n\n<div class=\"source\">\n<pre>SetStatement ::= &quot;set&quot; Identifier StringLiteral\n</pre></div>\n<p>As an example, the following set statements request that Jaccard similarity with a similarity threshold 0.6 be used for set similarity matching when the ~= operator is used in a query expression.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>set simfunction &quot;jaccard&quot;;\nset simthreshold &quot;0.6f&quot;; \n</pre></div>\n<p>When writing a complex AQL query, it can sometimes be helpful to define one or more auxilliary functions that each address a sub-piece of the overall query. The declare function statement supports the creation of such helper functions.</p>\n\n<div class=\"source\">\n<pre>FunctionDeclaration  ::= &quot;declare&quot; &quot;function&quot; Identifier ParameterList &quot;{&quot; Expression &quot;}&quot;\nParameterList        ::= &quot;(&quot; ( &lt;VARIABLE&gt; ( &quot;,&quot; &lt;VARIABLE&gt; )* )? &quot;)&quot;\n</pre></div>\n<p>The following is a very simple example of a temporary AQL function definition.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>declare function add($a, $b) {\n  $a + $b\n};\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Lifecycle Management Statements<a name=\"Lifecycle_Management_Statements\"></a></h3>\n\n<div class=\"source\">\n<pre>CreateStatement ::= &quot;create&quot; ( DataverseSpecification\n                             | TypeSpecification\n                             | DatasetSpecification\n                             | IndexSpecification\n                             | FunctionSpecification )\n\nQualifiedName       ::= Identifier ( &quot;.&quot; Identifier )?\nDoubleQualifiedName ::= Identifier &quot;.&quot; Identifier ( &quot;.&quot; Identifier )?\n</pre></div>\n<p>The create statement in AQL is used for creating persistent artifacts in the context of dataverses. It can be used to create new dataverses, datatypes, datasets, indexes, and user-defined AQL functions.</p>\n<div class=\"section\">\n<h4>Dataverses<a name=\"Dataverses\"></a></h4>\n\n<div class=\"source\">\n<pre>DataverseSpecification ::= &quot;dataverse&quot; Identifier IfNotExists ( &quot;with format&quot; StringLiteral )?\n</pre></div>\n<p>The create dataverse statement is used to create new dataverses. To ease the authoring of reusable AQL scripts, its optional IfNotExists clause allows creation to be requested either unconditionally or only if the the dataverse does not already exist. If this clause is absent, an error will be returned if the specified dataverse already exists. The <tt>with format</tt> clause is a placeholder for future functionality that can safely be ignored.</p>\n<p>The following example creates a dataverse named TinySocial.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create dataverse TinySocial;\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Types<a name=\"Types\"></a></h4>\n\n<div class=\"source\">\n<pre>TypeSpecification    ::= &quot;type&quot; FunctionOrTypeName IfNotExists &quot;as&quot; TypeExpr\nFunctionOrTypeName   ::= QualifiedName\nIfNotExists          ::= ( &quot;if not exists&quot; )?\nTypeExpr             ::= RecordTypeDef | TypeReference | OrderedListTypeDef | UnorderedListTypeDef\nRecordTypeDef        ::= ( &quot;closed&quot; | &quot;open&quot; )? &quot;{&quot; ( RecordField ( &quot;,&quot; RecordField )* )? &quot;}&quot;\nRecordField          ::= Identifier &quot;:&quot; ( TypeExpr ) ( &quot;?&quot; )?\nTypeReference        ::= Identifier\nOrderedListTypeDef   ::= &quot;[&quot; ( TypeExpr ) &quot;]&quot;\nUnorderedListTypeDef ::= &quot;{{&quot; ( TypeExpr ) &quot;}}&quot;\n</pre></div>\n<p>The create type statement is used to create a new named ADM datatype. This type can then be used to create datasets or utilized when defining one or more other ADM datatypes. Much more information about the Asterix Data Model (ADM) is available in the <a href=\"datamodel.html\">data model reference guide</a> to ADM. A new type can be a record type, a renaming of another type, an ordered list type, or an unordered list type. A record type can be defined as being either open or closed. Instances of a closed record type are not permitted to contain fields other than those specified in the create type statement. Instances of an open record type may carry additional fields, and open is the default for a new type (if neither option is specified).</p>\n<p>The following example creates a new ADM record type called FacebookUser type. Since it is closed, its instances will contain only what is specified in the type definition. The first four fields are traditional typed name/value pairs. The friend-ids field is an unordered list of 32-bit integers. The employment field is an ordered list of instances of another named record type, EmploymentType.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create type FacebookUserType as closed {\n  &quot;id&quot; :         int32,\n  &quot;alias&quot; :      string,\n  &quot;name&quot; :       string,\n  &quot;user-since&quot; : datetime,\n  &quot;friend-ids&quot; : {{ int32 }},\n  &quot;employment&quot; : [ EmploymentType ]\n}\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Datasets<a name=\"Datasets\"></a></h4>\n\n<div class=\"source\">\n<pre>DatasetSpecification ::= &quot;internal&quot;? &quot;dataset&quot; QualifiedName &quot;(&quot; Identifier &quot;)&quot; IfNotExists\n                         PrimaryKey ( &quot;on&quot; Identifier )? ( &quot;hints&quot; Properties )? \n                       | &quot;external&quot; &quot;dataset&quot; QualifiedName &quot;(&quot; Identifier &quot;)&quot; IfNotExists \n                         &quot;using&quot; AdapterName Configuration ( &quot;hints&quot; Properties )?\nAdapterName          ::= Identifier\nConfiguration        ::= &quot;(&quot; ( KeyValuePair ( &quot;,&quot; KeyValuePair )* )? &quot;)&quot;\nKeyValuePair         ::= &quot;(&quot; StringLiteral &quot;=&quot; StringLiteral &quot;)&quot;\nProperties           ::= ( &quot;(&quot; Property ( &quot;,&quot; Property )* &quot;)&quot; )?\nProperty             ::= Identifier &quot;=&quot; ( StringLiteral | IntegerLiteral )\nFunctionSignature    ::= FunctionOrTypeName &quot;@&quot; IntegerLiteral\nPrimaryKey           ::= &quot;primary&quot; &quot;key&quot; Identifier ( &quot;,&quot; Identifier )*\n</pre></div>\n<p>The create dataset statement is used to create a new dataset. Datasets are named, unordered collections of ADM record instances; they are where data lives persistently and are the targets for queries in AsterixDB. Datasets are typed, and AsterixDB will ensure that their contents conform to their type definitions. An Internal dataset (the default) is a dataset that is stored in and managed by AsterixDB. It must have a specified unique primary key that can be used to partition data across nodes of an AsterixDB cluster. The primary key is also used in secondary indexes to uniquely identify the indexed primary data records. An External dataset is stored outside of AsterixDB (currently datasets in HDFS or on the local filesystem(s) of the cluster&#x2019;s nodes are supported). External dataset support allows AQL queries to treat external data as though it were stored in AsterixDB, making it possible to query &#x201c;legacy&#x201d; file data (e.g., Hive data) without having to physically import it into AsterixDB. For an external dataset, an appropriate adaptor must be selected to handle the nature of the desired external data. (See the <a href=\"externaldata.html\">guide to external data</a> for more information on the available adaptors.)</p>\n<p>The following example creates an internal dataset for storing FacefookUserType records. It specifies that their id field is their primary key.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create internal dataset FacebookUsers(FacebookUserType) primary key id;\n</pre></div>\n<p>The next example creates an external dataset for storing LineitemType records. The choice of the <tt>hdfs</tt> adaptor means that its data will reside in HDFS. The create statement provides parameters used by the hdfs adaptor: the URL and path needed to locate the data in HDFS and a description of the data format.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create external dataset Lineitem('LineitemType) using hdfs (\n  (&quot;hdfs&quot;=&quot;hdfs://HOST:PORT&quot;),\n  (&quot;path&quot;=&quot;HDFS_PATH&quot;),\n  (&quot;input-format&quot;=&quot;text-input-format&quot;),\n  (&quot;format&quot;=&quot;delimited-text&quot;),\n  (&quot;delimiter&quot;=&quot;|&quot;));\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Indices<a name=\"Indices\"></a></h4>\n\n<div class=\"source\">\n<pre>IndexSpecification ::= &quot;index&quot; Identifier IfNotExists &quot;on&quot; QualifiedName \n                       &quot;(&quot; ( Identifier ) ( &quot;,&quot; Identifier )* &quot;)&quot; ( &quot;type&quot; IndexType )?\nIndexType          ::= &quot;btree&quot;\n                     | &quot;rtree&quot;\n                     | &quot;keyword&quot;\n                     | &quot;ngram&quot; &quot;(&quot; IntegerLiteral &quot;)&quot;\n</pre></div>\n<p>The create index statement creates a secondary index on one or more fields of a specified dataset. Supported index types include <tt>btree</tt> for totally ordered datatypes, <tt>rtree</tt> for spatial data, and <tt>keyword</tt> and <tt>ngram</tt> for textual (string) data. AsterixDB currently requires indexed fields to be part of the named type associated with a dataset. (Future plans include support for indexing of open fields as well.)</p>\n<p>The following example creates a btree index called fbAuthorIdx on the author-id field of the FacebookMessages dataset. This index can be useful for accelerating exact-match queries, range search queries, and joins involving the author-id field.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create index fbAuthorIdx on FacebookMessages(author-id) type btree;\n</pre></div>\n<p>The following example creates an rtree index called fbSenderLocIdx on the sender-location field of the FacebookMessages dataset. This index can be useful for accelerating queries that use the <a href=\"functions.html#spatial-intersect\"><tt>spatial-intersect</tt> function</a> in a predicate involving the sender-location field.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create index fbSenderLocIndex on FacebookMessages(sender-location) type rtree;\n</pre></div>\n<p>The following example creates a 3-gram index called fbUserIdx on the name field of the FacebookUsers dataset. This index can be used to accelerate some similarity or substring maching queries on the name field. For details refer to the <a href=\"similarity.html#NGram_Index\">document on similarity queries</a>.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create index fbUserIdx on FacebookUsers(name) type ngram(3);\n</pre></div>\n<p>The following example creates a keyword index called fbMessageIdx on the message field of the FacebookMessages dataset. This keyword index can be used to optimize queries with token-based similarity predicates on the message field. For details refer to the <a href=\"similarity.html#Keyword_Index\">document on similarity queries</a>.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create index fbMessageIdx on FacebookMessages(message) type keyword;\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Functions<a name=\"Functions\"></a></h4>\n<p>The create function statement creates a named function that can then be used and reused in AQL queries. The body of a function can be any AQL expression involving the function&#x2019;s parameters.</p>\n\n<div class=\"source\">\n<pre>FunctionSpecification ::= &quot;function&quot; FunctionOrTypeName IfNotExists ParameterList &quot;{&quot; Expression &quot;}&quot;\n</pre></div>\n<p>The following is a very simple example of a create function statement. It differs from the declare function example shown previously in that it results in a function that is persistently registered by name in the specified dataverse.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>create function add($a, $b) {\n  $a + $b\n};\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Removal<a name=\"Removal\"></a></h4>\n\n<div class=\"source\">\n<pre>DropStatement       ::= &quot;drop&quot; ( &quot;dataverse&quot; Identifier IfExists\n                               | &quot;type&quot; FunctionOrTypeName IfExists\n                               | &quot;dataset&quot; QualifiedName IfExists\n                               | &quot;index&quot; DoubleQualifiedName IfExists\n                               | &quot;function&quot; FunctionSignature IfExists )\nIfExists            ::= ( &quot;if&quot; &quot;exists&quot; )?\n</pre></div>\n<p>The drop statement in AQL is the inverse of the create statement. It can be used to drop dataverses, datatypes, datasets, indexes, and functions.</p>\n<p>The following examples illustrate uses of the drop statement.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>drop dataset FacebookUsers if exists;\n\ndrop index fbSenderLocIndex;\n\ndrop type FacebookUserType;\n\ndrop dataverse TinySocial;\n\ndrop function add;\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Import/Export Statements<a name=\"ImportExport_Statements\"></a></h3>\n\n<div class=\"source\">\n<pre>LoadStatement  ::= &quot;load&quot; &quot;dataset&quot; QualifiedName &quot;using&quot; AdapterName Configuration ( &quot;pre-sorted&quot; )?\n</pre></div>\n<p>The load statement is used to initially populate a dataset via bulk loading of data from an external file. An appropriate adaptor must be selected to handle the nature of the desired external data. The load statement accepts the same adaptors and the same parameters as external datasets. (See the <a href=\"externaldata.html\">guide to external data</a> for more information on the available adaptors.)</p>\n<p>The following example shows how to bulk load the FacebookUsers dataset from an external file containing data that has been prepared in ADM format.</p>\n<div class=\"section\">\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>load dataset FacebookUsers using localfs\n((&quot;path&quot;=&quot;localhost:///Users/zuck/AsterixDB/load/fbu.adm&quot;),(&quot;format&quot;=&quot;adm&quot;));\n</pre></div></div></div></div>\n<div class=\"section\">\n<h3>Modification Statements<a name=\"Modification_Statements\"></a></h3>\n<div class=\"section\">\n<h4>Insert<a name=\"Insert\"></a></h4>\n\n<div class=\"source\">\n<pre>InsertStatement ::= &quot;insert&quot; &quot;into&quot; &quot;dataset&quot; QualifiedName Query\n</pre></div>\n<p>The AQL insert statement is used to insert data into a dataset. The data to be inserted comes from an AQL query expression. The expression can be as simple as a constant expression, or in general it can be any legal AQL query. Inserts in AsterixDB are processed transactionally, with the scope of each insert transaction being the insertion of a single object plus its affiliated secondary index entries (if any). If the query part of an insert returns a single object, then the insert statement itself will be a single, atomic transaction. If the query part returns multiple objects, then each object inserted will be handled independently as a tranaction.</p>\n<p>The following example illustrates a query-based insertion.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>insert into dataset UsersCopy (for $user in dataset FacebookUsers return $user\n</pre></div></div></div>\n<div class=\"section\">\n<h4>Delete<a name=\"Delete\"></a></h4>\n\n<div class=\"source\">\n<pre>DeleteStatement ::= &quot;delete&quot; Variable &quot;from&quot; &quot;dataset&quot; QualifiedName ( &quot;where&quot; Expression )?\n</pre></div>\n<p>The AQL delete statement is used to delete data from a target dataset. The data to be deleted is identified by a boolean expression involving the variable bound to the target dataset in the delete statement. Deletes in AsterixDB are processed transactionally, with the scope of each delete transaction being the deletion of a single object plus its affiliated secondary index entries (if any). If the boolean expression for a delete identifies a single object, then the delete statement itself will be a single, atomic transaction. If the expression identifies multiple objects, then each object deleted will be handled independently as a transaction.</p>\n<p>The following example illustrates a single-object deletion.</p>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>delete $user from dataset FacebookUsers where $user.id = 8;\n</pre></div>\n<p>We close this guide to AQL with one final example of a query expression.</p></div>\n<div class=\"section\">\n<h5>Example<a name=\"Example\"></a></h5>\n\n<div class=\"source\">\n<pre>for $praise in {{ &quot;great&quot;, &quot;brilliant&quot;, &quot;awesome&quot; }}\nreturn\n   string-concat([&quot;AsterixDB is &quot;, $praise])\n</pre></div></div></div></div></div>\n                  </div>\n            </div>\n          </div>\n\n    <hr/>\n\n    <footer>\n            <div class=\"container-fluid\">\n              <div class=\"row span12\">Copyright &copy;                   2014.\n          All Rights Reserved.      \n                    \n      </div>\n\n                          \n        \n                </div>\n    </footer>\n  </body>\n</html>\n", "id": 2538.0}