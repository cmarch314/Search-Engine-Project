{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Nef polyhedron 2 T Definition An instance of data type Nef polyhedron 2 T is a subset of the plane that is the result of forming complements and intersections starting from a finite set H of halfspaces Nef polyhedron 2 is closed under all binary set operations intersection union difference complement and under the topological operations boundary closure and interior The template parameter T is specified via an extended kernel concept T must be a model of the concept ExtendedKernelTraits 2 include CGAL Nef polyhedron 2 h Types Nef polyhedron 2 T Line the oriented lines modeling halfplanes Nef polyhedron 2 T Point the affine points of the plane Nef polyhedron 2 T Direction directions in our plane enum Boundary EXCLUDED INCLUDED construction selection enum Content EMPTY COMPLETE construction selection Creation Nef polyhedron 2 T N Content plane EMPTY creates an instance N of type Nef polyhedron 2 T and initializes it to the empty set if plane EMPTY and to the whole plane if plane COMPLETE Nef polyhedron 2 T N Line l Boundary line INCLUDED creates a Nef polyhedron N containing the halfplane left of l including l if line INCLUDED excluding l if line EXCLUDED template class Forward iterator Nef polyhedron 2 T N Forward iterator it Forward iterator end Boundary b INCLUDED creates a Nef polyhedron N from the simple polygon P spanned by the list of points in the iterator range it end and including its boundary if b INCLUDED excluding the boundary otherwise Forward iterator has to be an iterator with value type Point This construction expects that P is simple The degenerate cases where P contains no point one point or spans just one segment two points are correctly handled In all degenerate cases there s only one unbounded face adjacent to the degenerate polygon If b INCLUDED then N is just the boundary If b EXCLUDED then N is the whole plane without the boundary Operations void N clear Content plane EMPTY makes N the empty set if plane EMPTY and the full plane if plane COMPLETE bool N is empty returns true if N is empty false otherwise bool N is plane returns true if N is the whole plane false otherwise Constructive Operations Nef polyhedron 2 T N complement returns the complement of N in the plane Nef polyhedron 2 T N interior returns the interior of N Nef polyhedron 2 T N closure returns the closure of N Nef polyhedron 2 T N boundary returns the boundary of N Nef polyhedron 2 T N regularization returns the regularized polyhedron closure of interior Nef polyhedron 2 T N intersection N1 returns N N1 Nef polyhedron 2 T N join N1 returns N N1 Note that union is a keyword of C and cannot be used for this operation Nef polyhedron 2 T N difference N1 returns N N1 Nef polyhedron 2 T N symmetric difference N1 returns the symmectric difference N T T N Additionally there are operators which implement the binary operations intersection join difference symmetric difference and the unary operation complement respectively There are also the corresponding modification operations There are also comparison operations like which implement the relations subset subset or equal superset superset or equal equality inequality respectively Exploration Point location Ray shooting As Nef polyhedra are the result of forming complements and intersections starting from a set H of halfspaces that are defined by oriented lines in the plane they can be represented by an attributed plane map M V E F For topological queries within M the following types and operations allow exploration access to this structure Types Nef polyhedron 2 T Explorer a decorator to examine the underlying plane map See the manual page of Explorer Nef polyhedron 2 T Object handle a generic handle to an object of the underlying plane map The kind of object vertex halfedge face can be determined and the object can be assigned to a corresponding handle by the three functions bool assign Vertex const handle h Object handle bool assign Halfedge const handle h Object handle bool assign Face const handle h Object handle where each function returns true iff the assignment to h was done enum Location mode DEFAULT NAIVE LMWT selection flag1 for the point location mode Operations bool N contains Object handle h returns true iff the object h is contained in the set represented by N bool N contained in boundary Object handle h returns true iff the object h is contained in the 1 skeleton of N Object handle N locate Point p Location mode m DEFAULT returns a generic handle h to an object face halfedge vertex of the underlying plane map that contains the point p in its relative interior The point p is contained in the set represented by N if N contains h is true The location mode flag m allows one to choose between different point location strategies Object handle N ray shoot Point p Direction d Location mode m DEFAULT returns a handle h with N contains h that can be converted to a Vertex Halfedge Face const handle as described above The object returned is intersected by the ray starting in p with direction d and has minimal distance to p The operation returns the null handle NULL if the ray shoot along d does not hit any object h of N with N contains h The location mode flag m allows one to choose between different point location strategies Object handle N ray shoot to boundary Point p Direction d Location mode m DEFAULT returns a handle h that can be converted to a Vertex Halfedge const handle as described above The object returned is part of the 1 skeleton of N intersected by the ray starting in p with direction d and has minimal distance to p The operation returns the null handle NULL if the ray shoot along d does not hit any 1 skeleton object h of N The location mode flag m allows one to choose between different point location strategies Explorer N explorer returns a decorator object that allows read only access of the underlying plane map See the manual page Explorer for its usage Input and Output A Nef polyhedron N can be visualized in a Window stream W The output operator is defined in the file CGAL IO Nef poly hedron 2 Win dow stream h Implementation Nef polyhedra are implemented on top of a halfedge data structure and use linear space in the number of vertices edges and facets Operations like empty take constant time The operations clear complement interior closure boundary regularization input and output take linear time All binary set operations and comparison operations take time O n logn where n is the size of the output plus the size of the input The point location and ray shooting operations are implemented in two flavors The NAIVE operations run in linear query time without any preprocessing the DEFAULT operations equals LMWT run in sub linear query time but preprocessing is triggered with the first operation Preprocessing takes time O N2 the sub linear point location time is either logarithmic when LEDA s persistent dictionaries are present or if not then the point location time is worst case linear but experiments show often sublinear runtimes Ray shooting equals point location plus a walk in the constrained triangulation overlayed on the plane map representation The cost of the walk is proportional to the number of triangles passed in direction d until an obstacle is met In a minimum weight triangulation of the obstacles the plane map representing the polyhedron the theory provides a O sqrt n bound for the number of steps Our locally minimum weight triangulation approximates the minimum weight triangulation only heuristically the calculation of the minimum weight triangulation is conjectured to be NP hard Thus we have no runtime guarantee but a strong experimental motivation for its approximation Example Nef polyhedra are parameterized by a so called extended geometric kernel There are three kernels one based on a homogeneous representation of extended points called Extended homogeneous RT where RT is a ring type providing additionally a gcd operation one based on a Cartesian representation of extended points called Extended cartesian NT where NT is a field type and finally Filtered extended homogeneous RT an optimized version of the first The following example uses the filtered homogeneous kernel to construct the intersection of two halfspaces file examples Nef 2 simple intersection C include CGAL Gmpz h include CGAL Filtered extended homogeneous h include CGAL Nef polyhedron 2 h typedef CGAL Gmpz RT typedef CGAL Filtered extended homogeneous RT Extended kernel typedef CGAL Nef polyhedron 2 Extended kernel Nef polyhedron typedef Nef polyhedron Line Line int main Nef polyhedron N1 Line 1 Nef polyhedron N2 Line 1 Nef polyhedron EXCLUDED Nef polyhedron N3 N1 N2 line return After line N3 is the intersection of N1 and N2 The member types of Nef polyhedron 2 Extended homogeneous NT map to corresponding types of the standard CGAL geometry kernel type equality in pseudo code notation CGAL Nef polyhedron 2 CGAL Extended cartesian FT Point CGAL Cartesian FT Point 2 CGAL Nef polyhedron 2 CGAL Extended homogeneous RT Point CGAL Homogeneous RT Point 2 CGAL Nef polyhedron 2 CGAL Filtered extended homogeneous RT Point CGAL Homogeneous RT Point 2 The same holds for the types Line and Direction in the local scope of Nef polyhedron 2 Footnotes 1 LMWT Locally Minimum Weight Triangulation a locally optimized constrained triangulation where the weight corresponds to the lenght of the edges of the triangulation Next Topological explorer Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Nef_2_ref/Class_Nef_polyhedron_2", "title": "nef_polyhedron_2&lt;t&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Nef_2_ref/Nef_polyhedron_2.tex' -->\n<html> <head>  \n<title>Nef_polyhedron_2&lt;T&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_713\"></A>\n\n<A NAME=\"Cross_link_anchor_714\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_741\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Nef_polyhedron_2<T>\"></A>\n<h2><I>CGAL::Nef_polyhedron_2&lt;T&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance of data type <I><A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;</I> is a subset of the\nplane that is the result of forming complements and intersections\nstarting from a finite set <I>H</I> of\nhalfspaces. <I><A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A></I> is closed under all binary set\noperations <I><A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I>, <I>union</I>, <I>difference</I>,\n<I>complement</I> and under the topological operations <I>boundary</I>,\n<I>closure</I>, and <I>interior</I>.\n<P>\n\nThe template parameter <I>T</I> is specified via an extended kernel\nconcept. <I>T</I> must be a model of the concept\n<I><A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A></I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Nef_polyhedron_2.h\">CGAL/Nef_polyhedron_2.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::Line\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the oriented lines modeling halfplanes\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::Point\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the affine points of the plane.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::Direction\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    directions in our plane.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Boundary\"></A>\n<A NAME=\"Enum_Boundary\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">Boundary</A> { <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">EXCLUDED</A><A NAME=\"Function_Boundary\"></A>\n, <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A><A NAME=\"Function_Boundary\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    construction selection.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Content\"></A>\n<A NAME=\"Enum_Content\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">Content</A> { <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">EMPTY</A><A NAME=\"Function_Content\"></A>\n, <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">COMPLETE</A><A NAME=\"Function_Content\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    construction selection\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt; N ( <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">Content</A> plane = <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">EMPTY</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an instance <I>N</I> of type <I><A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;</I>\nand initializes it to the empty set if <I>plane == <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">EMPTY</A></I>\nand to the whole plane if <I>plane == <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">COMPLETE</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt; N ( Line l,  <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">Boundary</A> line = <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a Nef polyhedron <I>N</I> containing the halfplane left of\n<I>l</I> including <I>l</I> if <I>line==<A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A></I>, excluding <I>l</I>\nif <I>line==<A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">EXCLUDED</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class Forward_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt; N ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Forward_iterator it,<BR>\n\nForward_iterator end,<BR>\n\n<A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">Boundary</A> b = <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a Nef polyhedron <I>N</I> from the simple polygon <I>P</I>\nspanned by the list of points in the iterator range <I>[it,end)</I> and\nincluding its boundary if <I>b = <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A></I> excluding the boundary\notherwise. <I>Forward_iterator</I> has to be an iterator with\nvalue type <I>Point</I>. This construction expects that <I>P</I> is\nsimple. The degenerate cases where <I>P</I> contains no point, one\npoint or spans just one segment (two points) are correctly handled. In\nall degenerate cases there's only one unbounded face adjacent to the\ndegenerate polygon. If <I>b == <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">INCLUDED</A></I> then <I>N</I> is just the\nboundary. If <I>b == <A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">EXCLUDED</A></I> then <I>N</I> is the whole plane\nwithout the boundary.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear6Content_plane_=_EMPTY9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.clear ( <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">Content</A> plane = <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">EMPTY</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    makes <I>N</I> the empty set if <I>plane == <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">EMPTY</A></I> and the\nfull plane if <I>plane == <A HREF=\"Class_Nef_polyhedron_2#Enum_Content\">COMPLETE</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_empty69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.is_empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>N</I> is empty, false otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_plane69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.is_plane ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>N</I> is the whole plane, false otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Constructive Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_complement69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.complement ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the complement of <I>N</I> in the plane.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_interior69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.interior ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the interior of <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_closure69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.closure ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the closure of <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_boundary69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.boundary ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the boundary of <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_regularization69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.regularization ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the regularized polyhedron (closure of interior).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_intersection6const_Nef_polyhedron_26T9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> (  N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cap.gif\"> </I></MATH> <I>N1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_join6const_Nef_polyhedron_26T9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.join (  N1)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> </I></MATH> <I>N1</I>. Note that ``union'' is a keyword of C++\nand cannot be used for this operation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_difference6const_Nef_polyhedron_26T9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.difference (  N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I>-</I></MATH> <I>N1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_26T9_symmetric_difference6const_Nef_polyhedron_26T9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.symmetric_difference (  N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the symmectric difference <I>N - T</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> </I></MATH> <I>T - N</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nAdditionally there are operators <I>*,+,-,^,!</I> which implement the\nbinary operations <I><A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I>, <I>join</I>, <I>difference</I>,\n<I>symmetric difference</I>, and the unary operation\n<I>complement</I>, respectively. There are also the corresponding\nmodification operations <I>*=,+=,-=,^=</I>.\n<P>\n\nThere are also comparison operations like <I>&lt;,&lt;=,&gt;,&gt;=,==,!=</I> which\nimplement the relations subset, subset or equal, superset, superset or\nequal, equality, inequality, respectively.\n<P>\n\n<H3>Exploration - Point location - Ray shooting</H3>\nAs Nef polyhedra are the result of forming complements \nand intersections starting from a set <I>H</I> of halfspaces that are\ndefined by oriented lines in the plane, they can be represented by\nan attributed plane map <MATH><I>M = (V,E,F)</I></MATH>. For topological queries\nwithin <I>M</I> the following types and operations allow exploration\naccess to this structure.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::<A HREF=\"Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a decorator to examine the underlying plane map. \nSee the manual page of <I><A HREF=\"Class_Explorer.html#Cross_link_anchor_718\">Explorer</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;T&gt;::Object_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a generic handle to an object of the underlying\nplane map. The kind of object <I>(vertex, halfedge, face)</I> can \nbe determined and the object can be assigned to a corresponding\nhandle by the three functions:<BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Vertex_const_handle&amp; h, Object_handle)</I><BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Halfedge_const_handle&amp; h, Object_handle)</I><BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Face_const_handle&amp; h, Object_handle)</I><BR>\n\nwhere each function returns <I>true</I> iff the assignment to\n<I>h</I> was done.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Location_mode\"></A>\n<A NAME=\"Enum_Location_mode\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">Location_mode</A> { <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">DEFAULT</A><A NAME=\"Function_Location_mode\"></A>\n, <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">NAIVE</A><A NAME=\"Function_Location_mode\"></A>\n, <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">LMWT</A><A NAME=\"Function_Location_mode\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    selection\nflag<A HREF=\"#Footnote_1\"><SUP>1</SUP></A> for the point location\nmode.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contains6Object_handle_h9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.contains ( Object_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff the object <I>h</I> is contained in the set\nrepresented by <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contained_in_boundary6Object_handle_h9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.contained_in_boundary ( Object_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff the object <I>h</I> is contained in the <MATH><I>1</I></MATH>-skeleton\nof <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_locate6const_Point__p+_Location_mode_m_=_DEFAULT9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.locate (  Point p,  <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">Location_mode</A> m = <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">DEFAULT</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a generic handle <I>h</I> to an object (face,\nhalfedge, vertex) of the underlying plane map that contains the point\n<I>p</I> in its relative interior. The point <I>p</I> is contained in\nthe set represented by <I>N</I> if <I>N.contains(h)</I> is true. The\nlocation mode flag <I>m</I> allows one to choose between different\npoint location strategies.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_ray_shoot6const_Point__p+_const_Direction__d+_Location_mode_m_=_DEFAULT9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    N.ray_shoot ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nDirection d,<BR>\n\n<A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">Location_mode</A> m = <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">DEFAULT</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a handle <I>h</I> with\n<I>N.contains(h)</I>, that can be converted to a\n<I>Vertex_/Halfedge_/Face_const_handle</I> as described above. The\nobject returned is intersected by the ray starting in <I>p</I> with\ndirection <I>d</I> and has minimal distance to <I>p</I>.  The operation\nreturns the null handle <I>NULL</I> if the ray shoot along <I>d</I> does\nnot hit any object <I>h</I> of <I>N</I> with <I>N.contains(h)</I>. The\nlocation mode flag <I>m</I> allows one to choose between different\npoint location strategies.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_ray_shoot_to_boundary6const_Point__p+_const_Direction__d+_Location_mode_m_=_DEFAULT9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    N.ray_shoot_to_boundary ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\nDirection d,<BR>\n\n<A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">Location_mode</A> m = <A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">DEFAULT</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a handle <I>h</I>,\nthat can be converted to a <I>Vertex_/Halfedge_const_handle</I> as\ndescribed above. The object returned is part of the <MATH><I>1</I></MATH>-skeleton of\n<I>N</I>, intersected by the ray starting in <I>p</I> with direction\n<I>d</I> and has minimal distance to <I>p</I>.  The operation returns\nthe null handle <I>NULL</I> if the ray shoot along <I>d</I> does not hit\nany <MATH><I>1</I></MATH>-skeleton object <I>h</I> of <I>N</I>. The location mode flag\n<I>m</I> allows one to choose between different point location\nstrategies.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Explorer_explorer69_;\"></A>\n<A HREF=\"Class_Explorer.html#Cross_link_anchor_718\">Explorer</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.explorer ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a decorator object that allows read-only access of\nthe underlying plane map. See the manual page <I><A HREF=\"Class_Explorer.html#Cross_link_anchor_718\">Explorer</A></I> for its \nusage.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Input and Output</H3>\nA Nef polyhedron <I>N</I> can be visualized in a <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A> W</I>. \nThe output operator is defined in the file \n<I>CGAL/IO/Nef_-poly-hedron_2_-Win-dow_-stream.h</I>.\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nNef polyhedra are implemented on top of a halfedge data structure and\nuse linear space in the number of vertices, edges and facets.\nOperations like <I>empty</I> take constant time. The operations\n<I>clear</I>, <I>complement</I>, <I>interior</I>, <I>closure</I>,\n<I>boundary</I>, <I>regularization</I>, input and output take linear\ntime. All binary set operations and comparison operations take time\n<MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> where <MATH><I>n</I></MATH> is the size of the output plus the size of the\ninput.\n<P>\n\nThe point location and ray shooting operations are implemented in two\nflavors. The <I><A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">NAIVE</A></I> operations run in linear query time without\nany preprocessing, the <I><A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">DEFAULT</A></I> operations (equals <I><A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">LMWT</A></I>)\nrun in sub-linear query time, but preprocessing is triggered with the\nfirst operation. Preprocessing takes time <MATH><I>O(N<SUP>2</SUP>)</I></MATH>, the sub-linear\npoint location time is either logarithmic when LEDA's persistent\ndictionaries are present or if not then the point location time is\nworst-case linear, but experiments show often sublinear runtimes.  Ray\nshooting equals point location plus a walk in the constrained\ntriangulation overlayed on the plane map representation. The cost of\nthe walk is proportional to the number of triangles passed in\ndirection <I>d</I> until an obstacle is met. In a minimum weight\ntriangulation of the obstacles (the plane map representing the\npolyhedron) the theory provides a <MATH><I>O(<A HREF=\"../NumberTypeSupport_ref/Function_sqrt.html#Cross_link_anchor_1414\">sqrt</A>(n))</I></MATH> bound for the number\nof steps. Our locally minimum weight triangulation approximates the\nminimum weight triangulation only heuristically (the calculation of\nthe minimum weight triangulation is conjectured to be NP hard). Thus\nwe have no runtime guarantee but a strong experimental motivation for\nits approximation.\n<P>\n\n<H3>Example</H3>\n<P>\n\nNef polyhedra are parameterized by a so-called extended geometric\nkernel. There are three kernels, one based on a homogeneous\nrepresentation of extended points called\n<I><A HREF=\"Class_Extended_homogeneous.html#Cross_link_anchor_723\">Extended_homogeneous</A>&lt;RT&gt;</I> where <I>RT</I> is a ring type providing\nadditionally a <I><A HREF=\"../NumberTypeSupport_ref/Function_gcd.html#Cross_link_anchor_1356\">gcd</A></I> operation, one based on a <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>\nrepresentation of extended points called <I><A HREF=\"Class_Extended_cartesian.html#Cross_link_anchor_721\">Extended_cartesian</A>&lt;NT&gt;</I>\nwhere <I>NT</I> is a field type, and finally\n<I><A HREF=\"Class_Filtered_extended_homogeneous.html#Cross_link_anchor_725\">Filtered_extended_homogeneous</A>&lt;RT&gt;</I> (an optimized version of the\nfirst). The following example uses the filtered homogeneous kernel to\nconstruct the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two halfspaces.\n<P>\n\n<pre class=\"ExampleCode\">// file : examples/Nef_2/simple_intersection.C\n\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Filtered_extended_homogeneous.html#Cross_link_anchor_725\">Filtered_extended_homogeneous</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A> RT;\ntypedef <A HREF=\"Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt; Extended_kernel;\ntypedef <A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt;Extended_kernel&gt; Nef_polyhedron;\ntypedef Nef_polyhedron::Line  Line;\n\nint main()\n{\n  Nef_polyhedron N1(Line(1,0,0));\n  Nef_polyhedron N2(Line(0,1,0), Nef_polyhedron::<A HREF=\"Class_Nef_polyhedron_2#Enum_Boundary\">EXCLUDED</A>);\n  Nef_polyhedron N3 = N1 * N2; // line (*)\n  return 0;\n}\n\n\n</pre>\n<P>\n\nAfter line (*) <I>N3</I> is the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of <I>N1</I> and <I>N2</I>. \nThe member types of <I><A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt; <A HREF=\"Class_Extended_homogeneous.html#Cross_link_anchor_723\">Extended_homogeneous</A>&lt;NT&gt; &gt;</I>\nmap to corresponding types of the standard CGAL geometry kernel\n(type equality in pseudo-code notation):\n<pre class=\"ExampleCode\">\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"Class_Extended_cartesian.html#Cross_link_anchor_720\">CGAL::Extended_cartesian</A>&lt;FT&gt; &gt;::Point\n  == <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;FT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"Class_Extended_homogeneous.html#Cross_link_anchor_722\">CGAL::Extended_homogeneous</A>&lt;RT&gt; &gt;::Point\n   == <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n\n<A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_713\">CGAL::Nef_polyhedron_2</A>&lt; <A HREF=\"Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt; &gt;::Point\n   == <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n</pre>\nThe same holds for the types <I>Line</I> and <I>Direction</I> in the\nlocal scope of <I><A HREF=\"Class_Nef_polyhedron_2.html#Cross_link_anchor_714\">Nef_polyhedron_2</A>&lt;...&gt;</I>.\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\n<A HREF=\"Class_Nef_polyhedron_2#Enum_Location_mode\">LMWT</A> = Locally Minimum Weight Triangulation, a locally\noptimized constrained triangulation where the weight corresponds to\nthe lenght of the edges of the triangulation.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Topological_explorer.html\"><I>Topological_explorer</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_12!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 41098.0}