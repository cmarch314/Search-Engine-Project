{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL rectangular p center 2 DefinitionThe function rectangular p center 2 computes rectilinear p centers of a planar point set i e a set of p points such that the maximum minimal L distance between both sets is minimized More formally the problem can be defined as follows Given a finite set of points compute a point set with such that the p radius of is minimized We can interpret as the best approximation with respect to the given metric for with at most p points include CGAL rectangular p center 2 h template class ForwardIterator class OutputIterator class FT class Traits OutputIterator rectangular p center 2 ForwardIterator f ForwardIterator l OutputIterator o FT r int p Traits t Default traits computes rectilinear p centers for the point set described by the range f l sets r to the corresponding p radius writes the at most p center points to o and returns the past the end iterator of this sequence Precondition The range f l is not empty 2 p 4 The geometric types and operations to be used for the computation are specified by the traits class parameter t This parameter can be omitted if ForwardIterator refers to a point type from the 2D Kernel In this case a default traits class Rectangular p center default traits 2 R is used Requirement Either if no traits parameter is given Value type of ForwardIterator is CGAL Point 2 R for some representation class R and FT is equivalent to R FT Or if a traits parameter is specified Traits is a model for RectangularPCenterTraits 2 OutputIterator accepts the value type of ForwardIterator as value type See AlsoRectangularPCenterTraits 2 CGAL Rectangular p center default traits 2 R CGAL sorted matrix search ImplementationThe runtime is linear for p 2 3 and n logn for p 4 where n is the number of input points These runtimes are worst case optimal The 3 center algorithm uses a prune and search technique described in Hof99 The 4 center implementation uses sorted matrix search FJ83 FJ84 and fast algorithms for piercing rectangles SW96 ExampleThe following code generates a random set of ten points and computes its two centers include CGAL Cartesian h include CGAL point generators 2 h include CGAL rectangular p center 2 h include CGAL IO Ostream iterator h include CGAL algorithm h include iostream include algorithm include vector typedef double FT struct Kernel public CGAL Cartesian FT typedef Kernel Point 2 Point typedef std vector Point Cont typedef CGAL Random points in square 2 Point Generator typedef CGAL Ostream iterator Point std ostream OIterator int main int n 1 int p 2 OIterator cout ip std cout CGAL set pretty mode std cout Cont points CGAL copy n Generator 1 n std back inserter points std cout Generated Point Set n std copy points begin points end cout ip FT p radius std cout n n p centers n CGAL rectangular p center 2 points begin points end cout ip p radius 3 std cout n n p radius p radius std endl return Next Rectangular p center default traits 2 R Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation_ref/Function_rectangular_p_center_2.html", "title": "rectangular_p_center_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation_ref/spec_rectangular_p_centers.tex' -->\n<html> <head>  \n<title>rectangular_p_center_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1157\"></A>\n\n<A NAME=\"Cross_link_anchor_1158\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1121\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::rectangular_p_center_2\"></A>\n<h2><I>CGAL::rectangular_p_center_2</I></h2>\n\n\n  \n<A NAME=\"Index_anchor_1122\"></A> \n\n  \n<A NAME=\"Index_anchor_1123\"></A> \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1124\"></A>\n<P>\n\n<H3>Definition</H3>The function <I><A HREF=\"Function_rectangular_p_center_2.html#Cross_link_anchor_1158\">rectangular_p_center_2</A></I> computes rectilinear\n  <MATH><I>p</I></MATH>-centers of a planar point set, i.e. a set of <MATH><I>p</I></MATH> points such\n  that the maximum minimal <MATH><I>L<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>-distance between both sets is\n  minimized.\n<P>\n\nMore formally the problem can be defined as follows.\n<P>\n\nGiven a finite set <IMG WIDTH=12\n    HEIGHT=12 ALIGN=BOTTOM ALT=\"tex2html_wrap_inline17\"\n    SRC=\"./MatrixSearch_pcenter1.gif\" > of points, compute a point set\n    <IMG WIDTH=9 HEIGHT=13 ALIGN=BOTTOM ALT=\"tex2html_wrap_inline19\"\n    SRC=\"./MatrixSearch_pcenter2.gif\" > with <IMG WIDTH=46 HEIGHT=24\n    ALIGN=MIDDLE ALT=\"tex2html_wrap_inline21\"\n    SRC=\"./MatrixSearch_pcenter3.gif\" > such that the <I>p</I>-radius\n    of <IMG WIDTH=12 HEIGHT=12 ALIGN=BOTTOM\n    ALT=\"tex2html_wrap_inline17\" SRC=\"./MatrixSearch_pcenter1.gif\" > ,\n<P>\n\n<IMG WIDTH=358 HEIGHT=24 ALIGN=BOTTOM ALT=\"displaymath27\"\n    SRC=\"./MatrixSearch_pcenter4.gif\" >\n<P>\n\nis minimized. We can\n    interpret <IMG WIDTH=9 HEIGHT=13 ALIGN=BOTTOM\n    ALT=\"tex2html_wrap_inline19\" SRC=\"./MatrixSearch_pcenter2.gif\" >\n    as the best approximation (with respect to the given metric) for\n    <IMG WIDTH=12 HEIGHT=12 ALIGN=BOTTOM ALT=\"tex2html_wrap_inline17\"\n    SRC=\"./MatrixSearch_pcenter1.gif\" > with at most <I>p</I> points.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/rectangular_p_center_2.h\">CGAL/rectangular_p_center_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class ForwardIterator, class OutputIterator, class FT, class Traits &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_rectangular_p_center_26ForwardIterator_f+_ForwardIterator_l+_OutputIterator_o+_FT__r+_int_p+_const_Traits__t_=_Default_traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    <A HREF=\"Function_rectangular_p_center_2.html#Cross_link_anchor_1158\">rectangular_p_center_2</A> ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator f,<BR>\n\nForwardIterator l,<BR>\n\nOutputIterator o,<BR>\n\nFT&amp; r,<BR>\n\nint p,<BR>\n\nTraits t = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\ncomputes rectilinear <I>p</I>-centers for the point set described by\n  the range [<I>f</I>, <I>l</I>), sets <I>r</I> to the corresponding\n  <MATH><I>p</I></MATH>-radius, writes the at most <I>p</I> center points to <I>o</I> and\n  returns the past-the-end iterator of this sequence.\n<P>\n\n<BR>\n\n<EM>Precondition: </EM><OL>\n  <LI>The range [<I>f</I>, <I>l</I>) is not empty.\n  <LI>2 <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> </I></MATH> <I>p</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> </I></MATH> 4.\n  </OL>\n<P>\n\nThe geometric types and operations to be used for the computation\n  are specified by the traits class parameter <I>t</I>. This parameter\n  can be omitted if <I>ForwardIterator</I> refers to a point type from\n  the 2D-<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>. In this case, a default traits class\n  (<I><A HREF=\"Class_Rectangular_p_center_default_traits_2.html#Cross_link_anchor_1160\">Rectangular_p_center_default_traits_2</A>&lt;R&gt;</I>) is used.\n<P>\n\n<BR>\n\n<EM>Requirement: </EM><OL>\n  <LI><I>Either: (if no traits parameter is given)</I> Value type\n    of <I>ForwardIterator</I> is <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt;R&gt;</I> for some\n    representation class <I>R</I> and <I>FT</I> is equivalent to\n    <I>R::FT</I>,\n  <LI><I>Or: (if a traits parameter is specified)</I> <I>Traits</I>\n    is a model for <I><A HREF=\"Concept_RectangularPCenterTraits_2.html#Cross_link_anchor_1161\">RectangularPCenterTraits_2</A></I>.\n  <LI><I>OutputIterator</I> accepts the value type of\n    <I>ForwardIterator</I> as value type.\n  </OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_RectangularPCenterTraits_2.html#Cross_link_anchor_1161\">RectangularPCenterTraits_2</A></I><BR>\n\n<I><A HREF=\"Class_Rectangular_p_center_default_traits_2.html#Cross_link_anchor_1159\">CGAL::Rectangular_p_center_default_traits_2</A>&lt;R&gt;</I><BR>\n\n<I><A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1212\">CGAL::sorted_matrix_search</A></I>\n<P>\n\n<H3>Implementation</H3>The runtime is linear for <MATH><I>p  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> {2,3}</I></MATH> and\n  <MATH><I><IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\">(n  &middot; </I></MATH>log<MATH><I>n)</I></MATH> for <MATH><I>p = 4</I></MATH> where <MATH><I>n</I></MATH> is the number of\n  input points. These runtimes are worst case optimal. The <MATH><I>3</I></MATH>-center\n  algorithm uses a prune-and-search technique described in\n  [<A HREF=\"../biblio.html#Biblio_cgal:h-slacr-99\">Hof99</A>].  The <MATH><I>4</I></MATH>-center implementation uses sorted matrix\n  search [<A HREF=\"../biblio.html#Biblio_fj-fkppc-83\">FJ83</A>, <A HREF=\"../biblio.html#Biblio_fj-gsrsm-84\">FJ84</A>] and fast algorithms for\n  piercing rectangles [<A HREF=\"../biblio.html#Biblio_sw-rpppp-96\">SW96</A>].\n<P>\n\n<H3>Example</H3>The following code generates a random set of ten points\n  and computes its two-centers.\n<P>\n\n<pre class=\"ExampleCode\">#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/point_generators_2.h&gt;\n#include &lt;CGAL/<A HREF=\"Function_rectangular_p_center_2.html#Cross_link_anchor_1158\">rectangular_p_center_2</A>.h&gt;\n#include &lt;CGAL/IO/<A HREF=\"../IOstream_ref/Class_Ostream_iterator.html#Cross_link_anchor_1742\">Ostream_iterator</A>.h&gt;\n#include &lt;CGAL/algorithm.h&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\ntypedef double                                      FT;\n\nstruct <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> : public <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;FT&gt; {};\n\ntypedef <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A>                             Point;\ntypedef std::vector&lt;Point&gt;                          Cont;\ntypedef <A HREF=\"../Generator_ref/Class_Random_points_in_square_2.html#Cross_link_anchor_1699\">CGAL::Random_points_in_square_2</A>&lt;Point&gt;      Generator;\ntypedef <A HREF=\"../IOstream_ref/Class_Ostream_iterator.html#Cross_link_anchor_1741\">CGAL::Ostream_iterator</A>&lt;Point,std::ostream&gt;  OIterator;\n\nint main()\n{\n  int n = 10;\n  int p = 2;\n  OIterator cout_ip(std::cout);\n  <A HREF=\"../IOstream_ref/Function_set_pretty_mode.html#Cross_link_anchor_1749\">CGAL::set_pretty_mode</A>(std::cout);\n\n  Cont points;\n  <A HREF=\"../STL_Extension_ref/Function_copy_n.html#Cross_link_anchor_1445\">CGAL::copy_n</A>(Generator(1), n, std::back_inserter(points));\n  std::cout &lt;&lt; &quot;Generated Point Set:\\n&quot;;\n  std::copy(points.begin(), points.end(), cout_ip);\n\n  FT p_radius;\n  std::cout &lt;&lt; &quot;\\n\\n&quot; &lt;&lt; p &lt;&lt; &quot;-centers:\\n&quot;;\n  <A HREF=\"Function_rectangular_p_center_2.html#Cross_link_anchor_1157\">CGAL::rectangular_p_center_2</A>(\n    points.begin(), points.end(), cout_ip, p_radius, 3);\n  std::cout &lt;&lt; &quot;\\n\\n&quot; &lt;&lt; p &lt;&lt; &quot;-radius = &quot; &lt;&lt; p_radius &lt;&lt; std::endl;\n\n  return 0;\n} \n</pre>\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Rectangular_p_center_default_traits_2.html\"><I>Rectangular_p_center_default_traits_2&lt;R&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_52!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39405.0}