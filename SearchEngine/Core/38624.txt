{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Qt widget layer DefinitionThe Qt widget layer serves as a base class for layers Layers are classes that draw on the drawing area of a Qt widget and receive events from it You can attach and detach layers on the Qt widget All the attached layers will receive the events if they are active The same for drawing all the active layers that are attached will be drawn include CGAL IO Qt widget layer h Inherits FromQObject Creation Qt widget layer layer QObject parent const char name The default constructor The parameters parent and name are passed to the QObject constructor virtual void layer mousePressEvent QMouseEvent virtual void layer mouseReleaseEvent QMouseEvent virtual void layer wheelEvent QMouseEvent virtual void layer mouseDoubleClickEvent QMouseEvent virtual void layer mouseMoveEvent QMouseEvent virtual void layer keyPressEvent QKeyEvent virtual void layer keyReleaseEvent QMouseEvent virtual void layer enterEvent QEvent virtual void layer leaveEvent QEvent virtual bool layer event QEvent These virtual functions can be overloaded in the derived class They are called by the Qt widget to which the layer is attached bool layer is active Returns true if this layer is active Public Slots virtual void layer draw This virtual member function must be overloaded This is where the drawing code goes void layer stateChanged int s This slot is provided to change the layer s state from activated to deactivated and reverse if it is triggered The layer is activated if s is 2 or it is deactivated if s is These values match with the signal stateChanged int in the QButton widget bool layer activate Activate and return true if it was not active bool layer deactivate Deactivate and return true if it was active Protected Qt widget widget The widget a layer is attached to or otherwise virtual void layer activating You should overload this function if you want to have initializing code for your layer This function is called every time the layer is activated virtual void layer deactivating You should overload this function if you want to write clean up code for your layer This function is called every time the layer is deactivated Signals void layer activated l This signal is emitted every time this layer is activated void layer deactivated l This signal is emitted every time this layer is deactivated ExampleThe following example of a layer draws the points of a triangulation in green include CGAL IO Qt widget layer h namespace CGAL template class T class Qt layer show points public Qt widget layer public typedef typename T Point Point typedef typename T Segment Segment typedef typename T Vertex Vertex typedef typename T Vertex iterator Vertex iterator Qt layer show points T t tr t void draw Vertex iterator it tr vertices begin beyond tr vertices end widget CGAL GREEN CGAL PointSize 3 CGAL PointStyle CGAL DISC while it beyond widget it point it private T tr end class namespace CGAL Next Qt widget get point T Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Qt_widget_ref/Class_Qt_widget_layer.html", "title": "qt_widget_layer", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Qt_widget_ref/Qt_widget_layers.tex' -->\n<html> <head>  \n<title>Qt_widget_layer</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1761\"></A>\n\n<A NAME=\"Cross_link_anchor_1762\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1592\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Qt_widget_layer\"></A>\n<h2><I>CGAL::Qt_widget_layer</I></h2>\n<P>\n\n<H3>Definition</H3>The <I><A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A></I> serves as a base class for layers. Layers\nare classes that draw on the drawing <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> of a <I>Qt_widget</I> and\nreceive events from it. You can attach and detach layers on the\n<I>Qt_widget</I>. All the attached layers will receive the events if\nthey are active. The same for drawing, all the active layers that are\nattached will be drawn.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_layer.h\">CGAL/IO/Qt_widget_layer.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<H3>Inherits From</H3><I>QObject</I>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A> layer ( QObject *parent = 0,  const char* name = 0);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The default constructor. The parameters <I>parent</I> and <I>name</I> \nare passed to the <I>QObject</I> constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_mousePressEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.mousePressEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_mouseReleaseEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.mouseReleaseEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_wheelEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.wheelEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_mouseDoubleClickEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.mouseDoubleClickEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_mouseMoveEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.mouseMoveEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_keyPressEvent6QKeyEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.keyPressEvent ( QKeyEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_keyReleaseEvent6QMouseEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.keyReleaseEvent ( QMouseEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_enterEvent6QEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.enterEvent ( QEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_leaveEvent6QEvent_*9;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.leaveEvent ( QEvent *)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_bool_event6QEvent_*9;\"></A>\nvirtual bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.event ( QEvent *)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    These\nvirtual functions can be overloaded in the derived class. They are\ncalled by the <I>Qt_widget</I> to which the layer is attached.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_active69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    layer.is_active ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns <I>true</I> if this layer is active.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Public Slots</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_draw69;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    layer.draw ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This virtual member function\n must be overloaded. This is where the drawing code goes.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_stateChanged6int_s9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.stateChanged ( int s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This slot is provided to change\nthe layer's state from activated to deactivated and reverse if it is\ntriggered. The layer is activated if <I>s</I> is 2, or it is\ndeactivated if <I>s</I> is 0. These values match with the signal\n<I>stateChanged(int)</I> in the <I>QButton</I> widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_activate69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    layer.activate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Activate and return <I>true</I> if it was not active.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_deactivate69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.deactivate ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Deactivate and return <I>true</I> if it was active.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Protected</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_widget\"></A>\n<A NAME=\"Var_widget\"></A>\nQt_widget *\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    widget;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The widget a layer is attached to or 0 \notherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_activating69;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.activating ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    You should overload this\nfunction if you want to have initializing code for your layer. This\nfunction is called every time the layer is activated.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_virtual_void_deactivating69;\"></A>\nvirtual void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.deactivating ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    You should overload this\nfunction if you want to write clean up code for your\nlayer. This function is called every time the layer is deactivated.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Signals</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_activated6Qt_widget_layer_*l9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.activated (  *l)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This signal is emitted\nevery time this layer is activated.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_deactivated6Qt_widget_layer_*l9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    layer.deactivated (  *l)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This signal is emitted\nevery time this layer is deactivated.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>The following example of a layer draws the points of a triangulation in green.\n<P>\n\n<pre class=\"ExampleCode\">\n#include &lt;CGAL/IO/<A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A>.h&gt;\n\nnamespace CGAL {\n\ntemplate &lt;class T&gt;\nclass Qt_layer_show_points : public <A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A> {\npublic:\n  typedef typename T::Point           Point;\n  typedef typename T::Segment         Segment;\n  typedef typename T::Vertex          Vertex;\n  typedef typename T::Vertex_iterator   Vertex_iterator;\n\n  Qt_layer_show_points(T &amp;t) : tr(t){};\n\n  void draw()\n  {  \n    Vertex_iterator it = tr.vertices_begin(), \n                beyond = tr.vertices_end();\n    *widget &lt;&lt; CGAL::GREEN &lt;&lt; CGAL::PointSize (3) \n            &lt;&lt; CGAL::<A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A> (CGAL::<A HREF=\"Class_Qt_widget#Enum_PointStyle\">DISC</A>);    \n    while(it != beyond) {      \n      *widget &lt;&lt; (*it).point();\n      ++it;\n    }\n  };\nprivate:\n  T &amp;tr;\n  \n};//end class \n\n} // namespace CGAL\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Qt_widget_get_point.html\"><I>Qt_widget_get_point&lt;T&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_17!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38624.0}