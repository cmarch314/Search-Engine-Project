{"text": "View Javadoc 1 Z M I G 2 3 This library is free software you can redistribute it and or 4 modify it under the terms of the GNU Lesser General Public 5 License as published by the Free Software Foundation either 6 version 2 1 of the License or at your option any later version 7 8 This library is distributed in the hope that it will be useful 9 but WITHOUT ANY WARRANTY without even the implied warranty of 1 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU 11 Lesser General Public License for more details 12 13 You should have received a copy of the GNU Lesser General Public 14 License along with this library if not write to the Free Software 15 Foundation Inc 59 Temple Place Suite 33 Boston MA 2111 13 7 USA 16 package javax jmdns 17 18 import java util Iterator 19 2 21 A table of DNS entries This is a closed hash table which can handle 22 multiple entries with the same name It provides iterators to efficiently 23 iterate over all the entries with a given name 24 25 author Arthur van Hoff 26 version I G 27 28 class DNSCache 29 3 TODO 31 static final float LOAD FACTOR 75f 32 33 TODO 34 DNSEntry entries 35 36 TODO 37 float loadFactor 38 39 TODO 4 int count 41 42 43 Create a table with a given initial size 44 45 param size TODO 46 47 DNSCache int size 48 49 size Math max 2 size 2 5 51 for size 2 size 3 size 5 52 size 53 54 55 56 57 this entries new DNSEntry size 58 59 6 61 Add an entry to the table The table will be grown if it is more than 62 75 full 63 64 param entry TODO 65 66 void add DNSEntry entry 67 68 rehash if necessary 69 if count entries length LOAD FACTOR 7 71 entries rehash entries entries length 2 72 73 74 add entries entry 75 count 76 77 78 79 Iterate over all entries 8 81 return TODO 82 83 Iterator all 84 85 return new IterateAll 86 87 88 89 Iterate only over items with matching name 9 91 param name TODO 92 93 return TODO 94 95 Iterator find String name 96 97 return new IterateKey name toLowerCase 98 99 1 1 1 Get a matching DNS entry from the table using equals Returns the 1 2 entry that was found 1 3 1 4 param entry TODO 1 5 1 6 return TODO 1 7 1 8 DNSEntry get DNSEntry entry 1 9 11 int i Math abs entry key hashCode entries length 111 112 while true 113 114 DNSEntry e entries i 115 116 if e null 117 118 return null 119 12 121 if e equals entry 122 123 return e 124 125 126 if i 127 128 i entries length 1 129 13 131 132 133 134 Get a matching DNS entry from the table 135 136 param name TODO 137 param type TODO 138 param clazz TODO 139 14 return TODO 141 142 DNSEntry get String name int type int clazz 143 144 String key name toLowerCase 145 int i Math abs key hashCode entries length 146 147 while true 148 149 DNSEntry e entries i 15 151 if e null 152 153 return null 154 155 156 if key equals e key type e type clazz e clazz 157 158 return e 159 16 161 if i 162 163 i entries length 1 164 165 166 167 168 169 List all entries for debugging 17 171 void print 172 173 for Iterator i all i hasNext 174 175 System out println i next 176 177 178 179 18 Remove a specific entry from the table Returns true if the entry was 181 found 182 183 param entry TODO 184 185 return TODO 186 187 boolean remove DNSEntry entry 188 189 int i Math abs entry key hashCode entries length 19 191 while true 192 193 DNSEntry e entries i 194 195 if e null 196 197 return false 198 199 2 if e entry 2 1 2 2 remove i 2 3 2 4 return true 2 5 2 6 2 7 if i 2 8 2 9 i entries length 1 21 211 212 213 214 215 Add an entry to a table 216 217 param entries TODO 218 param entry TODO 219 22 private void add DNSEntry entries DNSEntry entry 221 222 int i Math abs entry key hashCode entries length 223 224 while entries i null 225 226 i i entries length i 1 227 228 229 entries i entry 23 231 232 233 Rehash a table 234 235 param entries TODO 236 param size TODO 237 238 return TODO 239 24 private DNSEntry rehash DNSEntry entries int size 241 242 for size 2 size 3 size 5 243 size 244 245 246 247 248 DNSEntry newentries new DNSEntry size 249 25 for int i n entries length i n i 251 252 if entries i null 253 254 add newentries entries i 255 256 257 258 return newentries 259 26 261 262 Remove entry at a given index Reshuffle as needed 263 264 param i TODO 265 266 private void remove int i 267 268 int empty i 269 27 entries empty null 271 count 272 273 while true 274 275 if i 276 277 i entries length 1 278 279 28 DNSEntry e entries i 281 282 if e null 283 284 return 285 286 287 int j Math abs e key hashCode entries length 288 289 if i empty j i j empty j i 29 j empty 291 292 entries empty e 293 empty i 294 entries empty null 295 296 297 298 299 3 Iterate over all entries 3 1 3 2 private class IterateAll implements Iterator 3 3 3 4 TODO 3 5 int index 3 6 3 7 3 8 Creates a new IterateAll object 3 9 31 IterateAll 311 312 index entries length 1 313 314 315 316 TODO 317 318 return TODO 319 32 public boolean hasNext 321 322 for index index 323 324 if entries index null 325 326 return true 327 328 329 33 return false 331 332 333 334 TODO 335 336 return TODO 337 338 public Object next 339 34 return entries index 341 342 343 344 TODO 345 346 public void remove 347 348 DNSCache this remove index 349 35 351 352 353 Iterate over some entries 354 355 private class IterateKey implements Iterator 356 357 TODO 358 String key 359 36 TODO 361 int index 362 363 364 Creates a new IterateKey object 365 366 param key TODO 367 368 IterateKey String key 369 37 this key key 371 this index Math abs key hashCode entries length 372 373 374 375 TODO 376 377 return TODO 378 379 public boolean hasNext 38 381 while true 382 383 if index 384 385 index entries length 1 386 387 388 DNSEntry e entries index 389 39 if e null 391 392 return false 393 394 395 if e key equals key 396 397 return true 398 399 4 index 4 1 4 2 4 3 4 4 4 5 TODO 4 6 4 7 return TODO 4 8 4 9 public Object next 41 411 return entries index 412 413 414 415 TODO 416 417 public void remove 418 419 DNSCache this remove index 42 421 422 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/javax/jmdns/DNSCache.html", "title": "dnscache xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>DNSCache xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/javax/jmdns/DNSCache.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">// %Z%%M%, %I%, %G%</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\">//</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\">// This library is free software; you can redistribute it and/or</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\">// modify it under the terms of the GNU Lesser General Public</em>\n<a name=\"5\" href=\"#5\">5</a>   <em class=\"comment\">// License as published by the Free Software Foundation; either</em>\n<a name=\"6\" href=\"#6\">6</a>   <em class=\"comment\">// version 2.1 of the License, or (at your option) any later version.</em>\n<a name=\"7\" href=\"#7\">7</a>   <em class=\"comment\">// </em>\n<a name=\"8\" href=\"#8\">8</a>   <em class=\"comment\">// This library is distributed in the hope that it will be useful,</em>\n<a name=\"9\" href=\"#9\">9</a>   <em class=\"comment\">// but WITHOUT ANY WARRANTY; without even the implied warranty of</em>\n<a name=\"10\" href=\"#10\">10</a>  <em class=\"comment\">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</em>\n<a name=\"11\" href=\"#11\">11</a>  <em class=\"comment\">// Lesser General Public License for more details.</em>\n<a name=\"12\" href=\"#12\">12</a>  <em class=\"comment\">// </em>\n<a name=\"13\" href=\"#13\">13</a>  <em class=\"comment\">// You should have received a copy of the GNU Lesser General Public</em>\n<a name=\"14\" href=\"#14\">14</a>  <em class=\"comment\">// License along with this library; if not, write to the Free Software</em>\n<a name=\"15\" href=\"#15\">15</a>  <em class=\"comment\">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</em>\n<a name=\"16\" href=\"#16\">16</a>  <strong>package</strong> <a href=\"../../javax/jmdns/package-summary.html\">javax.jmdns</a>;\n<a name=\"17\" href=\"#17\">17</a>  \n<a name=\"18\" href=\"#18\">18</a>  <strong>import</strong> java.util.Iterator;\n<a name=\"19\" href=\"#19\">19</a>  \n<a name=\"20\" href=\"#20\">20</a>  <em>/**<em>*</em></em>\n<a name=\"21\" href=\"#21\">21</a>  <em> * A table of DNS entries. This is a closed hash table which can handle</em>\n<a name=\"22\" href=\"#22\">22</a>  <em> * multiple entries with the same name. It provides iterators to efficiently</em>\n<a name=\"23\" href=\"#23\">23</a>  <em> * iterate over all the entries with a given name.</em>\n<a name=\"24\" href=\"#24\">24</a>  <em> *</em>\n<a name=\"25\" href=\"#25\">25</a>  <em> * @author Arthur van Hoff</em>\n<a name=\"26\" href=\"#26\">26</a>  <em> * @version %I%, %G%</em>\n<a name=\"27\" href=\"#27\">27</a>  <em> */</em>\n<a name=\"28\" href=\"#28\">28</a>  <strong>class</strong> <a href=\"../../javax/jmdns/DNSCache.html\">DNSCache</a>\n<a name=\"29\" href=\"#29\">29</a>  {\n<a name=\"30\" href=\"#30\">30</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"31\" href=\"#31\">31</a>      <strong>static</strong> <strong>final</strong> <strong>float</strong> LOAD_FACTOR = 0.75f;\n<a name=\"32\" href=\"#32\">32</a>  \n<a name=\"33\" href=\"#33\">33</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"34\" href=\"#34\">34</a>      <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[] entries;\n<a name=\"35\" href=\"#35\">35</a>  \n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"37\" href=\"#37\">37</a>      <strong>float</strong> loadFactor;\n<a name=\"38\" href=\"#38\">38</a>  \n<a name=\"39\" href=\"#39\">39</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"40\" href=\"#40\">40</a>      <strong>int</strong> count;\n<a name=\"41\" href=\"#41\">41</a>  \n<a name=\"42\" href=\"#42\">42</a>      <em>/**<em>*</em></em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * Create a table with a given initial size.</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     *</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     * @param size TODO</em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     */</em>\n<a name=\"47\" href=\"#47\">47</a>      <a href=\"../../javax/jmdns/DNSCache.html\">DNSCache</a>(<strong>int</strong> size)\n<a name=\"48\" href=\"#48\">48</a>      {\n<a name=\"49\" href=\"#49\">49</a>          size = Math.max(2, size * 2);\n<a name=\"50\" href=\"#50\">50</a>  \n<a name=\"51\" href=\"#51\">51</a>          <strong>for</strong>(; ((size % 2) == 0) || ((size % 3) == 0) || ((size % 5) == 0);\n<a name=\"52\" href=\"#52\">52</a>              size++)\n<a name=\"53\" href=\"#53\">53</a>          {\n<a name=\"54\" href=\"#54\">54</a>              ;\n<a name=\"55\" href=\"#55\">55</a>          }\n<a name=\"56\" href=\"#56\">56</a>  \n<a name=\"57\" href=\"#57\">57</a>          <strong>this</strong>.entries = <strong>new</strong> <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[size];\n<a name=\"58\" href=\"#58\">58</a>      }\n<a name=\"59\" href=\"#59\">59</a>  \n<a name=\"60\" href=\"#60\">60</a>      <em>/**<em>*</em></em>\n<a name=\"61\" href=\"#61\">61</a>  <em>     * Add an entry to the table. The table will be grown if it is more than</em>\n<a name=\"62\" href=\"#62\">62</a>  <em>     * 75% full.</em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     *</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     * @param entry TODO</em>\n<a name=\"65\" href=\"#65\">65</a>  <em>     */</em>\n<a name=\"66\" href=\"#66\">66</a>      <strong>void</strong> add(<a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> entry)\n<a name=\"67\" href=\"#67\">67</a>      {\n<a name=\"68\" href=\"#68\">68</a>          <em class=\"comment\">// rehash if necessary</em>\n<a name=\"69\" href=\"#69\">69</a>          <strong>if</strong>(count >= (entries.length * LOAD_FACTOR))\n<a name=\"70\" href=\"#70\">70</a>          {\n<a name=\"71\" href=\"#71\">71</a>              entries = rehash(entries, entries.length * 2);\n<a name=\"72\" href=\"#72\">72</a>          }\n<a name=\"73\" href=\"#73\">73</a>  \n<a name=\"74\" href=\"#74\">74</a>          add(entries, entry);\n<a name=\"75\" href=\"#75\">75</a>          count++;\n<a name=\"76\" href=\"#76\">76</a>      }\n<a name=\"77\" href=\"#77\">77</a>  \n<a name=\"78\" href=\"#78\">78</a>      <em>/**<em>*</em></em>\n<a name=\"79\" href=\"#79\">79</a>  <em>     * Iterate over all entries.</em>\n<a name=\"80\" href=\"#80\">80</a>  <em>     *</em>\n<a name=\"81\" href=\"#81\">81</a>  <em>     * @return TODO</em>\n<a name=\"82\" href=\"#82\">82</a>  <em>     */</em>\n<a name=\"83\" href=\"#83\">83</a>      Iterator all()\n<a name=\"84\" href=\"#84\">84</a>      {\n<a name=\"85\" href=\"#85\">85</a>          <strong>return</strong> <strong>new</strong> IterateAll();\n<a name=\"86\" href=\"#86\">86</a>      }\n<a name=\"87\" href=\"#87\">87</a>  \n<a name=\"88\" href=\"#88\">88</a>      <em>/**<em>*</em></em>\n<a name=\"89\" href=\"#89\">89</a>  <em>     * Iterate only over items with matching name.</em>\n<a name=\"90\" href=\"#90\">90</a>  <em>     *</em>\n<a name=\"91\" href=\"#91\">91</a>  <em>     * @param name TODO</em>\n<a name=\"92\" href=\"#92\">92</a>  <em>     *</em>\n<a name=\"93\" href=\"#93\">93</a>  <em>     * @return TODO</em>\n<a name=\"94\" href=\"#94\">94</a>  <em>     */</em>\n<a name=\"95\" href=\"#95\">95</a>      Iterator find(String name)\n<a name=\"96\" href=\"#96\">96</a>      {\n<a name=\"97\" href=\"#97\">97</a>          <strong>return</strong> <strong>new</strong> IterateKey(name.toLowerCase());\n<a name=\"98\" href=\"#98\">98</a>      }\n<a name=\"99\" href=\"#99\">99</a>  \n<a name=\"100\" href=\"#100\">100</a>     <em>/**<em>*</em></em>\n<a name=\"101\" href=\"#101\">101</a> <em>     * Get a matching DNS entry from the table (using equals). Returns the</em>\n<a name=\"102\" href=\"#102\">102</a> <em>     * entry that was found.</em>\n<a name=\"103\" href=\"#103\">103</a> <em>     *</em>\n<a name=\"104\" href=\"#104\">104</a> <em>     * @param entry TODO</em>\n<a name=\"105\" href=\"#105\">105</a> <em>     *</em>\n<a name=\"106\" href=\"#106\">106</a> <em>     * @return TODO</em>\n<a name=\"107\" href=\"#107\">107</a> <em>     */</em>\n<a name=\"108\" href=\"#108\">108</a>     <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> get(<a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> entry)\n<a name=\"109\" href=\"#109\">109</a>     {\n<a name=\"110\" href=\"#110\">110</a>         <strong>int</strong> i = Math.abs(entry.key.hashCode()) % entries.length;\n<a name=\"111\" href=\"#111\">111</a> \n<a name=\"112\" href=\"#112\">112</a>         <strong>while</strong>(<strong>true</strong>)\n<a name=\"113\" href=\"#113\">113</a>         {\n<a name=\"114\" href=\"#114\">114</a>             <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> e = entries[i];\n<a name=\"115\" href=\"#115\">115</a> \n<a name=\"116\" href=\"#116\">116</a>             <strong>if</strong>(e == <strong>null</strong>)\n<a name=\"117\" href=\"#117\">117</a>             {\n<a name=\"118\" href=\"#118\">118</a>                 <strong>return</strong> <strong>null</strong>;\n<a name=\"119\" href=\"#119\">119</a>             }\n<a name=\"120\" href=\"#120\">120</a> \n<a name=\"121\" href=\"#121\">121</a>             <strong>if</strong>(e.equals(entry))\n<a name=\"122\" href=\"#122\">122</a>             {\n<a name=\"123\" href=\"#123\">123</a>                 <strong>return</strong> e;\n<a name=\"124\" href=\"#124\">124</a>             }\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>             <strong>if</strong>(--i &lt; 0)\n<a name=\"127\" href=\"#127\">127</a>             {\n<a name=\"128\" href=\"#128\">128</a>                 i = entries.length - 1;\n<a name=\"129\" href=\"#129\">129</a>             }\n<a name=\"130\" href=\"#130\">130</a>         }\n<a name=\"131\" href=\"#131\">131</a>     }\n<a name=\"132\" href=\"#132\">132</a> \n<a name=\"133\" href=\"#133\">133</a>     <em>/**<em>*</em></em>\n<a name=\"134\" href=\"#134\">134</a> <em>     * Get a matching DNS entry from the table.</em>\n<a name=\"135\" href=\"#135\">135</a> <em>     *</em>\n<a name=\"136\" href=\"#136\">136</a> <em>     * @param name TODO</em>\n<a name=\"137\" href=\"#137\">137</a> <em>     * @param type TODO</em>\n<a name=\"138\" href=\"#138\">138</a> <em>     * @param clazz TODO</em>\n<a name=\"139\" href=\"#139\">139</a> <em>     *</em>\n<a name=\"140\" href=\"#140\">140</a> <em>     * @return TODO</em>\n<a name=\"141\" href=\"#141\">141</a> <em>     */</em>\n<a name=\"142\" href=\"#142\">142</a>     <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> get(String name, <strong>int</strong> type, <strong>int</strong> clazz)\n<a name=\"143\" href=\"#143\">143</a>     {\n<a name=\"144\" href=\"#144\">144</a>         String key = name.toLowerCase();\n<a name=\"145\" href=\"#145\">145</a>         <strong>int</strong> i = Math.abs(key.hashCode()) % entries.length;\n<a name=\"146\" href=\"#146\">146</a> \n<a name=\"147\" href=\"#147\">147</a>         <strong>while</strong>(<strong>true</strong>)\n<a name=\"148\" href=\"#148\">148</a>         {\n<a name=\"149\" href=\"#149\">149</a>             <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> e = entries[i];\n<a name=\"150\" href=\"#150\">150</a> \n<a name=\"151\" href=\"#151\">151</a>             <strong>if</strong>(e == <strong>null</strong>)\n<a name=\"152\" href=\"#152\">152</a>             {\n<a name=\"153\" href=\"#153\">153</a>                 <strong>return</strong> <strong>null</strong>;\n<a name=\"154\" href=\"#154\">154</a>             }\n<a name=\"155\" href=\"#155\">155</a> \n<a name=\"156\" href=\"#156\">156</a>             <strong>if</strong>(key.equals(e.key) &amp;&amp; (type == e.type) &amp;&amp; (clazz == e.clazz))\n<a name=\"157\" href=\"#157\">157</a>             {\n<a name=\"158\" href=\"#158\">158</a>                 <strong>return</strong> e;\n<a name=\"159\" href=\"#159\">159</a>             }\n<a name=\"160\" href=\"#160\">160</a> \n<a name=\"161\" href=\"#161\">161</a>             <strong>if</strong>(--i &lt; 0)\n<a name=\"162\" href=\"#162\">162</a>             {\n<a name=\"163\" href=\"#163\">163</a>                 i = entries.length - 1;\n<a name=\"164\" href=\"#164\">164</a>             }\n<a name=\"165\" href=\"#165\">165</a>         }\n<a name=\"166\" href=\"#166\">166</a>     }\n<a name=\"167\" href=\"#167\">167</a> \n<a name=\"168\" href=\"#168\">168</a>     <em>/**<em>*</em></em>\n<a name=\"169\" href=\"#169\">169</a> <em>     * List all entries for debugging.</em>\n<a name=\"170\" href=\"#170\">170</a> <em>     */</em>\n<a name=\"171\" href=\"#171\">171</a>     <strong>void</strong> print()\n<a name=\"172\" href=\"#172\">172</a>     {\n<a name=\"173\" href=\"#173\">173</a>         <strong>for</strong>(Iterator i = all(); i.hasNext();)\n<a name=\"174\" href=\"#174\">174</a>         {\n<a name=\"175\" href=\"#175\">175</a>             System.out.println(i.next());\n<a name=\"176\" href=\"#176\">176</a>         }\n<a name=\"177\" href=\"#177\">177</a>     }\n<a name=\"178\" href=\"#178\">178</a> \n<a name=\"179\" href=\"#179\">179</a>     <em>/**<em>*</em></em>\n<a name=\"180\" href=\"#180\">180</a> <em>     * Remove a specific entry from the table. Returns true if the entry was</em>\n<a name=\"181\" href=\"#181\">181</a> <em>     * found.</em>\n<a name=\"182\" href=\"#182\">182</a> <em>     *</em>\n<a name=\"183\" href=\"#183\">183</a> <em>     * @param entry TODO</em>\n<a name=\"184\" href=\"#184\">184</a> <em>     *</em>\n<a name=\"185\" href=\"#185\">185</a> <em>     * @return TODO</em>\n<a name=\"186\" href=\"#186\">186</a> <em>     */</em>\n<a name=\"187\" href=\"#187\">187</a>     <strong>boolean</strong> remove(<a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> entry)\n<a name=\"188\" href=\"#188\">188</a>     {\n<a name=\"189\" href=\"#189\">189</a>         <strong>int</strong> i = Math.abs(entry.key.hashCode()) % entries.length;\n<a name=\"190\" href=\"#190\">190</a> \n<a name=\"191\" href=\"#191\">191</a>         <strong>while</strong>(<strong>true</strong>)\n<a name=\"192\" href=\"#192\">192</a>         {\n<a name=\"193\" href=\"#193\">193</a>             <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> e = entries[i];\n<a name=\"194\" href=\"#194\">194</a> \n<a name=\"195\" href=\"#195\">195</a>             <strong>if</strong>(e == <strong>null</strong>)\n<a name=\"196\" href=\"#196\">196</a>             {\n<a name=\"197\" href=\"#197\">197</a>                 <strong>return</strong> false;\n<a name=\"198\" href=\"#198\">198</a>             }\n<a name=\"199\" href=\"#199\">199</a> \n<a name=\"200\" href=\"#200\">200</a>             <strong>if</strong>(e == entry)\n<a name=\"201\" href=\"#201\">201</a>             {\n<a name=\"202\" href=\"#202\">202</a>                 remove(i);\n<a name=\"203\" href=\"#203\">203</a> \n<a name=\"204\" href=\"#204\">204</a>                 <strong>return</strong> <strong>true</strong>;\n<a name=\"205\" href=\"#205\">205</a>             }\n<a name=\"206\" href=\"#206\">206</a> \n<a name=\"207\" href=\"#207\">207</a>             <strong>if</strong>(--i &lt; 0)\n<a name=\"208\" href=\"#208\">208</a>             {\n<a name=\"209\" href=\"#209\">209</a>                 i = entries.length - 1;\n<a name=\"210\" href=\"#210\">210</a>             }\n<a name=\"211\" href=\"#211\">211</a>         }\n<a name=\"212\" href=\"#212\">212</a>     }\n<a name=\"213\" href=\"#213\">213</a> \n<a name=\"214\" href=\"#214\">214</a>     <em>/**<em>*</em></em>\n<a name=\"215\" href=\"#215\">215</a> <em>     * Add an entry to a table.</em>\n<a name=\"216\" href=\"#216\">216</a> <em>     *</em>\n<a name=\"217\" href=\"#217\">217</a> <em>     * @param entries TODO</em>\n<a name=\"218\" href=\"#218\">218</a> <em>     * @param entry TODO</em>\n<a name=\"219\" href=\"#219\">219</a> <em>     */</em>\n<a name=\"220\" href=\"#220\">220</a>     <strong>private</strong> <strong>void</strong> add(<a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[] entries, <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> entry)\n<a name=\"221\" href=\"#221\">221</a>     {\n<a name=\"222\" href=\"#222\">222</a>         <strong>int</strong> i = Math.abs(entry.key.hashCode()) % entries.length;\n<a name=\"223\" href=\"#223\">223</a> \n<a name=\"224\" href=\"#224\">224</a>         <strong>while</strong>(entries[i] != <strong>null</strong>)\n<a name=\"225\" href=\"#225\">225</a>         {\n<a name=\"226\" href=\"#226\">226</a>             i = ((i == 0) ? entries.length : i) - 1;\n<a name=\"227\" href=\"#227\">227</a>         }\n<a name=\"228\" href=\"#228\">228</a> \n<a name=\"229\" href=\"#229\">229</a>         entries[i] = entry;\n<a name=\"230\" href=\"#230\">230</a>     }\n<a name=\"231\" href=\"#231\">231</a> \n<a name=\"232\" href=\"#232\">232</a>     <em>/**<em>*</em></em>\n<a name=\"233\" href=\"#233\">233</a> <em>     * Rehash a table.</em>\n<a name=\"234\" href=\"#234\">234</a> <em>     *</em>\n<a name=\"235\" href=\"#235\">235</a> <em>     * @param entries TODO</em>\n<a name=\"236\" href=\"#236\">236</a> <em>     * @param size TODO</em>\n<a name=\"237\" href=\"#237\">237</a> <em>     *</em>\n<a name=\"238\" href=\"#238\">238</a> <em>     * @return TODO</em>\n<a name=\"239\" href=\"#239\">239</a> <em>     */</em>\n<a name=\"240\" href=\"#240\">240</a>     <strong>private</strong> <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[] rehash(<a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[] entries, <strong>int</strong> size)\n<a name=\"241\" href=\"#241\">241</a>     {\n<a name=\"242\" href=\"#242\">242</a>         <strong>for</strong>(; ((size % 2) == 0) || ((size % 3) == 0) || ((size % 5) == 0);\n<a name=\"243\" href=\"#243\">243</a>             size++)\n<a name=\"244\" href=\"#244\">244</a>         {\n<a name=\"245\" href=\"#245\">245</a>             ;\n<a name=\"246\" href=\"#246\">246</a>         }\n<a name=\"247\" href=\"#247\">247</a> \n<a name=\"248\" href=\"#248\">248</a>         <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[] <strong>new</strong>entries = <strong>new</strong> <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a>[size];\n<a name=\"249\" href=\"#249\">249</a> \n<a name=\"250\" href=\"#250\">250</a>         <strong>for</strong>(<strong>int</strong> i = 0, n = entries.length; i &lt; n; i++)\n<a name=\"251\" href=\"#251\">251</a>         {\n<a name=\"252\" href=\"#252\">252</a>             <strong>if</strong>(entries[i] != <strong>null</strong>)\n<a name=\"253\" href=\"#253\">253</a>             {\n<a name=\"254\" href=\"#254\">254</a>                 add(newentries, entries[i]);\n<a name=\"255\" href=\"#255\">255</a>             }\n<a name=\"256\" href=\"#256\">256</a>         }\n<a name=\"257\" href=\"#257\">257</a> \n<a name=\"258\" href=\"#258\">258</a>         <strong>return</strong> newentries;\n<a name=\"259\" href=\"#259\">259</a>     }\n<a name=\"260\" href=\"#260\">260</a> \n<a name=\"261\" href=\"#261\">261</a>     <em>/**<em>*</em></em>\n<a name=\"262\" href=\"#262\">262</a> <em>     * Remove entry at a given index. Reshuffle as needed.</em>\n<a name=\"263\" href=\"#263\">263</a> <em>     *</em>\n<a name=\"264\" href=\"#264\">264</a> <em>     * @param i TODO</em>\n<a name=\"265\" href=\"#265\">265</a> <em>     */</em>\n<a name=\"266\" href=\"#266\">266</a>     <strong>private</strong> <strong>void</strong> remove(<strong>int</strong> i)\n<a name=\"267\" href=\"#267\">267</a>     {\n<a name=\"268\" href=\"#268\">268</a>         <strong>int</strong> empty = i;\n<a name=\"269\" href=\"#269\">269</a> \n<a name=\"270\" href=\"#270\">270</a>         entries[empty] = <strong>null</strong>;\n<a name=\"271\" href=\"#271\">271</a>         count--;\n<a name=\"272\" href=\"#272\">272</a> \n<a name=\"273\" href=\"#273\">273</a>         <strong>while</strong>(<strong>true</strong>)\n<a name=\"274\" href=\"#274\">274</a>         {\n<a name=\"275\" href=\"#275\">275</a>             <strong>if</strong>(--i &lt; 0)\n<a name=\"276\" href=\"#276\">276</a>             {\n<a name=\"277\" href=\"#277\">277</a>                 i = entries.length - 1;\n<a name=\"278\" href=\"#278\">278</a>             }\n<a name=\"279\" href=\"#279\">279</a> \n<a name=\"280\" href=\"#280\">280</a>             <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> e = entries[i];\n<a name=\"281\" href=\"#281\">281</a> \n<a name=\"282\" href=\"#282\">282</a>             <strong>if</strong>(e == <strong>null</strong>)\n<a name=\"283\" href=\"#283\">283</a>             {\n<a name=\"284\" href=\"#284\">284</a>                 <strong>return</strong>;\n<a name=\"285\" href=\"#285\">285</a>             }\n<a name=\"286\" href=\"#286\">286</a> \n<a name=\"287\" href=\"#287\">287</a>             <strong>int</strong> j = Math.abs(e.key.hashCode()) % entries.length;\n<a name=\"288\" href=\"#288\">288</a> \n<a name=\"289\" href=\"#289\">289</a>             <strong>if</strong>((i &lt; empty) ? ((j &lt; i) || (j >= empty)) : ((j &lt; i)\n<a name=\"290\" href=\"#290\">290</a>                            &amp;&amp; (j >= empty)))\n<a name=\"291\" href=\"#291\">291</a>             {\n<a name=\"292\" href=\"#292\">292</a>                 entries[empty] = e;\n<a name=\"293\" href=\"#293\">293</a>                 empty = i;\n<a name=\"294\" href=\"#294\">294</a>                 entries[empty] = <strong>null</strong>;\n<a name=\"295\" href=\"#295\">295</a>             }\n<a name=\"296\" href=\"#296\">296</a>         }\n<a name=\"297\" href=\"#297\">297</a>     }\n<a name=\"298\" href=\"#298\">298</a> \n<a name=\"299\" href=\"#299\">299</a>     <em>/**<em>*</em></em>\n<a name=\"300\" href=\"#300\">300</a> <em>     * Iterate over all entries.</em>\n<a name=\"301\" href=\"#301\">301</a> <em>     */</em>\n<a name=\"302\" href=\"#302\">302</a>     <strong>private</strong> <strong>class</strong> IterateAll implements Iterator\n<a name=\"303\" href=\"#303\">303</a>     {\n<a name=\"304\" href=\"#304\">304</a>         <em>/**<em>* TODO */</em></em>\n<a name=\"305\" href=\"#305\">305</a>         <strong>int</strong> index;\n<a name=\"306\" href=\"#306\">306</a> \n<a name=\"307\" href=\"#307\">307</a>         <em>/**<em>*</em></em>\n<a name=\"308\" href=\"#308\">308</a> <em>         * Creates a new IterateAll object.</em>\n<a name=\"309\" href=\"#309\">309</a> <em>         */</em>\n<a name=\"310\" href=\"#310\">310</a>         IterateAll()\n<a name=\"311\" href=\"#311\">311</a>         {\n<a name=\"312\" href=\"#312\">312</a>             index = entries.length - 1;\n<a name=\"313\" href=\"#313\">313</a>         }\n<a name=\"314\" href=\"#314\">314</a> \n<a name=\"315\" href=\"#315\">315</a>         <em>/**<em>*</em></em>\n<a name=\"316\" href=\"#316\">316</a> <em>         * TODO</em>\n<a name=\"317\" href=\"#317\">317</a> <em>         *</em>\n<a name=\"318\" href=\"#318\">318</a> <em>         * @return TODO</em>\n<a name=\"319\" href=\"#319\">319</a> <em>         */</em>\n<a name=\"320\" href=\"#320\">320</a>         <strong>public</strong> <strong>boolean</strong> hasNext()\n<a name=\"321\" href=\"#321\">321</a>         {\n<a name=\"322\" href=\"#322\">322</a>             <strong>for</strong>(; index >= 0; index--)\n<a name=\"323\" href=\"#323\">323</a>             {\n<a name=\"324\" href=\"#324\">324</a>                 <strong>if</strong>(entries[index] != <strong>null</strong>)\n<a name=\"325\" href=\"#325\">325</a>                 {\n<a name=\"326\" href=\"#326\">326</a>                     <strong>return</strong> <strong>true</strong>;\n<a name=\"327\" href=\"#327\">327</a>                 }\n<a name=\"328\" href=\"#328\">328</a>             }\n<a name=\"329\" href=\"#329\">329</a> \n<a name=\"330\" href=\"#330\">330</a>             <strong>return</strong> false;\n<a name=\"331\" href=\"#331\">331</a>         }\n<a name=\"332\" href=\"#332\">332</a> \n<a name=\"333\" href=\"#333\">333</a>         <em>/**<em>*</em></em>\n<a name=\"334\" href=\"#334\">334</a> <em>         * TODO</em>\n<a name=\"335\" href=\"#335\">335</a> <em>         *</em>\n<a name=\"336\" href=\"#336\">336</a> <em>         * @return TODO</em>\n<a name=\"337\" href=\"#337\">337</a> <em>         */</em>\n<a name=\"338\" href=\"#338\">338</a>         <strong>public</strong> Object next()\n<a name=\"339\" href=\"#339\">339</a>         {\n<a name=\"340\" href=\"#340\">340</a>             <strong>return</strong> entries[index--];\n<a name=\"341\" href=\"#341\">341</a>         }\n<a name=\"342\" href=\"#342\">342</a> \n<a name=\"343\" href=\"#343\">343</a>         <em>/**<em>*</em></em>\n<a name=\"344\" href=\"#344\">344</a> <em>         * TODO</em>\n<a name=\"345\" href=\"#345\">345</a> <em>         */</em>\n<a name=\"346\" href=\"#346\">346</a>         <strong>public</strong> <strong>void</strong> remove()\n<a name=\"347\" href=\"#347\">347</a>         {\n<a name=\"348\" href=\"#348\">348</a>             DNSCache.<strong>this</strong>.remove(++index);\n<a name=\"349\" href=\"#349\">349</a>         }\n<a name=\"350\" href=\"#350\">350</a>     }\n<a name=\"351\" href=\"#351\">351</a> \n<a name=\"352\" href=\"#352\">352</a>     <em>/**<em>*</em></em>\n<a name=\"353\" href=\"#353\">353</a> <em>     * Iterate over some entries.</em>\n<a name=\"354\" href=\"#354\">354</a> <em>     */</em>\n<a name=\"355\" href=\"#355\">355</a>     <strong>private</strong> <strong>class</strong> IterateKey implements Iterator\n<a name=\"356\" href=\"#356\">356</a>     {\n<a name=\"357\" href=\"#357\">357</a>         <em>/**<em>* TODO */</em></em>\n<a name=\"358\" href=\"#358\">358</a>         String key;\n<a name=\"359\" href=\"#359\">359</a> \n<a name=\"360\" href=\"#360\">360</a>         <em>/**<em>* TODO */</em></em>\n<a name=\"361\" href=\"#361\">361</a>         <strong>int</strong> index;\n<a name=\"362\" href=\"#362\">362</a> \n<a name=\"363\" href=\"#363\">363</a>         <em>/**<em>*</em></em>\n<a name=\"364\" href=\"#364\">364</a> <em>         * Creates a new IterateKey object.</em>\n<a name=\"365\" href=\"#365\">365</a> <em>         *</em>\n<a name=\"366\" href=\"#366\">366</a> <em>         * @param key TODO</em>\n<a name=\"367\" href=\"#367\">367</a> <em>         */</em>\n<a name=\"368\" href=\"#368\">368</a>         IterateKey(String key)\n<a name=\"369\" href=\"#369\">369</a>         {\n<a name=\"370\" href=\"#370\">370</a>             <strong>this</strong>.key = key;\n<a name=\"371\" href=\"#371\">371</a>             <strong>this</strong>.index = Math.abs(key.hashCode()) % entries.length;\n<a name=\"372\" href=\"#372\">372</a>         }\n<a name=\"373\" href=\"#373\">373</a> \n<a name=\"374\" href=\"#374\">374</a>         <em>/**<em>*</em></em>\n<a name=\"375\" href=\"#375\">375</a> <em>         * TODO</em>\n<a name=\"376\" href=\"#376\">376</a> <em>         *</em>\n<a name=\"377\" href=\"#377\">377</a> <em>         * @return TODO</em>\n<a name=\"378\" href=\"#378\">378</a> <em>         */</em>\n<a name=\"379\" href=\"#379\">379</a>         <strong>public</strong> <strong>boolean</strong> hasNext()\n<a name=\"380\" href=\"#380\">380</a>         {\n<a name=\"381\" href=\"#381\">381</a>             <strong>while</strong>(<strong>true</strong>)\n<a name=\"382\" href=\"#382\">382</a>             {\n<a name=\"383\" href=\"#383\">383</a>                 <strong>if</strong>(index &lt; 0)\n<a name=\"384\" href=\"#384\">384</a>                 {\n<a name=\"385\" href=\"#385\">385</a>                     index = entries.length - 1;\n<a name=\"386\" href=\"#386\">386</a>                 }\n<a name=\"387\" href=\"#387\">387</a> \n<a name=\"388\" href=\"#388\">388</a>                 <a href=\"../../javax/jmdns/DNSEntry.html\">DNSEntry</a> e = entries[index];\n<a name=\"389\" href=\"#389\">389</a> \n<a name=\"390\" href=\"#390\">390</a>                 <strong>if</strong>(e == <strong>null</strong>)\n<a name=\"391\" href=\"#391\">391</a>                 {\n<a name=\"392\" href=\"#392\">392</a>                     <strong>return</strong> false;\n<a name=\"393\" href=\"#393\">393</a>                 }\n<a name=\"394\" href=\"#394\">394</a> \n<a name=\"395\" href=\"#395\">395</a>                 <strong>if</strong>(e.key.equals(key))\n<a name=\"396\" href=\"#396\">396</a>                 {\n<a name=\"397\" href=\"#397\">397</a>                     <strong>return</strong> <strong>true</strong>;\n<a name=\"398\" href=\"#398\">398</a>                 }\n<a name=\"399\" href=\"#399\">399</a> \n<a name=\"400\" href=\"#400\">400</a>                 index--;\n<a name=\"401\" href=\"#401\">401</a>             }\n<a name=\"402\" href=\"#402\">402</a>         }\n<a name=\"403\" href=\"#403\">403</a> \n<a name=\"404\" href=\"#404\">404</a>         <em>/**<em>*</em></em>\n<a name=\"405\" href=\"#405\">405</a> <em>         * TODO</em>\n<a name=\"406\" href=\"#406\">406</a> <em>         *</em>\n<a name=\"407\" href=\"#407\">407</a> <em>         * @return TODO</em>\n<a name=\"408\" href=\"#408\">408</a> <em>         */</em>\n<a name=\"409\" href=\"#409\">409</a>         <strong>public</strong> Object next()\n<a name=\"410\" href=\"#410\">410</a>         {\n<a name=\"411\" href=\"#411\">411</a>             <strong>return</strong> entries[index--];\n<a name=\"412\" href=\"#412\">412</a>         }\n<a name=\"413\" href=\"#413\">413</a> \n<a name=\"414\" href=\"#414\">414</a>         <em>/**<em>*</em></em>\n<a name=\"415\" href=\"#415\">415</a> <em>         * TODO</em>\n<a name=\"416\" href=\"#416\">416</a> <em>         */</em>\n<a name=\"417\" href=\"#417\">417</a>         <strong>public</strong> <strong>void</strong> remove()\n<a name=\"418\" href=\"#418\">418</a>         {\n<a name=\"419\" href=\"#419\">419</a>             DNSCache.<strong>this</strong>.remove(++index);\n<a name=\"420\" href=\"#420\">420</a>         }\n<a name=\"421\" href=\"#421\">421</a>     }\n<a name=\"422\" href=\"#422\">422</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32853.0}