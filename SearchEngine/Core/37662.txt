{"text": "Navigation Up Table of Contents Bibliography Index Title Page PlanarMapWithIntersectionsTraits 2 DefinitionA model of the PlanarMapWithIntersectionsTraits 2 concept aggregates the geometric types and primitive operations used by the Planar map with intersections 2 Planar map data structure Note that the concept PlanarMapWithIntersectionsTraits 2 refines the concept PlanarMapTraits 2 and inherits all its types and operations In addition to the requirements of the PlanarMapTraits 2 concept it must provide the types and operations listed below RefinesPlanarMapTraits 2 Types The geometric types defined below must have a default constructor copy constructor and assignment operator PlanarMapWithIntersectionsTraits 2 Curve 2 A type that holds a general curve in the plane Its endpoints must be of type Point 2 Curves of type Curve 2 can be inserted into a Planar map with intersections 2 Dcel Traits object and are automatically split into X monotone curve 2 objects Creation PlanarMapWithIntersectionsTraits 2 pmwx traits A default constructor Operations The following methods that have a curve parameter of type X monotone curve 2 have the implicit precondition that requires the curve to be x monotone bool pmwx traits curves overlap X monotone curve 2 cv1 X monotone curve 2 cv2 returns true if cv1 and cv2 overlap in a one dimensional subcurve i e at an infinite and uncountable number of points false otherwise template class OutputIterator OutputIterator pmwx traits make x monotone Curve 2 cv OutputIterator res cuts cv into x monotone subcurves and stores them in a sequence starting at res The order in which they are stored defines their order in the hierarchy tree Returns past the end iterator of the sequence The value type of the output iterators must be X monotone curve 2 void pmwx traits curve split X monotone curve 2 cv X monotone curve 2 c1 X monotone curve 2 c2 Point 2 split pt splits cv at split pt into two curves and assigns them to c1 and c2 respectively Precondition split pt is on cv but is not one of its endpoints bool pmwx traits nearest intersection to right X monotone curve 2 c1 X monotone curve 2 c2 Point 2 pt finds the nearest intersection of c1 and c2 lexicographically to the right of a reference point pt and returns an object that represents the intersection if exists or an empty object otherwise Nearest is defined as the lexicographically nearest point not including the reference point itself If the intersection of the two curves is an X monotone curve 2 that is there is an overlapping subcurve that contains the reference point in its x range it returns an X monotone curve 2 whose interior is strictly to the right of the reference point that is whose left endpoint is the projection of the reference point onto the overlapping subcurve bool pmwx traits nearest intersection to left X monotone curve c1 X monotone curve c2 Point 2 pt finds the nearest intersection of c1 and c2 lexicographically to the left of a reference point pt and returns an object that represents the intersection if exists or an empty object otherwise Nearest is defined as the lexicographically nearest point not including the reference point itself If the intersection of the two curves is an X monotone curve 2 that is there is an overlapping subcurve that contains the reference point in its x range it returns an X monotone curve 2 whose interior is strictly to the left of the reference point that is whose right endpoint is the projection of the reference point onto the overlapping subcurve Has ModelsThe following classes are actually models of the ArrangementTraits 2 concept that is a refinment of the PlanarMapWithIntersectionsTraits 2 concept Arr segment traits 2 Kernel Arr segment cached traits 2 Kernel Arr polyline traits Kernel Container Arr conic traits 2 Kernel Next PlanarMapWithIntersectionsChangeNotification 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Pm_with_intersections_2_ref/Concept_PlanarMapWithIntersectionsTraits_2.html", "title": "planarmapwithintersectionstraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Pm_with_intersections_2_ref/Pmwx_traits.tex' -->\n<html> <head>  \n<title>PlanarMapWithIntersectionsTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_818\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_812\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_PlanarMapWithIntersectionsTraits_2\"></A>\n<h2><I>PlanarMapWithIntersectionsTraits_2</I></h2>\n<P>\n\n<H3>Definition</H3>A model of the <I><A HREF=\"Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A></I> concept aggregates the geometric types and\nprimitive operations used by the \n<I><A HREF=\"Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A>&lt;Planar_map&gt;</I> data structure.\n<P>\n\nNote that the concept <I><A HREF=\"Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A></I> refines the concept <I><A HREF=\"../Planar_map_ref/Concept_PlanarMapTraits_2.html#Cross_link_anchor_800\">PlanarMapTraits_2</A></I>\nand inherits all its types and operations.\n<P>\n\nIn addition to the requirements of the <I><A HREF=\"../Planar_map_ref/Concept_PlanarMapTraits_2.html#Cross_link_anchor_800\">PlanarMapTraits_2</A></I> concept, it must\nprovide the types and operations listed below.\n<P>\n\n<H3>Refines</H3><I><A HREF=\"../Planar_map_ref/Concept_PlanarMapTraits_2.html#Cross_link_anchor_800\">PlanarMapTraits_2</A></I> .\n<P>\n\n<H3>Types</H3>\n<P>\n\nThe geometric types defined below must have a default constructor,\ncopy constructor, and assignment operator.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A>::Curve_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type that holds a general curve in the plane.\n  Its endpoints must be of type <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n  Curves of type <I>Curve_2</I> can be inserted into a \n  <I><A HREF=\"Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A>&lt;Dcel,Traits&gt;</I> object and are \n  automatically split into <I>X_monotone_curve_2</I> objects.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A> pmwx_traits;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A default constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe following methods that have a curve parameter of type\n<I>X_monotone_curve_2</I> have the implicit precondition that requires the\ncurve to be <MATH><I>x</I></MATH>-monotone.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_curves_overlap6const_X_monotone_curve_2__cv1+_const_X_monotone_curve_2__cv29;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    pmwx_traits.curves_overlap ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv1,<BR>\n\nX_monotone_curve_2 cv2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if <I>cv1</I> and <I>cv2</I> overlap\n          in a one-dimensional subcurve (i.e. at an infinite and uncountable \n          number of points), <I>false</I>. otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_make_x_monotone6const_Curve_2__cv+_OutputIterator_res9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    pmwx_traits.make_x_monotone ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Curve_2 cv,<BR>\n\nOutputIterator res)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    cuts <I>cv</I> into <MATH><I>x</I></MATH>-monotone subcurves and stores them in a\n\t  sequence starting at <I>res</I>. The order in which they are stored\n\t  defines their order in the hierarchy tree. Returns past-the-end\n\t  iterator of the sequence. The value type of the output iterators\n          must be <I>X_monotone_curve_2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_curve_split6const_X_monotone_curve_2__cv+_X_monotone_curve_2__c1+_X_monotone_curve_2__c2+_const_Point_2__split_pt9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    pmwx_traits.curve_split ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 cv,<BR>\n\nX_monotone_curve_2&amp; c1,<BR>\n\nX_monotone_curve_2&amp; c2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> split_pt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    splits <MATH><I>cv</I></MATH> at <I>split_pt</I> into two curves, and assigns them to\n           <I>c1</I> and <I>c2</I> respectively.<BR>\n\n<EM>Precondition: </EM><I>split_pt</I> is on <I>cv</I> but is not one of its\n\t     endpoints.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_nearest_intersection_to_right6const_X_monotone_curve_2__c1+_const_X_monotone_curve_2__c2+_const_Point_2__pt9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    pmwx_traits.nearest_intersection_to_right ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve_2 c1,<BR>\n\nX_monotone_curve_2 c2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    finds the nearest <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of <I>c1</I> and\n\t  <I>c2</I> lexicographically to the right of a reference point\n\t  <I>pt</I>, and returns an object that represents the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> if\n\t  exists, or an empty object otherwise.\n          Nearest is defined as the lexicographically nearest point, not\n\t  including the reference point itself. If the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the\n\t  two curves is an <I>X_monotone_curve_2</I>, that is, there is an\n\t  overlapping subcurve, that contains the reference point in its\n\t  <MATH><I>x</I></MATH>-range, it returns an <I>X_monotone_curve_2</I> whose interior is\n\t  strictly to the right of the reference point (that is, whose\n\t  left endpoint is the projection of the reference point onto the \n\t  overlapping subcurve).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_nearest_intersection_to_left6const_X_monotone_curve__c1+_const_X_monotone_curve__c2+_const_Point_2__pt9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    pmwx_traits.nearest_intersection_to_left ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     X_monotone_curve c1,<BR>\n\nX_monotone_curve c2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    finds the nearest <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of <I>c1</I> and\n\t  <I>c2</I> lexicographically to the left of a reference point\n\t  <I>pt</I>, and returns an object that represents the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> if\n\t  exists, or an empty object otherwise.\n          Nearest is defined as the lexicographically nearest point, not\n\t  including the reference point itself. If the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the\n\t  two curves is an <I>X_monotone_curve_2</I>, that is, there is an\n\t  overlapping subcurve, that contains the reference point in its\n\t  <MATH><I>x</I></MATH>-range, it returns an <I>X_monotone_curve_2</I> whose interior is\n\t  strictly to the left of the reference point (that is, whose\n\t  right endpoint is the projection of the reference point onto the \n\t  overlapping subcurve).\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>The following classes are actually models of the <I><A HREF=\"../Arrangement_2_ref/Concept_ArrangementTraits_2.html#Cross_link_anchor_835\">ArrangementTraits_2</A></I> \nconcept, that is a refinment of the <I><A HREF=\"Concept_PlanarMapWithIntersectionsTraits_2.html#Cross_link_anchor_818\">PlanarMapWithIntersectionsTraits_2</A></I> concept.\n<P>\n\n<I><A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_837\">Arr_segment_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I><A HREF=\"../Arrangement_2_ref/Class_Arr_segment_cached_traits_2.html#Cross_link_anchor_839\">Arr_segment_cached_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I><BR>\n\n<I>Arr_polyline_traits&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>, Container&gt;</I><BR>\n\n<I><A HREF=\"../Arrangement_2_ref/Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_PlanarMapWithIntersectionsChangeNotification_2.html\"><I>PlanarMapWithIntersectionsChangeNotification_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_22!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37662.0}