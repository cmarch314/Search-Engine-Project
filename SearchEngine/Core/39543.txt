{"text": "Navigation Up Table of Contents Bibliography Index Title Page Handle Definition Most data structures in CGAL use the concept of Handle in their user interface to refer to the elements they store This concept describes what is sometimes called a trivial iterator A Handle is akeen to a pointer to an object providing the dereference operator operator and member access operator but no increment or decrement operators like iterators A Handle is intended to be used whenever the referenced object is not part of a logical sequence Like iterators the handle can be passed as template argument to std iterators traits in order to extract its value type the type of the element pointed to The iterator category is void RefinesDefaultConstructible CopyConstructible Assignable EqualityComparable The default constructed object must be unique as far as the equality operator is concerned this serves the same purpose as NULL for pointers Note that this is not a generally supported feature of iterators of standard containers Creation Dereference value type h returns the object pointed to value type h returns a pointer to the object pointed to Has Modelspointers const pointers iterators circulators Next is empty range Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Handle_ref/Concept_Handle.html", "title": "handle", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Handle_ref/Handle.tex' -->\n<html> <head>  \n<title>Handle</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"../Circulator_ref/Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1663\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1518\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_Handle\"></A>\n<h2><I>Handle</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nMost data structures in C<SMALL>GAL</SMALL> use the concept of <I><A HREF=\"Concept_Handle.html#Cross_link_anchor_1663\">Handle</A></I> in their user\ninterface to refer to the elements they store.  This concept describes what is\nsometimes called a trivial iterator.  A <I><A HREF=\"Concept_Handle.html#Cross_link_anchor_1663\">Handle</A></I> is akeen to a pointer to\nan object providing the dereference operator <I>operator*()</I> and member\naccess <I>operator-&gt;()</I> but no increment or decrement operators like\niterators.  A <I><A HREF=\"Concept_Handle.html#Cross_link_anchor_1663\">Handle</A></I> is intended to be used whenever the referenced\nobject is not part of a logical sequence.\n<P>\n\nLike iterators, the handle can be passed as template argument to\n<I>std::iterators_traits</I> in order to extract its <I>value_type</I>,\nthe type of the element pointed to.\nThe <I>iterator_category</I> is <I>void</I>.\n<P>\n\n<H3>Refines</H3>DefaultConstructible, CopyConstructible, Assignable, EqualityComparable\n<P>\n\nThe default constructed object must be unique as far as the equality\noperator is concerned (this serves the same purpose as NULL for pointers).\n(Note that this is not a generally supported feature of iterators of\nstandard containers.)\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<H3>Dereference</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    value_type&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    * h  <A NAME=\"Function_value_type__operator*69;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the object pointed to.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    value_type*\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     h  -&gt;<A NAME=\"Function_value_type*_operator-969;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a pointer to the object pointed to.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>pointers<BR>\n\nconst pointers<BR>\n\niterators<BR>\n\ncirculators\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"../Circulator_ref/Function_is_empty_range.html\"><I>is_empty_range</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39543.0}