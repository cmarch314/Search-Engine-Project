{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 17 Pattern Matching Up 17 Pattern Matching Next 17 2 Using Query Molecules 17 1 Using SMARTS The most common method describing a substructure to search for is to use a SMARTS string A complete description of the SMARTS language is beyond the scope of this document but there are a couple of references available Assuming you have a SMARTS pattern that describes your search criteria OEChem makes it very easy to search large numbers of molecules very efficiently Additionally you can return just the existence of a match or you can get access to the actual atoms in the target molecule that matched the pattern In order to search for substructures you create an instance of the OESubSearch class initialize it with the SMARTS pattern and the perform the search The following example will read in a file and print out the SMILES for all that contain a benzene ring c1ccccc1 ch17 1 py from openeye oechem import import os sys create a subsearch object and initialize pat OESubSearch pat Init c1ccccc1 open the input stream ifs oemolistream drugs sdf open stdout as output stream and set to SMILES ofs oemolostream ofs SetFormat OEFormat SMI loop over molecules for mol in ifs GetOEMols just check for a match print if found if pat SingleMatch mol 1 OEWriteMolecule ofs mol The above example only show the existence of the match not the actual atoms in the target molecule that match the query OEChem provides a rich set of functions for find the unique substructures or all that match a query and for extracting this information from the target molecule In the next example we will use the same basic code as ch17 1 py but will retrieve the actual atom matches from the OESubSearch While the SingleMatch method returns true or false the Match method is a generator method that returns all the matches as instances of the OEMatchBase in a loop The Match method takes a molecule as the first argument and a second argument that if true returns only unique matches Run the following example with the second argument to Match as 1 and then as to see the difference in the two behaviors ch17 2 py from openeye oechem import import os sys create a subsearch object and initialize pat OESubSearch pat Init c1ccccc1 open the input stream ifs oemolistream drugs sdf open stdout as output stream and set to SMILES ofs oemolostream ofs SetFormat OEFormat SMI loop over molecules for mol in ifs GetOEMols OETriposAtomNames mol print mol GetTitle matchcount for matchbase in pat Match mol 1 print Match matchcount for matchpair in matchbase GetAtoms print matchpair target GetName matchcount 1 print As each OEMatchBase is returned from the Match generator method a second loop can loop over either the atoms or bonds of the match The above example used the GetAtoms method of the OEMatchBase Each time through the loop matchpair is an instance of OEMatchPair with the target a reference to the corresponding atom in the target structure and pattern a reference to the matching atom in the OESubSearch instance A corresponding GetBonds method provide a loop over all the bonds in the match OEChem Python Theory Manual Version 1 3 1 Previous 17 Pattern Matching Up 17 Pattern Matching Next 17 2 Using Query Molecules Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node149.html", "title": "17.1 using smarts", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>17.1 Using SMARTS</title>\n<META NAME=\"description\" CONTENT=\"17.1 Using SMARTS\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node150.html\">\n<LINK REL=\"previous\" HREF=\"node148.html\">\n<LINK REL=\"up\" HREF=\"node148.html\">\n<LINK REL=\"next\" HREF=\"node150.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node150.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node150.html\">17.2 Using Query Molecules</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0019100000000000000000\">\n17.1 Using SMARTS</A>\n</H1>\n\n<P>\nThe most common method describing a substructure to search for is to\nuse a SMARTS string. A complete description of the SMARTS language is\nbeyond the scope of this document, but there are a couple of\nreferences available.\n\n<P>\nAssuming you have a SMARTS pattern that describes your search\ncriteria, OEChem makes it very easy to search large numbers of\nmolecules very efficiently.  Additionally, you can return just the\nexistence of a match or you can get access to the actual atoms in the\ntarget molecule that matched the pattern. In order to search for\nsubstructures, you create an instance of the OESubSearch class,\ninitialize it with the SMARTS pattern and the perform the search. The\nfollowing example will read in a file and print out the SMILES for all\nthat contain a benzene ring (c1ccccc1).\n\n<P>\n<dl><dd><pre class=\"verbatim\"># ch17-1.py\nfrom openeye.oechem import *\nimport os,sys\n\n# create a subsearch object and initialize\npat = OESubSearch()\npat.Init('c1ccccc1')\n\n# open the input stream\nifs = oemolistream('drugs.sdf')\n\n# open stdout as output stream and set to SMILES\nofs = oemolostream()\nofs.SetFormat(OEFormat_SMI)\n\n# loop over molecules\nfor mol in ifs.GetOEMols():\n    # just check for a match, print if found\n    if pat.SingleMatch(mol) == 1:\n        OEWriteMolecule(ofs, mol)\n</pre></dl>\n\n<P>\nThe above example only show the existence of the match, not the actual\natoms in the target molecule that match the query. OEChem provides a\nrich set of functions for find the unique substructures (or all) that\nmatch a query and for extracting this information from the target\nmolecule.\n\n<P>\nIn the next example, we will use the same basic code as ch17-1.py but\nwill retrieve the actual atom matches from the OESubSearch. While the\nSingleMatch method returns true or false, the Match method is a\ngenerator method that returns all the matches (as instances of the\nOEMatchBase) in a loop. The Match method takes a molecule as the first\nargument and a second argument that if true, returns only unique\nmatches. Run the following example with the second argument to Match\nas 1 and then as 0 to see the difference in the two behaviors.\n\n<P>\n<dl><dd><pre class=\"verbatim\"># ch17-2.py\nfrom openeye.oechem import *\nimport os,sys\n\n# create a subsearch object and initialize\npat = OESubSearch()\npat.Init('c1ccccc1')\n\n# open the input stream\nifs = oemolistream('drugs.sdf')\n\n# open stdout as output stream and set to SMILES\nofs = oemolostream()\nofs.SetFormat(OEFormat_SMI)\n\n# loop over molecules\nfor mol in ifs.GetOEMols():\n    OETriposAtomNames(mol)\n    print mol.GetTitle()\n    matchcount = 0\n    for matchbase in pat.Match(mol,1):\n        print \"Match:\",matchcount,\n        for matchpair in matchbase.GetAtoms():\n            print matchpair.target.GetName(),\n        matchcount+=1\n        print\n</pre></dl>\n\n<P>\nAs each OEMatchBase is returned from the Match generator method, a\nsecond loop can loop over either the atoms or bonds of the match. The\nabove example used the GetAtoms method of the OEMatchBase.  Each time\nthrough the loop, matchpair is an instance of OEMatchPair with the\n``target'' a reference to the corresponding atom in the target structure\nand ``pattern'' a reference to the matching atom in the OESubSearch\ninstance.  A corresponding GetBonds method provide a loop over all the\nbonds in the match.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node150.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node150.html\">17.2 Using Query Molecules</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37539.0}