{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL convex hull 3 Definition The function convex hull 3 computes the convex hull of a given set of three dimensional points Two versions of this function are available The first can be used when it is known that the result will be a polyhedron and the second when a degenerate hull may also be possible include CGAL convex hull 3 h template class InputIterator class Polyhedron 3 class Traits void convex hull 3 InputIterator first InputIterator last Polyhedron 3 P Traits ch traits Default traits computes the convex hull of the set of points in the range first last The polyhedron P is cleared then the convex hull is stored in P and the plane equations of each face are computed Precondition There are at least four points in the range first last not all of which are collinear template class InputIterator class Polyhedron 3 class Traits void convex hull 3 InputIterator first InputIterator last Object ch object Traits ch traits Default traits computes the convex hull of the set of points in the range first last The result which may be a point a segment a triangle or a polyhedron is stored in ch object When the result is a polyhedron the plane equations of each face are computed Requirements Both functions require the following InputIterator value type is equivalent to Traits Point 3 Traits is a model of the concept ConvexHullTraits 3 When it is known that the input points are not all coplanar the types Traits xy Traits yx and Traits yz need not be provided For the purposes of checking the postcondition that the convex hull is valid Traits should also be a model of the concept IsStronglyConvexTraits 3 Both functions have an additional requirement for the polyhedron that is to be constructed For the first version this is that Polyhedron 3 is a model of ConvexHullPolyhedron 3 and for the second it is required that Traits defines a type Polyhedron 3 that is a model of ConvexHullPolyhedron 3 The default traits class for both versions of convex hull 3 is Convex hull traits 3 R with the representation R determined by InputIterator value type See Also CGAL convex hull incremental 3 CGAL ch eddy CGAL convex hull 2 ImplementationThe algorithm implemented by these functions is the quickhull algorithm of Barnard et al BDH96 Example The following program computes the convex hull of a set of 25 random points chosen from a sphere of radius 1 It then determines if the resulting hull is a segment or a polyhedron Notice that the traits class is not necessary in the call to convex hull 3 but is used in the definition of Polyhedron 3 file examples Convex hull 3 ch quickhull 3 ex C include CGAL Homogeneous h include CGAL point generators 3 h include CGAL copy n h include CGAL Convex hull traits 3 h include CGAL convex hull 3 h include vector ifdef CGAL USE GMP include CGAL Gmpz h typedef CGAL Gmpz RT else include CGAL MP Float h typedef CGAL MP Float RT endif typedef CGAL Homogeneous RT K typedef CGAL Convex hull traits 3 K Traits typedef Traits Polyhedron 3 Polyhedron 3 typedef K Segment 3 Segment 3 define point creator typedef K Point 3 Point 3 typedef CGAL Creator uniform 3 double Point 3 PointCreator int main CGAL Random points in sphere 3 Point 3 PointCreator gen 1 generate 25 points randomly on a sphere of radius 1 and copy them to a vector std vector Point 3 points CGAL copy n gen 25 std back inserter points define object to hold convex hull CGAL Object ch object compute convex hull CGAL convex hull 3 points begin points end ch object determine what kind of object it is Segment 3 segment Polyhedron 3 polyhedron if CGAL assign segment ch object std cout convex hull is a segment std endl else if CGAL assign polyhedron ch object std cout convex hull is a polyhedron std endl else std cout convex hull error std endl return Next convex hull incremental 3 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_3_ref/Function_convex_hull_3.html", "title": "convex_hull_3", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_3_ref/convex_hull_3.tex' -->\n<html> <head>  \n<title>convex_hull_3</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_629\"></A>\n\n<A NAME=\"Cross_link_anchor_630\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_555\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::convex_hull_3\"></A>\n<h2><I>CGAL::convex_hull_3</I></h2>\n\n\n \n     \n<A NAME=\"Index_anchor_556\"></A> \n \n   \n\n \n     \n<A NAME=\"Index_anchor_557\"></A> \n \n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_558\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A></I> computes the convex hull of a given set of \nthree-dimensional points \nTwo versions of this function \nare available.  The first can be used when it is known that the result\nwill be a polyhedron and the second when a degenerate hull\nmay also be possible.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/convex_hull_3.h\">CGAL/convex_hull_3.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator, class <A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_convex_hull_36InputIterator_first+_InputIterator_last+_Polyhedron_3__P+_const_Traits__ch_traits_=_Default_traits9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>&amp; P,<BR>\n\nTraits ch_traits = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes the convex hull of the set of points in the range\n[<I>first</I>, <I>last</I>).  The polyhedron <I>P</I> is cleared, then\nthe convex hull is stored in <I>P</I> \nand the plane equations of each face are computed.<BR>\n\n<EM>Precondition: </EM>: There are at least four points in the range \n[<I>first</I>, <I>last</I>) not all of which are <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class InputIterator, class <A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_convex_hull_36InputIterator_first+_InputIterator_last+_Object__ch_object+_const_Traits__ch_traits_=_Default_traits9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_88\">Object</A>&amp; ch_object,<BR>\n\nTraits ch_traits = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes the convex hull of the set of points in the range\n[<I>first</I>, <I>last</I>).  The result, which may be a point, a segment,\na triangle, or a polyhedron, is stored in <I>ch_object</I>.  When\nthe result is a polyhedron, the plane equations of each face are computed.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\nBoth functions require the following:\n<OL>\n   <LI><I>InputIterator::value_type</I> is equivalent to <I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A></I>.\n   <LI><I>Traits</I> is a model of the concept <A HREF=\"Concept_ConvexHullTraits_3.html#Cross_link_anchor_637\">ConvexHullTraits_3</A>\n         \n<A NAME=\"Index_anchor_559\"></A> \n.  When it is known that\n         the input points are not all <A HREF=\"../Kernel_23_ref/Function_coplanar.html#Cross_link_anchor_197\">coplanar</A>, the types <I>Traits_xy</I>, \n         <I>Traits_yx</I>, and <I>Traits_yz</I> need not be provided.\n         For the purposes of checking the postcondition that the convex hull\n         is valid, <I>Traits</I> should also be a model of the concept\n         <A HREF=\"Concept_IsStronglyConvexTraits_3.html#Cross_link_anchor_642\">IsStronglyConvexTraits_3</A>.\n        </OL>\n<P>\n\nBoth functions have an additional requirement for the polyhedron that is\nto be constructed. For the first version this is that:\n<UL>\n  <LI><I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A></I> is a model of <A HREF=\"Concept_ConvexHullPolyhedron_3.html#Cross_link_anchor_636\">ConvexHullPolyhedron_3</A>,\n</UL>\nand for the second, it is required that\n<UL>\n <LI><I>Traits</I> defines a type <I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A></I> that is a model of \n       <A HREF=\"Concept_ConvexHullPolyhedron_3.html#Cross_link_anchor_636\">ConvexHullPolyhedron_3</A>.\n</UL>\n<P>\n\nThe default traits class for both versions of <I><A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A></I> is \n<I><A HREF=\"Class_Convex_hull_traits_3.html#Cross_link_anchor_639\">Convex_hull_traits_3</A>&lt;R&gt;</I>,with the representation <I>R</I> determined by <I>InputIterator::value_type</I>.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_convex_hull_incremental_3.html#Cross_link_anchor_631\">CGAL::convex_hull_incremental_3</A></I><BR>\n\n<I><A HREF=\"../Convex_hull_2_ref/Function_ch_eddy.html#Cross_link_anchor_582\">CGAL::ch_eddy</A></I><BR>\n\n<I><A HREF=\"../Convex_hull_2_ref/Function_convex_hull_2.html#Cross_link_anchor_608\">CGAL::convex_hull_2</A></I>\n<P>\n\n<H3>Implementation</H3>The algorithm implemented by these functions is the quickhull algorithm of \nBarnard <I>et al.</I> [<A HREF=\"../biblio.html#Biblio_bdh-qach-96\">BDH96</A>].\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program computes the convex hull of a set of 250 random\npoints chosen from a sphere of radius 100.  It then determines if the resulting\nhull is a segment or a polyhedron.  Notice that the traits class is not\nnecessary in the call to <I><A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A></I> but is used in the definition\nof <I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A></I>.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Convex_hull_3/ch_quickhull_3_ex.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A>.h&gt;\n#include &lt;CGAL/point_generators_3.h&gt;\n#include &lt;CGAL/<A HREF=\"../STL_Extension_ref/Function_copy_n.html#Cross_link_anchor_1446\">copy_n</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Convex_hull_traits_3.html#Cross_link_anchor_639\">Convex_hull_traits_3</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_630\">convex_hull_3</A>.h&gt;\n#include &lt;vector&gt;\n\n#ifdef CGAL_USE_GMP\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A> RT;\n#else\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1400\">MP_Float</A>.h&gt;\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A> RT;\n#endif\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt;                     K;\ntypedef <A HREF=\"Class_Convex_hull_traits_3.html#Cross_link_anchor_638\">CGAL::Convex_hull_traits_3</A>&lt;K&gt;             Traits;\ntypedef Traits::<A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>                      <A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>;\ntypedef K::<A HREF=\"../Kernel_23_ref/Class_Segment_3.html#Cross_link_anchor_78\">Segment_3</A>                              <A HREF=\"../Kernel_23_ref/Class_Segment_3.html#Cross_link_anchor_78\">Segment_3</A>;\n\n// define point creator \ntypedef K::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>                                <A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>;\ntypedef <A HREF=\"../STL_Extension_ref/FunctionObjectClass_Creator_uniform_3.html#Cross_link_anchor_1567\">CGAL::Creator_uniform_3</A>&lt;double, <A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;  PointCreator;\n\n\nint main()\n{\n  <A HREF=\"../Generator_ref/Class_Random_points_in_sphere_3.html#Cross_link_anchor_1697\">CGAL::Random_points_in_sphere_3</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>, PointCreator&gt; gen(100.0);\n\n  // generate 250 points randomly on a sphere of radius 100.0 \n  // and copy them to a vector \n  std::vector&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt; points;\n  <A HREF=\"../STL_Extension_ref/Function_copy_n.html#Cross_link_anchor_1445\">CGAL::copy_n</A>( gen, 250, std::back_inserter(points) );\n  \n  // define object to hold convex hull \n  <A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_87\">CGAL::Object</A> ch_object;\n\n  // compute convex hull \n  <A HREF=\"Function_convex_hull_3.html#Cross_link_anchor_629\">CGAL::convex_hull_3</A>(points.begin(), points.end(), ch_object);\n\n  // determine what kind of object it is\n  <A HREF=\"../Kernel_23_ref/Class_Segment_3.html#Cross_link_anchor_78\">Segment_3</A> segment;\n  <A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A> polyhedron;\n  if ( <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_89\">CGAL::assign</A>(segment, ch_object) )\n     std::cout &lt;&lt; &quot;convex hull is a segment &quot; &lt;&lt; std::endl;\n  else if ( <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_89\">CGAL::assign</A> (polyhedron, ch_object) )\n     std::cout &lt;&lt; &quot;convex hull is a polyhedron &quot; &lt;&lt; std::endl;\n  else\n     std::cout &lt;&lt; &quot;convex hull error!&quot; &lt;&lt; std::endl;\n\n  return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_convex_hull_incremental_3.html\"><I>convex_hull_incremental_3</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_4!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38303.0}