{"text": "Probability Models in R R has four functions for each distribution beginning with a d p q or r and followed by the name of the distribution For example for a binomial distribution with 1 trials and success probability 1 3 Density function For a discrete random variable e g binomial probability mass function pmf e g the probability X 5 For a continuous random variable e g normal probability density function pdf e g the normal curve y value at a given x value dbinom 5 1 1 3 Cumulative distribution function cdf e g the probability X 5 pbinom 5 1 1 3 Quantile function The value of X such that e g 25 percent of the distribution lies below it i e the inverse of the cdf qbinom 25 1 1 3 Random generation e g generate 2 data points from the distribution rbinom 2 1 1 3 The two main types of random variables are discrete and continuous A random variable is discrete if you can enumerate all possible values of the variable A random variable is continuous if it can take any value in an interval of the real line The R functions for several discrete distributions we may see in this course are Discrete Distribution parameters Scenario Possible Values R Function d p q r X Binomial n p X number of successes in n independent trials P success p 1 n binom X1 Xc Multinomial n p1 pc Xi number of observations in category i in n independent trials P category i pi i 1 c 1 n where X1 Xc n multinom X Poisson lambda X count of rare events in an interval of time mean count lambda 1 2 pois X Geometric p X number of failures until first success P success p 1 2 geom X Negative Binomial r p X number of failures until rth success P success p 1 2 nbinom X Hypergeometric N k n X number of successes in a sample of size n from an population of N items k of which are successes and N k are failures max n N k min n k hyper The R functions for several continuous distributions are Continuous Distribution parameters Scenario Possible Values R Function d p q r X Normal mean sd bell curve e g approximate distribution of people s heights infinity infinity norm X Uniform min max X random number chosen from the interval min max min max unif X Exponential rate X time between events with given rate infinity exp X Chi squared df Used in hypothesis testing infinity chisq X t df Used in hypothesis testing infinity infinity t X F df1 df2 Used in hypothesis testing infinity f It s a good idea to become familiar with the syntax of the R functions for each distribution some of the arguments aren t what you would expect Try looking up the help files for several of these functions Examples Using the Binomial Distribution dbinom Examples For a Binomial 6 1 3 random variable named X compute the probability of 2 successes Pr X 2 dbinom 2 6 1 3 1 3292181 Compare to the direct computation Pr X 2 6 5 4 3 2 1 2 1 4 3 2 1 1 3 2 2 3 4 15 1 3 2 2 3 4 3292181 or choose 6 2 1 3 2 2 3 4 We can compute the probabilities for the whole sample space at once if we like with dbinom 6 6 1 3 A nicer way to display those probabilities is in a table matrix c 6 dbinom 6 6 1 3 ncol 2 dimnames list NULL c n Prob When printing tables like this it is often better to round off the entries to fewer significant digits M matrix c 6 dbinom 6 6 1 3 ncol 2 dimnames list NULL c n Prob round M 4 We can also produce the theoretical histogram for repeated trials of a given binomial experiment Here is a function to draw the binomial density curve you can paste it in to your R session hist binom function n p plots a relative frequency histogram of the binomial distribution k n p dbinom k n p names p as character n barplot p space A relative frequency histogram is just a barplot with no space between the bars where the total area is 1 The height of each bar here the probability associated with that binomial outcome To use the hist binom function you must specify the values of n and p For example to get the histogram of a Binomial 6 1 3 distribution use hist binom 6 1 3 Try experimenting with the color col argument use help colors or colors to see what colors R knows by name hist binom 6 1 3 col yellow pbinom Examples For a binomial 6 1 3 random variable X compute the probability that X is less than 3 in other words Pr X 2 pbinom 2 6 1 3 Compare to summing the density ie adding up the areas under the binomial histogram dbinom 6 1 3 dbinom 1 6 1 3 dbinom 2 6 1 3 or sum dbinom 2 6 1 3 We can find the probability that we get more than a given number of successes by subtraction for the probability that X is greater than 2 Pr X 2 1 pbinom 2 6 1 3 We could of course compute the probability of that event by summing the individual probabilities sum dbinom 3 6 6 1 3 Finally R has another option for this computation pbinom 2 6 1 3 lower tail FALSE The tails of a probability distribution are the values at either end of the range of the random variable The pbinom function normally assumes that you want the lower tail of the distribution that is the probability of getting less than or equal to a specified value The specification lower tail FALSE tells S to compute the upper tail of the distribution that is the probability of getting a value greater than the argument Compare all three methods and make sure that they give the same probabilities Note since the Binomial sample space only includes integer values Pr X k is the same as Pr X k 1 qbinom Examples For continuous distributions the p function and the q function are inverses i e either one undoes the action of the other try qnorm pnorm or pnorm qnorm 5 This doesn t work out quite so perfectly for the binomial distribution because of the discrete nature of the sample space It is too lumpy Compare qbinom 5 6 1 3 pbinom 2 6 1 3 Multinomial Distribution The multinomial distribution differs from all the other discrete distributions listed above in that it is a multivariate distribution rather than a univariate distribution As such one possible observation from the distribution is actually a vector of c observations rather than a scalar Additionally R only provides the d and r options for the multinomial distribution See Multinom For example suppose the random vector X1 X2 X3 has a multinomial distribution with probabilities p1 2 p2 3 and p3 5 and sample size n 2 Then we could compute the multinomial probability P X1 6 X2 4 X3 1 as follows dmultinom c 6 4 1 2 c 2 3 5 Note that R requires the first and third arguments of the function to be vectors The c combine or concatenate function tells R to treat the elements as a vector See c", "_id": "http://www.ics.uci.edu/~staceyah/111-202/discussion/Prob_Distns.html", "title": "probability models in r", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <meta content=\"text/html; charset=windows-1252\"\n      http-equiv=\"Content-Type\">\n    <title>Probability Models in R</title>\n    <meta content=\"Stacey Hancock\" name=\"author\">\n  </head>\n  <body>\n    <table style=\"width: 100%; background-color: rgb(102, 204, 204);\n      margin-left: auto; margin-right: auto; height: 58px; text-align:\n      left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td>\n            <div style=\"text-align: center;\"> </div>\n            <h1 style=\" text-align: center;\">Probability Models in R<br>\n            </h1>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    R has four functions for each distribution, beginning with a \"d\",\n    \"p\", \"q\", or \"r\" and followed by the name of the distribution. For\n    example, for a binomial distribution with 10 trials and success\n    probability 1/3,<br>\n    <pre># \"Density\" function: <br># For a discrete random variable (e.g., binomial): <br>#     probability mass function (pmf), e.g., the probability X = 5.<br># For a continuous random variable (e.g., normal): <br>#     probability density function (pdf), e.g., the normal curve y-value at a given x-value.<br>dbinom(5,10,1/3)<br><br># Cumulative distribution function (cdf): e.g., the probability X &lt;= 5.<br>pbinom(5,10,1/3)<br><br># Quantile function: The value of X such that, e.g., .25 percent of the<br>#   distribution lies below it, i.e., the inverse of the cdf.<br>qbinom(.25,10,1/3)<br><br># Random generation: e.g., generate 20 data points from the distribution.<br>rbinom(20,10,1/3)</pre>\n    <br>\n    The two main types of random variables are <span\n      style=\"font-weight: bold;\">discrete</span> and <span\n      style=\"font-weight: bold;\">continuous</span>. A random variable is\n    <span style=\"text-decoration: underline;\">discrete</span> if you can\n    enumerate all possible values of the variable. A random variable is\n    <span style=\"text-decoration: underline;\">continuous</span> if it\n    can take any value in an interval of the real line. The R functions\n    for several discrete distributions we may see in this course are:<br>\n    <br>\n    <table style=\"text-align: left; width: 100%; background-color:\n      rgb(255, 204, 51);\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td style=\"vertical-align: top; font-weight: bold;\">Discrete\n            Distribution<br>\n            (parameters)<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">Scenario<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">Possible\n            Values<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">R Function<br>\n            (_ = d, p, q, r)<br>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Binomial(n, p)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = number of \"successes\" in\n            n independent trials;<br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P(\"success\") = p<br>\n            <br>\n          </td>\n          <td style=\"vertical-align: top;\">0, 1,..., n<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_binom</pre>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\">(X1,..., Xc) ~ Multinomial(n, p1,..., pc)<br>\n          </td>\n          <td valign=\"top\">Xi = number of observations in category i in\n            <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n independent\n            trials; <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P(\"category i\") =\n            pi, i = 1,..., c<br>\n          </td>\n          <td valign=\"top\">0, 1,..., n<br>\n            where <br>\n            X1+...+Xc = n<br>\n          </td>\n          <td valign=\"top\">\n            <pre>_multinom</pre>\n            <br>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Poisson(lambda)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = count of \"rare\" events in\n            an interval of time; <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mean count = lambda<br>\n          </td>\n          <td style=\"vertical-align: top;\">0, 1, 2,...<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_pois</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Geometric(p)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = number of \"failures\"\n            until first \"success\"; <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P(\"success\") = p<br>\n          </td>\n          <td style=\"vertical-align: top;\">0, 1, 2,...<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_geom</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Negative Binomial(r, p)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = number of \"failures\"\n            until rth \"success\";<br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P(\"success\") = p</td>\n          <td style=\"vertical-align: top;\">0, 1, 2,...<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_nbinom</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Hypergeometric(N, k, n)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = number of \"successes\" in\n            a sample of size n from <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; an population of N\n            items, k of which are \"successes\" <br>\n            &nbsp; &nbsp; &nbsp; &nbsp;and N-k are \"failures\"<br>\n          </td>\n          <td style=\"vertical-align: top;\">max(0, n-(N-k)),...,<br>\n            min(n, k)<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_hyper</pre>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    The R functions for several continuous distributions are:<br>\n    <br>\n    <table style=\"text-align: left; width: 100%; background-color:\n      rgb(255, 204, 51);\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td style=\"vertical-align: top; font-weight: bold;\">Continuous\n            Distribution<br>\n            (parameters)<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">Scenario<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">Possible\n            Values<br>\n          </td>\n          <td style=\"vertical-align: top; font-weight: bold;\">R Function<br>\n            (_ = d, p, q, r)<br>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Normal(mean, sd)<br>\n          </td>\n          <td style=\"vertical-align: top;\">\"bell curve\"<br>\n            e.g., approximate distribution of people's heights<br>\n          </td>\n          <td style=\"vertical-align: top;\">(-infinity, infinity)<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_norm</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Uniform(min, max)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = random number chosen from\n            the interval [min, max]<br>\n          </td>\n          <td style=\"vertical-align: top;\">[min, max]<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_unif</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Exponential(rate)<br>\n          </td>\n          <td style=\"vertical-align: top;\">X = time between events with\n            given rate<br>\n          </td>\n          <td style=\"vertical-align: top;\">[0, infinity)<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_exp</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ Chi-squared(df)<br>\n          </td>\n          <td style=\"vertical-align: top;\">Used in hypothesis testing.<br>\n          </td>\n          <td style=\"vertical-align: top;\">[0, infinity)<br>\n          </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_chisq</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ t(df)<br>\n          </td>\n          <td style=\"vertical-align: top;\">Used in hypothesis testing. </td>\n          <td style=\"vertical-align: top;\">(-infinity, infinity) </td>\n          <td style=\"vertical-align: top;\">\n            <pre>_t</pre>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"vertical-align: top;\">X ~ F(df1, df2)<br>\n          </td>\n          <td style=\"vertical-align: top;\">Used in hypothesis testing.</td>\n          <td style=\"vertical-align: top;\">[0, infinity)</td>\n          <td style=\"vertical-align: top;\">\n            <pre>_f</pre>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    <big><span style=\"font-weight: bold;\">It's a good idea to become\n        familiar with the syntax of the R functions for each\n        distribution (some of the arguments aren't what you would\n        expect). Try looking up the help files for several of these\n        functions.<br>\n        <br>\n      </span></big>\n    <hr style=\"width: 100%; height: 2px;\">\n    <h2><big><span style=\"font-weight: bold;\"></span></big></h2>\n    <h2>Examples Using the Binomial Distribution</h2>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <h3 style=\"text-align: center;\"> dbinom Examples</h3>\n    <p>For a Binomial(6,1/3) random variable named <span\n        style=\"font-style: italic;\">X</span>, compute the probability of\n      2 successes, Pr(X=2): </p>\n    <pre>&gt; dbinom(2,6,1/3)\n[1] 0.3292181\n</pre>\n    Compare to the direct computation:\n    <pre>Pr(X = 2) = ((6*5*4*3*2*1)/(2*1*4*3*2*1))*(1/3)^2*(2/3)^4 \n\n          = 15*(1/3)^2*(2/3)^4\n\n          =  0.3292181\n</pre>\n    or\n    <pre>         choose(6,2)*(1/3)^2*(2/3)^4\n</pre>\n    <p> We can compute the probabilities for the whole sample space at\n      once if we like with: </p>\n    <pre>          dbinom(0:6,6,1/3)\n</pre>\n    A nicer way to display those probabilities is in a table:\n    <pre>          matrix(c(0:6,dbinom(0:6,6,1/3)),ncol=2,\n                 dimnames=list(NULL,c(\"n\",\"Prob\")))\n</pre>\n    When printing tables like this, it is often better to round off the\n    entries to fewer significant digits:\n    <pre>          M &lt;- matrix(c(0:6,dbinom(0:6,6,1/3)),ncol=2,\n                      dimnames=list(NULL,c(\"n\",\"Prob\")))\n          round(M,4)\n</pre>\n    <p> We can also produce the theoretical histogram for repeated\n      trials of a given binomial experiment. Here is a function to draw\n      the binomial density \"curve\", you can paste it in to your R\n      session: </p>\n    <pre>hist.binom &lt;- function(n, p, ...)\n{\n# plots a relative frequency histogram of the binomial distribution\n        k &lt;- 0:n\n        p &lt;- dbinom(k, n, p)\n        names(p) &lt;- as.character(0:n)\n        barplot(p,space=0, ...)\n}\n</pre>\n    A relative frequency histogram is just a barplot with no space\n    between the bars, where the total area is 1. The height of each bar\n    here the probability associated with that binomial outcome. To use\n    the hist.binom function, you must specify the values of n and p. For\n    example, to get the histogram of a Binomial(6,1/3) distribution, use\n    <pre>  \n       hist.binom(6,1/3)\n</pre>\n    Try experimenting with the color (\"col\") argument; use <span\n      style=\"font-family: monospace;\">help(colors)</span> or <span\n      style=\"font-family: monospace;\">colors()</span> to see what colors\n    R knows by name.\n    <pre>  \n       hist.binom(6,1/3,col=\"yellow\")\n</pre>\n    <h3 style=\"text-align: center;\">pbinom Examples</h3>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <p> For a binomial(6,1/3) random variable X, compute the probability\n      that X is less than 3; in other words, Pr(X &lt;= 2): </p>\n    <pre>          pbinom(2,6,1/3)\n</pre>\n    Compare to summing the density (ie adding up the areas under the\n    binomial histogram:\n    <pre>          dbinom(0,6,1/3)+dbinom(1,6,1/3)+dbinom(2,6,1/3)\n\nor\n\n          sum(dbinom(0:2,6,1/3))\n</pre>\n    <p> We can find the probability that we get more than a given number\n      of successes by subtraction: for the probability that X is greater\n      than 2, Pr(X &gt; 2): </p>\n    <pre>          1 - pbinom(2,6,1/3)\n</pre>\n    We could of course compute the probability of that event by summing\n    the individual probabilities:\n    <pre>          sum(dbinom(3:6,6,1/3))\n</pre>\n    Finally, R has another option for this computation:\n    <pre>          pbinom(2,6,1/3,lower.tail=FALSE)\n</pre>\n    The tails of a probability distribution are the values at either end\n    of the range of the random variable. The pbinom function normally\n    assumes that you want the lower tail of the distribution, that is\n    the probability of getting less than or equal to a specified value.\n    The specification \"lower.tail=FALSE\" tells S to compute the upper\n    tail of the distribution, that is the probability of getting a value\n    greater than the argument. Compare all three methods and make sure\n    that they give the same probabilities. <b> Note:</b> since the\n    Binomial sample space only includes integer values, Pr(X &lt; k) is\n    the same as Pr(X &lt;= k-1). <br>\n    <h3 style=\"text-align: center;\">qbinom Examples</h3>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <p> For continuous distributions, the \"p\" function and the \"q\"\n      function are inverses (i.e., either one undoes the action of the\n      other: try&nbsp;<span style=\"font-family: monospace;\">\n        qnorm(pnorm(0))&nbsp;</span> or&nbsp; <span style=\"font-family:\n        monospace;\">pnorm(qnorm(.5))</span>.) This doesn't work out\n      quite so perfectly for the binomial distribution because of the\n      discrete nature of the sample space. It is too \"lumpy.\" Compare<br>\n    </p>\n    <pre>      qbinom(.5,6,1/3)\n\n      pbinom(2,6,1/3)\n<br></pre>\n    <br>\n    <hr width=\"100%\" size=\"2\">\n    <h2>Multinomial Distribution</h2>\n    <p>The multinomial distribution differs from all the other discrete\n      distributions listed above in that it is a multivariate\n      distribution (rather than a univariate distribution). As such, one\n      possible observation from the distribution is actually a vector of\n      c observations rather than a scalar. Additionally, R only provides\n      the \"d\" and \"r\" options for the multinomial distribution. See<br>\n    </p>\n    <pre>?Multinom<br></pre>\n    For example, suppose the random vector (X1, X2, X3) has a\n    multinomial distribution with probabilities p1 = 0.2, p2 = 0.3, and\n    p3 = 0.5, and sample size n = 20. Then, we could compute the\n    multinomial probability P(X1 = 6, X2 = 4, X3 = 10) as follows.<br>\n    <pre>dmultinom(c(6,4,10), 20, c(0.2,0.3,0.5))<br></pre>\n    Note that R requires the first and third arguments of the function\n    to be vectors. The \"c\" (combine or concatenate) function tells R to\n    treat the elements as a vector. See<br>\n    <pre>?c<br></pre>\n    <br>\n    <br>\n  </body>\n</html>\n", "id": 569.0}