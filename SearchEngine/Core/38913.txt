{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Qt widget Definition An object of type Qt widget is a two dimensional window for graphical IO It is a class that is designed to help CGAL users to visualize easily CGAL objects and for advanced users to interact with them This widget is designed for 2D CGAL objects only include CGAL IO Qt widget h Inherits FromQWidget Types The widget class also defines the following enum type to specify which kind of point representation do you want to use enum PointStyle PIXEL CROSS PLUS CIRCLE DISC RECT BOX Creation Qt widget win QWidget parent const char name Constructs a widget which is a child of parent with the name name The default visible area is between ranges xmin 1 xmax 1 ymin 1 ymax 1 By default the X and Y scale factors are equal Qt widget provides scaling support You can use a scaling factor for your objects as well as you can draw the objects with one scale and look at the objects with different scales Also there is a possibility to tell the widget that you want that the visible area should be mapped to a certain interval and the widget adjust the scaling factor according to that void win set window double x min double x max double y min double y max bool u false Map the widget coordinates to the interval defined by the rectangle with given coordinates This method should be called after resize from QWidget If u is true the X and Y scale factors will not be equal and the widget will not keep the aspect ratio void win set x scale double xscale Set the current X scaling factor Actually the scales are recomputed when you resize so this method is not used very often void win set y scale double yscale Set the current Y scaling factor Actually the scales are recomputed when you resize so this method is not used very often advanced You should have the same scaling factor for X and Y if you want to keep the aspect ratio of your objects advanced void win zoom double ratio Multiply the X and Y scaling factors by ratio then calls redraw The center of the visible area remains the same void win zoom double ratio double xc double yc Multiply the X and Y scaling factors by ratio then calls redraw The center of the visible area becomes xc yc void win move center const double distx const double disty Move the center of the widget with distx on the X axis and disty on the Y axis void win set center const double x const double y Set the center of the widget to x y void win add to history Deprecated This function adds the current viewport and transformations to history You should use save public slot from Qt widget history object void win clear history Deprecated Clears the history This means that there are no elements in the history list Call this method when you want to reinitialize the history list You should use clear history method from Qt widget standard toolbar or the clear public slot from Qt widget history object public slots bool win back bool win forth Deprecated This slots permit to walk into history Return true if succeded These slots are deprecated You should use the backward and forward methods of Qt widget history object or the back and forward public slots from Qt widget standard toolbar object void win clear Clear the screen The properties of the widget remain the same after calling this member function You can see a list of the properties that you can set at the properties description void win lock Locks the widget keeping the widget from being refreshed If you lock the widget you should verify that you unlock it somewhere The number of lock calls should be the same with the number of unlock calls Lock and unlock calls can be nested void win unlock Unlocks the widget and calls do paint The widget is only unlocked if the number of unlock calls is equal to the number of lock calls void win do paint Refresh the widget calling paintEvent QPaintEvent e for the Qt widget only if the widget is unlocked This mean that redraw is called if and only if the widget is unlocked void win redraw If you derive from Qt widget you have to overload this function and put your code for drawing here if you don t use layers The best way is to attach layers to the widget and call this method This method redraws the layers attached and active Before drawing the layers redraw clear the screen and emit redraw on back Emit redraw on front at the end void win print to ps Redraws all the attached and active layers into a Postscript device It could be a file or a printer This method also use signals as redraw on back or redraw on front Properties You can set the properties of the functions through this functions as well as with the help of manipulators described later The function naming convention has changed for this member functions to Qt convention void win setColor Qcolor c Set the current pen color of the widget to be c void win setBackgroundColor QColor c Set the current background color to be c void win setFillColor QColor c Set the current fill color of the widget to be c void win setFilled bool f Set the status of the widget to true or false concerning filling the objects polygons circles rectangles void win setLineWidth unsigned int i Set the current line width of the widget void win setPointSize unsigned int i Set the current point size of the widget void win setPointStyle PointStyle s Set the current point style of the widget to s PointStyle is a enumeration declared in Qt widget void win setRasterOp RasterOp r Set the current raster operation Layers void win attach Qt widget layer s Add the layer s in the list of layers The last added will be on top of the screen Also the events are forwarded to layers in the order they have been attached void win detach Qt widget layer s Remove the layer s from the list s it s a pointer to an existing layer New CGAL Objects void win new object CGAL Object obj This function should be called by the tools that create CGAL objects It then emits the signal new cgal object CGAL Object Slots of other components can be connected to this signal Access Functions Note that we use also types from Qt here QColor win color Returns the current pen color The color returned is a Qt class QColor win backgroundColor Returns the current widget background color The color returned is a Qt class QColor win fillColor Returns the current color used for filling the objects The color returned is a Qt class PointStyle win pointStyle Returns the current point style PointStyle is a enumeration declared in Qt widget uint win pointSize Returns the current point size uint win lineWidth Returns the current line width RasterOp win rasterOp Return the current raster operation double win x min Returns the left x coordinate of the widget double win y min Returns the lower y coordinate of the widget double win x max Returns the right x coordinate of the widget double win y max Returns the upper y coordinate of the widget advanced The coordinates of the screen are maped to a certain interval that you can choose with set window member function The scale of the objects you can visualize is computed and maintained the same for both axes to keep the aspect ratio of the objects You should use x real or y real to get the real world coordinates for your screen coordinates If you are using gmp you can use this functions with Gmpq as second parameter You may need it when you work with rationals The double from the other function could be more complex and can make you loose speed in computations Computing with rational coordinates directly could increase the speed rather than computing with complex double coordinates double win x real int x double win y real int y template class FT void x real int x FT Returns the x real world coordinate of the Qt widget template class FT void y real int y FT Returns the y real world coordinate of the Qt widget void win x real int Gmpq void win y real int Gmpq advanced int win x pixel double x This method is the opposite of x real method Converts the world coordinates in screen coordinates If you want to get an integer between and width you should pass an x between xmin and xmax int win y pixel double y This method is the opposite of y real method Converts the world coordinates in screen coordinates If you want to get an integer between and height you should pass an y between ymin and ymax advanced Painter and Pixmap In order that layers can draw on the drawing area of a widget they have to access the underlying pixmap and painter Qt widget use as a backbuffer for drawing a pixmap defined inside the class i e an object of type QPixmap The QPixmap class is an off screen pixel based paint device One common use of the QPixmap class is to enable smooth updating of widgets The QPainter class paints on paint devices There is an object of type QPainter defined in Qt widget that uses as a paint device the QPixmap object QPixmap win get pixmap Returns the current pixmap QPainter win get painter Returns the current painter advanced Signals void win s mousePressEvent QMouseEvent e void win s mouseReleaseEvent QMouseEvent e void win s mouseMoveEvent QMouseEvent e void win s paintEvent QPaintEvent e void win s resizeEvent QResizeEvent e void win s wheelEvent QMouseEvent e void win s mouseDoubleClickEvent QMouseEvent e void win s keyPressEvent QKeyEvent e void win s keyReleaseEvent QKeyEvent e void win s enterEvent QEvent e void win s leaveEvent QEvent e void win s event QEvent e The Qt widget receives the events through virtual functions This is the mechanism that Qt offers for dispaching events This signals are called every time an event is dispatched to a virtual function For example if Qt widget receives mousePressEvent QMouseEvent e emits s mousePressEvent e This is very useful when you have only a pointer to Qt widget It is enough to connect this slot to your function to receive the event void win new cgal object CGAL Object Triggered when a new object from a tool is received The user should catch this signal if it s working with tools that provide CGAL objects as input void win custom redraw Deprecated Emitted in the redraw function after the layers are drawn void win redraw on back Emmitted in redraw method before calling layer s redraw void win redraw on front Emmitted in redraw method after calling layer s redraw void win rangesChanged Emmitted each time xmin xmax and ymin ymax ranges are changed Operators for Output The output operator is defined for all geometric classes in the CGAL kernel template class R Qt widget win Point 2 R p template class R Qt widget win Segment 2 R s template class R Qt widget win Line 2 R l template class R Qt widget win Ray 2 R r template class R Qt widget win Triangle 2 R t template class R Qt widget win Iso rectangle 2 R r template class R Qt widget win Circle 2 R c To use the other operators described you have to include the right header include CGAL IO Qt widget Polygon 2 h template class Tr class Co Qt widget win Polygon 2 Tr Co pol include CGAL IO Qt widget Min ellipse 2 h template class Traits Qt widget win Min ellipse 2 Traits min ellipse include CGAL IO Qt widget Optimisation ellipse 2 h template class Traits Qt widget win Optimisation ellipse 2 Traits oe include CGAL IO Qt widget Optimisation circle 2 h template class Traits Qt widget win Optimisation circle 2 Traits oc include CGAL IO Qt widget Conic 2 h template class R Qt widget win Conic 2 R c include CGAL IO Qt widget Triangulation 2 h template class Gt class Tds Qt widget win Triangulation 2 Gt Tds t include CGAL IO Qt widget Alpha shape 2 h template class Dt Qt widget win Alpha shape 2 Dt As include CGAL IO Qt widget Delaunay triangulation 2 h template class Gt class Tds Qt widget win Delaunay triangulation 2 R dt include CGAL IO Qt widget Constrained triangulation 2 h template class Gt class Tds Qt widget win Constrained triangulation 2 Gt Tds t include CGAL IO Qt widget Regular triangulation 2 h template class Gt class Tds Qt widget win Regular triangulation 2 Gt Tds t Manipulators for Qt widget A manipulator is an object which can be inserted in the Qt widget via the operator to change the context for further drawing Here we simply document the use of these operators which is all the user needs to know to modify the state of a stream Qt widget win BackgroundColor Color c Sets the color used for background color Qt widget win FillColor Color c Sets the color used for filling the objects Qt widget win LineWidth const unsigned int i Sets the width of the line for drawing objects Qt widget win PointSize const unsigned int i Sets the size of the points Qt widget win noFill Sets the state of Qt widget concerning filling the objects to be false Qt widget win Color c Sets the color used as the Qt widget fillColor Qt widget win PointStyle ps Sets the point style for Qt widget Example In the given example that is found in tutorial Qt widget tutorial1 tutorial1 C we create an object of type Qt widget and then we use the operators for output and the manipulators to show some of the widget s functionality include CGAL Cartesian h include CGAL Bbox 2 h include list include CGAL Polygon 2 h include CGAL IO Qt widget Polygon 2 h include qapplication h include CGAL IO Qt widget h typedef CGAL Cartesian int Rep typedef CGAL Point 2 Rep Point typedef CGAL Circle 2 Rep Circle typedef CGAL Segment 2 Rep Segment typedef CGAL Line 2 Rep Line typedef CGAL Ray 2 Rep Ray typedef CGAL Triangle 2 Rep Triangle typedef CGAL Iso rectangle 2 Rep Cgal Rectangle typedef CGAL Bbox 2 BBox typedef std list Point Container typedef CGAL Polygon 2 Rep Container Cgal Polygon int main int argc char argv QApplication app argc argv using namespace CGAL CGAL Qt widget W new CGAL Qt widget app setMainWidget W W resize 6 6 W set window 6 6 W show painting something on the screen W lock W BackgroundColor ORANGE RED LineWidth 3 PointSize 3 PointStyle DISC W Segment Point 1 2 Point 3 4 W LineWidth 5 GREEN FillColor BLACK Circle Point 4 4 5 5 W LineWidth 1 noFill Circle Point 3 3 3 3 W BLUE LineWidth 2 W Segment Point 2 2 Point 4 4 W Segment Point 2 4 Point 4 2 W setFilled TRUE W RED Triangle Point 15 3 Point 15 35 Point 1 325 W FillColor RED Cgal Rectangle Point 32 22 Point 35 24 W DEEPBLUE BBox 1 8 26 14 Cgal Polygon p p push back Point 3 3 p push back Point 4 3 p push back Point 5 13 p push back Point 4 18 p push back Point 3 13 W p W Ray Point 2 4 Point 18 43 Ray Point 2 4 Point 18 37 W unlock return app exec Next Qt widget layer Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Qt_widget_ref/Class_Qt_widget.html", "title": "qt_widget", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Qt_widget_ref/Qt_widget.tex' -->\n<html> <head>  \n<title>Qt_widget</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1591\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Qt_widget\"></A>\n<h2><I>CGAL::Qt_widget</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn object of type <I>Qt_widget</I> is a two-dimensional window for\ngraphical IO. It is a class that is designed to help C<SMALL>GAL</SMALL> users\nto visualize easily C<SMALL>GAL</SMALL> objects and for advanced users to interact\nwith them. This widget is designed for 2D C<SMALL>GAL</SMALL> objects only.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget.h\">CGAL/IO/Qt_widget.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3><I>QWidget</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\nThe widget class also defines the following <A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> type to specify\nwhich kind of point representation do you want to use:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_PointStyle\"></A>\n<A NAME=\"Enum_PointStyle\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A> { <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PIXEL</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">CROSS</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PLUS</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">CIRCLE</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">DISC</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">RECT</A><A NAME=\"Function_PointStyle\"></A>\n, <A HREF=\"Class_Qt_widget#Enum_PointStyle\">BOX</A><A NAME=\"Function_PointStyle\"></A>\n};\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Qt_widget win ( QWidget *parent = 0,  const char *name =);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Constructs a widget which is a child of <I>parent</I>, with the name\n<I>name</I>. The default visible <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> is between ranges xmin = -1, xmax\n= 1, ymin = -1, ymax = 1. By default the X and Y scale factors are equal.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<I>Qt_widget</I> provides scaling support. You can use a scaling factor for\nyour objects as well as you can draw the objects with one scale and\nlook at the objects with different scales. Also there is a possibility\nto tell the widget that you want that the visible <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> should be\nmapped to a certain interval, and the widget adjust the scaling factor \naccording to that.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_window6double_x_min+_double_x_max+_double_y_min+_double_y_max+_bool_u_=_false9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    win.set_window ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    double x_min,<BR>\n\ndouble x_max,<BR>\n\ndouble y_min,<BR>\n\ndouble y_max,<BR>\n\nbool u = false)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Map the widget coordinates to the interval\ndefined by the rectangle with given coordinates. This method should be\ncalled after <I>resize()</I> from <I>QWidget</I>. If <I>u</I> is\n<I>true</I> the X and Y scale factors will not be equal and the widget\nwill not keep the aspect ratio.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_x_scale6double_xscale9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.set_x_scale ( double xscale)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current X scaling\nfactor. Actually the scales are recomputed when you resize, so this\nmethod is not used very often.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_y_scale6double_yscale9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.set_y_scale ( double yscale)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current Y scaling\nfactor. Actually the scales are recomputed when you resize, so this\nmethod is not used very often.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nYou should have the same scaling factor for X and Y if you want to\nkeep the aspect ratio of your objects.\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_zoom6double_ratio9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.zoom ( double ratio)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Multiply the X and Y scaling factors by\n<I>ratio</I>, then calls <I>redraw</I>. The center of the visible <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A>\nremains the same.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_zoom6double_ratio+_double_xc+_double_yc9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.zoom ( double ratio,  double xc,  double yc)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Multiply the \nX and Y scaling factors by <I>ratio</I>, then calls <I>redraw</I>. The\ncenter of the visible <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> becomes (xc, yc).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_move_center6const_double_distx+_const_double_disty9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    win.move_center ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const double distx,<BR>\n\nconst double disty)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Move the center of the\n widget with <I>distx</I> on the X axis and <I>disty</I> on the Y axis.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_center6const_double_x+_const_double_y9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.set_center ( const double x,  const double y)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the center of the widget to\n <I>(x, y)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_add_to_history69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.add_to_history ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Deprecated: This function adds the current\nviewport and transformations to history. You should use <I>save()</I>\npublic slot from <I><A HREF=\"Class_Qt_widget_history.html#Cross_link_anchor_1784\">Qt_widget_history</A></I> object.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear_history69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.clear_history ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Deprecated: Clears the history. This\nmeans that there are no elements in the history list. Call this method\nwhen you want to reinitialize the history list. You should use\n<I>clear_history()</I> method from <I><A HREF=\"Class_Qt_widget_standard_toolbar.html#Cross_link_anchor_1782\">Qt_widget_standard_toolbar</A></I> or\nthe <I>clear()</I> public slot from <I><A HREF=\"Class_Qt_widget_history.html#Cross_link_anchor_1784\">Qt_widget_history</A></I> object.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>public slots:</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_back69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.back ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_forth69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.forth ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Deprecated: This slots permit to walk into\nhistory. Return <I>true</I> if succeded. These slots are\ndeprecated. You should use the <I>backward()</I> and <I>forward()</I>\nmethods of <I><A HREF=\"Class_Qt_widget_history.html#Cross_link_anchor_1784\">Qt_widget_history</A></I> object, or the <I>back()</I> and\n<I>forward()</I> public slots from <I><A HREF=\"Class_Qt_widget_standard_toolbar.html#Cross_link_anchor_1782\">Qt_widget_standard_toolbar</A></I> object.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clear the screen. The properties of the\nwidget remain the same after calling this member function. You can see \na list of the properties that you can set at the properties\ndescription.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_lock69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.lock ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Locks the widget, keeping the widget from being \nrefreshed. If you lock the widget you should verify that you unlock it \nsomewhere. The number of <I>lock()</I> calls should be the same with the \nnumber of <I>unlock()</I> calls. Lock and unlock calls can be nested.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_unlock69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.unlock ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Unlocks the widget, and calls\n<I>do_paint()</I>. The widget is only unlocked if the number of unlock\ncalls is equal to the number of lock calls.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_do_paint69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.do_paint ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Refresh the widget calling \n<I>paintEvent(QPaintEvent *e)</I> for the <I>Qt_widget</I> only if the widget is \nunlocked. This mean that <I>redraw()</I> is called if and only if the widget is \nunlocked.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_redraw69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.redraw ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    If you derive from <I>Qt_widget</I> you have to \noverload this function and put your code for drawing here if you don't use \n<I>layers</I>. The best way is to attach layers to the widget and\ncall this method. This method redraws the layers attached and\nactive. Before drawing the layers, redraw clear the screen and emit\n<I>redraw_on_back()</I>. Emit <I>redraw_on_front()</I> at the end.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_print_to_ps69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.print_to_ps ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Redraws all the attached and active\nlayers into a Postscript device. It could be a file or a\nprinter. This method also use signals as <I>redraw_on_back()</I> or <I>redraw_on_front()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Properties</H3>\n<P>\n\nYou can set the properties of the functions through this functions as\nwell as with the help of manipulators described later. The function\nnaming convention has changed for this member functions, to <I>Qt</I> convention.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setColor6Qcolor_c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setColor ( Qcolor c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current pen color of the widget to \nbe c.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setBackgroundColor6QColor_c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setBackgroundColor ( QColor c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current background color \nto be <I>c</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setFillColor6QColor_c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setFillColor ( QColor c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current fill color of the \nwidget to be <I>c</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setFilled6bool_f9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setFilled ( bool f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the status of the widget to\ntrue or false concerning filling the objects: polygons, circles,\nrectangles ...\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setLineWidth6unsigned_int_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setLineWidth ( unsigned int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current line width of the widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setPointSize6unsigned_int_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setPointSize ( unsigned int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current point size of the widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setPointStyle6PointStyle_s9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setPointStyle ( <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A> s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current point style of the\n widget to s. <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A> is a enumeration declared in <I>Qt_widget</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_setRasterOp6RasterOp_r9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.setRasterOp ( RasterOp r)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Set the current raster operation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Layers</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_attach6Qt_widget_layer*_s9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.attach ( <A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A>* s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Add the layer s in the list of \nlayers.The last added will be on top of the screen. Also the events\nare forwarded to layers in the order they have been attached.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_detach6Qt_widget_layer*_s9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.detach ( <A HREF=\"Class_Qt_widget_layer.html#Cross_link_anchor_1762\">Qt_widget_layer</A>* s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Remove the layer s from the list. \ns it's a pointer to an existing layer.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>New CGAL Objects</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_new_object6CGAL::Object_obj9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.new_object ( <A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_87\">CGAL::Object</A> obj)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This function should be called \nby the tools that create C<SMALL>GAL</SMALL> objects. It then emits the signal \n<I>new_cgal_object(<A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_87\">CGAL::Object</A>)</I>. Slots of other components can be\nconnected to this signal.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\nNote that we use also types from <I>Qt</I> here.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_QColor_color69_const;\"></A>\nQColor\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.color ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current pen color. The color \nreturned is a Qt class.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_QColor_backgroundColor69_const;\"></A>\nQColor\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.backgroundColor ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current widget\nbackground color. The color returned is a Qt class.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_QColor_fillColor69_const;\"></A>\nQColor\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.fillColor ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current color used\nfor filling the objects. The color returned is a Qt class.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_PointStyle_pointStyle69;\"></A>\n<A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.pointStyle ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current point style. <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A>\n is a enumeration declared in <I>Qt_widget</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_uint_pointSize69;\"></A>\nuint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.pointSize ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current point size.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_uint_lineWidth69;\"></A>\nuint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.lineWidth ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current line width.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_RasterOp_rasterOp69;\"></A>\nRasterOp\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.rasterOp ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Return the current raster operation.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_x_min69_const;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.x_min ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the left <I>x</I> coordinate\nof the widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_y_min69_const;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.y_min ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the lower <I>y</I> coordinate\nof the widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_x_max69_const;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.x_max ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the right <I>x</I> coordinate\nof the widget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_y_max69_const;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.y_max ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the upper <I>y</I> coordinate\nof the widget.\n        </TD></TR>\n        </TABLE><BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nThe coordinates of the screen are maped to a certain interval that you \ncan choose  with <I>set_window</I> member function. The scale of the\nobjects you can visualize is computed and maintained the same for both \naxes to keep the aspect ratio of the objects. You should use\n<I>x_real</I> or <I>y_real</I> to get the real world coordinates, for\nyour screen coordinates. If you are using\n<I>gmp</I> you can use this functions with <I><A HREF=\"../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1362\">Gmpq</A></I> as second\nparameter. You may need it when you work with rationals. The double\nfrom the other function could be more complex and can make you loose\nspeed in computations. Computing with rational coordinates directly\ncould increase the speed, rather than computing with complex double\ncoordinates.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_x_real6int_x9;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.x_real ( int x)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_y_real6int_y9;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.y_real ( int y)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class FT&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_x_real6int_x+_FT_9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    x_real ( int x,  FT&amp;)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns\nthe <I>x</I> real world coordinate of the <I>Qt_widget</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class FT&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_y_real6int_y+_FT__9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    y_real ( int y,  FT&amp;)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the <I>y</I> real world coordinate of the\n<I>Qt_widget</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_x_real6int+_Gmpq_9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.x_real ( int,  <A HREF=\"../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1362\">Gmpq</A>&amp;)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_y_real6int+_Gmpq_9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.y_real ( int,  <A HREF=\"../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1362\">Gmpq</A>&amp;)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_x_pixel6double_x9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.x_pixel ( double x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This method is the <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> of\n<I>x_real</I> method. Converts the world coordinates in screen\ncoordinates. If you want to get an integer between 0 and width, you\nshould pass an x between xmin and xmax.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_y_pixel6double_y9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.y_pixel ( double y)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This method is the <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> of\n<I>y_real</I> method. Converts the world coordinates in screen\ncoordinates. If you want to get an integer between 0 and height, you\nshould pass an y between ymin and ymax.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Painter and Pixmap</H3>\n<P>\n\nIn order that layers can draw on the drawing <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> of a widget, they\nhave to access the underlying pixmap and painter.\n<P>\n\n<I>Qt_widget</I> use as a backbuffer for drawing a pixmap\ndefined inside the class, i.e. an object of type <I>QPixmap</I>. The\n<I>QPixmap</I> class is an off-screen pixel-based paint device. One\ncommon use of the <I>QPixmap</I> class is to enable smooth updating of widgets.\nThe QPainter class paints on paint devices. There is an object of type \nQPainter defined in <I>Qt_widget</I> that uses as a paint device\nthe <I>QPixmap</I> object.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_QPixmap__get_pixmap69;\"></A>\nQPixmap&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.get_pixmap ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current pixmap.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_QPainter__get_painter69;\"></A>\nQPainter&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    win.get_painter ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current painter.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>Signals</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_mousePressEvent6QMouseEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_mousePressEvent ( QMouseEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_mouseReleaseEvent6QMouseEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_mouseReleaseEvent ( QMouseEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_mouseMoveEvent6QMouseEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_mouseMoveEvent ( QMouseEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_paintEvent6QPaintEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_paintEvent ( QPaintEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_resizeEvent6QResizeEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_resizeEvent ( QResizeEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_wheelEvent6QMouseEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_wheelEvent ( QMouseEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_mouseDoubleClickEvent6QMouseEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_mouseDoubleClickEvent ( QMouseEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_keyPressEvent6QKeyEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_keyPressEvent ( QKeyEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_keyReleaseEvent6QKeyEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_keyReleaseEvent ( QKeyEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_enterEvent6QEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_enterEvent ( QEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_leaveEvent6QEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_leaveEvent ( QEvent *e)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_s_event6QEvent_*e9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.s_event ( QEvent *e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The <I>Qt_widget</I> receives the\nevents through virtual functions. This is the mechanism that <I>Qt</I> offers for dispaching events. This signals are called every time an\nevent is dispatched to a virtual function. For example if\n<I>Qt_widget</I> receives <I>mousePressEvent(QMouseEvent *e)</I> emits\n<I>s_mousePressEvent(e)</I>. This is very useful when you have only a\npointer to <I>Qt_widget</I>. It is enough to connect this slot to your\nfunction to receive the event.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_new_cgal_object6CGAL::Object9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.new_cgal_object ( <A HREF=\"../Kernel_23_ref/Class_Object.html#Cross_link_anchor_87\">CGAL::Object</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Triggered when a new object \nfrom a tool is received. The user should catch this signal if it's working with\ntools that provide C<SMALL>GAL</SMALL> objects as input.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_custom_redraw69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.custom_redraw ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Deprecated: Emitted in the redraw()\nfunction after the layers are drawn.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_redraw_on_back69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.redraw_on_back ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Emmitted in <I>redraw()</I> method before\ncalling layer's redraw.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_redraw_on_front69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.redraw_on_front ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Emmitted in <I>redraw()</I> method after\ncalling layer's redraw.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_rangesChanged69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    win.rangesChanged ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Emmitted each time (xmin, xmax) and\n(ymin, ymax) ranges are changed.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operators for Output</H3>\n<P>\n\nThe output operator is defined for all geometric classes in the C<SMALL>GAL</SMALL> kernel.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;R&gt; p<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Point_26R9__p9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;R&gt; s<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Segment_26R9__s9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;R&gt; l<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Line_26R9__l9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>&lt;R&gt; r<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Ray_26R9__r9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Triangle_2.html#Cross_link_anchor_58\">Triangle_2</A>&lt;R&gt; t<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Triangle_26R9__t9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Iso_rectangle_2.html#Cross_link_anchor_48\">Iso_rectangle_2</A>&lt;R&gt; r<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Iso_rectangle_26R9__r9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A>&lt;R&gt; c<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Circle_26R9__c9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nTo use the other operators described you have to include the right header.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Polygon_2.h\">CGAL/IO/Qt_widget_Polygon_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Tr, class Co&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>&lt;Tr,Co&gt; pol<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Polygon_26Tr+Co9__pol9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Min_ellipse_2.h\">CGAL/IO/Qt_widget_Min_ellipse_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Traits_&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp;win &lt;&lt;  <A HREF=\"../Optimisation_ref/Class_Min_ellipse_2.html#Cross_link_anchor_1144\">Min_ellipse_2</A>&lt;Traits_&gt; min_ellipse<A NAME=\"Function_Qt_widget__operator666_Qt_widget__win+_const_Min_ellipse_26Traits_9__min_ellipse9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Optimisation_ellipse_2.h\">CGAL/IO/Qt_widget_Optimisation_ellipse_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Traits_&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp;win &lt;&lt;  Optimisation_ellipse_2&lt;Traits_&gt; oe<A NAME=\"Function_Qt_widget__operator666_Qt_widget__win+_const_Optimisation_ellipse_26Traits_9__oe9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Optimisation_circle_2.h\">CGAL/IO/Qt_widget_Optimisation_circle_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp;win &lt;&lt;  Optimisation_circle_2&lt;Traits_&gt; oc<A NAME=\"Function_Qt_widget__operator666_Qt_widget__win+_const_Optimisation_circle_26Traits_9__oc9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Conic_2.h\">CGAL/IO/Qt_widget_Conic_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  Conic_2&lt;R&gt; c<A NAME=\"Function_Qt_widget__operator666_Qt_widget__win+_const_Conic_26R9__c9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Triangulation_2.h\">CGAL/IO/Qt_widget_Triangulation_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class Gt, class Tds&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Triangulation_2_ref/Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Gt, Tds&gt; t<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Triangulation_26Gt+_Tds9__t9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Alpha_shape_2.h\">CGAL/IO/Qt_widget_Alpha_shape_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class Dt&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt; As<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Alpha_shape_26Dt9__As9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Delaunay_triangulation_2.h\">CGAL/IO/Qt_widget_Delaunay_triangulation_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Gt, class Tds&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>&lt;R&gt; dt<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Delaunay_triangulation_26R9__dt9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Constrained_triangulation_2.h\">CGAL/IO/Qt_widget_Constrained_triangulation_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Gt, class Tds&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Triangulation_2_ref/Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Gt, Tds&gt; t<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Constrained_triangulation_26Gt+_Tds9__t9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Qt_widget_Regular_triangulation_2.h\">CGAL/IO/Qt_widget_Regular_triangulation_2.h</A>&gt;</I>\n<P>\n\n\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class Gt, class Tds&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_927\">Regular_triangulation_2</A>&lt;Gt, Tds&gt; t<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Regular_triangulation_26Gt+_Tds9__t9;\"></A>\n\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Manipulators for Qt_widget</H3>\n<P>\n\nA <I>manipulator</I> is an object which can be inserted in the <I>Qt_widget</I>\n, via the operator <I>&lt;&lt;</I>, to change the context for further\ndrawing.\n<P>\n\nHere, we simply document the use of these operators which is all the\nuser needs to know to modify the state of a stream.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  BackgroundColor( <A HREF=\"../Colors_and_windows_ref/Class_Color.html#Cross_link_anchor_1754\">Color</A> c)<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_BackgroundColor6const_Color__c99;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the color used for background color.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  FillColor( <A HREF=\"../Colors_and_windows_ref/Class_Color.html#Cross_link_anchor_1754\">Color</A> c)<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_FillColor6const_Color__c99;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the color used for filling the objects.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  LineWidth(const unsigned int i)<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_LineWidth6const_unsigned_int_i99;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the width of the line for drawing objects.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  PointSize(const unsigned int i)<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_PointSize6const_unsigned_int_i99;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the size of the points.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n      &amp; win &lt;&lt;  noFill<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_noFill9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the state \nof Qt_widget concerning filling the objects to be false.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"../Colors_and_windows_ref/Class_Color.html#Cross_link_anchor_1754\">Color</A> c<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_Color__c9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the \ncolor used as the Qt_widget fillColor.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Qt_widget&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      &amp; win &lt;&lt;  <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A> ps<A NAME=\"Function_Qt_widget__operator666Qt_widget__win+_const_PointStyle__ps9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets\n the point style for <I>Qt_widget</I>.\n        </TD></TR>\n        </TABLE>\n\n\n<P>\n\n<H3>Example</H3>\n<P>\n\nIn the given example, that is found in\ntutorial/Qt_widget/tutorial1/tutorial1.C, we create an object of type\n<I>Qt_widget</I> and then we use the operators for output and the\nmanipulators to show some of the widget's functionality.\n<P>\n\n<pre class=\"ExampleCode\">\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A>.h&gt;\n#include &lt;list&gt;\n#include &lt;CGAL/<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>.h&gt;\n#include &lt;CGAL/IO/Qt_widget_Polygon_2.h&gt;\n#include &lt;qapplication.h&gt;\n#include &lt;CGAL/IO/Qt_widget.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;int&gt;   Rep;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt;Rep&gt;     Point;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_43\">CGAL::Circle_2</A>&lt;Rep&gt;    Circle;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_55\">CGAL::Segment_2</A>&lt;Rep&gt;   Segment;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_49\">CGAL::Line_2</A>&lt;Rep&gt;      Line;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_53\">CGAL::Ray_2</A>&lt;Rep&gt;       Ray;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Triangle_2.html#Cross_link_anchor_57\">CGAL::Triangle_2</A>&lt;Rep&gt;  Triangle;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Iso_rectangle_2.html#Cross_link_anchor_47\">CGAL::Iso_rectangle_2</A>&lt;Rep&gt;\n                               Cgal_Rectangle;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Bbox_2.html#Cross_link_anchor_41\">CGAL::Bbox_2</A>           BBox;\ntypedef std::list&lt;Point&gt;       Container;\ntypedef <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A>&lt;Rep,Container&gt;\n                               Cgal_Polygon;\n\nint main( int argc, char **argv )\n{\n  QApplication app( argc, argv );\n  using namespace CGAL;\n  CGAL::Qt_widget * W = new CGAL::Qt_widget();\n  app.setMainWidget( W );\n  W-&gt;resize(600, 600);\n  W-&gt;set_window(0, 600, 0, 600);\n  W-&gt;show();\n  //painting something on the screen\n  W-&gt;lock();\n\n  *W &lt;&lt; BackgroundColor(ORANGE) &lt;&lt; RED &lt;&lt;\n  LineWidth(3) &lt;&lt; PointSize(3) &lt;&lt; <A HREF=\"Class_Qt_widget#Enum_PointStyle\">PointStyle</A>(<A HREF=\"Class_Qt_widget#Enum_PointStyle\">DISC</A>);\n  *W &lt;&lt; Segment(Point(10,20),Point(300,400));\n  *W &lt;&lt; LineWidth(5) &lt;&lt; GREEN &lt;&lt; FillColor(BLACK) &lt;&lt;\n    Circle(Point(400,400),50*50);\n  *W &lt;&lt; LineWidth(1) &lt;&lt; noFill &lt;&lt; Circle(Point(300,300),300*300);\n  *W &lt;&lt; BLUE &lt;&lt; LineWidth(2);\n  *W &lt;&lt; Segment(Point(200,200),Point(400,400));\n  *W &lt;&lt; Segment(Point(200,400),Point(400,200));\n  W-&gt;setFilled(TRUE);\n  *W &lt;&lt; RED &lt;&lt; Triangle(Point(150,300),\n                                  Point(150,350),\n                                  Point(100,325));\n  *W &lt;&lt; FillColor(RED) &lt;&lt; Cgal_Rectangle(Point(320,220),\n                                              Point(350,240));\n  *W &lt;&lt; DEEPBLUE &lt;&lt; BBox(100,80,260,140);\n  Cgal_Polygon p;\n  p.push_back(Point(300,30));\n  p.push_back(Point(400,30));\n  p.push_back(Point(500,130));\n  p.push_back(Point(400,180));\n  p.push_back(Point(300,130));\n  *W &lt;&lt; p;\n  *W &lt;&lt; Ray(Point(200,400), Point(180,430))\n    &lt;&lt; Ray(Point(200,400), Point(180,370));\n  W-&gt;unlock();\n\n  return app.exec();\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Qt_widget_layer.html\"><I>Qt_widget_layer</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_17!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38913.0}