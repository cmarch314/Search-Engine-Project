{"text": " Home Trees Indices Help Package CHEM Package Annotation Module ChemicalAnnotators Class AtomBondCountAnnotator hide private frames no frames Class AtomBondCountAnnotator BaseAnnotator BaseAnnotator AtomBondCountAnnotator Collect multiple and various atom counts for the input OEMolBase More efficient to calculate these all with one multiple annotator since they re all based on the same loop through the components of the molecule annotator AtomBondCountAnnotator print callBySmiles annotator c1ccccc1O 13 7 6 1 6 13 1 3 print callBySmiles annotator OC C N 11 4 2 1 1 7 1 1 1 print callBySmiles annotator COCN C C 17 6 4 1 1 11 16 16 2 print callBySmiles annotator C1OCNCO1 13 6 3 2 1 7 13 13 print callBySmiles annotator C1OC C NCO1 16 7 4 2 1 9 1 16 16 print callBySmiles annotator C1O C H C NCO1 16 7 4 2 1 9 1 16 16 print callBySmiles annotator OC CN 9 4 2 1 1 5 8 7 1 1 print callBySmiles annotator OC C 7 3 2 1 4 6 5 1 print callBySmiles annotator OC CO 8 4 2 2 4 7 6 1 1 annotator specifyColumns num heavy atoms num o num n print callBySmiles annotator c1ccccc1O 7 1 print callBySmiles annotator OC C N 4 1 1 print callBySmiles annotator COCN C C 6 1 1 print callBySmiles annotator C1OCNCO1 6 2 1 print callBySmiles annotator C1OC C NCO1 7 2 1 print callBySmiles annotator C1O C H C NCO1 7 2 1 annotator AtomBondCountAnnotator num c print callBySmiles annotator c1ccccc1O 6 print callBySmiles annotator OC C N 2 print callBySmiles annotator COCN C C 4 print callBySmiles annotator C1OCNCO1 3 print callBySmiles annotator C1OC C NCO1 4 print callBySmiles annotator C1O C H C NCO1 4 Instance Methods hide private allColumns self Return an ordered sequence of all the column names that this multiple annotator can generate values for allValues self input Return an ordered sequence of all the values this multiple annotator can calculate off of the input Inherited from BaseAnnotator BaseAnnotator init annotateDict iteritems iterkeys itervalues keys specifyColumns values Class Variables hide private Inherited from BaseAnnotator BaseAnnotator specificCols Method Details hide private allColumns self Return an ordered sequence of all the column names that this multiple annotator can generate values for To facilitate ease of filtering with case insensitivity all of the values returned by this method should be lowercase Overrides BaseAnnotator BaseAnnotator allColumns inherited documentation allValues self input Return an ordered sequence of all the values this multiple annotator can calculate off of the input The order must correspond to the column list returned by allColumns so the caller can know which element is which Overrides BaseAnnotator BaseAnnotator allValues inherited documentation Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 26 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.Annotation.ChemicalAnnotators.AtomBondCountAnnotator-class.html", "title": "chem.annotation.chemicalannotators.atombondcountannotator", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.Annotation.ChemicalAnnotators.AtomBondCountAnnotator</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.Annotation-module.html\">Package&nbsp;Annotation</a> ::\n        <a href=\"CHEM.Annotation.ChemicalAnnotators-module.html\">Module&nbsp;ChemicalAnnotators</a> ::\n        Class&nbsp;AtomBondCountAnnotator\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.Annotation.ChemicalAnnotators.AtomBondCountAnnotator-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class AtomBondCountAnnotator</h1><br /><br />\n<pre class=\"base-tree\">\nBaseAnnotator.BaseAnnotator --+\n                              |\n                             <strong class=\"uidshort\">AtomBondCountAnnotator</strong>\n</pre>\n\n<hr />\nCollect multiple and various atom counts for the input OEMolBase. More\n  efficient to calculate these all with one multiple annotator since \n  they're all based on the same loop through the components of the \n  molecule.\n<pre class=\"py-doctest\">\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>annotator = AtomBondCountAnnotator();\n<span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;c1ccccc1O&quot;</span>);\n<span class=\"py-output\">[13, 7, 6, 1, 0, 6, 0, 13, 10, 3, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;OC(C)N&quot;</span>);\n<span class=\"py-output\">[11, 4, 2, 1, 1, 7, 1, 10, 10, 0, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;COCN(C)C&quot;</span>);\n<span class=\"py-output\">[17, 6, 4, 1, 1, 11, 0, 16, 16, 0, 2, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;C1OCNCO1&quot;</span>);\n<span class=\"py-output\">[13, 6, 3, 2, 1, 7, 0, 13, 13, 0, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;C1OC(C)NCO1&quot;</span>);\n<span class=\"py-output\">[16, 7, 4, 2, 1, 9, 1, 16, 16, 0, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;C1O[C@H](C)NCO1&quot;</span>);\n<span class=\"py-output\">[16, 7, 4, 2, 1, 9, 1, 16, 16, 0, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;OC=CN&quot;</span>);\n<span class=\"py-output\">[9, 4, 2, 1, 1, 5, 0, 8, 7, 1, 0, 1]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;OC=C&quot;</span>);\n<span class=\"py-output\">[7, 3, 2, 1, 0, 4, 0, 6, 5, 1, 0, 0]</span>\n<span class=\"py-output\"></span><span class=\"py-prompt\">&gt;&gt;&gt; </span><span class=\"py-keyword\">print</span> callBySmiles( annotator, <span class=\"py-string\">&quot;OC=CO&quot;</span>);\n<span class=\"py-output\">[8, 4, 2, 2, 0, 4, 0, 7, 6, 1, 0, 1]</span></pre>\n  &gt;&gt;&gt; &gt;&gt;&gt; annotator.specifyColumns( \n  [&quot;num_heavy_atoms&quot;, &quot;num_o&quot;, &quot;num_n&quot;] ); \n  &gt;&gt;&gt; print callBySmiles( annotator, &quot;c1ccccc1O&quot;); [7, \n  1, 0] &gt;&gt;&gt; print callBySmiles( annotator, &quot;OC(C)N&quot;); \n  [4, 1, 1] &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;COCN(C)C&quot;); [6, 1, 1] &gt;&gt;&gt; print callBySmiles( \n  annotator, &quot;C1OCNCO1&quot;); [6, 2, 1] &gt;&gt;&gt; print \n  callBySmiles( annotator, &quot;C1OC(C)NCO1&quot;); [7, 2, 1] &gt;&gt;&gt;\n  print callBySmiles( annotator, &quot;C1O[C@H](C)NCO1&quot;); [7, 2, 1] \n  &gt;&gt;&gt; &gt;&gt;&gt; annotator = AtomBondCountAnnotator( \n  [&quot;num_c&quot;] ); &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;c1ccccc1O&quot;); [6] &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;OC(C)N&quot;); [2] &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;COCN(C)C&quot;); [4] &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;C1OCNCO1&quot;); [3] &gt;&gt;&gt; print callBySmiles( annotator, \n  &quot;C1OC(C)NCO1&quot;); [4] &gt;&gt;&gt; print callBySmiles( annotator,\n  &quot;C1O[C@H](C)NCO1&quot;); [4]<br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Annotation.ChemicalAnnotators.AtomBondCountAnnotator-class.html#allColumns\" class=\"summary-sig-name\">allColumns</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Return an ordered sequence of all the column names that this \n      multiple annotator can generate values for.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Annotation.ChemicalAnnotators.AtomBondCountAnnotator-class.html#allValues\" class=\"summary-sig-name\">allValues</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">input</span>)</span><br />\n      Return an ordered sequence of all the values this multiple \n      annotator can calculate off of the input.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n  <tr>\n    <td colspan=\"2\" class=\"summary\">\n    <p class=\"indent-wrapped-lines\"><b>Inherited from <code>BaseAnnotator.BaseAnnotator</code></b>:\n      <code>__init__</code>,\n      <code>annotateDict</code>,\n      <code>iteritems</code>,\n      <code>iterkeys</code>,\n      <code>itervalues</code>,\n      <code>keys</code>,\n      <code>specifyColumns</code>,\n      <code>values</code>\n      </p>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n  <tr>\n    <td colspan=\"2\" class=\"summary\">\n    <p class=\"indent-wrapped-lines\"><b>Inherited from <code>BaseAnnotator.BaseAnnotator</code></b>:\n      <code>specificCols</code>\n      </p>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"allColumns\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">allColumns</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Return an ordered sequence of all the column names that this multiple \n  annotator can generate values for.</p>\n  To facilitate ease of filtering with case-insensitivity, all of the \n  values returned by this method should be lowercase.\n  <dl class=\"fields\">\n    <dt>Overrides:\n      <a href=\"CHEM.Annotation.BaseAnnotator.BaseAnnotator-class.html#allColumns\">BaseAnnotator.BaseAnnotator.allColumns</a>\n        <dd><em class=\"note\">(inherited documentation)</em></dd>\n    </dt>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"allValues\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">allValues</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">input</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Return an ordered sequence of all the values this multiple annotator \n  can calculate off of the input.  The order must correspond to the column \n  list returned by allColumns so the caller can know which element is \n  which.\n  <dl class=\"fields\">\n    <dt>Overrides:\n      <a href=\"CHEM.Annotation.BaseAnnotator.BaseAnnotator-class.html#allValues\">BaseAnnotator.BaseAnnotator.allValues</a>\n        <dd><em class=\"note\">(inherited documentation)</em></dd>\n    </dt>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:26 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40594.0}