{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL maximum area inscribed k gon 2 DefinitionThe function maximum area inscribed k gon 2 computes a maximum area k gon Pk that can be inscribed into a given convex polygon P Note that Pk is not unique in general but it can be chosen in such a way that its vertices form a subset of the vertex set of P and the vertices of a maximum area k gon where the k vertices are to be drawn from a planar point set S lie on the convex hull of S i e a convex polygon include CGAL extremal polygon 2 h template class RandomAccessIterator class OutputIterator OutputIterator maximum area inscribed k gon 2 RandomAccessIterator points begin RandomAccessIterator points end int k OutputIterator o computes a maximum area inscribed k gon of the convex polygon described by points begin points end writes its vertices to o and returns the past the end iterator of this sequence Precondition the at least three points denoted by the range points begin points end form the boundary of a convex polygon oriented clock or counterclockwise k 3 Requirement Value type of RandomAccessIterator is K Point 2 where K is a model for Kernel OutputIterator accepts the value type of RandomAccessIterator as value type See AlsoCGAL maximum perimeter inscribed k gon 2 ExtremalPolygonTraits 2 CGAL Extremal polygon area traits 2 K CGAL Extremal polygon perimeter traits 2 K CGAL extremal polygon 2 CGAL monotone matrix search ImplementationThe implementation uses monotone matrix search AKM 87 and has a worst case running time of O k n n logn where n is the number of vertices in P ExampleThe following code generates a random convex polygon p with ten vertices and computes the maximum area inscribed five gon of p include CGAL Cartesian h include CGAL Polygon 2 h include CGAL point generators 2 h include CGAL random convex set 2 h include CGAL extremal polygon 2 h include iostream include vector typedef double FT struct Kernel public CGAL Cartesian FT typedef Kernel Point 2 Point typedef std vector int Index cont typedef CGAL Polygon 2 Kernel Polygon typedef CGAL Random points in square 2 Point Generator int main int n 1 int k 5 generate random convex polygon Polygon p CGAL random convex set 2 n std back inserter p Generator 1 std cout Generated Polygon n p std endl compute maximum area incribed k gon of p Polygon k gon CGAL maximum area inscribed k gon 2 p vertices begin p vertices end k std back inserter k gon std cout Maximum area k gon n k gon std endl return Next maximum perimeter inscribed k gon 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation_ref/Function_maximum_area_inscribed_k_gon_2.html", "title": "maximum_area_inscribed_k_gon_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation_ref/spec_extremal_polygons.tex' -->\n<html> <head>  \n<title>maximum_area_inscribed_k_gon_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1182\"></A>\n\n<A NAME=\"Cross_link_anchor_1183\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1221\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::maximum_area_inscribed_k_gon_2\"></A>\n<h2><I>CGAL::maximum_area_inscribed_k_gon_2</I></h2>\n\n\n  \n<A NAME=\"Index_anchor_1222\"></A> \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1223\"></A> \n\n   \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1224\"></A>\n<P>\n\n<H3>Definition</H3>The function <I><A HREF=\"Function_maximum_area_inscribed_k_gon_2.html#Cross_link_anchor_1183\">maximum_area_inscribed_k_gon_2</A></I> computes a maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A>\n  <MATH><I>k</I></MATH>-gon <MATH><I>P<SUB>k</SUB></I></MATH> that can be inscribed into a given convex polygon <MATH><I>P</I></MATH>.\n  Note that\n  <UL>\n  <LI><MATH><I>P<SUB>k</SUB></I></MATH> is not unique in general, but it can be chosen in such a\n    way that its vertices form a subset of the vertex set of <MATH><I>P</I></MATH> and\n  <LI>the vertices of a maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> <MATH><I>k</I></MATH>-gon, where the <MATH><I>k</I></MATH> vertices\n    are to be drawn from a planar point set <MATH><I>S</I></MATH>, lie on the convex\n    hull of <MATH><I>S</I></MATH> i.e. a convex polygon.\n  </UL>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/extremal_polygon_2.h\">CGAL/extremal_polygon_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class RandomAccessIterator, class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_maximum_area_inscribed_k_gon_26_RandomAccessIterator_points_begin+_RandomAccessIterator_points_end+_int_k+_OutputIterator_o9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    <A HREF=\"Function_maximum_area_inscribed_k_gon_2.html#Cross_link_anchor_1183\">maximum_area_inscribed_k_gon_2</A> ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    RandomAccessIterator points_begin,<BR>\n\nRandomAccessIterator points_end,<BR>\n\nint k,<BR>\n\nOutputIterator o)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\ncomputes a maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> inscribed <MATH><I>k</I></MATH>-gon of the convex polygon\n  described by [<I>points_begin</I>, <I>points_end</I>), writes its\n  vertices to <I>o</I> and returns the past-the-end iterator of this\n  sequence.\n<P>\n\n<BR>\n\n<EM>Precondition: </EM><OL>\n  <LI>the - at least three - points denoted by the range\n    [<I>points_begin</I>, <I>points_end</I>) form the boundary of a\n    convex polygon (oriented clock- or counterclockwise).\n  <LI><MATH><I>k  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> 3</I></MATH>.\n  </OL>\n<P>\n\n<BR>\n\n<EM>Requirement: </EM><OL>\n  <LI>Value type of <I>RandomAccessIterator</I> is <I>K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>\n    where <I>K</I> is a model for <I><A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A></I>.\n  <LI><I>OutputIterator</I> accepts the value type of\n    <I>RandomAccessIterator</I> as value type.\n  </OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_maximum_perimeter_inscribed_k_gon_2.html#Cross_link_anchor_1184\">CGAL::maximum_perimeter_inscribed_k_gon_2</A></I><BR>\n\n<I><A HREF=\"Concept_ExtremalPolygonTraits_2.html#Cross_link_anchor_1192\">ExtremalPolygonTraits_2</A></I><BR>\n\n<I><A HREF=\"Class_Extremal_polygon_area_traits_2.html#Cross_link_anchor_1188\">CGAL::Extremal_polygon_area_traits_2</A>&lt;K&gt;</I><BR>\n\n<I><A HREF=\"Class_Extremal_polygon_perimeter_traits_2.html#Cross_link_anchor_1190\">CGAL::Extremal_polygon_perimeter_traits_2</A>&lt;K&gt;</I><BR>\n\n<I><A HREF=\"Function_extremal_polygon_2.html#Cross_link_anchor_1186\">CGAL::extremal_polygon_2</A></I><BR>\n\n<I><A HREF=\"Function_monotone_matrix_search.html#Cross_link_anchor_1206\">CGAL::monotone_matrix_search</A></I>\n<P>\n\n<H3>Implementation</H3>The implementation uses monotone matrix search\n  [<A HREF=\"../biblio.html#Biblio_akmsw-gamsa-87\">AKM<MATH><I><SUP>+</SUP></I></MATH>87</A>] and has a worst case running time of <MATH><I>O(k\n   &middot; n + n  &middot; </I></MATH>log<MATH><I>n)</I></MATH>, where <MATH><I>n</I></MATH> is the number of vertices in\n  <MATH><I>P</I></MATH>.\n<P>\n\n<H3>Example</H3>The following code generates a random convex polygon\n  <I>p</I> with ten vertices and computes the maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> inscribed\n  five-gon of <I>p</I>.\n<P>\n\n<pre class=\"ExampleCode\">#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>.h&gt;\n#include &lt;CGAL/point_generators_2.h&gt;\n#include &lt;CGAL/<A HREF=\"../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1684\">random_convex_set_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Function_extremal_polygon_2.html#Cross_link_anchor_1187\">extremal_polygon_2</A>.h&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\ntypedef double                                    FT;\n\nstruct <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> : public <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;FT&gt; {};\n\ntypedef <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A>                           Point;\ntypedef std::vector&lt;int&gt;                          Index_cont;\ntypedef <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;                   Polygon;\ntypedef <A HREF=\"../Generator_ref/Class_Random_points_in_square_2.html#Cross_link_anchor_1699\">CGAL::Random_points_in_square_2</A>&lt;Point&gt;    Generator;\n\nint main() {\n\n  int n = 10;\n  int k = 5;\n\n  // generate random convex polygon:\n  Polygon p;\n  <A HREF=\"../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1683\">CGAL::random_convex_set_2</A>(n, std::back_inserter(p), Generator(1));\n  std::cout &lt;&lt; &quot;Generated Polygon:\\n&quot; &lt;&lt; p &lt;&lt; std::endl;\n\n  // compute maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> incribed k-gon of p:\n  Polygon k_gon;\n  <A HREF=\"Function_maximum_area_inscribed_k_gon_2.html#Cross_link_anchor_1182\">CGAL::maximum_area_inscribed_k_gon_2</A>(\n    p.vertices_begin(), p.vertices_end(), k, std::back_inserter(k_gon));\n  std::cout &lt;&lt; &quot;Maximum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> &quot; &lt;&lt; k &lt;&lt; &quot;-gon:\\n&quot;\n            &lt;&lt; k_gon &lt;&lt; std::endl;\n\n  return 0;\n} \n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_maximum_perimeter_inscribed_k_gon_2.html\"><I>maximum_perimeter_inscribed_k_gon_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_52!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38925.0}