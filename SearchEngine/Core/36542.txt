{"text": "Version ident Id README html v 1 1 2 2 12 5 5 34 3 ballie 1 Exp pyPgSQL v2 3 Python DB API 2 Compliant Interface Module for PostgreSQL Copyright notice and License pyPgSQL version 2 3 A Python DB API 2 compliant interface for PostgreSQL Copyright 2 by Billy G Allie All rights reserved Permission to use copy modify and distribute this software and it s documentation for any purpose and without fee is hereby granted provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation and that the copyright owner s name not be used in advertising or publicity pertaining to distribution of the software without specific written prior permission THE AUTHOR S DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR S BE LIABLE FOR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE DATA OR PROFITS WHETHER IN AN ACTION OF CONTRACT NEGLIGENCE OR OTHER TORTUOUS ACTION ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE 1 About pyPgSQL 1 1 Introduction PostgreSQL is a sophisticated Object Relational DBMS supporting almost all SQL constructs including sub selects transactions and user defined types and functions It is the most advanced open source database available anywhere More information about PostgreSQL can be found at the PostgreSQL home page at http www postgresql org Python is an interpreted interactive object oriented programming language It combines remarkable power with very clear syntax It has modules classes exceptions very high level dynamic data types and dynamic typing There are interfaces to many system calls and libraries as well as to various windowing systems X11 Motif Tk Mac MFC New builtin modules are easily written in C or C Python is also usable as an extension language for applications that need a programmable interface Python is copyrighted but freely usable and distributable even for commercial use More information about Python can be found on the Python home page at http www python org pyPgSQL is a package of two 2 modules that provide a Python DB API 2 compliant interface to PostgreSQL databases The first module libpq exports the PostgreSQL C API to Python This module is written in C and can be compiled into Python or can be dynamically loaded on demand The second module PgSQL provides the DB API 2 compliant interface and support for various PostgreSQL data types such as INT8 NUMERIC MONEY BOOL ARRAYS etc This module is written in Python This version works with PostgreSQL 7 or later and Python 2 or later pyPgSQL was originally developed on a UnixWare 7 1 1 system but is nowadays also developed on FreeBSD and various Windows and Linux flavours 1 2 Distribution Files README This file Announce Announcement of this release ChangeLog changes to this package during it s history libpqmodule c the C code implementing the libqp module pgboolean ch the C code implementing the PostgreSQL BOOL type object for Python pgconnection ch the C code implementing the PgConnection class pgint2object ch the C code implementing the PostgreSQL INT2 type object for Python pgint8object ch the C code implementing the PostgreSQL INT8 type object for Python pglargeobject ch the C code implementing the PgLargeObject class pgnotify ch the C code implementing the PgNotify class pgresult ch the C code implementing the PgResult class pgversion ch the C code implementing the PgVersion class pymemstrdup c the C code implementing a version of strdup that uses Python s heap for the needed memory pyPgSQL init py the initialization code for the pyPgSQL package pyPgSQL PgSQL py the module that implements the Python DB API 2 compliant interface to PostgreSQLpyPgSQL libpq the package for the libpq module pyPgSQL libpq init py the initialization code for the libpq package setup py Distutil setup file for building and installing pyPgSQLport String functions imported from the FreeBSD source tree and given a pg prefix test PgSQLTestCases py A set of functional test cases built using the Python Unit Testing Framework PyUnit test regression Test cases to test specific sections of pyPgSQL examples Some example programs using libpq and PgSQL 1 3 Installation These instructions assume you have Python 2 or later and at least PostgreSQL 7 7 2 or later recommended installed on your system If you are going to use the DB API 2 compliant module you must also install the mxDateTime module from http starship python net lemburg mxDateTime html Download pyPgSQL files if you haven t already done so Edit the setup py file to reflect the your environment The setup py file contains comments regarding USE CUSTOM to guide you in customizing this file Execute python setup py build to build the extension module Execute python setup py install to install the extension module On many platforms you can skip step b as the necessary paths are automatically detected NOTE You may require root access to install the module Consult your local system administrator 1 4 Testing the PgSQL module To run the tests enter the following command from the PgSQL source directory python test PgSQLTestCases py If the test cases run without any failures then you can be reasonably sure that the module built correctly There are additional test cases in test regression that you can run These require that an empty database pypgsql exists locally with UNICODE encoding and with the ability to execute PL pgsql functions You can create such a database with the following commands createdb E UNICODE pypgsql createlang plpgsql pypgsql 1 5 Additional information about Additional information about the different packages is available at Python http www python orgPostgreSQL http www PostgreSQL orgmxDateTime http starship python net lemburg mxDateTime html 2 Programming Information 2 1 The libpq module 2 1 1 Importing libpq The module libpq is part of the pyPgSQL package It is imported using the following statement from pyPgSQL import libpq 2 1 2 libpq Constants There are a number of constants defined in libpq They are intended to be used as parameters for method calls and to compare against certain results generated by method calls You should refer to the libpq section of the PostgreSQL programmer s manual for information about them These constants are Connection related constants CONNECTION OK CONNECTION BAD POLLING FAILED POLLING READING POLLING WRITING POLLING OK POLLING ACTIVE Query related constants EMPTY QUERY COMMAND OK TUPLES OK COPY OUT COPY IN BAD RESPONSE NONFATAL ERROR FATAL ERROR Large Object related constants INV SEEK SET INV SEEK CUR INV SEEK END INV READ INV WRITE Constants for PostgreSQL type OID identifiers Character String Types PG TEXT PG CHAR PG VARCHAR PG NAME PG BPCHAR Number Types PG INT4 PG INT2 PG INT8 PG OID PG NUMERIC PG FLOAT8 PG FLOAT4 PG MONEY aka PG CASH Temporal Types PG DATE PG TIME PG TIMESTAMP PG TIMESTAMPTX PG INTERVAL PG ABSTIME PG RELTIME PG TINTERVAL Logical boolean Type PG BOOL Geometric Types PG POINT PG LSEG PG PATH PG BOX PG LINE PG CIRCLE PG POLYGON Network Types PG INET PG CIDR Misc Types PG REFCURSOR The following constants are defined for use by the libpq module and have no direct relationship to constants in PostgreSQL s C API PgResult related constants RESULT DDL result was generated by a DDL query RESULT DQL result was generated by a DQL query RESULT DML result was generated by a DML query RESULT EMPTY query generated an empty result RESULT ERROR query generated an error PgBoolean constants PgTrue PgFalse 2 1 3 libpq Methods The following methods are defined by libpq PQconnectdb preferred method to connect to a database PQconndefaults returns a list containing the connection defaults PQresStatus returns a string representation of the result status PQresType returns a string representation of the result type PQftypeName returns a string name for a PostgreSQL type oid PgBoolean creates a PgBoolean object from a string or number PgBooleanFromString Deprecated use PgBoolean PgBooleanFromInteger Deprecated use PgBoolean PgInt2 creates a PgInt2 object from a string or number PgInt8 creates a PgInt8 object from a string or number PgLargeObject creates a PgLargeObject from a connection and OID PgVersion creates a PgVersion object from a string PgQuoteString Quotes a string escaping any characters as needed for use as input to a character text field PgQuoteBytea Escapes a string which can contain NUL characters so that it can used as an input to a bytea field PgUnQuoteBytea Reverses the action of PgQuoteBytea 2 1 3 1 PQconnectdb Syntax c PQconnectdb conninfo Where conninfo is a string containing connection information Returns A PgConnection object Description Implements the PostgreSQL C API s PQconnectdb function Exceptions DatabaseErrorNote See the PostgreSQL C API documentation for details 2 1 3 2 PQconndefaults Syntax l PQconndefaults Returns A list of default connection options A default connection options is a list containing keyword envvar compiled val label dispchar dispsize Description Implements the PostgreSQL C API s PQconndefaults function Note See the PostgreSQL C API documentation for details 2 1 3 3 PQresStatus Syntax s PQresStatus status Returns A string representation of the result status code status Description Implements the PostgreSQL C API s PQresStatus function Note See the PostgreSQL C API documentation for details 2 1 3 4 PQresType Syntax s PQresType type Returns A string representation of the result type type Description The result type is generated by the libpq module not by the PostgreSQL C API library and describes the result type DDL DQL DML EMPTY or ERROR Exceptions InterfaceErrorReturns A string representation of the result type code type 2 1 3 5 PQftypeName Syntax s PQftypeName type Returns A string representation of the PostgreSQL type type Description This method returns a string representation of the PostgreSQL type type This string is useful for displaying the type code This method has no corresponding PostgreSQL C API function 2 1 3 6 PgBoolean Syntax b PgBoolean object Description This method returns a PgBoolean object initialized from the value of object It recognizes the following string values For true 1 T TRUE Y YES ON For false F FALSE N NO OFF For numeric object zero is false non zero is true Returns PgTrue or PgFalse based on the value of object 2 1 3 7 PgInt2 Syntax n PgInt2 object Description This method returns a PgInt2 object initialized from the value of the string or numeric object The PgInt2 type uses a 2 byte integer to store it s value Returns A PgInt2 object initialized with the value of object 2 1 3 8 PgInt8 Syntax n PgInt8 object Description This method returns a PgInt8 object initialized from the value of the string or numeric object The PgInt8 type uses a 8 byte integer to store it s value Returns A PgInt8 object initialized with the value of object 2 1 3 9 PgLargeObject Syntax o PgLargeObject PgConnection OID Description This function will create a PgLargeObject object given a PgConnection object and a PostgreSQL large object identifier OID Returns A closed PgLargeObject object Note A PgLargeObject can not be opened outside the context of a transaction Because of this large objects created with this method and by inference un pickled large objects will begin a transaction if needed in it s associated PgConnection object when the the large object is opened When the large object is closed the transaction will be committed If a rollback is desired pass close an argument of 1 2 1 3 1 PgQuoteString Syntax s PgQuoteString string forArray Description This function returns a copy of the input string with the following characters escaped 1 The backslash character as 2 The single quote as 3 The CR character as r 4 The NL character as n 5 The BS character as b 6 The FF character as f 7 The TAB character as t 8 All other control characters as OOO where OOO is the octal representation of the character s ordinal number The string is also quoted with single quotes If forArray is one 1 the escaping is changed as follows 1 The backslash character as 2 through 7 remain the same 8 All other control characters as 9 The double quote as The string is also quoted with double quotes instead of single quotes Returns A quoted escaped copy of the input string 2 1 3 11 PgQuoteBytea Syntax s PgQuoteBytea string Description This function returns a copy of the input string with characters escaped as follows 1 NUL characters Note with 2 backslashes 2 Non printable characters OOO Note OOO is the octal representation of the characters ordinal number 3 Backslashes Note with 4 backslashes 4 Single quote The string is also quoted with single quotes If forArray is one 1 the escaping is changed as follows 1 NUL characters Note with 4 backslashes 2 Non printable characters OOO 3 Backslashes Note with 8 backslashes 4 Single quote 5 The double quote as The string is also quoted with double quotes instead of single quotes Returns A quoted escaped copy of the input string 2 1 3 12 PgUnQuoteBytea Syntax s PgUnQuoteBytea string Description This function un escapes a string retrieved from a bytea field Returns A copy of the input string with any escaped character returned to their original value 2 1 4 libpq Classes This module defines the following five 5 classes PgConnection the connection class It handles the connection and all requests to the database PgResult handles the query results PgLargeObject handles the access to PostgreSQL large objects PgNotify the notify class It contains information about a notification event sent from a PostgreSQL backend process PgVersion the version class It contains information about the version of the PostgreSQL backend that a connection object is connected to The module makes error information available via the following exception objects in addition to the standard Python exceptions Warning Error InterfaceError DatabaseError OperationalError IntegrityError InternalError ProgrammingError NotSupportedError Additional information about these exceptions can be found in the Python DB API 2 documentation 2 1 4 1 The PgConnection Object The PgConnection Object defines a connection to the PostgreSQL database It has the following public read only attributes host The server host name of the connection It returns the output of the PQhost PostgreSQL C API function post The port used in the connection It returns the output of the PQport function db The database name of the connection It returns the output of the PQdb function options The backend options used in the connection It returns the output of the PQoptions function tty The debug tty of the connection It returns the output of the PQtty function user The user name of the connection It returns the output of the PQuser function status The status of the connection It returns the output of the PQstatus function errorMessage The error message most recently generated by an operation on the connection It returns the output of the PQerrorMeesage function backendPID The process ID of the backend handling this connection It returns the output of the backendPID function isBusy Indicates if PQgetResult would block Used with asynchronous query processing It returns the output of the PQisBusy function PostgreSQL 7 or later socket The file descriptor for the backend connection socket Used with asynchronous query processing It returns the output of the PQsocket function notices A list of notices received by the PostgreSQL C API The notices are placed in the list so that the list pop method will retrieve the oldest notice on the list NOTE While this attribute is read only you can still manipulate the list using any of the list s methods pop append insert etc You just can t assign a new value to the attribute version version information about the backend that this connection object is connected to The PgConnection Object has the following methods connectPoll Poll the libpq C API for the connection status query Execute a query and wait for the results sendQuery Send a query to the backend without blocking getResult Retrieve the results from the sendQuery method setnonblocking Make the connection non blocking or blocking consumeInput If input is available from the backend consume it flush Attempt to flush any data queued on the backend requestCancel Send a cancel query request to the backend finish Close the connection and free memory used by the PQconn object reset Reset the communication port with the backend notifies Returns the next notification object PgNotify from a list of unhandled notification objects getline Read a newline terminated line of characters from the backend getlineAsync Read a line of characters in a non blocking manner putline Send a null terminated string to the backend endcopy Sync with the backend after a Copy In Copy Out operation lo creat Create a new empty PgLargeObject lo import Import a file as a PostgreSQL large object returning a PgLargeObject lo export export a PostgreSQL large object to a file lo unlink Removes a PostgreSQL large object from the database trace Enable tracing of frontend backend communications untrace Disable tracing start by the trace method 2 1 4 1 1 connectPoll PostgreSQL 7 x and above Syntax i c connectPoll Returns An integer representing a Postgres Polling Status code Description This method is used to determine the status of a connection started with PQconnectStart This method implements the PQconnectPoll function and is used for asynchronous query processing Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 2 query Syntax r c query string Returns A PgResult object Description This method sends the SQL query string to the backend and waits for the result It implement the PostgreSQL C API s PQexec function Exceptions InterfaceError ProgrammingError OperationalError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 3 sendQuery Syntax c sendQuery string Description This method send the SQL query string to the backend without waiting for the result It implements the PQsendQuery function and is used for asynchronous query processing Exceptions InternalError InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 4 getResult Syntax r c getResult Returns A PgResult object Description Wait for and retrieve the results from a previous sendQuery call It implements the PQgetResult function and is used for asynchronous query processing Exceptions InterfaceError ProgrammingError OperationalError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 5 setnonblocking PostgreSQL 7 x and above Syntax c setnonblocking mode Description Set the connection to non blocking if mode is non zero otherwise set it to blocking This method implements the PQsetnonblocking function Exceptions InterfaceError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 6 consumeInput Syntax c consumeInput Description If input is available from the backend consume it This method implements the PQconsumeInput function and is used with asynchronous query processing Exceptions InterfaceError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 7 flush PostgreSQL 7 x and above Syntax c flush Description If input is available from the backend consume it This method implements the PQflush function and is used with asynchronous query processing Exceptions InterfaceError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 8 requestCancel Syntax c requestCancel Description Send a cancel request to the backend Note that the successful dispatching of the request does not mean the request will be canceled This method implements the PQrequestCancel function and is used with asynchronous query processing Exceptions InterfaceError InternalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 9 finish Syntax c finish Description Close the connection to the database and invalidates the PgConnection object Any attempt to use the PgConnection object after finish is called will raise an InterfaceError Used by the PQconn object The database connection is automatically closed when the PgConnection object is deleted so calling finish explicitly is never needed This method implements and extends the PQfinish function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 1 reset Syntax c reset Description Close the connection to the backend and attempt to open a new connection using the previously used parameters This method implements the PQreset function Exceptions InterfaceError DatabaseError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 11 notifies Syntax n c notifies Returns A PgNotify object containing data for the next notification message or None if there are no unhandled notifications Description Retrieves the next notification from a list of unhandled notification messages received from the backend Once a notification object is returned it is considered handled and will be removed from the list of notifications This method implements the PQnotifies function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 12 getline Syntax s c getline Returns A newline terminated string read from the backend Description The getline method reads a newline terminated string transmitted by the backend server into a dynamically sized buffer This method implements the PQgetline function and is used with the PostgreSQL COPY command Exceptions InterfaceError TypeError MemoryError InternalErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 13 getlineAsync Syntax s c getlineAsync Returns A newline terminated string read from the backend in a non blocking manner Description The getlineAsync method reads a newline terminated string transmitted by the backend server into a dynamically sized buffer This method implements the PQgetline function and is used with the PostgreSQL COPY command Exceptions InterfaceError TypeError MemoryError InternalErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 14 putline Syntax c putline s Returns Sends a string to the backend Description The putline method sends a null terminated string to the backend This method implements the PQputline function and is used with the PostgreSQL COPY command Exceptions InterfaceError TypeError InternalErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 15 endcopy Syntax c endcopy Returns Syncs with the backend Description This function waits until the backend has finished the copy It should either be issued when the last string has been sent to the backend using putline or when the last string has been received from the backend using getline It must be issued or the backend may get out of sync with the frontend This method implements the PQputline function and is used with the PostgreSQL COPY command Exceptions InterfaceError TypeError InternalErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 16 lo creat Syntax lo c lo creat mode Returns A PgLargeObject Description Create a PostgreSQL large object with the given mode This method implements the lo creat function Exceptions InterfaceError OperationalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 17 lo import Syntax lo c lo import filename Returns A PgLargeObjectDescription Imports a file named filename into a PostgreSQL large object This method implements the lo import function Exceptions InterfaceError OperationalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 18 lo export Syntax c lo export oid filename Returns A PgLargeObjectDescription Exports a PostgreSQL large object represented by oid to a file named filename This method implements the lo import function Exceptions InterfaceError OperationalError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 19 lo unlink Syntax c lo unlink oid Description Removes the PostgreSQL large object identified by oid from the database This method implements the lo unlink function Exceptions InterfaceError IOError TypeError 2 1 4 1 2 trace Syntax c trace fileObject Description Enables tracing of the frontend backend communications to a Python File Object fileObject This method implements the PQtrace function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 1 21 untrace Syntax c untrace Description Disables tracing enabled by the trace method This method implements the lo import function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 The PgResult Object The PgResult object defines the result of a query It has the following public read only attributes resultType the type of the result DDL DQL DML EMPTY ERROR resultStatus The result status of the query It returns the output of the PQresultStatus PostgreSQL C API function ntuples The number of tuples instances in the query result It returns the output of the PQntuples function call nfields The number of fields attributes in each tuple of the query result It returns the output of the PQnfields function binaryTuples Contains 1 if the PgResult object contains binary tuple data if it contains ASCII data It returns the output of the PQbinaryTuples function call NOTE Binary portals are not supported at this time cmdStatus The command status string from the SQL command that generated the PGresult It returns the output to the PQcmdStatus function cmdTuples The number of rows affected by the SQL command It returns the output of the PQcmdTuples function oidValue 7 x and above The object id of the tuple inserted if the SQL command was an INSERT Otherwise contains None It returns the output of the PQoidValue function The PgResult Object has the following methods fname Returns the field attribute name associated with the given field index fnumber Returns the field attribute index associated with the given field name ftype Returns the type of a field fsize Returns the size in bytes of the field fmod Returns the type specific modification data of a field getvalue Returns a single field attribute value of one tuple of a PgResult getlength Returns the length of a field attribute in bytes getisnull Tests a field for a NULL entry clear Frees the memory used by result 2 1 4 2 1 fname Syntax s r fname fidx Returns The field attribute name associate with the given field index Description Returns the field attribute name associated with the given field index Field indices start at It implements the PQfname PostgreSQL C API function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 2 fnumber Syntax i r fnumber name Returns The field attribute index associated with the given field name Description Returns the field attribute index associated with the given field name name A 1 is returned if the name does not match any field It implements the PQfnumber function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 3 ftype Syntax i r ftype fidx Returns Returns the field type associated with the given field index Description The field type associated with the given field index The integer returned is an internal coding of the type Field indices start at It implements the PQftype function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 4 fsize Syntax i r fsize fidx Returns The size in bytes of the field associated with the given field index Description Returns the size in bytes of the field associated with the given field index Field indices start at fsize returns type 1 is returned if the field is variable size It implements the PQfsize function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 5 fmod Syntax i r fmod fidx Returns The type specific modification data of the field associated with the given field indexDescription Returns the type specific modification data of the field associated with the given field index Field indices start at It implements the PQfmod function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 6 getvalue Syntax o r getvalue tidx fidx Returns A single field attribute value of one tuple of a PGresult Description Returns a single field attribute value of one tuple of a PgResult Tuple and field indices start at If the field is NULL the None is returned The type of object returned depends on the PostgreSQL data type of the field PostgreSQL TypeReturned Python ObjectPG BOOLPgBooleanPG OIDInteger or PgLargeObject 1 PG INT2PgInt2PG INT4IntegerPG INT8PgInt8 2 or LongPG MONEYFloatPG FLOAT4FloatPG FLOAT8FloatPG BYTEAString 3 All Other TypesString getvalue will determine if the OID represents a PostgreSQL Large Object and returns the appropriate object PgInt8 type is only available on system that have long long 64 bit integer support Any escaped characters in the string will be returned to their original value in the returned string getvalue implements and extends the PQgetvalue function Exceptions InterfaceError TypeError 2 1 4 2 7 getlength Syntax i r getlength tidx fidx Returns The length of a field attribute in bytes Description Returns the length of a field attribute in bytes Tuple and field indices start at This is the actual data length for the particular data value that is the size of the object pointed to by getvalue Note that for ASCII represented values this size has little to do with the binary size reported by fsize It implements the PQgetlength function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 8 getisnull Syntax i r getisnull tidx fidx Returns 1 if the field contains a NULL if it contains a non nullvalue Description Tests a field for a NULL entry Tuple and field indices start at This function returns 1 if the field contains a NULL if it contains a non null value Note that getvalue will return None for a NULL field It implements the PQgetisnull function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 2 9 clear Syntax r clear Description Frees the storage associated with a PgResult and invalidates the PgResult object Any attempt to access the PgResult will generate an InterfaceError exception The PgResult is automatically cleared when the PgResult if deleted so calling clear explicitly is never needed It implements and extends the PQclear function Exceptions InterfaceError TypeErrorNote See the PostgreSQL C API documentation for details 2 1 4 3 The PgLargeObject object The PgLargeObject class provides methods for accessing the PostgreSQL Large Object LO system It allows access to the LO using Python s File Object semantics The PgLargeObject class defines the following public read only attributes mode The mode used to open the LOname A string in the form of indicating the source of the LO closed Flag 1 the LO is closed and the following public read write attribute softspace Boolean that indicates whether a space character needs to be printed before another value when using the print statement The following methods are provided close Close the LO A closed LO can not be read or written anymore flush Flush the internal buffer open Open the LO A LO can be opened for reading writing or both isatty Always returns A LO is never attached to a TTY like device fileno Returns the integer file descriptor used by the underlining implementation to request I O operations read Read bytes from the LO readline Read one entire line from the LO readlines Read entire lines from the LO until EOF seek Set the LO s current position like stdio s fseek tell Returns the LO s current position like stdio s ftell write Write bytes to the LO writelines Write a list of strings to the LO export Export a LO to a file Since the PgLargeObject follows Python s File Object semantics refer to the documentation for File Objects for details on using PgLargeObject There are a few differences which will be detailed here 2 1 4 3 1 open Syntax lo open mode Description Opens a PostgreSQL Large Object for reading writing or both The mode parameter can be either an integer consisting of a combination of the INV READ and INV WRITE mode bits or a string containing r for reading or w for writing The LO can be open for updating by using r or w A b can be included in the mode string to indicate opening the LO for binary data but is not really needed since PostgreSQL does not differentiate between binary and non binary data NOTE w will NOT truncate the large object Note Open is a built in function of Python not a method of the File Object If there is not transaction started on the associated PgConnection object when open is called one is started This will only occur for un pickled large objects and large objects created with the PgLargeObject method of libpq and PgSQL 2 1 4 3 2 close Syntax lo close Description This method will close an open large object Note If the large object was the result of un pickling a large object or it was created with the PgLargeObject method of libpq or PgSQL close will commit the transaction started by open If a rollback is desired then pass close a single argument of the integer 1 This argument is only valid if the large object was the result of un pickling a large object or created with the PgLargeObject method 2 1 4 3 3 export Syntax i lo export filename Returns 1 if successful if an OS error occurred if a database error occurred Description This method will export the PostgreSQL large object to the specified UNIX filename Note The file is stored on the database server not the client machine if different from the server 2 1 4 4 The PgNotify Object The PgNotify object encapsulates the data returned by the notifies method of the PgConnection class It provides the following read only attributes relname The name of the relation containing data be pid The process ID of the PostgreSQL backend sending the notification 2 1 4 5 The PgVersion Object The PgVersion object encapsulates information about the version of PostgreSQL that a connection object is connected to It provides the following read only attribute major The major version number minor The minor version number level The patch level post7 A flag that is true if the version is 7 1 You can obtain the result of the SELECT version used to initialize this object using the str or repr function For example for version 6 5 3 the contents of the PgVersion object would be connection version PostgreSQL 6 5 3 on system dependent info connection version major 6 connection version minor 5 connection version level 3 connection version post7 For example for version 7 1 1 the contents of PgVer would be connection version PostgreSQL 7 1 1 on system dependent info connection version major 7 connection version minor 1 connection version level 1 connection version post7 1 Also you can use the PgVersion object to compare against a number or string form of the version The form used for numeric comparison is Mmmll where M is the major number mm is the minor number and ll is the patch level An example Assume that the PostgreSQL version is 7 2 then connection version 7 2 will be true connection version 7 1L will be false connection version 7 1 will be true You can also compare against a string as follows Assume that the PostgreSQL version is 7 1 2 then connection version 7 2 will be false connection version 7 1 will be false connection version 7 1 will be true NOTE Both the libpq and PgSQL connection objects have the version attribute NOTE Comparisons against strings i e 7 1 does not work in Python 2 2 2 The PgSQL module The PgSQL module provide a Python DB API 2 compliant module on top of the libpq module As the DB API 2 interface is documented elsewhere http www python org topics database DatabaseAPI 2 html I will only describe the differences in the PgSQL here 2 2 1 Importing PgSQL The module PgSQL is part of the pyPgSQL package It is imported using the following statement from pyPgSQL import PgSQL 2 2 2 Differences at the Module Level The Binary constructor is a method of the Connection object not the module For PostgreSQL a Large Object can only be created in conjunction with a Connection it has no meaning outside of the context of a Connection The following types are defined to support certain PostgreSQL data types PgInt2 Supports the PG INT2 data type PgInt8 Supports the PG INT8 data type PgBoolean Supports the PG BOOL data type The following classes are defined to support certain PostgreSQL data types PgNumeric Supports the PG NUMERIC data type It uses a Python Long as the base type and provides the following arithmetic operations addition subtraction multiplication and division PgMoney Supports the PG CASH data type It uses a Python Float as the base type with range checking to prevent it from exceeding the range of the PG CASH data type Any operation that applies to a Python Float can be used with a PgMoney object PgBytea This class supports the PG BYTEA data type It is a wrapper around a Python String that provides for proper escaping of the string when used in a query PgOther This class supports all the other PostgreSQL data types that do not map directly into a Python object or one of the support classes listed above such as PG BOX PG POINT etc As time goes on more PostgreSQL data types will have support classes defined for them reducing the number of PostgreSQL data types that fall within this class PgArray This class provide support for PostgreSQL arrays It is a wrapper around a Python list that supports all the methods of a list plus adds a quote method for quoting arrays The following class is defined PgVersion Contains the version number of PostgreSQL database engine that we are connected to This information is used to change the behavior of PgSQL based on the version of the PostgreSQL engine See the section 2 6 for more details on the PgVersion object The following constructors are defined by the PgSQL module PgBoolean Construct a PgBoolean from a Python numeric or string PgInt2 Construct a PgInt2 from a Python numeric or string PgInt8 Construct a PgInt8 from a Python numeric or string PgLargeObject Construct a PgLargeObject from a PgConnection object and a OID identifying a PostgreSQL large object These constructors are documented in the libpq section of this document The following attribute is defined in the PgSQL module fetchReturnsList controls the type of result returns by the fetchXXX methods Setting this attribute to 1 will cause the fetchXXX methods to return a list instead of a PgResultSet This will provide better performance by sacrificing the convenient access methods provide by a PgResultSet The default value for fetchReturnsList is 2 2 3 Differences in the Connection Object The Connection object has an additional read only attribute called notices This attribute is a list of notices returned by the pq library NOTE Under normal usage certain but not all notices received from the libpq C API library are converted into Warning exceptions The Connection object has an additional read only attribute called version This attribute contains a PgVersion object encapsulating the version information of the PostgreSQL backend that the Connection object is connected to The Binary constructor method is a Connection method not a PgSQL module function A unlink method is available in the Connection object to remove a Large Object from the database A PgSQL specific Connection attribute called TransactionLevel specifies the isolation level to use within a transaction It can be set to READ COMMITED or SERIALIZABLE PgSQL will issue the appropriate SET TRANSACTION LEVEL statement whenever a new transaction is started for the connection NOTE The value of this attribute can not be changed if there are any active cursors for the connection 2 2 3 1 unlink Syntax c unlink PgLargeObject Description Removes the PostgreSQL large object identified from the database Exceptions InterfaceError IOError TypeError 2 2 4 Differences in the Cursor Object The description attribute is a sequence of 8 item sequences The first seven items are the same as described in the DB API 2 documentation The 8th item is the isArray flag If this is 1 then the associated result column is a PostgreSQL array The callproc method will always return None PostgreSQL does not have stored procedures in the same sense as other databases such as Oracle There are no Input Output or Input Output parameters In PgSQL this method is used to call PostgreSQL functions which only return a result set or nothing NOTE Beginning with PostgreSQL 7 2 it is possible to return a reference to a cursor from PL pgSQL PgSQL will create a new Cursor object for the referenced cursor that is returned When using the execute method you should only use s or name s without the quote marks to specify locations where the parameters are to be substituted even for integers floats and other non string variables The execute method will convert all the parameters to a string applying any quoting that may be necessary before sending the query to the back end The fetchone method will return a PgResultSet object instead of a sequence A PgResultSet emulates a Python List object for DB API 2 compliance but also acts as a dictionary and allows the column data to be retrieved by using the column name as an attribute of the PgResultSet object The column names are case insensitive NOTE This feature is controlled by the fetchReturnsList attribute of the PgSQL module The fetchmany and fetchall methods return a sequence of PgResultSet objects instead of a sequence of sequences NOTE This feature is controlled by the fetchReturnsList attribute of the PgSQL module A PostgreSQL specific attribute named oidValue was added to the cursor object This attribute returns the value of the oidValue attribute of the PgResult object associated with the cursor object and provides a convenient way to get the object ID of a newly inserted record 3 General Notes and Observations The PostgreSQL database system has no auto commit setting It is always in auto commit mode unless a transaction is started To achieve the DB API 2 mandated behaviour when connection autocommit is a transaction is started when the first cursor is created for a connection After a commit or rollback a new transaction is created on the next call to execute PostgreSQL arrays are no longer directly represented by Python lists This means that lists and tuples are not longer treated specially by Cursor execute This resolves a problem of using the IN SQL syntax with Cursor execute For example the following statement will now work Cursor execute select from table where column1 in s 1 3 4 It will generate the following SQL statement select from table where column1 in 1 3 4 It also means that to insert an PostgreSQL array you must pass a PgArray instance to Cursor execute For example if you have a list that you want to insert into a table as a PostgreSQL array you would use cursor execute insert in sometable values s PgArray yourlist You can also build a PostgreSQL array by creating an empty PgArray instance and populating it using the various list methods append insert etc When working with PostgreSQL large object you MUST be in a transaction The code will try to ensure that a transaction is active while working with large object i e lo open will start a transaction if necessary lo close will end the transaction if it determines that lo open started one Beginning with PostgreSQL 7 2 you can now create a cursor in PL pgSQL and return a reference to that cursor PgSQL will transform the reference to the created cursor into a Cursor object that can be used to fetch the results of the cursor For example assuming that mmYearInfo returns a reference cursor from pyPgSQL import PgSQL cx PgSQL connect database esi cu cx cursor cu callproc mmYearInfo rs cu fetchone rs pyPgSQL PgSQL Cursor instance at x818495c c rs for i in c description print i model year varchar 4 8 None None None mktg div name varchar 5 54 None None None model desc varchar 5 54 None None None book types varchar 5 54 None None None vehicle syskey integer 4 4 None None None r c fetchone r 2 3 Buick Century 1 8 9 2211 ", "_id": "http://www.ics.uci.edu/~dock/manuals/pypgsql.html", "title": "", "html": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" SYSTEM \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<meta name=\"generator\" content=\"Docutils: http://docutils.sourceforge.net/\">\n<link rel=\"stylesheet\" href=\"default.css\" type=\"text/css\" />\n<meta name=\"version\" content=\"#ident &quot;@(#) $Id: README.html,v 1.1 2002/12/05 05:34:30 ballie01 Exp $&quot;\" />\n</head>\n<body>\n<div class=\"document\">\n<table class=\"docinfo\" frame=\"void\" rules=\"none\">\n<col class=\"docinfo-name\" />\n<col class=\"docinfo-content\" />\n<tbody valign=\"top\">\n<tr><td class=\"docinfo-name\">Version:&nbsp;</td><td>\n#ident &quot;@(#) $Id: README.html,v 1.1 2002/12/05 05:34:30 ballie01 Exp $&quot;</td></tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"pypgsql-v2-3-python-db-api-2-0-compliant-interface-module-for-postgresql\" name=\"pypgsql-v2-3-python-db-api-2-0-compliant-interface-module-for-postgresql\">\n<h1>pyPgSQL - v2.3: Python DB-API 2.0 Compliant Interface Module for PostgreSQL.</h1>\n<div class=\"section\" id=\"copyright-notice-and-license\" name=\"copyright-notice-and-license\">\n<h2>0. Copyright notice and License</h2>\n<blockquote>\n<p>pyPgSQL, version 2.3\nA Python DB-API 2.0 compliant interface for PostgreSQL\nCopyright 2000 by Billy G. Allie.\nAll rights reserved.</p>\n<p>Permission to use, copy, modify, and distribute this software and it's\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the copyright owner's name not be\nused in advertising or publicity pertaining to distribution of the\nsoftware without specific, written prior permission.</p>\n<p>THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN\nNO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF\nUSE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTUOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"about-pypgsql\" name=\"about-pypgsql\">\n<h2>1.  About pyPgSQL</h2>\n<div class=\"section\" id=\"introduction\" name=\"introduction\">\n<h3>1.1 Introduction</h3>\n<p>PostgreSQL is a sophisticated Object-Relational DBMS, supporting almost all SQL\nconstructs, including sub-selects, transactions, and user-defined types and\nfunctions. It is the most advanced open-source database available anywhere More\ninformation about PostgreSQL can be found at the PostgreSQL home page at\n<a class=\"reference\" href=\"http://www.postgresql.org\">http://www.postgresql.org</a>.</p>\n<p>Python is an interpreted, interactive, object-oriented programming language.\nIt combines remarkable power with very clear syntax.  It has modules, classes,\nexceptions, very high level dynamic data types, and dynamic typing.  There are\ninterfaces to many system calls and libraries, as well as to various windowing\nsystems (X11, Motif, Tk, Mac, MFC).  New builtin modules are easily written in\nC or C++.  Python is also usable as an extension language for applications that\nneed a programmable interface.  Python is copyrighted but freely usable and\ndistributable, even for commercial use.  More information about Python can be\nfound on the Python home page at <a class=\"reference\" href=\"http://www.python.org\">http://www.python.org</a>.</p>\n<p>pyPgSQL is a package of two (2) modules that provide a Python DB-API 2.0\ncompliant interface to PostgreSQL databases.  The first module, libpq,\nexports the PostgreSQL C API to Python.  This module is written in C and\ncan be compiled into Python or can be dynamically loaded on demand.  The\nsecond module, PgSQL, provides the DB-API 2.0 compliant interface and\nsupport for various PostgreSQL data types, such as INT8, NUMERIC, MONEY,\nBOOL, ARRAYS, etc.  This module is written in Python.  This version works\nwith PostgreSQL 7.0 or later and Python 2.0 or later.</p>\n<p>pyPgSQL was originally developed on a UnixWare 7.1.1 system, but is nowadays\nalso developed on FreeBSD and various Windows and Linux flavours.</p>\n</div>\n<div class=\"section\" id=\"distribution-files\" name=\"distribution-files\">\n<h3>1.2 Distribution Files</h3>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">README:&nbsp;</td><td class=\"field-body\">This file.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">Announce:&nbsp;</td><td class=\"field-body\">Announcement of this release.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">ChangeLog:&nbsp;</td><td class=\"field-body\">changes to this package during it's history.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">libpqmodule.c:&nbsp;</td><td class=\"field-body\">the C code implementing the libqp module.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgboolean.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PostgreSQL BOOL\ntype object for Python.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgconnection.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PgConnection\nclass.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgint2object.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PostgreSQL INT2\ntype object for Python.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgint8object.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PostgreSQL INT8\ntype object for Python.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pglargeobject.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PgLargeObject\nclass.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgnotify.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PgNotify class.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgresult.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PgResult class.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pgversion.[ch]:&nbsp;</td><td class=\"field-body\">the C code implementing the PgVersion\nclass.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pymemstrdup.c:&nbsp;</td><td class=\"field-body\">the C code implementing a version of strdup()\nthat uses Python's heap for the needed memory.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pyPgSQL/__init__.py:&nbsp;</td><td class=\"field-body\">the initialization code for the pyPgSQL\npackage.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pyPgSQL/PgSQL.py:&nbsp;</td><td class=\"field-body\">the module that implements the Python DB-API 2.0\ncompliant interface to PostgreSQL</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pyPgSQL/libpq:&nbsp;</td><td class=\"field-body\">the package for the libpq module.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">pyPgSQL/libpq/__init__.py:&nbsp;</td><td class=\"field-body\">the initialization code for the libpq\npackage.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">setup.py:&nbsp;</td><td class=\"field-body\">Distutil setup file for building and installing\npyPgSQL</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">port/*:&nbsp;</td><td class=\"field-body\">String functions imported from the FreeBSD\nsource tree and given a pg prefix.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">test/PgSQLTestCases.py:&nbsp;</td><td class=\"field-body\">A set of functional test cases built using\nthe Python Unit Testing Framework (PyUnit)</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">test/regression/*:&nbsp;</td><td class=\"field-body\">Test cases to test specific sections of\npyPgSQL.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">examples/*:&nbsp;</td><td class=\"field-body\">Some example programs using libpq and PgSQL</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div class=\"section\" id=\"installation\" name=\"installation\">\n<h3>1.3 Installation</h3>\n<p>These instructions assume you have Python 2.0 (or later) and at least\nPostgreSQL 7.0 (7.2 or later recommended) installed on your system.  If you are\ngoing to use the DB-API 2.0 compliant module, you must also install the\nmxDateTime module from <a class=\"reference\" href=\"http://starship.python.net/~lemburg/mxDateTime.html\">http://starship.python.net/~lemburg/mxDateTime.html</a>.</p>\n<ol class=\"loweralpha simple\">\n<li>Download pyPgSQL files if you haven't already done so.</li>\n<li>Edit the setup.py file to reflect the your environment.  The setup.py file\ncontains comments regarding USE_CUSTOM to guide you in customizing this\nfile.</li>\n<li>Execute <tt class=\"literal\">python setup.py build</tt> to build the extension module.</li>\n<li>Execute <tt class=\"literal\">python setup.py install</tt> to install the extension module.</li>\n</ol>\n<p>(On many platforms, you can skip step b. as the necessary paths are\nautomatically detected.)</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">You may require root access to install the module.\nConsult your local system administrator.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"testing-the-pgsql-module\" name=\"testing-the-pgsql-module\">\n<h3>1.4 Testing the PgSQL module.</h3>\n<p>To run the tests, enter the following command from the PgSQL source\ndirectory:</p>\n<blockquote>\n<tt class=\"literal\">python test/PgSQLTestCases.py</tt></blockquote>\n<p>If the test cases run without any failures, then you can be reasonably sure\nthat the module built correctly.</p>\n<p>There are additional test cases in test/regression that you can run. These\nrequire that an empty database <em>pypgsql</em> exists locally with <em>UNICODE</em>\nencoding and with the ability to execute PL/pgsql functions. You can create\nsuch a database with the following commands:</p>\n<pre class=\"literal-block\">createdb -E UNICODE pypgsql\ncreatelang plpgsql pypgsql</pre>\n</div>\n<div class=\"section\" id=\"additional-information-about\" name=\"additional-information-about\">\n<h3>1.5 Additional information about ...</h3>\n<p>Additional information about the different packages is available at:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">Python:&nbsp;</td><td class=\"field-body\"><a class=\"reference\" href=\"http://www.python.org\">http://www.python.org</a></td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PostgreSQL:&nbsp;</td><td class=\"field-body\"><a class=\"reference\" href=\"http://www.PostgreSQL.org\">http://www.PostgreSQL.org</a></td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">mxDateTime:&nbsp;</td><td class=\"field-body\"><a class=\"reference\" href=\"http://starship.python.net/~lemburg/mxDateTime.html\">http://starship.python.net/~lemburg/mxDateTime.html</a></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"programming-information\" name=\"programming-information\">\n<h2>2.  Programming Information</h2>\n<div class=\"section\" id=\"the-libpq-module\" name=\"the-libpq-module\">\n<h3>2.1 The libpq module</h3>\n</div>\n<div class=\"section\" id=\"importing-libpq\" name=\"importing-libpq\">\n<h3>2.1.1 Importing libpq</h3>\n<p>The module, libpq, is part of the pyPgSQL package.  It is imported using\nthe following statement:</p>\n<blockquote>\n<pre class=\"doctest-block\">&gt;&gt;&gt; from pyPgSQL import libpq</pre>\n</blockquote>\n</div>\n<div class=\"section\" id=\"libpq-constants\" name=\"libpq-constants\">\n<h3>2.1.2 libpq Constants</h3>\n<p>There are a number of constants defined in libpq.  They are intended to be\nused as parameters for method calls and to compare against certain results\ngenerated by method calls.  You should refer to the libpq section of the\nPostgreSQL programmer's manual for information about them.  These constants\nare:</p>\n<blockquote>\n<p>Connection related constants:</p>\n<blockquote>\nCONNECTION_OK, CONNECTION_BAD, POLLING_FAILED, POLLING_READING,\nPOLLING_WRITING, POLLING_OK, POLLING_ACTIVE</blockquote>\n<p>Query related constants:</p>\n<blockquote>\nEMPTY_QUERY, COMMAND_OK, TUPLES_OK, COPY_OUT, COPY_IN,\nBAD_RESPONSE, NONFATAL_ERROR, FATAL_ERROR</blockquote>\n<p>Large Object related constants:</p>\n<blockquote>\nINV_SEEK_SET, INV_SEEK_CUR, INV_SEEK_END, INV_READ, INV_WRITE</blockquote>\n<p>Constants for PostgreSQL type (OID) identifiers:</p>\n<blockquote>\n<p>Character String Types:</p>\n<blockquote>\nPG_TEXT, PG_CHAR, PG_VARCHAR, PG_NAME, PG_BPCHAR</blockquote>\n<p>Number Types:</p>\n<blockquote>\nPG_INT4, PG_INT2, PG_INT8, PG_OID, PG_NUMERIC, PG_FLOAT8,\nPG_FLOAT4, PG_MONEY (aka PG_CASH)</blockquote>\n<p>Temporal Types:</p>\n<blockquote>\nPG_DATE, PG_TIME, PG_TIMESTAMP, PG_TIMESTAMPTX, PG_INTERVAL,\nPG_ABSTIME, PG_RELTIME, PG_TINTERVAL</blockquote>\n<p>Logical (boolean) Type:</p>\n<blockquote>\nPG_BOOL</blockquote>\n<p>Geometric Types:</p>\n<blockquote>\nPG_POINT, PG_LSEG, PG_PATH, PG_BOX, PG_LINE, PG_CIRCLE,\nPG_POLYGON</blockquote>\n<p>Network Types:</p>\n<blockquote>\nPG_INET, PG_CIDR</blockquote>\n<p>Misc. Types:</p>\n<blockquote>\nPG_REFCURSOR</blockquote>\n</blockquote>\n</blockquote>\n<p>The following constants are defined for use by the libpq module and have no\ndirect relationship to constants in PostgreSQL's C API:</p>\n<blockquote>\n<p>PgResult related constants:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">RESULT_DDL:&nbsp;</td><td class=\"field-body\">result was generated by a DDL query.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">RESULT_DQL:&nbsp;</td><td class=\"field-body\">result was generated by a DQL query.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">RESULT_DML:&nbsp;</td><td class=\"field-body\">result was generated by a DML query.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">RESULT_EMPTY:&nbsp;</td><td class=\"field-body\">query generated an empty result.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">RESULT_ERROR:&nbsp;</td><td class=\"field-body\">query generated an error.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>PgBoolean constants:</p>\n<blockquote>\nPgTrue, PgFalse</blockquote>\n</blockquote>\n</div>\n<div class=\"section\" id=\"libpq-methods\" name=\"libpq-methods\">\n<h3>2.1.3 libpq Methods</h3>\n<p>The following methods are defined by libpq:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PQconnectdb:&nbsp;</td><td class=\"field-body\">preferred method to connect to a database.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PQconndefaults:&nbsp;</td><td class=\"field-body\">returns a list containing the connection\ndefaults.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PQresStatus:&nbsp;</td><td class=\"field-body\">returns a string representation of the result\nstatus.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PQresType:&nbsp;</td><td class=\"field-body\">returns a string representation of the result\ntype.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PQftypeName:&nbsp;</td><td class=\"field-body\">returns a string name for a PostgreSQL type\n(oid).</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgBoolean:&nbsp;</td><td class=\"field-body\">creates a PgBoolean object from a string or\nnumber.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgBooleanFromString:&nbsp;</td><td class=\"field-body\">Deprecated, use PgBoolean().</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgBooleanFromInteger:&nbsp;</td><td class=\"field-body\">Deprecated, use PgBoolean().</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgInt2:&nbsp;</td><td class=\"field-body\">creates a PgInt2 object from a string or\nnumber.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgInt8:&nbsp;</td><td class=\"field-body\">creates a PgInt8 object from a string or\nnumber.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgLargeObject:&nbsp;</td><td class=\"field-body\">creates a PgLargeObject from a connection and\nOID.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgVersion:&nbsp;</td><td class=\"field-body\">creates a PgVersion object from a string.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgQuoteString:&nbsp;</td><td class=\"field-body\">Quotes a string, escaping any characters as\nneeded, for use as input to a character/text\nfield.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgQuoteBytea:&nbsp;</td><td class=\"field-body\">Escapes a string, which can contain NUL\ncharacters, so that it can used as an input to\na bytea field.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgUnQuoteBytea:&nbsp;</td><td class=\"field-body\">Reverses the action of PgQuoteBytea().</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div class=\"section\" id=\"pqconnectdb\" name=\"pqconnectdb\">\n<h3>2.1.3.1 PQconnectdb</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd><p class=\"first\">c = PQconnectdb(conninfo)</p>\n<p>Where conninfo is a string containing connection information.</p>\n</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgConnection object.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Implements the PostgreSQL C API's PQconnectdb function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>DatabaseError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pqconndefaults\" name=\"pqconndefaults\">\n<h3>2.1.3.2 PQconndefaults</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>l = PQconndefaults()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A list of default connection options.  A default connection options is\na list containing [keyword, envvar, compiled, val, label, dispchar,\ndispsize].</dd>\n<dt><em>Description</em>:</dt>\n<dd>Implements the PostgreSQL C API's PQconndefaults function.</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pqresstatus\" name=\"pqresstatus\">\n<h3>2.1.3.3 PQresStatus</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PQresStatus(status)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A string representation of the result status code, 'status'.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Implements the PostgreSQL C API's PQresStatus function.</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pqrestype\" name=\"pqrestype\">\n<h3>2.1.3.4 PQresType</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PQresType(type)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A string representation of the result type, 'type'.</dd>\n<dt><em>Description</em>:</dt>\n<dd>The result type is generated by the libpq module (not by the PostgreSQL\nC API library) and describes the result type (DDL, DQL, DML, EMPTY, or\nERROR).</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A string representation of the result type code, 'type'.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pqftypename\" name=\"pqftypename\">\n<h3>2.1.3.5 PQftypeName</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PQftypeName(type)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A string representation of the PostgreSQL type, 'type'.</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method returns a string representation of the PostgreSQL type,\n'type'.  This string is useful for displaying the type code.  This\nmethod has no corresponding PostgreSQL C API function.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgboolean\" name=\"pgboolean\">\n<h3>2.1.3.6 PgBoolean</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>b = PgBoolean(object)</dd>\n<dt><em>Description</em>:</dt>\n<dd><p class=\"first\">This method returns a PgBoolean object initialized from the\nvalue of object.  It recognizes the following string values:</p>\n<blockquote>\nFor true.: '1', 'T', 'TRUE', 'Y', 'YES', 'ON'\nFor false: '0', 'F', 'FALSE', 'N', 'NO', 'OFF'</blockquote>\n<p>For numeric object, zero is false, non-zero is true.</p>\n</dd>\n<dt><em>Returns</em>:</dt>\n<dd>PgTrue or PgFalse based on the value of 'object'</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgint2\" name=\"pgint2\">\n<h3>2.1.3.7 PgInt2</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>n = PgInt2(object)</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method returns a PgInt2 object initialized from the value of the\nstring or numeric 'object'.  The PgInt2 type uses a 2-byte integer to\nstore it's value.</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgInt2 object initialized with the value of 'object'.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgint8\" name=\"pgint8\">\n<h3>2.1.3.8 PgInt8</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>n = PgInt8(object)</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method returns a PgInt8 object initialized from the value of the\nstring or numeric 'object'.  The PgInt8 type uses a 8-byte integer to\nstore it's value.</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgInt8 object initialized with the value of 'object'.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pglargeobject\" name=\"pglargeobject\">\n<h3>2.1.3.9 PgLargeObject</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>o = PgLargeObject(PgConnection, OID)</dd>\n<dt><em>Description</em>:</dt>\n<dd>This function will create a PgLargeObject object given a PgConnection\nobject and a PostgreSQL large object identifier (OID).</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A closed PgLargeObject object.</dd>\n<dt><em>Note</em>:</dt>\n<dd>A PgLargeObject can not be opened outside the context of a transaction.\nBecause of this, large objects created with this method (and by\ninference, un-pickled large objects) will begin a transaction (if\nneeded) in it's associated PgConnection object when the the large\nobject is opened.  When the large object is closed, the transaction\nwill be committed.  If a rollback is desired, pass close() an argument\nof 1.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgquotestring\" name=\"pgquotestring\">\n<h3>2.1.3.10 PgQuoteString</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PgQuoteString(string, forArray)</dd>\n<dt><em>Description</em>:</dt>\n<dd><p class=\"first\">This function returns a copy of the input string with the\nfollowing characters escaped:</p>\n<pre class=\"literal-block\">1.  The backslash character (as '\\\\')\n2.  The single quote (as &quot;\\'&quot;)\n3.  The &lt;CR&gt; character (as '\\r')\n4.  The &lt;NL&gt; character (as '\\n')\n5.  The &lt;BS&gt; character (as '\\b')\n6.  The &lt;FF&gt; character (as '\\f')\n7.  The &lt;TAB&gt; character (as '\\t')\n8.  All other control characters as '\\OOO' where OOO is\n    the octal representation of the character's ordinal\n    number.\nThe string is also quoted with single quotes.\n\nIf forArray is one (1), the escaping is changed  as follows:\n    1.  The backslash character (as '\\\\\\\\')\n    (2 through 7 remain the same)\n    8.  All other control characters as '\\\\\\\\000'\n    9.  The double quote (as '\\&quot;')\nThe string is also quoted with double quotes, instead of single\nquotes.</pre>\n</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A quoted, escaped copy of the input string.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgquotebytea\" name=\"pgquotebytea\">\n<h3>2.1.3.11 PgQuoteBytea</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PgQuoteBytea(string)</dd>\n<dt><em>Description</em>:</dt>\n<dd><p class=\"first\">This function returns a copy of the input string with characters\nescaped as follows:</p>\n<pre class=\"literal-block\">1.  &lt;NUL&gt; characters: '\\\\000' (Note: with 2 backslashes)\n2.  Non-printable characters: '\\OOO' (Note OOO is the octal\n    representation of the characters ordinal number)\n3.  Backslashes: '\\\\\\\\' (Note: with 4 backslashes)\n4.  Single quote: &quot;\\'&quot;\nThe string is also quoted with single quotes.\n\n\nIf forArray is one (1), the escaping is changed  as follows:\n    1.  &lt;NUL&gt; characters: '\\\\\\\\000' (Note: with 4 backslashes)\n    2.  Non-printable characters: '\\\\\\\\OOO'\n    3.  Backslashes: '\\\\\\\\\\\\\\\\' (Note: with 8 backslashes)\n    4.  Single quote: &quot;\\'&quot;\n    5.  The double quote (as '\\\\&quot;')\nThe string is also quoted with double quotes, instead of single\nquotes.</pre>\n</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A quoted, escaped copy of the input string.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"pgunquotebytea\" name=\"pgunquotebytea\">\n<h3>2.1.3.12 PgUnQuoteBytea</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = PgUnQuoteBytea(string)</dd>\n<dt><em>Description</em>:</dt>\n<dd>This function un-escapes a string retrieved from a bytea field.</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A copy of the input string with any escaped character returned\nto their original value.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"libpq-classes\" name=\"libpq-classes\">\n<h3>2.1.4 libpq Classes</h3>\n<p>This module defines the following five (5) classes:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PgConnection:&nbsp;</td><td class=\"field-body\">the connection class.  It handles the connection and all\nrequests to the database.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgResult:&nbsp;</td><td class=\"field-body\">handles the query results.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgLargeObject:&nbsp;</td><td class=\"field-body\">handles the access to PostgreSQL large objects.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgNotify:&nbsp;</td><td class=\"field-body\">the notify class.  It contains information about a\nnotification event sent from a PostgreSQL backend process.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgVersion:&nbsp;</td><td class=\"field-body\">the version class.  It contains information about the\nversion of the PostgreSQL backend that a connection\nobject is connected to.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The module makes error information available via the following exception\nobjects, in addition to the standard Python exceptions:</p>\n<blockquote>\nWarning, Error, InterfaceError, DatabaseError, OperationalError,\nIntegrityError, InternalError, ProgrammingError, NotSupportedError</blockquote>\n<p>Additional information about these exceptions can be found in the Python\nDB-API 2.0 documentation.</p>\n</div>\n<div class=\"section\" id=\"the-pgconnection-object\" name=\"the-pgconnection-object\">\n<h3>2.1.4.1 The PgConnection Object</h3>\n<p>The PgConnection Object defines a connection to the PostgreSQL database.\nIt has the following public, read-only attributes:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">host:&nbsp;</td><td class=\"field-body\">The server host name of the connection.  It returns the\noutput of the PQhost PostgreSQL C API function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">post:&nbsp;</td><td class=\"field-body\">The port used in the connection.  It returns the output of\nthe PQport function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">db:&nbsp;</td><td class=\"field-body\">The database name of the connection.  It returns the output\nof the PQdb function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">options:&nbsp;</td><td class=\"field-body\">The backend options used in the connection.  It returns the\noutput of the PQoptions function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">tty:&nbsp;</td><td class=\"field-body\">The debug tty of the connection.  It returns the output of\nthe PQtty function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">user:&nbsp;</td><td class=\"field-body\">The user name of the connection.  It returns the output of\nthe PQuser function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">status:&nbsp;</td><td class=\"field-body\">The status of the connection.  It returns the output of the\nPQstatus function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">errorMessage:&nbsp;</td><td class=\"field-body\">The error message most recently generated by an operation\non the connection.  It returns the output of the\nPQerrorMeesage function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">backendPID:&nbsp;</td><td class=\"field-body\">The process ID of the backend handling this connection.  It\nreturns the output of the backendPID function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">isBusy:&nbsp;</td><td class=\"field-body\">Indicates if PQgetResult would block.  Used with\nasynchronous query processing.  It returns the output of\nthe PQisBusy function (PostgreSQL 7.0 or later).</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">socket:&nbsp;</td><td class=\"field-body\">The file descriptor for the backend connection socket.\nUsed with asynchronous query processing.  It returns the\noutput of the PQsocket function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">notices:&nbsp;</td><td class=\"field-body\"><p class=\"first\">A list of notices received by the PostgreSQL C API.  The\nnotices are placed in the list so that the list.pop()\nmethod will retrieve the oldest notice on the list.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">While this attribute is read-only, you can still\nmanipulate the list using any of the list's methods\n(pop, append, insert, etc.).  You just can't assign\na new value to the attribute.</td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">version:&nbsp;</td><td class=\"field-body\">version information about the backend that this connection\nobject is connected to.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The PgConnection Object has the following methods:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">connectPoll:&nbsp;</td><td class=\"field-body\">Poll the libpq C API for the connection status.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">query:&nbsp;</td><td class=\"field-body\">Execute a query and wait for the results.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">sendQuery:&nbsp;</td><td class=\"field-body\">Send a query to the backend without blocking.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getResult:&nbsp;</td><td class=\"field-body\">Retrieve the results from the sendQuery method.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">setnonblocking:&nbsp;</td><td class=\"field-body\">Make the connection non-blocking (or blocking).</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">consumeInput:&nbsp;</td><td class=\"field-body\">If input is available from the backend, consume it.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">flush:&nbsp;</td><td class=\"field-body\">Attempt to flush any data queued on the backend.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">requestCancel:&nbsp;</td><td class=\"field-body\">Send a cancel query request to the backend.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">finish:&nbsp;</td><td class=\"field-body\">Close the connection and free memory used by the PQconn\nobject.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">reset:&nbsp;</td><td class=\"field-body\">Reset the communication port with the backend.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">notifies:&nbsp;</td><td class=\"field-body\">Returns the next notification object (PgNotify) from a list\nof unhandled notification objects.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getline:&nbsp;</td><td class=\"field-body\">Read a (newline-terminated) line of characters from the\nbackend.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getlineAsync:&nbsp;</td><td class=\"field-body\">Read a line of characters in a non-blocking manner.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">putline:&nbsp;</td><td class=\"field-body\">Send a null-terminated string to the backend.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">endcopy:&nbsp;</td><td class=\"field-body\">Sync with the backend (after a Copy-In/Copy-Out operation).</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">lo_creat:&nbsp;</td><td class=\"field-body\">Create a new, empty PgLargeObject.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">lo_import:&nbsp;</td><td class=\"field-body\">Import a file as a PostgreSQL large object, returning a\nPgLargeObject.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">lo_export:&nbsp;</td><td class=\"field-body\">export a PostgreSQL large object to a file.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">lo_unlink:&nbsp;</td><td class=\"field-body\">Removes a PostgreSQL large object from the database.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">trace:&nbsp;</td><td class=\"field-body\">Enable tracing of frontend/backend communications.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">untrace:&nbsp;</td><td class=\"field-body\">Disable tracing start by the trace method.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div class=\"section\" id=\"connectpoll-postgresql-7-x-and-above\" name=\"connectpoll-postgresql-7-x-and-above\">\n<h3>2.1.4.1.1 connectPoll (PostgreSQL 7.x and above)</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = c.connectPoll()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>An integer representing a Postgres Polling Status code.</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method is used to determine the status of a connection started\nwith PQconnectStart().  This method implements the PQconnectPoll()\nfunction and is used for asynchronous query processing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"query\" name=\"query\">\n<h3>2.1.4.1.2 query</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>r = c.query(string)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgResult object.</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method sends the SQL query, 'string', to the backend and\nwaits for the result.  It implement the PostgreSQL C API's\nPQexec function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, ProgrammingError, OperationalError,\nInternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"sendquery\" name=\"sendquery\">\n<h3>2.1.4.1.3 sendQuery</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.sendQuery(string)</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method send the SQL query, 'string', to the backend without\nwaiting for the result.  It implements the PQsendQuery function and is\nused for asynchronous query processing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InternalError, InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getresult\" name=\"getresult\">\n<h3>2.1.4.1.4 getResult</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>r = c.getResult()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgResult object.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Wait for and retrieve the results from a previous sendQuery call.  It\nimplements the PQgetResult function and is used for asynchronous query\nprocessing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, ProgrammingError, OperationalError,\nInternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"setnonblocking-postgresql-7-x-and-above\" name=\"setnonblocking-postgresql-7-x-and-above\">\n<h3>2.1.4.1.5 setnonblocking (PostgreSQL 7.x and above)</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.setnonblocking(mode)</dd>\n<dt><em>Description</em>:</dt>\n<dd>Set the connection to non-blocking if 'mode' is non-zero, otherwise set\nit to blocking.  This method implements the PQsetnonblocking()\nfunction.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, InternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"consumeinput\" name=\"consumeinput\">\n<h3>2.1.4.1.6 consumeInput</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.consumeInput()</dd>\n<dt><em>Description</em>:</dt>\n<dd>If input is available from the backend, consume it.  This method\nimplements the PQconsumeInput function and is used with asynchronous\nquery processing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, InternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"flush-postgresql-7-x-and-above\" name=\"flush-postgresql-7-x-and-above\">\n<h3>2.1.4.1.7 flush (PostgreSQL 7.x and above)</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.flush()</dd>\n<dt><em>Description</em>:</dt>\n<dd>If input is available from the backend, consume it.  This method\nimplements the PQflush function and is used with asynchronous query\nprocessing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, InternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"requestcancel\" name=\"requestcancel\">\n<h3>2.1.4.1.8 requestCancel</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.requestCancel()</dd>\n<dt><em>Description</em>:</dt>\n<dd>Send a cancel request to the backend.  Note that the successful\ndispatching of the request does not mean the request will be canceled.\nThis method implements the PQrequestCancel function and is used with\nasynchronous query processing.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, InternalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"finish\" name=\"finish\">\n<h3>2.1.4.1.9 finish</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.finish()</dd>\n<dt><em>Description</em>:</dt>\n<dd>Close the connection to the database and invalidates the PgConnection\nobject.  Any attempt to use the PgConnection object after finish is\ncalled will raise an InterfaceError.  Used by the PQconn object.  The\ndatabase connection is automatically closed when the PgConnection\nobject is deleted, so calling finish explicitly is never needed. This\nmethod implements and extends the PQfinish function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"reset\" name=\"reset\">\n<h3>2.1.4.1.10 reset</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.reset()</dd>\n<dt><em>Description</em>:</dt>\n<dd>Close the connection to the backend and attempt to open a new\nconnection using the previously used parameters.  This method\nimplements the PQreset function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, DatabaseError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"notifies\" name=\"notifies\">\n<h3>2.1.4.1.11 notifies</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>n = c.notifies()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgNotify object containing data for the next notification message, or\nNone if there are no unhandled notifications.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Retrieves the next notification from a list of unhandled notification\nmessages received from the backend.  Once a notification object is\nreturned, it is considered handled and will be removed from the list of\nnotifications.  This method implements the PQnotifies function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getline\" name=\"getline\">\n<h3>2.1.4.1.12 getline</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = c.getline()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A newline-terminated string read from the backend.</dd>\n<dt><em>Description</em>:</dt>\n<dd>The getline method reads a newline-terminated string (transmitted by\nthe backend server) into a (dynamically sized) buffer.  This method\nimplements the PQgetline function and is used with the PostgreSQL COPY\ncommand.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError, MemoryError, InternalError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getlineasync\" name=\"getlineasync\">\n<h3>2.1.4.1.13 getlineAsync</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = c.getlineAsync()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A newline-terminated string read from the backend in a\nnon-blocking manner.</dd>\n<dt><em>Description</em>:</dt>\n<dd>The getlineAsync method reads a newline-terminated string (transmitted\nby the backend server) into a (dynamically sized) buffer.  This method\nimplements the PQgetline function and is used with the PostgreSQL COPY\ncommand.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError, MemoryError, InternalError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"putline\" name=\"putline\">\n<h3>2.1.4.1.14 putline</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.putline(s)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>Sends a string to the backend.</dd>\n<dt><em>Description</em>:</dt>\n<dd>The putline method sends a (null-terminated) string to the backend.\nThis method implements the PQputline function and is used with the\nPostgreSQL COPY command.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError, InternalError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"endcopy\" name=\"endcopy\">\n<h3>2.1.4.1.15 endcopy</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.endcopy()</dd>\n<dt><em>Returns</em>:</dt>\n<dd>Syncs with the backend.</dd>\n<dt><em>Description</em>:</dt>\n<dd>This function waits until the backend has finished the copy. It should\neither be issued when the last string has been sent to the backend\nusing putline or when the last string has been received from the\nbackend using getline. It must be issued or the backend may get &quot;out of\nsync&quot; with the frontend.  This method implements the PQputline function\nand is used with the PostgreSQL COPY command.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError, InternalError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"lo-creat\" name=\"lo-creat\">\n<h3>2.1.4.1.16 lo_creat</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>lo = c.lo_creat(mode)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgLargeObject.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Create a PostgreSQL large object with the given mode.  This method\nimplements the lo_creat function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, OperationalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"lo-import\" name=\"lo-import\">\n<h3>2.1.4.1.17 lo_import</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>lo = c.lo_import(filename)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgLargeObject</dd>\n<dt><em>Description</em>:</dt>\n<dd>Imports a file named 'filename' into a PostgreSQL large object.  This\nmethod implements the lo_import function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, OperationalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"lo-export\" name=\"lo-export\">\n<h3>2.1.4.1.18 lo_export</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.lo_export(oid, filename)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A PgLargeObject</dd>\n<dt><em>Description</em>:</dt>\n<dd>Exports a PostgreSQL large object, represented by oid, to a file named\n'filename'.  This method implements the lo_import function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, OperationalError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"lo-unlink\" name=\"lo-unlink\">\n<h3>2.1.4.1.19 lo_unlink</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.lo_unlink(oid)</dd>\n<dt><em>Description</em>:</dt>\n<dd>Removes the PostgreSQL large object identified by 'oid' from\nthe database.  This method implements the lo_unlink function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, IOError, TypeError</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"trace\" name=\"trace\">\n<h3>2.1.4.1.20 trace</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.trace(fileObject)</dd>\n<dt><em>Description</em>:</dt>\n<dd>Enables tracing of the frontend/backend communications to a\nPython File Object, fileObject.  This method implements the\nPQtrace function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"untrace\" name=\"untrace\">\n<h3>2.1.4.1.21 untrace</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.untrace()</dd>\n<dt><em>Description</em>:</dt>\n<dd>Disables tracing enabled by the trace method.  This method\nimplements the lo_import function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"the-pgresult-object\" name=\"the-pgresult-object\">\n<h3>2.1.4.2 The PgResult Object</h3>\n<p>The PgResult object defines the result of a query.  It has the following\npublic, read-only attributes:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">resultType:&nbsp;</td><td class=\"field-body\">the type of the result: DDL, DQL, DML, EMPTY, ERROR.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">resultStatus:&nbsp;</td><td class=\"field-body\">The result status of the query.  It returns the\noutput of the PQresultStatus PostgreSQL C API\nfunction.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">ntuples:&nbsp;</td><td class=\"field-body\">The number of tuples (instances) in the query result.\nIt returns the output of the PQntuples function call.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">nfields:&nbsp;</td><td class=\"field-body\">The number of fields (attributes) in each tuple of\nthe query result.  It returns the output of the\nPQnfields function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">binaryTuples:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Contains 1 if the PgResult object contains binary\ntuple data, 0 if it contains ASCII data. It returns\nthe output of the PQbinaryTuples function call.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">Binary portals are not supported at this time.</td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">cmdStatus:&nbsp;</td><td class=\"field-body\">The command status string from the SQL command that\ngenerated the PGresult.  It returns the output to the\nPQcmdStatus function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">cmdTuples:&nbsp;</td><td class=\"field-body\">The number of rows affected by the SQL command.  It\nreturns the output of the PQcmdTuples function.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">oidValue:&nbsp;</td><td class=\"field-body\">(7.x and above) The object id of the tuple\ninserted, if the SQL command was an INSERT.\nOtherwise, contains None.  It returns the output of\nthe PQoidValue function.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The PgResult Object has the following methods:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">fname:&nbsp;</td><td class=\"field-body\">Returns the field (attribute) name associated with the given\nfield index.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">fnumber:&nbsp;</td><td class=\"field-body\">Returns the field (attribute) index associated with the given\nfield name.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">ftype:&nbsp;</td><td class=\"field-body\">Returns the type of a field.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">fsize:&nbsp;</td><td class=\"field-body\">Returns the size in bytes of the field.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">fmod:&nbsp;</td><td class=\"field-body\">Returns the type-specific modification data of a field.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getvalue:&nbsp;</td><td class=\"field-body\">Returns a single field (attribute) value of one tuple of a\nPgResult.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getlength:&nbsp;</td><td class=\"field-body\">Returns the length of a field (attribute) in bytes.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">getisnull:&nbsp;</td><td class=\"field-body\">Tests a field for a NULL entry.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">clear:&nbsp;</td><td class=\"field-body\">Frees the memory used by result.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div class=\"section\" id=\"fname\" name=\"fname\">\n<h3>2.1.4.2.1 fname</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>s = r.fname(fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>The field (attribute) name associate with the given field\nindex.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Returns the field (attribute) name associated with the given\nfield index. Field indices start at 0.  It implements the\nPQfname PostgreSQL C API function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"fnumber\" name=\"fnumber\">\n<h3>2.1.4.2.2 fnumber</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.fnumber(name)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>The field (attribute) index associated with the given field\nname.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Returns the field (attribute) index associated with the given\nfield name, 'name'.  A -1 is returned if the name does not\nmatch any field.  It implements the PQfnumber function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"ftype\" name=\"ftype\">\n<h3>2.1.4.2.3 ftype</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.ftype(fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>Returns the field type associated with the given field index.</dd>\n<dt><em>Description</em>:</dt>\n<dd>The field type associated with the given field index.  The integer\nreturned is an internal coding of the type.  Field indices start at 0.\nIt implements the PQftype function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"fsize\" name=\"fsize\">\n<h3>2.1.4.2.4 fsize</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.fsize(fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>The size in bytes of the field associated with the given field\nindex.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Returns the size in bytes of the field associated with the\ngiven field index. Field indices start at 0.  fsize returns\ntype).  -1 is returned if the field is variable size.  It\nimplements the PQfsize function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"fmod\" name=\"fmod\">\n<h3>2.1.4.2.5 fmod</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.fmod(fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>The type-specific modification data of the field associated\nwith the given field index</dd>\n<dt><em>Description</em>:</dt>\n<dd>Returns the type-specific modification data of the field associated\nwith the given field index.  Field indices start at 0.  It implements\nthe PQfmod function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getvalue\" name=\"getvalue\">\n<h3>2.1.4.2.6 getvalue</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>o = r.getvalue(tidx, fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>A single field (attribute) value of one tuple of a PGresult.</dd>\n<dt><em>Description</em>:</dt>\n<dd><p class=\"first\">Returns a single field (attribute) value of one tuple of a\nPgResult.  Tuple and field indices start at 0.  If the field\nis NULL, the None is returned.  The type of object returned\ndepends on the PostgreSQL data type of the field:</p>\n<blockquote>\n<blockquote>\n<table frame=\"border\" rules=\"all\">\n<colgroup>\n<col colwidth=\"45%\" />\n<col colwidth=\"55%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th>PostgreSQL Type</th>\n<th>Returned Python Object</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>PG_BOOL</td>\n<td>PgBoolean</td>\n</tr>\n<tr><td>PG_OID</td>\n<td>Integer or PgLargeObject(1)</td>\n</tr>\n<tr><td>PG_INT2</td>\n<td>PgInt2</td>\n</tr>\n<tr><td>PG_INT4</td>\n<td>Integer</td>\n</tr>\n<tr><td>PG_INT8</td>\n<td>PgInt8(2) or Long</td>\n</tr>\n<tr><td>PG_MONEY</td>\n<td>Float</td>\n</tr>\n<tr><td>PG_FLOAT4</td>\n<td>Float</td>\n</tr>\n<tr><td>PG_FLOAT8</td>\n<td>Float</td>\n</tr>\n<tr><td>PG_BYTEA</td>\n<td>String(3)</td>\n</tr>\n<tr><td>All Other Types</td>\n<td>String</td>\n</tr>\n</tbody>\n</table>\n<ol class=\"arabic simple\">\n<li>getvalue() will determine if the OID represents a\nPostgreSQL Large Object and returns the appropriate\nobject.</li>\n<li>PgInt8 type is only available on system that have\nlong long (64 bit integer) support.</li>\n<li>Any escaped characters in the string will be returned\nto their original value in the returned string.</li>\n</ol>\n</blockquote>\n<p>getvalue implements and extends the PQgetvalue function.</p>\n</blockquote>\n</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getlength\" name=\"getlength\">\n<h3>2.1.4.2.7 getlength</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.getlength(tidx, fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>The length of a field (attribute) in bytes.</dd>\n<dt><em>Description</em>:</dt>\n<dd>Returns the length of a field (attribute) in bytes.  Tuple and\nfield indices start at 0.  This is the actual data length for\nthe particular data value, that is the size of the object\npointed to by getvalue. Note that for ASCII-represented values,\nthis size has little to do with the binary size reported by\nfsize.  It implements the PQgetlength function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"getisnull\" name=\"getisnull\">\n<h3>2.1.4.2.8 getisnull</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = r.getisnull(tidx, fidx)</dd>\n<dt><em>Returns</em>:</dt>\n<dd><dl>\n<dt>1 if the field contains a NULL, 0 if it contains a non-null</dt>\n<dd>value.</dd>\n</dl>\n</dd>\n<dt><em>Description</em>:</dt>\n<dd>Tests a field for a NULL entry. Tuple and field indices start\nat 0.  This function returns 1 if the field contains a NULL, 0\nif it contains a non-null value.  (Note that getvalue will return None\nfor a NULL field.)  It implements the PQgetisnull function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"clear\" name=\"clear\">\n<h3>2.1.4.2.9 clear</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>r.clear()</dd>\n<dt><em>Description</em>:</dt>\n<dd>Frees the storage associated with a PgResult and invalidates\nthe PgResult object.  Any attempt to access the PgResult will\ngenerate an InterfaceError exception.  The PgResult is automatically\ncleared when the PgResult if deleted, so calling clear explicitly is\nnever needed.  It implements and extends the PQclear function.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, TypeError</dd>\n<dt><em>Note</em>:</dt>\n<dd>See the PostgreSQL C API documentation for details.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"the-pglargeobject-object\" name=\"the-pglargeobject-object\">\n<h3>2.1.4.3 The PgLargeObject object</h3>\n<p>The PgLargeObject class provides methods for accessing the PostgreSQL Large\nObject (LO) system.  It allows access to the LO using Python's File Object\nsemantics. The PgLargeObject class defines the following public, read-only\nattributes:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">mode:&nbsp;</td><td class=\"field-body\">The mode used to open the LO</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">name:&nbsp;</td><td class=\"field-body\">A string, in the form of &quot;&lt;...&gt;&quot;, indicating the source of the LO.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">closed:&nbsp;</td><td class=\"field-body\">Flag: 1 = the LO is closed.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>and the following public, read-write attribute:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">softspace:&nbsp;</td><td class=\"field-body\">Boolean that indicates whether a space character needs to be\nprinted before another value when using the 'print' statement.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The following methods are provided:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">close:&nbsp;</td><td class=\"field-body\">Close the LO.  A closed LO can not be read or written anymore.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">flush:&nbsp;</td><td class=\"field-body\">Flush the internal buffer.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">open:&nbsp;</td><td class=\"field-body\">Open the LO.  A LO can be opened for reading, writing, or both.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">isatty:&nbsp;</td><td class=\"field-body\">Always returns 0.  A LO is never attached to a TTY like device.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">fileno:&nbsp;</td><td class=\"field-body\">Returns the integer 'file descriptor' used by the underlining\nimplementation to request I/O operations.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">read:&nbsp;</td><td class=\"field-body\">Read bytes from the LO.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">readline:&nbsp;</td><td class=\"field-body\">Read one entire line from the LO.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">readlines:&nbsp;</td><td class=\"field-body\">Read entire lines from the LO until EOF.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">seek:&nbsp;</td><td class=\"field-body\">Set the LO's current position, like stdio's fseek().</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">tell:&nbsp;</td><td class=\"field-body\">Returns the LO's current position, like stdio's ftell().</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">write:&nbsp;</td><td class=\"field-body\">Write bytes to the LO.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">writelines:&nbsp;</td><td class=\"field-body\">Write a list of strings to the LO.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">export:&nbsp;</td><td class=\"field-body\">Export a LO to a file.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Since the PgLargeObject follows Python's File Object semantics, refer to the\ndocumentation for File Objects for details on using PgLargeObject.  There are\na few differences, which will be detailed here.</p>\n</div>\n<div class=\"section\" id=\"open\" name=\"open\">\n<h3>2.1.4.3.1 open</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>lo.open(mode)</dd>\n<dt><em>Description</em>:</dt>\n<dd><p class=\"first\">Opens a PostgreSQL Large Object for reading, writing, or both.\nThe 'mode' parameter can be either an integer consisting of a\ncombination of the INV_READ and INV_WRITE mode bits, or a\nstring containing 'r' for reading, or 'w' for writing.  The LO\ncan be open for updating by using 'r+' or 'w+'.  A 'b' can be\nincluded in the mode string to indicate opening the LO for binary data,\nbut is not really needed since PostgreSQL does not differentiate\nbetween binary and non-binary data.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">'w+' will NOT truncate the large object.</td>\n</tr>\n</tbody>\n</table>\n</dd>\n<dt><em>Note</em>:</dt>\n<dd>Open is a built-in function of Python, not a method of the File\nObject.  If there is not transaction started on the associated\nPgConnection object when open is called, one is started.  This\nwill only occur for un-pickled large objects and large objects\ncreated with the PgLargeObject method of libpq (and PgSQL).</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"close\" name=\"close\">\n<h3>2.1.4.3.2 close</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>lo.close()</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method will close an open large object.</dd>\n<dt><em>Note</em>:</dt>\n<dd>If the large object was the result of un-pickling a large\nobject or it was created with the PgLargeObject method of\nlibpq (or PgSQL), close() will commit the transaction started\nby open().  If a rollback is desired, then pass close a single\nargument of the integer 1.  This argument is only valid if the\nlarge object was the result of un-pickling a large object or\ncreated with the PgLargeObject method.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"export\" name=\"export\">\n<h3>2.1.4.3.3 export</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>i = lo.export(filename)</dd>\n<dt><em>Returns</em>:</dt>\n<dd>1 if successful, 0 if an OS error occurred, &lt; 0 if a database\nerror occurred.</dd>\n<dt><em>Description</em>:</dt>\n<dd>This method will export the PostgreSQL large object to the\nspecified UNIX filename.</dd>\n<dt><em>Note</em>:</dt>\n<dd>The file is stored on the database server, not the client machine (if\ndifferent from the server).</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"the-pgnotify-object\" name=\"the-pgnotify-object\">\n<h3>2.1.4.4 The PgNotify Object</h3>\n<p>The PgNotify object encapsulates the data returned by the notifies method of\nthe PgConnection class.  It provides the following read-only attributes:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">relname:&nbsp;</td><td class=\"field-body\">The name of the relation containing data.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">be_pid:&nbsp;</td><td class=\"field-body\">The process ID of the PostgreSQL backend sending the\nnotification.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div class=\"section\" id=\"the-pgversion-object\" name=\"the-pgversion-object\">\n<h3>2.1.4.5 The PgVersion Object</h3>\n<p>The PgVersion object encapsulates information about the version of PostgreSQL\nthat a connection object is connected to.  It provides the following read-only\nattribute:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">major:&nbsp;</td><td class=\"field-body\">The major version number.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">minor:&nbsp;</td><td class=\"field-body\">The minor version number.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">level:&nbsp;</td><td class=\"field-body\">The patch level.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">post70:&nbsp;</td><td class=\"field-body\">A flag that is true if the version is &gt;= 7.1.0.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>You can obtain the result of the 'SELECT version()' used to initialize this\nobject using the str() or repr() function.</p>\n<p>For example, for version 6.5.3, the contents of the PgVersion object would be:</p>\n<blockquote>\n<pre class=\"literal-block\">connection.version        == &quot;PostgreSQL 6.5.3 on &lt;system dependent info&gt;&quot;\nconnection.version.major  == 6\nconnection.version.minor  == 5\nconnection.version.level  == 3\nconnection.version.post70 == 0</pre>\n</blockquote>\n<p>For example, for version 7.1.1, the contents of PgVer would be:</p>\n<blockquote>\n<pre class=\"literal-block\">connection.version        == &quot;PostgreSQL 7.1.1 on &lt;system dependent info&gt;&quot;\nconnection.version.major  == 7\nconnection.version.minor  == 1\nconnection.version.level  == 1\nconnection.version.post70 == 1</pre>\n</blockquote>\n<p>Also, you can use the PgVersion object to compare against a number or string\nform of the version.  The form used for numeric comparison is &quot;Mmmll&quot;, where\n&quot;M&quot; is the major number, &quot;mm&quot; is the minor number, and &quot;ll&quot; is the patch level.\nAn example:</p>\n<blockquote>\n<p>Assume that the PostgreSQL version is 7.0.2, then:</p>\n<blockquote>\n<pre class=\"literal-block\">connection.version == 70002 will be true.\nconnection.version &lt; 70001L will be false.\nconnection.version &gt; 70001.0 will be true.</pre>\n</blockquote>\n</blockquote>\n<p>You can also compare against a string as follows:</p>\n<blockquote>\n<p>Assume that the PostgreSQL version is 7.1.2, then:</p>\n<blockquote>\n<pre class=\"literal-block\">connection.version == &quot;7.0.2&quot; will be false.\nconnection.version &lt; &quot;7.0.1&quot; will be false.\nconnection.version &gt; &quot;7.1&quot; will be true.</pre>\n</blockquote>\n</blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">Both the libpq and PgSQL connection objects have the version attribute.</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\">Comparisons against strings (i.e. &quot;7.0.1&quot;) does not work in\nPython 2.0.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"the-pgsql-module\" name=\"the-pgsql-module\">\n<h3>2.2 The PgSQL module</h3>\n<p>The PgSQL module provide a Python DB-API 2.0 compliant module on top of the\nlibpq module.  As the DB-API 2.0 interface is documented elsewhere\n(<a class=\"reference\" href=\"http://www.python.org/topics/database/DatabaseAPI-2.0.html\">http://www.python.org/topics/database/DatabaseAPI-2.0.html</a>), I will only\ndescribe the differences in the PgSQL here.</p>\n</div>\n<div class=\"section\" id=\"importing-pgsql\" name=\"importing-pgsql\">\n<h3>2.2.1 Importing PgSQL</h3>\n<p>The module, PgSQL, is part of the pyPgSQL package.  It is imported using\nthe following statement:</p>\n<blockquote>\n<pre class=\"doctest-block\">&gt;&gt;&gt; from pyPgSQL import PgSQL</pre>\n</blockquote>\n</div>\n<div class=\"section\" id=\"differences-at-the-module-level\" name=\"differences-at-the-module-level\">\n<h3>2.2.2 Differences at the Module Level</h3>\n<ol class=\"arabic\">\n<li><p class=\"first\">The Binary constructor is a method of the Connection object, not the module.\nFor PostgreSQL, a Large Object can only be created in conjunction with a\nConnection, it has no meaning outside of the context of a Connection.</p>\n</li>\n<li><p class=\"first\">The following types are defined to support certain PostgreSQL data types:</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PgInt2:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Supports the PG_INT2 data type.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgInt8:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Supports the PG_INT8 data type.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgBoolean:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Supports the PG_BOOL data type.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">The following classes are defined to support certain PostgreSQL data types:</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PgNumeric:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Supports the PG_NUMERIC data type.  It uses a Python Long as\nthe base type and provides the following arithmetic operations:\naddition, subtraction, multiplication, and division.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgMoney:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Supports the PG_CASH data type.  It uses a Python Float as the\nbase type with range checking to prevent it from exceeding the\nrange of the PG_CASH data type.  Any operation that applies to\na Python Float can be used with a PgMoney object.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgBytea:&nbsp;</td><td class=\"field-body\"><p class=\"first\">This class supports the PG_BYTEA data type.  It is a wrapper\naround a Python String that provides for proper escaping of\nthe string when used in a query.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgOther:&nbsp;</td><td class=\"field-body\"><p class=\"first\">This class supports all the other PostgreSQL data types that\ndo not map directly into a Python object or one of the support\nclasses listed above (such as PG_BOX, PG_POINT, etc.).  As time\ngoes on, more PostgreSQL data types will have support classes\ndefined for them, reducing the number of PostgreSQL data types\nthat fall within this class.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgArray:&nbsp;</td><td class=\"field-body\"><p class=\"first\">This class provide support for PostgreSQL arrays.  It is a\nwrapper around a Python list that supports all the methods of\na list plus adds a __quote__ method for quoting arrays.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">The following class is defined:</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PgVersion:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Contains the version number of PostgreSQL database engine that\nwe are connected to.  This information is used to change the\nbehavior of PgSQL based on the version of the PostgreSQL\nengine.  See the section 2.6 for more details on the\nPgVersion object.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">The following constructors are defined by the PgSQL module.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">PgBoolean:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Construct a PgBoolean from a Python numeric or string.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgInt2:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Construct a PgInt2 from a Python numeric or string.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgInt8:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Construct a PgInt8 from a Python numeric or string.</p>\n</td>\n</tr>\n<tr class=\"field\"><td class=\"field-name\">PgLargeObject:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Construct a PgLargeObject from a PgConnection object and\na OID identifying a PostgreSQL large object.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>These constructors are documented in the libpq section of this document.</p>\n</li>\n<li><p class=\"first\">The following attribute is defined in the PgSQL module:</p>\n<blockquote>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">fetchReturnsList:&nbsp;</td><td class=\"field-body\"><p class=\"first\">controls the type of result returns by the fetchXXX\nmethods.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Setting this attribute to 1 will cause the fetchXXX methods to return a\nlist instead of a PgResultSet.  This will provide better performance by\nsacrificing the convenient access methods provide by a PgResultSet.</p>\n<p>The default value for fetchReturnsList is 0.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"differences-in-the-connection-object\" name=\"differences-in-the-connection-object\">\n<h3>2.2.3 Differences in the Connection Object</h3>\n<ol class=\"arabic\">\n<li><p class=\"first\">The Connection object has an additional read-only attribute called notices.\nThis attribute is a list of notices returned by the pq library.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Under normal usage, certain (but not all) notices received from\nthe libpq C-API library are converted into Warning exceptions.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">The Connection object has an additional read-only attribute called version.\nThis attribute contains a PgVersion object encapsulating the version\ninformation of the PostgreSQL backend that the Connection object is\nconnected to.</p>\n</li>\n<li><p class=\"first\">The Binary constructor method is a Connection method, not a PgSQL module\nfunction.</p>\n</li>\n<li><p class=\"first\">A unlink method is available in the Connection object to remove a Large\nObject from the database.</p>\n</li>\n<li><p class=\"first\">A PgSQL specific Connection attribute, called TransactionLevel, specifies\nthe isolation level to use within a transaction.  It can be set to &quot;&quot;,\n&quot;READ COMMITED&quot;, or &quot;SERIALIZABLE&quot;.  PgSQL will issue the appropriate &quot;SET\nTRANSACTION LEVEL&quot; statement whenever a new transaction is started for\nthe connection.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\"><p class=\"first\">The value of this attribute can not be changed if there are any\nactive cursors for the connection.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"unlink\" name=\"unlink\">\n<h3>2.2.3.1 unlink</h3>\n<dl>\n<dt><em>Syntax</em>:</dt>\n<dd>c.unlink(PgLargeObject)</dd>\n<dt><em>Description</em>:</dt>\n<dd>Removes the PostgreSQL large object identified from the\ndatabase.</dd>\n<dt><em>Exceptions</em>:</dt>\n<dd>InterfaceError, IOError, TypeError</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"differences-in-the-cursor-object\" name=\"differences-in-the-cursor-object\">\n<h3>2.2.4 Differences in the Cursor Object</h3>\n<ol class=\"arabic\">\n<li><p class=\"first\">The description attribute is a sequence of 8-item sequences.  The first\nseven items are the same as described in the DB-API 2.0 documentation.\nThe 8th item is the 'isArray' flag.  If this is 1, then the associated\nresult column is a PostgreSQL array.</p>\n</li>\n<li><p class=\"first\">The callproc method will always return None.  PostgreSQL does not have\nstored procedures in the same sense as other databases such as Oracle.\nThere are no 'Input', 'Output', or 'Input/Output' parameters.  In PgSQL,\nthis method is used to call PostgreSQL functions, which only return a\nresult set (or nothing).</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\"><p class=\"first\">Beginning with PostgreSQL 7.2, it is possible to return a\nreference to a cursor from PL/pgSQL.  PgSQL will create a new\nCursor object for the referenced cursor that is returned.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">When using the execute method, you should only use '%s' [or '%(name)s']\n(without the quote marks) to specify locations where the parameters are to\nbe substituted, even for integers, floats and other non-string variables.\nThe execute method will convert all the parameters to a string, applying any\nquoting that may be necessary before sending the query to the back-end.</p>\n</li>\n<li><p class=\"first\">The fetchone method will return a PgResultSet object instead of a sequence.\nA PgResultSet emulates a Python List object (for DB-API 2.0 compliance),\nbut also acts as a dictionary and allows the column data to be retrieved by\nusing the column name as an attribute of the PgResultSet object. The column\nnames are case-insensitive.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\"><p class=\"first\">This feature is controlled by the fetchReturnsList attribute of\nthe PgSQL module.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">The fetchmany and fetchall methods return a sequence of PgResultSet objects\ninstead of a sequence of sequences.</p>\n<table class=\"field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><td class=\"field-name\">NOTE:&nbsp;</td><td class=\"field-body\"><p class=\"first\">This feature is controlled by the fetchReturnsList attribute of\nthe PgSQL module.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p class=\"first\">A PostgreSQL specific attribute, named oidValue, was added to the cursor\nobject.  This attribute returns the value of the oidValue attribute of the\nPgResult object associated with the cursor object and provides a convenient\nway to get the object ID of a newly inserted record.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"general-notes-and-observations\" name=\"general-notes-and-observations\">\n<h2>3.0 General Notes and Observations</h2>\n<p>The PostgreSQL database system has no auto-commit setting.  It is always in\nauto-commit mode unless a transaction is started.  To achieve the DB-API 2.0\nmandated behaviour, when connection.autocommit is 0, a transaction is\nstarted when the first cursor is created for a connection.  After a commit\nor rollback, a new transaction is created on the next call to execute().</p>\n<hr />\n<p>PostgreSQL arrays are no longer (directly) represented by Python lists.\nThis means that lists and tuples are not longer treated specially by\nCursor.execute().  This resolves a problem of using the IN SQL syntax with\nCursor.execute().  For example, the following statement will now work:</p>\n<blockquote>\n<pre class=\"doctest-block\">&gt;&gt;&gt; Cursor.execute('select * from table where column1 in %s', ((1, 3, 4),))</pre>\n</blockquote>\n<p>It will generate the following SQL statement:</p>\n<blockquote>\nselect * from table where column1 in (1, 3, 4)</blockquote>\n<p>It also means that to insert an PostgreSQL array, you must pass a PgArray\ninstance to Cursor.execute().  For example, if you have a list that you want\nto insert into a table as a PostgreSQL array, you would use:</p>\n<blockquote>\n<pre class=\"doctest-block\">&gt;&gt;&gt; cursor.execute('insert in sometable values (%s)', PgArray(yourlist))</pre>\n</blockquote>\n<p>You can also build a PostgreSQL array by creating an empty PgArray instance\nand populating it using the various list methods (.append(), .insert(), etc.).</p>\n<hr />\n<p>When working with PostgreSQL large object, you MUST be in a transaction.\nThe code will try to ensure that a transaction is active while working with\nlarge object (i.e. lo_open will start a transaction if necessary.  lo_close\nwill end the transaction if it determines that lo_open started one.)</p>\n<hr />\n<p>Beginning with PostgreSQL 7.2, you can now create a cursor in PL/pgSQL and \nreturn a reference to that cursor.  PgSQL will transform the reference to\nthe created cursor into a Cursor object that can be used to fetch the\nresults of the cursor.  For example (assuming that mmYearInfo returns a\nreference cursor):</p>\n<blockquote>\n<pre class=\"doctest-block\">&gt;&gt;&gt; from pyPgSQL import PgSQL\n&gt;&gt;&gt; cx = PgSQL.connect(database='esi')\n&gt;&gt;&gt; cu = cx.cursor()\n&gt;&gt;&gt; cu.callproc('mmYearInfo')\n&gt;&gt;&gt; rs = cu.fetchone()\n&gt;&gt;&gt; rs\n[&lt;pyPgSQL.PgSQL.Cursor instance at 0x818495c&gt;]\n&gt;&gt;&gt; c = rs[0]\n&gt;&gt;&gt; for i in c.description:\n...     print i\n... \n['model_year', varchar, 4, 8, None, None, None, 0]\n['mktg_div_name', varchar, 50, 54, None, None, None, 0]\n['model_desc', varchar, 50, 54, None, None, None, 0]\n['book_types', varchar, 50, 54, None, None, None, 0]\n['vehicle_syskey', integer, 4, 4, None, None, None, 0]\n&gt;&gt;&gt; r = c.fetchone()\n&gt;&gt;&gt; r\n['2003', 'Buick', 'Century', '1;8;9', 2211]\n&gt;&gt;&gt; </pre>\n</blockquote>\n</div>\n</div>\n</div>\n</body>\n</html>\n", "id": 36542.0}