{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Point 2 Kernel DefinitionAn object of the class Point 2 Kernel is a point in the two dimensional Euclidean plane 2 Remember that Kernel RT and Kernel FT denote a RingNumberType and a FieldNumberType respectively For the kernel model Cartesian T the two types are the same For the kernel model Homogeneous T Kernel RT is equal to T and Kernel FT is equal to Quotient T Types Point 2 Kernel Cartesian const iterator An iterator for enumerating the Cartesian coordinates of a point Creation Point 2 Kernel p Origin ORIGIN introduces a variable p with Cartesian coordinates Point 2 Kernel p Kernel RT hx Kernel RT hy Kernel RT hw RT 1 introduces a point p initialized to hx hw hy hw Precondition hw Kernel RT Operations bool p operator q Test for equality Two points are equal iff their x and y coordinates are equal The point can be compared with ORIGIN bool p operator q Test for inequality The point can be compared with ORIGIN There are two sets of coordinate access functions namely to the homogeneous and to the Cartesian coordinates They can be used independently from the chosen kernel model Kernel RT p hx returns the homogeneous x coordinate Kernel RT p hy returns the homogeneous y coordinate Kernel RT p hw returns the homogenizing coordinate Note that you do not loose information with the homogeneous representation because the FieldNumberType is a quotient Kernel FT p x returns the Cartesian x coordinate that is hx hw Kernel FT p y returns the Cartesian y coordinate that is hy hw The following operations are for convenience and for compatibility with higher dimensional points Again they come in a Cartesian and in a homogeneous flavor Kernel RT p homogeneous int i returns the i th homogeneous coordinate of p starting with Precondition i 2 Kernel FT p cartesian int i returns the i th Cartesian coordinate of p starting with Precondition i 1 Kernel FT p operator int i returns cartesian i Precondition i 1 Cartesian const iterator p cartesian begin returns an iterator to the Cartesian coordinates of p starting with the th coordinate Cartesian const iterator p cartesian end returns an off the end iterator to the Cartesian coordinates of p int p dimension returns the dimension the constant 2 Bbox 2 p bbox returns a bounding box containing p Note that bounding boxes are not parameterized with whatsoever Point 2 Kernel p transform Aff transformation 2 Kernel t returns the point obtained by applying t on p Operators The following operations can be applied on points bool operator p q returns true iff p is lexicographically smaller than q i e either if p x q x or if p x q x and p y q y bool operator p q returns true iff p is lexicographically greater than q bool operator p q returns true iff p is lexicographically smaller or equal to q bool operator p q returns true iff p is lexicographically greater or equal to q Vector 2 Kernel operator p q returns the difference vector between q and p You can substitute ORIGIN for either p or q but not for both Point 2 Kernel operator p Vector 2 Kernel v returns the point obtained by translating p by the vector v Point 2 Kernel operator p Vector 2 Kernel v returns the point obtained by translating p by the vector v Example The following declaration creates two points with Cartesian double coordinates Point 2 Cartesian double p q 1 2 The variable p is uninitialized and should first be used on the left hand side of an assignment p q std cout p x p y std endl See AlsoKernel Point 2 Next Ray 2 Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Point_2.html", "title": "point_2&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Point_2.tex' -->\n<html> <head>  \n<title>Point_2&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_51\"></A>\n\n<A NAME=\"Cross_link_anchor_52\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_47\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Point_2<Kernel>\"></A>\n<h2><I>CGAL::Point_2&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object of the class <I><A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> is a point in the two-dimensional\nEuclidean plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH>.\n<P>\n\nRemember that <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT</I> and <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT</I> denote a\n<A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A> and a <A HREF=\"Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A>, respectively. For the kernel\nmodel <I><A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;T&gt;</I>, the two types are the same. For the\nkernel model <I><A HREF=\"Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A>&lt;T&gt;</I>, <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT</I> is equal\nto <I>T</I>, and <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT</I> is equal to\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1404\">Quotient</A>&lt;T&gt;</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::Cartesian_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    An iterator for enumerating the\n      \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n coordinates of a point.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p (  <A HREF=\"Class_Origin.html#Cross_link_anchor_139\">Origin</A> <A HREF=\"Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>p</I> with \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n coordinates\n              <MATH><I>(0,0)</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p (  <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hx,  <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hy,  <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT hw = RT(1));\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a point <I>p</I> initialized to <MATH><I>(hx/hw,hy/hw)</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>hw</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC=\"cc_neq.gif\"> </I></MATH> <I><A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT(0)</I>\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator==6const_Point_26Kernel9__q9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.operator== (  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for equality. Two points are equal, iff their <MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> \n        coordinates are equal. The point can be compared with\n                <I><A HREF=\"Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator!=6const_Point_26Kernel9__q9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.operator!= (  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for inequality. The point can be compared with <I><A HREF=\"Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThere are two sets of coordinate access functions, namely to the\nhomogeneous and to the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n coordinates. They can be used\nindependently from the chosen kernel model.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_hx69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.hx ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the homogeneous <MATH><I>x</I></MATH> coordinate.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_hy69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.hy ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the homogeneous <MATH><I>y</I></MATH> coordinate.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_hw69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.hw ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the homogenizing  coordinate.\n        </TD></TR>\n        </TABLE>\n<P>\n\nNote that you do not loose information with the homogeneous\nrepresentation, because the <A HREF=\"Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A> is a quotient.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_x69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.x ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n <MATH><I>x</I></MATH> coordinate, that is <MATH><I>hx/hw</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_y69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.y ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n <MATH><I>y</I></MATH> coordinate, that is <MATH><I>hy/hw</I></MATH>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe following operations are for convenience and for compatibility\nwith higher dimensional points. Again they come in a\n\n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n and in a homogeneous flavor.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_homogeneous6int_i9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.homogeneous ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the i'th homogeneous coordinate of <I>p</I>, starting with 0.<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 2</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_cartesian6int_i9_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.cartesian ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the i'th \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n coordinate of <I>p</I>, starting with 0.<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 1</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT<A NAME=\"Function_Kernel::FT_operator696int_i9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.operator[] ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>cartesian(i)</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0 <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 1</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Cartesian_const_iterator_cartesian_begin69_const;\"></A>\nCartesian_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.cartesian_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator to the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n coordinates \n        of <I>p</I>, starting with the 0th coordinate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Cartesian_const_iterator_cartesian_end69_const;\"></A>\nCartesian_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.cartesian_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an off the end iterator to the \n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n \n        coordinates of <I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension (the constant 2).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bbox_2_bbox69_const;\"></A>\n<A HREF=\"Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    p.bbox ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a bounding box containing <I>p</I>. Note that bounding boxes\n        are not parameterized with whatsoever.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_transform6const_Aff_transformation_26Kernel9__t9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    p.transform (  <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point obtained by applying <MATH><I>t</I></MATH> on <I>p</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operators</H3>\n<P>\n\nThe following operations can be applied on points:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator66const_Point_26Kernel9__p+_const_Point_26Kernel9__q9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator&lt; (  p,  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff <I>p</I> is lexicographically smaller than <I>q</I>,\n       i.e. either if <I>p.x() &lt; q.x()</I> or if <I>p.x() == q.x()</I> and\n       <I>p.y() &lt; q.y()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator96const_Point_26Kernel9__p+_const_Point_26Kernel9__q9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator&gt; (  p,  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff <I>p</I> is lexicographically greater than <I>q</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator6=6const_Point_26Kernel9__p+_const_Point_26Kernel9__q9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator&lt;= (  p,  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff <I>p</I> is lexicographically smaller or equal to <I>q</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator9=6const_Point_26Kernel9__p+_const_Point_26Kernel9__q9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator&gt;= (  p,  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff <I>p</I> is lexicographically greater or equal to <I>q</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Vector_26Kernel9_operator-6const_Point_26Kernel9__p+_const_Point_26Kernel9__q9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator- (  p,  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the difference vector between <I>q</I> and <I>p</I>. \n        You can substitute <I><A HREF=\"Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I> for either <I>p</I> or <I>q</I>,\n        but not for both.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Point_26Kernel9_operator+6const_Point_26Kernel9__p+_const_Vector_26Kernel9__v9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator+ (  p,  <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point obtained by translating <I>p</I> by the \n        vector <I>v</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Point_26Kernel9_operator-6const_Point_26Kernel9__p+_const_Vector_26Kernel9__v9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    operator- (  p,  <A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point obtained by translating <I>p</I> by the \n        vector -<I>v</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following declaration creates two points with\n\n<!-- REMOVE_LINKS_BEGIN -->\nCartesian\n<!-- REMOVE_LINKS_END -->\n double coordinates.\n<P>\n\n<PRE>\n\n  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt; <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt; p, q(1.0, 2.0);\n</PRE>\n<P>\n\nThe variable <TT>p</TT> is uninitialized and should first be used on \nthe left hand side of an assignment. \n<PRE>\n\n  p = q;\n\n  std::cout &lt;&lt; p.x() &lt;&lt; &quot;  &quot; &lt;&lt; p.y() &lt;&lt; std::endl; \n</PRE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Ray_2.html\"><I>Ray_2&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39379.0}