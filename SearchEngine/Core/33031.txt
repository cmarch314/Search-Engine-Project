{"text": "View Javadoc 1 package swirl workspace security 2 3 import java lang reflect InvocationHandler 4 import java lang reflect Method 5 import java lang reflect Proxy 6 import java util Arrays 7 import java util HashMap 8 9 import org apache commons logging Log 1 import org apache commons logging LogFactory 11 12 13 author bpillet 14 15 public class ReflectionInvocationHandler implements InvocationHandler 16 17 18 the logger for this class 19 private Log log LogFactory getLog this getClass 2 private Object delegate 21 private HashMap cache new HashMap 22 23 public ReflectionInvocationHandler Object del 24 25 if log isDebugEnabled 26 log debug del 27 28 delegate del 29 Method methods del getClass getMethods 3 31 for int i i methods length i 32 33 if log isDebugEnabled 34 35 log debug i methods i 36 37 38 39 4 public Object invoke Object proxy Method method Object args 41 throws Throwable 42 if log isDebugEnabled 43 log debug invoke method args 44 45 Method delegateMethod Method cache get method 46 if delegateMethod null 47 48 Method methods delegate getClass getMethods 49 5 for int i i methods length delegateMethod null i 51 52 if log isDebugEnabled 53 54 log debug trying methods i 55 56 if method getName equals methods i getName 57 Arrays equals method getParameterTypes methods i getParameterTypes 58 59 log debug found method 6 delegateMethod methods i 61 62 63 cache put method delegateMethod 64 65 if delegateMethod null 66 return delegateMethod invoke delegate args 67 else 68 69 log info Could not find delegateMethod 7 return null 71 72 73 74 public static Object wrap Class clazz Object delegate 75 76 InvocationHandler invoker new ReflectionInvocationHandler delegate 77 Object wrapped Proxy newProxyInstance clazz getClassLoader 78 new Class clazz invoker 79 return wrapped 8 81 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/security/ReflectionInvocationHandler.html", "title": "reflectioninvocationhandler xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>ReflectionInvocationHandler xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../apidocs/swirl/workspace/security/ReflectionInvocationHandler.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../../swirl/workspace/security/package-summary.html\">swirl.workspace.security</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.lang.reflect.InvocationHandler;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.lang.reflect.Method;\n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> java.lang.reflect.Proxy;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.util.Arrays;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.util.HashMap;\n<a name=\"8\" href=\"#8\">8</a>   \n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"11\" href=\"#11\">11</a>  \n<a name=\"12\" href=\"#12\">12</a>  <em>/**<em>*</em></em>\n<a name=\"13\" href=\"#13\">13</a>  <em> * @author bpillet</em>\n<a name=\"14\" href=\"#14\">14</a>  <em> */</em>\n<a name=\"15\" href=\"#15\">15</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../swirl/workspace/security/ReflectionInvocationHandler.html\">ReflectionInvocationHandler</a> implements InvocationHandler\n<a name=\"16\" href=\"#16\">16</a>  {\n<a name=\"17\" href=\"#17\">17</a>  \n<a name=\"18\" href=\"#18\">18</a>      <em>/**<em>* the logger for this class */</em></em>\n<a name=\"19\" href=\"#19\">19</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"20\" href=\"#20\">20</a>      <strong>private</strong> Object delegate;\n<a name=\"21\" href=\"#21\">21</a>      <strong>private</strong> HashMap cache = <strong>new</strong> HashMap();\n<a name=\"22\" href=\"#22\">22</a>  \n<a name=\"23\" href=\"#23\">23</a>  \t<strong>public</strong> <a href=\"../../../swirl/workspace/security/ReflectionInvocationHandler.html\">ReflectionInvocationHandler</a>(Object del)\n<a name=\"24\" href=\"#24\">24</a>  \t{\n<a name=\"25\" href=\"#25\">25</a>  \t\t<strong>if</strong>(log.isDebugEnabled()) {\n<a name=\"26\" href=\"#26\">26</a>  \t\t\tlog.debug(<span class=\"string\">\"(\"</span> + del + <span class=\"string\">\")\"</span>);\n<a name=\"27\" href=\"#27\">27</a>  \t\t}\n<a name=\"28\" href=\"#28\">28</a>  \t\tdelegate = del;\n<a name=\"29\" href=\"#29\">29</a>          Method[] methods = del.getClass().getMethods();\n<a name=\"30\" href=\"#30\">30</a>  \n<a name=\"31\" href=\"#31\">31</a>          <strong>for</strong>(<strong>int</strong> i = 0; i &lt; methods.length; ++i)\n<a name=\"32\" href=\"#32\">32</a>          {\n<a name=\"33\" href=\"#33\">33</a>              <strong>if</strong>(log.isDebugEnabled())\n<a name=\"34\" href=\"#34\">34</a>              {\n<a name=\"35\" href=\"#35\">35</a>                  log.debug(<span class=\"string\">\"i: \"</span> + methods[i]);\n<a name=\"36\" href=\"#36\">36</a>              }\n<a name=\"37\" href=\"#37\">37</a>          }\n<a name=\"38\" href=\"#38\">38</a>  \t}\n<a name=\"39\" href=\"#39\">39</a>  \n<a name=\"40\" href=\"#40\">40</a>  \t<strong>public</strong> Object invoke(Object proxy, Method method, Object[] args)\n<a name=\"41\" href=\"#41\">41</a>  \t\t\tthrows Throwable {\n<a name=\"42\" href=\"#42\">42</a>  \t\t<strong>if</strong>(log.isDebugEnabled()) {\n<a name=\"43\" href=\"#43\">43</a>  \t\t\tlog.debug(<span class=\"string\">\"invoke(\"</span> + method + <span class=\"string\">\", \"</span> + args + <span class=\"string\">\")\"</span>);\n<a name=\"44\" href=\"#44\">44</a>  \t\t}\n<a name=\"45\" href=\"#45\">45</a>  \t\tMethod delegateMethod = (Method)cache.get(method);\n<a name=\"46\" href=\"#46\">46</a>  \t\t<strong>if</strong>(delegateMethod == <strong>null</strong>)\n<a name=\"47\" href=\"#47\">47</a>  \t\t{\n<a name=\"48\" href=\"#48\">48</a>  \t\t\tMethod[] methods = delegate.getClass().getMethods();\n<a name=\"49\" href=\"#49\">49</a>  \t\n<a name=\"50\" href=\"#50\">50</a>  \t        <strong>for</strong>(<strong>int</strong> i = 0; i &lt; methods.length &amp;&amp; delegateMethod == <strong>null</strong>; ++i)\n<a name=\"51\" href=\"#51\">51</a>  \t        {\n<a name=\"52\" href=\"#52\">52</a>  \t            <strong>if</strong>(log.isDebugEnabled())\n<a name=\"53\" href=\"#53\">53</a>  \t            {\n<a name=\"54\" href=\"#54\">54</a>  \t                log.debug(<span class=\"string\">\"trying: \"</span> + methods[i]);\n<a name=\"55\" href=\"#55\">55</a>  \t            }\n<a name=\"56\" href=\"#56\">56</a>  \t            <strong>if</strong>(method.getName().equals(methods[i].getName()) &amp;&amp;\n<a name=\"57\" href=\"#57\">57</a>  \t               Arrays.equals(method.getParameterTypes(), methods[i].getParameterTypes()))\n<a name=\"58\" href=\"#58\">58</a>  \t            {\n<a name=\"59\" href=\"#59\">59</a>  \t            \tlog.debug(<span class=\"string\">\"found method\"</span>);\n<a name=\"60\" href=\"#60\">60</a>  \t            \tdelegateMethod = methods[i];\n<a name=\"61\" href=\"#61\">61</a>  \t            }\n<a name=\"62\" href=\"#62\">62</a>  \t        }\n<a name=\"63\" href=\"#63\">63</a>  \t        cache.put(method, delegateMethod);\n<a name=\"64\" href=\"#64\">64</a>  \t\t}\n<a name=\"65\" href=\"#65\">65</a>  \t\t<strong>if</strong>(delegateMethod != <strong>null</strong>)\n<a name=\"66\" href=\"#66\">66</a>  \t\t\t<strong>return</strong> delegateMethod.invoke(delegate, args);\n<a name=\"67\" href=\"#67\">67</a>  \t\t<strong>else</strong>\n<a name=\"68\" href=\"#68\">68</a>  \t\t{\n<a name=\"69\" href=\"#69\">69</a>  \t\t\tlog.info(<span class=\"string\">\"Could not find delegateMethod\"</span>);\n<a name=\"70\" href=\"#70\">70</a>  \t\t\t<strong>return</strong> <strong>null</strong>;\n<a name=\"71\" href=\"#71\">71</a>  \t\t}\n<a name=\"72\" href=\"#72\">72</a>  \t}\n<a name=\"73\" href=\"#73\">73</a>  \n<a name=\"74\" href=\"#74\">74</a>  \t<strong>public</strong> <strong>static</strong> Object wrap(Class clazz, Object delegate)\n<a name=\"75\" href=\"#75\">75</a>  \t{\n<a name=\"76\" href=\"#76\">76</a>  \t\tInvocationHandler invoker = <strong>new</strong> <a href=\"../../../swirl/workspace/security/ReflectionInvocationHandler.html\">ReflectionInvocationHandler</a>(delegate);\n<a name=\"77\" href=\"#77\">77</a>          Object wrapped = Proxy.newProxyInstance(clazz.getClassLoader(),\n<a name=\"78\" href=\"#78\">78</a>                  <strong>new</strong> Class[] { clazz }, invoker);\n<a name=\"79\" href=\"#79\">79</a>          <strong>return</strong> wrapped;\n<a name=\"80\" href=\"#80\">80</a>  \t}\n<a name=\"81\" href=\"#81\">81</a>  }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 33031.0}