{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Unique hash map Key Data UniqueHashFunction Definition An instance map of the parameterized data type Unique hash map Key Data UniqueHashFunction is an injective mapping from the set of keys of type Key to the set of variables of type Data New keys can be inserted at any time however keys cannot be individually deleted An object hash of the type UniqueHashFunction returns a unique integer index hash key of type std size t for all objects key stored in map The template parameter has as default the Handle hash function that hashes all types of pointers handles iterators and circulators All variables are initialized to default data a value of type Data specified in the definition of map include CGAL Unique hash map h Types Unique hash map Key Data UniqueHashFunction Key the Key type Unique hash map Key Data UniqueHashFunction Data the Data type Unique hash map Key Data UniqueHashFunction Hash function the unique hash function type In compliance with STL the types key type data type and hasher are defined as well Creation Unique hash map Key Data UniqueHashFunction map Data default Data std size t table size 1 Hash function fct Hash function creates an injective function map from Key to the set of unused variables of type Data sets default data to default passes the table size as argument to the internal implementation and initializes the hash function with fct Unique hash map Key Data UniqueHashFunction map Key first1 Key beyond1 Data first2 Data default Data std size t table size 1 Hash function fct Hash function creates an injective function map from Key to the set of unused variables of type Data sets default data to default passes the table size as argument to the internal implementation initializes the hash function with fct and inserts all keys from the range first1 beyond1 The data variable for each inserted key is initialized with the corresponding value from the range first2 first2 beyond1 first1 Precondition The increment operator must be defined for values of type Key and for values of type Data beyond1 must be reachable from first1 using increments Operations Data map default value the current default value Hash function map hash function the current hash function bool map is defined Key key returns true if key is defined in map Note that there can be keys defined that have not been inserted explicitly Their variables are initialized to default value void map clear resets map to the injective function map from Key to the set of unused variables of type Data The default data remains unchanged void map clear Data default resets map to the injective function map from Key to the set of unused variables of type Data and sets default data to default Data map operator const Key key returns a reference to the variable map key If key has not been inserted into map before key is inserted and initialized with default value const Data map operator const Key key const returns a const reference to the variable map key If key has not been inserted into map before a const reference to the default value is returned However key is not inserted into map Data map insert Key first1 Key beyond1 Data first2 inserts all keys from the range first1 beyond1 The data variable for each inserted key is initilized with the corresponding value from the range first2 first2 beyond1 first1 Returns first2 beyond1 first1 Precondition The increment operator must be defined for values of type Key and for values of type Data beyond1 must be reachable from first1 using increments See Also UniqueHashFunction CGAL Handle hash function Implementation Unique hash map is implemented via a chained hashing scheme Access operations map i take expected time O 1 The table size parameter passed to chained hashing can be used to avoid unnecessary rehashing when set to the number of expected elements in the map The design is derived from the STL hash map and the LEDA type map Its specialization on insertion only and unique hash values allow for a more time and space efficient implementation see also MN Chapter 5 This implementation makes also use of sentinels that lead to defined keys that have not been inserted Next UniqueHashFunction Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Hash_map_ref/Class_Unique_hash_map.html", "title": "unique_hash_map&lt;key,data,uniquehashfunction&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Hash_map_ref/Unique_hash_map.tex' -->\n<html> <head>  \n<title>Unique_hash_map&lt;Key,Data,UniqueHashFunction&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"../Miscellany_ref/Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1723\"></A>\n\n<A NAME=\"Cross_link_anchor_1724\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1571\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Unique_hash_map<Key,Data,UniqueHashFunction>\"></A>\n<h2><I>CGAL::Unique_hash_map&lt;Key,Data,UniqueHashFunction&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <I>map</I> of the parameterized data type <I><A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt;</I> is an\ninjective mapping from the set of keys of type <I>Key</I> to the set of\nvariables of type <I>Data</I>. New keys can be inserted at any time,\nhowever keys cannot be individually deleted.\n<P>\n\nAn object <I>hash</I> of the type <I><A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A></I> returns a\nunique integer index <I>hash(key)</I> of type <I>std::size_t</I> for all\nobjects <MATH><I>key</I></MATH> stored in <I>map</I>. The template parameter has as default\nthe <I><A HREF=\"Class_Handle_hash_function.html#Cross_link_anchor_1712\">Handle_hash_function</A></I> that hashes all types of pointers, handles,\niterators, and circulators.\n<P>\n\nAll variables are initialized to <I>default_data</I>, a value\nof type <I>Data</I> specified in the definition of <I>map</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Unique_hash_map.h\">CGAL/Unique_hash_map.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt;::Key\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the <I>Key</I> type.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt;::Data\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the <I>Data</I> type.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt;::Hash_function\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the unique hash function type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nIn compliance with STL, the types <I>key_type</I>, <I>data_type</I>, and\n<I>hasher</I> are defined as well.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt; map ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Data default = Data(),<BR>\n\nstd::size_t table_size = 1,<BR>\n\nHash_function fct = Hash_function());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an injective function <I>map</I> from <I>Key</I> to the set of unused\n    variables of type <I>Data</I>, sets <I>default_data</I> to <I>default</I>,\n    passes the <I>table_size</I> as argument to the internal implementation,\n    and initializes the hash function with <I>fct</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A>&lt;Key,Data,<A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A>&gt; map ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Key first1,<BR>\n\nKey beyond1,<BR>\n\nData first2,<BR>\n\nData default = Data(),<BR>\n\nstd::size_t table_size = 1,<BR>\n\nHash_function fct = Hash_function());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an injective function <I>map</I> from <I>Key</I> to the set of unused\n    variables of type <I>Data</I>, sets <I>default_data</I> to <I>default</I>,\n    passes the <I>table_size</I> as argument to the internal implementation,\n    initializes the hash function with <I>fct</I>, and inserts all keys \n    from the range <I>[first1,beyond1)</I>. The data variable for each\n    inserted <I>key</I> is initialized with the corresponding value from\n    the range <I>[first2, first2 + (beyond1-first1))</I>.<BR>\n\n<EM>Precondition: </EM> The increment operator must be defined for values\n        of type <I>Key</I> and for values of type <I>Data</I>. <I>beyond1</I>\n        must be reachable from <I>first1</I> using increments.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Data_default_value69_const;\"></A>\nData\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.default_value ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the current <I>default_value</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Hash_function_hash_function69_const;\"></A>\nHash_function\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.hash_function ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the current hash function.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_defined6_const_Key__key9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.is_defined (  Key key)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <MATH><I>key</I></MATH> is\n    defined in <I>map</I>. Note that there can be keys defined that have not\n    been inserted explicitly. Their variables are initialized to\n    <I>default_value</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    map.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    resets <I>map</I> to the injective function <I>map</I> from <I>Key</I> to the\n    set of unused variables of type <I>Data</I>. The <I>default_data</I>\n    remains unchanged.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear6const_Data__default9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.clear (  Data default)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    resets <I>map</I> to the injective function <I>map</I> from <I>Key</I> to the\n    set of unused variables of type <I>Data</I> and sets <I>default_data</I> \n    to <I>default</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Data&amp;<A NAME=\"Function_Data__operator696const_Key__key9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.operator[] ( const Key&amp; key) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a reference to the variable <I>map</I><I>(key)</I>. If <I>key</I>\n    has not been inserted into <I>map</I> before, <I>key</I> is inserted and\n    initialized with <I>default_value</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    const Data&amp;<A NAME=\"Function_const_Data__operator696const_Key__key9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.operator[] ( const Key&amp; key) const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a const reference to the variable <I>map</I><I>(key)</I>. If <I>key</I>\n    has not been inserted into <I>map</I> before, a const reference to the\n    <I>default_value</I> is returned. However, <I>key</I> is not inserted \n    into <I>map</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Data_insert6_Key_first1+_Key_beyond1+_Data_first29;\"></A>\nData\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    map.insert ( Key first1,  Key beyond1,  Data first2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts all keys from the range <I>[first1,beyond1)</I>. \n    The data variable for each inserted <I>key</I> is initilized with the\n    corresponding value from the range <I>[first2, first2 +     (beyond1-first1))</I>. Returns <I>first2 + (beyond1-first1)</I>.<BR>\n\n<EM>Precondition: </EM> The increment operator must be defined for values\n        of type <I>Key</I> and for values of type <I>Data</I>. <I>beyond1</I>\n        must be reachable from <I>first1</I> using increments.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Concept_UniqueHashFunction.html#Cross_link_anchor_1725\">UniqueHashFunction</A></I><BR>\n\n<I><A HREF=\"Class_Handle_hash_function.html#Cross_link_anchor_1711\">CGAL::Handle_hash_function</A></I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\n<I><A HREF=\"Class_Unique_hash_map.html#Cross_link_anchor_1724\">Unique_hash_map</A></I> is implemented via a chained hashing scheme. Access\noperations <I>map</I><I>[i]</I> take expected time <MATH><I>O(1)</I></MATH>. The <I>table_size</I>\nparameter passed to chained hashing can be used to avoid unnecessary \nrehashing when set to the number of expected elements in the map.\nThe design is derived from the STL <I>hash_map</I> and the L<SMALL>EDA</SMALL> type\n<I>map</I>. Its specialization on insertion only and unique hash values \nallow for a more time- and space-efficient implementation, see also\n[<A HREF=\"../biblio.html#Biblio_mn-lpcgc-00\">MN00</A>, Chapter 5]. This implementation makes also use\nof sentinels that lead to defined keys that have not been inserted.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_UniqueHashFunction.html\"><I>UniqueHashFunction</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_9!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 40102.0}