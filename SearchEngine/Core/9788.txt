{"text": "CompSci 161 Fall 2 14 Homework 2 Due Sunday October 19 Suppose that we have a list of five items a b c d e that is already in sorted order and we wish to insert a sixth item f somewhere into the list so that after the insertion the list remains sorted Draw a decision tree that solves this problem using at most three comparisons in the worst case You may assume that no two items have the same key Use drawing software to show the tree do not draw it by hand Prove that every decision tree that solves this problem uses at least three comparisons in the worst case Hint how many leaves must the decision tree have Suppose we are given as input an unsorted list of n items some of which may have the same key Describe an O n log n time algorithm for finding the key that occurs the most times and the number of times that key occurs You may express your answer either as English text or as pseudocode You may use any of the O n log n time sorting algorithms described in class as a subroutine if you do so just name the algorithm don t describe how it works Consider merge sort on a list of eight items What is the best case number of comparisons for this input What is the worst case number of comparisons for this input GT R 4 1 Suppose that we modify quicksort so that it selects its pivot element to be the element in the middle of the subarray it is sorting rather than selecting a random element More precisely if the subarray has n elements indexed from i to i n 1 we choose the pivot to be the element at index i lfloor n 2 rfloor What is the running time of this version of quicksort on a sequence that is already sorted ", "_id": "http://www.ics.uci.edu/~eppstein/161/f14-hw2.html", "title": "compsci 161, fall 2014, homework 2", "html": "<html>\n<head>\n<title>CompSci 161, Fall 2014, Homework 2</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 161, Fall 2014, Homework 2</h1>\n\n<h2>Due Sunday, October 19</h2>\n\n<ol>\n<li><p>Suppose that we have a list of five items $[a,b,c,d,e]$ that is already in sorted order, and we wish to insert a sixth item $f$ somewhere into the list, so that after the insertion the list remains sorted.</p>\n<ol type=\"a\">\n<li><p>Draw a decision tree that solves this problem, using at most three comparisons in the worst case. (You may assume that no two items have the same key. Use drawing software to show the tree &ndash; do not draw it by hand.)</p></li>\n<li><p>Prove that every decision tree that solves this problem uses at least three comparisons in the worst case. (Hint: how many leaves must the decision tree have?)</p></li>\n</ol>\n<li><p>Suppose we are given as input an unsorted list of $n$ items, some of which may have the same key. Describe an $O(n\\log n)$ time algorithm for finding the key that occurs the most times, and the number of times that key occurs.</p>\n<p>(You may express your answer either as English text or as pseudocode. You may use any of the $O(n\\log n)$ time sorting algorithms described in class as a subroutine; if you do so, just name the algorithm, don't describe how it works.)</p></li>\n<li><p>Consider merge sort on a list of eight items.</p></li>\n<ol type=\"a\">\n<li><p>What is the best-case number of comparisons for this input?</p></li>\n<li><p>What is the worst-case number of comparisons for this input?</p></li>\n</ol>\n<li><p>[GT R-4.10] Suppose that we modify quicksort so that it selects its pivot element to be the element in the middle of the subarray it is sorting, rather than selecting a random element. (More precisely, if the subarray has $n$ elements, indexed from $i$ to $i+n-1$, we choose the pivot to be the element at index $i+\\lfloor n/2\\rfloor$.) What is the running time of this version of quicksort on a sequence that is already sorted?</p></li>\n</ol>\n</body>\n</html>\n", "id": 9788.0}