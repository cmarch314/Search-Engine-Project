{"text": "OEChem C Theory Manual Version 1 3 1 Previous 8 1 Preparation Up 8 OEMols and OEGraphMols Next 8 3 Conformers 8 2 Multi conformer and single conformer molecules Up to this point in the manual all of the examples have involved using concrete OEMol molecules These molecules have been utilizing the functionality defined in the API of the OEMolBase abstract base class At this point we will introduce another layer of abstraction in OEChem s representation of molecules In OEChem we draw a distinction between molecules which are limited to a single conformer and those which may have any number of conformers While this may be an arbitrary decision it is a pragmatic one which allows more efficient implementation of both classes The single conformer molecule s API is that defined by the OEMolBase abstract base class of which you are already familiar The multi conformer molecule s API is defined by another abstract base class the OEMCMolBaseT here the MC stands for Multi Conformer and the T indicates that this class is a template The OEMCMolBaseT class inherits publicly from the OEMolBase thus the multi conformer molecule supports the single conformer API but adds additional functions to manage conformers Both the single conformer and the multi conformer molecules contain atoms and bonds but only the multi conformer molecule contains conformers as first class objects You are already familiar with the OEMol which you have learned is a concrete class which can support the OEMolBase API and can be passed to functions which take an OEMolBase as an argument In the following chapters you will discover that an OEMol provides the API of the OEMCMolBaseT class in addition to that of the OEMolBase Further an OEMol can be passed to any function which takes either and OEMolBase or an OEMCMolBaseT as an argument An OEGraphMol is an additional concrete class similar to the OEMol which provides access to only the OEMolBase API An OEGraphMol can be passed to any function which takes an OEMolBase argument but not to a function which takes an OEMCMolBaseT argument A OEGraphMol does not inherit from OEMolBase This is analogous to an OEMol not inheriting from an OEMCMolBaseT In both cases this is for efficiency Simplistic OEChem inheritance scheme OEBase OEMolBase OEGraphMol OEMCMolBaseT OEMol indicates inheritance indicates API correspondence without inheritance Now a programmer has two OEChem molecules to choose among the OEMol and the OEGraphMol As you have already learned an OEMol supplies the entire API supplied by the OEGraphMol so if there is any doubt which molecule to choose the OEMol is a safe choice However in instances when you are certain that the code you are writing will never need to manage molecules with multiple conformations it is safe and can be more efficient to use an OEGraphMol To this point our discussion of molecules has neglected to cover the API provided by the OEBase class This will be covered in subsequent chapters OEChem C Theory Manual Version 1 3 1 Previous 8 1 Preparation Up 8 OEMols and OEGraphMols Next 8 3 Conformers Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node104.html", "title": "8.2 multi-conformer and single-conformer molecules", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>8.2 Multi-conformer and single-conformer molecules</title>\n<META NAME=\"description\" CONTENT=\"8.2 Multi-conformer and single-conformer molecules\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node105.html\">\n<LINK REL=\"previous\" HREF=\"node103.html\">\n<LINK REL=\"up\" HREF=\"node102.html\">\n<LINK REL=\"next\" HREF=\"node105.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node103.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node102.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node105.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node103.html\">8.1 Preparation</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node102.html\">8. OEMols and OEGraphMols</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node105.html\">8.3 Conformers</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0011200000000000000000\">\n8.2 Multi-conformer and single-conformer molecules</A>\n</H1>\nUp to this point in the manual, all of the examples have involved using\nconcrete OEMol molecules.  These molecules have been utilizing the\nfunctionality defined in the API of the OEMolBase abstract base-class.  At\nthis point we will introduce another layer of abstraction in OEChem's\nrepresentation of molecules.  In OEChem, we draw a distinction between\nmolecules which are limited to a single conformer and those which may have\nany number of conformers.  While this may be an arbitrary decision, it is a\npragmatic one which allows more efficient implementation of both classes.\nThe single-conformer molecule's API is that defined by the OEMolBase abstract\nbase-class, of which you are already familiar.  The multi-conformer molecule's\nAPI is defined by another abstract base-class, the OEMCMolBaseT (here the MC\nstands for Multi-Conformer, and the T indicates that this class is a\ntemplate).  The OEMCMolBaseT class inherits publicly from the OEMolBase,\nthus the multi-conformer molecule supports the single-conformer API but adds\nadditional functions to manage conformers.  Both the single-conformer and\nthe multi-conformer molecules contain atoms and bonds, but only the\nmulti-conformer molecule contains conformers as first-class objects.\n\n<P>\nYou are already familiar with the OEMol, which you have learned is a\nconcrete class which can support the OEMolBase API and can be passed to\nfunctions which take an OEMolBase as an argument.  In the following\nchapters, you will discover that an OEMol provides the API of the\nOEMCMolBaseT class in addition to that of the OEMolBase.  Further, an\nOEMol can be passed to any function which takes <i>either</i> and OEMolBase\nor an OEMCMolBaseT as an argument.\n\n<P>\nAn OEGraphMol is an additional concrete class similar to the OEMol which\nprovides access to <i>only</i> the OEMolBase API.\nAn OEGraphMol can be passed to any function which takes an OEMolBase argument,\nbut not to a function which takes an OEMCMolBaseT argument.\nA OEGraphMol does not inherit from OEMolBase.  This is analogous to an\nOEMol not inheriting from an OEMCMolBaseT.  In both cases, this is for\nefficiency.\n\n<P>\n<dl><dd><pre class=\"verbatim\">Simplistic OEChem inheritance scheme:\n                OEBase\n                  |\n                  |\n                OEMolBase ---------------- OEGraphMol\n                  |\n                  |\n                OEMCMolBaseT ------------- OEMol\n&lt;- indicates inheritance\n-- indicates API correspondence without inheritance\n</pre></dl>\n\n<P>\nNow a programmer has two OEChem molecules to choose among, the OEMol and the\nOEGraphMol.  As you have already learned, an OEMol supplies the entire API\nsupplied by the OEGraphMol, so if there is any doubt which molecule to choose,\nthe OEMol is a safe choice.  However, in instances when you are certain that\nthe code you are writing will never need to manage molecules with multiple\nconformations, it is safe (and can be more efficient) to use an OEGraphMol.\n\n<P>\nTo this point, our discussion of molecules has neglected to cover the API\nprovided by the OEBase class.  This will be covered in subsequent chapters.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node103.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node102.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node105.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node103.html\">8.1 Preparation</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node102.html\">8. OEMols and OEGraphMols</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node105.html\">8.3 Conformers</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38574.0}