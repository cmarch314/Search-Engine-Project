{"text": "How to use Binary not Text I O on the PC You do not want the operating system to help you by automatically converting end of line indicators into standard end of line indicators End of line indicators vary by platform PlatformEnd of line indicator DescriptionASCIIchar decimalUnixlinefeed newline characterLF n1 Macintoshcarriage return characterCR r13Windowstwo character sequenceCR LF r n1 13 When in text mode on Windows if the operating system detects what would be a normal end of line indicator from a different system say Linux it will convert that indicator into the two character CR LF sequence Unfortunately when dealing with binary files this can result in an extra byte being inserted during input or output which could cause chaos Accordingly unless you are dealing with files for which you do not care if the end of line indicators are silently modified you will want to do I O in binary mode This is certainly true when the input is coming from a file However if input is coming from stdin and if stdin is coming from the console keyboard then it should not be opened in binary mode because that has the side effect of switching stdin into raw mode in which all characters are read one by one with no echo and Ctrl C and Ctrl Z are disabled so you cannot signal EOF An implementation using old C code is shown below FILE fp char filename if filename fp stdin ifdef WIN32 ifndef O BINARY define O BINARY endif if isatty fileno stdin setmode fileno stdin O BINARY endif else fp fopen filename rb if fp NULL fprintf stderr Cannot open file s n filename return Last modified May 22 2 14", "_id": "http://www.ics.uci.edu/~dan/class/165/notes/binaryio.html", "title": "\n", "html": "<HTML><HEAD>\n<TITLE>\n</TITLE>\n</HEAD><BODY>\n<span style=\"color:#000000; font:16px Arial, Helvetica, sans-serif;\">\n\n<H2>How to use Binary (not Text) I/O on the PC</H2>\n\nYou do not want the operating system to \"help\" you by automatically\nconverting end-of-line indicators into \"standard\" end-of-line indicators.\nEnd-of-line indicators vary by platform.\n\n<TABLE align=center border=1 cellspacing=0>\n<TR><TH>Platform</TH>\n    <TH colspan=4>End-of-line indicator</TH>\n<TR><TH>&nbsp;  </TH>\n    <TH>Description</TH>\n    <TH>ASCII</TH>\n    <TH>char  </TH>\n    <TH>decimal</TH>\n<TR><TD>Unix</TD>\n    <TD>linefeed (newline) character</TD>\n    <TD>LF</TD>\n    <TD>\\n</TD>\n    <TD>10</TD>\n<TR><TD>Macintosh</TD>\n    <TD>carriage return character</TD>\n    <TD>CR </TD>\n    <TD>\\r</TD>\n    <TD>13</TD>\n<TR><TD>Windows</TD>\n    <TD>two character sequence</TD>\n    <TD>CR LF</TD>\n    <TD>\\r\\n</TD>\n    <TD>10,13</TD>\n</TABLE>\n\nWhen in text mode on Windows, if the operating system detects what would\nbe a normal end-of-line indicator from a different system (say, Linux),\nit will convert that indicator into the two-character CR LF sequence.\nUnfortunately, when dealing with binary files, this can result in an\nextra byte being inserted (during input or output) which could cause\nchaos.  Accordingly, unless you are dealing with files for which you do\nnot care if the end-of-line indicators are silently modified, you will\nwant to do I/O in binary mode.\n<P>\nThis is certainly true when the input is coming from a file.\nHowever, if input is coming from stdin\nand if stdin is coming from the console keyboard\nthen it should not be opened in binary mode,\nbecause that has the side effect of switching stdin into raw mode\nin which all characters are read one by one with no echo,\nand Ctrl-C and Ctrl-Z are disabled so you cannot signal EOF.\n<P>\nAn implementation using old C code is shown below.\n\n<PRE>\n    FILE *fp;\n    char *filename;\n\n    if (filename == \"\") {\n        fp = stdin;\n#ifdef _WIN32\n#ifndef O_BINARY\n#define O_BINARY 0\n#endif\n\tif (isatty( fileno(stdin) ) == 0)\n\t\tsetmode(fileno(stdin), O_BINARY);\n#endif\n    }\n    else\n        fp = fopen( filename, \"rb\");\n    if (fp == NULL) {\n        fprintf(stderr,\"Cannot open file %s\\n\", filename);\n        return(0);\n    }\n</PRE>\n\n<P>\n</span>\n<HR>\n\nLast modified: May 22, 2014\n</BODY>\n", "id": 9940.0}