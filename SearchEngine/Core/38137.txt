{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Convex hull d R Definition An instance C of type Convex hull d R is the convex hull of a multi set S of points in d dimensional space We call S the underlying point set and d or dim the dimension of the underlying space We use dcur to denote the affine dimension of S The data type supports incremental construction of hulls The closure of the hull is maintained as a simplicial complex i e as a collection of simplices The intersection of any two is a face of both1 In the sequel we reserve the word simplex for the simplices of dimension dcur For each simplex there is a handle of type Simplex handlex and for each vertex there is a handle of type Vertex handle Each simplex has 1 dcur vertices indexed from to dcur for a simplex s and an index i C vertex s i returns the i th vertex of s For any simplex s and any index i of s there may or may not be a simplex t opposite to the i th vertex of s The function C opposite simplex s i returns t if it exists and returns Simplex handle the undefined handle otherwise If t exists then s and t share dcur vertices namely all but the vertex with index i of s and the vertex with index C index of vertex in opposite simplex s i of t Assume that t exists and let j C index of vertex in opposite simplex s i Then s C opposite simplex t j and i C index of vertex in opposite simplex t j The boundary of the hull is also a simplicial complex All simplices in this complex have dimension dcur 1 For each boundary simplex there is a handle of type Facet handle Each facet has dcur vertices indexed from to dcur 1 If dcur 1 then for each facet f and each index i i dcur there is a facet g opposite to the i th vertex of f The function C opposite facet f i returns g Two neighboring facets f and g share dcur 1 vertices namely all but the vertex with index i of f and the vertex with index C index of vertex in opposite facet f i of g Let j C index of vertex in opposite facet f i Then f C opposite facet g j and i C index of vertex in opposite facet g j Types Convex hull d R R the representation class Convex hull d R Point d the point type Convex hull d R Hyperplane d the hyperplane type Convex hull d R Simplex handle handle for simplices Convex hull d R Facet handle handle for facets Convex hull d R Vertex handle handle for vertices Convex hull d R Simplex iterator iterator for simplices Convex hull d R Facet iterator iterator for facets Convex hull d R Vertex iterator iterator for vertices Convex hull d R Hull vertex iterator iterator for vertices that are part of the convex hull Note that each iterator fits the handle concept i e iterators can be used as handles Note also that all iterator and handle types come also in a const flavor e g Vertex const iterator is the constant version of Vertex iterator Const correctness requires to use the const version whenever the the convex hull object is referenced as constant The Hull vertex iterator is convertible to Vertex iterator and Vertex handle Convex hull d R Point const iterator const iterator for all inserted points Convex hull d R Hull point const iterator const iterator for all points that are part of the convex hull Creation Convex hull d R C int d R Kernel R creates an instance C of type Convex hull d The dimension of the underlying space is d and S is initialized to the empty point set The traits class R specifies the models of all types and the implementations of all geometric primitives used by the convex hull class The default model is one of the d dimensional representation classes e g Homogeneous d The data type Convex hull d offers neither copy constructor nor assignment operator Requirements R is a model of the concept ConvexHullTraits d Operations All operations below that take a point x as argument have the common precondition that x is a point of ambient space int C dimension returns the dimension of ambient space int C current dimension returns the affine dimension dcur of S Point d C associated point Vertex handle v returns the point associated with vertex v Vertex handle C vertex of simplex Simplex handle s int i returns the vertex corresponding to the i th vertex of s Precondition i dcur Point d C point of simplex Simplex handle s int i same as C associated point C vertex of simplex s i Simplex handle C opposite simplex Simplex handle s int i returns the simplex opposite to the i th vertex of s Simplex handle if there is no such simplex Precondition i dcur int C index of vertex in opposite simplex Simplex handle s int i returns the index of the vertex opposite to the i th vertex of s Precondition i dcur and there is a simplex opposite to the i th vertex of s Simplex handle C simplex Vertex handle v returns a simplex of which v is a node Note that this simplex is not unique int C index Vertex handle v returns the index of v in simplex v Vertex handle C vertex of facet Facet handle f int i returns the vertex corresponding to the i th vertex of f Precondition i dcur Point d C point of facet Facet handle f int i same as C associated point C vertex of facet f i Facet handle C opposite facet Facet handle f int i returns the facet opposite to the i th vertex of f Facet handle if there is no such facet Precondition i dcur and dcur 1 int C index of vertex in opposite facet Facet handle f int i returns the index of the vertex opposite to the i th vertex of f Precondition i dcur and dcur 1 Hyperplane d C hyperplane supporting Facet handle f returns a hyperplane supporting facet f The hyperplane is oriented such that the interior of C is on the negative side of it Precondition f is a facet of C and dcur 1 Vertex handle C insert Point d x adds point x to the underlying set of points If x is equal to the point associated with a vertex of the current hull this vertex is returned and its associated point is changed to x If x lies outside the current hull a new vertex v with associated point x is added to the hull and returned In all other cases i e if x lies in the interior of the hull or on the boundary but not on a vertex the current hull is not changed and Vertex handle is returned If CGAL CHECK EXPENSIVE is defined then the validity check is valid true is executed as a post condition template typename Forward iterator void C insert Forward iterator first Forward iterator last adds S set first last to the underlying set of points If any point S i is equal to the point associated with a vertex of the current hull its associated point is changed to S i bool C is dimension jump Point d x returns true if x is not contained in the affine hull of S std list Facet handle C facets visible from Point d x returns the list of all facets that are visible from x Precondition x is contained in the affine hull of S Bounded side C bounded side Point d x returns ON BOUNDED SIDE ON BOUNDARY ON UNBOUNDED SIDE if x is contained in the interior lies on the boundary is contained in the exterior of C Precondition x is contained in the affine hull of S void C clear int d reinitializes C to an empty hull in d dimensional space int C number of vertices returns the number of vertices of C int C number of facets returns the number of facets of C int C number of simplices returns the number of bounded simplices of C void C print statistics gives information about the size of the current hull and the number of visibility tests performed bool C is valid bool throw exceptions false checks the validity of the data structure If throw exceptions thrue then the program throws the following exceptions to inform about the problem chull has center on wrong side of hull facet the hyperplane supporting a facet has the wrong orientation chull has local non convexity a ridge is locally non convex chull has double coverage the hull has a winding number larger than 1 Lists and Iterators Vertex iterator C vertices begin an iterator of C to start the iteration over all vertices of the complex Vertex iterator C vertices end the past the end iterator for vertices Simplex iterator C simplices begin an iterator of C to start the iteration over all simplices of the complex Simplex iterator C simplices end the past the end iterator for simplices Facet iterator C facets begin an iterator of C to start the iteration over all facets of the complex Facet iterator C facets end the past the end iterator for facets Hull vertex iterator C hull vertices begin an iterator to start the iteration over all vertices of C that are part of the convex hull Hull vertex iterator C hull vertices end the past the end iterator for hull vertices Point const iterator C points begin returns the start iterator for all points that have been inserted to construct C Point const iterator C points end returns the past the end iterator for points Hull point const iterator C hull points begin returns an iterator to start the iteration over all points in the convex hull C Included are points in the interior of facets Hull point const iterator C hull points end returns the past the end iterator for points in the convex hull template typename Visitor void C visit all facets Visitor V each facet of C is visited by the visitor object V V has to have a function call operator void operator Facet handle const std list Point d C all points returns a list of all points that have been inserted to construct C std list Vertex handle C all vertices returns a list of all vertices of C also interior ones std list Simplex handle C all simplices returns a list of all simplices in C std list Facet handle C all facets returns a list of all facets of C Iteration Statements forall ch vertices v C the vertices of C are successively assigned to v forall ch simplices s C the simplices of C are successively assigned to s forall ch facets f C the facets of C are successively assigned to f Implementation The implementation of type Convex hull d is based on CMS93 and BMS94 The details of the implementation can be found in the implementation document available at the download site of this package The time and space requirements are input dependent Let C1 C2 C3 be the sequence of hulls constructed and for a point x let ki be the number of facets of Ci that are visible from x and that are not already facets of Ci 1 Then the time for inserting x is O dim i ki and the number of new simplices constructed during the insertion of x is the number of facets of the hull which were not already facets of the hull before the insertion The data type Convex hull d is derived from Regular complex d The space requirement of regular complexes is essentially 12 dim 2 bytes times the number of simplices plus the space for the points Convex hull d needs an additional 8 4 x dim bytes per simplex where x is the space requirement of the underlying number type and an additional 12 bytes per point The total is therefore 16 x dim 32 bytes times the number of simplices plus 28 x dim bytes times the number of points Low Dimensional Conversion Routine include CGAL Convex hull d to polyhedron 3 h template class R class T class HDS void convex hull d to polyhedron 3 C Polyhedron 3 T HDS P converts the convex hull C to polyedral surface stored in P Precondition dim 3 and dcur 3 Low Dimensional Output Routines include CGAL IO Convex hull d window stream h template class R void d2 show C CGAL Window stream W draws the convex hull C in window W Precondition dim 2 template class R void d3 surface map C GRAPH typename Point d int G constructs the representation of the surface of C as a bidirected LEDA graph G Precondition dim 3 Footnotes 1 The empty set if a facet of every simplex Next Convex hull d traits 3 R Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_d_ref/Class_Convex_hull_d.html", "title": "convex_hull_d&lt;r&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_d_ref/Convex_hull_d.tex' -->\n<html> <head>  \n<title>Convex_hull_d&lt;R&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_644\"></A>\n\n<A NAME=\"Cross_link_anchor_645\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_585\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Convex_hull_d<R>\"></A>\n<h2><I>CGAL::Convex_hull_d&lt;R&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <I>C</I> of type <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;</I> is the convex hull\nof a multi-set <I>S</I> of points in <MATH><I>d</I></MATH>-dimensional space. We call\n<I>S</I> the underlying point set and <MATH><I>d</I></MATH> or <I>dim</I> the dimension of\nthe underlying space. We use <I>dcur</I> to denote the affine dimension\nof <I>S</I>.  The data type supports incremental construction of hulls.\n<P>\n\nThe closure of the hull is maintained as a simplicial complex, i.e.,\nas a collection of simplices. The <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of any two is a face of\nboth<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>. In the\nsequel we reserve the word simplex for the simplices of dimension\n<I>dcur</I>. For each simplex there is a handle of type\n<I>Simplex_handlex</I> and for each vertex there is a handle of type\n<I>Vertex_handle</I>.  Each simplex has <MATH><I>1 + <I>dcur</I></I></MATH> vertices\nindexed from <MATH><I>0</I></MATH> to <I>dcur</I>; for a simplex <MATH><I>s</I></MATH> and an index <MATH><I>i</I></MATH>,\n<I>C.vertex(s,i)</I> returns the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>. For any simplex\n<MATH><I>s</I></MATH> and any index <MATH><I>i</I></MATH> of <MATH><I>s</I></MATH> there may or may not be a simplex <MATH><I>t</I></MATH>\n<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>.  The function\n<I>C.opposite_simplex(s,i)</I> returns <MATH><I>t</I></MATH> if it exists and returns\n<I>Simplex_handle()</I> (the undefined handle) otherwise. If <MATH><I>t</I></MATH> exists\nthen <MATH><I>s</I></MATH> and <MATH><I>t</I></MATH> share <I>dcur</I> vertices, namely all but the vertex\nwith index <MATH><I>i</I></MATH> of <MATH><I>s</I></MATH> and the vertex with index\n<I>C.index_of_vertex_in_opposite_simplex(s,i)</I> of <MATH><I>t</I></MATH>. Assume that\n<MATH><I>t</I></MATH> exists and let <I>j = C.index_of_vertex_in_opposite_simplex(s,i)</I>.  Then <MATH><I>s =</I></MATH>\n<I>C.opposite_simplex(t,j)</I> and <MATH><I>i =</I></MATH>\n<I>C.index_of_vertex_in_opposite_simplex(t,j)</I>.\n<P>\n\nThe boundary of the hull is also a simplicial complex. All simplices\nin this complex have dimension <MATH><I><I>dcur</I> - 1</I></MATH>.  For each boundary\nsimplex there is a handle of type <I>Facet_handle</I>.  Each facet has\n<I>dcur</I> vertices indexed from <MATH><I>0</I></MATH> to <MATH><I><I>dcur</I> - 1</I></MATH>. If <I>dcur &gt; 1</I> then for each facet <MATH><I>f</I></MATH> and each index <MATH><I>i</I></MATH>, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt;\n<I>dcur</I></I></MATH>, there is a facet <MATH><I>g</I></MATH> <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of\n<MATH><I>f</I></MATH>.  The function <I>C.opposite_facet(f,i)</I> returns <MATH><I>g</I></MATH>.  Two\nneighboring facets <MATH><I>f</I></MATH> and <MATH><I>g</I></MATH> share <I>dcur - 1</I> vertices, namely\nall but the vertex with index <MATH><I>i</I></MATH> of <MATH><I>f</I></MATH> and the vertex with index\n<I>C.index_of_vertex_in_opposite_facet(f,i)</I> of <MATH><I>g</I></MATH>.  Let <I>j = C.index_of_vertex_in_opposite_facet(f,i)</I>. Then <I>f = C.opposite_facet(g,j)</I> and <I>i = C.index_of_vertex_in_opposite_facet(g,j)</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::R\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the representation class.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the point type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::<A HREF=\"../Kernel_d_ref/Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the hyperplane type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Simplex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle for simplices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Facet_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle for facets.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle for vertices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Simplex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator for simplices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Facet_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator for facets.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator for vertices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Hull_vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator for vertices that are\npart of the convex hull.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nNote that each iterator fits the handle concept, i.e. iterators can be\nused as handles. Note also that all iterator and handle types come\nalso in a const flavor, e.g., <I>Vertex_const_iterator</I> is the\nconstant version of <I>Vertex_iterator</I>. Const correctness requires\nto use the const version whenever the the convex hull object is\nreferenced as constant. The <I>Hull_vertex_iterator</I> is convertible\nto <I>Vertex_iterator</I> and <I>Vertex_handle</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Point_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    const iterator for all inserted\npoints.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt;::Hull_point_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    const iterator for all points\nthat are part of the convex hull.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A>&lt;R&gt; C ( int d,  R <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> = R());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an\ninstance <I>C</I> of type <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I>. The dimension of the\nunderlying space is <MATH><I>d</I></MATH> and <I>S</I> is initialized to the empty point\nset. The traits class <I>R</I> specifies the models of all types and\nthe implementations of all geometric primitives used by the convex\nhull class. The default model is one of the <MATH><I>d</I></MATH>-dimensional\nrepresentation classes (e.g., <I>Homogeneous_d</I>).\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe data type <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I> offers neither copy constructor nor\nassignment operator.\n<P>\n\n<H3>Requirements</H3>\n<P>\n\n<I>R</I> is a model of the concept <I><A HREF=\"Concept_ConvexHullTraits_d.html#Cross_link_anchor_643\">ConvexHullTraits_d</A></I>\n  \n<A NAME=\"Index_anchor_586\"></A> \n.\n<P>\n\n<H3>Operations</H3>\n<P>\n\nAll operations below that take a point <I>x</I> as argument have the\ncommon precondition that <I>x</I> is a point of ambient space.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension of ambient space\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_current_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.current_dimension ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the affine dimension <I>dcur</I> of <MATH><I>S</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d_associated_point6Vertex_handle_v9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.associated_point ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point associated with vertex <MATH><I>v</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertex_of_simplex6Simplex_handle_s+_int_i9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.vertex_of_simplex ( Simplex_handle s,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vertex corresponding to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d_point_of_simplex6Simplex_handle_s+int_i9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.point_of_simplex ( Simplex_handle s, int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    same as\n<I>C.associated_point(C.vertex_of_simplex(s,i))</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_handle_opposite_simplex6Simplex_handle_s+int_i9_;\"></A>\nSimplex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.opposite_simplex ( Simplex_handle s, int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the simplex <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>\n(<I>Simplex_handle()</I> if there is no such simplex).<BR>\n\n<EM>Precondition: </EM><MATH><I>0\n <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_index_of_vertex_in_opposite_simplex6Simplex_handle_s+int_i9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    C.index_of_vertex_in_opposite_simplex ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Simplex_handle s,<BR>\n\nint i)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of the vertex <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of\n<MATH><I>s</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dcur</I></I></MATH> and there is a simplex\n<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>s</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_handle_simplex6Vertex_handle_v9_;\"></A>\nSimplex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.simplex ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a simplex\nof which <MATH><I>v</I></MATH> is a node. Note that this simplex is not unique.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_index6Vertex_handle_v9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.index ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of <MATH><I>v</I></MATH> in\n<I>simplex(v)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertex_of_facet6Facet_handle_f+_int_i9_;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.vertex_of_facet ( Facet_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vertex corresponding to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>f</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; <I>dcur</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d_point_of_facet6Facet_handle_f+_int_i9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.point_of_facet ( Facet_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    same as\n<I>C.associated_point(C.vertex_of_facet(f,i))</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Facet_handle_opposite_facet6Facet_handle_f+_int_i9_;\"></A>\nFacet_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.opposite_facet ( Facet_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the facet <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of <MATH><I>f</I></MATH>\n(<I>Facet_handle()</I> if there is no such facet).<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i\n&lt; <I>dcur</I></I></MATH> and <I>dcur &gt; 1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_index_of_vertex_in_opposite_facet6Facet_handle_f+_int_i9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    C.index_of_vertex_in_opposite_facet ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Facet_handle f,<BR>\n\nint i)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the index of the vertex <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the <MATH><I>i</I></MATH>-th vertex of\n<MATH><I>f</I></MATH>.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i &lt; <I>dcur</I></I></MATH> and <I>dcur &gt; 1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Hyperplane_d_hyperplane_supporting6Facet_handle_f9_;\"></A>\n<A HREF=\"../Kernel_d_ref/Class_Hyperplane_d.html#Cross_link_anchor_499\">Hyperplane_d</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.hyperplane_supporting ( Facet_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a hyperplane supporting facet <I>f</I>. The hyperplane is\noriented such that the interior of <I>C</I> is on the negative side of\nit.<BR>\n\n<EM>Precondition: </EM><I>f</I> is a facet of <I>C</I> and <I>dcur &gt; 1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point_d__x9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.insert (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    adds point <I>x</I>\nto the underlying set of points.  If <MATH><I>x</I></MATH> is equal to (the point\nassociated with) a vertex of the current hull this vertex is returned\nand its associated point is changed to <MATH><I>x</I></MATH>. If <MATH><I>x</I></MATH> lies outside the\ncurrent hull, a new vertex <I>v</I> with associated point <MATH><I>x</I></MATH> is added\nto the hull and returned. In all other cases, i.e., if <MATH><I>x</I></MATH> lies in the\ninterior of the hull or on the boundary but not on a vertex, the\ncurrent hull is not changed and <I>Vertex_handle()</I> is returned. If\n<I>CGAL_CHECK_EXPENSIVE</I> is defined then the validity check\n<I>is_valid(true)</I> is executed as a post condition.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;typename Forward_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert6Forward_iterator_first+_Forward_iterator_last9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    C.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Forward_iterator first,<BR>\n\nForward_iterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    adds <I>S = set [first,last)</I> to the underlying set of points. If any point\n<I>S[i]</I> is equal to (the point associated with) a vertex of the\ncurrent hull its associated point is changed to <I>S[i]</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_dimension_jump6const_Point_d__x9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.is_dimension_jump (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if\n<MATH><I>x</I></MATH> is not contained in the affine hull of <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Facet_handle9_facets_visible_from6const_Point_d__x9;\"></A>\nstd::list&lt;Facet_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.facets_visible_from (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the list of all facets that are visible from <I>x</I>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>x</I> is contained in the affine hull of <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bounded_side_bounded_side6const_Point_d__x9;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_99\">Bounded_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.bounded_side (  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> x)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n<I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A></I> (<I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A></I>,<I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A></I>) if\n<I>x</I> is contained in the interior (lies on the boundary, is\ncontained in the exterior) of <I>C</I>.<BR>\n\n<EM>Precondition: </EM><I>x</I> is contained\nin the affine hull of <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear6int_d9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.clear ( int d)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reinitializes <I>C</I> to an empty hull\nin <MATH><I>d</I></MATH>-dimensional space.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_vertices69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.number_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of vertices\nof <I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_facets69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.number_of_facets ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of facets of\n<I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_simplices69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.number_of_simplices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of bounded\nsimplices of <I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_print_statistics69_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.print_statistics ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    gives information about the size\nof the current hull and the number of visibility tests performed.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_throw_exceptions_=_false9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.is_valid ( bool throw_exceptions = false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks the\nvalidity of the data structure.  If <I>throw_exceptions == thrue</I>\nthen the program throws the following exceptions to inform about the\nproblem.<BR>\n\n<I>chull_has_center_on_wrong_side_of_hull_facet</I> the\nhyperplane supporting a facet has the wrong <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.<BR>\n\n<I>chull_has_local_non_convexity</I> a ridge is locally non convex.<BR>\n\n<I>chull_has_double_coverage</I> the hull has a winding number larger\nthan 1.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Lists and Iterators</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_begin69_;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    an iterator of <I>C</I> to\nstart the iteration over all vertices of the complex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_end69_;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.vertices_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past the end iterator\nfor vertices.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_iterator_simplices_begin69_;\"></A>\nSimplex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.simplices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    an iterator of <I>C</I>\nto start the iteration over all simplices of the complex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Simplex_iterator_simplices_end69_;\"></A>\nSimplex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.simplices_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past the end\niterator for simplices.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Facet_iterator_facets_begin69_;\"></A>\nFacet_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.facets_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    an iterator of <I>C</I> to\nstart the iteration over all facets of the complex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Facet_iterator_facets_end69_;\"></A>\nFacet_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.facets_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past the end iterator for\nfacets.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hull_vertex_iterator_hull_vertices_begin69_;\"></A>\nHull_vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.hull_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    an iterator to\nstart the iteration over all vertices of <I>C</I> that are part of the\nconvex hull.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hull_vertex_iterator_hull_vertices_end69_;\"></A>\nHull_vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.hull_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the past the end\niterator for hull vertices.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_const_iterator_points_begin69_;\"></A>\nPoint_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.points_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the start\niterator for all points that have been inserted to construct <I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_const_iterator_points_end69_;\"></A>\nPoint_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.points_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past the\nend iterator for points.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hull_point_const_iterator_hull_points_begin69_;\"></A>\nHull_point_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.hull_points_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an\niterator to start the iteration over all points in the convex hull\n<I>C</I>. Included are points in the interior of facets.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hull_point_const_iterator_hull_points_end69_;\"></A>\nHull_point_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.hull_points_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the\npast the end iterator for points in the convex hull.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;typename Visitor&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_visit_all_facets6const_Visitor__V9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    C.visit_all_facets (  Visitor V)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    each facet of <I>C</I> is visited by the visitor object\n<I>V</I>.  <I>V</I> has to have a function call operator:<BR>\n\n<I>void operator()(Facet_handle) const</I>\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_const_std::list6Point_d9__all_points69_;\"></A>\n std::list&lt;<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.all_points ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list of\nall points that have been inserted to construct <I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Vertex_handle9_all_vertices69_;\"></A>\nstd::list&lt;Vertex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.all_vertices ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list of\nall vertices of <I>C</I> (also interior ones).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Simplex_handle9_all_simplices69_;\"></A>\nstd::list&lt;Simplex_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.all_simplices ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list\nof all simplices in <I>C</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::list6Facet_handle9_all_facets69_;\"></A>\nstd::list&lt;Facet_handle&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    C.all_facets ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a list of\nall facets of <I>C</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Iteration Statements</H3>\n<P>\n\n<B>forall_ch_vertices</B>(<MATH><I>v,C</I></MATH>) <MATH><I>{</I></MATH> ``the vertices of <MATH><I>C</I></MATH> are\nsuccessively assigned to <MATH><I>v</I></MATH>'' <MATH><I>}</I></MATH>\n<P>\n\n<B>forall_ch_simplices</B>(<MATH><I>s,C</I></MATH>) <MATH><I>{</I></MATH> ``the simplices of <MATH><I>C</I></MATH> are\nsuccessively assigned to <MATH><I>s</I></MATH>'' <MATH><I>}</I></MATH>\n<P>\n\n<B>forall_ch_facets</B>(<MATH><I>f,C</I></MATH>) <MATH><I>{</I></MATH> ``the facets of <MATH><I>C</I></MATH> are\nsuccessively assigned to <MATH><I>f</I></MATH>'' <MATH><I>}</I></MATH>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe implementation of type <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I> is based on\n[<A HREF=\"../biblio.html#Biblio_cms-frric-93\">CMS93</A>] and [<A HREF=\"../biblio.html#Biblio_bms-dgc-94\">BMS94</A>].  The details\nof the implementation can be found in the implementation document\navailable at the download site of this package.\n<P>\n\nThe time and space requirements are input dependent.  Let <MATH><I>C<SUB>1</SUB></I></MATH>, <MATH><I>C<SUB>2</SUB></I></MATH>,\n<MATH><I>C<SUB>3</SUB></I></MATH>, ...be the sequence of hulls constructed and for a point <MATH><I>x</I></MATH>\nlet <MATH><I>k<SUB>i</SUB></I></MATH> be the number of facets of <MATH><I>C<SUB>i</SUB></I></MATH> that are visible from <MATH><I>x</I></MATH>\nand that are not already facets of <MATH><I>C<SUB>i-1</SUB></I></MATH>. Then the time for\ninserting <MATH><I>x</I></MATH> is <MATH><I>O(<I>dim</I>  <IMG BORDER=0 WIDTH=13 HEIGHT=24 ALIGN=MIDDLE SRC=\"cc_sum.gif\"> <SUB>i</SUB> k<SUB>i</SUB>)</I></MATH> and the number of new simplices\nconstructed during the insertion of <MATH><I>x</I></MATH> is the number of facets of the\nhull which were not already facets of the hull before the insertion.\n<P>\n\nThe data type <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I> is derived from\n<I>Regular_complex_d</I>. The space requirement of regular complexes is\nessentially <MATH><I>12(<I>dim</I> +2)</I></MATH> bytes times the number of simplices\nplus the space for the points. <I><A HREF=\"Class_Convex_hull_d.html#Cross_link_anchor_645\">Convex_hull_d</A></I> needs an additional\n<MATH><I>8 + (4 + x)<I>dim</I></I></MATH> bytes per simplex where <MATH><I>x</I></MATH> is the space\nrequirement of the underlying number type and an additional <MATH><I>12</I></MATH> bytes\nper point. The total is therefore <MATH><I>(16 + x)<I>dim</I> + 32</I></MATH> bytes times\nthe number of simplices plus <MATH><I>28 + x  &middot; <I>dim</I></I></MATH> bytes times the\nnumber of points.\n<P>\n\n<H3>Low Dimensional Conversion Routine</H3>\ninclude <I>&lt;CGAL/Convex_hull_d_to_polyhedron_3.h&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class R, class T, class HDS&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_convex_hull_d_to_polyhedron_36_const_Convex_hull_d6R9__C+_Polyhedron_36T+HDS9__P9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    convex_hull_d_to_polyhedron_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     C,<BR>\n\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A>&lt;T,HDS&gt;&amp; P)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    converts the convex hull <I>C</I> to polyedral surface stored in \n   <I>P</I>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dim == 3</I> and <I>dcur == 3</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Low Dimensional Output Routines</H3>\ninclude <I>&lt;CGAL/IO/Convex_hull_d_window_stream.h&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_d2_show6const_Convex_hull_d6R9__C+_CGAL::Window_stream__W9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    d2_show (  C,  <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A>&amp; W)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    draws the convex hull <I>C</I> in window <I>W</I>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dim == 2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class R&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_d3_surface_map6const_Convex_hull_d6R9__C+_GRAPH6_typename_Convex_hull_d6R9::Point_d_+int9__G9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    d3_surface_map ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     C,<BR>\n\nGRAPH&lt; typename ::<A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A> ,int&gt;&amp; G)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    constructs the representation of the surface of <I>C</I> as a \nbidirected LEDA graph <I>G</I>.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dim == 3</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nThe empty set if a facet of every simplex.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Convex_hull_d_traits_3.html\"><I>Convex_hull_d_traits_3&lt;R&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_6!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38137.0}