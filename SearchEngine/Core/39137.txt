{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL For all Definition In order to write algorithms that work with iterator ranges as well as with circulator ranges we have to consider the difference of representing an empty range For iterators this is the range i i while for circulators it would be c NULL the empty sequence test The function is empty range provides the necessary generic test which accepts an iterator range or a circulator range and says whether the range is empty or not include CGAL circulator h A macro CGAL For all i j simplifies the writing of such simple loops as the one in the example of the function is empty range i and j can be either iterators or circulators The macro loops through the range i j It increments i until it reaches j The implementation looks like CGAL For all i j for bool circ loop flag CGAL is empty range i j circ loop flag circ loop flag i j Note that the macro behaves like a for loop It can be used with a single statement or with a statement block For bidirectional iterators or circulators a backwards loop macro CGAL For all backwards i j exists that decrements j until it reaches i See Also iterator distance is empty range Circulator tag Circulator traits Assert circulator or iterator Circulator Next Handle Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Circulator_ref/Macro_CGAL_For_all.html", "title": "cgal_for_all", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Circulator_ref/For_all.tex' -->\n<html> <head>  \n<title>CGAL_For_all</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1661\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1516\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Macro.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL_For_all\"></A>\n<h2><I>CGAL_For_all</I></h2>\n<P>\n\n<A NAME=\"Cross_link_anchor_1662\"></A>\n\n\n<A NAME=\"Index_anchor_1517\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nIn order to write algorithms that work with iterator ranges as well as\nwith circulator ranges we have to consider the difference of\nrepresenting an empty range. For iterators this is the range <MATH><I>[i,i)</I></MATH>,\nwhile for circulators it would be <I>c == NULL</I>, the empty sequence test.\nThe function <I><A HREF=\"Function_is_empty_range.html#Cross_link_anchor_1665\">is_empty_range</A></I> provides the necessary generic test\nwhich accepts an iterator range or a circulator range and says whether\nthe range is empty or not.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator.h\">CGAL/circulator.h</A>&gt;</I>\n<P>\n\nA macro <I><A HREF=\"Macro_CGAL_For_all.html#Cross_link_anchor_1661\">CGAL_For_all</A>( i, j)</I> simplifies the writing of such simple\nloops as the one in the example of the function <I><A HREF=\"Function_is_empty_range.html#Cross_link_anchor_1665\">is_empty_range</A></I>.\n<I>i</I> and <I>j</I> can be either iterators or circulators. The macro\nloops through the range [<I>i, j</I>). It increments <I>i</I> until it\nreaches <I>j</I>. The implementation looks like:\n<P>\n\n<I><A HREF=\"Macro_CGAL_For_all.html#Cross_link_anchor_1661\">CGAL_For_all</A>(i,j)</I>    :=   \n<pre class=\"Verbatim\">\nfor ( bool _circ_loop_flag = ! ::<A HREF=\"Function_is_empty_range.html#Cross_link_anchor_1664\">CGAL::is_empty_range</A>(i,j);\n      _circ_loop_flag;\n      _circ_loop_flag = ((++i) != (j)) \n)\n</pre>\n<P>\n\nNote that the macro behaves like a <I>for</I>-loop. It can be used with\na single statement or with a statement block.  For bidirectional\niterators or circulators,  a backwards loop macro\n<I><A HREF=\"Macro_CGAL_For_all.html#Cross_link_anchor_1662\">CGAL_For_all_backwards</A>( i, j)</I> exists that decrements <I>j</I> until\nit reaches <I>i</I>.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_iterator_distance.html#Cross_link_anchor_1667\">iterator_distance</A></I>,\n<I><A HREF=\"Function_is_empty_range.html#Cross_link_anchor_1665\">is_empty_range</A></I>,\n<I><A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1620\">Circulator_tag</A></I>,\n<I><A HREF=\"Class_Circulator_traits.html#Cross_link_anchor_1658\">Circulator_traits</A></I>,<BR>\n\n<I><A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1597\">Assert_circulator_or_iterator</A></I>,\n<I><A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A></I>.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"../Handle_ref/Concept_Handle.html\"><I>Handle</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39137.0}