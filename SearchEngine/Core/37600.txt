{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Segment d Kernel Definition An instance s of the data type Segment d is a directed straight line segment in d dimensional Euclidean space connecting two points p and q p is called the source point and q is called the target point of s both points are called endpoints of s A segment whose endpoints are equal is called degenerate Types Segment d Kernel R the representation type Segment d Kernel RT the ring type Segment d Kernel FT the field type Segment d Kernel LA the linear algebra layer Creation Segment d Kernel s introduces a variable s of type Segment d Kernel Segment d Kernel s Point d Kernel p Point d Kernel q introduces a variable s of type Segment d Kernel which is initialized to the segment p q Precondition p dimension q dimension Segment d Kernel s Point d Kernel p Vector d Kernel v introduces a variable s of type Segment d Kernel which is initialized to the segment p p v Precondition p dimension v dimension Operations int s dimension returns the dimension of the ambient space Point d Kernel s source returns the source point of segment s Point d Kernel s target returns the target point of segment s Point d Kernel s vertex int i returns source or target of s vertex returns the source vertex 1 returns the target The parameter i is taken modulo 2 which gives easy access to the other vertex Precondition i Point d Kernel s point int i returns vertex i Point d Kernel s int i returns vertex i Point d Kernel s min returns the lexicographically smaller vertex Point d Kernel s max returns the lexicographically larger vertex Segment d Kernel s opposite returns the segment target source Direction d Kernel s direction returns the direction from source to target Precondition s is non degenerate Vector d Kernel s vector returns the vector from source to target FT s squared length returns the square of the length of s bool s has on Point d Kernel p returns true if p lies on s and false otherwise Precondition s dimension p dimension Line d Kernel s supporting line returns the supporting line of s Precondition s is non degenerate Segment d Kernel s transform Aff transformation d Kernel t returns t s Precondition s dimension t dimension Segment d Kernel s Vector d Kernel v returns s v i e s translated by vector v Precondition s dimension v dimension bool s is degenerate returns true if s is degenerate i e s source s target Non Member Functions bool weak equality s1 s2 Test for equality as unoriented segments Precondition s1 dimension s2 dimension bool parallel s1 s2 return true if one of the segments is degenerate or if the unoriented supporting lines are parallel Precondition s1 dimension s2 dimension bool common endpoint s1 s2 Point d Kernel common if s1 and s2 touch in a common end point this point is assigned to common and the result is true otherwise the result is false If s1 s2 then one of the endpoints is returned Precondition s1 dimension s2 dimension Implementation Segments are implemented by a pair of points as an item type All operations like creation initialization tests the calculation of the direction and source target vector input and output on a segment s take time O s dimension dimension coordinate and end point access and identity test take constant time The operations for intersection calculation also take time O s dimension The space requirement is O s dimension Next Hyperplane d Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_d_ref/Class_Segment_d.html", "title": "segment_d&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_d_ref/Segment_d.tex' -->\n<html> <head>  \n<title>Segment_d&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_496\"></A>\n\n<A NAME=\"Cross_link_anchor_497\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_372\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Segment_d<Kernel>\"></A>\n<h2><I>CGAL::Segment_d&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <MATH><I>s</I></MATH> of the data type <I><A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A></I> is a directed\nstraight line segment in <MATH><I>d</I></MATH>-dimensional Euclidean space connecting\ntwo points <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>. <MATH><I>p</I></MATH> is called the source point and <MATH><I>q</I></MATH> is\ncalled the target point of <MATH><I>s</I></MATH>, both points are called endpoints of\n<MATH><I>s</I></MATH>. A segment whose endpoints are equal is called <I>degenerate</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::R\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the representation type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the ring type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the field type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::LA\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the linear algebra layer.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>s</I>\nof type <I><A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s ( <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; q);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a\nvariable <I>s</I> of type <I><A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> which is initialized to\nthe segment <MATH><I>(p,q)</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>p.dimension()==q.dimension()</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s ( <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a\nvariable <I>s</I> of type <I><A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> which is initialized to\nthe segment <I>(p,p+v)</I>.<BR>\n\n<EM>Precondition: </EM><I>p.dimension()==v.dimension()</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension of the ambient\nspace.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_source69;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.source ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source point of segment\n<I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_target69;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.target ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target point of segment\n<I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_vertex6int_i9_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.vertex ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns source or target of\n<I>s</I>: <I>vertex(0)</I> returns the source, <I>vertex(1)</I> returns\nthe target. The parameter <MATH><I>i</I></MATH> is taken modulo <MATH><I>2</I></MATH>, which gives easy\naccess to the other vertex.<BR>\n\n<EM>Precondition: </EM><MATH><I>i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> 0</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_point6int_i9_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.point ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>vertex(i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     s [ int i]<A NAME=\"Function_Point_d6Kernel9_operator696int_i9_;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>vertex(i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_min69_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"../NumberTypeSupport_ref/Function_min.html#Cross_link_anchor_1394\">min</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the lexicographically smaller\nvertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_max69_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"../NumberTypeSupport_ref/Function_max.html#Cross_link_anchor_1392\">max</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the lexicographically larger\nvertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Segment_d6Kernel9_opposite69_;\"></A>\n<A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the segment\n<I>(target(),source())</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_d6Kernel9_direction69_;\"></A>\n<A HREF=\"Class_Direction_d.html#Cross_link_anchor_491\">Direction_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.direction ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the direction from\nsource to target.<BR>\n\n<EM>Precondition: </EM><I>s</I> is non-degenerate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_d6Kernel9_vector69_;\"></A>\n<A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.vector ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vector from source to\ntarget.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_FT_squared_length69_;\"></A>\nFT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.squared_length ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> of the length of\n<I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.has_on (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <MATH><I>p</I></MATH> lies\non <I>s</I> and false otherwise.<BR>\n\n<EM>Precondition: </EM><I>s.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Line_d6Kernel9_supporting_line69_;\"></A>\n<A HREF=\"Class_Line_d.html#Cross_link_anchor_493\">Line_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.supporting_line ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the supporting line\nof <I>s</I>.<BR>\n\n<EM>Precondition: </EM><I>s</I> is non-degenerate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Segment_d6Kernel9_transform6const_Aff_transformation_d6Kernel9__t9_;\"></A>\n<A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.transform (  <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <MATH><I>t(s)</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>s.dimension()==t.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     s +  <A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v<A NAME=\"Function_Segment_d6Kernel9_operator+6const_Vector_d6Kernel9__v9_;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n<MATH><I>s+v</I></MATH>, i.e., <I>s</I> translated by vector <MATH><I>v</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>s.dimension()==v.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.is_degenerate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>s</I> is\ndegenerate i.e.  <I>s.source()=s.target()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Non-Member Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_weak_equality6const_Segment_d6Kernel9__s1+_const_Segment_d6Kernel9__s29_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    weak_equality (  s1,  s2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for equality as unoriented\nsegments.<BR>\n\n<EM>Precondition: </EM><I>s1.dimension()==s2.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_parallel6const_Segment_d6Kernel9__s1+_const_Segment_d6Kernel9__s29_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A> (  s1,  s2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    return true if one of the segments is degenerate or if the\nunoriented supporting lines are <A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A>.<BR>\n\n<EM>Precondition: </EM><I>s1.dimension()==s2.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_common_endpoint6const_Segment_d6Kernel9__s1+_const_Segment_d6Kernel9__s2+_Point_d6Kernel9__common9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    common_endpoint (  s1,  s2,  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;&amp; common)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    if <I>s1</I> and <I>s2</I>\ntouch in a common end point, this point is assigned to <I>common</I>\nand the result is <I>true</I>, otherwise the result is <I>false</I>. If\n<I>s1==s2</I> then one of the endpoints is returned.<BR>\n\n<EM>Precondition: </EM><I>s1.dimension()==s2.dimension()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nSegments are implemented by a pair of points as an item type.  All\noperations like creation, initialization, tests, the calculation of\nthe direction and source - target vector, input and output on a\nsegment <MATH><I>s</I></MATH> take time <MATH><I>O(<I>s.dimension()</I>)</I></MATH>. <I>dimension()</I>,\ncoordinate and end point access, and identity test take constant time.\nThe operations for <A HREF=\"Function_intersection.html#Cross_link_anchor_521\">intersection</A> calculation also take time\n<MATH><I>O(<I>s.dimension()</I>)</I></MATH>. The space requirement is\n<MATH><I>O(<I>s.dimension()</I>)</I></MATH>.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Hyperplane_d.html\"><I>Hyperplane_d&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37600.0}