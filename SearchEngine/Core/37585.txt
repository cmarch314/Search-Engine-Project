{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 18 1 Getting and Setting Up 18 1 Getting and Setting Next 18 2 Coordinate Manipulation 18 1 1 C Array Wrappers While the above methods may be all the beginning user may need sometimes a more direct approach is needed for speed and memory savings In C arrays of floating point numbers are passed between routines as pointers to raw memory locations While this procedure can lead to crashes and errors accessing memory outside the allocated space it maximizes performance since no extra copies of the values have to be made and passed around While it is possible to create a pointer to float or pointer to double in Python it is opaque to the rest of the python code and can only be passed to other C routines As a compromise the PyOEChem wrappers introduce 2 classes that are very thin wrappers around C style arrays OEFloatArray wraps a float pointer of a given size and OEDoubleArray wraps a double pointer of a given size These classes can be passed into any OEChem method that takes a float pointer or double pointer resulting in much less overhead than the methods above yet they provide a len method so that the user can determine their size And they provide getitem setitem access with bounds checking so that members can be accessed like members of a Python list but an exception will be thrown if the user tries to access outside the size of the Array While not used for coordinate handling Python OEChem also creates OEIntArray for wrapping a C int OEUIntArray for wrapping a C unsigned int and an OEUCharArray for wrapping a C unsiged char Since floating point numbers in Python are usually stored as doubles all the methods that follow are designed to use a OEDoubleArray For getting molecule or atom coordinates into a OEDoubleArray you must first create an instance of the correct size For an atom s coordinates you need an array of size 3 xyz OEDoubleArray 3 mol GetCoords atom xyz print x xyz y xyz 1 z xyz 2 To get the coordinates of the entire molecule create a OEDoubleArray 3 times the return from GetMaxAtomIdx Then to access the coordinates of a specific atom index into the array using atom GetIdx The next example gets all the coordinates into a single array and the prints them out atom by atom coords OEDoubleArray 3 mol GetMaxAtomIdx mol GetCoords coords for atom in mol GetAtoms idx 3 atom GetIdx print i 3d x 8 4f y 8 4f z 8 4f atom GetIdx coords idx coords idx 1 coords idx 2 Setting coordinates using OEDoubleArrays is performed in a completely analogous fashion For a single atom create a OEDoubleArray of size 3 fill it with values it defaults to all zeroes and then pass it to SetCoords This array could also be the result of a previous call to GetCoords For a whole molecule you again need an array size 3 time the return from GetMaxAtomIdx While these molecule member functions provide access to molecule coordinates the next few sections describe various methods to manipulate these coordinates either inside OEDoubleArrays directly low level routines or by operations directly on the coordinates inside the molecule object OEChem Python Theory Manual Version 1 3 1 Previous 18 1 Getting and Setting Up 18 1 Getting and Setting Next 18 2 Coordinate Manipulation Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node155.html", "title": "18.1.1 c array wrappers", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>18.1.1 C Array Wrappers</title>\n<META NAME=\"description\" CONTENT=\"18.1.1 C Array Wrappers\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node154.html\">\n<LINK REL=\"up\" HREF=\"node154.html\">\n<LINK REL=\"next\" HREF=\"node156.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node154.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node154.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node156.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node154.html\">18.1 Getting and Setting</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node154.html\">18.1 Getting and Setting</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node156.html\">18.2 Coordinate Manipulation</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H2><A NAME=\"SECTION0020110000000000000000\">\n18.1.1 C Array Wrappers</A>\n</H2>\n\n<P>\nWhile the above methods may be all the beginning user may need,\nsometimes a more direct approach is needed for speed and\nmemory-savings. In C++, arrays of floating point numbers are passed\nbetween routines as pointers to raw memory locations. While this\nprocedure can lead to crashes and errors accessing memory outside the\nallocated space, it maximizes performance since no extra copies of the\nvalues have to be made and passed around. While it is possible to\ncreate a ``pointer to float'' or ``pointer to double'' in Python, it\nis opaque to the rest of the python code and can only be passed to\nother C routines.  As a compromise, the PyOEChem wrappers introduce 2\nclasses that are very thin wrappers around C-style arrays. OEFloatArray\nwraps a <code>float*</code> pointer of a given size and OEDoubleArray wraps a\n<code>double*</code> pointer of a given size.  These classes can be passed\ninto any OEChem method that takes a float pointer or double pointer,\nresulting in much less overhead than the methods above, yet they\nprovide a <code>__len__()</code> method so that the user can determine their\nsize. And they provide <code>__getitem__, __setitem__</code> access with\nbounds checking so that members can be accessed like members of a\nPython list, but an exception will be thrown if the user tries to\naccess outside the size of the Array.\n\n<P>\nWhile not used for coordinate handling, Python-OEChem also creates\nOEIntArray for wrapping a C <code>int*</code>, OEUIntArray for wrapping\na C <code>unsigned int*</code> and an OEUCharArray for wrapping\na C <code>unsiged char*</code>.\n\n<P>\nSince floating point numbers in Python are usually stored as doubles,\nall the methods that follow are designed to use a OEDoubleArray.\n\n<P>\nFor getting molecule or atom coordinates into a OEDoubleArray, you must\nfirst create an instance of the correct size. For an atom's coordinates\nyou need an array of size 3:\n\n<P>\n<dl><dd><pre class=\"verbatim\">xyz = OEDoubleArray(3)\nmol.GetCoords(atom, xyz)\nprint 'x= ', xyz[0], 'y= ', xyz[1], 'z= ', xyz[2]\n</pre></dl>\n\n<P>\nTo get the coordinates of the entire molecule, create a OEDoubleArray 3\ntimes the return from GetMaxAtomIdx(). Then to access the coordinates\nof a specific atom, index into the array using atom.GetIdx(). The next\nexample gets all the coordinates into a single array and the prints\nthem out, atom-by-atom.\n\n<P>\n<dl><dd><pre class=\"verbatim\">coords = OEDoubleArray(3*mol.GetMaxAtomIdx())\nmol.GetCoords(coords)\n\nfor atom in mol.GetAtoms():\n    idx = 3*atom.GetIdx()\n    print ( 'i= %3d  x= %8.4f  y= %8.4f  z= %8.4f' %\n            (atom.GetIdx(),coords[idx],coords[idx+1],coords[idx+2]))\n</pre></dl>\n\n<P>\nSetting coordinates using OEDoubleArrays is performed in a completely\nanalogous fashion. For a single atom, create a OEDoubleArray of size 3,\nfill it with values (it defaults to all zeroes) and then pass it to\nSetCoords. This array could also be the result of a previous call to\nGetCoords.  For a whole molecule, you again need an array size 3 time\nthe return from GetMaxAtomIdx().\n\n<P>\nWhile these molecule member functions provide access to molecule coordinates,\nthe next few sections describe various methods to manipulate these coordinates\neither inside OEDoubleArrays directly (low-level routines) or by operations\ndirectly on the coordinates inside the molecule object.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node154.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node154.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node156.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node154.html\">18.1 Getting and Setting</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node154.html\">18.1 Getting and Setting</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node156.html\">18.2 Coordinate Manipulation</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37585.0}