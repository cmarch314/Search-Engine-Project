{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Nef polyhedron S2 Traits Definition An instance of data type Nef polyhedron S2 Traits is a subset of the sphere S2 that is the result of forming complements and intersections starting from a finite set H of halfspaces bounded by a plane containing the origin Halfspaces correspond to hemispheres of S2 and are therefore modeled by oriented great circles of type Sphere circle Nef polyhedron S2 is closed under all binary set operations intersection union difference complement and under the topological operations boundary closure and interior include CGAL Nef polyhedron S2 h Parameters template class Nef polyhedronTraits S2 class Nef polyhedronItems S2 CGAL SM items class Nef polyhedronMarks bool class Nef polyhedron S2 The first parameter requires one of the following exact kernels Homogeneous Simple homogeneous parametrized with Gmpz leda integer or any other number type modeling or Cartesian Simple cartesian parametrized with Gmpq leda rational Quotient Gmpz or any other number type modeling The second parameter and the third parameter are for future considerations Neither Nef polyhedronItems S2 nor Nef polyhedronMarks is specifed yet Do not use other than the default types for these two template parameters Types Nef polyhedron S2 Traits Sphere point points in the sphere surface Nef polyhedron S2 Traits Sphere segment segments in the sphere surface Nef polyhedron S2 Traits Sphere circle oriented great circles modeling spatial half spaces Nef polyhedron S2 Traits SVertex const handle non mutable handle to svertex Nef polyhedron S2 Traits SHalfedge const handle non mutable handle to shalfedge Nef polyhedron S2 Traits SHalfloop const handle non mutable handle to shalfloop Nef polyhedron S2 Traits SFace const handle non mutable handle to sface Nef polyhedron S2 Traits SVertex const iterator non mutable iterator over all svertices Nef polyhedron S2 Traits SHalfedge const iterator non mutable iterator over all shalfedges Nef polyhedron S2 Traits SHalfloop const iterator non mutable iterator over all shalfloops Nef polyhedron S2 Traits SFace const iterator non mutable iterator over all sfaces Nef polyhedron S2 Traits SHalfedge around svertex const circulator circulating the adjacency list of an svertex v Nef polyhedron S2 Traits SHalfedge around sface const circulator circulating the sface cycle of an sface f Nef polyhedron S2 Traits SFace cycle const iterator iterating all sface cycles of an sface f The iterator has method bool is svertex bool is shalfedge bool is shalfloop and can be converted to the corresponding handles SVertex const handle SHalfedge const handle or SHalfloop const handle Nef polyhedron S2 Traits Mark attributes of objects vertices edges faces Nef polyhedron S2 Traits size type size type enum Boundary EXCLUDED INCLUDED construction selection enum Content EMPTY COMPLETE construction selection Creation Nef polyhedron S2 Traits N Content sphere EMPTY creates an instance N of type Nef polyhedron S2 K and initializes it to the empty set if sphere EMPTY and to the whole sphere if sphere COMPLETE Nef polyhedron S2 Traits N Sphere circle c Boundary circle INCLUDED creates a Nef polyhedron N containing the half sphere left of c including c if circle INCLUDED excluding c if circle EXCLUDED template class Forward iterator Nef polyhedron S2 Traits N Forward iterator first Forward iterator beyond Boundary b INCLUDED creates a Nef polyhedron N from the set of sphere segments in the iterator range first beyond If the set of sphere segments is a simple polygon that separates the sphere surface into two regions then the polygonal region that is left of the segment first is selected The polygonal region includes its boundary if b INCLUDED and excludes the boundary otherwise Forward iterator has to be an iterator with value type Sphere segment Operations void N clear Content plane EMPTY makes N the empty set if plane EMPTY and the full plane if plane COMPLETE bool N is empty returns true if N is empty false otherwise bool N is sphere returns true if N is the whole sphere false otherwise Constructive Operations Nef polyhedron S2 K N complement returns the complement of N in the plane Nef polyhedron S2 K N interior returns the interior of N Nef polyhedron S2 K N closure returns the closure of N Nef polyhedron S2 K N boundary returns the boundary of N Nef polyhedron S2 K N regularization returns the regularized polyhedron closure of interior Nef polyhedron S2 K N intersection Nef polyhedron S2 K N1 returns N N1 Nef polyhedron S2 K N join Nef polyhedron S2 K N1 returns N N1 Nef polyhedron S2 K N difference Nef polyhedron S2 K N1 returns N N1 Nef polyhedron S2 K N symmetric difference Nef polyhedron S2 K N1 returns the symmectric difference N T T N Additionally there are operators which implement the binary operations intersection union difference symmetric difference and the unary operation complement respectively There are also the corresponding modification operations There are also comparison operations like which implement the relations subset subset or equal superset superset or equal equality inequality respectively Statistics and Integrity Size type N number of svertices returns the number of svertices Size type N number of shalfedges returns the number of shalfedges Size type N number of sedges returns the number of sedges Size type N number of shalfloops returns the number of shalfloops Size type N number of sloops returns the number of sloops Size type N number of sfaces returns the number of sfaces Size type N number of sface cycles returns the number of sface cycles Size type N number of connected components calculates the number of connected components of P void N print statistics std ostream os std cout print the statistics of P the number of vertices edges and faces void N check integrity and topological planarity bool faces true checks the link structure and the genus of P Exploration Point location Ray shooting As Nef polyhedra are the result of forming complements and intersections starting from a set H of half spaces that are defined by oriented lines in the plane they can be represented by an attributed plane map M V E F For topological queries within M the following types and operations allow exploration access to this structure Types Nef polyhedron S2 Traits Object handle a generic handle to an object of the underlying plane map The kind of object vertex halfedge face can be determined and the object can be assigned to a corresponding handle by the three functions bool assign Vertex const handle h Object handle bool assign Halfedge const handle h Object handle bool assign Face const handle h Object handle where each function returns true iff the assignment to h was done Operations bool N contains Object handle h returns true iff the object h is contained in the set represented by N bool N contained in boundary Object handle h returns true iff the object h is contained in the 1 skeleton of N Object handle N locate Sphere point p returns a generic handle h to an object face halfedge vertex of the underlying plane map that contains the point p in its relative interior The point p is contained in the set represented by N if N contains h is true The location mode flag m allows one to choose between different point location strategies Object handle N ray shoot Sphere point p Sphere direction d returns a handle h with N contains h that can be converted to a Vertex Halfedge Face const handle as described above The object returned is intersected by the ray starting in p with direction d and has minimal distance to p The operation returns the null handle NULL if the ray shoot along d does not hit any object h of N with N contains h Object handle N ray shoot to boundary Sphere point p Sphere direction d returns a handle h that can be converted to a Vertex Halfedge const handle as described above The object returned is part of the 1 skeleton of N intersected by the ray starting in p with direction d and has minimal distance to p The operation returns the null handle NULL if the ray shoot along d does not hit any 1 skeleton object h of N The location mode flag m allows one to choose between different point location strategies Iteration bool N has shalfloop returns true iff there is a shalfloop SHalfloop const handle N shalfloop returns access to the sloop The list of all objects can be accessed via iterator ranges For comfortable iteration we also provide iterations macros The iterator range access operations are of the following kind SVertex iterator svertices begin svertices end SHalfedge iterator shalfedges begin shalfedges end SHalfloop iterator shalfloops begin shalfloops end SFace iterator sfaces begin sfaces end The macros are then CGAL forall svertices v M CGAL forall shalfedges e M CGAL forall sfaces f M CGAL forall sface cycles of fc F where M is a sphere map and F is a sface Input and Output A Nef polyhedron N can be visualized in an open GL window The output operator is defined in the file CGAL IO Nef poly hedron 2 Win dow stream h Implementation Nef polyhedra are implemented on top of a halfedge data structure and use linear space in the number of vertices edges and facets Operations like empty take constant time The operations clear complement interior closure boundary regularization input and output take linear time All binary set operations and comparison operations take time O n logn where n is the size of the output plus the size of the input The point location and ray shooting operations are implemented in the naive way The operations run in linear query time without any preprocessing Example Nef polyhedra are parameterized by a standard CGAL kernel The example computes the intersection of two Nef polyhedra N1 and N2 examples Nef S2 simple C include CGAL Gmpz h include CGAL Homogeneous h include CGAL Nef polyhedron S2 h typedef CGAL Gmpz RT typedef CGAL Homogeneous RT Kernel typedef CGAL Nef polyhedron S2 Kernel Nef polyhedron typedef Nef polyhedron Sphere circle Sphere circle int main Nef polyhedron N1 Sphere circle 1 Nef polyhedron N2 Sphere circle 1 Nef polyhedron EXCLUDED Nef polyhedron N3 N1 N2 return Next Nef polyhedron S2 Traits Sphere point Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Nef_S2_ref/Class_Nef_polyhedron_S2", "title": "nef_polyhedron_s2&lt;traits&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Nef_S2_ref/Nef_polyhedron_S2.tex' -->\n<html> <head>  \n<title>Nef_polyhedron_S2&lt;Traits&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_726\"></A>\n\n<A NAME=\"Cross_link_anchor_727\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_759\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Nef_polyhedron_S2<Traits>\"></A>\n<h2><I>CGAL::Nef_polyhedron_S2&lt;Traits&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance of data type <I><A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;</I> is a subset of\nthe sphere <MATH><I>S<SUB>2</SUB></I></MATH> that is the result of forming complements and \nintersections starting from a finite set <I>H</I> of halfspaces \nbounded by a plane containing the origin. Halfspaces correspond to \nhemispheres of <MATH><I>S<SUB>2</SUB></I></MATH> and are therefore modeled by oriented great \ncircles of type <I>Sphere_circle</I>. <I><A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A></I> is \nclosed under all binary set operations <I><A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I>, <I>union</I>,\n<I>difference</I>, <I>complement</I> and under the topological\noperations <I>boundary</I>, <I>closure</I>, and <I>interior</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Nef_polyhedron_S2.h\">CGAL/Nef_polyhedron_S2.h</A>&gt;</I>\n<P>\n\n<H3>Parameters</H3>\n<P>\n\n<TABLE><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n<I>template &lt;</I> \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>class Nef_polyhedronTraits_S2,</I>\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>class Nef_polyhedronItems_S2 = CGAL::SM_items,</I>\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>class Nef_polyhedronMarks = bool</I>\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>class <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>;</I>\n\n</TD></TR></TABLE>\n<P>\n\nThe first parameter requires one of the following exact kernels:\n<I><A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A></I>, <I><A HREF=\"../Kernel_23_ref/Class_Simple_homogeneous.html#Cross_link_anchor_32\">Simple_homogeneous</A></I> \nparametrized with <I><A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A></I>, <I><A HREF=\"../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388\">leda_integer</A></I> or any other number type\nmodeling  <IMG BORDER=0 WIDTH=10 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_Z.gif\"> , or <I><A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A></I>, <I><A HREF=\"../Kernel_23_ref/Class_Simple_cartesian.html#Cross_link_anchor_30\">Simple_cartesian</A></I> parametrized with \n<I><A HREF=\"../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1362\">Gmpq</A></I>, <I><A HREF=\"../NumberTypeSupport_ref/Class_leda_rational.html#Cross_link_anchor_1389\">leda_rational</A></I>,<I><A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1404\">Quotient</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>&gt;</I> or any other number \ntype modeling  <IMG BORDER=0 WIDTH=12 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_mathbb_Q.gif\"> .\n<P>\n\nThe second parameter and the third parameter are for future considerations.\nNeither <I>Nef_polyhedronItems_S2</I> nor <I>Nef_polyhedronMarks</I> is\nspecifed, yet. Do not use other than the default types for these two \ntemplate parameters.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2-Traits---Sphere_point.html#Cross_link_anchor_729\">Nef_polyhedron_S2&lt;Traits&gt;::Sphere_point</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    points in the sphere surface.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2-Traits---Sphere_segment.html#Cross_link_anchor_731\">Nef_polyhedron_S2&lt;Traits&gt;::Sphere_segment</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    segments in the sphere surface.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2-Traits---Sphere_circle.html#Cross_link_anchor_733\">Nef_polyhedron_S2&lt;Traits&gt;::Sphere_circle</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    oriented great circles modeling spatial\n  half-spaces.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SVertex_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable handle to svertex.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable handle to shalfedge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfloop_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable handle to shalfloop.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SFace_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable handle to sface.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SVertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable iterator over all svertices.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfedge_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable iterator over all shalfedges.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfloop_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable iterator over all shalfloops.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SFace_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    non-mutable iterator over all sfaces.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfedge_around_svertex_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulating the\n  adjacency list of an svertex <I>v</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SHalfedge_around_sface_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulating the\n  sface cycle of an sface <I>f</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::SFace_cycle_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterating all sface cycles of\n  an sface <I>f</I>.  The iterator has method <I>bool is_svertex()</I>,\n  <I>bool is_shalfedge()</I>, <I>bool is_shalfloop()</I>, and can be\n  converted to the corresponding handles <I>SVertex_const_handle</I>,\n  <I>SHalfedge_const_handle</I>, or <I>SHalfloop_const_handle</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::Mark\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    attributes of objects (vertices, edges, faces).\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::size_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    size type\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Boundary\"></A>\n<A NAME=\"Enum_Boundary\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">Boundary</A> { <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">EXCLUDED</A><A NAME=\"Function_Boundary\"></A>\n, <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">INCLUDED</A><A NAME=\"Function_Boundary\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    construction selection.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Content\"></A>\n<A NAME=\"Enum_Content\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">Content</A> { <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">EMPTY</A><A NAME=\"Function_Content\"></A>\n, <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">COMPLETE</A><A NAME=\"Function_Content\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    construction selection.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt; N ( <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">Content</A> sphere = <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">EMPTY</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates\n  an instance <I>N</I> of type <I><A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;</I> and\n  initializes it to the empty set if <I>sphere == <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">EMPTY</A></I> and to the\n  whole sphere if <I>sphere == <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">COMPLETE</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt; N ( Sphere_circle c,  <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">Boundary</A> circle = <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">INCLUDED</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a Nef polyhedron <I>N</I> containing the\n  half-sphere left of <I>c</I> including <I>c</I> if\n  <I>circle==<A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">INCLUDED</A></I>, excluding <I>c</I> if <I>circle==<A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">EXCLUDED</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class Forward_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt; N ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Forward_iterator first,<BR>\n\nForward_iterator beyond,<BR>\n\n<A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">Boundary</A> b = <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">INCLUDED</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a Nef polyhedron <I>N</I>\n  from the set of sphere segments in the iterator range\n  <I>[first,beyond)</I>. If the set of sphere segments is a simple\n  polygon that separates the sphere surface into two regions, then the\n  polygonal region that is left of the segment <I>*first</I> is\n  selected. The polygonal region includes its boundary if <I>b =     <A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">INCLUDED</A></I> and excludes the boundary otherwise.\n  <I>Forward_iterator</I> has to be an iterator with value type\n  <I>Sphere_segment</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear6Content_plane_=_EMPTY9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.clear ( <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">Content</A> plane = <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">EMPTY</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    makes <I>N</I> the\n  empty set if <I>plane == <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">EMPTY</A></I> and the full plane if <I>plane     == <A HREF=\"Class_Nef_polyhedron_S2#Enum_Content\">COMPLETE</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_empty69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.is_empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>N</I> is empty, false\n  otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_sphere69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.is_sphere ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true if <I>N</I> is the whole\n  sphere, false otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Constructive Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_complement69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.complement ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the complement\n  of <I>N</I> in the plane.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_interior69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.interior ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the interior of\n  <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_closure69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.closure ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the closure of\n  <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_boundary69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.boundary ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the boundary of\n  <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_regularization69_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.regularization ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the\n  regularized polyhedron (closure of interior).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_intersection6const_Nef_polyhedron_S26K9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> (  <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt; N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cap.gif\"> </I></MATH> <I>N1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_join6const_Nef_polyhedron_S26K9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.join (  <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt; N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> </I></MATH> <I>N1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_difference6const_Nef_polyhedron_S26K9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.difference (  <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt; N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>N</I> <MATH><I>-</I></MATH> <I>N1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Nef_polyhedron_S26K9_symmetric_difference6_const_Nef_polyhedron_S26K9__N19_;\"></A>\n<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.symmetric_difference (  <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;K&gt; N1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the symmectric difference\n  <I>N - T</I> <MATH><I> <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> </I></MATH> <I>T - N</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nAdditionally there are operators <I>*,+,-,^,!</I> which implement the\nbinary operations <I><A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I>, <I>union</I>,\n<I>difference</I>, <I>symmetric difference</I>, and the unary\noperation <I>complement</I> respectively. There are also the\ncorresponding modification operations <I>*=,+=,-=,^=</I>.\n<P>\n\nThere are also comparison operations like <I>&lt;,&lt;=,&gt;,&gt;=,==,!=</I> which\nimplement the relations subset, subset or equal, superset, superset or\nequal, equality, inequality, respectively.\n<P>\n\n<H3>Statistics and Integrity</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_svertices69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_svertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of\n  svertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_shalfedges69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_shalfedges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of\n  shalfedges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_sedges69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_sedges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of sedges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_shalfloops69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_shalfloops ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of\n  shalfloops.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_sloops69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_sloops ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of sloops.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_sfaces69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_sfaces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of sfaces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_sface_cycles69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_sface_cycles ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of\n  sface cycles.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_connected_components69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.number_of_connected_components ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    calculates the\n  number of connected components of <I>P</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_print_statistics6std::ostream__os_=_std::cout9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.print_statistics ( std::ostream&amp; os = std::cout)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    print\n  the statistics of <I>P</I>: the number of vertices, edges, and faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_check_integrity_and_topological_planarity6bool_faces=true9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    N.check_integrity_and_topological_planarity ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    bool faces=true)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks the link structure and the genus of <I>P</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Exploration - Point location - Ray shooting</H3> As Nef\npolyhedra are the result of forming complements and intersections\nstarting from a set <I>H</I> of half-spaces that are defined by\noriented lines in the plane, they can be represented by an attributed\nplane map <MATH><I>M = (V,E,F)</I></MATH>. For topological queries within <I>M</I> the\nfollowing types and operations allow exploration access to this\nstructure.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>&lt;Traits&gt;::Object_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a generic handle to an object of the\n  underlying plane map. The kind of object <I>(vertex, halfedge,     face)</I> can be determined and the object can be assigned to a\n  corresponding\n  handle by the three functions:<BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Vertex_const_handle&amp; h, Object_handle)</I><BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Halfedge_const_handle&amp; h, Object_handle)</I><BR>\n\n<I>bool <A HREF=\"../Kernel_23_ref/Function_assign.html#Cross_link_anchor_90\">assign</A>(Face_const_handle&amp; h, Object_handle)</I><BR>\n\nwhere each function returns <I>true</I> iff the assignment to <I>h</I>\n  was done.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contains6Object_handle_h9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.contains ( Object_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff the\n  object <I>h</I> is contained in the set represented by <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contained_in_boundary6Object_handle_h9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.contained_in_boundary ( Object_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true\n  iff the object <I>h</I> is contained in the <MATH><I>1</I></MATH>-skeleton of <I>N</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_locate6const_Sphere_point__p9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.locate (  Sphere_point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a\n  generic handle <I>h</I> to an object (face, halfedge, vertex) of the\n  underlying plane map that contains the point <I>p</I> in its relative\n  interior. The point <I>p</I> is contained in the set represented by\n  <I>N</I> if <I>N.contains(h)</I> is true. The location mode flag\n  <I>m</I> allows one to choose between different point location\n  strategies.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_ray_shoot6const_Sphere_point__p+_const_Sphere_direction__d9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    N.ray_shoot (  Sphere_point p,  Sphere_direction d)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a handle <I>h</I> with\n  <I>N.contains(h)</I> that can be converted to a\n  <I>Vertex_/Halfedge_/Face_const_handle</I> as described above. The\n  object returned is intersected by the ray starting in <I>p</I> with\n  direction <I>d</I> and has minimal distance to <I>p</I>.  The\n  operation returns the null handle <I>NULL</I> if the ray shoot along\n  <I>d</I> does not hit any object <I>h</I> of <I>N</I> with\n  <I>N.contains(h)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Object_handle_ray_shoot_to_boundary6const_Sphere_point__p+_const_Sphere_direction__d9_;\"></A>\nObject_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    N.ray_shoot_to_boundary ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Sphere_point p,<BR>\n\nSphere_direction d)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a handle <I>h</I> that can be\n  converted to a <I>Vertex_/Halfedge_const_handle</I> as described\n  above. The object returned is part of the <MATH><I>1</I></MATH>-skeleton of <I>N</I>,\n  intersected by the ray starting in <I>p</I> with direction <I>d</I>\n  and has minimal distance to <I>p</I>.  The operation returns the null\n  handle <I>NULL</I> if the ray shoot along <I>d</I> does not hit any\n  <MATH><I>1</I></MATH>-skeleton object <I>h</I> of <I>N</I>. The location mode flag\n  <I>m</I> allows one to choose between different point location\n  strategies.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Iteration</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_shalfloop69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.has_shalfloop ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff there is \n  a shalfloop.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_SHalfloop_const_handle_shalfloop69_const;\"></A>\nSHalfloop_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    N.shalfloop ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns access to the\n  sloop.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe list of all objects can be accessed via iterator ranges.\nFor comfortable iteration we also provide iterations macros. \nThe iterator range access operations are of the following kind:<BR>\n\n<I>SVertex_iterator   svertices_begin()/svertices_end()</I><BR>\n\n<I>SHalfedge_iterator shalfedges_begin()/shalfedges_end()</I><BR>\n\n<I>SHalfloop_iterator shalfloops_begin()/shalfloops_end()</I><BR>\n\n<I>SFace_iterator     sfaces_begin()/sfaces_end()</I>\n<P>\n\nThe macros are then <I>CGAL_forall_svertices(v,M)</I>,\n<I>CGAL_forall_shalfedges(e,M)</I>, <I>CGAL_forall_sfaces(f,M)</I>,\n<I>CGAL_forall_sface_cycles_of(fc,F)</I> where <I>M</I> is a sphere map\nand <I>F</I> is a sface.\n<P>\n\n<H3>Input and Output</H3> A Nef polyhedron <I>N</I> can be\nvisualized in an open GL window. The output operator is defined in the\nfile <I>CGAL/IO/Nef_-poly-hedron_2_-Win-dow_-stream.h</I>.\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nNef polyhedra are implemented on top of a halfedge data structure and\nuse linear space in the number of vertices, edges and facets.\nOperations like <I>empty</I> take constant time. The operations\n<I>clear</I>, <I>complement</I>, <I>interior</I>, <I>closure</I>,\n<I>boundary</I>, <I>regularization</I>, input and output take linear\ntime. All binary set operations and comparison operations take time\n<MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> where <MATH><I>n</I></MATH> is the size of the output plus the size of the\ninput.\n<P>\n\nThe point location and ray shooting operations are implemented in the\nnaive way. The operations run in linear query time without any\npreprocessing.\n<P>\n\n<H3>Example</H3>\n<P>\n\nNef polyhedra are parameterized by a standard CGAL kernel. The example\ncomputes the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two Nef polyhedra <I>N1</I> and <I>N2</I>.\n<P>\n\n<pre class=\"ExampleCode\">// examples/Nef_S2/simple.C\n\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1364\">Gmpz</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_727\">Nef_polyhedron_S2</A>.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A> RT;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt;RT&gt; <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>;\ntypedef <A HREF=\"Class_Nef_polyhedron_S2.html#Cross_link_anchor_726\">CGAL::Nef_polyhedron_S2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; Nef_polyhedron;\ntypedef Nef_polyhedron::Sphere_circle Sphere_circle;\n\nint main()\n{\n  Nef_polyhedron N1(Sphere_circle(1,0,0));\n  Nef_polyhedron N2(Sphere_circle(0,1,0), Nef_polyhedron::<A HREF=\"Class_Nef_polyhedron_S2#Enum_Boundary\">EXCLUDED</A>);\n  Nef_polyhedron N3 = N1 * N2;\n  return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Nef_polyhedron_S2-Traits---Sphere_point.html\"><I>Nef_polyhedron_S2&lt;Traits&gt;::Sphere_point</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_14!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 42249.0}