{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Sphere d Kernel Definition An instance S of the data type Sphere d is an oriented sphere in some d dimensional space A sphere is defined by d 1 points class Point d Kernel We use A to denote the array of the defining points A set A of defining points is legal if either the points are affinely independent or if the points are all equal Only a legal set of points defines a sphere in the geometric sense and hence many operations on spheres require the set of defining points to be legal The orientation of S is equal to the orientation of the defining points i e orientation A Types Sphere d Kernel R the representation type Sphere d Kernel RT the ring type Sphere d Kernel FT the field type Sphere d Kernel LA the linear algebra layer Sphere d Kernel point iterator a read only iterator for points defining the sphere Creation Sphere d Kernel S introduces a variable S of type Sphere d Kernel template class ForwardIterator Sphere d Kernel S int d ForwardIterator first ForwardIterator last introduces a variable S of type Sphere d Kernel S is initialized to the sphere through the points in A tuple first last Precondition A consists of d 1 d dimensional points Requirement The value type of ForwardIterator is Point d Kernel Operations int S dimension returns the dimension of the ambient space Point d Kernel S point int i returns the ith defining point Precondition i dim point iterator S points begin returns an iterator pointing to the first defining point point iterator S points end returns an iterator pointing beyond the last defining point bool S is degenerate returns true iff the defining points are not full dimensional bool S is legal returns true iff the set of defining points is legal A set of defining points is legal iff their orientation is non zero or if they are all equal Point d Kernel S center returns the center of S Precondition S is legal FT S squared radius returns the squared radius of the sphere Precondition S is legal Orientation S orientation returns the orientation of S Oriented side S oriented side Point d Kernel p returns either the constant ON ORIENTED BOUNDARY ON POSITIVE SIDE or ON NEGATIVE SIDE iff p lies on the boundary properly on the positive side or properly on the negative side of sphere resp Precondition S dimension p dimension Bounded side S bounded side Point d Kernel p returns ON BOUNDED SIDE ON BOUNDARY or ON UNBOUNDED SIDE iff p lies properly inside on the boundary or properly outside of sphere resp Precondition S dimension p dimension bool S has on positive side Point d Kernel p returns S oriented side p ON POSITIVE SIDE Precondition S dimension p dimension bool S has on negative side Point d Kernel p returns S oriented side p ON NEGATIVE SIDE Precondition S dimension p dimension bool S has on boundary Point d Kernel p returns S oriented side p ON ORIENTED BOUNDARY which is the same as S bounded side p ON BOUNDARY Precondition S dimension p dimension bool S has on bounded side Point d Kernel p returns S bounded side p ON BOUNDED SIDE Precondition S dimension p dimension bool S has on unbounded side Point d Kernel p returns S bounded side p ON UNBOUNDED SIDE Precondition S dimension p dimension Sphere d Kernel S opposite returns the sphere with the same center and squared radius as S but with opposite orientation Sphere d Kernel S Vector d Kernel v returns the sphere translated by v Precondition S dimension v dimension Non Member Functions bool weak equality S1 S2 Test for equality as unoriented spheres Precondition S1 dimension S2 dimension Implementation Spheres are implemented by a vector of points as a handle type All operations like creation initialization tests input and output of a sphere s take time O s dimension dimension point access take constant time The center operation takes time O d3 on its first call and constant time thereafter The sideness and orientation tests take time O d3 The space requirement for spheres is O s dimension neglecting the storage room of the points Next Iso box d Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_d_ref/Class_Sphere_d.html", "title": "sphere_d&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_d_ref/Sphere_d.tex' -->\n<html> <head>  \n<title>Sphere_d&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_500\"></A>\n\n<A NAME=\"Cross_link_anchor_501\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_374\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Sphere_d<Kernel>\"></A>\n<h2><I>CGAL::Sphere_d&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <MATH><I>S</I></MATH> of the data type <I><A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A></I> is an oriented sphere\nin some <MATH><I>d</I></MATH>-dimensional space. A sphere is defined by <MATH><I>d+1</I></MATH> points\n(class <I><A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>). We use <MATH><I>A</I></MATH> to denote the array of the\ndefining points.  A set <MATH><I>A</I></MATH> of defining points is <I>legal</I> if\neither the points are affinely independent or if the points are all\nequal. Only a legal set of points defines a sphere in the geometric\nsense and hence many operations on spheres require the set of defining\npoints to be legal.  The <A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> of <MATH><I>S</I></MATH> is equal to the\n<A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> of the defining points, i.e., <I><A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A>(A)</I>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::R\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the representation type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the ring type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the field type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::LA\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the linear algebra layer.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::point_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a read-only iterator for points defining\nthe sphere.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; S;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable <I>S</I>\nof type <I><A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class ForwardIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; S ( int d,  ForwardIterator first,  ForwardIterator last);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a variable\n<I>S</I> of type <I><A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>. <I>S</I> is initialized to the\nsphere through the points in <I>A = tuple [first,last)</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>A</I></MATH> consists of <MATH><I>d+1</I></MATH> <MATH><I>d</I></MATH>-dimensional points.<BR>\n\n<EM>Requirement: </EM>The value type of ForwardIterator is <I><A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the dimension of the ambient space.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_point6int_i9_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.point ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <MATH><I>i</I></MATH>th defining\npoint.<BR>\n\n<EM>Precondition: </EM><MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <I>dim</I></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_point_iterator_points_begin69_;\"></A>\npoint_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.points_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator\n  pointing to the first defining point.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_point_iterator_points_end69_;\"></A>\npoint_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.points_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator pointing\n  beyond the last defining point.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.is_degenerate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff the defining points\n  are not full dimensional.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_legal69_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.is_legal ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff the set of defining\n  points is legal.  A set of defining points is legal iff their\n  <A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> is non-zero or if they are all equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_d6Kernel9_center69_;\"></A>\n<A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.center ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the center of <I>S</I>.<BR>\n\n<EM>Precondition: </EM><I>S</I> is legal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_FT_squared_radius69_;\"></A>\nFT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.<A HREF=\"../Kernel_23_ref/Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A> ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the squared radius of the\n  sphere.<BR>\n\n<EM>Precondition: </EM><I>S</I> is legal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Orientation_orientation69_;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.<A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> of\n  <I>S</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_oriented_side6const_Point_d6Kernel9__p9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.oriented_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  either the constant <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I>,\n  <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I>, or <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I>, iff p lies on the\n  boundary, properly on the positive side, or properly on the negative\n  side of sphere, resp.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bounded_side_bounded_side6const_Point_d6Kernel9__p9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_99\">Bounded_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.bounded_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A></I>, <I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A></I>, or <I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A></I>\n  iff p lies properly inside, on the boundary, or properly outside of\n  sphere, resp.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_positive_side_6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.has_on_positive_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I>S.oriented_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_negative_side_6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.has_on_negative_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I>S.oriented_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_boundary_6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.has_on_boundary (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I>S.oriented_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I>, which is the same as\n  <I>S.bounded_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A></I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_bounded_side_6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.has_on_bounded_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I>S.bounded_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A></I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_unbounded_side_6const_Point_d6Kernel9__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    S.has_on_unbounded_side (  <A HREF=\"Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n  <I>S.bounded_side(p)==<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A></I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==p.dimension()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Sphere_d6Kernel9_opposite69_;\"></A>\n<A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    S.<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the sphere with the same\n  center and squared radius as <I>S</I> but with <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> <A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Sphere_d.html#Cross_link_anchor_501\">Sphere_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     S +  <A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v<A NAME=\"Function_Sphere_d6Kernel9_operator+6const_Vector_d6Kernel9__v9_;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the\n  sphere translated by <I>v</I>.<BR>\n\n<EM>Precondition: </EM><I>S.dimension()==v.dimension()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Non-Member Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_weak_equality6const_Sphere_d6Kernel9__S1+_const_Sphere_d6Kernel9__S29_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    weak_equality (  S1,  S2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for equality as unoriented spheres.<BR>\n\n<EM>Precondition: </EM><I>S1.dimension()==S2.dimension()</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nSpheres are implemented by a vector of points as a handle type.  All\noperations like creation, initialization, tests, input and output of a\nsphere <MATH><I>s</I></MATH> take time <MATH><I>O(<I>s.dimension()</I>)</I></MATH>. <I>dimension()</I>,\npoint access take constant time.  The <I>center()</I>-operation takes\ntime <MATH><I>O(d<SUP>3</SUP>)</I></MATH> on its first call and constant time thereafter. The\nsideness and <A HREF=\"Function_orientation.html#Cross_link_anchor_537\">orientation</A> tests take time <MATH><I>O(d<SUP>3</SUP>)</I></MATH>.  The space\nrequirement for spheres is <MATH><I>O(<I>s.dimension()</I>)</I></MATH> neglecting the\nstorage room of the points.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Iso_box_d.html\"><I>Iso_box_d&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37581.0}