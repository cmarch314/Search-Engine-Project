{"text": "Navigation Up Table of Contents Bibliography Index Title Page HalfedgeDS Traits Items Alloc Release Note Beginning with CGAL R2 3 this package has a new design The old design is still available for backwards compatibility and to support older compiler such as MSVC 6 However its use is deprecated and the manual pages are not converted into this new manual format Instead see its old documentation in the manual of deprecated packages The two designs are not interchangeable Definition The concept of a halfedge data structure abbreviated as HalfedgeDS or HDS for template parameters defines an edge centered data structure capable of maintaining incidence informations of vertices edges and faces for example for planar maps or polyhedral surfaces It is a combinatorial data structure geometric interpretation is added by classes built on top of the halfedge data structure The data structure defined here is known as the FE structure Wei85 as halfedges M n88 BFH95 or as the doubly connected edge list DCEL dBvKOS97 although the original reference for the DCEL MP78 describes a different data structure The halfedge data structure can also be seen as one of the variants of the quad edge data structure GS85 In general the quad edge data can represent non orientable 2 manifolds but the variant here is restricted to orientable 2 manifolds only An overview and comparison of these different data structures together with a thorough description of the design implemented here can be found in Ket99 Each edge is represented by two halfedges with opposite orientations Each halfedge can store a reference to an incident face and an incident vertex For each face and each vertex an incident halfedge is stored Reduced variants of the halfedge data structure can omit some of these incidences for example the reference to halfedges in vertices or the storage of vertices at all See Figure for the incidences the mandatory and optional member functions possible for vertices halfedges and faces Figure The three classes Vertex Halfedge and Face of the halfedge data structure Member functions with shaded background are mandatory The others are optionally supported A HalfedgeDS Traits Items Alloc organizes the internal storage of its items Examples are a list based or a vector based storage The HalfedgeDS Traits Items Alloc exhibits most of the characteristics of the container class used internally for example the iterator category A vector resizes automatically when a new item exceeds the reserved space Since resizing is an expensive operation for a HalfedgeDS Traits Items Alloc in general and only possible in a well defined state of the data structure no dangling handles it must be called explicitly in advance for a HalfedgeDS Traits Items Alloc before inserting new items beyond the current capacity Classes built on top of a HalfedgeDS Traits Items Alloc are advised to call the reserve member function before creating new items Parameters A HalfedgeDS Traits Items Alloc is a class template and will be used as argument for other class templates for example CGAL Polyhedron 3 The template parameters to instantiate the HalfedgeDS Traits Items Alloc will be provided by this other class template Therefore the three template parameters and their meaning are mandatory We distinguish between the template HalfedgeDS Traits Items Alloc and an instantiation of it Traits is a traits class that will be passed to the item types in Items It will not be used in HalfedgeDS Traits Items Alloc itself Items is a model of the HalfedgeDSItems concept Alloc is a standard allocator that fulfills all requirements of allocators for STL container classes The rebind mechanism from Alloc will be used to create appropriate allocators internally A default argument is mandatory for Alloc for example the macro CGAL ALLOCATOR int from the CGAL memory h header file can be used as default allocator Types HalfedgeDS Traits Items Alloc Traits traits class HalfedgeDS Traits Items Alloc Items model of HalfedgeDSItems concept HalfedgeDS Traits Items Alloc size type size type HalfedgeDS Traits Items Alloc difference type difference type HalfedgeDS Traits Items Alloc iterator category iterator category for all iterators HalfedgeDS Traits Items Alloc allocator type allocator type Alloc HalfedgeDS Traits Items Alloc Vertex model of HalfedgeDSVertex concept HalfedgeDS Traits Items Alloc Halfedge model of HalfedgeDSHalfedge concept HalfedgeDS Traits Items Alloc Face model of HalfedgeDSFace concept The following handles and iterators have appropriate non mutable counterparts i e const handle and const iterator The mutable types are assignable to their non mutable counterparts The iterators are assignable to the respective handle types Wherever the handles appear in function parameter lists the corresponding iterators can be used as well Note The handle types must have a default constructor that creates a unique and always the same handle value It will be used in analogy to NULL for pointers HalfedgeDS Traits Items Alloc Vertex handle handle to vertex HalfedgeDS Traits Items Alloc Halfedge handle handle to halfedge HalfedgeDS Traits Items Alloc Face handle handle to face HalfedgeDS Traits Items Alloc Vertex iterator iterator over all vertices HalfedgeDS Traits Items Alloc Halfedge iterator iterator over all halfedges HalfedgeDS Traits Items Alloc Face iterator iterator over all faces advanced Types for Tagging Optional Features The following types are equal to either CGAL Tag true or CGAL Tag false depending on whether the named feature is supported or not HalfedgeDS Traits Items Alloc Supports vertex halfedge Vertex halfedge HalfedgeDS Traits Items Alloc Supports halfedge prev Halfedge prev HalfedgeDS Traits Items Alloc Supports halfedge vertex Halfedge vertex HalfedgeDS Traits Items Alloc Supports halfedge face Halfedge face HalfedgeDS Traits Items Alloc Supports face halfedge Face halfedge HalfedgeDS Traits Items Alloc Supports removal removal of individual elements The following dependencies among these options must be regarded Vertices are supported Supports halfedge vertex CGAL Tag true Faces are supported Supports halfedge face CGAL Tag true Supports vertex halfedge CGAL Tag true Supports halfedge vertex CGAL Tag true Supports vertex point CGAL Tag true Supports halfedge vertex CGAL Tag true Supports face halfedge CGAL Tag true Supports halfedge face CGAL Tag true advanced advanced Static Member Functions When writing an items type such as a user defined vertex certain functions need to create a handle but knowing only a pointer for example the this pointer The following static member functions of HalfedgeDS Traits Items Alloc create such a corresponding handle for an item type from a pointer This conversion encapsulates possible adjustments for hidden data members in the true item type such as linked list pointers Note that the user provides item types with the Items template argument which may differ from the Vertex Halfedge and Face types defined in HalfedgeDS Traits Items Alloc If they differ they are derived from the user provided item types We denote the user item types with Vertex base Halfedge base and Face base in the following The fully qualified name for Vertex base would be for example assuming that the type Self refers to the instantiated HalfedgeDS typedef typename Items template Vertex wrapper Self Traits Vertex wrapper typedef typename Vertex wrapper Vertex Vertex base Implementing these functions relies on the fundamental assumption that an iterator or handle of the internally used container class can be constructed from a pointer of a contained item only This is true and controlled by us for CGAL In place list It is true for the std vector of major STL distributions but not necessarily guaranteed We might switch to an internal implementation if need arises static Vertex handle HalfedgeDS vertex handle Vertex base v static Vertex const handle HalfedgeDS vertex handle const Vertex base v static Halfedge handle HalfedgeDS halfedge handle Halfedge base h static Halfedge const handle HalfedgeDS halfedge handle const Halfedge base h static Face handle HalfedgeDS face handle Face base f static Face const handle HalfedgeDS face handle const Face items f advanced Creation HalfedgeDS Traits Items Alloc hds empty halfedge data structure HalfedgeDS Traits Items Alloc hds size type v size type h size type f storage reserved for v vertices h halfedges and f faces HalfedgeDS Traits Items Alloc hds hds2 copy constructor Precondition hds2 contains no dangling handles HalfedgeDS Traits Items Alloc hds hds2 assignment operator Precondition hds2 contains no dangling handles void hds reserve size type v size type h size type f reserves storage for v vertices h halfedges and f faces If all capacities are already greater or equal than the requested sizes nothing happens Otherwise hds will be resized and all handles iterators and circulators invalidate Precondition If resizing is necessary hds contains no dangling handles Access Member Functions Size hds size of vertices number of vertices Size hds size of halfedges number of halfedges Size hds size of faces number of faces Size hds capacity of vertices space reserved for vertices Size hds capacity of halfedges space reserved for halfedges Size hds capacity of faces space reserved for faces size t hds bytes bytes used for hds size t hds bytes reserved bytes reserved for hds allocator type hds get allocator allocator object The following member functions return the non mutable iterator if hds is declared const Vertex iterator hds vertices begin iterator over all vertices Vertex iterator hds vertices end Halfedge iterator hds halfedges begin iterator over all halfedges Halfedge iterator hds halfedges end Face iterator hds faces begin iterator over all faces Face iterator hds faces end Insertion Note that the vertex related and the face related member functions may not be provided for a HalfedgeDS Traits Items Alloc that does not support vertices or faces respectively Vertex handle hds vertices push back const Vertex v appends a copy of v to hds Returns a handle of the new vertex Halfedge handle hds edges push back const Halfedge h const Halfedge g appends a copy of h and a copy of g to hds and makes them opposite to each other Returns a handle of the copy of h Halfedge handle hds edges push back const Halfedge h appends a copy of h and a copy of h opposite to hds and makes them opposite to each other Returns a handle of the copy of h Precondition h opposite denotes a halfedge Face handle hds faces push back const Face f appends a copy of f to hds Returns a handle of the new face Removal Erasing single elements is optional and indicated with the type tag Supports removal The pop back and the clear member functions are mandatory If vertices or faces are not supported for a HalfedgeDS Traits Items Alloc the pop back and the clear member functions must be provided as null operations void hds vertices pop front removes the first vertex if vertices are supported and Supports removal CGAL Tag true void hds vertices pop back removes the last vertex void hds vertices erase Vertex handle v removes the vertex v if vertices are supported and Supports removal CGAL Tag true void hds vertices erase Vertex handle first Vertex handle last removes the range of vertices first last if vertices are supported and Supports removal CGAL Tag true void hds edges pop front removes the first two halfedges if Supports removal CGAL Tag true void hds edges pop back removes the last two halfedges void hds edges erase Halfedge handle h removes the pair of halfedges h and h opposite if Supports removal CGAL Tag true void hds edges erase Halfedge handle first Halfedge handle last removes the range of edges first last if Supports removal CGAL Tag true void hds faces pop front removes the first face if faces are supported and Supports removal CGAL Tag true void hds faces pop back removes the last face void hds faces erase Face handle f removes the face f if faces are supported and Supports removal CGAL Tag true void hds faces erase Face handle first Face handle last removes the range of faces first last if faces are supported and Supports removal CGAL Tag true void hds vertices clear removes all vertices void hds edges clear removes all halfedges void hds faces clear removes all faces void hds clear removes all elements advanced Operations with Border Halfedges The following notion of border halfedges is particular useful where the halfedge data structure is used to model surfaces with boundary i e surfaces with missing faces or open regions Halfedges incident to an open region are called border halfedges A halfedge is a border edge if the halfedge itself or its opposite halfedge is a border halfedge The only requirement to work with border halfedges is that the Halfedge class provides a member function is border returning a bool Usually the halfedge data structure supports faces and the value of the default constructor of the face handle will indicate a border halfedge but this may not be the only possibility The is border predicate divides the edges into two classes the border edges and the non border edges The following normalization reorganizes the sequential storage of the edges such that the non border edges precede the border edges and that for each border edge the latter of the two halfedges is a border halfedge the first one might be a border halfedge too The normalization stores the number of border halfedges as well as the halfedge iterator where the border edges start at within the halfedge data structure These values will be invalid after further halfedge insertions or removals and changes in the border status of a halfedge There is no automatic update required void hds normalize border sorts halfedges such that the non border edges precede the border edges For each border edge that is incident to a face the halfedge iterator will reference the halfedge incident to the face right before the halfedge incident to the open region Size hds size of border halfedges const number of border halfedges An edge with no incident face counts as two border halfedges Precondition normalize border has been called and no halfedge insertion or removal and no change in border status of the halfedges have occurred since then Size hds size of border edges const number of border edges If size of border edges is equal to size of border halfedges all border edges are incident to a face on one side and to an open region on the other side Precondition normalize border has been called and no halfedge insertion or removal and no change in border status of the halfedges have occurred since then Halfedge iterator hds border halfedges begin halfedge iterator starting with the border edges The range halfedges begin border halfedges begin denotes all non border edges The range border halfedges begin halfedges end denotes all border edges Precondition normalize border has been called and no halfedge insertion or removal and no change in border status of the halfedges have occurred since then advanced Has Models CGAL HalfedgeDS default CGAL HalfedgeDS list CGAL HalfedgeDS vector See Also HalfedgeDSItems CGAL Polyhedron 3 Traits CGAL HalfedgeDS vertex base Refs CGAL HalfedgeDS halfedge base Refs CGAL HalfedgeDS face base Refs CGAL HalfedgeDS items decorator HDS CGAL HalfedgeDS decorator HDS CGAL HalfedgeDS const decorator HDS Implementation Classes parameterized with a halfedge data structure such as CGAL Polyhedron 3 need to declare a class template as one of its template parameters for the HalfedgeDS Traits Items Alloc For compilers not supporting this i e the flag CGAL CFG NO TMPL IN TMPL PARAM is set the following workaround is required which defines a HalfedgeDS Traits Items Alloc as a normal class that contains a member class template named HDS which is the actual halfedge data structure as defined here The following program fragment illustrates this workaround ifndef CGAL CFG NO TMPL IN TMPL PARAM template class Traits class Items class Alloc class HalfedgeDS public typedef HalfedgeDS Traits Items Alloc Self HalfedgeDS vector constructors else struct HalfedgeDS template class Traits class Items class Alloc class HDS public typedef HDS Traits Items Alloc Self HDS constructors endif further member functions Self denotes the HalfedgeDS ifdef CGAL CFG NO TMPL IN TMPL PARAM endif Next HalfedgeDSFace Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/HalfedgeDS_ref/Concept_HalfedgeDS.html", "title": "halfedgeds&lt;traits,items,alloc&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './HalfedgeDS_ref/HalfedgeDS.tex' -->\n<html> <head>  \n<title>HalfedgeDS&lt;Traits,Items,Alloc&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_873\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_851\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_HalfedgeDS<Traits,Items,Alloc>\"></A>\n<h2><I>HalfedgeDS&lt;Traits,Items,Alloc&gt;</I></h2>\n\n\n<A NAME=\"ccRef_HalfedgeDS\"></A>\n<P>\n\n<H3>Release Note</H3>\n<P>\n\nBeginning with C<SMALL>GAL</SMALL> R2.3, this package has a new design.  The old\ndesign is still available for backwards compatibility and to support\nolder compiler, such as MSVC++6.0. However its use is deprecated and\nthe manual pages are not converted into this new manual\nformat. Instead, see its old documentation in the manual of \ndeprecated packages.  The two designs are not interchangeable.\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe concept of a halfedge data structure (abbreviated as <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>, or\n<I>HDS</I> for template parameters) defines an edge-centered data structure\ncapable of maintaining incidence informations of vertices, edges, and\nfaces, for example for planar maps or polyhedral surfaces. It is a\ncombinatorial data structure, geometric interpretation is added by\nclasses built on top of the halfedge data structure.\n<P>\n\nThe data structure defined here is known as the\nFE-structure&nbsp;[<A HREF=\"../biblio.html#Biblio_w-ebdss-85\">Wei85</A>], as\nhalfedges&nbsp;[<A HREF=\"../biblio.html#Biblio_m-ism-88\">M&auml;n88</A>, <A HREF=\"../biblio.html#Biblio_cgal:bfh-mgedm-95\">BFH95</A>] or as the doubly connected edge\nlist (DCEL)&nbsp;[<A HREF=\"../biblio.html#Biblio_bkos-cgaa-97\">dBvKOS97</A>], although the original reference for\nthe DCEL&nbsp;[<A HREF=\"../biblio.html#Biblio_mp-fitcp-78\">MP78</A>] describes a different data structure. The\nhalfedge data structure can also be seen as one of the variants of the\nquad-edge data structure&nbsp;[<A HREF=\"../biblio.html#Biblio_gs-pmgsc-85\">GS85</A>]. In general, the quad-edge\ndata can represent non-orientable 2-manifolds, but the variant here is\nrestricted to orientable 2-manifolds only. An overview and comparison\nof these different data structures together with a thorough\ndescription of the design implemented here can be found\nin&nbsp;[<A HREF=\"../biblio.html#Biblio_k-ugpdd-99\">Ket99</A>].\n<P>\n\nEach edge is represented by two halfedges with <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> orientations.\nEach halfedge can store a reference to an incident face and an\nincident vertex.  For each face and each vertex an incident halfedge\nis stored.  Reduced variants of the halfedge data structure can omit\nsome of these incidences, for example the reference to halfedges in\nvertices or the storage of vertices at all. See \nFigure&nbsp;\n  <A HREF=\"Concept_HalfedgeDS.html#figureOptionalMethods\"><IMG \n  SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference arrow\" WIDTH=\"10\" HEIGHT=\"10\"></A>\n\nfor the incidences, the mandatory and optional member functions\npossible for vertices, halfedges, and faces.\n<P>\n\n<CENTER>\n    <A NAME=\"figureOptionalMethods\">\n    <A HREF=\"fig/hds_optional.gif\">\n        <img src=\"fig/hds_optional_small.gif\" \n             alt=\"Class Diagram\"></A><BR>\n\n<A HREF=\"fig/hds_optional.gif\">Figure:</A>\n    The three classes <I>Vertex</I>, <I>Halfedge</I>, and \n          <I>Face</I> of the halfedge data structure. Member\n          functions with shaded background are mandatory. The others\n          are optionally supported.\n    </CENTER>\n<P>\n\nA <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> organizes the internal storage of its items.  Examples\nare a list-based or a vector-based storage. The <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> exhibits\nmost of the characteristics of the container class used internally,\nfor example the iterator category. A vector resizes\nautomatically when a new item exceeds the reserved space. Since\nresizing is an expensive operation for a <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> in general and\nonly possible in a well defined state of the data structure (no\ndangling handles), it must be called explicitly in advance for a\n<I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> before inserting new items beyond the current capacity.\nClasses built on top of a <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> are advised to call the\n<I>reserve()</I> member function before creating new items.\n<P>\n\n<H3>Parameters</H3>\n<P>\n\nA <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> is a class template and will be used as argument for\nother class templates, for example <I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_853\">CGAL::Polyhedron_3</A></I>. The\ntemplate parameters to instantiate the <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> will be provided by\nthis other class template. Therefore, the three template parameters\nand their meaning are mandatory. We distinguish between the template\n<I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> and an instantiation of it.\n<P>\n\n<I>Traits</I> is a traits class that will be passed to the \nitem types in <I>Items</I>. It will not be used in <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> itself. <I>Items</I> is a model of the <I><A HREF=\"Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I> concept.\n<I>Alloc</I> is a standard allocator that fulfills all requirements \nof allocators for STL container classes. The  <I>rebind</I>\nmechanism from <I>Alloc</I> will be used to create appropriate \nallocators internally. A default argument is mandatory for\n<I>Alloc</I>, for example, the macro <I>CGAL_ALLOCATOR(int)</I>\nfrom the <I>&lt;CGAL/memory.h&gt;</I> header file can be used as default\nallocator.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    traits class.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Items\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    model of <I><A HREF=\"Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I> concept.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::size_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    size type.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::difference_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    difference type.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::iterator_category\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator category for all iterators.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::allocator_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    allocator type <I>Alloc</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    model of <I><A HREF=\"Concept_HalfedgeDSVertex.html#Cross_link_anchor_877\">HalfedgeDSVertex</A></I> concept.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Halfedge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    model of <I><A HREF=\"Concept_HalfedgeDSHalfedge.html#Cross_link_anchor_875\">HalfedgeDSHalfedge</A></I> concept.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Face\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    model of <I><A HREF=\"Concept_HalfedgeDSFace.html#Cross_link_anchor_874\">HalfedgeDSFace</A></I> concept.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe following handles and iterators have appropriate non-mutable\ncounterparts, i.e., <I>const_handle</I> and <I>const_iterator</I>. The\nmutable types are assignable to their non-mutable counterparts. The\niterators are assignable to the respective handle types. Wherever the\nhandles appear in function parameter lists, the corresponding\niterators can be used as well. <B>Note:</B> The handle types must have\na default constructor that creates a unique and always the same handle\nvalue. It will be used in analogy to <I>NULL</I> for pointers.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to vertex.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Halfedge_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to halfedge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    handle to face.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator over all vertices.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Halfedge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator over all halfedges.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Face_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterator over all faces.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Types for Tagging Optional Features</H3>\n<P>\n\nThe following types are equal to either <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> or\n<I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>, depending on whether the named feature is\nsupported or not.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_vertex_halfedge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <I>Vertex::halfedge()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_halfedge_prev\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <I>Halfedge::prev()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_halfedge_vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <I>Halfedge::vertex()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_halfedge_face\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <I>Halfedge::face()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_face_halfedge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <I>Face::halfedge()</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;::Supports_removal\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    removal of individual elements.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe following dependencies among these options must be regarded:\n<P>\n\nVertices are supported <MATH><I> <IMG BORDER=0 WIDTH=28 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Longleftrightarrow.gif\"> </I></MATH>\n<I>Supports_halfedge_vertex</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.<BR>\n\nFaces are supported <MATH><I> <IMG BORDER=0 WIDTH=28 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Longleftrightarrow.gif\"> </I></MATH>\n<I>Supports_halfedge_face</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.<BR>\n\n<I>Supports_vertex_halfedge</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> <MATH><I> <IMG BORDER=0 WIDTH=25 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Longrightarrow.gif\"> </I></MATH>\n<I>Supports_halfedge_vertex</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.<BR>\n\n<I>Supports_vertex_point</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> <MATH><I> <IMG BORDER=0 WIDTH=25 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Longrightarrow.gif\"> </I></MATH>\n<I>Supports_halfedge_vertex</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.<BR>\n\n<I>Supports_face_halfedge</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I> <MATH><I> <IMG BORDER=0 WIDTH=25 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Longrightarrow.gif\"> </I></MATH>\n<I>Supports_halfedge_face</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n<H3>Static Member Functions</H3>\n<P>\n\nWhen writing an items type, such as a user defined vertex, certain\nfunctions need to create a handle but knowing only a pointer, for\nexample, the <I>this</I>-pointer. The following static member functions\nof <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> create such a corresponding handle for an item type\nfrom a pointer. This conversion encapsulates possible adjustments for\nhidden data members in the true item type, such as linked-list\npointers. Note that the user provides item types with the\n<I>Items</I> template argument, which may differ from the <I>Vertex</I>,\n<I>Halfedge</I>, and <I>Face</I> types defined in <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I>. If they \ndiffer, they are derived from the user provided item types. We denote the\nuser item types with <I>Vertex_base</I>, <I>Halfedge_base</I>, and\n<I>Face_base</I> in the following. The fully qualified name for \n<I>Vertex_base</I> would be for example - assuming that the type <I>Self</I>\nrefers to the instantiated <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I> -\n<P>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>typedef typename Items::template Vertex_wrapper&lt;Self,Traits&gt;                  Vertex_wrapper;</I><BR>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>typedef typename Vertex_wrapper::Vertex  Vertex_base;</I>\n<P>\n\nImplementing these functions relies on the fundamental assumption that\nan iterator (or handle) of the internally used container class can be\nconstructed from a pointer of a contained item only. This is true and\ncontrolled by us for <I><A HREF=\"../STL_Extension_ref/Class_In_place_list.html#Cross_link_anchor_1433\">CGAL::In_place_list</A></I>. It is true for the\n<I>std::vector</I> of major STL distributions, but not necessarily \nguaranteed. We might switch to an internal implementation if need\narises.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_static_Vertex_handle_HalfedgeDS::vertex_handle6_Vertex_base*_v9;\"></A>\nstatic Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::vertex_handle ( Vertex_base* v) \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_static_Vertex_const_handle_HalfedgeDS::vertex_handle6_const_Vertex_base*_v9;\"></A>\nstatic Vertex_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::vertex_handle ( const Vertex_base* v) \n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_static_Halfedge_handle_HalfedgeDS::halfedge_handle6_Halfedge_base*_h9;\"></A>\nstatic Halfedge_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::halfedge_handle ( Halfedge_base* h) \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_static_Halfedge_const_handle_HalfedgeDS::halfedge_handle6_const_Halfedge_base*_h9;\"></A>\nstatic Halfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::halfedge_handle ( const Halfedge_base* h) \n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_static_Face_handle_HalfedgeDS::face_handle6_Face_base*_f9;\"></A>\nstatic Face_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::face_handle ( Face_base* f) \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_static_Face_const_handle_HalfedgeDS::face_handle6_const_Face_items*_f9;\"></A>\nstatic Face_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>::face_handle ( const Face_items* f) \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt; hds;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    empty halfedge data structure.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt; hds ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    size_type v,<BR>\n\nsize_type h,<BR>\n\nsize_type f);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    storage reserved for <MATH><I>v</I></MATH> vertices, <MATH><I>h</I></MATH> halfedges, and <MATH><I>f</I></MATH> faces.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt; hds (  hds2);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    copy constructor.<BR>\n\n<EM>Precondition: </EM><I>hds2</I> contains no dangling handles.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;&amp;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     hds =  hds2<A NAME=\"Function_HalfedgeDS6Traits+Items+Alloc9__operator=6_const_HalfedgeDS6Traits+Items+Alloc9__hds29;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    assignment operator.<BR>\n\n<EM>Precondition: </EM><I>hds2</I> contains no dangling handles.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_reserve6_size_type_v+_size_type_h+_size_type_f9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.reserve ( size_type v,  size_type h,  size_type f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    reserves storage for <MATH><I>v</I></MATH> vertices, <MATH><I>h</I></MATH> halfedges, and <MATH><I>f</I></MATH> faces.\n     If all capacities are already greater or equal than the requested sizes\n     nothing happens. Otherwise, <I>hds</I> will be resized and all handles, \n     iterators and circulators invalidate.<BR>\n\n<EM>Precondition: </EM>If resizing is\n     necessary <I>hds</I> contains no dangling handles.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Member Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_size_of_vertices69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.size_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    number of vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_size_of_halfedges69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.size_of_halfedges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    number of halfedges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_size_of_faces69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.size_of_faces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    number of faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_capacity_of_vertices69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.capacity_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    space reserved for vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_capacity_of_halfedges69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.capacity_of_halfedges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    space reserved for halfedges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_capacity_of_faces69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.capacity_of_faces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    space reserved for faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_t_bytes69_const;\"></A>\nsize_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    hds.bytes ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    bytes used for <I>hds</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_t_bytes_reserved69_const;\"></A>\nsize_t\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.bytes_reserved ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    bytes reserved for <I>hds</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_allocator_type_get_allocator69_const;\"></A>\nallocator_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.get_allocator ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    allocator object.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe following member functions return the non-mutable iterator if\n<I>hds</I> is declared const.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_begin69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over all vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_iterator_vertices_end69;\"></A>\nVertex_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_end ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_begin69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.halfedges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over all halfedges\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_halfedges_end69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.halfedges_end ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_begin69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    hds.faces_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over all faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_iterator_faces_end69;\"></A>\nFace_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_end ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Insertion</H3>\n<P>\n\nNote that the vertex-related and the face-related member functions may\nnot be provided for a <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> that does not support vertices or\nfaces respectively.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_vertices_push_back6_const_Vertex__v9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_push_back ( const Vertex&amp; v) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    appends a copy of <MATH><I>v</I></MATH> to <I>hds</I>. Returns a handle of the new vertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_edges_push_back6_const_Halfedge__h+_const_Halfedge__g9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    hds.edges_push_back ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const Halfedge&amp; h,<BR>\n\nconst Halfedge&amp; g)</I></TD></TR></TABLE>\n     \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    appends a copy of <MATH><I>h</I></MATH> and a copy of <MATH><I>g</I></MATH> to <I>hds</I> and makes them\n     <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to each other. Returns a handle of the copy of <MATH><I>h</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_edges_push_back6_const_Halfedge__h9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.edges_push_back ( const Halfedge&amp; h) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    appends a copy of <MATH><I>h</I></MATH> and a copy of <MATH><I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I></MATH> to <I>hds</I> and \n     makes them <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to each other. Returns a handle of the copy of <MATH><I>h</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> denotes a halfedge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_faces_push_back6_const_Face__f9;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_push_back ( const Face&amp; f) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    appends a copy of <MATH><I>f</I></MATH> to <I>hds</I>. Returns a handle of the new face.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Removal</H3>\n<P>\n\nErasing single elements is optional and indicated with the type tag\n<I>Supports_removal</I>. The <I>pop_back</I> and the <I>clear</I> member \nfunctions are mandatory. If vertices or faces are not supported \nfor a <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> the <I>pop_back</I> and the <I>clear</I> member \nfunctions must be provided as null operations.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_vertices_pop_front69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_pop_front () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the first vertex if vertices are supported and\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_vertices_pop_back69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_pop_back () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the last vertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_vertices_erase6_Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_erase ( Vertex_handle v) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the vertex <MATH><I>v</I></MATH> if vertices are supported and\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_vertices_erase6_Vertex_handle_first+_Vertex_handle_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    hds.vertices_erase ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle first,<BR>\n\nVertex_handle last)</I></TD></TR></TABLE>\n     \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the range of vertices <MATH><I>[<I>first</I>,<I>last</I>)</I></MATH> if vertices \n    are supported and <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_edges_pop_front69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.edges_pop_front () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the first two halfedges if\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_edges_pop_back69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.edges_pop_back () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the last two halfedges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_edges_erase6_Halfedge_handle_h9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.edges_erase ( Halfedge_handle h) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the pair of halfedges <MATH><I>h</I></MATH> and <I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I>\n    if <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_edges_erase6_Halfedge_handle_first+_Halfedge_handle_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    hds.edges_erase ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle first,<BR>\n\nHalfedge_handle last)</I></TD></TR></TABLE>\n     \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the range of edges <MATH><I>[<I>first</I>,<I>last</I>)</I></MATH> if\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_faces_pop_front69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_pop_front () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the first face if faces are supported and\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_faces_pop_back69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_pop_back () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the last face.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_faces_erase6_Face_handle_f9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_erase ( Face_handle f) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the face <MATH><I>f</I></MATH> if faces are supported and\n    <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_faces_erase6_Face_handle_first+_Face_handle_last9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_erase ( Face_handle first,  Face_handle last) \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the range of faces <MATH><I>[<I>first</I>,<I>last</I>)</I></MATH> if faces are \n    supported and <I>Supports_removal</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_vertices_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.vertices_clear () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes all vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_edges_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.edges_clear () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes all halfedges.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_faces_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.faces_clear () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes all faces.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    hds.clear () \n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes all elements.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n\n<H3>Operations with Border Halfedges</H3>\n<P>\n\nThe following notion of <I>border halfedges</I> is particular useful\nwhere the halfedge data structure is used to model surfaces with\nboundary, i.e., surfaces with missing faces or open regions. Halfedges\nincident to an open region are called <I>border halfedges</I>. A\nhalfedge is a <I>border edge</I> if the halfedge itself or its\n<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> halfedge is a border halfedge. The only requirement to work\nwith border halfedges is that the\n<I>Halfedge</I> class provides a member function <I>is_border()</I>\nreturning a <I>bool</I>. Usually, the halfedge data structure\nsupports faces and the value of the default constructor of the face\nhandle will indicate a border halfedge, but this may not be the only\npossibility. The <I>is_border()</I> predicate divides the edges into\ntwo classes, the border edges and the non-border edges. The\nfollowing normalization reorganizes the sequential storage of the\nedges such that the non-border edges precede the border edges, and\nthat for each border edge the latter of the two halfedges is a\nborder halfedge (the first one might be a border halfedge too). The\nnormalization stores the number of border halfedges, as well as the\nhalfedge iterator where the border edges start at, within the\nhalfedge data structure.  These values will be invalid after further\nhalfedge insertions or removals and changes in the border status of \na halfedge. There is no automatic update required.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_normalize_border69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.normalize_border () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sorts halfedges such that the non-border edges precede the\n     border edges. For each border edge that is incident to a face,\n     the halfedge iterator will reference the halfedge incident to the\n     face right before the halfedge incident to the open region.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_size_of_border_halfedges69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.size_of_border_halfedges () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    number of border halfedges. An edge with no incident face\n      counts as two border halfedges.<BR>\n\n<EM>Precondition: </EM><I>normalize_border()</I> has been called and no\n    halfedge insertion or removal and no change in border\n    status of the halfedges have occurred since then.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_size_of_border_edges69_const;\"></A>\nSize\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.size_of_border_edges () const\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    number of border edges. If <I>size_of_border_edges()</I> is equal\n    to <I>size_of_border_halfedges()</I> all border edges are incident to\n    a face on one side and to an open region on the other side.<BR>\n\n<EM>Precondition: </EM><I>normalize_border()</I> has been called and no\n    halfedge insertion or removal and no change in border\n    status of the halfedges have occurred since then.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_iterator_border_halfedges_begin69;\"></A>\nHalfedge_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    hds.border_halfedges_begin () \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    halfedge iterator starting with the border edges. The range\n      [<I>halfedges_begin(), border_halfedges_begin()</I>) denotes\n    all non-border edges. The range\n    [<I>border_halfedges_begin(), halfedges_end()</I>) denotes all\n    border edges.<BR>\n\n<EM>Precondition: </EM><I>normalize_border()</I> has been called and no\n    halfedge insertion or removal and no change in border\n    status of the halfedges have occurred since then.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_HalfedgeDS_default.html#Cross_link_anchor_882\">CGAL::HalfedgeDS_default</A></I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_list.html#Cross_link_anchor_899\">CGAL::HalfedgeDS_list</A></I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_vector.html#Cross_link_anchor_901\">CGAL::HalfedgeDS_vector</A></I>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I><BR>\n\n<I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_853\">CGAL::Polyhedron_3</A>&lt;Traits&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_vertex_base.html#Cross_link_anchor_903\">CGAL::HalfedgeDS_vertex_base</A>&lt;Refs&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_halfedge_base.html#Cross_link_anchor_889\">CGAL::HalfedgeDS_halfedge_base</A>&lt;Refs&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_face_base.html#Cross_link_anchor_885\">CGAL::HalfedgeDS_face_base</A>&lt;Refs&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nClasses parameterized with a halfedge data structure, such as\n<I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_853\">CGAL::Polyhedron_3</A></I>, need to declare a class template as one of its\ntemplate parameters for the <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I>. For compilers not supporting\nthis (i.e.&nbsp;the flag <I>CGAL_CFG_NO_TMPL_IN_TMPL_PARAM</I> is set), the\nfollowing workaround is required, which defines a <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt;</I> as a\nnormal class that contains a member class template named <I>HDS</I>,\nwhich is the actual halfedge data structure as defined here. The\nfollowing program fragment illustrates this workaround:\n<P>\n\n<pre class=\"ExampleCode\">\n#ifndef CGAL_CFG_NO_TMPL_IN_TMPL_PARAM\n    template &lt;class Traits, class Items, class Alloc&gt; \n    class <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A> {\n    public:\n        typedef <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>&lt;Traits,Items,Alloc&gt; Self;\n        <A HREF=\"Class_HalfedgeDS_vector.html#Cross_link_anchor_902\">HalfedgeDS_vector</A>(); // constructors\n#else\n    struct <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A> {\n    template &lt;class Traits, class Items, class Alloc&gt; \n    class HDS {\n    public:\n        typedef HDS&lt;Traits,Items,Alloc&gt; Self;\n        HDS(); // constructors\n#endif\n        // ... further member functions. Self denotes the <A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>.\n    };\n#ifdef CGAL_CFG_NO_TMPL_IN_TMPL_PARAM\n    };\n#endif\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_HalfedgeDSFace.html\"><I>HalfedgeDSFace</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_30!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38778.0}