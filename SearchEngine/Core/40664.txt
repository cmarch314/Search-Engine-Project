{"text": " Home Trees Indices Help Package CHEM Package CombiCDB Module PatternMatchCounter hide private frames no frames Module PatternMatchCounter Given a set of SMARTS patterns and molecules counts how many times each SMARTS pattern i e functional group is found in each molecule Also includes a script to generate the output in a format easily inserted into the application database Assuming starting with some molecule and SMARTS files that have NOT been inserted to the database a complete run including inserting the product info into the database could be accomplished with the following from the command line python PatternMatchCounter py molecule smi example smarts match counter python DBUtil py imolecule smi tMOLECULE omolecule smi id CAN SMILES LABEL python DBUtil py iexample smarts tPATTERN oexample smarts id SMARTS LABEL python PatternMatchCounter py dmatch txt cmatch counter molecule smi id example smarts id python DBUtil py imatch txt tPATTERN MATCH omatch txt id MOLECULE ID PATTERN ID COUNT Alternatively if you wish to use reactants and SMARTS from the database something like this python DBUtil py select CAN SMILES LABEL MOLECULE ID from MOLECULE molecule smi python DBUtil py select SMARTS LABEL PATTERN ID from PATTERN example smarts python PatternMatchCounter py molecule smi example smarts match counter python PatternMatchCounter py dmatch txt cmatch counter molecule smi example smarts python DBUtil py imatch txt tPATTERN MATCH omatch txt id MOLECULE ID PATTERN ID COUNT Input Molecule file Can be any format understandable by oemolistream assuming a properly named extension For example molecules smi for SMILES format SMARTS pattern file File containing one SMARTS pattern string per line that will be used to search the molecules Either of the above can take stdin as their source by specifying the filename or smi or something similar See documentation of oemolistream for more information Output Match counter file For each molecule read from the molecule file will output one line of counts tab delimited For each line there will be one count per SMARTS pattern read The values will appear in the same order as the SMARTS patterns were read and the value will equal the number of times that SMARTS pattern was matched in the respective molecule Again redirection to stdout possible by specifying the filename Functions hide private main argv Command line main method countPatternMatchesByFilename moleculeFilename smartsFilename counterFilename Opens files with respective names and delegates most work to countPatternMatches countPatternMatches moleculeOEIS smartsFile counterFile Primary method reads the source files to count pattern matches for the output file readSMARTSFile smartsFile Read the contents of the smartsFile as a list of SMARTS strings formatDBFileByFilename counterFilename moleculeIDFilename smartsIDFilename dbFilename sparse True Opens files with respective names and delegates most work to formatDBFile formatDBFile counterFile moleculeIDFile smartsIDFile dbFile sparse True Given the database IDs of molecules patterns SMARTS and a counter matrix relating the two generate a simple text file that should be very easy to import into the database to persist that association information Function Details hide private countPatternMatches moleculeOEIS smartsFile counterFile Primary method reads the source files to count pattern matches for the output file See module documentation for more information Note This method takes actual File objects not filenames to allow the caller to pass virtual Files for the purpose of testing and interfacing Use the main method to have the module take care of opening files from filenames One extra catch the molecule source is not a file but an oemolistream necessary to take advantage of that classses high level management of different molecule file formats readSMARTSFile smartsFile Read the contents of the smartsFile as a list of SMARTS strings Comment lines prefixed with will be ignored Expects one SMARTS string per line of the file Each SMARTS string can be followed by any title comment etc separated by whitespace These will be ignored Returns a list of OESubSearch objects instantiated with the respective SMARTS string formatDBFile counterFile moleculeIDFile smartsIDFile dbFile sparse True Given the database IDs of molecules patterns SMARTS and a counter matrix relating the two generate a simple text file that should be very easy to import into the database to persist that association information To trim the output a bit you can set the sparse option to True to not generate rows for matches that yielded a count no matches which will be most common Each line produced should correspond to a row in the PATTERN MATCH table with values to insert respective to MOLECULE ID PATTERN ID and COUNT Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 21 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.CombiCDB.PatternMatchCounter-module.html", "title": "chem.combicdb.patternmatchcounter", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.CombiCDB.PatternMatchCounter</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.CombiCDB-module.html\">Package&nbsp;CombiCDB</a> ::\n        Module&nbsp;PatternMatchCounter\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.CombiCDB.PatternMatchCounter-module.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== MODULE DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Module PatternMatchCounter</h1><br /><br />\n<pre class=\"literalblock\">\nGiven a set of SMARTS patterns and molecules, counts how many\ntimes each SMARTS pattern (i.e. functional group) is found in\neach molecule.\n\nAlso includes a script to generate the output in a format easily inserted\ninto the application database.  Assuming starting with some molecule\nand SMARTS files that have NOT been inserted to the database, a complete\nrun, including inserting the product info into the database could be\naccomplished with the following from the command line:\n\n===========================================================================\npython PatternMatchCounter.py molecule.smi example.smarts match.counter\npython DBUtil.py -imolecule.smi     -tMOLECULE      -omolecule.smi.id    CAN_SMILES LABEL\npython DBUtil.py -iexample.smarts   -tPATTERN       -oexample.smarts.id  SMARTS LABEL\npython PatternMatchCounter.py -dmatch.txt -cmatch.counter molecule.smi.id example.smarts.id\npython DBUtil.py -imatch.txt        -tPATTERN_MATCH -omatch.txt.id      MOLECULE_ID PATTERN_ID COUNT\n===========================================================================\n\nAlternatively, if you wish to use reactants and SMARTS from the database, something like this:\n\n===========================================================================\npython DBUtil.py &quot;select CAN_SMILES, LABEL, MOLECULE_ID from MOLECULE&quot;  molecule.smi\npython DBUtil.py &quot;select SMARTS, LABEL, PATTERN_ID from PATTERN&quot;      example.smarts\npython PatternMatchCounter.py molecule.smi example.smarts match.counter\npython PatternMatchCounter.py -dmatch.txt -cmatch.counter molecule.smi example.smarts\npython DBUtil.py -imatch.txt -tPATTERN_MATCH -omatch.txt.id MOLECULE_ID PATTERN_ID COUNT\n===========================================================================\n\nInput: \n- Molecule file\n    Can be any format understandable by oemolistream, assuming a properly \n    named extension.  For example, &quot;molecules.smi&quot; for SMILES format\n- SMARTS pattern file\n    File containing one SMARTS pattern string per line that will \n    be used to search the molecules\n\nEither of the above can take stdin as their source by specifying the \nfilename &quot;-&quot; or &quot;.smi&quot; or something similar.  See documentation of \noemolistream for more information\n\nOutput:\n- Match counter file\n    For each molecule read from the molecule file, will output one \n    line of counts, tab delimited.  For each line, there will be one count per \n    SMARTS pattern read.  The values will appear in the same order as \n    the SMARTS patterns were read, and the value will equal the number\n    of times that SMARTS pattern was matched in the respective molecule.\n    Again, redirection to stdout possible by specifying the filename &quot;-&quot;.  \n\n</pre><br /><br />\n\n<!-- ==================== FUNCTIONS ==================== -->\n<a name=\"section-Functions\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Functions</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-Functions\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"main\"></a><span class=\"summary-sig-name\">main</span>(<span class=\"summary-sig-arg\">argv</span>)</span><br />\n      Command-line main method</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"countPatternMatchesByFilename\"></a><span class=\"summary-sig-name\">countPatternMatchesByFilename</span>(<span class=\"summary-sig-arg\">moleculeFilename</span>,\n        <span class=\"summary-sig-arg\">smartsFilename</span>,\n        <span class=\"summary-sig-arg\">counterFilename</span>)</span><br />\n      Opens files with respective names and delegates most work to \n      &quot;countPatternMatches&quot;</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.PatternMatchCounter-module.html#countPatternMatches\" class=\"summary-sig-name\">countPatternMatches</a>(<span class=\"summary-sig-arg\">moleculeOEIS</span>,\n        <span class=\"summary-sig-arg\">smartsFile</span>,\n        <span class=\"summary-sig-arg\">counterFile</span>)</span><br />\n      Primary method, reads the source files to count pattern matches \n      for the output file.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.PatternMatchCounter-module.html#readSMARTSFile\" class=\"summary-sig-name\">readSMARTSFile</a>(<span class=\"summary-sig-arg\">smartsFile</span>)</span><br />\n      Read the contents of the smartsFile as a list of SMARTS strings.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"formatDBFileByFilename\"></a><span class=\"summary-sig-name\">formatDBFileByFilename</span>(<span class=\"summary-sig-arg\">counterFilename</span>,\n        <span class=\"summary-sig-arg\">moleculeIDFilename</span>,\n        <span class=\"summary-sig-arg\">smartsIDFilename</span>,\n        <span class=\"summary-sig-arg\">dbFilename</span>,\n        <span class=\"summary-sig-arg\">sparse</span>=<span class=\"summary-sig-default\">True</span>)</span><br />\n      Opens files with respective names and delegates most work to \n      &quot;formatDBFile&quot;</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.PatternMatchCounter-module.html#formatDBFile\" class=\"summary-sig-name\">formatDBFile</a>(<span class=\"summary-sig-arg\">counterFile</span>,\n        <span class=\"summary-sig-arg\">moleculeIDFile</span>,\n        <span class=\"summary-sig-arg\">smartsIDFile</span>,\n        <span class=\"summary-sig-arg\">dbFile</span>,\n        <span class=\"summary-sig-arg\">sparse</span>=<span class=\"summary-sig-default\">True</span>)</span><br />\n      Given the database IDs of molecules, patterns (SMARTS) and a \n      counter matrix relating the two, generate a simple text file that \n      should be very easy to import into the database to persist that \n      association information.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== FUNCTION DETAILS ==================== -->\n<a name=\"section-FunctionDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Function Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-FunctionDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"countPatternMatches\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">countPatternMatches</span>(<span class=\"sig-arg\">moleculeOEIS</span>,\n        <span class=\"sig-arg\">smartsFile</span>,\n        <span class=\"sig-arg\">counterFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Primary method, reads the source files to count pattern matches for \n  the output file.  See module documentation for more information.</p>\n  <p>Note:  This method takes actual File objects, not filenames, to allow \n  the caller to pass &quot;virtual Files&quot; for the purpose of testing \n  and interfacing. Use the &quot;main&quot; method to have the module take \n  care of opening files from filenames.</p>\n  One extra catch, the molecule source is not a file, but an \n  oemolistream necessary to take advantage of that classses high-level \n  management of different molecule file formats\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"readSMARTSFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">readSMARTSFile</span>(<span class=\"sig-arg\">smartsFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\nRead the contents of the smartsFile as a list of SMARTS strings.\nComment lines prefixed with &quot;#&quot; will be ignored.  \nExpects one SMARTS string per line of the file.  Each SMARTS string can be followed\n    by any title / comment, etc. separated by whitespace.  These will be ignored.\nReturns a list of OESubSearch objects, instantiated with the respective SMARTS string.\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"formatDBFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">formatDBFile</span>(<span class=\"sig-arg\">counterFile</span>,\n        <span class=\"sig-arg\">moleculeIDFile</span>,\n        <span class=\"sig-arg\">smartsIDFile</span>,\n        <span class=\"sig-arg\">dbFile</span>,\n        <span class=\"sig-arg\">sparse</span>=<span class=\"sig-default\">True</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given the database IDs of molecules, patterns (SMARTS) and a counter \n  matrix relating the two, generate a simple text file that should be very \n  easy to import into the database to persist that association \n  information.</p>\n  <p>To trim the output a bit, you can set the sparse option to True to not\n  generate rows for matches that yielded a count = 0 (no matches, which \n  will be most common)</p>\n  Each line produced should correspond to a row in the PATTERN_MATCH \n  table, with values to insert respective to MOLECULE_ID, PATTERN_ID and \n  COUNT\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:21 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40664.0}