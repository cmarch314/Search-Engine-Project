{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL ch graham andrew scan Definition The function ch graham andrew scan generates the counterclockwise sequence of extreme points from a given set of input points that are not left of the line defined by the first and last points in this sequence include CGAL ch graham andrew h template class BidirectionalIterator class OutputIterator class Traits OutputIterator ch graham andrew scan BidirectionalIterator first BidirectionalIterator beyond OutputIterator result Traits ch traits Default traits generates the counterclockwise sequence of extreme points that are not left of pq where p is the value of first and q is the value of beyond 1 The resulting sequence is placed starting at result with p point q is omitted The past the end iterator for the sequence is returned Precondition The range first beyond contains at least two different points The points in first beyond are sorted with respect to pq i e the sequence of points in first beyond define a counterclockwise polygon for which the Graham Sklansky procedure Skl72 works The default traits class Default traits is the kernel in which the type BidirectionalIterator value type is defined Requirements BidirectionalIterator value type and OutputIterator value type are equivalent to Traits Point 2 Traits defines the following two types from the concept ConvexHullTraits 2 and their corresponding member functions that return instances of these types Traits Point 2 Traits Left turn 2 See Also CGAL ch graham andrew CGAL lower hull points 2 CGAL upper hull points 2 Implementation The function uses Andrew s variant of the Graham scan algorithm And79 This algorithm requires O n logn time in the worst case for n input points Example In the following example ch graham andrew scan is used to realize Anderson s variant And78 of the Graham Scan Gra72 The points are sorted counterclockwise around the leftmost point using the Less rotate ccw 2 predicate as defined in the concept ConvexHullTraits 2 According to the definition of Less rotate ccw 2 the leftmost point is the last point in the sorted sequence and its predecessor on the convex hull is the first point in the sorted sequence It is not hard to see that the preconditions of ch graham andrew scan are satisfied Anderson s variant of the Graham scan is usually inferior to Andrew s variant because of its higher arithmetic demand template class InputIterator class OutputIterator class Traits OutputIterator ch graham anderson InputIterator first InputIterator beyond OutputIterator result const Traits ch traits typedef typename Traits Less xy 2 Less xy 2 typedef typename Traits Point 2 Point 2 typedef typename Traits Less rotate ccw 2 Less rotate ccw 2 if first beyond return result std vector Point 2 V copy first beyond back inserter V typename std vector Point 2 iterator it std min element V begin V end Less xy 2 std sort V begin V end Less rotate ccw 2 it if V begin V rbegin result V begin result return result return ch graham andrew scan V begin V end result ch traits Next ch jarvis Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Convex_hull_2_ref/Function_ch_graham_andrew_scan.html", "title": "ch_graham_andrew_scan", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Convex_hull_2_ref/ch_graham_andrew_scan.tex' -->\n<html> <head>  \n<title>ch_graham_andrew_scan</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_588\"></A>\n\n<A NAME=\"Cross_link_anchor_589\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_471\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::ch_graham_andrew_scan\"></A>\n<h2><I>CGAL::ch_graham_andrew_scan</I></h2>\n\n     \n     \n     \n<A NAME=\"Index_anchor_472\"></A> \n\n   \n\n\n   \n     \n     \n<A NAME=\"Index_anchor_473\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_ch_graham_andrew_scan.html#Cross_link_anchor_589\">ch_graham_andrew_scan</A></I> generates the counterclockwise sequence of extreme\npoints from a given set of input points that are not left of the line defined\nby the first and last points in this sequence.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/ch_graham_andrew.h\">CGAL/ch_graham_andrew.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class BidirectionalIterator, class OutputIterator, class Traits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_ch_graham_andrew_scan6_BidirectionalIterator_first+_BidirectionalIterator_beyond+_OutputIterator_result+_const_Traits__ch_traits_=_Default_traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_ch_graham_andrew_scan.html#Cross_link_anchor_589\">ch_graham_andrew_scan</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    BidirectionalIterator first,<BR>\n\nBidirectionalIterator beyond,<BR>\n\nOutputIterator result,<BR>\n\nTraits ch_traits = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    generates the counterclockwise sequence of extreme points that are\n            not left of <MATH><I>pq</I></MATH>, where <MATH><I>p</I></MATH> is the value of <I>first</I> and <MATH><I>q</I></MATH> is\n            the value of <I>beyond</I> <MATH><I>-1</I></MATH>. The resulting sequence is placed\n            starting at <I>result</I> with <MATH><I>p</I></MATH>; point <MATH><I>q</I></MATH> is omitted.  The\n            past-the-end iterator for the sequence is returned.<BR>\n\n<EM>Precondition: </EM>The range [<I>first</I>,<I>beyond</I>) contains at least\n            two different points.\n            The points in [<I>first</I>,<I>beyond</I>) are ``sorted'' with respect\n            to <MATH><I>pq</I></MATH>, <I>i.e.</I>, the sequence of points in \n            [<I>first</I>,<I>beyond</I>) define a counterclockwise polygon, \n            for which the Graham-Sklansky-procedure [<A HREF=\"../biblio.html#Biblio_s-mcrm-72\">Skl72</A>] works.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe default traits class <I>Default_traits</I> is the kernel in which the\ntype <I>BidirectionalIterator::value_type</I> is defined.\n<P>\n\n<H3>Requirements</H3>\n<OL>\n   <LI><I>BidirectionalIterator::value_type</I> and \n            <I>OutputIterator::value_type</I>\n            are equivalent to <I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>.\n   <LI><I>Traits</I> defines the following two types from\n            the concept <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A> and their corresponding member\n            functions that return instances of these types:\n            <UL>\n                <LI><I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>,\n                <LI><I>Traits::Left_turn_2</I>.\n            </UL>\n</OL>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_ch_graham_andrew.html#Cross_link_anchor_586\">CGAL::ch_graham_andrew</A></I><BR>\n\n<I><A HREF=\"Function_lower_hull_points_2.html#Cross_link_anchor_625\">CGAL::lower_hull_points_2</A></I><BR>\n\n<I><A HREF=\"Function_upper_hull_points_2.html#Cross_link_anchor_627\">CGAL::upper_hull_points_2</A></I>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe function uses Andrew's \nvariant of the Graham scan algorithm [<A HREF=\"../biblio.html#Biblio_a-aeach-79\">And79</A>] . This algorithm \nrequires <MATH><I>O(n </I></MATH>log<MATH><I>n)</I></MATH> time in the worst case for <MATH><I>n</I></MATH> input points.\n<P>\n\n<H3>Example</H3>\n<P>\n\nIn the following example <I><A HREF=\"Function_ch_graham_andrew_scan.html#Cross_link_anchor_589\">ch_graham_andrew_scan</A>()</I> is used to\nrealize Anderson's variant [<A HREF=\"../biblio.html#Biblio_a-readc-78\">And78</A>] of the Graham Scan \n[<A HREF=\"../biblio.html#Biblio_g-eadch-72\">Gra72</A>].  The points are sorted counterclockwise around the leftmost \npoint using the <I>Less_rotate_ccw_2</I> predicate, as defined in\nthe concept <A HREF=\"Concept_ConvexHullTraits_2.html#Cross_link_anchor_610\">ConvexHullTraits_2</A>. According to the definition \nof <I>Less_rotate_ccw_2</I>, the leftmost point is the last point in the sorted \nsequence and its <A HREF=\"../STL_Extension_ref/Function_predecessor.html#Cross_link_anchor_1442\">predecessor</A> on the convex hull is the first point in the \nsorted sequence.  It is not hard to see that the preconditions of\n<I><A HREF=\"Function_ch_graham_andrew_scan.html#Cross_link_anchor_589\">ch_graham_andrew_scan</A>()</I> are satisfied.  Anderson's variant of the \nGraham scan is usually inferior to Andrew's variant because of its higher \narithmetic demand.\n<P>\n\n<pre class=\"Verbatim\">\ntemplate &lt;class InputIterator, class OutputIterator, class Traits&gt;\nOutputIterator\nch_graham_anderson( InputIterator  first, InputIterator  beyond,\n                    OutputIterator result, const Traits&amp;  ch_traits)\n{\n  typedef typename Traits::Less_xy_2          Less_xy_2;\n  typedef typename Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>            <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\n  typedef typename Traits::Less_rotate_ccw_2  Less_rotate_ccw_2;\n\n  if (first == beyond) return result;\n  std::vector&lt; <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &gt;  V;\n  copy( first, beyond, back_inserter(V) );\n  typename std::vector&lt; <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> &gt;::iterator it = \n               std::min_element(V.begin(), V.end(), Less_xy_2());\n  std::sort( V.begin(), V.end(), Less_rotate_ccw_2(*it) );\n  if ( *(V.begin()) == *(V.rbegin()) )\n  {\n      *result = *(V.begin());  ++result;\n      return result;\n  }\n  return <A HREF=\"Function_ch_graham_andrew_scan.html#Cross_link_anchor_589\">ch_graham_andrew_scan</A>( V.begin(), V.end(), result, ch_traits);\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_ch_jarvis.html\"><I>ch_jarvis</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38998.0}