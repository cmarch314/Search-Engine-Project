{"text": "ICS 161 Design and Analysis of Algorithms Example code for Knuth Morris Pratt algorithm This directory contains sample C code for an implementation of the Knuth Morris Pratt linear time string matching algorithm and an example program that uses this algorithm to search for paragraphs containing a given string similar to grep Files in this directory match c This file defines a C class string match which implements the Knuth Morris Pratt algorithm Arguments to the class constructor are the the string to be searched for and an optional length 1 if the string is null terminated the constructor implements the preprocessing stage of the KMP algorithm The function string match reset begins searching for a match after which the function string match match char c processes one more character of text implementing the scanning stage of the KMP algorithm and returning a Boolean value true if the character processed was the last character of a match Example string match m nano m reset for char s banananobano s s if m match s printf found a nano n match h Declarations for class string match lookup c This program uses class string match to perform a task like that of grep of finding a string in an input file Unlike grep it prints out the whole paragraph containing each match rather than just one line lineb c This file implements a simple buffer class suitable for holding an unknown quantity of text The lookup program uses this to store the current paragraph in case it matches the target pattern It was originally written as part of some other code so it has added functionality beyond the part lookup uses lineb h Declarations for lineb c makefile Control file for compiling the lookup program kmp shar Contents of this directory in one UNIX shar format archive ICS 161 Dept Information Computer Science UC Irvine Last update ", "_id": "http://www.ics.uci.edu/~eppstein/161/kmp/", "title": "knuth-morris-pratt example source code", "html": "<HTML><HEAD>\n<TITLE>Knuth-Morris-Pratt example source code</TITLE>\n<META name=\"Owner\" value=\"eppstein\">\n<META name=\"Reply-To\" value=\"eppstein@ics.uci.edu\">\n</HEAD><BODY>\n\n<H1>ICS 161: Design and Analysis of Algorithms<BR>\nExample code for Knuth-Morris-Pratt algorithm</H1>\n<!--#config timefmt=\"%d %h %Y, %T %Z\" -->\n<HR><P>\n\nThis directory contains sample C++ code\nfor an implementation of the Knuth-Morris-Pratt linear time string\nmatching algorithm, and an example program that uses this algorithm\nto search for paragraphs containing a given string (similar to\n<TT>grep</TT>).\n<P>\nFiles in this directory:\n\n<UL><LI><A HREF=\"match.c\"><TT><B>match.c</B></TT></A>:\nThis file defines a C++ class,\n<TT>string_match</TT>, which implements the Knuth-Morris-Pratt\nalgorithm.\n<P>\nArguments to the class constructor are the\nthe string to be searched for and an optional length\n(-1 if the string is null-terminated); the constructor\nimplements the preprocessing stage of the KMP algorithm.\n<P>\nThe function <TT>string_match.reset()</TT> begins\nsearching for a match, after which\nthe function <TT>string_match.match(char c)</TT>\nprocesses one more character of text, implementing the scanning stage\nof the KMP algorithm and returning\na Boolean value, true if the character processed was the last character\nof a match.\n<P>\nExample:\n<PRE>\n    string_match m(\"nano\");\n    m.reset();\n    for (char * s = \"banananobano\", *s != '\\0'; s++)\n        if (m.match(*s))\n            printf(\"found a nano!\\n\");\n</PRE>\n<P>\n\n<LI><A HREF=\"match.h\"><TT><B>match.h</B></TT></A>:\nDeclarations for class <TT>string_match</TT>.\n<P>\n\n<LI><A HREF=\"lookup.c\"><TT><B>lookup.c</B></TT></A>:\nThis program uses class <TT>string_match</TT>\nto perform a task like that of <TT>grep</TT>, of finding a string\nin an input file.  Unlike <TT>grep</TT>, it prints out the whole\nparagraph containing each match, rather than just one line.\n<P>\n\n<LI><A HREF=\"lineb.c\"><TT><B>lineb.c</B></TT></A>:\nThis file implements a simple\n\"buffer\" class suitable for holding an unknown quantity of text.\nThe <TT>lookup</TT> program uses this to store the current paragraph,\nin case it matches the target pattern.  It was originally written\nas part of some other code, so it has added functionality beyond\nthe part <TT>lookup</TT> uses.\n<P>\n\n<LI><A HREF=\"lineb.h\"><TT><B>lineb.h</B></TT></A>:\nDeclarations for <TT>lineb.c</TT>.\n<P>\n\n<LI><A HREF=\"makefile\"><TT><B>makefile</B></TT></A>:\nControl file for compiling the <TT>lookup</TT> program.\n<P>\n\n<LI><A HREF=\"kmp.shar\"><TT><B>kmp.shar</B></TT></A>:\nContents of this directory in one UNIX \"shar\" format archive.\n</UL>\n\n<P><HR><P>\n<A HREF=\"/~eppstein/161/\">ICS 161</A> --\n<A HREF=\"/\">Dept. Information & Computer Science</A> --\n<A HREF=\"http://www.uci.edu/\">UC Irvine</A><BR>\n<SMALL>Last update: <!--#flastmod file=\"index.html\" --></SMALL>\n</BODY></HTML>\n", "id": 8410.0}