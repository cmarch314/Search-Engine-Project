{"text": "Navigation Up Table of Contents Bibliography Index Title Page TriangulationDSVertexBase 2 Definition The concept TriangulationDSVertexBase 2 describes the requirements for the vertex base class of a Triangulation data structure 2 Vb Fb Note that if the Triangulation data structure 2 is plugged into a triangulation class the vertex base class has additional geometric requirements depending on the triangulation class At the base level provides access to one of its incident face through a Face handle Since the Triangulation data structure 2 is the class which defines the handle types the vertex base class has to be somehow parameterized by the triangulation data structure But since the Triangulation data structure 2 itself is parameterized by the face and vertex base classes there is a cycle in the definition of these classes In order to break the cycle the base classes for faces and vertices which are plugged in to instantiate a Triangulation data structure 2 use a void as triangulation data structure parameter Then the Triangulation data structure 2 uses a rebind mecanism similar to the one specified in std allocator in order to plug itself as parameter in the face and vertex base classes This mecanism requires that the base class provides a templated nested class Rebind TDS that itself provides the subtype Rebind TDS TDS2 Other which is the rebound version of the base class This rebound base class is the class that the Triangulation data structure 2 actually uses as a base class for the class of Triangulation data structure 2 Vertex Types The concept TriangulationDSVertexBase 2 has to provide the following types template typename TDS2 TriangulationDSVertexBase 2 struct Rebind TDS This nested template class has to define a type Other which is the rebound vertex base where the actual Triangulation data structure 2 is plugged in This type Other will be the actual base of the class Triangulation data structure 2 Vertex typedef TriangulationDataStructure 2 Triangulation data structure typedef TriangulationDataStructure 2 Vertex handle Vertex handle typedef TriangulationDataStructure 2 Face handle Face handle Creation TriangulationDSVertexBase 2 v default constructor TriangulationDSVertexBase 2 v Face handle f Constructs a vertex pointing to face f Access Functions Face handle v face returns an incident face Setting void v set face Face handle c Sets the incident face Checking bool v is valid bool verbose false Performs any desired test on a vertex Checks that the pointer to an incident face is not NULL Various void v for compact container void v for compact container These member functions are required by Triangulation data structure 2 because it uses Compact container to store its faces See the documentation of Compact container for the exact requirements I O istream istream is v Inputs the non combinatorial information possibly stored in the vertex ostream ostream os v Outputs the non combinatorial operation possibly stored in the vertex Has Models CGAL Triangulation ds vertex base 2 Tds CGAL Triangulation vertex base 2 Traits Vb CGAL Regular triangulation vertex base 2 Traits Vb CGAL Triangulation hierarchy vertex base 2 Vb CGAL Triangulation vertex base with info 2 Info Traits vb See AlsoTriangulationVertexBase 2 TriangulationDSFaceBase 2 TriangulationFaceBase 2 TriangulationDataStructure 2 Vertex Triangulation data structure 2 Vb Fb Next TriangulationDataStructure 2 Vertex Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/TDS_2_ref/Concept_TriangulationDSVertexBase_2.html", "title": "triangulationdsvertexbase_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './TDS_2_ref/TriangulationDSVertexBase_2.tex' -->\n<html> <head>  \n<title>TriangulationDSVertexBase_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_963\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_910\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_TriangulationDSVertexBase_2\"></A>\n<h2><I>TriangulationDSVertexBase_2</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe concept <I><A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A></I> describes the requirements for the\nvertex base class of a <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I>.\n<P>\n\nNote that if  the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> \nis plugged  into a triangulation class, \nthe vertex base class has additional geometric\nrequirements depending on the triangulation class.\n<P>\n\nAt the base level,  \nprovides access to one of its incident\nface through a <I>Face_handle</I>.\n<P>\n\nSince the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> is the class \nwhich defines the handle\ntypes, the vertex base class has to be somehow \nparameterized by the triangulation\ndata structure.  But since the <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\nitself is parameterized by the face and vertex\nbase classes, there is a cycle in the definition of these classes.  \nIn order\nto break the cycle, the base classes for faces and vertices\n which are plugged in to instantiate a\n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\nuse a <I>void</I> as triangulation\ndata structure parameter. Then,\nthe <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\nuses a <I>rebind</I>  mecanism (similar to the one specified in\n<I>std::allocator</I>) in order to plug itself \nas parameter in the face and vertex  base classes. \nThis mecanism requires that the base class  provides\na templated nested class <I>Rebind_TDS</I> that\nitself provides \nthe subtype <I>Rebind_TDS&lt;TDS2&gt;::Other</I>\nwhich is the <I>rebound</I> version of the base class.\n This <I>rebound</I> base class is  the class\nthat the   <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\n actually  uses  as a base class for the class\nof <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>::Vertex</I>.\n<P>\n\n<H3>Types</H3>\nThe concept <I><A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A></I> has to provide the following types.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;typename TDS2&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A>:: struct Rebind_TDS;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    This nested template class has to define a type <I>Other</I> which is the\n<I>rebound</I> vertex base , where the actual \n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I> is  plugged in.\nThis type  <I>Other</I>  will be the actual base\nof the class <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>::Vertex</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Triangulation_data_structure\"></A>\n<A NAME=\"Typedef_Triangulation_data_structure\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Triangulation_data_structure;\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle\"></A>\n<A NAME=\"Typedef_Vertex_handle\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Vertex_handle;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle\"></A>\n<A NAME=\"Typedef_Face_handle\"></A>\ntypedef <A HREF=\"Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A>::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Face_handle;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A> v;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_TriangulationDSVertexBase_2.html#Cross_link_anchor_963\">TriangulationDSVertexBase_2</A> v ( Face_handle f);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Constructs a vertex pointing to face  <I>f</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_face69_const;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    v.face ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an incident face.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Setting</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_face6Face_handle_c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    v.set_face ( Face_handle c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the incident face.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Checking</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose=false9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    v.is_valid ( bool verbose=false)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Performs any desired test on a vertex. Checks that the\npointer to an incident face is not <I>NULL</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Various</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_*_for_compact_container69_const;\"></A>\nvoid *\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    v.for_compact_container ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_*___for_compact_container69;\"></A>\nvoid * &amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    v.for_compact_container ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n\n These member functions are required by <I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A></I>\n  because it uses <I><A HREF=\"../STL_Extension_ref/Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A></I> to store its faces.  See the\n  documentation of <I><A HREF=\"../STL_Extension_ref/Class_Compact_container.html#Cross_link_anchor_1440\">Compact_container</A></I> for the exact requirements.\n<P>\n\n<H3>I/O</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    istream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     istream&amp; is &gt;&gt;  &amp; v<A NAME=\"Function_istream__operator99_6istream__is+_TriangulationDSVertexBase_2___v9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inputs the non-combinatorial information possibly stored in the vertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  v<A NAME=\"Function_ostream__operator66_6ostream__os+_const_TriangulationDSVertexBase_2___v9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Outputs the non combinatorial operation possibly stored in the\nvertex.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Triangulation_ds_vertex_base_2.html#Cross_link_anchor_969\">CGAL::Triangulation_ds_vertex_base_2</A>&lt;Tds&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_vertex_base_2.html#Cross_link_anchor_954\">CGAL::Triangulation_vertex_base_2</A>&lt;Traits,Vb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_vertex_base_2.html#Cross_link_anchor_932\">CGAL::Regular_triangulation_vertex_base_2</A>&lt;Traits,Vb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_hierarchy_vertex_base_2.html#Cross_link_anchor_952\">CGAL::Triangulation_hierarchy_vertex_base_2</A>&lt;Vb&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_vertex_base_with_info_2.html#Cross_link_anchor_956\">CGAL::Triangulation_vertex_base_with_info_2</A>&lt;Info,Traits,vb&gt;</I>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"../Triangulation_2_ref/Concept_TriangulationVertexBase_2.html#Cross_link_anchor_937\">TriangulationVertexBase_2</A></I><BR>\n\n<I><A HREF=\"Concept_TriangulationDSFaceBase_2.html#Cross_link_anchor_961\">TriangulationDSFaceBase_2</A></I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Concept_TriangulationFaceBase_2.html#Cross_link_anchor_934\">TriangulationFaceBase_2</A></I><BR>\n\n<I><A HREF=\"Concept_TriangulationDataStructure_2--Vertex.html#Cross_link_anchor_964\">TriangulationDataStructure_2::Vertex</A></I><BR>\n\n<I><A HREF=\"Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I><BR>\n\n\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_TriangulationDataStructure_2--Vertex.html\"><I>TriangulationDataStructure_2::Vertex</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_34!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39446.0}