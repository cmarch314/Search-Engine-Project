{"text": " HW4 Texture Due date see schedule In this assignment you will develop code to stitch together image patches sampled from an input texture in order to synthesize new texture images following the approach described in this paper The following directory contains some skeleton code to get you started along with some test images Downloads Start by looking at the provided code in detail and making sure you understand what it does The main script is called texturequilt m You will need to write several subroutines in order for it to function properly Programming 75 points Shortest Path 25 points Write a function shortest path that takes an 2D array of costs C of size HxW as input and finds the shortest vertical path from top to bottom through the array This array is equivalent to e i j in the paper A vertical path is specified by a single horizontal location for each row of the H rows Locations in successive rows should not differ by more than 1 so that at each step the path either goes straight or moves at most one pixel to the left or right Your function should return an Hx1 vector that contains the path location 1 W for each of the H rows You should solve the problem by implementing the dynamic programming algorithm described in class You will have a for loop over the rows of the cost to go matrix E i j in the paper computing the cost of the shortest path up to that row using the recursive formula that depends on the costs to go for the previous row Once you have get to the last row you can then find the smallest total cost To find the path which actually has this smallest cost you will need to do some backtracking The easiest way is to also store the indices of the minimum at each step These indices will also be an HxW array You can then backtrack through these indices reading out the path HINTS This code can be a bit tricky to get correct Make sure and create some simple test cases by hand where you know the shortest path and see that the code gives the correct answer Image Stitching 25 points Write a function stitch that takes two gray scale images leftI and rightI and a specified overlap and returns a new output image by stitching them together along the lowest cost path If the images are of widths w1 and w2 then your final result image returned by the function will be of width w1 w2 overlap and have the same height as the two input images You will want to first extract the overlapping strips from the two input images and then compute a cost array given by the absolute value of their difference You can then use your shortest path function to find the seam along which to stitch the images where they differ the least in brightness Finally you need to generate the output image by using pixels from the left image on the left side of the seam and from the right image on the right side of the seam You may find it easiest to code this by first turning the path into an alpha mask for each image and then using the standard equation for compositing Texture Quilting 25 points Write a function synth quilt that takes as input an array indicating the set of texture tiles to use an array containing the set of texture tiles the tilesize and overlap parameters and synthesizes the output texture by stitching together the tiles synth quilt should utilize your stitch function repeatedly First for each row of tiles construct a row image by repeatedly stitching the next tile in the row on to the right side of your row image Once you have row images for all the rows you can stitch them together to get the final image Since your stitch function only works for vertical seams you will want to transpose the rows stitch them together and then transpose the result You may find it useful to look at the provided function synth paste which simply puts down the tiles with the specified overlap Your quilting function will return a similar result but with much smoother transitions between the tiles Writeup 25 points In addition to a zip file containing your code please submit a pdf file containing images of textures synthesized Test your code on the provided image rock wall jpg There are three parameters of the algorithm The tilesize overlap and K In the provided script I have set these at some default values Include in your writeup images of three example texture outputs when you 1 increase the tile size 2 increase the overlap and 3 decrease the value for K For each result explain how it differs from the default setting of the parameters and why Test your code on two other texture images of your choice You can use images from the web or take a picture of a texture your self You may need to resize or crop your input image to make sure that tile vec is a reasonable size You will also likely need to modify the tilesize or overlap depending on your inputs Once you have found good settings for these parameters synthesize a nice output texture Include the images of the input sample and the output synthesis for two other example textures in your submitted writeup Extra credit Implement a function texture transfer based on texturequilt m for reating a texture sample that is guided by a pair of sample target correspondence images section 3 of the paper Show a result in your writeup 15 points Implement a function hole fill that extends your method to fill holes of arbitrary shapes for image completion In this case patches are drawn from other parts of the target image 2 points As detailed in the guidelines any project handed by 11 59 pm on the previous day will receive 1 1 points extra credit ", "_id": "http://www.ics.uci.edu/~dramanan/teaching/cs116_winter15/hw/hw4.html", "title": "hw4", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>HW4</title>\n  </head>\n  <body>\n<a href=\"rock_wall.jpg\"><img width=100 src=\"rock_wall.jpg\"></a>\n&nbsp;\n&nbsp;\n<a href=\"quilted.jpg\"><img width=420 src=\"quilted.jpg\"></a>\n  <table><tr><td width=800>\n    <h1>HW4: Texture </h1>\n    <h2> Due date (see <a href=\"../lec.html\">schedule</a>)</h1>\n    <hr>\n\n<font size=\"-1\"><br>\n</font>\n<br>\n\n<p>\n<p>\nIn this assignment, you will develop code to stitch together image patches\nsampled from an input texture in order to synthesize new texture images, following the \napproach described in this <a href=\"quilting.pdf\">paper</a>.\n\nThe following directory contains some skeleton code to get you started along\nwith some test images:\n<ul>\n<li><a href=\"hw4\">Downloads</a>\n</ul>\nStart by looking at the provided code in detail and making sure you understand\nwhat it does.  The main script is called <b>texturequilt.m</b>.  You will need\nto write several subroutines in order for it to function properly.  \n\n\n<h4>Programming: [75 points]</h4>\n<ol>\n<li>\n<b>Shortest Path: [25 points]</b><br>\n<p>\nWrite a function <b>shortest_path</b> that takes an 2D array of costs <b>C</b>,\nof size HxW, as input and finds the shortest vertical path from top to bottom\nthrough the array. This array is equivalent to <b>e[i,j]</b> in the paper. A vertical path is specified by a single horizontal\nlocation for each row of the H rows.  Locations in successive rows should not\ndiffer by more than 1 so that at each step the path either goes straight or\nmoves at most one pixel to the left or right.  Your function should return an\n(Hx1) vector that contains the path location (1..W) for each of the H rows.<p>\n\nYou should solve the problem by implementing the dynamic programming algorithm\ndescribed in class.  You will have a for-loop over the rows of the cost-to-go\nmatrix (<b>E[i,j]</b> in the paper), computing the cost of the shortest path up to\nthat row using the recursive formula that depends on the costs-to-go for the\nprevious row.  Once you have get to the last row, you can then find the\nsmallest total cost.  To find the path which actually has this smallest cost,\nyou will need to do some backtracking.  The easiest way is to also store the\nindices of the minimum at each step.  These indices will also be an HxW array.\nYou can then backtrack through these indices, reading out the path.<p>\n\nHINTS:  This code can be a bit tricky to get correct.  Make sure and create\nsome simple test cases by hand where you know the shortest path and see that\nthe code gives the correct answer.<p>\n\n<li>\n<b>Image Stitching: [25 points]</b><br>\n<p>\nWrite a function <b>stitch</b> that takes two gray-scale images, <b>leftI</b>\nand <b>rightI</b> and a specified <b>overlap</b> and returns a new\noutput image by stitching them together along the lowest cost path.<p>\n\nIf the images are of widths <b>w1</b> and <b>w2</b> then your final result\nimage returned by the function  will be of width <b>w1+w2-overlap</b> and have\nthe same height as the two input images.<p>\n\nYou will want to first extract the overlapping strips from the two input images\nand then compute a cost array given by the absolute value of their difference.\nYou can then use your <b>shortest_path</b> function to find the seam along\nwhich to stitch the images where they differ the least in brightness.  Finally\nyou need to generate the output image by using pixels from the left image on\nthe left side of the seam and from the right image on the right side of the\nseam.  You may find it easiest to code this by first turning the path into an\nalpha mask for each image and then using the standard equation for compositing.\n\n<li>\n<b>Texture Quilting: [25 points]</b><br>\n<p>\nWrite a function <b>synth_quilt</b> that takes as input an array indicating the\nset of texture tiles to use, an array containing the set of texture tiles, the\ntilesize and overlap parameters and synthesizes the output texture by stitching\ntogether the tiles.\n\n<b>synth_quilt</b> should utilize your <b>stitch</b> function repeatedly.\nFirst, for each row of tiles, construct a row image by repeatedly stitching the\nnext tile in the row on to the right side of your row image.  Once you have row\nimages for all the rows, you can stitch them together to get the final image.\nSince your stitch function only works for vertical seams, you will want to\ntranspose the rows, stitch them together, and then transpose the result.\n\nYou may find it useful to look at the provided function <b>synth_paste</b>\nwhich simply puts down the tiles with the specified overlap.  Your quilting\nfunction will return a similar result but with much smoother transitions \nbetween the tiles.\n</ol>\n<h4>Writeup: [25 points]</h4>\n\nIn addition to a <b>.zip</b> file containing your code, please submit a\n<b>.pdf</b> file containing images of textures synthesized.\n\n<ol>\n<p><li> \nTest your code on the provided image <b>rock_wall.jpg</b>.  There are three\nparameters of the algorithm.  The tilesize, overlap and K.  In the provided\nscript I have set these at some default values.  Include in your writeup \nimages of three example texture outputs when you (1) increase the tile size,\n(2) increase the overlap, and (3) decrease the value for K.  For each result\nexplain how it differs from the default setting of the parameters and why.\n\n<p><li> \nTest your code on two other texture images of your choice.  You can use\nimages from the web or take a picture of a texture your self.  You may need\nto resize or crop your input image to make sure that <b>tile_vec</b> is a\nreasonable size.  You will also likely need to modify the tilesize or overlap\ndepending on your inputs.  Once you have found good settings for these \nparameters, synthesize a nice output texture.  Include the images of the \ninput sample and the output synthesis for two other example textures in your\nsubmitted writeup.\n\n</ol>\n\n\n<h4>Extra-credit</h4>\n<ol>\n<p><li> Implement a function <tt> texture_transfer</tt>, based on <tt>texturequilt.m</tt> for reating a texture sample that is guided by a pair of sample/target correspondence images (section 3 of the paper). Show a result in your writeup. <b> 15 points </b>\n<p><li> Implement a function <tt> hole_fill </tt> that extends your method to fill holes of arbitrary shapes for image completion. In this case, patches are drawn from other parts of the target image. <b> 20 points </b>\n<p><li>\nAs detailed in the <a href=\"../hw_guide.html\"> guidelines</a>, any\nproject handed by 11:59 pm on the previous day will receive 10% (<b> 10 points </b>) \nextra credit.\n</ol>\n<br>\n<br>\n<br>\n\n</p></div></center>\n</table>\n</body></html>\n", "id": 2794.0}