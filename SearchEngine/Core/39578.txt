{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Segment 2 Kernel DefinitionAn object s of the data type Segment 2 Kernel is a directed straight line segment in the two dimensional Euclidean plane 2 i e a straight line segment p q connecting two points p q in 2 The segment is topologically closed i e the end points belong to it Point p is called the source and q is called the target of s The length of s is the Euclidean distance between p and q Note that there is only a function to compute the square of the length because otherwise we had to perform a square root operation which is not defined for all number types which is expensive and may not be exact Creation Segment 2 Kernel s Point 2 Kernel p Point 2 Kernel q introduces a segment s with source p and target q The segment is directed from the source towards the target Operations bool s operator q Test for equality Two segments are equal iff their sources and targets are equal bool s operator q Test for inequality Point 2 Kernel s source returns the source of s Point 2 Kernel s target returns the target of s Point 2 Kernel s min returns the point of s with lexicographically smallest coordinate Point 2 Kernel s max returns the point of s with lexicographically largest coordinate Point 2 Kernel s vertex int i returns source or target of s vertex returns the source of s vertex 1 returns the target of s The parameter i is taken modulo 2 which gives easy access to the other vertex Point 2 Kernel s point int i returns vertex i Point 2 Kernel s operator int i returns vertex i Kernel FT s squared length returns the squared length of s Direction 2 Kernel s direction returns the direction from source to target of s Vector 2 Kernel s to vector returns the vector s target s source Segment 2 Kernel s opposite returns a segment with source and target point interchanged Line 2 Kernel s supporting line returns the line l passing through s Line l has the same orientation as segment s Predicates bool s is degenerate segment s is degenerate if source and target are equal bool s is horizontal bool s is vertical bool s has on Point 2 Kernel p A point is on s iff it is equal to the source or target of s or if it is in the interior of s bool s collinear has on Point 2 Kernel p checks if point p is on segment s This function is faster than function has on Precondition p is on the supporting line of s Miscellaneous Bbox 2 s bbox returns a bounding box containing s Segment 2 Kernel s transform Aff transformation 2 Kernel t returns the segment obtained by applying t on the source and the target of s See AlsoKernel Segment 2 Next Triangle 2 Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Segment_2.html", "title": "segment_2&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Segment_2.tex' -->\n<html> <head>  \n<title>Segment_2&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_55\"></A>\n\n<A NAME=\"Cross_link_anchor_56\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_49\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Segment_2<Kernel>\"></A>\n<h2><I>CGAL::Segment_2&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object <MATH><I>s</I></MATH> of the data type <I><A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> is a directed\nstraight line segment in the two-dimensional Euclidean plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH>, i.e. a\nstraight line segment <MATH><I>[p,q]</I></MATH> connecting two points <MATH><I>p,q</I></MATH> \nin\n<MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_R.gif\"> <SUP>2</SUP></I></MATH>. The segment is topologically closed, i.e.  the end\npoints belong to it. Point <MATH><I>p</I></MATH> is called the <I>source</I> and <MATH><I>q</I></MATH>\nis called the <I>target</I> of <MATH><I>s</I></MATH>. The length of <MATH><I>s</I></MATH> is the\nEuclidean distance between <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>. Note that there is only a function\nto compute the <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> of the length, because otherwise we had to\nperform a <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> root operation which is not defined for all\nnumber types, which is expensive, and may not be exact.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; q);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a segment <I>s</I> with source <MATH><I>p</I></MATH>\n             and target <MATH><I>q</I></MATH>. The segment is directed from the source towards\n             the target.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator==6const_Segment_26Kernel9__q9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.operator== (  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for equality: Two segments are equal, iff their sources and\n        targets are equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator!=6const_Segment_26Kernel9__q9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.operator!= (  q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for inequality.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_source69_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.source ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_target69_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.target ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target of <I>s</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_min69_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"../NumberTypeSupport_ref/Function_min.html#Cross_link_anchor_1394\">min</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point of <I>s</I> with lexicographically smallest coordinate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_max69_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"../NumberTypeSupport_ref/Function_max.html#Cross_link_anchor_1392\">max</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point of <I>s</I> with lexicographically largest coordinate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_vertex6int_i9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.vertex ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns source or target   of <I>s</I>:   <I>vertex(0)</I> returns\n        the source of <I>s</I>, <I>vertex(1)</I> returns the target of <I>s</I>. \n        The parameter <I>i</I> is taken modulo 2, which gives \n        easy access to the other vertex.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_point6int_i9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.point ( int i)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>vertex(i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;<A NAME=\"Function_Point_26Kernel9_operator696int_i9_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.operator[] ( int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>vertex(i)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::FT_squared_length69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.squared_length ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the squared length of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_26Kernel9_direction69_const;\"></A>\n<A HREF=\"Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.direction ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the direction from source to target of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_26Kernel9_to_vector69_const;\"></A>\n<A HREF=\"Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.to_vector ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the vector <I>s</I>.<I>target()</I> - <I>s</I>.<I>source()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Segment_26Kernel9_opposite69_const;\"></A>\n<A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.<A HREF=\"Function_opposite.html#Cross_link_anchor_243\">opposite</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a segment with source and target point interchanged.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Line_26Kernel9_supporting_line69_const;\"></A>\n<A HREF=\"Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.supporting_line ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the line <MATH><I>l</I></MATH> passing through <I>s</I>. Line <MATH><I>l</I></MATH>  has the\n        same <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A> as segment <I>s</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.is_degenerate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    segment <I>s</I> is degenerate, if source and target are equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_horizontal69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.is_horizontal ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_vertical69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.is_vertical ()\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.has_on (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A point is on <I>s</I>, iff it is equal to the source or target \n        of <I>s</I>, or if it is in the interior of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_collinear_has_on6const_Point_26Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.collinear_has_on (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks if point <MATH><I>p</I></MATH> is on segment&nbsp;<I>s</I>. This function is faster\n        than function <I>has_on()</I>.<BR>\n\n<EM>Precondition: </EM><MATH><I>p</I></MATH> is on the supporting line of <I>s</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Bbox_2_bbox69_const;\"></A>\n<A HREF=\"Class_Bbox_2.html#Cross_link_anchor_42\">Bbox_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    s.bbox ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a bounding box containing&nbsp;<I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Segment_26Kernel9_transform6const_Aff_transformation_26Kernel9__t9_const;\"></A>\n<A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    s.transform (  <A HREF=\"Class_Aff_transformation_2.html#Cross_link_anchor_40\">Aff_transformation_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the segment obtained by applying <MATH><I>t</I></MATH> on the source\n        and the target of <I>s</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_Kernel--Segment_2.html#Cross_link_anchor_463\">Kernel::Segment_2</A></I><BR>\n\n\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Triangle_2.html\"><I>Triangle_2&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39578.0}