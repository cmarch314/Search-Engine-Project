{"text": "OEChem C Theory Manual Version 1 3 1 Previous 27 1 2 Set Theory to Up 27 1 Ontology and Schema Next 27 1 4 Data Modeling Bibliography 27 1 3 OEChem Examples The above explanation should go some way to explaining OEChem s decision to attach biopolymer information to each atom rather than have container classes for residues and chains and presumably connected components NMR models etc The OEResidue class is therefore an additional set of fields that may be associated with an atom It does not denote or prescribe an amino or nucleic acid but instead stores atom specific data such as atom serial number b factor and occupancy in addition to residue information chain information fragment information NMR model information etc The residue information associated with an atom can be set with the OEAtomSetResidue function and is retrieved with the OEAtomGetResidue function The PDB and Macromodel file format readers parse this information from the input file format Additionally OEChem allows residue information to be perceived directly from the connection table using the OEPerceiveResidues function For many algorithms processing biomolecules it is convenient to maintain the atoms of the OEMolBase in sorted order to group atoms in the same residue next to one another and residues in the same chain sequentially This can be done conveniently in OEChem using the OEPDBOrderAtoms function Note that OEPercieveResidues calls OEPDBOrderAtoms automatically A common idiom is therefore the following code snippet void MyPrepareProtein OEMolBase mol if OEHasResidues mol OEPDBOrderAtoms mol else OEPerceiveResidues mol As a teaching example the following code demonstrates one way of reporting the number of different chains in an OEMolBase unsigned int MyCountChains1 OEMolBase mol unsigned int result OEIter OEAtomBase atom bool first true char prev char chain for atom mol GetAtoms atom atom OEResidue res OEAtomGetResidue atom chain res GetChainID if first chain prev result first false prev chain return result A slightly improved version would be to use OEChem s SameChain function unsigned int MyCountChains2 OEMolBase mol OEIter OEAtomBase atom unsigned int result OEResidue prev for atom mol GetAtoms atom atom OEResidue res OEAtomGetResidue atom if prev OESameChain res prev continue prev res result return result Clearly a MyCountResidues function would look almost identical but use the OESameResidue function instead of OESameChain The slightly more complicated example below reports the number of residues in each chain void MyReportResidues1 OEMolBase mol OEIter OEAtomBase chain OEResidue prevchain for chain mol GetAtoms chain chain OEResidue chainres OEAtomGetResidue chain if prevchain OESameChain chainres prevchain OEIter OEAtomBase residue OEResidue prevres unsigned int count for residue mol GetAtoms residue residue OEResidue resres OEAtomGetResidue residue if OESameChain resres chainres if prevres OESameChain resres prevres prevres resres count cout count residues in chain chainres GetChainID endl prevchain chainres Whilst the above example contains the doubly nested loops that some structural biologists like to see the same output can be generated even more efficiently by void MyReportResidues2 OEMolBase mol OEIter OEAtomBase atom unsigned int count OEResidue residue OEResidue chain for atom mol GetAtoms atom atom OEResidue res OEAtomGetResidue atom if chain chain res else if OESameChain res chain cout count residues in chain chain GetChainID endl chain res count if residue OESameResidue res residue residue res count if count cout count residues in chain chain GetChainID endl Of course just because OEChem uses an extremely advanced representation of biopolymers there s absolutely nothing to prevent a user slurping this information into a FORTRAN common block or whichever representation best suits their way of thinking about the problem OEChem C Theory Manual Version 1 3 1 Previous 27 1 2 Set Theory to Up 27 1 Ontology and Schema Next 27 1 4 Data Modeling Bibliography Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node222.html", "title": "27.1.3 oechem examples", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>27.1.3 OEChem Examples</title>\n<META NAME=\"description\" CONTENT=\"27.1.3 OEChem Examples\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node223.html\">\n<LINK REL=\"previous\" HREF=\"node221.html\">\n<LINK REL=\"up\" HREF=\"node219.html\">\n<LINK REL=\"next\" HREF=\"node223.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node221.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node219.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node223.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node221.html\">27.1.2 Set Theory to</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node219.html\">27.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node223.html\">27.1.4 Data Modeling Bibliography</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H2><A NAME=\"SECTION0030130000000000000000\">\n27.1.3 OEChem Examples</A>\n</H2>\n\n<P>\nThe above explanation should go some way to explaining OEChem's\ndecision to attach biopolymer information to each atom, rather than\nhave container classes for residues and chains (and presumably\nconnected components, NMR models, etc...).  The OEResidue class is\ntherefore an additional set of fields that may be associated with\nan atom.  It does not denote or prescribe an amino or nucleic acid\nbut instead stores atom-specific data such as atom serial number,\nb-factor and occupancy, in addition to residue information, chain\ninformation, fragment information, NMR model information, etc...\n\n<P>\nThe residue information associated with an atom can be set with the\nOEAtomSetResidue function, and is retrieved with the OEAtomGetResidue\nfunction.  The PDB and Macromodel file format readers parse this\ninformation from the input file format.  Additionally, OEChem allows\nresidue information to be perceived directly from the connection\ntable using the OEPerceiveResidues function.\n\n<P>\nFor many algorithms processing biomolecules, it is convenient to\nmaintain the atoms of the OEMolBase in sorted order to group atoms\nin the same residue next to one another, and residues in the same\nchain sequentially.  This can be done conveniently in OEChem using\nthe OEPDBOrderAtoms function.  Note, that OEPercieveResidues calls\nOEPDBOrderAtoms automatically.\n\n<P>\nA common idiom is therefore the following code snippet:\n\n<P>\n<dl><dd><pre class=\"verbatim\">void MyPrepareProtein(OEMolBase &amp;mol)\n{\n  if (OEHasResidues(mol))\n  {\n    OEPDBOrderAtoms(mol);\n  }\n  else OEPerceiveResidues(mol);\n}\n</pre></dl>\n\n<P>\nAs a teaching example, the following code demonstrates one way\nof reporting the number of different chains in an OEMolBase.\n\n<P>\n<dl><dd><pre class=\"verbatim\">unsigned int MyCountChains1(OEMolBase &amp;mol)\n{\n  unsigned int result = 0;\n  OEIter&lt;OEAtomBase&gt; atom;\n  bool first = true;\n  char prev = '\\0';\n  char chain;\n\n  for (atom=mol.GetAtoms(); atom; ++atom)\n  {\n    OEResidue res = OEAtomGetResidue(atom);\n    chain = res.GetChainID();\n    if (first || (chain != prev))\n      result++;\n    first = false;\n    prev = chain;\n  }\n  return result;\n}\n</pre></dl>\n\n<P>\nA slightly improved version would be to use OEChem's SameChain function.\n\n<P>\n<dl><dd><pre class=\"verbatim\">unsigned int MyCountChains2(OEMolBase &amp;mol)\n{\n  OEIter&lt;OEAtomBase&gt; atom;\n  unsigned int result = 0;\n  OEResidue prev;\n\n  for (atom=mol.GetAtoms(); atom; ++atom)\n  {\n    OEResidue res = OEAtomGetResidue(atom);\n    if (prev &amp;&amp; OESameChain(res,prev))\n      continue;\n\n    prev = res;\n    result++;\n  }\n  return result;\n}\n</pre></dl>\n\n<P>\nClearly, a MyCountResidues function would look almost identical but\nuse the OESameResidue function instead of OESameChain.  The slightly\nmore complicated example below, reports the number of residues in\neach chain.\n\n<P>\n<dl><dd><pre class=\"verbatim\">void MyReportResidues1(OEMolBase &amp;mol)\n{\n  OEIter&lt;OEAtomBase&gt; chain;\n  OEResidue prevchain;\n\n  for (chain=mol.GetAtoms(); chain; ++chain)\n  {\n    OEResidue chainres = OEAtomGetResidue(chain);\n    if (!prevchain || !OESameChain(chainres,prevchain))\n    {\n      OEIter&lt;OEAtomBase&gt; residue;\n      OEResidue prevres;\n\n      unsigned int count = 0;\n      for (residue=mol.GetAtoms(); residue; ++residue)\n      {\n        OEResidue resres = OEAtomGetResidue(residue);\n        if (OESameChain(resres,chainres))\n          if (!prevres || !OESameChain(resres,prevres))\n          {\n            prevres = resres;\n            count++;\n          }\n      }\n\n      cout &lt;&lt; count &lt;&lt; \" residues in chain \"\n           &lt;&lt; chainres.GetChainID() &lt;&lt; endl;\n      prevchain = chainres;\n    }\n  }\n}\n</pre></dl>\n\n<P>\nWhilst the above example contains the doubly nested loops that some\nstructural biologists like to see, the same output can be generated\neven more efficiently by:\n\n<P>\n<dl><dd><pre class=\"verbatim\">void MyReportResidues2(OEMolBase &amp;mol)\n{\n  OEIter&lt;OEAtomBase&gt; atom;\n  unsigned int count = 0;\n  OEResidue residue;\n  OEResidue chain;\n\n  for (atom=mol.GetAtoms(); atom; ++atom)\n  {\n    OEResidue res = OEAtomGetResidue(atom);\n\n    if (!chain)\n      chain = res;\n    else if (!OESameChain(res,chain))\n    {\n      cout &lt;&lt; count &lt;&lt; \" residues in chain \"\n           &lt;&lt; chain.GetChainID() &lt;&lt; endl;\n      chain = res;\n      count = 0;\n    }\n\n    if (!residue || !OESameResidue(res,residue))\n    {\n      residue = res;\n      count++;\n    }\n  }\n\n  if (count)\n      cout &lt;&lt; count &lt;&lt; \" residues in chain \"\n           &lt;&lt; chain.GetChainID() &lt;&lt; endl;\n}\n</pre></dl>\n\n<P>\nOf course, just because OEChem uses an extremely advanced representation\nof biopolymers, there's absolutely nothing to prevent a user slurping\nthis information into a FORTRAN common block or whichever representation\nbest suits their way of thinking about the problem.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node221.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node219.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node223.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node221.html\">27.1.2 Set Theory to</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node219.html\">27.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node223.html\">27.1.4 Data Modeling Bibliography</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38464.0}