{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Topological explorer Definition An instance D of the data type Topological explorer is a decorator for interfacing the topological structure of a plane map P read only A plane map P consists of a triple V E F of vertices edges and faces We collectively call them objects An edge e is a pair of vertices v w with incidence operations v source e w target e The list of all edges with source v is called the adjacency list A v Edges are paired into twins For each edge e v w there s an edge twin e w v and twin twin e e1 An edge e v w knows two adjacent edges en next e and ep previous e where source en w previous en e and target ep v and next ep e By this symmetric previous next relationship all edges are partitioned into face cycles Two edges e and e are in the same face cycle if e next e All edges e in the same face cycle have the same incident face f face e The cyclic order on the adjacency list of a vertex v source e is given by cyclic adj succ e twin previous e and cyclic adj pred e next twin e A vertex v is embedded via coordinates point v By the embedding of its source and target an edge corresponds to a segment P has the property that the embedding is always order preserving This means a ray fixed in point v of a vertex v and swept around counterclockwise meets the embeddings of target e e A v in the cyclic order defined by the list order of A The embedded face cycles partition the plane into maximal connected subsets of points Each such set corresponds to a face A face is bounded by its incident face cycles For all the edges in the non trivial face cycles it holds that the face is left of the edges There can also be trivial face cycles in form of isolated vertices in the interior of a face Each such vertex v knows its surrounding face f face v Plane maps are attributed for each object u V E F we attribute an information mark u of type Mark Mark fits the concepts assignable default constructible and equal comparable Types Topological explorer Plane map The underlying plane map type Topological explorer Point The point type of vertices Topological explorer Mark All objects vertices edges faces are attributed by a Mark object Topological explorer Size type The size type Local types are handles iterators and circulators of the following kind Vertex const handle Vertex const iterator Halfedge const handle Halfedge const iterator Face const handle Face const iterator Additionally the following circulators are defined Topological explorer Halfedge around vertex const circulator circulating the outgoing halfedges in A v Topological explorer Halfedge around face const circulator circulating the halfedges in the face cycle of a face f Topological explorer Hole const iterator iterating all holes of a face f The type is convertible to Halfedge const handle Topological explorer Isolated vertex const iterator iterating all isolated vertices of a face f The type generalizes Vertex const handle Operations Vertex const handle D source Halfedge const handle e returns the source of e Vertex const handle D target Halfedge const handle e returns the target of e Halfedge const handle D twin Halfedge const handle e returns the twin of e bool D is isolated Vertex const handle v returns true iff A v Halfedge const handle D first out edge Vertex const handle v returns one halfedge with source v It s the starting point for the circular iteration over the halfedges with source v Precondition is isolated v Halfedge const handle D last out edge Vertex const handle v returns the halfedge with source v that is the last in the circular iteration before encountering first out edge v again Precondition is isolated v Halfedge const handle D cyclic adj succ Halfedge const handle e returns the edge after e in the cyclic ordered adjacency list of source e Halfedge const handle D cyclic adj pred Halfedge const handle e returns the edge before e in the cyclic ordered adjacency list of source e Halfedge const handle D next Halfedge const handle e returns the next edge in the face cycle containing e Halfedge const handle D previous Halfedge const handle e returns the previous edge in the face cycle containing e Face const handle D face Halfedge const handle e returns the face incident to e Face const handle D face Vertex const handle v returns the face incident to v Precondition is isolated v Halfedge const handle D halfedge Face const handle f returns a halfedge in the bounding face cycle of f Halfedge const handle if there is no bounding face cycle Iteration Vertex const iterator D vertices begin iterator over vertices of the map Vertex const iterator D vertices end past the end iterator for vertices Halfedge const iterator D halfedges begin iterator over halfedges of the map Halfedge const iterator D halfedges end past the end iterator for halfedges Face const iterator D faces begin iterator over faces of the map Face const iterator D faces end past the end iterator for faces Halfedge around vertex const circulator D out edges Vertex const handle v returns a circulator for the cyclic adjacency list of v Halfedge around face const circulator D face cycle Face const handle f returns a circulator for the outer face cycle of f Hole const iterator D holes begin Face const handle f returns an iterator for all holes in the interior of f A Hole iterator can be assigned to a Halfedge around face const circulator Hole const iterator D holes end Face const handle f returns the past the end iterator of f Isolated vertex const iterator D isolated vertices begin Face const handle f returns an iterator for all isolated vertices in the interior of f Isolated vertex const iterator D isolated vertices end Face const handle f returns the past the end iterator of f Associated Information The type Mark is the general attribute of an object Point D point Vertex const handle v returns the embedding of v Mark D mark Vertex const handle v returns the mark of v Mark D mark Halfedge const handle e returns the mark of e Mark D mark Face const handle f returns the mark of f Statistics and Integrity Size type D number of vertices returns the number of vertices Size type D number of halfedges returns the number of halfedges Size type D number of edges returns the number of halfedge pairs Size type D number of faces returns the number of faces Size type D number of face cycles returns the number of face cycles Size type D number of connected components calculates the number of connected components of P void D print statistics std ostream os std cout print the statistics of P the number of vertices edges and faces void D check integrity and topological planarity bool faces true checks the link structure and the genus of P Footnotes 1 The existence of the edge pairs makes P a bidirected graph the twin links make P a map Next Explorer Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Nef_2_ref/Class_Topological_explorer.html", "title": "topological_explorer", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Nef_2_ref/Topological_explorer.tex' -->\n<html> <head>  \n<title>Topological_explorer</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_715\"></A>\n\n<A NAME=\"Cross_link_anchor_716\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_742\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Topological_explorer\"></A>\n<h2><I>CGAL::Topological_explorer</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance <I>D</I> of the data type <I><A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A></I> is a\ndecorator for interfacing the topological structure of a plane map\n<I>P</I> (read-only).\n<P>\n\nA plane map <I>P</I> consists of a triple <MATH><I>(V, E, F)</I></MATH> of vertices,\nedges, and faces. We collectively call them objects. An edge <I>e</I>\nis a pair of vertices <I>(v,w)</I> with incidence operations <I>v = source(e)</I>, <I>w = target(e)</I>. The list of all edges with source\n<I>v</I> is called the adjacency list <I>A(v)</I>.\n<P>\n\nEdges are paired into twins. For each edge <I>e = (v,w)</I> there's an\nedge <I>twin(e) = (w,v)</I> and <I>twin(twin(e)) == e</I><A HREF=\"#Footnote_1\"><SUP>1</SUP></A>.\n<P>\n\nAn edge <I>e = (v,w)</I> knows two adjacent edges <I>en = next(e)</I>\nand <I>ep = previous(e)</I> where <I>source(en) = w</I>,\n<I>previous(en) = e</I> and <I>target(ep) = v</I> and <I>next(ep) = e</I>. By this symmetric <I>previous-next</I> relationship all edges are\npartitioned into face cycles.  Two edges <MATH><I>e</I></MATH> and <MATH><I>e'</I></MATH> are in the same\nface cycle if <MATH><I>e = <I>next</I><SUP>*</SUP>(e')</I></MATH>.  All edges <I>e</I> in the same\nface cycle have the same incident face <MATH><I>f = <I>face</I>(e)</I></MATH>. The cyclic\norder on the adjacency list of a vertex <I>v = source(e)</I> is given\nby <I>cyclic_adj_succ(e) = twin(previous(e))</I> and\n<I>cyclic_adj_pred(e) = next(twin(e))</I>.\n<P>\n\nA vertex <I>v</I> is embedded via coordinates <I>point(v)</I>. By the\nembedding of its source and target an edge corresponds to a\nsegment. <I>P</I> has the property that the embedding is always\n<I>order-preserving</I>.  This means a ray fixed in <I>point(v)</I> of\na vertex <I>v</I> and swept around counterclockwise meets the\nembeddings of <I>target(e)</I> (<MATH><I>e  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> A(v)</I></MATH>) in the cyclic order\ndefined by the list order of <I>A</I>.\n<P>\n\nThe embedded face cycles partition the plane into maximal connected\nsubsets of points. Each such set corresponds to a face. A face is\nbounded by its incident face cycles. For all the edges in the\nnon-trivial face cycles it holds that the face is left of the edges.\nThere can also be trivial face cycles in form of isolated vertices in\nthe interior of a face. Each such vertex <I>v</I> knows its surrounding\nface <I>f = face(v)</I>.\n<P>\n\nPlane maps are attributed, for each object <MATH><I>u  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> V  <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> E  <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> F</I></MATH> we\nattribute an information <I>mark(u)</I> of type <I>Mark</I>. <I>Mark</I>\nfits the concepts assignable, default-constructible, and\nequal-comparable.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Plane_map\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The underlying plane map type\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Point\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The point type of vertices.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Mark\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    All objects (vertices, edges, faces) are attributed by a <I>Mark</I> object.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Size_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The size type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nLocal types are handles, iterators and circulators of the following\nkind: <I>Vertex_const_handle</I>, <I>Vertex_const_iterator</I>,\n<I>Halfedge_const_handle</I>, <I>Halfedge_const_iterator</I>,\n<I>Face_const_handle</I>, <I>Face_const_iterator</I>.\nAdditionally the following circulators are defined.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Halfedge_around_vertex_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulating the outgoing halfedges in <MATH><I>A(v)</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Halfedge_around_face_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    circulating the halfedges in the face cycle of a face <I>f</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Hole_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterating all holes of a face <I>f</I>. The type is \nconvertible to <I>Halfedge_const_handle</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Topological_explorer.html#Cross_link_anchor_716\">Topological_explorer</A>::Isolated_vertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    iterating all isolated vertices of a face <I>f</I>. \nThe type generalizes <I>Vertex_const_handle</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_const_handle_source6Halfedge_const_handle_e9_;\"></A>\nVertex_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.source ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source of <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_const_handle_target6Halfedge_const_handle_e9_;\"></A>\nVertex_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.target ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target of <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_twin6Halfedge_const_handle_e9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.twin ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the twin of <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_isolated6Vertex_const_handle_v9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.is_isolated ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> iff <MATH><I>A(v) =  <IMG BORDER=0 WIDTH=6 HEIGHT=28 ALIGN=MIDDLE SRC=\"cc_emptyset.gif\"> </I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_first_out_edge6Vertex_const_handle_v9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.first_out_edge ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns one halfedge with source <I>v</I>. It's the starting point for\n  the circular iteration over the halfedges with source <I>v</I>.<BR>\n\n<EM>Precondition: </EM><I>!is_isolated(v)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_last_out_edge6Vertex_const_handle_v9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.last_out_edge ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the halfedge with source <I>v</I> that is the last\n  in the circular iteration before encountering <I>first_out_edge(v)</I> \n  again.<BR>\n\n<EM>Precondition: </EM><I>!is_isolated(v)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_cyclic_adj_succ6Halfedge_const_handle_e9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.cyclic_adj_succ ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the edge after <I>e</I> in the cyclic ordered adjacency list of\n<I>source(e)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_cyclic_adj_pred6Halfedge_const_handle_e9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.cyclic_adj_pred ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the edge before <I>e</I> in the cyclic ordered adjacency list of\n<I>source(e)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_next6Halfedge_const_handle_e9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.next ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the next edge in the face cycle containing <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_previous6Halfedge_const_handle_e9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.previous ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the previous edge in the face cycle containing <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_const_handle_face6Halfedge_const_handle_e9_;\"></A>\nFace_const_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.face ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the face incident to <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_const_handle_face6Vertex_const_handle_v9_;\"></A>\nFace_const_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.face ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the face incident to <I>v</I>.<BR>\n\n<EM>Precondition: </EM><I>is_isolated(v)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_handle_halfedge6Face_const_handle_f9_;\"></A>\nHalfedge_const_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.halfedge ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a halfedge in the bounding face cycle of <I>f</I> \n(<I>Halfedge_const_handle()</I> if there is no bounding face cycle).\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Iteration</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_const_iterator_vertices_begin69;\"></A>\nVertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over vertices of the map.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_const_iterator_vertices_end69;\"></A>\nVertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    D.vertices_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    past-the-end iterator for vertices.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_iterator_halfedges_begin69;\"></A>\nHalfedge_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.halfedges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over halfedges of the map.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_const_iterator_halfedges_end69;\"></A>\nHalfedge_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    D.halfedges_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    past-the-end iterator for halfedges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_const_iterator_faces_begin69;\"></A>\nFace_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    D.faces_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    iterator over faces of the map.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_const_iterator_faces_end69;\"></A>\nFace_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    D.faces_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    past-the-end iterator for faces\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_vertex_const_circulator_out_edges6Vertex_const_handle_v9_;\"></A>\nHalfedge_around_vertex_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.out_edges ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a circulator for the cyclic adjacency list of <I>v</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_around_face_const_circulator_face_cycle6Face_const_handle_f9_;\"></A>\nHalfedge_around_face_const_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.face_cycle ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a circulator for the outer face cycle of <I>f</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hole_const_iterator_holes_begin6Face_const_handle_f9_;\"></A>\nHole_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.holes_begin ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator for all holes in the interior of <I>f</I>.\nA <I>Hole_iterator</I> can be assigned to a \n<I>Halfedge_around_face_const_circulator</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Hole_const_iterator_holes_end6Face_const_handle_f9_;\"></A>\nHole_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.holes_end ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past-the-end iterator of <I>f</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Isolated_vertex_const_iterator_isolated_vertices_begin6_Face_const_handle_f9_;\"></A>\nIsolated_vertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.isolated_vertices_begin ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an iterator for all isolated vertices in the interior of <I>f</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Isolated_vertex_const_iterator_isolated_vertices_end6_Face_const_handle_f9_;\"></A>\nIsolated_vertex_const_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.isolated_vertices_end ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the past the end iterator of <I>f</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Associated Information</H3>\nThe type <I>Mark</I> is the general attribute of an object.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Point__point6Vertex_const_handle_v9_;\"></A>\n Point\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.point ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the embedding of <I>v</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Mark__mark6Vertex_const_handle_v9_;\"></A>\n Mark\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.mark ( Vertex_const_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the mark of <I>v</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Mark__mark6Halfedge_const_handle_e9_;\"></A>\n Mark\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.mark ( Halfedge_const_handle e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the mark of <I>e</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Mark__mark6Face_const_handle_f9_;\"></A>\n Mark\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.mark ( Face_const_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the mark of <I>f</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Statistics and Integrity</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_vertices69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of vertices.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_halfedges69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_halfedges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of halfedges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_edges69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_edges ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of halfedge pairs.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_faces69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_faces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of faces.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_face_cycles69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_face_cycles ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the number of face cycles.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Size_type_number_of_connected_components69_;\"></A>\nSize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.number_of_connected_components ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    calculates the number of connected components of <I>P</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_print_statistics6std::ostream__os_=_std::cout9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.print_statistics ( std::ostream&amp; os = std::cout)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    print the statistics of <I>P</I>: the number of vertices, edges, \n  and faces.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_check_integrity_and_topological_planarity6bool_faces=true9_;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    D.check_integrity_and_topological_planarity ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    bool faces=true)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    checks the link structure and the genus of <I>P</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nThe\nexistence of the edge pairs makes <I>P</I> a bidirected graph, the\n<I>twin</I> links make <I>P</I> a map.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Explorer.html\"><I>Explorer</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_12!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38860.0}