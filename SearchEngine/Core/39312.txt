{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Circulator tag Definition Iterators and circulators as well as different categories of circulators can be distinguished with the use of discriminating functions and the following circulator tags A couple of base classes simplify the task of writing own circulators They declare the appropriate tags and the local types needed for circulators To use the tags or base classes only it is sufficient to include include CGAL circulator bases h include CGAL circulator h Compile Time Tags struct Circulator tag any circulator struct Iterator tag any iterator struct Forward circulator tag derived from forward iterator tag struct Bidirectional circulator tag derived from bidirectional iterator tag struct Random access circulator tag derived from random access iterator tag Base Classes template class Category class T class Dist std ptrdiff t class Size std size t class Ptr T class Ref T struct Circulator base template class T class Dist class Size struct Forward circulator base template class T class Dist class Size struct Bidirectional circulator base template class T class Dist class Size struct Random access circulator base See Also query circulator or iterator Circulator traits Assert circulator CGAL For all is empty range Circulator Example The above declarations can be used to distinguish between iterators and circulators and between different circulator categories The assertions can be used to protect a templatized algorithm against instantiations that do not fulfill the requirements The following example program illustrates both file examples Circulator circulator prog3 C include CGAL basic h include cassert include list include CGAL circulator h template class C inline int foo C c std forward iterator tag CGAL Assert circulator c CGAL Assert forward category c return 1 template class C inline int foo C c std random access iterator tag CGAL Assert circulator c CGAL Assert random access category c return 2 template class I inline int foo I i CGAL Iterator tag CGAL Assert iterator i return 3 template class C inline int foo C c CGAL Circulator tag CGAL Assert circulator c typedef std iterator traits C Traits typedef typename Traits iterator category iterator category return foo c iterator category template class IC inline int foo IC ic typedef CGAL Circulator traits IC Traits typedef typename Traits category category return foo ic category int main typedef CGAL Forward circulator base int F typedef CGAL Random access circulator base int R F f F R r R std list int l assert foo f 1 assert foo r 2 assert foo l begin 3 return Implementation Since not all current compilers can eliminate the space needed for the compile time tags even when deriving from them we implement a variant for each base class that contains a protected void data member called ptr Here the allocated space in the derived classes can be reused template class T class Dist class Size class Forward circulator ptrbase forward circulator template class T class Dist class Size class Bidirectional circulator ptrbase bidirectional circulator template class T class Dist class Size class Random access circulator ptrbase random access circulator Next Circulator traits C Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Circulator_ref/Class_Circulator_tag.html", "title": "circulator_tag", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Circulator_ref/Circulator_tag.tex' -->\n<html> <head>  \n<title>Circulator_tag</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1619\"></A>\n\n<A NAME=\"Cross_link_anchor_1620\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1513\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Circulator_tag\"></A>\n<h2><I>CGAL::Circulator_tag</I></h2>\n<P>\n\n<A NAME=\"Cross_link_anchor_1621\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1622\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1623\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1624\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1625\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1626\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1627\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1628\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1629\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1630\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1631\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1632\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1633\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1634\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1635\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1636\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1637\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1638\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1639\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1640\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1641\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1642\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1643\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1644\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1645\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1646\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1647\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1648\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1649\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1650\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1651\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1652\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1653\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1654\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1655\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1656\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nIterators and circulators as well as different categories of\ncirculators can be distinguished with the use of discriminating\nfunctions and the following circulator tags.  A couple of base classes\nsimplify the task of writing own circulators. They declare the\nappropriate tags and the local types needed for circulators.\nTo use the tags or base classes only it is sufficient to include:\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator_bases.h\">CGAL/circulator_bases.h</A>&gt;</I>\n<P>\n\n<BR>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator.h\">CGAL/circulator.h</A>&gt;</I>\n<P>\n\n<H3>Compile Time Tags</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Circulator_tag\"></A>\n<A NAME=\"Struct_Circulator_tag\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1620\">Circulator_tag</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    any circulator.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Iterator_tag\"></A>\n<A NAME=\"Struct_Iterator_tag\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1639\">Iterator_tag</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    any iterator.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Forward_circulator_tag\"></A>\n<A NAME=\"Struct_Forward_circulator_tag\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1640\">Forward_circulator_tag</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    derived from <I>forward_iterator_tag</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Bidirectional_circulator_tag\"></A>\n<A NAME=\"Struct_Bidirectional_circulator_tag\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1641\">Bidirectional_circulator_tag</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    derived from <I>bidirectional_iterator_tag</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Random_access_circulator_tag\"></A>\n<A NAME=\"Struct_Random_access_circulator_tag\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1642\">Random_access_circulator_tag</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    derived from <I>random_access_iterator_tag</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Base Classes</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt; class Category, class T, class Dist = std::ptrdiff_t, class Size = std::size_t, class Ptr = T*, class Ref = T&amp;&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Circulator_base\"></A>\n<A NAME=\"Struct_Circulator_base\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1643\">Circulator_base</A>;\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n\n\n<A NAME=\"ccRef_CGAL::Circulator_base\"></A>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Forward_circulator_base\"></A>\n<A NAME=\"Struct_Forward_circulator_base\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1645\">Forward_circulator_base</A>;\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Bidirectional_circulator_base\"></A>\n<A NAME=\"Struct_Bidirectional_circulator_base\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1647\">Bidirectional_circulator_base</A>;\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Random_access_circulator_base\"></A>\n<A NAME=\"Struct_Random_access_circulator_base\"></A>\nstruct <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1649\">Random_access_circulator_base</A>;\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_query_circulator_or_iterator.html#Cross_link_anchor_1669\">query_circulator_or_iterator</A></I>,\n<I><A HREF=\"Class_Circulator_traits.html#Cross_link_anchor_1658\">Circulator_traits</A></I>,\n<I><A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1588\">Assert_circulator</A></I>,<BR>\n\n<I><A HREF=\"Macro_CGAL_For_all.html#Cross_link_anchor_1661\">CGAL_For_all</A></I>,\n<I><A HREF=\"Function_is_empty_range.html#Cross_link_anchor_1665\">is_empty_range</A></I>,\n<I><A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A></I>.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe above declarations can be used to distinguish between iterators\nand circulators and between different circulator categories. The\nassertions can be used to protect a templatized algorithm against\ninstantiations that do not fulfill the requirements. The following\nexample program illustrates both.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>/circulator_prog3.C\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;cassert&gt;\n#include &lt;list&gt;\n#include &lt;CGAL/circulator.h&gt;\n\ntemplate &lt;class C&gt; inline  int foo( C c, std::forward_iterator_tag) { \n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1587\">CGAL::Assert_circulator</A>( c);\n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1593\">CGAL::Assert_forward_category</A>( c);\n    return 1;\n}\ntemplate &lt;class C&gt; inline  int foo( C c, std::random_access_iterator_tag) { \n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1587\">CGAL::Assert_circulator</A>( c);\n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1595\">CGAL::Assert_random_access_category</A>( c);\n    return 2;\n}\ntemplate &lt;class I&gt; inline  int foo( I i, <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1621\">CGAL::Iterator_tag</A>) { \n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1589\">CGAL::Assert_iterator</A>( i);\n    return 3;\n}\n\ntemplate &lt;class C&gt; inline  int foo( C c, <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1619\">CGAL::Circulator_tag</A>) { \n    <A HREF=\"Function_Assert_circulator.html#Cross_link_anchor_1587\">CGAL::Assert_circulator</A>( c);\n    typedef std::iterator_traits&lt;C&gt; Traits;\n    typedef typename Traits::iterator_category iterator_category;\n    return foo( c, iterator_category());\n}\ntemplate &lt;class IC&gt; inline  int foo( IC ic) { \n    typedef <A HREF=\"Class_Circulator_traits.html#Cross_link_anchor_1657\">CGAL::Circulator_traits</A>&lt;IC&gt; Traits;\n    typedef typename Traits::category category;\n    return foo( ic, category());\n}\n\nint main() {\n    typedef <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1627\">CGAL::Forward_circulator_base</A>&lt;int&gt;       F;\n    typedef <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1631\">CGAL::Random_access_circulator_base</A>&lt;int&gt; R;\n    F f = F();\n    R r = R();\n    std::list&lt;int&gt; l;\n    assert( foo( f)         == 1);\n    assert( foo( r)         == 2);\n    assert( foo( l.begin()) == 3);\n    return 0;\n}\n</pre>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nSince not all current compilers can eliminate the space needed for the\ncompile time tags even when deriving from them, we implement a variant\nfor each base class that contains a protected <I>void*</I> data member\ncalled <I>_ptr</I>. Here, the allocated space in the derived\nclasses can be reused.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Forward_circulator_ptrbase\"></A>\n<A NAME=\"Struct_Forward_circulator_ptrbase\"></A>\nclass <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1651\">Forward_circulator_ptrbase</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    forward circulator.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Bidirectional_circulator_ptrbase\"></A>\n<A NAME=\"Struct_Bidirectional_circulator_ptrbase\"></A>\nclass <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1653\">Bidirectional_circulator_ptrbase</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    bidirectional circulator.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;class T, class Dist, class Size&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Random_access_circulator_ptrbase\"></A>\n<A NAME=\"Struct_Random_access_circulator_ptrbase\"></A>\nclass <A HREF=\"Class_Circulator_tag.html#Cross_link_anchor_1655\">Random_access_circulator_ptrbase</A>;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    random access circulator.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Circulator_traits.html\"><I>Circulator_traits&lt;C&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39312.0}