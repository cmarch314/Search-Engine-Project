{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Apollonius graph hierarchy 2 Gt Agds Definition We provide an alternative to the class Apollonius graph 2 Gt Agds for the dynamic construction of the Apollonius graph The Apollonius graph hierarchy 2 Gt Agds class maintains a hierarchy of Apollonius graphs The bottom most level of the hierarchy contains the full Apollonius diagram A site that is in level i is in level i 1 with probability 1 where 1 is some constant The difference between the Apollonius graph 2 Gt Agds class and the Apollonius graph hierarchy 2 Gt Agds is on how the nearest neighbor location is done Given a point p the location is done as follows at the top most level we find the nearest neighbor of p as in the Apollonius graph 2 Gt Agds class At every subsequent level i we use the nearest neighbor found at level i 1 to find the nearest neighbor at level i This is a variant of the corresponding hierarchy for points found in Dev98 The class has two template parameters which have essentially the same meaning as in the Apollonius graph 2 Gt Agds class The first template parameter must be a model of the ApolloniusGraphTraits 2 concept The second template parameter must be a model of the ApolloniusGraphDataStructure 2 concept However the vertex base class that is to be used in the Apollonius graph data structure must be a model of the ApolloniusGraphHierarchyVertexBase 2 concept The second template parameter defaults to Triangulation data structure 2 Apollonius graph hierarchy vertex base 2 Apollonius graph vertex base 2 Gt true Triangulation face base 2 Gt The Apollonius graph hierarchy 2 Gt Agds class derives publicly from the Apollonius graph 2 Gt Agds class The interface is the same with its base class In the sequel only the methods overridden are documented include CGAL Apollonius graph hierarchy 2 h Inherits FromCGAL Apollonius graph 2 Gt Agds TypesApollonius graph hierarchy 2 Gt Agds does not introduce other types than those introduced by its base class Apollonius graph 2 Gt Agds Creation Apollonius graph hierarchy 2 Gt Agds agh Gt gt Gt Creates an hierarchy of Apollonius graphs using gt as geometric traits template class Input iterator Apollonius graph hierarchy 2 Gt Agds agh Input iterator first Input iterator beyond Gt gt Gt Creates an Apollonius graph hierarchy using gt as geometric traits and inserts all sites in the range first beyond Apollonius graph hierarchy 2 Gt Agds agh other Copy constructor All faces vertices and inter level pointers are duplicated After the construction agh and other refer to two different Apollonius graph hierarchies if other is modified agh is not Apollonius graph hierarchy 2 Gt Agds agh other Assignment All faces vertices and inter level pointers are duplicated After the construction agh and other refer to two different Apollonius graph hierarchies if other is modified agh is not Insertion template class Input iterator unsigned int agh insert Input iterator first Input iterator beyond Inserts the sites in the range first beyond The number of sites in the range first beyond is returned Precondition Input iterator must be a model of InputIterator and its value type must be Site 2 Vertex handle agh insert Site 2 s Inserts the site s in the Apollonius graph hierarchy If s is visible then the vertex handle of s is returned otherwise Vertex handle NULL is returned Vertex handle agh insert Site 2 s Vertex handle vnear Inserts s in the Apollonius graph hierarchy using the site associated with vnear as an estimate for the nearest neighbor of the center of s If s is visible then the vertex handle of s is returned otherwise Vertex handle NULL is returned A call to this method is equivalent to agh insert s and it has been added for the sake of conformity with the interface of the Apollonius graph 2 Gt Agds class Removal void agh remove Vertex handle v Removes the site associated to the vertex handle v from the Apollonius graph hierarchy Precondition v must correspond to a valid finite vertex of the Apollonius graph hierarchy Nearest neighbor location Vertex handle agh nearest neighbor Point p Finds the nearest neighbor of the point p In other words it finds the site whose Apollonius cell contains p Ties are broken arbitrarily and one of the nearest neighbors of p is returned If there are no visible sites in the Apollonius diagram Vertex handle NULL is returned Vertex handle agh nearest neighbor Point p Vertex handle vnear Finds the nearest neighbor of the point p If there are no visible sites in the Apollonius diagram Vertex handle NULL is returned A call to this method is equivalent to agh nearest neighbor p and it has been added for the sake of conformity with the interface of the Apollonius graph 2 Gt Agds class Validity check bool agh is valid bool verbose false int level 1 Checks the validity of the Apollonius graph hierarchy If verbose is true a short message is sent to std cerr If level is the data structure at all levels is validated as well as the inter level pointers If level is 1 then the data structure at all levels is validated the inter level pointers are validated and all levels of the Apollonius graph hierarchy are also validated Negative values of level always return true and values greater then 1 are equivalent to level being 1 Miscellaneous void agh clear Clears all contents of the Apollonius graph hierarchy void agh swap other The Apollonius graph hierarchies other and agh are swapped agh swap other should be preferred to agh other or to agh other if other is deleted afterwards See AlsoApolloniusGraphDataStructure 2 ApolloniusGraphTraits 2 ApolloniusGraphHierarchyVertexBase 2 CGAL Apollonius graph 2 Gt Agds CGAL Triangulation data structure 2 Vb Fb CGAL Apollonius graph traits 2 K Method tag CGAL Apollonius graph filtered traits 2 CK CM EK EM FK FM CGAL Apollonius graph hierarchy vertex base 2 Agvb Next ApolloniusGraphHierarchyVertexBase 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Apollonius_graph_2_ref/Class_Apollonius_graph_hierarchy_2.html", "title": "apollonius_graph_hierarchy_2&lt;gt,agds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Apollonius_graph_2_ref/Apollonius_graph_hierarchy_2.tex' -->\n<html> <head>  \n<title>Apollonius_graph_hierarchy_2&lt;Gt,Agds&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1080\"></A>\n\n<A NAME=\"Cross_link_anchor_1081\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_988\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Apollonius_graph_hierarchy_2<Gt,Agds>\"></A>\n<h2><I>CGAL::Apollonius_graph_hierarchy_2&lt;Gt,Agds&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nWe provide an alternative to the class\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> for the dynamic\nconstruction of the Apollonius graph. The <I><A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt;</I> class maintains\na hierarchy of Apollonius graphs. The bottom-most level of the\nhierarchy contains the full Apollonius diagram. A site that\nis in level <MATH><I>i</I></MATH>, is in level <MATH><I>i+1</I></MATH> with probability <MATH><I>1/<IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>\nwhere <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">&gt; 1</I></MATH> is some constant. The difference between the\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class and the\n<I><A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt;</I> is on how the nearest neighbor location is done. Given a\npoint <MATH><I>p</I></MATH> the location is done as follows: at the top most level we\nfind the nearest neighbor of <MATH><I>p</I></MATH> as in the\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class. At every subsequent level <MATH><I>i</I></MATH>\nwe use the nearest neighbor found at level <MATH><I>i+1</I></MATH> to find the nearest\nneighbor at level <MATH><I>i</I></MATH>. This is a variant of the corresponding\nhierarchy for points found in [<A HREF=\"../biblio.html#Biblio_d-iirdt-98\">Dev98</A>].\nThe class has two template parameters which have essentially the same\nmeaning as in the <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class. The first\ntemplate parameter must be a model of the\n<I><A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A></I> concept.\nThe second template parameter must be a model of the\n<I><A HREF=\"Concept_ApolloniusGraphDataStructure_2.html#Cross_link_anchor_1071\">ApolloniusGraphDataStructure_2</A></I> concept. However, the vertex base\nclass that is to be used in the Apollonius graph data structure must\nbe a model of the <I><A HREF=\"Concept_ApolloniusGraphHierarchyVertexBase_2.html#Cross_link_anchor_1082\">ApolloniusGraphHierarchyVertexBase_2</A></I> concept.\nThe second template parameter defaults to\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_966\">Triangulation_data_structure_2</A>&lt; <A HREF=\"Class_Apollonius_graph_hierarchy_vertex_base_2.html#Cross_link_anchor_1084\">Apollonius_graph_hierarchy_vertex_base_2</A>&lt;  <A HREF=\"Class_Apollonius_graph_vertex_base_2.html#Cross_link_anchor_1074\">Apollonius_graph_vertex_base_2</A>&lt;Gt,true&gt; &gt;, <A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_947\">Triangulation_face_base_2</A>&lt;Gt&gt; &gt;</I>.\n<P>\n\nThe <I><A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt;</I> class derives publicly from the\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class. The interface is\nthe same with its base class. In the sequel only the methods\noverridden are documented.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Apollonius_graph_hierarchy_2.h\">CGAL/Apollonius_graph_hierarchy_2.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3><I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1066\">CGAL::Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I>\n<P>\n\n<H3>Types</H3><I><A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt;</I> does not introduce other types than those introduced by\nits base class <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I>.\n<P>\n\n<H3>Creation</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt; agh ( Gt gt=Gt());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates an hierarchy of Apollonius graphs using <I>gt</I> as\ngeometric traits.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt; agh ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond,<BR>\n\nGt gt=Gt());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates an Apollonius graph hierarchy using \n<I>gt</I> as geometric traits and inserts all sites in the\nrange [<I>first</I>, <I>beyond</I>).\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt; agh (  other);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor. All faces, vertices and inter-level pointers\nare duplicated. After the construction, <I>agh</I> and <I>other</I> refer\nto two different Apollonius graph hierarchies: if \n<I>other</I> is modified, <I>agh</I> is not.\n<P>\n\n</TD></TR>\n        </TABLE>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_Apollonius_graph_hierarchy_2.html#Cross_link_anchor_1081\">Apollonius_graph_hierarchy_2</A>&lt;Gt,Agds&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     agh =  other<A NAME=\"Function_Apollonius_graph_hierarchy_26Gt+Agds9_operator=6Apollonius_graph_hierarchy_26Gt+Agds9_other9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assignment. All faces, vertices and inter-level pointers\nare duplicated. After the construction, <I>agh</I> and <I>other</I> refer\nto two different Apollonius graph hierarchies: if \n<I>other</I> is modified, <I>agh</I> is not.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_unsigned_int_insert6Input_iterator_first+_Input_iterator_beyond9;\"></A>\nunsigned int\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    agh.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the sites in the range\n[<I>first</I>,<I>beyond</I>). The number of sites in the range\n  [<I>first</I>, <I>beyond</I>) is returned.<BR>\n\n<EM>Precondition: </EM><I>Input_iterator</I> must be a model of <I>InputIterator</I>\n  and its value type must be <I>Site_2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.insert ( Site_2 s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the\nsite <I>s</I> in the Apollonius graph hierarchy. If <I>s</I>\nis visible then the vertex handle of <I>s</I> is returned, otherwise \n<I>Vertex_handle(NULL)</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.insert ( Site_2 s,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts <I>s</I> in the Apollonius graph hierarchy using the\nsite associated with <I>vnear</I> as\nan estimate for the nearest neighbor of the center of <I>s</I>.\nIf <I>s</I> is visible then the vertex handle of <I>s</I> is\nreturned, otherwise <I>Vertex_handle(NULL)</I> is returned.\nA call to this method is equivalent to <I>agh.insert(s);</I> and it has\nbeen added for the sake of conformity with the interface of the\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Removal</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.remove ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Removes the site\nassociated to the vertex handle <I>v</I> from the Apollonius\ngraph hierarchy.<BR>\n\n<EM>Precondition: </EM><I>v</I> must correspond to a valid finite\nvertex of the Apollonius graph hierarchy.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Nearest neighbor location</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point <I>p</I>. In other words it\nfinds the site whose Apollonius cell contains <I>p</I>. Ties are broken\narbitrarily and one of the nearest neighbors of <I>p</I> is\nreturned. If there are no visible sites in the Apollonius diagram\n<I>Vertex_handle(NULL)</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_p+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( Point p,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point\n<I>p</I>. If there are no visible sites in the Apollonius diagram\n<I>Vertex_handle(NULL)</I> is returned.\nA call to this method is equivalent to \n<I>agh.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A>(p);</I> and it has been added for the sake of\nconformity with the interface of the\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I> class.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Validity check</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false+_int_level_=_19_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    agh.is_valid ( bool verbose = false,  int level = 1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Checks the validity of the Apollonius graph hierarchy. If\n<I>verbose</I> is <I>true</I> a short message is sent to\n<I>std::cerr</I>. If <I>level</I> is 0, the data structure at all levels \nis validated, as well as the inter-level pointers. If <I>level</I> is\n1, then the data structure at all levels is validated, the inter-level\npointers are validated and all levels of the Apollonius graph\nhierarchy are also validated. Negative values of <I>level</I> always\nreturn <I>true</I>, and values greater then 1 are equivalent to\n<I>level</I> being 1.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    agh.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clears all contents of the Apollonius graph\nhierarchy.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_swap6Apollonius_graph_hierarchy_26Gt+Agds9_other9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    agh.swap (  other)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The Apollonius graph hierarchies <I>other</I> and <I>agh</I> are\nswapped. <I>agh</I>.<I>swap(other)</I> should be preferred to <I>agh</I><I> = other</I> or to <I>agh</I><I>(other)</I> if <I>other</I> is deleted afterwards.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_ApolloniusGraphDataStructure_2.html#Cross_link_anchor_1071\">ApolloniusGraphDataStructure_2</A></I><BR>\n\n<I><A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ApolloniusGraphHierarchyVertexBase_2.html#Cross_link_anchor_1082\">ApolloniusGraphHierarchyVertexBase_2</A></I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1066\">CGAL::Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I><BR>\n\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_traits_2.html#Cross_link_anchor_1076\">CGAL::Apollonius_graph_traits_2</A>&lt;K,Method_tag&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_filtered_traits_2.html#Cross_link_anchor_1078\">CGAL::Apollonius_graph_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_hierarchy_vertex_base_2.html#Cross_link_anchor_1083\">CGAL::Apollonius_graph_hierarchy_vertex_base_2</A>&lt;Agvb&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_ApolloniusGraphHierarchyVertexBase_2.html\"><I>ApolloniusGraphHierarchyVertexBase_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_46!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39118.0}