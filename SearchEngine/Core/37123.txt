{"text": "APBS 4 User Guide Adaptive Poisson Boltzmann Solver PreviousInstallationNext Source installationIf you were unable to find the binary pacakge for your system or would like to compile APBS yourself you ll need to read the instructions in this section PrerequisitesIn order to install APBS from the source code you will need C and Fortran compilersThe APBS source code see above The MALOC hardware abstraction library available from http www scicomp ucsd edu mholst codes maloc index html It may also be useful to have A version of MPI try MPICH for parallel jobs MPI isn t strictly necessary if the async option is used A compatible visualization program see the Visualization section of this document Preparation for installationIn what follows I ll be assuming you re using bash a fantastic shell available on many platforms UNIX and non UNIX Compiler variablesFirst please look at the Machine specific notes section of this document for appropriate compiler flags etc to be set via pre configuration environmental variables It s not a big deal if you skip this step but APBS will run more slowly Installation directoriesThere are two directories you ll need to identify prior to installation The first which we ll call FETK SRC will contain the APBS and MALOC source code This directory can be deleted after installation if you wish The second directory will be the permanent location for APBS and MALOC we ll call this FETK PREFIX If you have root permission you could pick a global directory such as usr local for this otherwise pick a directory for which you have write permission The following commands set up the directories and environmental which point to them export FETK SRC home soft src export FETK PREFIX home soft export FETK INCLUDE FETK PREFIX include export FETK LIBRARY FETK PREFIX lib mkdir p FETK SRC FETK INCLUDE FETK LIBRARY If you re planning to use MPI you ll need to set some additional environmental variables The variable FETK MPI INCLUDE points to the directory where the MPI header files reside mpi h and the variable FETK MPI LIBRARY points to the directory where the MPI libraries are located libmpi a or libmpich a For example on my system I type export FETK MPI INCLUDE usr share mpi include export FETK MPI LIBRARY usr share mpi lib Unpacking the source codeYou re now ready to unpack the source code cd FETK SRC gzip dc maloc tar gz tar xvf gzip dc apbs 4 tar gz tar xvf Compiling MALOCNow we need to compile the hardware abstraction library MALOC First go to the MALOC directory cd FETK SRC maloc If you are not starting from a freshly untarred version of MALOC you need to clean up the previous distribution by make distclean and ignoring any error messages that may result MALOC is configured for installation with the autoconf script configure Configure options can be listed with the help option However MALOC is usually configured in one of two ways for use with APBS Sequential execution only no MPI configure prefix FETK PREFIX With parallel execution MPI configure prefix FETK PREFIX enable mpi Be sure to keep an eye out for warning messages during the configuration of MALOC especially if you are using MPI At this point you are ready to make and install MALOC make make install If all went well you ll see an error message if either the compilation or installation failed then you re ready to install APBS Configuring compiling and installing APBS is configured and installed much the same way as MALOC First you need to configure with the autoconf configure script As before you can examine the various configure options with the help option For most platforms no options need to be specified APBS s autoconf setup automatically detects whether MALOC was compiled with MPI and configures itself appropriately Therefore most users can configure as follows cd FETK SRC apbs configure prefix FETK PREFIX There s no need to pay too much attention to the autoconf messages here If the APBS configuration script can t find something it needs it will simply fail to configure and exit with a hopefully informative error message If you have a vendor supplied BLAS math library you will probably compile a faster version of APBS if you link to it instead of the BLAS version provided with MALOC This is done by passing the appropriate linking options to configure with the with blas flag For example suppose you had a machine specific version of the BLAS library at usr local lib libblas a You would then configure APBS by cd FETK SRC apbs configure prefix FETK PREFIX with blas L usr local lib lblas Assuming all has gone well with the configuration you re ready to compile and install APBS make all make install This will place a version of the APBS binary at FETK PREFIX bin host cpu host vendor host os apbs where host cpu host vendor host os is a machine specific string This extra layer of obfuscation lets you keep several APBS binaries around in the same directory At this point you are ready to use APBS either by calling the binary directly or adding the above directory to your path There are also several tools provided with APBS that remain in the APBS directory these are described in later portions of this manual You may wish to copy these to a global location or the same place as your APBS binary at this time Machine specific notesWhile the APBS and MALOC autoconf configure scripts are flexible enough to work on most platforms the resulting executables don t always offer optimal performance We re slowly trying to provide binary support for some of the more popular platforms this section is meant to supplement our pre compiled binaries and provide some tips on how to get a better APBS binary on your platform If you have tips or tricks on improving APBS performance on your machine please let us know Intel IA32 IA64In what follows we re denoting Pentium Xeon 32 bit Intel machines as IA32 and Itanium 64 bit Intel machines as IA64 WindowsWe are happy to now provide native APBS command line binaries for Windows The binary is probably the best option available but if you would still like to compile your own binaries you will need to use either the Cygwin or MinGW environments Binaries compiled under Cygwin tend to require Cygwin DLLs and thus can only be run on systems with Cygwin Performance for the Windows binaries and all compiled systems will be fairly mediocre as they depend on the GNU compilers If you do choose to use Cygwin and compile your own code compilation should be rather straightforward Linux Compilation under Linux should be very straightforward as this is the platform on which APBS was developed This section describes various compilation options under Linux GNU Nearly every Linux distribution comes with the GNU compilers autoconf with configure with these by default Furthermore autoconf will automatically choose reasonable optimization O2 and debugging g options I haven t had very good luck improving the performance beyond what s available with O2 and given the availablity of the free Intel compilers I m not sure it s worth trying too hard Intel We ve mainly used the free for Linux Intel compilers and have observed very good performance There were some incompatibility issues with version 7 of the Intel compilers and newer versions of Linux particularly those running glibc 2 3 e g RedHat 8 and 9 First you need to make sure the Intel compilers are set up properly this usually is done by sourcing one of the input bash or csh scripts provided with the compilers You then need to define the environmental variables appropriate to these compilers before you configure either MALOC or APBS This is done by export CC icc export CXX icc export F77 ifort If you want to use the compiled code on machines where the Intel compilers are not installed you also need to set some linker options export LDFLAGS static libcxa Finally you ll want to choose some optimization options Intel has a number of options that are specific to the type of processor you are running the examples below assume you are running on a Pentium 4 export FFLAGS fast arch pn4 export CFLAGS fast tpp5 export CXXFLAGS CFLAGS IA64 Itanium Since the MALOC supplied BLAS is not 64 bit clean a third party BLAS must be used for installation on an Itanium We have had good success with the Intel MKL libraries If no independent BLAS is available you may want to try either compiling your own like ATLAS or using the ia64 binary instead If you do use the MKL libraries you will need to modify a few command line options First use the disable blas flag while compiling MALOC to prevent MALOC s BLAS from interfering with APBS installation configure prefix FETK PREFIX disable blas make make install Then when compiling APBS specify that APBS is to use the MKL BLAS and the name of the actual BLAS library export INTEL BLAS path to MKL lib directory configure prefix FETK PREFIX with blas L INTEL BLAS lmkl lapack lmkl ipf ldl with blas name mkl lapack make make install OthersThere are a number of other good compilers Portland Group Absoft that we have not tested with APBS If you have experience with these please let us know MacintoshWe are happy to now provide a Mac install package for G5 OS 1 4 Tiger Unfortunately this is the only binary for Mac that we have available so users on G4s or OS 1 3 may have to compile binaries for themselves you may want to examine the apbs users mailing list which has a number of threads which discuss installation on Mac OS platforms Alternatively you can try using Fink for the installation please see Bill Scott s excellent guidelines at http chemistry ucsc edu wgscott xtal A few notes about compiling on Macintosh It has become apparent from the mailing lists that some packages of the GNU development software available for MacOS contain different major versions of the C and FORTRAN compilers This is very bad APBS will not compile with different versions of the C and FORTRAN compilers If you use GCC 4 for instance gfortran 4 will work while g77 3 3 will not If you see link errors involving restFP or saveFP this is most likely the cause In gcc 4 included in Xcode 2 and higher the fast option turns on the fast math flag This flag optimizes by using rounding and thus can lead to inaccuate results and should be avoided As it stands now the autoconf script does not support using the native vecLib framework as an architecture tuned BLAS replacement In testing there were only slight timing improvements over using the MALOC supplied BLAS as it is We have had success using IBM s XLF for Mac in conjunction with GCC 4 although the corresponding XLC compilers do not seem to work under Tiger IBM Power3 Power4 AIXThese are various compilation options I experimented with on the NPACI Blue Horizon platform we re working on acquiring a Power4 machine for additional notes However I expect some of the issues are applicable to other AIX machines In what follows I used the mpcc and mpxlf compilers In order to use a reasonable amount of memory during runs you also need to specify bmaxdata x8 and bmaxstack x1 or whatever values are appropriate to your system You ll also want to link to the IBM blas mass and essl libraries if available and optimize as much as possible for the specific machine you re running on Putting it all together gives export CC mpcc export CXX mpcc export F77 mpxlf export BLASPATH usr lib export CFLAGS bmaxdata x8 bmaxstack x1 L usr local apps mass lmass lessl O3 qstrict qarch pwr3 qtune pwr3 qmaxmem 1 qcache auto export FFLAGS qfixed 132 bmaxdata x8 bmaxstack x1 L usr local apps mass lmass lessl O3 qstrict qarch pwr3 qtune pwr3 qmaxmem 1 qcache auto Sun SolarisCompilation tips for this system are short and sweet Whatever you do don t use the GNU compilers they result in very slow binaries DEC Compaq HP Samsung AlphaTwo tips Don t use the GNU compilers they result in very slow binaries Use the vendor supplied BLAS library AMD Opteron Since the MALOC BLAS is not 64 bit clean you must used a third party BLAS for installation on the Opteron We have had good success using the Portland group compilers and the associated PGI BLAS libraries although a different third party BLAS like ATLAS should work as well For the Portland compilers Set the following flags for use with the Portland compilers export CC pgcc export CFLAGS O2 fPIC fastsse Bstatic export F77 pgf77 export FFLAGS O2 fPIC fastsse Bstatic When compiling MALOC disable the building of the BLAS library configure prefix FETK PREFIX disable blas make make install Locate the BLAS library in your PGI installation and configure APBS to use that library and then finish the installation export BLAS DIR path to blas configure with blas L BLAS DIR lblas make make install PreviousHomeNext Binary installationUpOverview", "_id": "http://www.ics.uci.edu/~dock/manuals/apbs/html/user-guide/x146.html", "title": "source installation", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<HTML\n><HEAD\n><TITLE\n>Source installation</TITLE\n><META\nNAME=\"GENERATOR\"\nCONTENT=\"Modular DocBook HTML Stylesheet Version 1.76b+\n\"><LINK\nREL=\"HOME\"\nTITLE=\"APBS 0.4.0 User Guide\"\nHREF=\"book1.html\"><LINK\nREL=\"UP\"\nTITLE=\"Installation\"\nHREF=\"c132.html\"><LINK\nREL=\"PREVIOUS\"\nTITLE=\"Binary installation\"\nHREF=\"x139.html\"><LINK\nREL=\"NEXT\"\nTITLE=\"Overview\"\nHREF=\"c427.html\"></HEAD\n><BODY\nCLASS=\"sect1\"\nBGCOLOR=\"#FFFFFF\"\nTEXT=\"#000000\"\nLINK=\"#0000FF\"\nVLINK=\"#840084\"\nALINK=\"#0000FF\"\n><DIV\nCLASS=\"NAVHEADER\"\n><TABLE\nSUMMARY=\"Header navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TH\nCOLSPAN=\"3\"\nALIGN=\"center\"\n>APBS 0.4.0 User Guide: Adaptive Poisson-Boltzmann Solver</TH\n></TR\n><TR\n><TD\nWIDTH=\"10%\"\nALIGN=\"left\"\nVALIGN=\"bottom\"\n><A\nHREF=\"x139.html\"\nACCESSKEY=\"P\"\n>&#60;&#60;&#60; Previous</A\n></TD\n><TD\nWIDTH=\"80%\"\nALIGN=\"center\"\nVALIGN=\"bottom\"\n>Installation</TD\n><TD\nWIDTH=\"10%\"\nALIGN=\"right\"\nVALIGN=\"bottom\"\n><A\nHREF=\"c427.html\"\nACCESSKEY=\"N\"\n>Next &#62;&#62;&#62;</A\n></TD\n></TR\n></TABLE\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"></DIV\n><DIV\nCLASS=\"sect1\"\n><H1\nCLASS=\"sect1\"\n><A\nNAME=\"AEN146\"\n></A\n>Source installation</H1\n><P\n>If you were unable to find the binary pacakge for your system, or\n      would like to compile APBS yourself, you'll need to read the instructions\n      in this section.</P\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"prerequisites-sect\"\n></A\n>Prerequisites</H2\n><P\n>In order to install APBS from the source code, you will need:\n        <P\n></P\n><UL\n><LI\n><P\n>C and Fortran compilers</P\n></LI\n><LI\n><P\n>The APBS source code (see \n          <A\nHREF=\"c132.html#obtaining-sect\"\n>above</A\n>)</P\n></LI\n><LI\n><P\n>The MALOC hardware abstraction library (available from\n          <A\nHREF=\"http://www.scicomp.ucsd.edu/~mholst/codes/maloc/index.html\"\nTARGET=\"_top\"\n>http://www.scicomp.ucsd.edu/~mholst/codes/maloc/index.html</A\n>)</P\n></LI\n></UL\n>\n      It may also be useful to have:\n        <P\n></P\n><UL\n><LI\n><P\n>A version of MPI (try \n              <A\nHREF=\"http://www-unix.mcs.anl.gov/mpi/mpich/\"\nTARGET=\"_top\"\n>MPICH</A\n>) \n              for parallel jobs.  \n              <DIV\nCLASS=\"note\"\n><P\n></P\n><TABLE\nCLASS=\"note\"\nWIDTH=\"100%\"\nBORDER=\"0\"\n><TR\n><TD\nWIDTH=\"25\"\nALIGN=\"CENTER\"\nVALIGN=\"TOP\"\n><IMG\nSRC=\"./stylesheet-images/note.gif\"\nHSPACE=\"5\"\nALT=\"Note\"></TD\n><TD\nALIGN=\"LEFT\"\nVALIGN=\"TOP\"\n><P\n>&#13;                  MPI isn't strictly necessary if the \n                  <A\nHREF=\"x674.html#async\"\n><TT\nCLASS=\"option\"\n>async</TT\n></A\n> option is\n                  used.\n                </P\n></TD\n></TR\n></TABLE\n></DIV\n>\n            </P\n></LI\n><LI\n><P\n>A compatible visualization program (see the \n          <A\nHREF=\"x2443.html#visualization-sect\"\n>\"Visualization\"</A\n> section of\n          this document)</P\n></LI\n></UL\n>\n      </P\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"setup-sect\"\n></A\n>Preparation for installation</H2\n><P\n>In what follows, I'll be assuming you're using \n      <A\nHREF=\"http://www.gnu.org/software/bash/bash.html\"\nTARGET=\"_top\"\n>bash</A\n>, a\n      fantastic shell available on many platforms (UNIX and non-UNIX).</P\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN176\"\n></A\n>Compiler variables</H3\n><P\n>First, please look at the \n        <A\nHREF=\"x146.html#AEN274\"\n>\"Machine-specific notes\"</A\n> section of\n        this document for appropriate compiler flags, etc. to be set via\n        pre-configuration environmental variables.  It's not a big deal if you\n        skip this step, but APBS will run more slowly.</P\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN180\"\n></A\n>Installation directories</H3\n><P\n>There are two directories you'll need to identify prior to\n        installation.  The first, which we'll call\n        <TT\nCLASS=\"parameter\"\n><I\n>FETK_SRC</I\n></TT\n>, will contain the APBS and MALOC source\n        code.  This directory can be deleted after installation, if you wish.\n        The second directory will be the permanent location for APBS and MALOC;\n        we'll call this <TT\nCLASS=\"parameter\"\n><I\n>FETK_PREFIX</I\n></TT\n>.  If you have root\n        permission, you could pick a global directory such as\n        <TT\nCLASS=\"filename\"\n>/usr/local</TT\n> for this; otherwise, pick a directory\n        for which you have write permission.  The following commands set up the\n        directories and environmental which point to them:\n          <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_SRC=/home/soft/src</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_PREFIX=/home/soft</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_INCLUDE=${FETK_PREFIX}/include</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_LIBRARY=${FETK_PREFIX}/lib</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>mkdir -p ${FETK_SRC} ${FETK_INCLUDE} ${FETK_LIBRARY}</B\n></TT\n>\n          </PRE\n></TD\n></TR\n></TABLE\n>\n        </P\n><DIV\nCLASS=\"note\"\n><P\n></P\n><TABLE\nCLASS=\"note\"\nWIDTH=\"100%\"\nBORDER=\"0\"\n><TR\n><TD\nWIDTH=\"25\"\nALIGN=\"CENTER\"\nVALIGN=\"TOP\"\n><IMG\nSRC=\"./stylesheet-images/note.gif\"\nHSPACE=\"5\"\nALT=\"Note\"></TD\n><TD\nALIGN=\"LEFT\"\nVALIGN=\"TOP\"\n><P\n>&#13;            If you're planning to use MPI, you'll need to set some additional\n            environmental variables.  The variable\n            <TT\nCLASS=\"parameter\"\n><I\n>FETK_MPI_INCLUDE</I\n></TT\n> points to the directory\n            where the MPI header files reside (<TT\nCLASS=\"filename\"\n>mpi.h</TT\n>) and\n            the variable <TT\nCLASS=\"parameter\"\n><I\n>FETK_MPI_LIBRARY</I\n></TT\n> points to the\n            directory where the MPI libraries are located\n            (<TT\nCLASS=\"filename\"\n>libmpi.a</TT\n> or <TT\nCLASS=\"filename\"\n>libmpich.a</TT\n>).\n            For example, on my system, I type:\n            <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_MPI_INCLUDE=/usr/share/mpi/include</B\n></TT\n>\n              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FETK_MPI_LIBRARY=/usr/share/mpi/lib</B\n></TT\n>\n            </PRE\n></TD\n></TR\n></TABLE\n>\n          </P\n></TD\n></TR\n></TABLE\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN209\"\n></A\n>Unpacking the source code</H3\n><P\n>You're now ready to unpack the source code:\n          <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>cd ${FETK_SRC}</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>gzip -dc maloc.tar.gz | tar xvf -</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>gzip -dc apbs-0.4.0.tar.gz | tar xvf -</B\n></TT\n>\n          </PRE\n></TD\n></TR\n></TABLE\n>\n        </P\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN219\"\n></A\n>Compiling MALOC</H3\n><P\n>Now we need to compile the hardware-abstraction library, MALOC.\n        First, go to the MALOC directory:\n          <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>cd ${FETK_SRC}/maloc</B\n></TT\n>\n          </PRE\n></TD\n></TR\n></TABLE\n>\n          <DIV\nCLASS=\"caution\"\n><P\n></P\n><TABLE\nCLASS=\"caution\"\nWIDTH=\"100%\"\nBORDER=\"0\"\n><TR\n><TD\nWIDTH=\"25\"\nALIGN=\"CENTER\"\nVALIGN=\"TOP\"\n><IMG\nSRC=\"./stylesheet-images/caution.gif\"\nHSPACE=\"5\"\nALT=\"Caution\"></TD\n><TD\nALIGN=\"LEFT\"\nVALIGN=\"TOP\"\n><P\n>&#13;              If you are not starting from a freshly-untarred version of\n              MALOC, you need to clean up the previous distribution by:\n              <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>make distclean</B\n></TT\n>\n              </PRE\n></TD\n></TR\n></TABLE\n>\n              and ignoring any error messages that may result.\n            </P\n></TD\n></TR\n></TABLE\n></DIV\n>\n        MALOC is configured for installation with the autoconf script\n        <TT\nCLASS=\"literal\"\n>configure</TT\n>.  Configure options can be listed with the\n        <TT\nCLASS=\"option\"\n>--help</TT\n> option.  However, MALOC is usually configured\n        in one of two ways for use with APBS:\n          <P\n></P\n><OL\nTYPE=\"1\"\n><LI\n><P\n>Sequential execution only (no MPI):\n                <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                  <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX}</B\n></TT\n>\n                </PRE\n></TD\n></TR\n></TABLE\n>\n              </P\n></LI\n><LI\n><P\n>With parallel execution (MPI):\n                <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                  <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX} --enable-mpi</B\n></TT\n>\n                </PRE\n></TD\n></TR\n></TABLE\n>\n              </P\n></LI\n></OL\n>\n          <DIV\nCLASS=\"caution\"\n><P\n></P\n><TABLE\nCLASS=\"caution\"\nWIDTH=\"100%\"\nBORDER=\"0\"\n><TR\n><TD\nWIDTH=\"25\"\nALIGN=\"CENTER\"\nVALIGN=\"TOP\"\n><IMG\nSRC=\"./stylesheet-images/caution.gif\"\nHSPACE=\"5\"\nALT=\"Caution\"></TD\n><TD\nALIGN=\"LEFT\"\nVALIGN=\"TOP\"\n><P\n>&#13;              Be sure to keep an eye out for warning messages during the\n              configuration of MALOC, especially if you are using MPI.\n            </P\n></TD\n></TR\n></TABLE\n></DIV\n>\n          At this point, you are ready to make and install MALOC:\n            <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;              <TT\nCLASS=\"prompt\"\n>$</TT\n> make; make install\n           </PRE\n></TD\n></TR\n></TABLE\n>\n          If all went well (you'll see an error message if either the\n          compilation or installation failed), then you're ready to install\n          APBS...\n        </P\n></DIV\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"AEN247\"\n></A\n>Configuring, compiling, and installing</H2\n><P\n> APBS is configured and installed much the same way as MALOC.\n      First, you need to configure with the autoconf\n      <TT\nCLASS=\"literal\"\n>configure</TT\n> script.  As before, you can examine the\n      various configure options with the <TT\nCLASS=\"option\"\n>--help</TT\n> option.  For\n      most platforms, no options need to be specified; APBS's autoconf setup\n      automatically detects whether MALOC was compiled with MPI and configures\n      itself appropriately.  Therefore, most users can configure as follows:\n        <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;          <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>cd ${FETK_SRC}/apbs</B\n></TT\n>\n          <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX}</B\n></TT\n>\n        </PRE\n></TD\n></TR\n></TABLE\n>\n      There's no need to pay too much attention to the autoconf messages here.\n      If the APBS configuration script can't find something it needs, it will\n      simply fail to configure and exit with a hopefully-informative error\n      message.\n        <DIV\nCLASS=\"note\"\n><P\n></P\n><TABLE\nCLASS=\"note\"\nWIDTH=\"100%\"\nBORDER=\"0\"\n><TR\n><TD\nWIDTH=\"25\"\nALIGN=\"CENTER\"\nVALIGN=\"TOP\"\n><IMG\nSRC=\"./stylesheet-images/note.gif\"\nHSPACE=\"5\"\nALT=\"Note\"></TD\n><TD\nALIGN=\"LEFT\"\nVALIGN=\"TOP\"\n><P\n>If you have a vendor-supplied BLAS math library, you will\n          probably compile a faster version of APBS if you link to it instead\n          of the BLAS version provided with MALOC.  This is done by passing the\n          appropriate linking options to <TT\nCLASS=\"literal\"\n>configure</TT\n> with the\n          <TT\nCLASS=\"option\"\n>--with-blas</TT\n> flag.  For example, suppose you had a\n          machine-specific version of the BLAS library at\n          <TT\nCLASS=\"filename\"\n>/usr/local/lib/libblas.a</TT\n>.  You would then\n          configure APBS by:\n            <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>cd ${FETK_SRC}/apbs</B\n></TT\n>\n              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX} --with-blas=\"-L/usr/local/lib -lblas\"</B\n></TT\n>\n            </PRE\n></TD\n></TR\n></TABLE\n>\n          </P\n></TD\n></TR\n></TABLE\n></DIV\n>\n      Assuming all has gone well with the configuration, you're ready to\n      compile and install APBS:\n        <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;          <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>make all</B\n></TT\n>\n          <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>make install</B\n></TT\n>\n        </PRE\n></TD\n></TR\n></TABLE\n>\n      This will place a version of the APBS binary at\n      <TT\nCLASS=\"filename\"\n>${FETK_PREFIX}/bin/${host_cpu}-${host_vendor}-${host_os}/apbs</TT\n>,\n      where <TT\nCLASS=\"parameter\"\n><I\n>${host_cpu}-${host_vendor}-${host_os}</I\n></TT\n> is a\n      machine-specific string.  This extra layer of obfuscation lets you keep\n      several APBS binaries around in the same directory.  At this point you\n      are ready to use APBS; either by calling the binary directly or adding\n      the above directory to your path.  There are also several tools provided\n      with APBS that remain in the APBS directory; these are described in later\n      portions of this manual.  You may wish to copy these to a global location\n      (or the same place as your APBS binary) at this time.\n      </P\n></DIV\n><DIV\nCLASS=\"sect2\"\n><H2\nCLASS=\"sect2\"\n><A\nNAME=\"AEN274\"\n></A\n>Machine-specific notes</H2\n><P\n>While the APBS and MALOC autoconf <TT\nCLASS=\"literal\"\n>configure</TT\n>\n      scripts are flexible enough to work on most platforms, the resulting\n      executables don't always offer optimal performance.  We're slowly trying\n      to provide binary support for some of the more popular platforms, this\n      section is meant to supplement our pre-compiled binaries and provide some\n      tips on how to get a better APBS binary on your platform.  <I\nCLASS=\"emphasis\"\n>If\n      you have tips or tricks on improving APBS performance on your machine,\n      please \n      <A\nHREF=\"mailto:apbs-users@lists.sourceforge.net\"\nTARGET=\"_top\"\n>let us know!</A\n></I\n>\n      </P\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN280\"\n></A\n>Intel IA32/IA64</H3\n><P\n>In what follows, we're denoting Pentium/Xeon 32-bit Intel\n        machines as \"IA32\" and Itanium* 64-bit Intel machines as \"IA64\".\n        </P\n><DIV\nCLASS=\"sect4\"\n><H4\nCLASS=\"sect4\"\n><A\nNAME=\"AEN283\"\n></A\n>Windows</H4\n><P\n>We are happy to now provide native APBS command line binaries\n          for Windows.  The binary is probably the best option available, but\n          if you would still like to compile your own binaries you will need to\n          use either the Cygwin or MinGW environments.  Binaries compiled under\n          Cygwin tend to require Cygwin DLLs and thus can only be run on \n          systems with Cygwin.  Performance for the Windows binaries and all\n          compiled systems will be fairly mediocre as they depend on the\n          GNU compilers.</P\n><P\n>If you do choose to use Cygwin and compile your own code, \n          compilation should be rather straightforward.</P\n></DIV\n><DIV\nCLASS=\"sect4\"\n><H4\nCLASS=\"sect4\"\n><A\nNAME=\"AEN287\"\n></A\n>Linux</H4\n><P\n> Compilation under Linux should be <I\nCLASS=\"emphasis\"\n>very</I\n>\n          straightforward as this is the platform on which APBS was developed.\n          This section describes various compilation options under Linux.\n          </P\n><DIV\nCLASS=\"sect5\"\n><H5\nCLASS=\"sect5\"\n><A\nNAME=\"AEN291\"\n></A\n>GNU</H5\n><P\n> Nearly every Linux distribution comes with the GNU\n            compilers; autoconf with configure with these by default.\n            Furthermore, autoconf will automatically choose reasonable\n            optimization (<TT\nCLASS=\"option\"\n>-O2</TT\n>) and debugging\n            (<TT\nCLASS=\"option\"\n>-g</TT\n>) options.  I haven't had very good luck\n            improving the performance beyond what's available with\n            <TT\nCLASS=\"option\"\n>-O2</TT\n> and, given the availablity of the free Intel\n            compilers, I'm not sure it's worth trying too hard.\n            </P\n></DIV\n><DIV\nCLASS=\"sect5\"\n><H5\nCLASS=\"sect5\"\n><A\nNAME=\"AEN297\"\n></A\n>Intel</H5\n><P\n> We've mainly used the free (for Linux) \n            <A\nHREF=\"http://www.intel.com/software/products/compilers/\"\nTARGET=\"_top\"\n>Intel\n            compilers</A\n> and have observed very good performance.  There\n            were some incompatibility issues with version 7 of the Intel\n            compilers and newer versions of Linux (particularly those running\n            glibc 2.3, e.g. RedHat 8 and 9).   \n            </P\n><P\n>First, you need to make sure the Intel compilers are set up\n            properly; this usually is done by sourcing one of the input bash or\n            csh scripts provided with the compilers.  \n            </P\n><P\n>You then need to define the environmental variables\n            appropriate to these compilers <I\nCLASS=\"emphasis\"\n>before</I\n> you\n            configure either MALOC or APBS.  This is done by:\n              <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CC='icc'</B\n></TT\n>\n                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CXX='icc'</B\n></TT\n>\n                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export F77='ifort'</B\n></TT\n>\n              </PRE\n></TD\n></TR\n></TABLE\n>\n            If you want to use the compiled code on machines where the Intel\n            compilers are not installed, you also need to set some linker\n            options:\n              <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export LDFLAGS='-static-libcxa'</B\n></TT\n>\n              </PRE\n></TD\n></TR\n></TABLE\n>\n            </P\n><P\n>Finally, you'll want to choose some optimization options.\n            Intel has a number of options that are specific to the type of\n            processor you are running; the examples below assume you are\n            running on a Pentium 4:\n              <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FFLAGS='-fast -arch pn4'</B\n></TT\n>\n                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CFLAGS='-fast -tpp5'</B\n></TT\n>\n                <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CXXFLAGS=${CFLAGS}</B\n></TT\n>\n              </PRE\n></TD\n></TR\n></TABLE\n> \n            </P\n></DIV\n><DIV\nCLASS=\"sect5\"\n><H5\nCLASS=\"sect5\"\n><A\nNAME=\"AEN322\"\n></A\n>IA64 (Itanium)</H5\n><P\n>Since the MALOC-supplied BLAS is not 64-bit clean, a third \n            party BLAS must be used for installation on an Itanium.  We have \n            had good success with the Intel MKL libraries.  If no independent \n            BLAS is available you may want to try either compiling your own \n            (like ATLAS) or using the ia64 binary instead.\n            </P\n><P\n>If you do use the MKL libraries, you will need to modify a \n            few command line options.\n            </P\n><P\n>First use the disable-blas flag while compiling MALOC to \n            prevent MALOC's BLAS from interfering with APBS installation:\n            <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX} --disable-blas</B\n></TT\n>\n              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> make; make install </B\n></TT\n>\n            </PRE\n></TD\n></TR\n></TABLE\n>\n            </P\n><P\n>Then when compiling APBS, specify that APBS is to use the MKL\n            BLAS and the name of the actual BLAS library:\n            <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export INTEL_BLAS=/path/to/MKL/lib/directory</B\n></TT\n>\n              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX} --with-blas=\"-L${INTEL_BLAS} -lmkl_lapack -lmkl_ipf -ldl\" --with-blas-name=\"mkl_lapack\"</B\n></TT\n>\n              <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> make; make install </B\n></TT\n>\n            </PRE\n></TD\n></TR\n></TABLE\n>\n            </P\n></DIV\n><DIV\nCLASS=\"sect5\"\n><H5\nCLASS=\"sect5\"\n><A\nNAME=\"AEN340\"\n></A\n>Others</H5\n><P\n>There are a number of other good compilers (Portland Group,\n            Absoft) that we have not tested with APBS.  If you have experience\n            with these, please \n            <A\nHREF=\"mailto:apbs-users@lists.sourceforge.net\"\nTARGET=\"_top\"\n>let us know.</A\n>\n            </P\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN344\"\n></A\n>Macintosh</H3\n><P\n>We are happy to now provide a Mac install package for G5 OS 10.4 \n         (Tiger).  Unfortunately this is the only binary for Mac that we have\n         available, so users on G4s or OS 10.3 may have to compile binaries \n         for themselves - you may want to examine the\n        <A\nHREF=\"http://sourceforge.net/mailarchive/forum.php?forum=apbs-users\"\nTARGET=\"_top\"\n>apbs-users \n        mailing list</A\n> which has a number of threads which discuss\n        installation on Mac OS platforms.  Alternatively you can try using\n\tFink for the installation - please see Bill Scott's excellent \n\tguidelines at <A\nHREF=\"http://chemistry.ucsc.edu/~wgscott/xtal\"\nTARGET=\"_top\"\n> \n\thttp://chemistry.ucsc.edu/~wgscott/xtal</A\n>. </P\n><P\n>A few notes about compiling on Macintosh:</P\n><P\n></P\n><OL\nTYPE=\"1\"\n><LI\n><P\n>It has become apparent from the mailing lists that some\n            \"packages\" of the GNU development software available for MacOS\n            contain different major versions of the C and FORTRAN compilers.  \n            This is very bad; APBS will not compile with different versions of \n            the C and FORTRAN compilers. If you use GCC 4.0, for instance,\n            gfortran 4.0 will work while g77 3.3 will not. If you see link \n            errors involving \"restFP\" or \"saveFP\" this is most likely the \n            cause.</P\n></LI\n><LI\n><P\n>In gcc 4.0 (included in Xcode 2.0 and higher) the -fast\n              option turns on the -fast-math flag.  This flag optimizes by\n              using rounding, and thus can lead to inaccuate results and should\n              be avoided.</P\n></LI\n><LI\n><P\n>As it stands now the autoconf script does not support using\n              the native vecLib framework as an architecture-tuned BLAS \n              replacement.  In testing there were only slight timing \n              improvements over using the MALOC-supplied BLAS as it is.</P\n></LI\n><LI\n><P\n>We have had success using IBM's XLF for Mac in conjunction\n              with GCC 4.0, although the corresponding XLC compilers do not \n              seem to work under Tiger.</P\n></LI\n></OL\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN359\"\n></A\n>IBM Power3/Power4 AIX</H3\n><P\n>These are various compilation options I experimented with on the\n        NPACI Blue Horizon platform -- we're working on acquiring a Power4\n        machine for additional notes.  However, I expect some of the issues are\n        applicable to other AIX machines.  In what follows, I used the\n        <TT\nCLASS=\"literal\"\n>mpcc</TT\n> and <TT\nCLASS=\"literal\"\n>mpxlf</TT\n> compilers.\n        </P\n><P\n>&#13;        In order to use a reasonable amount of memory during runs, you also\n        need to specify <TT\nCLASS=\"option\"\n>-bmaxdata:0x80000000</TT\n> and\n        <TT\nCLASS=\"option\"\n>-bmaxstack:0x10000000</TT\n>, or whatever values are\n        appropriate to your system.  You'll also want to link to the IBM\n        <TT\nCLASS=\"literal\"\n>blas</TT\n>, <TT\nCLASS=\"literal\"\n>mass</TT\n>, and\n        <TT\nCLASS=\"literal\"\n>essl</TT\n> libraries (if available) and optimize as much\n        as possible for the specific machine you're running on.  Putting it all\n        together gives:\n          <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CC=mpcc</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CXX=mpcc</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export F77=mpxlf</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export BLASPATH=/usr/lib</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CFLAGS=\"-bmaxdata:0x80000000 -bmaxstack:0x10000000 -L/usr/local/apps/mass -lmass -lessl -O3 -qstrict -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto\"</B\n></TT\n>\n            <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FFLAGS=\"-qfixed=132 -bmaxdata:0x80000000 -bmaxstack:0x10000000 -L/usr/local/apps/mass -lmass -lessl -O3 -qstrict -qarch=pwr3 -qtune=pwr3 -qmaxmem=-1 -qcache=auto\"</B\n></TT\n>\n          </PRE\n></TD\n></TR\n></TABLE\n>\n        </P\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN383\"\n></A\n>Sun/Solaris</H3\n><P\n>Compilation tips for this system are short and sweet:  Whatever\n        you do, don't use the GNU compilers; they result in\n        <I\nCLASS=\"emphasis\"\n>very</I\n> slow binaries.\n        </P\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN387\"\n></A\n>DEC/Compaq/HP/Samsung Alpha</H3\n><P\n>Two tips:  \n          <P\n></P\n><OL\nTYPE=\"1\"\n><LI\n><P\n> Don't use the GNU compilers; they result in\n              <I\nCLASS=\"emphasis\"\n>very</I\n> slow binaries.  </P\n></LI\n><LI\n><P\n> Use the vendor-supplied BLAS library. </P\n></LI\n></OL\n>\n        </P\n></DIV\n><DIV\nCLASS=\"sect3\"\n><H3\nCLASS=\"sect3\"\n><A\nNAME=\"AEN396\"\n></A\n>AMD Opteron</H3\n><P\n> Since the MALOC BLAS is not 64 bit clean, you must used a third\n               party BLAS for installation on the Opteron.  We have had good \n               success using the Portland group compilers and the associated \n               PGI BLAS libraries, although a different third party BLAS \n               (like ATLAS) should work as well.  For the Portland compilers:  \n           <P\n></P\n><OL\nTYPE=\"1\"\n><LI\n><P\n> Set the following flags for use with the Portland \n                       compilers:\n                   <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CC=pgcc</B\n></TT\n>\n                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export CFLAGS='-O2 -fPIC -fastsse -Bstatic'</B\n></TT\n>\n                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export F77=pgf77</B\n></TT\n>\n                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>export FFLAGS='-O2 -fPIC -fastsse -Bstatic'</B\n></TT\n>\n                   </PRE\n></TD\n></TR\n></TABLE\n>\n                </P\n></LI\n><LI\n><P\n> When compiling MALOC, disable the building of the BLAS library:\n                   <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                      <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n>./configure --prefix=${FETK_PREFIX} --disable-blas</B\n></TT\n>\n                      <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> make; make install </B\n></TT\n>\n                   </PRE\n></TD\n></TR\n></TABLE\n>\n                </P\n></LI\n><LI\n><P\n> Locate the BLAS library in your PGI installation and\n                       configure APBS to use that library, and then finish\n                       the installation:\n                   <TABLE\nBORDER=\"0\"\nBGCOLOR=\"#E0E0E0\"\nWIDTH=\"100%\"\n><TR\n><TD\n><PRE\nCLASS=\"screen\"\n>&#13;                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> export BLAS_DIR='/path/to/blas'</B\n></TT\n>\n                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> ./configure --with-blas=\"-L${BLAS_DIR} -lblas\" </B\n></TT\n>\n                     <TT\nCLASS=\"prompt\"\n>$</TT\n> <TT\nCLASS=\"userinput\"\n><B\n> make; make install </B\n></TT\n>\n                   </PRE\n></TD\n></TR\n></TABLE\n>\n                </P\n></LI\n></OL\n>\n        </P\n></DIV\n></DIV\n></DIV\n><DIV\nCLASS=\"NAVFOOTER\"\n><HR\nALIGN=\"LEFT\"\nWIDTH=\"100%\"><TABLE\nSUMMARY=\"Footer navigation table\"\nWIDTH=\"100%\"\nBORDER=\"0\"\nCELLPADDING=\"0\"\nCELLSPACING=\"0\"\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n><A\nHREF=\"x139.html\"\nACCESSKEY=\"P\"\n>&#60;&#60;&#60; Previous</A\n></TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"book1.html\"\nACCESSKEY=\"H\"\n>Home</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n><A\nHREF=\"c427.html\"\nACCESSKEY=\"N\"\n>Next &#62;&#62;&#62;</A\n></TD\n></TR\n><TR\n><TD\nWIDTH=\"33%\"\nALIGN=\"left\"\nVALIGN=\"top\"\n>Binary installation</TD\n><TD\nWIDTH=\"34%\"\nALIGN=\"center\"\nVALIGN=\"top\"\n><A\nHREF=\"c132.html\"\nACCESSKEY=\"U\"\n>Up</A\n></TD\n><TD\nWIDTH=\"33%\"\nALIGN=\"right\"\nVALIGN=\"top\"\n>Overview</TD\n></TR\n></TABLE\n></DIV\n></BODY\n></HTML\n>", "id": 37123.0}