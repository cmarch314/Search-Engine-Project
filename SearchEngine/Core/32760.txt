{"text": "View Javadoc 1 package swirl workspace 2 3 import java awt Color 4 import java io IOException 5 import java util Enumeration 6 import java util HashMap 7 import java util Vector 8 9 import org apache commons httpclient HostConfiguration 1 import org apache commons httpclient HttpClient 11 import org apache commons httpclient HttpMethod 12 import org apache commons httpclient HttpRecoverableException 13 import org apache commons httpclient HttpURL 14 import org apache commons httpclient URIException 15 import org apache commons logging Log 16 import org apache commons logging LogFactory 17 import org apache webdav lib methods XMLResponseMethodBase 18 import org apache webdav lib methods MoveMethod 19 import org picocontainer Startable 2 import org w3c dom Document 21 22 import swirl workspace common DocumentLogger 23 import swirl workspace messages MessageSender 24 import swirl workspace viz pie Coordinate 25 26 27 28 DOCUMENT ME 29 3 author bpillet Base class for peers to extend Represents a peer in the 31 swirl network and manages connecting to the server and executing 32 methods on the server 33 34 public abstract class Peer implements Startable 35 36 how many times the peer tries to execute a method before it gives up 37 public static final int MAX RETRIES 4 38 39 the last document that came from the server 4 private Document doc null 41 42 a logger for this class 43 private Log log LogFactory getLog this getClass 44 45 the files hosted by this peer 46 private Vector files new Vector 47 48 all the MessageSenders to notify 49 private Vector senders new Vector 5 51 private HttpClient client new HttpClient 52 the connection to the server 53 private HostConfiguration slide 54 private HostConfiguration swirl 55 56 57 Get the globally unique color for this peer 58 59 return an awt color 6 61 public abstract Color getColor 62 63 64 Each peer needs to figure out how to connect based on different locating 65 protocols etc 66 67 return a jakarta httpclient url for this peer 68 69 throws URIException if there are problems making the url 7 71 public abstract HttpURL getHttpURL throws URIException 72 73 74 TODO 75 76 return TODO 77 78 throws URIException TODO 79 8 public abstract HttpURL getSwirlURL throws URIException 81 82 83 Get the username for this peer 84 85 return the peer s username 86 87 public abstract String getUserName 88 89 private void setSlideHost throws IOException 9 91 if slide null 92 93 log debug creating slide host getHttpURL 94 slide new HostConfiguration 95 slide setHost getHttpURL 96 97 98 99 private void setSwirlHost throws IOException 1 1 1 if swirl null 1 2 1 3 log debug creating swirl host getSwirlURL 1 4 swirl new HostConfiguration 1 5 swirl setHost getSwirlURL 1 6 1 7 1 8 1 9 11 Get the host for this peer 111 112 return the host for this peer 113 114 throws URIException if there s a problem getting the host 115 116 public String getHost throws URIException 117 118 if log isDebugEnabled 119 12 log debug getHost getHttpURL getHost 121 122 123 return getHttpURL getHost 124 125 126 127 Get the path for this peer 128 129 return the path for this peer slide 13 131 throws URIException if there s a problem getting the path 132 133 public String getPath throws URIException 134 135 if log isDebugEnabled 136 137 log debug getPath getHttpURL getPath 138 139 14 return getHttpURL getPath 141 142 143 144 Get the port for this peer 145 146 return the port for this peer 147 148 throws URIException if there s a problem getting the port 149 15 public int getPort throws URIException 151 152 if log isDebugEnabled 153 154 log debug getPort getHttpURL getPort 155 156 157 return getHttpURL getPort 158 159 16 161 A unique way of finding this peer which is just the host port string for 162 now 163 164 return host port 165 166 public String getUniqueID 167 168 try 169 17 return getHost getPort 171 172 catch URIException e 173 174 log error e e 175 176 177 return this toString 178 179 18 181 Register a listener for Messages 182 183 param l the listener to add 184 185 public synchronized void addMessageSender final MessageSender l 186 187 senders addElement l 188 189 19 Execute a method on the server behind this peer 191 192 param method the method to execute 193 194 return the status code from the server 195 196 throws IOException if there are any problems in the request 197 198 public int executeHttpRequestMethodWithoutLog final HttpMethod method 199 throws IOException 2 2 1 setSlideHost 2 2 setSwirlHost 2 3 2 4 int statusCode 1 2 5 2 6 for int attempt statusCode 1 attempt MAX RETRIES 2 7 attempt 2 8 2 9 if log isDebugEnabled 21 211 log debug executeHttpRequestMethod method nurl this getHost 212 npath method getPath attempt attempt 213 214 215 try 216 217 HttpClient client new HttpClient 218 statusCode client executeMethod slide method 219 22 catch HttpRecoverableException ex 221 222 log info retrying after recoverable exception method method ex 223 224 225 226 if log isDebugEnabled 227 228 log debug statusCode statusCode 229 23 231 return statusCode 232 233 234 235 236 Execute a method on the server behind this peer 237 238 param method the method to execute 239 24 return the status code from the server 241 242 throws IOException if there are any problems in the request 243 244 public int executeHttpRequestMethod final HttpMethod method 245 throws IOException 246 247 int statusCode executeHttpRequestMethodWithoutLog method 248 if method getName equalsIgnoreCase PROPFIND 249 logMethod method statusCode false null 25 251 return statusCode 252 253 254 255 Execute a method on the server behind this peer 256 257 param method the method to execute 258 259 return the status code from the server 26 261 throws IOException if there are any problems in the request 262 263 public int executeHttpRequestMethod final HttpMethod method Coordinate coord 264 throws IOException 265 266 int statusCode executeHttpRequestMethodWithoutLog method 267 if method getName equalsIgnoreCase PROPFIND 268 logMethod method statusCode false coord 269 27 return statusCode 271 272 273 274 Execute a method on the server behind this peer 275 276 param method the method to execute 277 278 return the status code from the server 279 28 throws IOException if there are any problems in the request 281 282 public int executeHttpRequestMethodLogPrivate final HttpMethod method 283 throws IOException 284 285 int statusCode executeHttpRequestMethodWithoutLog method 286 logMethod method statusCode true null 287 return statusCode 288 289 29 291 Execute a method on the server behind this peer 292 293 param method the method to execute 294 295 return the status code from the server 296 297 throws IOException if there are any problems in the request 298 299 public int executeHttpRequestMethodLogPrivate final HttpMethod method Coordinate coord 3 throws IOException 3 1 3 2 int statusCode executeHttpRequestMethodWithoutLog method 3 3 logMethod method statusCode true coord 3 4 return statusCode 3 5 3 6 3 7 3 8 3 9 31 Remove a listener for Messages 311 312 param l the listener to remove 313 314 public synchronized void removeMessageSender final MessageSender l 315 316 senders removeElement l 317 318 319 32 Returns the url for this peer or if there s a problem 321 322 return the url for this peer 323 324 public String toString 325 326 try 327 328 return getHttpURL toString 329 33 catch Exception ex 331 332 log warn toString ex 333 334 335 return super toString 336 337 338 339 extract file information from the XML Document doc 34 341 private void extractFileInfo 342 343 if log isDebugEnabled 344 345 log debug extractFileInfo 346 347 348 DOMReader reader new DOMReader 349 org dom4j Document body reader read doc 35 351 files removeAllElements 352 353 String nodeTag D multistatus D response 354 List nodes body selectNodes nodeTag 355 356 for Iterator it nodes iterator it hasNext 357 358 org dom4j Node node Node it next 359 36 if log isDebugEnabled 361 362 log debug the node is node 363 364 365 String nameTag D propstat D prop D displayname 366 String fileName 367 Node fileNameNode node selectSingleNode nameTag 368 369 if fileNameNode null 37 371 fileName fileNameNode getText 372 log debug the file name is fileName 373 374 375 String typeTag D propstat D prop D resourcetype D collection 376 Object fileType node selectSingleNode typeTag 377 boolean isDir false 378 379 if fileType null 38 381 log debug get a directory 382 isDir true 383 384 385 String pathTag D href 386 String filePath node selectSingleNode pathTag getText 387 388 if log isDebugEnabled 389 39 log debug the file path is filePath 391 392 393 FileNode fe new FileNode fileName filePath isDir 394 395 files add fe 396 397 398 399 4 4 1 Send a message to all of the listeners about the current method 4 2 4 3 param method the method to log 4 4 param status the status of the executed method to log 4 5 param isPrivate indicates whether log should extend beyond local peer 4 6 param coord hack to allow us to log coordinates for an imported file using drag and drop 4 7 4 8 private void logMethod final HttpMethod method final int status boolean isPrivate Coordinate coord 4 9 41 if log isDebugEnabled 411 412 log debug logMethod 413 414 415 HashMap message new HashMap 416 log debug hostConf method getHostConfiguration 417 message put TYPE Swirl 418 try 419 message put WEBDAV HOST getHost method getHostConfiguration getHost 42 catch URIException e1 421 log error e1 e1 422 423 message put WEBDAV PATH method getPath 424 message put WEBDAV CLIENT 425 PeerManager getLocalAddress getHostAddress 426 message put WEBDAV CLIENT USER System getProperty user name 427 message put WEBDAV CLIENT USER JmDNSPeer getEffectiveUserNameForPeer 428 message put WEBDAV COMMAND method getName 429 message put WEBDAV RESPONSE STATUS status 43 431 if method instanceof MoveMethod 432 433 log debug logging a MOVE method to yancees 434 MoveMethod moveMethod MoveMethod method 435 message put WEBDAV DEST moveMethod getDestination 436 437 438 if method instanceof OurPropPatchMethod 439 44 log debug OurPropPatchMethod is getting sent to yanceese 441 OurPropPatchMethod meth OurPropPatchMethod method 442 message putAll meth getRemoveProperties 443 message putAll meth getSetProperties 444 if coord null 445 log debug logging a setlocalpath with coordinate to yancees 446 message put SET radius String valueOf coord getRadius 447 message put SET relativeAngle String valueOf coord getRelativeAngle 448 449 45 451 if method instanceof XMLResponseMethodBase 452 453 doc XMLResponseMethodBase method getResponseDocument 454 455 if doc null 456 457 DocumentLogger logDocument log responseBody doc doc 458 extractFileInfo 459 46 else 461 462 log debug method has no Document in response 463 464 465 else 466 467 log debug responseBody str method getResponseBodyAsString 468 469 47 if log isDebugEnabled 471 472 log debug message message 473 474 475 if senders null senders isEmpty 476 477 make a copy of the listener list in case 478 anyone adds removes listeners 479 Vector targets 48 481 synchronized this 482 483 targets Vector senders clone 484 485 486 walk through the listener list and 487 call the receiveMessage method in each 488 Enumeration e targets elements 489 49 while e hasMoreElements 491 492 MessageSender sender MessageSender e nextElement 493 494 sender sendMessage message isPrivate 495 496 497 498 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/Peer.html", "title": "peer xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>Peer xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/Peer.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.awt.Color;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.io.IOException;\n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> java.util.Enumeration;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.util.HashMap;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.util.Vector;\n<a name=\"8\" href=\"#8\">8</a>   \n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> org.apache.commons.httpclient.HostConfiguration;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.httpclient.HttpClient;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.commons.httpclient.HttpMethod;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> org.apache.commons.httpclient.HttpRecoverableException;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> org.apache.commons.httpclient.HttpURL;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> org.apache.commons.httpclient.URIException;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"16\" href=\"#16\">16</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"17\" href=\"#17\">17</a>  <strong>import</strong> org.apache.webdav.lib.methods.XMLResponseMethodBase;\n<a name=\"18\" href=\"#18\">18</a>  <strong>import</strong> org.apache.webdav.lib.methods.MoveMethod;\n<a name=\"19\" href=\"#19\">19</a>  <strong>import</strong> org.picocontainer.Startable;\n<a name=\"20\" href=\"#20\">20</a>  <strong>import</strong> org.w3c.dom.Document;\n<a name=\"21\" href=\"#21\">21</a>  \n<a name=\"22\" href=\"#22\">22</a>  <strong>import</strong> swirl.workspace.common.DocumentLogger;\n<a name=\"23\" href=\"#23\">23</a>  <strong>import</strong> swirl.workspace.messages.MessageSender;\n<a name=\"24\" href=\"#24\">24</a>  <strong>import</strong> swirl.workspace.viz.pie.Coordinate;\n<a name=\"25\" href=\"#25\">25</a>  \n<a name=\"26\" href=\"#26\">26</a>  \n<a name=\"27\" href=\"#27\">27</a>  <em>/**<em>*</em></em>\n<a name=\"28\" href=\"#28\">28</a>  <em> * DOCUMENT ME!</em>\n<a name=\"29\" href=\"#29\">29</a>  <em> *</em>\n<a name=\"30\" href=\"#30\">30</a>  <em> * @author bpillet Base class for peers to extend.  Represents a peer in the</em>\n<a name=\"31\" href=\"#31\">31</a>  <em> *         swirl network and manages connecting to the server and executing</em>\n<a name=\"32\" href=\"#32\">32</a>  <em> *         methods on the server.</em>\n<a name=\"33\" href=\"#33\">33</a>  <em> */</em>\n<a name=\"34\" href=\"#34\">34</a>  <strong>public</strong> <strong>abstract</strong> <strong>class</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> implements Startable\n<a name=\"35\" href=\"#35\">35</a>  {\n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>* how many times the peer tries to execute a method before it gives up */</em></em>\n<a name=\"37\" href=\"#37\">37</a>      <strong>public</strong> <strong>static</strong> <strong>final</strong> <strong>int</strong> MAX_RETRIES = 4;\n<a name=\"38\" href=\"#38\">38</a>  \n<a name=\"39\" href=\"#39\">39</a>      <em>/**<em>* the last document that came from the server */</em></em>\n<a name=\"40\" href=\"#40\">40</a>      <strong>private</strong> Document doc = <strong>null</strong>;\n<a name=\"41\" href=\"#41\">41</a>  \n<a name=\"42\" href=\"#42\">42</a>      <em>/**<em>* a logger for this class */</em></em>\n<a name=\"43\" href=\"#43\">43</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"44\" href=\"#44\">44</a>  \n<a name=\"45\" href=\"#45\">45</a>      <em>/**<em>* the files hosted by this peer */</em></em>\n<a name=\"46\" href=\"#46\">46</a>      <em class=\"comment\">//private Vector files = new Vector();</em>\n<a name=\"47\" href=\"#47\">47</a>  \n<a name=\"48\" href=\"#48\">48</a>      <em>/**<em>* all the MessageSenders to notify */</em></em>\n<a name=\"49\" href=\"#49\">49</a>      <strong>private</strong> Vector senders = <strong>new</strong> Vector();\n<a name=\"50\" href=\"#50\">50</a>  \n<a name=\"51\" href=\"#51\">51</a>      <strong>private</strong> HttpClient client = <strong>new</strong> HttpClient();\n<a name=\"52\" href=\"#52\">52</a>      <em>/**<em>* the connection to the server */</em></em>\n<a name=\"53\" href=\"#53\">53</a>      <strong>private</strong> HostConfiguration slide;\n<a name=\"54\" href=\"#54\">54</a>      <strong>private</strong> HostConfiguration swirl;\n<a name=\"55\" href=\"#55\">55</a>  \n<a name=\"56\" href=\"#56\">56</a>      <em>/**<em>*</em></em>\n<a name=\"57\" href=\"#57\">57</a>  <em>     * Get the globally unique color for this peer</em>\n<a name=\"58\" href=\"#58\">58</a>  <em>     *</em>\n<a name=\"59\" href=\"#59\">59</a>  <em>     * @return an awt color</em>\n<a name=\"60\" href=\"#60\">60</a>  <em>     */</em>\n<a name=\"61\" href=\"#61\">61</a>      <strong>public</strong> <strong>abstract</strong> Color getColor();\n<a name=\"62\" href=\"#62\">62</a>  \n<a name=\"63\" href=\"#63\">63</a>      <em>/**<em>*</em></em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     * Each peer needs to figure out how to connect based on different locating</em>\n<a name=\"65\" href=\"#65\">65</a>  <em>     * protocols, etc.</em>\n<a name=\"66\" href=\"#66\">66</a>  <em>     *</em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     * @return a jakarta httpclient url for this peer</em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     *</em>\n<a name=\"69\" href=\"#69\">69</a>  <em>     * @throws URIException if there are problems making the url</em>\n<a name=\"70\" href=\"#70\">70</a>  <em>     */</em>\n<a name=\"71\" href=\"#71\">71</a>      <strong>public</strong> <strong>abstract</strong> HttpURL getHttpURL() throws URIException;\n<a name=\"72\" href=\"#72\">72</a>  \n<a name=\"73\" href=\"#73\">73</a>      <em>/**<em>*</em></em>\n<a name=\"74\" href=\"#74\">74</a>  <em>     * TODO</em>\n<a name=\"75\" href=\"#75\">75</a>  <em>     *</em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     * @return TODO</em>\n<a name=\"77\" href=\"#77\">77</a>  <em>     *</em>\n<a name=\"78\" href=\"#78\">78</a>  <em>     * @throws URIException TODO</em>\n<a name=\"79\" href=\"#79\">79</a>  <em>     */</em>\n<a name=\"80\" href=\"#80\">80</a>      <strong>public</strong> <strong>abstract</strong> HttpURL getSwirlURL() throws URIException;\n<a name=\"81\" href=\"#81\">81</a>  \n<a name=\"82\" href=\"#82\">82</a>      <em>/**<em>*</em></em>\n<a name=\"83\" href=\"#83\">83</a>  <em>     * Get the username for this peer</em>\n<a name=\"84\" href=\"#84\">84</a>  <em>     *</em>\n<a name=\"85\" href=\"#85\">85</a>  <em>     * @return the peer's username</em>\n<a name=\"86\" href=\"#86\">86</a>  <em>     */</em>\n<a name=\"87\" href=\"#87\">87</a>      <strong>public</strong> <strong>abstract</strong> String getUserName();\n<a name=\"88\" href=\"#88\">88</a>  \n<a name=\"89\" href=\"#89\">89</a>      <strong>private</strong> <strong>void</strong> setSlideHost() throws IOException\n<a name=\"90\" href=\"#90\">90</a>      {\n<a name=\"91\" href=\"#91\">91</a>      \t<strong>if</strong>(slide == <strong>null</strong>)\n<a name=\"92\" href=\"#92\">92</a>      \t{\n<a name=\"93\" href=\"#93\">93</a>      \t\tlog.debug(<span class=\"string\">\"creating slide host: \"</span> + getHttpURL());\n<a name=\"94\" href=\"#94\">94</a>      \t\tslide = <strong>new</strong> HostConfiguration();\n<a name=\"95\" href=\"#95\">95</a>      \t\tslide.setHost(getHttpURL());\n<a name=\"96\" href=\"#96\">96</a>      \t}\n<a name=\"97\" href=\"#97\">97</a>      }\n<a name=\"98\" href=\"#98\">98</a>  \n<a name=\"99\" href=\"#99\">99</a>      <strong>private</strong> <strong>void</strong> setSwirlHost() throws IOException\n<a name=\"100\" href=\"#100\">100</a>     {\n<a name=\"101\" href=\"#101\">101</a>     \t<strong>if</strong>(swirl == <strong>null</strong>)\n<a name=\"102\" href=\"#102\">102</a>     \t{\n<a name=\"103\" href=\"#103\">103</a>     \t\tlog.debug(<span class=\"string\">\"creating swirl host: \"</span> + getSwirlURL());\n<a name=\"104\" href=\"#104\">104</a>     \t\tswirl = <strong>new</strong> HostConfiguration();\n<a name=\"105\" href=\"#105\">105</a>     \t\tswirl.setHost(getSwirlURL());\n<a name=\"106\" href=\"#106\">106</a>     \t}\n<a name=\"107\" href=\"#107\">107</a>     }\n<a name=\"108\" href=\"#108\">108</a> \n<a name=\"109\" href=\"#109\">109</a>     <em>/**<em>*</em></em>\n<a name=\"110\" href=\"#110\">110</a> <em>     * Get the host for this peer</em>\n<a name=\"111\" href=\"#111\">111</a> <em>     *</em>\n<a name=\"112\" href=\"#112\">112</a> <em>     * @return the host for this peer</em>\n<a name=\"113\" href=\"#113\">113</a> <em>     *</em>\n<a name=\"114\" href=\"#114\">114</a> <em>     * @throws URIException if there's a problem getting the host</em>\n<a name=\"115\" href=\"#115\">115</a> <em>     */</em>\n<a name=\"116\" href=\"#116\">116</a>     <strong>public</strong> String getHost() throws URIException\n<a name=\"117\" href=\"#117\">117</a>     {\n<a name=\"118\" href=\"#118\">118</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"119\" href=\"#119\">119</a>         {\n<a name=\"120\" href=\"#120\">120</a>             log.debug(<span class=\"string\">\"getHost() : \"</span> + getHttpURL().getHost());\n<a name=\"121\" href=\"#121\">121</a>         }\n<a name=\"122\" href=\"#122\">122</a> \n<a name=\"123\" href=\"#123\">123</a>         <strong>return</strong> getHttpURL().getHost();\n<a name=\"124\" href=\"#124\">124</a>     }\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>     <em>/**<em>*</em></em>\n<a name=\"127\" href=\"#127\">127</a> <em>     * Get the path for this peer</em>\n<a name=\"128\" href=\"#128\">128</a> <em>     *</em>\n<a name=\"129\" href=\"#129\">129</a> <em>     * @return the path for this peer (/slide)</em>\n<a name=\"130\" href=\"#130\">130</a> <em>     *</em>\n<a name=\"131\" href=\"#131\">131</a> <em>     * @throws URIException if there's a problem getting the path</em>\n<a name=\"132\" href=\"#132\">132</a> <em>     */</em>\n<a name=\"133\" href=\"#133\">133</a>     <strong>public</strong> String getPath() throws URIException\n<a name=\"134\" href=\"#134\">134</a>     {\n<a name=\"135\" href=\"#135\">135</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"136\" href=\"#136\">136</a>         {\n<a name=\"137\" href=\"#137\">137</a>             log.debug(<span class=\"string\">\"getPath() : \"</span> + getHttpURL().getPath());\n<a name=\"138\" href=\"#138\">138</a>         }\n<a name=\"139\" href=\"#139\">139</a> \n<a name=\"140\" href=\"#140\">140</a>         <strong>return</strong> getHttpURL().getPath();\n<a name=\"141\" href=\"#141\">141</a>     }\n<a name=\"142\" href=\"#142\">142</a> \n<a name=\"143\" href=\"#143\">143</a>     <em>/**<em>*</em></em>\n<a name=\"144\" href=\"#144\">144</a> <em>     * Get the port for this peer</em>\n<a name=\"145\" href=\"#145\">145</a> <em>     *</em>\n<a name=\"146\" href=\"#146\">146</a> <em>     * @return the port for this peer</em>\n<a name=\"147\" href=\"#147\">147</a> <em>     *</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     * @throws URIException if there's a problem getting the port</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     */</em>\n<a name=\"150\" href=\"#150\">150</a>     <strong>public</strong> <strong>int</strong> getPort() throws URIException\n<a name=\"151\" href=\"#151\">151</a>     {\n<a name=\"152\" href=\"#152\">152</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"153\" href=\"#153\">153</a>         {\n<a name=\"154\" href=\"#154\">154</a>             log.debug(<span class=\"string\">\"getPort() : \"</span> + getHttpURL().getPort());\n<a name=\"155\" href=\"#155\">155</a>         }\n<a name=\"156\" href=\"#156\">156</a> \n<a name=\"157\" href=\"#157\">157</a>         <strong>return</strong> getHttpURL().getPort();\n<a name=\"158\" href=\"#158\">158</a>     }\n<a name=\"159\" href=\"#159\">159</a> \n<a name=\"160\" href=\"#160\">160</a>     <em>/**<em>*</em></em>\n<a name=\"161\" href=\"#161\">161</a> <em>     * A unique way of finding this peer which is just the host:port string for</em>\n<a name=\"162\" href=\"#162\">162</a> <em>     * now</em>\n<a name=\"163\" href=\"#163\">163</a> <em>     *</em>\n<a name=\"164\" href=\"#164\">164</a> <em>     * @return host:port</em>\n<a name=\"165\" href=\"#165\">165</a> <em>     */</em>\n<a name=\"166\" href=\"#166\">166</a>     <strong>public</strong> String getUniqueID()\n<a name=\"167\" href=\"#167\">167</a>     {\n<a name=\"168\" href=\"#168\">168</a>         <strong>try</strong>\n<a name=\"169\" href=\"#169\">169</a>         {\n<a name=\"170\" href=\"#170\">170</a>             <strong>return</strong> getHost() + ':' + getPort();\n<a name=\"171\" href=\"#171\">171</a>         }\n<a name=\"172\" href=\"#172\">172</a>         <strong>catch</strong>(URIException e)\n<a name=\"173\" href=\"#173\">173</a>         {\n<a name=\"174\" href=\"#174\">174</a>             log.error(e, e);\n<a name=\"175\" href=\"#175\">175</a>         }\n<a name=\"176\" href=\"#176\">176</a> \n<a name=\"177\" href=\"#177\">177</a>         <strong>return</strong> <strong>this</strong>.toString();\n<a name=\"178\" href=\"#178\">178</a>     }\n<a name=\"179\" href=\"#179\">179</a> \n<a name=\"180\" href=\"#180\">180</a>     <em>/**<em>*</em></em>\n<a name=\"181\" href=\"#181\">181</a> <em>     * Register a listener for Messages</em>\n<a name=\"182\" href=\"#182\">182</a> <em>     *</em>\n<a name=\"183\" href=\"#183\">183</a> <em>     * @param l the listener to add</em>\n<a name=\"184\" href=\"#184\">184</a> <em>     */</em>\n<a name=\"185\" href=\"#185\">185</a>     <strong>public</strong> <strong>synchronized</strong> <strong>void</strong> addMessageSender(<strong>final</strong> <a href=\"../../swirl/workspace/messages/MessageSender.html\">MessageSender</a> l)\n<a name=\"186\" href=\"#186\">186</a>     {\n<a name=\"187\" href=\"#187\">187</a>         senders.addElement(l);\n<a name=\"188\" href=\"#188\">188</a>     }\n<a name=\"189\" href=\"#189\">189</a>     <em>/**<em>*</em></em>\n<a name=\"190\" href=\"#190\">190</a> <em>     * Execute a method on the server behind this peer</em>\n<a name=\"191\" href=\"#191\">191</a> <em>     *</em>\n<a name=\"192\" href=\"#192\">192</a> <em>     * @param method the method to execute</em>\n<a name=\"193\" href=\"#193\">193</a> <em>     *</em>\n<a name=\"194\" href=\"#194\">194</a> <em>     * @return the status code from the server</em>\n<a name=\"195\" href=\"#195\">195</a> <em>     *</em>\n<a name=\"196\" href=\"#196\">196</a> <em>     * @throws IOException if there are any problems in the request</em>\n<a name=\"197\" href=\"#197\">197</a> <em>     */</em>\n<a name=\"198\" href=\"#198\">198</a>     <strong>public</strong> <strong>int</strong> executeHttpRequestMethodWithoutLog(<strong>final</strong> HttpMethod method)\n<a name=\"199\" href=\"#199\">199</a>                                  throws IOException\n<a name=\"200\" href=\"#200\">200</a>     {\n<a name=\"201\" href=\"#201\">201</a>     \tsetSlideHost();\n<a name=\"202\" href=\"#202\">202</a>     \tsetSwirlHost();\n<a name=\"203\" href=\"#203\">203</a> \n<a name=\"204\" href=\"#204\">204</a>         <strong>int</strong> statusCode = -1;\n<a name=\"205\" href=\"#205\">205</a> \n<a name=\"206\" href=\"#206\">206</a>         <strong>for</strong>(<strong>int</strong> attempt = 0; (statusCode == -1) &amp;&amp; (attempt &lt; MAX_RETRIES);\n<a name=\"207\" href=\"#207\">207</a>             ++attempt)\n<a name=\"208\" href=\"#208\">208</a>         {\n<a name=\"209\" href=\"#209\">209</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"210\" href=\"#210\">210</a>             {\n<a name=\"211\" href=\"#211\">211</a>                 log.debug(<span class=\"string\">\"executeHttpRequestMethod: \"</span> + method + <span class=\"string\">\"\\nurl: \"</span> + <strong>this</strong>.getHost() + \n<a name=\"212\" href=\"#212\">212</a>                 \t\t<span class=\"string\">\"\\npath: \"</span> + method.getPath() + <span class=\"string\">\"  attempt: \"</span> + attempt);\n<a name=\"213\" href=\"#213\">213</a>             }\n<a name=\"214\" href=\"#214\">214</a> \n<a name=\"215\" href=\"#215\">215</a>             <strong>try</strong>\n<a name=\"216\" href=\"#216\">216</a>             {\n<a name=\"217\" href=\"#217\">217</a>             \tHttpClient client = <strong>new</strong> HttpClient();\n<a name=\"218\" href=\"#218\">218</a>             \tstatusCode = client.executeMethod(slide, method);\n<a name=\"219\" href=\"#219\">219</a>             }\n<a name=\"220\" href=\"#220\">220</a>             <strong>catch</strong>(HttpRecoverableException ex)\n<a name=\"221\" href=\"#221\">221</a>             {\n<a name=\"222\" href=\"#222\">222</a>                 log.info(<span class=\"string\">\"retrying after recoverable exception method: \"</span> + method, ex);\n<a name=\"223\" href=\"#223\">223</a>             }\n<a name=\"224\" href=\"#224\">224</a>         }\n<a name=\"225\" href=\"#225\">225</a> \n<a name=\"226\" href=\"#226\">226</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"227\" href=\"#227\">227</a>         {\n<a name=\"228\" href=\"#228\">228</a>             log.debug(<span class=\"string\">\"statusCode: \"</span> + statusCode);\n<a name=\"229\" href=\"#229\">229</a>         }\n<a name=\"230\" href=\"#230\">230</a> \n<a name=\"231\" href=\"#231\">231</a>         <strong>return</strong> statusCode;\n<a name=\"232\" href=\"#232\">232</a>     }\n<a name=\"233\" href=\"#233\">233</a> \n<a name=\"234\" href=\"#234\">234</a>     \n<a name=\"235\" href=\"#235\">235</a>     <em>/**<em>*</em></em>\n<a name=\"236\" href=\"#236\">236</a> <em>     * Execute a method on the server behind this peer</em>\n<a name=\"237\" href=\"#237\">237</a> <em>     *</em>\n<a name=\"238\" href=\"#238\">238</a> <em>     * @param method the method to execute</em>\n<a name=\"239\" href=\"#239\">239</a> <em>     *</em>\n<a name=\"240\" href=\"#240\">240</a> <em>     * @return the status code from the server</em>\n<a name=\"241\" href=\"#241\">241</a> <em>     *</em>\n<a name=\"242\" href=\"#242\">242</a> <em>     * @throws IOException if there are any problems in the request</em>\n<a name=\"243\" href=\"#243\">243</a> <em>     */</em>\n<a name=\"244\" href=\"#244\">244</a>     <strong>public</strong> <strong>int</strong> executeHttpRequestMethod(<strong>final</strong> HttpMethod method)\n<a name=\"245\" href=\"#245\">245</a>                                  throws IOException\n<a name=\"246\" href=\"#246\">246</a>     {\n<a name=\"247\" href=\"#247\">247</a>     \t<strong>int</strong> statusCode = executeHttpRequestMethodWithoutLog(method);\n<a name=\"248\" href=\"#248\">248</a>     \t<strong>if</strong> (! method.getName().equalsIgnoreCase(<span class=\"string\">\"PROPFIND\"</span>)) {\n<a name=\"249\" href=\"#249\">249</a>     \t\tlogMethod(method, statusCode, false, <strong>null</strong>);\n<a name=\"250\" href=\"#250\">250</a>     \t}\n<a name=\"251\" href=\"#251\">251</a>         <strong>return</strong> statusCode;\n<a name=\"252\" href=\"#252\">252</a>     }\n<a name=\"253\" href=\"#253\">253</a>     \n<a name=\"254\" href=\"#254\">254</a>     <em>/**<em>*</em></em>\n<a name=\"255\" href=\"#255\">255</a> <em>     * Execute a method on the server behind this peer</em>\n<a name=\"256\" href=\"#256\">256</a> <em>     *</em>\n<a name=\"257\" href=\"#257\">257</a> <em>     * @param method the method to execute</em>\n<a name=\"258\" href=\"#258\">258</a> <em>     *</em>\n<a name=\"259\" href=\"#259\">259</a> <em>     * @return the status code from the server</em>\n<a name=\"260\" href=\"#260\">260</a> <em>     *</em>\n<a name=\"261\" href=\"#261\">261</a> <em>     * @throws IOException if there are any problems in the request</em>\n<a name=\"262\" href=\"#262\">262</a> <em>     */</em>\n<a name=\"263\" href=\"#263\">263</a>     <strong>public</strong> <strong>int</strong> executeHttpRequestMethod(<strong>final</strong> HttpMethod method, <a href=\"../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> coord)\n<a name=\"264\" href=\"#264\">264</a>                                  throws IOException\n<a name=\"265\" href=\"#265\">265</a>     {\n<a name=\"266\" href=\"#266\">266</a>     \t<strong>int</strong> statusCode = executeHttpRequestMethodWithoutLog(method);\n<a name=\"267\" href=\"#267\">267</a>     \t<strong>if</strong> (! method.getName().equalsIgnoreCase(<span class=\"string\">\"PROPFIND\"</span>)) {\n<a name=\"268\" href=\"#268\">268</a>     \t\tlogMethod(method, statusCode, false, coord);\n<a name=\"269\" href=\"#269\">269</a>     \t}\n<a name=\"270\" href=\"#270\">270</a>         <strong>return</strong> statusCode;\n<a name=\"271\" href=\"#271\">271</a>     }\n<a name=\"272\" href=\"#272\">272</a>     \n<a name=\"273\" href=\"#273\">273</a>     <em>/**<em>*</em></em>\n<a name=\"274\" href=\"#274\">274</a> <em>     * Execute a method on the server behind this peer</em>\n<a name=\"275\" href=\"#275\">275</a> <em>     *</em>\n<a name=\"276\" href=\"#276\">276</a> <em>     * @param method the method to execute</em>\n<a name=\"277\" href=\"#277\">277</a> <em>     *</em>\n<a name=\"278\" href=\"#278\">278</a> <em>     * @return the status code from the server</em>\n<a name=\"279\" href=\"#279\">279</a> <em>     *</em>\n<a name=\"280\" href=\"#280\">280</a> <em>     * @throws IOException if there are any problems in the request</em>\n<a name=\"281\" href=\"#281\">281</a> <em>     */</em>\n<a name=\"282\" href=\"#282\">282</a>     <strong>public</strong> <strong>int</strong> executeHttpRequestMethodLogPrivate(<strong>final</strong> HttpMethod method)\n<a name=\"283\" href=\"#283\">283</a>                                  throws IOException\n<a name=\"284\" href=\"#284\">284</a>     {\n<a name=\"285\" href=\"#285\">285</a>     \t<strong>int</strong> statusCode = executeHttpRequestMethodWithoutLog(method);\n<a name=\"286\" href=\"#286\">286</a> \t    logMethod(method, statusCode, <strong>true</strong>, <strong>null</strong>);\n<a name=\"287\" href=\"#287\">287</a>         <strong>return</strong> statusCode;\n<a name=\"288\" href=\"#288\">288</a>     }\n<a name=\"289\" href=\"#289\">289</a>     \n<a name=\"290\" href=\"#290\">290</a>     <em>/**<em>*</em></em>\n<a name=\"291\" href=\"#291\">291</a> <em>     * Execute a method on the server behind this peer</em>\n<a name=\"292\" href=\"#292\">292</a> <em>     *</em>\n<a name=\"293\" href=\"#293\">293</a> <em>     * @param method the method to execute</em>\n<a name=\"294\" href=\"#294\">294</a> <em>     *</em>\n<a name=\"295\" href=\"#295\">295</a> <em>     * @return the status code from the server</em>\n<a name=\"296\" href=\"#296\">296</a> <em>     *</em>\n<a name=\"297\" href=\"#297\">297</a> <em>     * @throws IOException if there are any problems in the request</em>\n<a name=\"298\" href=\"#298\">298</a> <em>     */</em>\n<a name=\"299\" href=\"#299\">299</a>     <strong>public</strong> <strong>int</strong> executeHttpRequestMethodLogPrivate(<strong>final</strong> HttpMethod method, <a href=\"../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> coord)\n<a name=\"300\" href=\"#300\">300</a>                                  throws IOException\n<a name=\"301\" href=\"#301\">301</a>     {\n<a name=\"302\" href=\"#302\">302</a>     \t<strong>int</strong> statusCode = executeHttpRequestMethodWithoutLog(method);\n<a name=\"303\" href=\"#303\">303</a> \t    logMethod(method, statusCode, <strong>true</strong>, coord);\n<a name=\"304\" href=\"#304\">304</a>         <strong>return</strong> statusCode;\n<a name=\"305\" href=\"#305\">305</a>     }\n<a name=\"306\" href=\"#306\">306</a>     \n<a name=\"307\" href=\"#307\">307</a> \n<a name=\"308\" href=\"#308\">308</a>     \n<a name=\"309\" href=\"#309\">309</a>     <em>/**<em>*</em></em>\n<a name=\"310\" href=\"#310\">310</a> <em>     * Remove a listener for Messages</em>\n<a name=\"311\" href=\"#311\">311</a> <em>     *</em>\n<a name=\"312\" href=\"#312\">312</a> <em>     * @param l the listener to remove</em>\n<a name=\"313\" href=\"#313\">313</a> <em>     */</em>\n<a name=\"314\" href=\"#314\">314</a>     <strong>public</strong> <strong>synchronized</strong> <strong>void</strong> removeMessageSender(<strong>final</strong> <a href=\"../../swirl/workspace/messages/MessageSender.html\">MessageSender</a> l)\n<a name=\"315\" href=\"#315\">315</a>     {\n<a name=\"316\" href=\"#316\">316</a>         senders.removeElement(l);\n<a name=\"317\" href=\"#317\">317</a>     }\n<a name=\"318\" href=\"#318\">318</a> \n<a name=\"319\" href=\"#319\">319</a>     <em>/**<em>*</em></em>\n<a name=\"320\" href=\"#320\">320</a> <em>     * Returns the url for this peer or \"\" if there's a problem</em>\n<a name=\"321\" href=\"#321\">321</a> <em>     *</em>\n<a name=\"322\" href=\"#322\">322</a> <em>     * @return the url for this peer</em>\n<a name=\"323\" href=\"#323\">323</a> <em>     */</em>\n<a name=\"324\" href=\"#324\">324</a>     <strong>public</strong> String toString()\n<a name=\"325\" href=\"#325\">325</a>     {\n<a name=\"326\" href=\"#326\">326</a>         <strong>try</strong>\n<a name=\"327\" href=\"#327\">327</a>         {\n<a name=\"328\" href=\"#328\">328</a>             <strong>return</strong> getHttpURL().toString();\n<a name=\"329\" href=\"#329\">329</a>         }\n<a name=\"330\" href=\"#330\">330</a>         <strong>catch</strong>(Exception ex)\n<a name=\"331\" href=\"#331\">331</a>         {\n<a name=\"332\" href=\"#332\">332</a>             log.warn(<span class=\"string\">\"toString()\"</span>, ex);\n<a name=\"333\" href=\"#333\">333</a>         }\n<a name=\"334\" href=\"#334\">334</a> \n<a name=\"335\" href=\"#335\">335</a>         <strong>return</strong> <strong>super</strong>.toString();\n<a name=\"336\" href=\"#336\">336</a>     }\n<a name=\"337\" href=\"#337\">337</a> \n<a name=\"338\" href=\"#338\">338</a>     <em>/**<em>*</em></em>\n<a name=\"339\" href=\"#339\">339</a> <em>     * extract file information from the XML Document doc</em>\n<a name=\"340\" href=\"#340\">340</a> <em>     */</em>\n<a name=\"341\" href=\"#341\">341</a> <em class=\"comment\">/*<em class=\"comment\">    private void extractFileInfo()</em></em>\n<a name=\"342\" href=\"#342\">342</a> <em class=\"comment\">    {</em>\n<a name=\"343\" href=\"#343\">343</a> <em class=\"comment\">        if(log.isDebugEnabled())</em>\n<a name=\"344\" href=\"#344\">344</a> <em class=\"comment\">        {</em>\n<a name=\"345\" href=\"#345\">345</a> <em class=\"comment\">            log.debug(\"extractFileInfo\");</em>\n<a name=\"346\" href=\"#346\">346</a> <em class=\"comment\">        }</em>\n<a name=\"347\" href=\"#347\">347</a> \n<a name=\"348\" href=\"#348\">348</a> <em class=\"comment\">        DOMReader reader = new DOMReader();</em>\n<a name=\"349\" href=\"#349\">349</a> <em class=\"comment\">        org.dom4j.Document body = reader.read(doc);</em>\n<a name=\"350\" href=\"#350\">350</a> \n<a name=\"351\" href=\"#351\">351</a> <em class=\"comment\">        files.removeAllElements();</em>\n<a name=\"352\" href=\"#352\">352</a> \n<a name=\"353\" href=\"#353\">353</a> <em class=\"comment\">        String nodeTag = \"/D:multistatus/D:response\";</em>\n<a name=\"354\" href=\"#354\">354</a> <em class=\"comment\">        List nodes = body.selectNodes(nodeTag);</em>\n<a name=\"355\" href=\"#355\">355</a> \n<a name=\"356\" href=\"#356\">356</a> <em class=\"comment\">        for(Iterator it = nodes.iterator(); it.hasNext();)</em>\n<a name=\"357\" href=\"#357\">357</a> <em class=\"comment\">        {</em>\n<a name=\"358\" href=\"#358\">358</a> <em class=\"comment\">            org.dom4j.Node node = (Node)it.next();</em>\n<a name=\"359\" href=\"#359\">359</a> \n<a name=\"360\" href=\"#360\">360</a> <em class=\"comment\">            if(log.isDebugEnabled())</em>\n<a name=\"361\" href=\"#361\">361</a> <em class=\"comment\">            {</em>\n<a name=\"362\" href=\"#362\">362</a> <em class=\"comment\">                log.debug(\"the node is:\" + node);</em>\n<a name=\"363\" href=\"#363\">363</a> <em class=\"comment\">            }</em>\n<a name=\"364\" href=\"#364\">364</a> \n<a name=\"365\" href=\"#365\">365</a> <em class=\"comment\">            String nameTag = \"D:propstat/D:prop/D:displayname\";</em>\n<a name=\"366\" href=\"#366\">366</a> <em class=\"comment\">            String fileName = \"\";</em>\n<a name=\"367\" href=\"#367\">367</a> <em class=\"comment\">            Node fileNameNode = node.selectSingleNode(nameTag);</em>\n<a name=\"368\" href=\"#368\">368</a> \n<a name=\"369\" href=\"#369\">369</a> <em class=\"comment\">            if(fileNameNode != null)</em>\n<a name=\"370\" href=\"#370\">370</a> <em class=\"comment\">            {</em>\n<a name=\"371\" href=\"#371\">371</a> <em class=\"comment\">                fileName = fileNameNode.getText();</em>\n<a name=\"372\" href=\"#372\">372</a> <em class=\"comment\">                log.debug(\"the file name is:\" + fileName);</em>\n<a name=\"373\" href=\"#373\">373</a> <em class=\"comment\">            }</em>\n<a name=\"374\" href=\"#374\">374</a> \n<a name=\"375\" href=\"#375\">375</a> <em class=\"comment\">            String typeTag = \"D:propstat/D:prop/D:resourcetype/D:collection\";</em>\n<a name=\"376\" href=\"#376\">376</a> <em class=\"comment\">            Object fileType = node.selectSingleNode(typeTag);</em>\n<a name=\"377\" href=\"#377\">377</a> <em class=\"comment\">            boolean isDir = false;</em>\n<a name=\"378\" href=\"#378\">378</a> \n<a name=\"379\" href=\"#379\">379</a> <em class=\"comment\">            if(fileType != null)</em>\n<a name=\"380\" href=\"#380\">380</a> <em class=\"comment\">            {</em>\n<a name=\"381\" href=\"#381\">381</a> <em class=\"comment\">                log.debug(\"get a directory\");</em>\n<a name=\"382\" href=\"#382\">382</a> <em class=\"comment\">                isDir = true;</em>\n<a name=\"383\" href=\"#383\">383</a> <em class=\"comment\">            }</em>\n<a name=\"384\" href=\"#384\">384</a> \n<a name=\"385\" href=\"#385\">385</a> <em class=\"comment\">            String pathTag = \"D:href\";</em>\n<a name=\"386\" href=\"#386\">386</a> <em class=\"comment\">            String filePath = node.selectSingleNode(pathTag).getText();</em>\n<a name=\"387\" href=\"#387\">387</a> \n<a name=\"388\" href=\"#388\">388</a> <em class=\"comment\">            if(log.isDebugEnabled())</em>\n<a name=\"389\" href=\"#389\">389</a> <em class=\"comment\">            {</em>\n<a name=\"390\" href=\"#390\">390</a> <em class=\"comment\">                log.debug(\"the file path is:\" + filePath);</em>\n<a name=\"391\" href=\"#391\">391</a> <em class=\"comment\">            }</em>\n<a name=\"392\" href=\"#392\">392</a> \n<a name=\"393\" href=\"#393\">393</a> <em class=\"comment\">            FileNode fe = new FileNode(fileName, filePath, isDir);</em>\n<a name=\"394\" href=\"#394\">394</a> \n<a name=\"395\" href=\"#395\">395</a> <em class=\"comment\">            files.add(fe);</em>\n<a name=\"396\" href=\"#396\">396</a> <em class=\"comment\">        }</em>\n<a name=\"397\" href=\"#397\">397</a> <em class=\"comment\">    }*/</em>\n<a name=\"398\" href=\"#398\">398</a> \n<a name=\"399\" href=\"#399\">399</a>     <em>/**<em>*</em></em>\n<a name=\"400\" href=\"#400\">400</a> <em>     *</em>\n<a name=\"401\" href=\"#401\">401</a> <em>     * Send a message to all of the listeners about the current method</em>\n<a name=\"402\" href=\"#402\">402</a> <em>     *</em>\n<a name=\"403\" href=\"#403\">403</a> <em>     * @param method the method to log</em>\n<a name=\"404\" href=\"#404\">404</a> <em>     * @param status the status of the executed method to log</em>\n<a name=\"405\" href=\"#405\">405</a> <em>     * @param isPrivate indicates whether log should extend beyond local peer</em>\n<a name=\"406\" href=\"#406\">406</a> <em>     * @param coord hack to allow us to log coordinates for an imported file using drag and drop</em>\n<a name=\"407\" href=\"#407\">407</a> <em>     */</em>\n<a name=\"408\" href=\"#408\">408</a>     <strong>private</strong> <strong>void</strong> logMethod(<strong>final</strong> HttpMethod method, <strong>final</strong> <strong>int</strong> status, <strong>boolean</strong> isPrivate, <a href=\"../../swirl/workspace/viz/pie/Coordinate.html\">Coordinate</a> coord)\n<a name=\"409\" href=\"#409\">409</a>     {\n<a name=\"410\" href=\"#410\">410</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"411\" href=\"#411\">411</a>         {\n<a name=\"412\" href=\"#412\">412</a>             log.debug(<span class=\"string\">\"logMethod()\"</span>);\n<a name=\"413\" href=\"#413\">413</a>         }\n<a name=\"414\" href=\"#414\">414</a> \n<a name=\"415\" href=\"#415\">415</a>         HashMap message = <strong>new</strong> HashMap();\n<a name=\"416\" href=\"#416\">416</a>         <em class=\"comment\">//log.debug(\"hostConf: \" + method.getHostConfiguration());</em>\n<a name=\"417\" href=\"#417\">417</a>         message.put(<span class=\"string\">\"TYPE\"</span>, <span class=\"string\">\"Swirl\"</span>);\n<a name=\"418\" href=\"#418\">418</a>         <strong>try</strong> {\n<a name=\"419\" href=\"#419\">419</a> \t\t\tmessage.put(<span class=\"string\">\"WEBDAV_HOST\"</span>, getHost());\t<em class=\"comment\">//method.getHostConfiguration().getHost());</em>\n<a name=\"420\" href=\"#420\">420</a> \t\t} <strong>catch</strong> (URIException e1) {\n<a name=\"421\" href=\"#421\">421</a> \t\t\tlog.error(e1, e1);\n<a name=\"422\" href=\"#422\">422</a> \t\t}\n<a name=\"423\" href=\"#423\">423</a>         message.put(<span class=\"string\">\"WEBDAV_PATH\"</span>, method.getPath());\n<a name=\"424\" href=\"#424\">424</a>         message.put(<span class=\"string\">\"WEBDAV_CLIENT\"</span>,\n<a name=\"425\" href=\"#425\">425</a>                     PeerManager.getLocalAddress().getHostAddress());\n<a name=\"426\" href=\"#426\">426</a>         <em class=\"comment\">// message.put(\"WEBDAV_CLIENT_USER\", System.getProperty(\"user.name\"));</em>\n<a name=\"427\" href=\"#427\">427</a>         message.put(<span class=\"string\">\"WEBDAV_CLIENT_USER\"</span>, JmDNSPeer.getEffectiveUserNameForPeer());\n<a name=\"428\" href=\"#428\">428</a>         message.put(<span class=\"string\">\"WEBDAV_COMMAND\"</span>, method.getName());\n<a name=\"429\" href=\"#429\">429</a>         message.put(<span class=\"string\">\"WEBDAV_RESPONSE_STATUS\"</span>, status + <span class=\"string\">\"\"</span>);\n<a name=\"430\" href=\"#430\">430</a>         \n<a name=\"431\" href=\"#431\">431</a>         <strong>if</strong> (method instanceof MoveMethod)\n<a name=\"432\" href=\"#432\">432</a>         {\n<a name=\"433\" href=\"#433\">433</a>         \tlog.debug(<span class=\"string\">\"logging a MOVE method to yancees\"</span>);\n<a name=\"434\" href=\"#434\">434</a>         \tMoveMethod moveMethod = (MoveMethod)method;\n<a name=\"435\" href=\"#435\">435</a>         \tmessage.put(<span class=\"string\">\"WEBDAV_DEST\"</span>, moveMethod.getDestination());\n<a name=\"436\" href=\"#436\">436</a>         }\n<a name=\"437\" href=\"#437\">437</a> \n<a name=\"438\" href=\"#438\">438</a>         <strong>if</strong>(method instanceof <a href=\"../../swirl/workspace/OurPropPatchMethod.html\">OurPropPatchMethod</a>)\n<a name=\"439\" href=\"#439\">439</a>         {\n<a name=\"440\" href=\"#440\">440</a>         \tlog.debug(<span class=\"string\">\"OurPropPatchMethod is getting sent to yanceese\"</span>);\n<a name=\"441\" href=\"#441\">441</a>         \tOurPropPatchMethod meth = (OurPropPatchMethod)method;\n<a name=\"442\" href=\"#442\">442</a>         \tmessage.putAll(meth.getRemoveProperties());\n<a name=\"443\" href=\"#443\">443</a>         \tmessage.putAll(meth.getSetProperties());\n<a name=\"444\" href=\"#444\">444</a>         \t<strong>if</strong> (coord != <strong>null</strong>) {\n<a name=\"445\" href=\"#445\">445</a>             \tlog.debug(<span class=\"string\">\"logging a setlocalpath with coordinate to yancees\"</span>);\n<a name=\"446\" href=\"#446\">446</a>             \tmessage.put(<span class=\"string\">\"SET_radius\"</span>, String.valueOf(coord.getRadius()));\n<a name=\"447\" href=\"#447\">447</a>             \tmessage.put(<span class=\"string\">\"SET_relativeAngle\"</span>, String.valueOf(coord.getRelativeAngle()));\n<a name=\"448\" href=\"#448\">448</a>         \t}\n<a name=\"449\" href=\"#449\">449</a>         }\n<a name=\"450\" href=\"#450\">450</a>         \n<a name=\"451\" href=\"#451\">451</a>         <strong>if</strong>(method instanceof XMLResponseMethodBase)\n<a name=\"452\" href=\"#452\">452</a>         {\n<a name=\"453\" href=\"#453\">453</a>             doc = ((XMLResponseMethodBase)method).getResponseDocument();\n<a name=\"454\" href=\"#454\">454</a> \n<a name=\"455\" href=\"#455\">455</a>             <strong>if</strong>(doc != <strong>null</strong>)\n<a name=\"456\" href=\"#456\">456</a>             {\n<a name=\"457\" href=\"#457\">457</a>                 DocumentLogger.logDocument(log, <span class=\"string\">\"responseBody doc: \"</span>, doc);\n<a name=\"458\" href=\"#458\">458</a>                 <em class=\"comment\">//extractFileInfo();</em>\n<a name=\"459\" href=\"#459\">459</a>             }\n<a name=\"460\" href=\"#460\">460</a>             <strong>else</strong>\n<a name=\"461\" href=\"#461\">461</a>             {\n<a name=\"462\" href=\"#462\">462</a>                 log.debug(<span class=\"string\">\"method has no Document in response\"</span>);\n<a name=\"463\" href=\"#463\">463</a>             }\n<a name=\"464\" href=\"#464\">464</a>         }\n<a name=\"465\" href=\"#465\">465</a>         <strong>else</strong>\n<a name=\"466\" href=\"#466\">466</a>         {\n<a name=\"467\" href=\"#467\">467</a>             log.debug(<span class=\"string\">\"responseBody str: \"</span> + method.getResponseBodyAsString());\n<a name=\"468\" href=\"#468\">468</a>         }\n<a name=\"469\" href=\"#469\">469</a> \n<a name=\"470\" href=\"#470\">470</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"471\" href=\"#471\">471</a>         {\n<a name=\"472\" href=\"#472\">472</a>             log.debug(<span class=\"string\">\"message: \"</span> + message);\n<a name=\"473\" href=\"#473\">473</a>         }\n<a name=\"474\" href=\"#474\">474</a>         \n<a name=\"475\" href=\"#475\">475</a>         <strong>if</strong>((senders != <strong>null</strong>) &amp;&amp; !senders.isEmpty())\n<a name=\"476\" href=\"#476\">476</a>         {\n<a name=\"477\" href=\"#477\">477</a>             <em class=\"comment\">// make a copy of the listener list in case</em>\n<a name=\"478\" href=\"#478\">478</a>             <em class=\"comment\">//   anyone adds/removes listeners</em>\n<a name=\"479\" href=\"#479\">479</a>             Vector targets;\n<a name=\"480\" href=\"#480\">480</a> \n<a name=\"481\" href=\"#481\">481</a>             <strong>synchronized</strong>(<strong>this</strong>)\n<a name=\"482\" href=\"#482\">482</a>             {\n<a name=\"483\" href=\"#483\">483</a>                 targets = (Vector)senders.clone();\n<a name=\"484\" href=\"#484\">484</a>             }\n<a name=\"485\" href=\"#485\">485</a> \n<a name=\"486\" href=\"#486\">486</a>             <em class=\"comment\">// walk through the listener list and</em>\n<a name=\"487\" href=\"#487\">487</a>             <em class=\"comment\">//   call the receiveMessage method in each</em>\n<a name=\"488\" href=\"#488\">488</a>             Enumeration e = targets.elements();\n<a name=\"489\" href=\"#489\">489</a> \n<a name=\"490\" href=\"#490\">490</a>             <strong>while</strong>(e.hasMoreElements())\n<a name=\"491\" href=\"#491\">491</a>             {\n<a name=\"492\" href=\"#492\">492</a>                 <a href=\"../../swirl/workspace/messages/MessageSender.html\">MessageSender</a> sender = (MessageSender)e.nextElement();\n<a name=\"493\" href=\"#493\">493</a> \n<a name=\"494\" href=\"#494\">494</a>                 sender.sendMessage(message, isPrivate);\n<a name=\"495\" href=\"#495\">495</a>             }\n<a name=\"496\" href=\"#496\">496</a>         }\n<a name=\"497\" href=\"#497\">497</a>     }\n<a name=\"498\" href=\"#498\">498</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32760.0}