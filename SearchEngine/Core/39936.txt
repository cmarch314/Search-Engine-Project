{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Alpha shape 3 Dt Definition The class Alpha shape 3 Dt represents the family of alpha shapes of points in the 3D space for all positive It maintains an underlying triangulation of the class Dt which represents connectivity and order among its faces Each k dimensional face of the Dt is associated with an interval that specifies for which values of the face belongs to the alpha shape Note that this class is at the same time used for basic and for weighted Alpha Shapes Inherits From Dt This class is the underlying triangulation class The modifying functions insert and remove will overwrite the inherited functions At the moment only the static version is implemented Types Alpha shape 3 Dt Gt the alpha shape traits type it has to derive from a triangulation traits class For example Dt Point is a Point class typedef Gt FT NT the number type of alpha values Alpha shape 3 Dt Alpha iterator A bidirectional and non mutable iterator that allow to traverse the increasing sequence of different alpha values Precondition Its value type is NT enum Mode GENERAL REGULARIZED In GENERAL mode the alpha complex can have singular faces i e faces of dimension k for k 1 2 that are not subfaces of a k 1 face of the complex In REGULARIZED mode the complex is regularized that is singular faces are dropped and the alpha complex includes only a subset of the tetrahedral cells of the triangulation and the subfaces of those cells enum Classification type EXTERIOR SINGULAR REGULAR INTERIOR Enum to classify the faces of the underlying triangulation with respect to the alpha shape In GENERAL mode for k 1 2 each k dimensional simplex of the triangulation can be classified as EXTERIOR SINGULAR REGULAR or INTERIOR In GENERAL mode a k simplex is REGULAR if it is on the boundary f the alpha complex and belongs to a k 1 simplex in this complex and it is SINGULAR if it is a boundary simplex that is not included in a k 1 simplex of the complex In REGULARIZED mode for k 1 2 each k dimensional simplex of the triangulation can be classified as EXTERIOR REGULAR or INTERIOR i e there is no singular faces A k simplex is REGULAR if it is on the boundary of alpha complex and belongs to a tetrahedral cell of the complex Creation Alpha shape 3 Dt A FT alpha Mode m REGULARIZED Introduces an empty alpha shape data structure A for and set the current alpha value to alpha and the mode to m Alpha shape 3 Dt A Dt dt NT alpha Mode m REGULARIZED Build an alpha shape of mode m from the triangulation dt Be carefull that this operation destroy the triangulation template class InputIterator Alpha shape 3 Dt A InputIterator first InputIterator last FT alpha Mode m REGULARIZED Buil an alpha shape data structure in mode m for the points in the range first last and set the current alpha value to alpha Precondition The value type of first and last is Point the type point of the underlying triangulation Modifiers template class InputIterator int A make alpha shape InputIterator first InputIterator last Initialize the alpha shape data structure for points in the range first last Returns the number of data points inserted in the underlying triangulation If the function is applied to an non empty alpha shape data structure it is cleared before initialization Precondition The value type of first and last is Point void A clear Clears the structure FT A set alpha Coord type alpha Sets the value to alpha Returns the previous value Precondition alpha Mode A set mode Mode m REGULARIZED Sets A in GENERAL or REGULARIZED Returns the previous mode Changing the mode of an alpha shape data structure entails a partial recomputation of the data structure Query Functions Mode A get mode void Returns whether A is general or regularized FT A get alpha void Returns the current value FT A get nth alpha int n Returns the n th alpha value sorted in an increasing order Precondition n number of alphas int A number of alphas Returns the number of different alpha values Classification type A classify Point p FT alpha get alpha Locates a point p in the underlying triangulation and Classifies the associated k face with respect to alpha Classification type A classify Cell handle f FT alpha get alpha Classifies the cell f of the underlying triangulation with respect to alpha Classification type A classify Facet f FT alpha get alpha Classifies the facet e of the underlying triangulation with respect to alpha Classification type A classify Cell handle f int i FT alpha get alpha Classifies the facet of the cell f opposite to the vertex with index i of the underlying triangulation with respect to alpha Classification type A classify Edge e FT alpha get alpha Classifies the edge e with respect to alpha Classification type A classify Vertex handle v FT alpha get alpha Classifies the vertex v of the underlying triangulation with respect to alpha template class OutputIterator OutputIterator A get alpha shape cells OutputIterator it Classification type type NT alpha get alpha Write the cells which are of type type for the alpha value alpha to the sequence pointed to by the output iterator it Return past the end of the output sequence template class OutputIterator OutputIterator A get alpha shape facets OutputIterator it Classification type type NT alpha get alpha Write the facets which are of type type for the alpha value alpha to the sequence pointed to by the output iterator it Return past the end of the output sequence template class OutputIterator OutputIterator A get alpha shape edges OutputIterator it Classification type type NT alpha get alpha Write the edges which are of type type for the alpha value alpha to the sequence pointed to by the output iterator it Return past the end of the output sequence template class OutputIterator OutputIterator A get alpha shape vertices OutputIterator it Classification type type NT alphaget alpha Write the vertices which are of type type for the alpha value alpha to the sequence pointed to by the output iterator it Return past the end of the output sequence Traversal of the Values Alpha iterator A alpha begin Returns an iterator that allows to traverse the sorted sequence of values of the family of alpha shapes Alpha iterator A alpha end Returns the corresponding past the end iterator Alpha iterator A alpha find FT alpha Returns an iterator pointing to an element with value alpha or the corresponding past the end iterator if such an element is not found Alpha iterator A alpha lower bound FT alpha Returns an iterator pointing to the first element with value not less than alpha Alpha iterator A alpha upper bound FT alpha Returns an iterator pointing to the first element with value greater than alpha Operations int A number of solid components FT alpha get alpha Returns the number of solid components of A that is the number of components of its regularized version Alpha iterator A find optimal alpha int nb components Returns an iterator pointing to smallest value such that A satisfies the following two properties all data points are either on the boundary or in the interior of the regularized version of A The number of solid component of A is equal to or smaller than nb components I O The I O operators are defined for iostream and for the window stream provided by CGAL The format for the iostream is an internal format include CGAL IO io h ostream ostream os A Inserts the alpha shape A for the current alpha value into the stream os Precondition The insert operator must be defined for Point include CGAL IO Geomview stream h include CGAL IO alpha shape geomview ostream 3 h Geomview stream Geomview stream W A Inserts the alpha shape A for the current alpha value into the Geomview stream W Precondition The insert operator must be defined for Point and Triangle Implementation In GENERAL mode the alpha intervals of each triangulation face is computed and stored at initialization time In REGULARIZED mode the alpha shape intervals of edges are not stored nor computed at initialization Edges are simply classified on the fly upon request This allows to have much faster building of alpha shapes in REGULARIZED mode A alpha find uses linear search while A alpha lower bound and A alpha upper bound use binary search A number of solid components performs a graph traversal and takes time linear in the number of cells of the underlying triangulation A find of optimal alpha uses binary search and takes time O n log n where n is the number of points Next Alpha shape cell base 3 Traits Fb Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Alpha_shapes_3_ref/Class_Alpha_shape_3.html", "title": "alpha_shape_3&lt;dt&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Alpha_shapes_3_ref/Alpha_shape_3.tex' -->\n<html> <head>  \n<title>Alpha_shape_3&lt;Dt&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1029\"></A>\n\n<A NAME=\"Cross_link_anchor_1030\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_956\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Alpha_shape_3<Dt>\"></A>\n<h2><I>CGAL::Alpha_shape_3&lt;Dt&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt;</I> represents the family of\nalpha shapes of points in the 3D space for <I>all</I> positive\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>. It maintains an  underlying triangulation \nof the class <I>Dt</I> which\nrepresents connectivity and order among its faces. Each\n<MATH><I>k</I></MATH>-dimensional face of the <I>Dt</I> is associated with\nan interval that specifies for which values of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> the face\nbelongs to the alpha shape.\n<P>\n\nNote that this class is at the same time used for <I>basic</I> and\nfor <I>weighted</I> Alpha Shapes\n<A NAME=\"Index_anchor_957\"></A> \n.\n<P>\n\n<H3>Inherits From</H3>\n<P>\n\n<I>Dt</I>\n<P>\n\nThis class is the underlying triangulation class.\n<P>\n\nThe modifying functions <I>insert</I> and <I>remove</I> will overwrite\nthe inherited functions. At the moment, only the static version is implemented.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt;::Gt\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the alpha shape traits type.\n<P>\n\n</TD></TR>\n        </TABLE>\n\nit has to derive from a triangulation traits class.  \nFor example <I>Dt::Point</I> is a Point class.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_NT\"></A>\n<A NAME=\"Typedef_NT\"></A>\ntypedef Gt::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    NT;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the number type of alpha values.\n        </TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt;::Alpha_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A bidirectional and non-mutable iterator that allow to traverse \nthe increasing sequence of different alpha values.<BR>\n\n<EM>Precondition: </EM>Its <I>value_type</I> is <I>NT</I>\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Mode\"></A>\n<A NAME=\"Enum_Mode\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A> { <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A><A NAME=\"Function_Mode\"></A>\n, <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A><A NAME=\"Function_Mode\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    In <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A> mode, the alpha complex  can have singular faces,\n i. e. faces of dimension <MATH><I>k</I></MATH>, for <MATH><I>k=(0,1,2)</I></MATH>\nthat are not subfaces of a <MATH><I>k+1</I></MATH> face of the complex.\nIn  <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A> mode, the complex is regularized, that is\nsingular faces are dropped and the alpha complex \nincludes only a subset of the tetrahedral cells \nof the triangulation and the subfaces of those cells.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type\"></A>\n<A NAME=\"Enum_Classification_type\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A> { <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">EXTERIOR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">SINGULAR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">REGULAR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">INTERIOR</A><A NAME=\"Function_Classification_type\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Enum to classify the faces of the underlying \ntriangulation with respect to the alpha shape.<BR>\n\nIn <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A> mode, for <MATH><I>k=(0,1,2)</I></MATH>,\n each k-dimensional simplex of the triangulation\ncan be classified as <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">EXTERIOR</A>, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">SINGULAR</A>, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">REGULAR</A>\nor <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">INTERIOR</A>.\nIn <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A> mode a <MATH><I>k</I></MATH> simplex is <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">REGULAR</A> if it is on the boundary\nf the alpha complex and belongs to a <MATH><I>k+1</I></MATH> simplex in this complex\nand it is <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">SINGULAR</A>  if it is  a boundary simplex that is not included in a <MATH><I>k+1</I></MATH> simplex of the complex.<BR>\n\nIn <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A> mode, for <MATH><I>k=(0,1,2)</I></MATH>\neach k-dimensional simplex of the triangulation\ncan be classified as <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">EXTERIOR</A>, <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">REGULAR</A> or <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">INTERIOR</A>, i.e.\nthere is no singular faces.\nA <MATH><I>k</I></MATH> simplex is <A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">REGULAR</A> if it is on the boundary of alpha complex\nand belongs to a tetrahedral cell of the complex.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt; A ( FT alpha = 0,  <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces an empty alpha shape data structure\n<I>A</I> for and set the\ncurrent alpha value to <I>alpha</I> and the mode to <I>m</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt; A ( Dt&amp; dt,  NT alpha = 0,  <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Build an alpha shape of mode <I>m</I> \nfrom the triangulation dt. \nBe carefull that this operation destroy the triangulation.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Alpha_shape_3.html#Cross_link_anchor_1030\">Alpha_shape_3</A>&lt;Dt&gt; A ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\nFT alpha = 0,<BR>\n\n<A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Buil an alpha shape data structure in mode <I>m</I> \nfor the points in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH> and \nset the current alpha value to <I>alpha</I>.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and\n<I>last</I> is <I>Point</I> (the type point of the underlying \ntriangulation.)\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Modifiers</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_make_alpha_shape6_InputIterator_first+_InputIterator_last9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.make_alpha_shape ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Initialize the alpha shape data structure\nfor  points in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>. \nReturns the number of data points inserted in the underlying\ntriangulation.<BR>\n\nIf the function is applied to an non-empty alpha shape data structure, it is cleared\nbefore initialization.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and\n<I>last</I> is <I>Point</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clears the structure.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_FT_set_alpha6const_Coord_type__alpha9;\"></A>\nFT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.set_alpha (  Coord_type alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value to <I>alpha</I>.\n Returns the previous <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value.<BR>\n\n<EM>Precondition: </EM><I>alpha</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> 0</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Mode_set_mode6Mode_m_=_REGULARIZED_9;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.<A HREF=\"../IOstream_ref/Function_set_mode.html#Cross_link_anchor_1748\">set_mode</A> ( <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets <I>A</I> in <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A>  or <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A>. \nReturns the previous mode. \nChanging the mode of an alpha shape data structure\nentails a partial recomputation of the data structure.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Query Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Mode_get_mode6void9_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.<A HREF=\"../IOstream_ref/Function_get_mode.html#Cross_link_anchor_1727\">get_mode</A> ( void)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns whether <I>A</I> is general or regularized.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_FT__get_alpha6void9_const;\"></A>\n FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.get_alpha ( void)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_FT__get_nth_alpha6int_n9_const;\"></A>\n FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.get_nth_alpha ( int n)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the <MATH><I>n</I></MATH>-th alpha-value, sorted in an increasing order.<BR>\n\n<EM>Precondition: </EM><I>n</I> &lt; number of alphas.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_alphas69_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.number_of_alphas ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of different alpha-values.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6const_Point__p+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify (  Point p,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Locates a point  <I>p</I> in the underlying triangulation and Classifies the \nassociated k-face with respect to <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Cell_handle_f+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Cell_handle f,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the cell <I>f</I> of the underlying triangulation with\nrespect \nto <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Facet_f+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Facet f,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the facet <I>e</I> of the underlying triangulation with\nrespect to <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Cell_handle_f+_int_i+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.classify ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Cell_handle f,<BR>\n\nint i,<BR>\n\nFT alpha = get_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the facet of the cell <I>f</I> <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the vertex with index\n<I>i</I> \nof the underlying triangulation with respect to <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6const_Edge__e+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify (  Edge e,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the edge <I>e</I> with respect to <I>alpha</I> .\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Vertex_handle_v+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Vertex_handle v,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the vertex <I>v</I> of the underlying triangulation with respect to <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_get_alpha_shape_cells6OutputIterator_it+_Classification_type_type+_const_NT__alpha_=_get_alpha699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.get_alpha_shape_cells ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    OutputIterator it,<BR>\n\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A> type,<BR>\n\nNT alpha = get_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Write the cells which are of type <I>type</I> for \nthe alpha value <I>alpha</I> to the sequence\npointed to by the output iterator <I>it</I>. Return past the end\nof the output sequence.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_get_alpha_shape_facets6OutputIterator_it+_Classification_type_type+_const_NT__alpha=_get_alpha699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.get_alpha_shape_facets ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    OutputIterator it,<BR>\n\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A> type,<BR>\n\nNT alpha= get_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Write the facets which are of type <I>type</I> for \nthe alpha value <I>alpha</I> to the sequence\npointed to by the output iterator <I>it</I>. Return past the end\nof the output sequence.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_get_alpha_shape_edges6OutputIterator_it+_Classification_type_type+_const_NT__alpha_=_get_alpha699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.get_alpha_shape_edges ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    OutputIterator it,<BR>\n\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A> type,<BR>\n\nNT alpha = get_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Write the edges which are of type <I>type</I> for \nthe alpha value <I>alpha</I> to the sequence\npointed to by the output iterator <I>it</I>. Return past the end\nof the output sequence.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_get_alpha_shape_vertices6OutputIterator_it+_Classification_type_type+_const_NT__alphaget_alpha699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.get_alpha_shape_vertices ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    OutputIterator it,<BR>\n\n<A HREF=\"Class_Alpha_shape_3#Enum_Classification_type\">Classification_type</A> type,<BR>\n\nNT alphaget_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    )\n        </TD></TR>\n        </TABLE>\n \nWrite the vertices which are of type <I>type</I> for \nthe alpha value <I>alpha</I> to the sequence\npointed to by the output iterator <I>it</I>. Return past the end\nof the output sequence.\n<P>\n\n<H3>Traversal of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-Values</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_begin69_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.alpha_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator that allows to traverse the\nsorted sequence of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-values of the family of alpha shapes.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_end69_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.alpha_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the corresponding past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_find6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_find (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to an element with <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\n<I>alpha</I>, or the corresponding past-the-end iterator if such \nan element is not found.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_lower_bound6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_lower_bound (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to the first element with\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value not less than <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_upper_bound6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_upper_bound (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to the first element with <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\ngreater than <I>alpha</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_solid_components6const_FT__alpha_=_get_alpha699_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.number_of_solid_components (  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of solid components of <I>A</I>, that is, the number of\ncomponents of its \nregularized version.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_find_optimal_alpha6int_nb_components9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.find_optimal_alpha ( int nb_components)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to smallest <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> value\nsuch that <I>A</I> satisfies the following two properties:<BR>\n\nall data points are either on the boundary or in the interior \nof the regularized version of <I>A</I>.<BR>\n\nThe number of solid component of <I>A</I>  is  equal to or\nsmaller than <I>nb_components</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>I/O</H3>\n<P>\n\nThe I/O operators are defined for <I>iostream</I>, and for\nthe window stream provided by C<SMALL>GAL</SMALL>. The format for the iostream\nis an internal format.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/io.h\">CGAL/IO/io.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  A<A NAME=\"Function_ostream__operator666ostream__os+_const_Alpha_shape_36Dt9__A9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the alpha shape <I>A</I> for the current alpha value into the stream <I>os</I>.<BR>\n\n<EM>Precondition: </EM>The insert operator must be defined for <I>Point</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Geomview_stream.h\">CGAL/IO/Geomview_stream.h</A>&gt;</I>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/alpha_shape_geomview_ostream_3.h\">CGAL/IO/alpha_shape_geomview_ostream_3.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Geomview_ref/Class_Geomview_stream.html#Cross_link_anchor_1760\">Geomview_stream</A>&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     <A HREF=\"../Geomview_ref/Class_Geomview_stream.html#Cross_link_anchor_1760\">Geomview_stream</A>&amp; W &lt;&lt;  A<A NAME=\"Function_Geomview_stream__operator666Geomview_stream__W+_const_Alpha_shape_36Dt9__A9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the alpha shape <I>A</I> for the current alpha value into the Geomview stream <I>W</I>.<BR>\n\n<EM>Precondition: </EM>The insert operator must be defined for <I>Point</I> and <I>Triangle</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nIn <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">GENERAL</A> mode, the alpha  intervals of each triangulation\nface is computed and stored at initialization time.\nIn <A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A> mode, the alpha shape intervals of edges\nare not stored nor computed at initialization.\nEdges are simply classified on the fly upon request.\nThis allows to have much faster building of alpha shapes in\n<A HREF=\"Class_Alpha_shape_3#Enum_Mode\">REGULARIZED</A> mode.\n<P>\n\n<I>A.alpha find</I> uses linear search, while \n<I>A.alpha lower bound</I> and <I>A.alpha upper bound</I> \nuse binary search.\n<I>A.number of solid components</I> performs a graph traversal and takes time\nlinear in the number of cells of the underlying triangulation.\n<I>A.find of optimal alpha</I> uses binary search and takes time\n<MATH><I>O(</I></MATH> <I>n </I><MATH><I> </I></MATH>log<MATH><I></I></MATH> <I>n </I><MATH><I> )</I></MATH>, where  <MATH><I>n</I></MATH> is the number of points.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Alpha_shape_cell_base_3.html\"><I>Alpha_shape_cell_base_3&lt;Traits,Fb&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_42!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39936.0}