{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Range tree d Data Window Traits Types Range tree d Data Window Traits Data container Data Range tree d Data Window Traits Window container Window Range tree d Data Window Traits Traits container Traits Creation include CGAL Range tree d h Range tree d Data Window Traits r Tree base Data Window sublayer tree A range tree is constructed such that the subtree of each vertex is of the same type prototype sublayer tree is We assume that the dimension of the tree is d This means that sublayer tree is a prototype of a d 1 dimensional tree All data items of the d dimensional range tree have container type Data The query window of the tree has container type Window Traits provides access to the corresponding data slots of container Data and Window for the d th dimension The traits class Traits must at least provide all functions and type definitions as described in for example the reference page for tree point traits The template class described there is fully generic and should fulfill the most requirements one can have In order to generate a one dimensional range tree instantiate Tree anchor Data Window sublayer tree with the same template parameters Data and Window Range tree d is defined In order to construct a two dimensional range tree create Range tree d with a one dimensional Range tree d with the corresponding Traits class of the first dimension Precondition Traits Data Data and Traits Window Window Operations template class ForwardIterator bool r make tree ForwardIterator first ForwardIterator last The tree is constructed according to the data items in the sequence between the element pointed by iterator first and iterator last The data items of the iterator must have type Data Precondition This function can only be called once If it is the first call the tree is build and true is returned Otherwise nothing is done but a CGAL warning is given and false returned template class OutputIterator OutputIterator r window query Window win OutputIterator result All elements that lay inside the d dimensional interval defined through win are placed in the sequence container of OutputIterator the output iterator that points to the last location the function wrote to is returned bool r is valid The tree structure is checked For each vertex the subtree is checked on being valid and it is checked whether the value of the Key type of a vertex corresponds to the highest Key type value of the left subtree Protected Operations bool r is inside Window win Data object returns true if the data of object lies between the start and endpoint of interval win False otherwise bool r is anchor returns false ImplementationThe construction of a d dimensional range tree takes O nlognd 1 time The points in the query window are reported in time O k logd n where k is the number of reported points The tree uses O nlognd 1 storage Next Range tree k Traits Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/SearchStructures_ref/Class_Range_tree_d.html", "title": "range_tree_d&lt;data, window, traits&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './SearchStructures_ref/Range_tree_d.tex' -->\n<html> <head>  \n<title>Range_tree_d&lt;Data, Window, Traits&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1254\"></A>\n\n<A NAME=\"Cross_link_anchor_1255\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1325\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Range_tree_d<Data, Window, Traits>\"></A>\n<h2><I>CGAL::Range_tree_d&lt;Data, Window, Traits&gt;</I></h2>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A>&lt;Data, Window, Traits&gt;::Data\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    container <I>Data</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A>&lt;Data, Window, Traits&gt;::Window\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    container <I>Window</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A>&lt;Data, Window, Traits&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    container <I>Traits</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Range_tree_d.h\">CGAL/Range_tree_d.h</A>&gt;</I>\n<P>\n\n<BR>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A>&lt;Data, Window, Traits&gt; r ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Tree_base&lt;Data, Window&gt; sublayer_tree);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A range tree is\n  constructed, such that the subtree of each vertex is of the\n  same type prototype\n<I>sublayer_tree</I> is.<BR>\n\nWe assume that the dimension of the tree is <MATH><I>d</I></MATH>. This means, that\n<I> sublayer_tree</I> is a  prototype of a <MATH><I>d-1</I></MATH>-dimensional\ntree. All data items of the <MATH><I>d</I></MATH>-dimensional range tree\n  have container type <I>Data</I>. The query window of the\n  tree has container type\n  <I>Window</I>. <I>Traits</I>\n provides access to the corresponding data slots of container\n <I>Data</I> and  <I>Window</I> for the <MATH><I>d</I></MATH>-th\n dimension. The traits  class <I>Traits</I>\n must at least provide all functions and type definitions\n as described in, for example, the reference page for\n <I><A HREF=\"Class_tree_point_traits.html#Cross_link_anchor_1274\">tree_point_traits</A></I>.\nThe template class\n described there is fully generic and should fulfill the most\n requirements one can have.\nIn order\n  to generate a one-dimensional range tree instantiate <I><A HREF=\"Class_Tree_anchor.html#Cross_link_anchor_1276\">Tree_anchor</A>&lt;Data, Window&gt; sublayer_tree</I> with the same template parameters (<I>Data</I> and\n  <I>Window</I>) <I><A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A></I> is defined. In\n  order to construct a two-dimensional range tree, create\n  <I><A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A></I> with\n   a one-dimensional <I><A HREF=\"Class_Range_tree_d.html#Cross_link_anchor_1255\">Range_tree_d</A></I> with the\n  corresponding <I>Traits</I> class of the first dimension.<BR>\n\n<I>Precondition: Traits::Data==Data and     Traits::Window==Window.</I>\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class ForwardIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_make_tree6ForwardIterator_first+_ForwardIterator_last9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    r.make_tree ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator first,<BR>\n\nForwardIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The tree is constructed according to the data items in the\n  sequence between the element pointed by iterator <I>first</I> and\n  iterator <I>last</I>. The data items of the iterator must\n  have type <I>Data</I>.\n        </TD></TR>\n        </TABLE><BR>\n\n<EM>Precondition: </EM>This function can only be called once. If it is the\nfirst call the tree is build and <I>true</I> is\nreturned. Otherwise, nothing is done but a <I>CGAL warning</I>\nis given and <I>false</I> returned.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_window_query6Window_win+_OutputIterator_result9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    r.window_query ( Window win,  OutputIterator result)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    All elements that\n  lay inside the  <MATH><I>d</I></MATH>-dimensional interval defined through\n<I>win</I> are placed in the sequence container of\n <I>OutputIterator</I>; the output iterator that points\nto the last location the function wrote to is returned.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    r.is_valid ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The tree structure is checked. For each\n  vertex the subtree is checked on being valid and it is checked\n  whether the value of the <I>Key_type</I> of a vertex\n  corresponds to the highest <I>Key_type</I>\n  value of the left subtree.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<B>Protected Operations</B>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_inside6Window_win+_Data_object9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    r.is_inside ( Window win,  Data object)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true, if the\n  data of <I>object</I> lies between the start and endpoint of\n  interval <I>win</I>. False otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_anchor69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    r.is_anchor ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns false.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>The construction of a <MATH><I>d</I></MATH>-dimensional range tree takes <MATH><I>O(n</I></MATH>log<MATH><I>n<SUP>d-1</SUP>)</I></MATH>\ntime.  The points in\nthe query window are reported in time <MATH><I>O(k+</I></MATH>log<MATH><I><SUP>d</SUP> n )</I></MATH>, where <MATH><I>k</I></MATH>\nis the number of reported points.\nThe tree uses <MATH><I>O(n</I></MATH>log<MATH><I>n<SUP>d-1</SUP>)</I></MATH> storage.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Range_tree_k.html\"><I>Range_tree_k&lt;Traits&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_60!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39529.0}