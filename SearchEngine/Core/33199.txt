{"text": "Program Learning to Use Eclipse Course Libraries JUnit and Checkmate Fundamental Data Structures ICS 23 NOT GRADED Introduction This programming assignment is designed to ensure that you know how to use at least in a cookbook way Eclipse for editing running and debugging Java programs after installing course libraries Jar files JUnit and Driver programs for testing and locating errors and Checkmate for submitting programs for grading You will start this programming assignment similarly to others this quarter First you will download and unzip an Eclipse Start Project Folder Second you will start Eclipse create a Java project using a downloaded project folder as the existing source and then install three Jar libraries files for use in the programming assignment Third you will use a Driver program and JUnit to test code that I have provided in the start project folder For all later assignments I will not be providing as much code as I do in this assignment because the focus of this assignment is using tools not writing code the focus of the later assignments is writing code using the tools that you are learning in this assignment There is actually just one error in this code and this write up will detail where it is and how to fix it Fourth when you have fixed the program you will submit its java file using the Checkmate submission system I encourage you to work on this assignment in pairs with someone in your lab section This quarter you can work in pairs on all the programming assignments Normally when you work in a pair only one student should submit the assignment which should contain both students names appearing in the comments at the top of each submitted java file But for this assignment I want each student to submit the program using the Checkmate submission system so I ll know that every student knows how to use it You may want to print this document and carefully read it marking any parts that contain important information for review before you turn in the file you might want to save the copy you marked up This is the first quarter that I am using this document so please report any problems even just typos to me I expect you to read this entire document and perform the operations it describes Download and Unzip Download onto your desktop and unzip the following Eclipse Start Project Folder If you have any problems ask one of the staff for help Information about unzipping on labs machines is available via the Handouts General link on the webpage there click the Windows Operating System and Eclipse IDE link Or see the Unzipping Files link in the Tutorial on the Windows Operating System and Eclipse IDE This document includes lots of useful information about using Windows Eclipse and Checkmate The resulting unzipped folder has a deeply nested folder via the folders edu uci ics pattis ics23 and finally collections that contains just the two files LinearArrayQueue java and TestQueue java These files will both be discussed in detail later in this assignment Start Eclipse Create a Project and Install the Libraries Next you need to start Eclipse and create a Java project using the project folder you just downloaded as the existing source See the Start Stop and Existing Sources links in the Tutorial on the Windows Operating System and Eclipse IDE For uniformity use the name Program for your project s name The project file that you create will show syntax compilation errors until you correctly install the Jar libraries files discussed below For this programming assignment and most of the others this quarter you need to install the libraries contained in the introlib jar junit4 7 jar and collections jar files Information about installing Jar libraries is available via the Online Resources link in the left hand index of the course webpage there click the View Using Jar Libraries in Eclipse link Or read this entire document by clicking Using Jar Libraries in Eclipse Read the document just mentioned It shows you how to install these three libraries correctly Two introlib jar and junit 4 7 jar must be installed using one method the other collections jar must be installed using another method In the material below I will assume that you have successfully installed all three of these libraries correctly so do it now The LinearArrayQueue java filein this project contains almost correct code that implements the behavior of a queue You will be implementing lots of abstract data types like this one during the quarter A queue is a simple FIFO data type adhering to the First in First out order property Queues add values to their rear and remove values from their front so these are the two hot spots that must be efficiently accessed in any data structures that implements a queue We can implement queues efficiently by using either an array or linked list data structure The queue implementation in this programming assignment LinearArrayQueue declares the required instance variables and needed methods using an array data structure Using a linear array is conceptually simple to understand and program but it has a slower than necessary remove operation when compared with using a circular array data structure which we will discuss later in lecture When all the necessary libraries are installed this class compiles and runs but results in a few execution run time errors which we will see via the Driver and the JUnit tests discussed below Run the Driver Each data type that we will discuss this quarter has a driver program that allows us to drive it to call test each of its methods and observe the results The Driver for queues is in the class named DriverForOrderedCollection which is the collections library To run this Driver program we must first find it Click the in front of project s name the icon named Program the should change to a with two icons indented underneath it Click the in front of icon named ReferencedLibraries the should change to a with one icon indented underneath it Click the in front of the icon named collecitons jar the should change to a with two icons indented underneath it Click the in front of the icon named edu uci ics pattis ics23 collections the should change to a with many icons indented underneath it Right click the icon and or name DriverForOrderCollection class hover over Run As and click Java Application The result of these commands is illustrated below The program should now start running in the Console tab at the bottom of Eclipse Answer the first prompt by just pressing the Enter Return key it has the same effect as if you typed the default value that appears in the parentheses then answer the second prompt by typing the number in brackets that precede LinearArrayQueue which should be option 4 The console window will display the following menu of options that you can use to call test each queue method Note that this Driver tests a queue that stores String values You must enter a single letter to test any Mutator Command or Accessor Query method Of special note is the t command which test the toString method by printing the value it returns It prints a String that starts with the name of the class here LinearArrayQueue and its interesting state in brackets First it always shows two numbers separated by a slash the first is the number of values in the size of the queue the second is the length of the array storing the queue which should always be at least as big as the size If the size of the queue isn t zero the toString method shows that many indexes in the array illustrating the index and value of each Then testing this queue implementation the user can call toString to observe the effect of calling a mutator Issue the t command and the Driver should print the following which describes a queue implemented by this class It currently stores values in an array whose length is 1 the array currently has the capacity to store just one value Then issue the s e and p commands to query the state of the object The Driver should print the following The peek command which returns the first value the Driver prints this value in a queue cannot work correctly on an empty queue Notice what is printed instead the thrown exception NoSuchElementException and the sequence of calls that led to it being thrown if you click on the link to LinearArrayQueue java 1 6 Eclipse will load the file containing this class and highlight the line that threw the exception Thus the Driver just ignores this command and we can continue driving the LinearArrayQueue class Next issue the a command and add enqueue test1 when prompted This method returns whether or not the entered value was added to the queue for queues which can contain duplicate values it always returns true for sets which cannot contain duplicate values this method returns false if the added value is already in the set Then issue the t command and note the result toString LinearArrayQueue 1 1 test1 which describes a queue implemented by this class currently storing 1 values in an array whose length is 1 the index stores that value test1 Next issue the a command again and add enqueue test2 when prompted Then issue the t command and note the result toString LinearArrayQueue 2 2 test1 1 test2 which describes a queue implemented by this class currently storing 2 values in an array whose length is 2 the length of the array storing the queue was automatically doubled in size to accommodate another value the index stores that value test1 and the index 1 stores that value test2 Order is important in queues the earlier a value is added enqueued the earlier it appears in the array Next issue the r command which should remove dequeue the value at the front of the queue It correctly prints remove test1 But then issue the t command and note the result is still toString LinearArrayQueue 2 2 test2 1 test2 This result is incorrect because test2 now appears in BOTH array locations it was shifted one to the left but still appears at the end of the array In fact if you issue the r command again it prints remove test2 and likewise the t command will still print both test2 values in the queue If you issue the x command which is void and returns and the Driver prints no result the queue will be emptied notice that the t command will print toString LinearArrayQueue 2 which now describes a queue implemented by this class currently storing values in an array whose length is 2 the length of the array is not reduced So using this Driver we can call test all the methods in the LinearArrayQueue class looking for incorrect behavior Often we call the toString method to determine the effect of a mutator operation so it is critical to implement the toString method correctly When we learn how to use the Debugger we will also see how to add breakpoints to our methods and step through them while observing how they change the state of objects to help us debug any errors that we find Using the Driver with the Debugger is illustrated in a later section of this document For now continue to explore the other commands in this Driver and DO NOT fix the error in remove If you ever find your program in an infinite loop you can terminate the program manually by clicking the Red Square on the top of the console window the leftmost icon Then you can click the Xx icon two to the right of the Red Square to clear out the console You can try out these commands by adding a value into the queue and then issuing the f command it repeatedly removes values from the queue printing each value that it removes until the queue is empty called flushing the queue But because of the error in the remove method this action results in an infinite loop because no values are correctly removed so the queue never becomes empty So click the Red Square and Xx to reset the code To rerun the Driver click the white right pointing triangle in the green circle at the top of the main big window under and in between the Search and Project menus Finally if you want to see the code for the DriverForOrderedCollection classes double click the icon named DriverForOrderCollection class Eclipse will put this code in a Read Only editor window because this code comes from a library you cannot change If you want to see the code for the LinearArrayQueue classes click the in front of the icon named edu uci ics pattis ics23 collection the one right under Program and then double click the icon named LinearArrayQueue java which you can examine and change in an editor window Run the JUnit Test Each data type that we will discuss this quarter also has a JUnit test While a Driver for a class is Java code that allows us to manually test it a JUnit test for a class is Java code that automatically tests the class It produces graphical output to show clearly which tests passed and which tests failed and for the failed tests it produces more detailed information about how the test failed When the code is corrected it is very easy to rerun automatically all the tests and observe the changes hopefully more all test are passed now To run a JUnit test program we must first find it But first click the in front of Referenced Libraries the should change to a and all the icons underneath it should be elided Click the in front of project s name the icon named Program the should change to a and three icons should appear indented underneath Program Click the in front of the icon named edu uci ics pattis ics collections the should change to a and two icons should appear indented underneath Program Right click the icon and or name TestQueue java hover over Run As and click JUnit Test The result of these commands is illustrated below You can examine the code in this class by double clicking the icon and or name TestQueue java Each interface has its own JUnit test reflecting the semantics meaning of what the methods in a class implementing the interface do It is good to be able to read and understand this code and you will get more experience doing so during the quarter because it can be useful to add debugging code to it typically printing the state of variables at the time a test assertion failed Mostly JUnit code intersperses calls to the methods of the class being tested with assertions about what the results of those method calls should be a test method fails when any assertions in it fail If you have not already done so follow the instructions described above to start running the JUnit test in the Console tab at the bottom of Eclipse Answer the first prompt by just pressing the Enter Return key it is as if you typed the default value that appears in the parentheses then answer the second prompt by typing the number in brackets that precede LinearArrayQueue which should be option 2 finally answer the last prompt by also just pressing the Enter Return key it is as if you typed the default value that appears in the parentheses A tab labelled JUnit will obscure the tab labelled Package Explorer in the leftmost window in Eclipse In fact the JUnit tab will split in half with the bottom pane labelled Failure Trace The large scale speed tests take some time to complete but even so very quickly all the tests will appear some marked with a green check passed and some marked with a Blue S failed The green progress bar changes to red because not all tests were passed above the progress bar it shows 14 tests run and 7 tests failed we ll discuss the test errors below errors and failures are indicate two different problems with the code being tested The result of running the JUnit test is illustrated below It is possible that incorrect code will result in an infinite loop in a JUnit test you will see that test as active with the tests after it neither marked Green nor Blue In such a case you would have to manually stop the program as described above clicking the Red Square in the Console window In the graphic above the Red Square is greyed out because the JUnit test has already terminated You have a choice of either commenting out the Test annotation at the beginning of the problematic test so JUnit won t run this test or keeping the test and immediately debugging the code that is causing it to loop infinitely If you choose the former remember to reactivate the test eventually To investigate a failed test further we can click on any of the test names labelled with the Blue X for now click on remove second from the bottom By doing so information appears in the bottom pane explaining the failure in more detail To read this information you will probably need to widen the leftmost window containing the JUnit tab The first line in the Failure Trace pane tells us that there was a problem regarding the length of the arrays the actual length of the array representing the queue was 5 when it should have been 4 Double clicking the next line in the Failure Trace pane shows us the line in the TestQueue program that discovered the problem the failed assertion is on line 1 9 there were originally 5 values in the queue but after executing the remove method on this line there should be 4 This relates to the same problem discovered in the Driver the remove method does not actually remove the value from the queue so instead of a correct size of 4 it is one bigger To see this problem more clearly put the statement System out println When testing testing Queue before move is q right before the first assertEquals in the testRemove method the one that is succeeding and put a similar statement right after that assertEquals before the assertArrayEquals that is failing Run the JUnit test and notice that this code executes a few times but the queues are always the same before and after calling q remove That is why the asserArrayEquals fails By placing output statements in a JUnit test we can more closely examine information about the state of the queue that is failing the test In fact all the test failures relate to this single bug remember that sometimes fixing one bug will cause many failed tests to pass As stated above this bug is in the remove method in the LinearArrayQueue class see lines 82 83 Restore the code objectCount uncomment it to fix the error Then rerun this JUnit test Again you will see all the tests as they execute with the large scale tests taking a bit longer than the others Because now all tests pass instead of showing all the individual test JUnit shows just one icon for the entire test labelled edu uci ics pattis ics23 collections TestQueue We can click the in front of its icon to disclose the individual tests Notice also that at the top of the JUnit tab a green progress bar lengthens as each new test is performed and spans the entire window when all tests are completed It ultimately displays Runs 14 14 meaning it has completed all fourteen of the fourteen tests It also displays Errors and Failures in JUnit Errors are distinct from Failures An error occurs when the testing code throws an exception unexpectedly and cannot finish A failure occurs when some assertion is not met the Failure Trace pane shows the first failure and only the first failure in each test Both errors and failures indicate that the code is incorrect and should be fixed Of course we must be careful because it is possible that an assertion is incorrect e g an assertion asserts the size of the queue is some number but based on the add remove methods called in the JUnit test it should be some other number While you should mostly believe the JUnit tests I distribute there is always the possibility that I have made a mistake If you look closely at a JUnit test and don t understand why some failing assertion should be true please contact me to resolve the problem It is possible to redo just one test A scenario in which this option is useful is when a few tests are failing but it takes a long time to pass other tests which JUnit runs first In such a case we might want to bypass the long tests and concentrate on just the one test that is failing To do so ensure that the icon labelled edu uci ics pattis ics23 collections TestQueue is disclosed and then right click one test and select Run JUnit will run just that one test Again remember that if you comment out the Test annotation at the beginning of any test method JUnit won t run this test This is another way to avoid running long tests that the code is currently passing But remember to uncomment such test methods for a final test of your code before submitting it Debug the Code in the Driver In this section we will examine how to use the Eclipse Debugger along with the Driver program to explore the code that implements the LinearArrayQueue class In actual assignments when you write classes that may contain bugs the skills illustrated here will be very useful for locating and correcting errors First read and follow the directions in the Debugger Tutorial to learn about the Debugger Specifically you should learn how to set breakpoints how to single step over execute lines of code and how to observe the values of variables Becoming familiar with the Debugger now will help you immeasurably later in the quarter for every hour you play with the Debugger now I estimate you will save 3 hours later in the during the quarter by being able to use the Debugger skillfully to correct your code After you have read the Debugger Tutorial perform the actions below Run the DriverForOrderedCollection program not the JUnit test as described above Immediately stop this program and clear the Console click the Red Square and Xx buttons Then start the Debugger perspective click Debug and rerun this program in the Debugger click the green bug icon Set unconditional breakpoints on the first line of code in the add and remove methods lines 64 and 76 respectively Start running the program by clicking the right pointing green arrow after the Debug tab in the upper left window On some machnines Eclipse will display a tab URL ClassLoader class with the line throw new ClassNotFoundException name highlighted in green If your machine displays this tab follow the directions below if not skip this next section down to where it says You will be prompted in the console window Click in Breakpoints tab in the upper rightmost window there click the box that shows a check before the classNotFoundException caught and uncaught and the check should disappear Then click the right pointing green arrow to the right of the Debug tab in the upper left window again You will be prompted in the console window for the basic information needed to start the Driver Issue the a command and the String test1 At that point the Debugger should stop at line 64 highlighted by a green line this line is about to be executed If we disclose the this variable in the Variables tab it should display the following information Notice that the modCount and objectCount instance variables are both the one element in the q array stores null refernce to no String Notice also that the parameter variable e refers to the String test1 Now step over execute each of the statements in this method watching how each statement changes the instance variables in the disclosed this When the last line return statement is about to be executed the Variables tab should display the following information At this point click the right pointing green arrow again and issue the a command and the String test2 Now step over execute each of the statements in this method watching how each statement changes the instance variables in the disclosed this When the last line return statement is about to be executed the the Variables tab should display the following information Note the new values for modCount objectCount and q whose length has been doubled to 2 At this point click the right pointing green arrow again and issue the r command The Debugger should stop at line 76 highlighted by a green line this line is about to be executed The Variables tab it should display the following information Now step over execute each of the statements in this method watching how each statement changes the instance variables in the disclosed this When the last line return statement is about to be executed the the Variables tab should display the following information Note that the answer to be returned is test1 Although test2 is stored queue and queue 1 the fact that objectCount stores 1 indicates queue currently stores only one value that will ever be examined We could have put the line q objectCount 1 null directly after the for loop to store null into q 1 but as in the clear method we have chosen to omit this unnecessary code In summary it is important to know how to use the basics of the Debugger to set breakpoints to single step over execute code and to observe the values of variables possible using disclosure to see inside an object When we used the Debugger with the Driver program we can carefully watch how our code works or more importantly watch how it fails to work to be able to debug it Submit the Program for Grading via Checkmate After you have fixed the code and verified that it works correctly via the Driver and the JUnit tester you should practice submitting the code for grading via Checkmate Remember that although this assignment is not graded you should submit it so that I will know that you know how to submit code correctly Information about using Checkmate is available via the Handouts General link on the webpage there click the Windows Operating System and Eclipse IDE link Or see the Submitting Work link at the bottom of the Tutorial on the Windows Operating System and Eclipse IDE Final Words Finally after you are done submitting your code you should backup save the entire project on a USB device even if you are using your own computer you should still backup your work Probably it is best to zip the project folder first which makes it smaller and also speeds up copying which depends as much on how many files you copy as on the size of the files If you are on a lab machine you can also backup save this folder on your Unix file space Information about using your Unix storage is available via the Handouts General link on the webpage there click the Windows Operating System and Eclipse IDE link Or see the File Storage link in the Tutorial on the Windows Operating System and Eclipse IDE Practice doing everything in this lab over and again until you are familiar with all these skills and can do them without reading the directions You will save yourself much time during the quarter when time is really important if you spend some time now when things aren t so rushed mastering the material in the programming assignment ", "_id": "http://www.ics.uci.edu/~pattis/ICS-23/assignments/program0/program.html", "title": "program 0", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 0</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 0</h1>\r\n<h1>Learning to Use Eclipse, Course Libraries, JUnit, and Checkmate</h1>\r\n<p>\r\n<h2>Fundamental Data Structures<br>\r\nICS-23<br>\r\n<font color=\"#BB0000\">(NOT GRADED)</font>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis \"programming assignment\" is designed to ensure that you know how to\r\n  use -at least in a cookbook way-\r\n  <b>Eclipse</b> (for editing, running, and debugging Java programs, after\r\n    installing course libraries/Jar files),\r\n <b>JUnit</b> (and Driver programs, for testing and locating errors), and \r\n <b>Checkmate</b> for submitting programs for grading.\r\n<p>\r\nYou will start this programming assignment similarly to others this quarter.\r\n<ul>\r\n<li>First you will download and unzip an Eclipse Start Project Folder.\r\n<p>\r\n<li>Second, you will start Eclipse, create a Java project (using a\r\n      downloaded project folder, as the existing source) and then install\r\n      three Jar libraries/files for use in the programming assignment.\r\n<p>\r\n<li>Third, you will use a Driver program and JUnit to test code that I\r\n      have provided in the start project folder.\r\n    For all later assignments, I will not be providing as much code as I do in\r\n      this assignment, because the focus of this assignment is using tools,\r\n      not writing code; the focus of the later assignments is writing code\r\n      using the tools that you are learning in this assignment.\r\n    There is actually just one error in this code, and this write-up will\r\n      detail where it is and how to fix it.\r\n<p>\r\n<li>Fourth, when you have fixed the program, you will submit its <b>.java</b>\r\n      file using the Checkmate submission system.\r\n</ul>\r\nI encourage you to work on this assignment in pairs, with someone in\r\n  your lab section.\r\nThis quarter you can work in pairs on all the programming assignments.\r\nNormally, when you work in a pair, <b>only one student should submit the\r\n  assignment</b>, which should contain both students' names appearing in the\r\n  comments at the top of each submitted <b>.java</b> file.\r\nBut for this assignment, I want each student to submit the program using\r\n  the Checkmate submission system, so I'll know that every student knows how\r\n  to use it.\r\n<p>\r\nYou may want to print this document and carefully read it, marking any parts\r\n  that contain important information (for review before you turn in the file);\r\n  you might want to save the copy you marked-up.\r\nThis is the first quarter that I am using this document, so please report any\r\n  problems (even just typos) to me.\r\nI expect you to read this entire document and perform the operations it\r\n  describes.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Download/Unzip -->\r\n\r\n<a name=\"download\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Download and Unzip</b></td>\r\n<td width =\"80%\">\r\nDownload (onto your desktop) and unzip the following \r\n  <a href=\"program0start.zip\">Eclipse Start Project Folder</a>.\r\nIf you have any problems ask one of the staff for help.\r\nInformation about unzipping on labs machines is available\r\n  via the <b>Handouts (General)</b> link on the webpage;\r\n  there, click the <b>Windows/ Operating System and \r\n  Eclipse IDE</b> link.\r\nOr, see the <b>Unzipping Files</b> link in the\r\n  <a href=\"../../../common/handouts/OS+IDE/index.html\", target=\"_blank\">\r\n    Tutorial on the Windows Operating System and Eclipse IDE</a>.\r\nThis document includes lots of useful information about using Windows,\r\n  Eclipse, and Checkmate.\r\n<p>\r\nThe resulting unzipped folder has a deeply nested folder (via the folders\r\n  <b>edu</b>, <b>uci</b>, <b>ics</b>, <b>pattis</b>, <b>ics23</b>,\r\n  and finally <b>collections</b>) that contains just the two files\r\n  <b>LinearArrayQueue.java</b> and <b>TestQueue.java</b>.\r\nThese files will both be discussed in detail later in this assignment.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Start Eclipse, Create a Project, Install Libraries -->\r\n\r\n<a name=\"eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Start Eclipse,<br>\r\n                    Create a Project, and<br>\r\n                    Install the Libraries</b></td>\r\n<td width =\"80%\">\r\nNext you need to start Eclipse and create a Java project using the\r\n   project folder you just downloaded as the existing source.\r\nSee the <b>Start/Stop</b> and <b>Existing Sources</b> links in the\r\n  <a href=\"../../../common/handouts/OS+IDE/index.html\", target=\"_blank\">\r\n    Tutorial on the Windows Operating System and Eclipse IDE</a>.\r\nFor uniformity, use the name <b>Program0</b> for your project's name.\r\nThe project file that you create will show syntax/compilation errors, until\r\n  you correctly install the Jar libraries/files, discussed below.\r\n<p>\r\nFor this programming assignment (and most of the others this\r\n  quarter), you need to install the libraries contained in the\r\n  <b>introlib.jar</b>, <b>junit4-7.jar</b>, and <b>collections.jar</b> files.\r\nInformation about installing Jar libraries is available\r\n  via the <b>Online Resources</b> link in the left-hand index of the\r\n  course webpage; there,\r\n  click the <b>View: Using Jar Libraries in Eclipse</b> link.\r\nOr, read this entire document by clicking\r\n  <a href=\"../../../common/handouts/librariesineclipse.html\", target=\"_blank\">\r\n    Using Jar Libraries in Eclipse</a>.\r\n<p>\r\n<b>Read the document just mentioned.\r\n   It shows you how to install these three libraries correctly.\r\n   Two (introlib.jar and junit-4.7.jar) must be installed using one method;\r\n     the other (collections.jar) must be installed using another method.\r\n   In the material below, I will assume that you have successfully installed\r\n     all three of these libraries correctly, so do it now.</b>\r\n<p>\r\nThe <b>LinearArrayQueue.java</b> filein this project contains almost correct\r\n  code that implements the behavior of a queue.\r\nYou will be implementing lots of (abstract) data types, like this one, during\r\n  the quarter.\r\nA queue is a simple FIFO data type, adhering to the First-in First-out order\r\n  property.\r\nQueues add values to their rear and remove values from their front, so these\r\n  are the two \"hot spots\" that must be efficiently accessed in any data\r\n  structures that implements a queue.\r\n<p>\r\nWe can implement queues efficiently by using either an array or linked list\r\n  data structure.\r\nThe queue implementation in this programming assignment,\r\n  <b>LinearArrayQueue</b>, declares the required instance variables and needed\r\n  methods using an array data structure.\r\nUsing a linear array is conceptually simple to understand and program,\r\n  but it has a slower-than-necessary <b>remove</b> operation (when compared\r\n  with using a circular array data structure, which we will discuss later\r\n  in lecture).\r\nWhen all the necessary libraries are installed, this class compiles and runs,\r\n  but results in a few execution/run-time errors, which we will see via the\r\n  Driver and the JUnit tests discussed below.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Run Driver -->\r\n\r\n<a name=\"driver\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the Driver</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter has a \"driver\" program that\r\n  allows us to \"drive it\": to call (test) each of its methods and observe the\r\n  results.\r\nThe Driver for queues is in the class named <b>DriverForOrderedCollection</b>,\r\n  which is the <b>collections</b> library.\r\nTo run this Driver program, we must first find it:\r\n<ul>\r\n<li>Click the <b>+</b> in front of project's name, the icon named\r\n    <b>Program0</b>; the <b>+</b> should change to a <b>-</b> with two icons\r\n    indented underneath it.\r\n\r\n<p>\r\n<li>Click the <b>+</b> in front of icon named <b>ReferencedLibraries</b>; the\r\n    <b>+</b> should change to a <b>-</b> with one icon indented\r\n    underneath it.\r\n<p>\r\n<li>Click the <b>+</b> in front of the icon named <b>collecitons.jar</b>; the\r\n    <b>+</b> should change to a <b>-</b> with two icons indented\r\n    underneath it.\r\n<p>\r\n<li>Click the <b>+</b> in front of the icon named\r\n    <b>edu.uci.ics.pattis.ics23.collections</b>; the\r\n    <b>+</b> should change to a <b>-</b> with many icons indented\r\n    underneath it.\r\n<p>\r\n<li>Right-click the icon and/or name <b>DriverForOrderCollection.class</b>;\r\n    hover over <b>Run As</b> and click <b>Java Application</b>\r\n</ul>\r\nThe result of these commands is illustrated below.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriver.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThe program should now start running in the <b>Console</b> tab at the bottom\r\n  of Eclipse.\r\nAnswer the first prompt by just pressing the Enter/Return key (it has the same\r\n  effect as if you typed the default value that appears in the parentheses); \r\n  then answer the second prompt by typing the number in brackets that precede\r\n   <b>LinearArrayQueue</b> (which should be option <b>4</b>).\r\nThe console window will display the following menu of options that you can use\r\n  to call/test each queue method.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsole.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNote that this Driver tests a queue that stores <b>String</b> values.\r\nYou must enter a single letter to test any Mutator (Command) or Accessor\r\n  (Query) method.\r\nOf special note is the <b>t</b> command, which test the <b>toString</b> method\r\n  by printing the value it returns.\r\n<p>\r\nIt prints a <b>String</b> that starts with the name of the class (here\r\n  <b>LinearArrayQueue</b>) and its interesting state in brackets.\r\nFirst, it always shows two numbers separated by a slash: the first is the\r\n  number of values in (the <b>size</b> of) the queue; the second is the\r\n  <b>length</b> of the array storing the queue (which should always be at least\r\n  as big as  the size).\r\nIf the size of the queue isn't zero, the <b>toString</b> method shows that\r\n  many indexes in the array, illustrating the index and value of each.\r\nThen testing this queue implementation, the user can call <b>toString</b> to\r\n  observe the effect of calling a mutator.\r\n<p>\r\nIssue the <b>t</b> command and the Driver should print the following\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsoletoString.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nwhich describes a queue implemented\r\n  by this class.\r\nIt currently stores <b>0</b> values in an array whose length is <b>1</b> (the\r\n  array currently has the capacity to store just one value).\r\n<p>\r\nThen issue the <b>s</b>, <b>e</b>, and <b>p</b> commands to query the state of\r\n  the object.\r\nThe Driver should print the following\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsolesep.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThe <b>peek</b> command, which returns the first value (the Driver prints this\r\n  value) in a queue cannot work correctly on an empty queue.\r\nNotice what is printed instead: the thrown exception\r\n  (<b>NoSuchElementException</b>)\r\n  and the sequence of calls that led to it being thrown; if you click on the\r\n  link to <b>LinearArrayQueue.java:106</b> Eclipse will load the file\r\n  containing this class and highlight the line that threw the exception.\r\nThus, the Driver just ignores this command and we can continue driving the\r\n  <b>LinearArrayQueue</b> class.\r\n<p>\r\nNext issue the <b>a</b> command and add/enqueue <b>test1</b> when prompted.\r\nThis method returns whether or not the entered value was added to the queue\r\n  (for queues, which can contain duplicate values, it always returns\r\n  <b>true</b>; for sets, which cannot contain duplicate values, this method\r\n  returns <b>false</b> if the added value is already in the set).\r\nThen issue the <b>t</b> command and note the result:\r\n    <b>toString = LinearArrayQueue[1/1:[0]=test1]</b>\r\n  which describes a queue implemented by this class, currently storing\r\n   <b>1</b> values in an array whose length is <b>1</b>; the index <b>0</b>\r\n   stores that value: <b>test1</b>.\r\n<p>\r\nNext issue the <b>a</b> command again and add/enqueue <b>test2</b> when\r\n  prompted.\r\nThen issue the <b>t</b> command and note the result:\r\n    <b>toString = LinearArrayQueue[2/2:[0]=test1,[1]=test2]</b>\r\n  which describes a queue implemented by this class, currently storing\r\n   <b>2</b> values in an array whose length is <b>2</b> (the length of the\r\n   array storing the queue was automatically doubled in size to accommodate\r\n   another value); the index <b>0</b> stores that value <b>test1</b> and\r\n  the index <b>1</b> stores that value <b>test2</b>.\r\nOrder is important in queues: the earlier a value is added/enqueued, the\r\n  earlier it appears in the array.\r\n<p>\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsoleaat.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNext issue the <b>r</b> command which should remove/dequeue the value at the\r\n  front of the queue.\r\nIt correctly prints <b>remove = test1</b>.\r\nBut then issue the <b>t</b> command and note the result is still\r\n    <b>toString = LinearArrayQueue[2/2:[0]=test2,[1]=test2]</b>.\r\n<p>\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsolert.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThis result is <b>incorrect</b> because <b>test2</b> now appears in BOTH\r\n  array locations (it was shifted one to the left, but still appears at\r\n  the end of the array).\r\nIn fact, if you issue the <b>r</b> command again, it prints\r\n  <b>remove = test2</b> and likewise the <b>t</b> command will still\r\n  print both <b>test2</b> values in the queue.\r\nIf you issue the <b>x</b> command (which is <b>void</b> and returns -and the\r\n  Driver prints- no result), the queue will be emptied; notice that\r\n  the <b>t</b> command will print <b>toString = LinearArrayQueue[0/2:]</b>\r\n  which now describes a queue implemented by this class, currently storing\r\n   <b>0</b> values in an array whose length is <b>2</b> (the length of the\r\n   array is not reduced).\r\n<p>\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/rundriverconsolext.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nSo, using this Driver, we can call/test all the methods in the\r\n  <b>LinearArrayQueue</b> class, looking for incorrect behavior.\r\nOften we call the <b>toString</b> method to determine the effect of a\r\n  mutator operation, so it is critical to implement the <b>toString</b> method\r\n  correctly.\r\n<p>\r\nWhen we learn how to use the Debugger, we will also see how to add\r\n  breakpoints to our methods and step through them while observing how they\r\n  change the state of objects to help us debug any errors that we find.\r\nUsing the Driver with the Debugger is illustrated in a later section of this\r\n  document.\r\nFor now, continue to explore the other commands in this Driver, and\r\n  <b>DO NOT</b> fix the error in <b>remove</b>.\r\n<p>\r\nIf you ever find your program in an <b>infinite loop</b>, you can terminate the\r\n  program manually by clicking the Red Square on the top of the console\r\n  window (the leftmost icon).\r\nThen you can click the Xx icon (two to the right of the Red Square) to clear\r\n  out the console.\r\n<p>\r\nYou can try out these commands by adding a value into the queue and then\r\n  issuing the <b>f</b> command: it repeatedly removes values from the queue\r\n  (printing each value that it removes) until the queue is empty (called\r\n  \"flushing\" the queue).\r\nBut, because of the error in the <b>remove</b> method, this action results in\r\n  an infinite loop (because no values are correctly removed, so the queue never\r\n  becomes empty).\r\nSo click the Red Square and Xx to reset the code.\r\nTo rerun the Driver, click the white right-pointing triangle in the green\r\n  circle at the top of the main/big window (under and in between the \r\n  <b>Search</b> and <b>Project</b> menus).\r\n<p>\r\nFinally, if you want to see the code for the <b>DriverForOrderedCollection</b>\r\n  classes, double click the icon named <b>DriverForOrderCollection.class</b>.\r\nEclipse will put this code in a <b>Read-Only</b> editor window, because this\r\n  code comes from a library you cannot change.\r\nIf you want to see the code for the <b>LinearArrayQueue</b> classes,\r\n  click the <b>+</b> in front of the icon named\r\n  <b>edu.uci.ics.pattis.ics23.collection</b> (the one right under\r\n  <b>Program0</b> and then double-click the icon named\r\n  <b>LinearArrayQueue.java</b>, which you can examine and change in an editor\r\n  window.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Run JUnit Test -->\r\n\r\n<a name=\"junit\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the JUnit Test</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter also has a JUnit test.\r\nWhile a Driver for a class is Java code that allows us to manually test it,\r\n  a JUnit test for a class is Java code that automatically tests the class.\r\nIt produces graphical output to show clearly which tests passed and which\r\n  tests failed; and for the failed tests, it produces more detailed information\r\n  about how the test failed.\r\nWhen the code is corrected, it is very easy to rerun automatically all the\r\n  tests and observe the changes (hopefully more/all test are passed now).\r\n<p>\r\nTo run a JUnit test program, we must first find it:\r\nBut first, click the <b>-</b> in front of <b>Referenced Libraries</b>;\r\n  the <b>-</b> should change to a <b>+</b> and all the icons underneath it\r\n  should be elided.\r\n<ul>\r\n<li>Click the <b>+</b> in front of project's name, the icon named\r\n    <b>Program0</b>; the\r\n    <b>+</b> should change to a <b>-</b> and three icons should appear,\r\n    indented underneath <b>Program0</b>.\r\n<p>\r\n<li>Click the <b>+</b> in front of the icon named\r\n    <b>edu.uci.ics.pattis.ics.collections</b>; the\r\n    <b>+</b> should change to a <b>-</b> and two icons should appear,\r\n    indented underneath <b>Program0</b>.\r\n<p>\r\n<li>Right-click the icon and/or name <b>TestQueue.java</b>;\r\n    hover over <b>Run As</b> and click <b>JUnit Test</b>.\r\n</ul>\r\nThe result of these commands is illustrated below.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/runjunit.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nYou can examine the code in this class by double-clicking the icon and/or\r\n  name <b>TestQueue.java</b>.\r\nEach interface has its own JUnit test, reflecting the semantics (meaning) of\r\n  what the methods in a class implementing the interface do.\r\nIt is good to be able to read and understand this code (and you will get\r\n  more experience doing so during the quarter) because it can be useful to add\r\n  debugging code to it: typically printing the state of variables at the\r\n  time a test/assertion failed.\r\nMostly JUnit code intersperses calls to the methods of the class being\r\n  tested with assertions about what the results of those method-calls should\r\n  be: a test method fails when any assertions in it fail.\r\n<p>\r\nIf you have not already done so, follow the instructions described above to\r\n  start running the JUnit test in the <b>Console</b> tab at the bottom\r\n  of Eclipse.\r\nAnswer the first prompt by just pressing the Enter/Return key (it is as if you\r\n  typed the default value that appears in the parentheses); then answer the\r\n  second prompt by typing the number in brackets that precede\r\n  <b>LinearArrayQueue</b> (which should be option <b>2</b>);\r\n  finally, answer the last prompt by also just pressing the Enter/Return key\r\n  (it is as if you typed the default value that appears in the parentheses).\r\n<p>\r\nA tab labelled <b>JUnit</b> will obscure the tab labelled\r\n  <b>Package Explorer</b> in the leftmost window in Eclipse.\r\nIn fact, the JUnit tab will split in half, with the bottom pane labelled\r\n  <b>Failure Trace</b>.\r\nThe large scale speed tests take some time to complete, but even so, very\r\n  quickly all the tests will appear, some marked with a green check (passed)\r\n  and some marked with a Blue S (failed).\r\nThe green progress bar changes to red because not all tests were passed; above\r\n  the progress bar it shows <b>14</b> tests run and <b>7</b> tests failed\r\n  (we'll discuss the <b>0</b> test errors below: errors and failures are\r\n   indicate two different problems with the code being tested).\r\nThe result of running the JUnit test is illustrated below.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/runjunitresults.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nIt is possible that incorrect code will result in an infinite loop in a JUnit\r\n  test; you will see that test as active, with the tests after it neither\r\n  marked Green nor Blue.\r\nIn such a case, you would have to manually stop the program as described above\r\n  (clicking the Red Square in the Console window).\r\nIn the graphic above, the Red Square is greyed-out, because the JUnit test has\r\n  already terminated.\r\n<p>\r\nYou have a choice of either commenting out the <b>@Test</b> annotation at the\r\n  beginning of the problematic test (so JUnit won't run this test) or keeping\r\n  the test and immediately debugging the code that is causing it to loop\r\n  infinitely.\r\nIf you choose the former, remember to reactivate the test eventually.\r\n<p>\r\nTo investigate a failed test further, we can click on any of the test names\r\n  labelled with the Blue X; for now, click on <b>remove</b> (second from the\r\n  bottom).\r\nBy doing so, information appears in the bottom pane explaining the failure\r\n  in more detail.\r\nTo read this information, you will probably need to widen the leftmost\r\n  window, containing the <b>JUnit</b> tab.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/runjunitremove.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThe first line in the Failure Trace pane tells us that there was a problem\r\n  regarding the length of the arrays: the actual length of the array\r\n  representing the queue was <b>5</b> when it should have been <b>4</b>\r\nDouble clicking the next line in the Failure Trace pane shows us the line\r\n  in the <b>TestQueue</b> program that discovered the problem: the failed\r\n  assertion is on line 109.\r\n(there were originally <b>5</b> values in the queue, but after executing\r\n the <b>remove</b> method on this line there should be <b>4</b>).\r\nThis relates to the same problem discovered in the Driver: the <b>remove</b>\r\n  method does not actually remove the value from the queue, so instead of a\r\n  correct size of <b>4</b>, it is one bigger.\r\n<p>\r\nTo see this problem more clearly, put the statement\r\n<b><pre>   System.out.println(\"When testing \"+testing+\", Queue before move is \" + q);</pre></b>\r\n right before the first <b>assertEquals</b> in the <b>testRemove</b> method\r\n  (the one that is succeeding) and put a similar statement right after\r\n  that <b>assertEquals</b> -before the <b>assertArrayEquals</b> that is\r\n  failing.\r\nRun the JUnit test and notice that this code executes a few times, but\r\n  the queues are always the same before and after calling <b>q.remove()</b>.\r\nThat is why the <b>asserArrayEquals</b> fails.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/runjunitprintln.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nBy placing output statements in a JUnit test, we can more closely examine\r\n  information about the state of the queue that is failing the test.\r\n<p>\r\nIn fact, all the test failures relate to this single bug: remember that\r\n  sometimes fixing one bug will cause many failed tests to pass.\r\nAs stated above, this \"bug\" is in the <b>remove</b> method in the\r\n  <b>LinearArrayQueue</b> class (see lines 82-83).\r\nRestore the code <b>objectCount--</b> (uncomment it) to fix the error.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/runjunitfix.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThen rerun this JUnit test.\r\n\r\n<p>\r\nAgain you will see all the tests as they execute, with the\r\n  \"large scale\" tests taking a bit longer than the others.\r\nBecause now all tests pass, instead of showing all the individual\r\n  test, JUnit shows just one icon for the entire test (labelled\r\n  <b>edu.uci.ics.pattis.ics23.collections.TestQueue</b>).\r\nWe can click the <b>+</b> in front of its icon to disclose the\r\n  individual tests.\r\n<p>\r\nNotice also that at the top of the <b>JUnit</b> tab a green progress bar\r\n  lengthens as each new test is performed, and spans the entire window\r\n  when all tests are completed.\r\nIt ultimately displays <b>Runs 14/14</b>, meaning it has completed all\r\n  fourteen of the fourteen tests.\r\nIt also displays <b>0</b> Errors and <b>0</b> Failures; in JUnit\r\n  <b>Errors</b> are distinct from <b>Failures</b>.\r\n<ul>\r\n<li>An error occurs when the testing code throws an exception unexpectedly\r\n      and cannot finish.\r\n<p>\r\n<li>A failure occurs when some assertion is not met; the <b>Failure Trace</b>\r\n      pane shows the <b>first</b> failure (and only the first failure) in each\r\n      test.\r\n</ul>\r\nBoth errors and failures indicate that the code is incorrect and should be\r\n  fixed.\r\nOf course, we must be careful because it is possible that an assertion is\r\n  incorrect: e.g., an assertion asserts the size of the queue is some number\r\n  but based on the <b>add</b>/<b>remove</b> methods called in the JUnit test\r\n  it should be some other number.\r\nWhile you should mostly believe the JUnit tests I distribute, there is always\r\n  the possibility that I have made a mistake.\r\nIf you look closely at a JUnit test and don't understand why some failing\r\n  assertion should be true, please contact me to resolve the problem\r\n<p>\r\nIt is possible to redo just one test.\r\nA scenario in which this option is useful is when a few tests are failing, but\r\n  it takes a long time to pass other tests which JUnit runs first.\r\nIn such a case, we might want to bypass the long tests and concentrate on\r\n  just the one test that is failing.\r\nTo do so, ensure that the icon labelled\r\n  <b>edu.uci.ics.pattis.ics23.collections.TestQueue</b>) is disclosed and\r\n  then right-click one test and select <b>Run</b>.\r\nJUnit will run just that one test.\r\n<p>\r\nAgain remember that if you comment-out the <b>@Test</b> annotation at the\r\n  beginning of any test method,  JUnit won't run this test.\r\nThis is another way to avoid running long tests that the code is currently\r\n  passing.\r\nBut remember to uncomment such test methods for a final test of your code,\r\n  before submitting it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Fix the Code and Rerun the Driver/Junit -->\r\n\r\n<a name=\"fix\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Debug the Code in the Driver</b></td>\r\n<td width =\"80%\">\r\nIn this section we will examine how to use the Eclipse Debugger along with the\r\n  Driver program to explore the code that implements the\r\n  <b>LinearArrayQueue</b> class.\r\nIn actual assignments, when you write classes that may contain bugs, the\r\n  skills illustrated here will be very useful for locating and correcting\r\n  errors.\r\n<p>\r\n<b>First read and follow the directions in the\r\n    <a href=\"../../../common/handouts/debugger.doc\">\r\n    Debugger Tutorial</a> to learn about the Debugger.</b>\r\n<p>\r\nSpecifically, you should learn how to set breakpoints, how to single step over\r\n  (execute) lines of code, and how to observe the values of variables.\r\nBecoming familiar with the Debugger now will help you immeasurably later in\r\n  the quarter; for every hour you play with the Debugger now, I estimate you\r\n  will save 3 hours later in the during the quarter, by being able to use the\r\n  Debugger skillfully to correct your code.\r\n<p>\r\n<b>After you have read the Debugger Tutorial, perform the actions below.</b>\r\n<p>\r\nRun the <b>DriverForOrderedCollection</b> program (not the JUnit test) as\r\n  described above.\r\nImmediately stop this program and clear the <b>Console</b> (click the Red\r\n  Square and Xx buttons).\r\nThen start the Debugger perspective (click <b>Debug</b>) and rerun this \r\n program in the Debugger (click the green <b>bug</b> icon).\r\nSet unconditional breakpoints on the first line of code in the <b>add</b>\r\n  and <b>remove</b> methods (lines 64 and 76 respectively).\r\nStart running the program by clicking the right-pointing green arrow (after the\r\n  Debug tab in the upper-left window).\r\n<p>\r\nOn some machnines, Eclipse will display a tab \r\n  <b>URL ClassLoader.class</b> with the line\r\n<b><pre>  throw new ClassNotFoundException(name);</pre></b>\r\n  highlighted in green.\r\nIf your machine displays this tab, follow the directions below; if not,\r\n  skip this next section -down to where it says\r\n  <b>You will be prompted in the console window...</b>\r\n<p>\r\n<hr align=\"left\" width=\"33%\">\r\n<p>\r\nClick in \"Breakpoints\" tab in the upper-rightmost window: there, click the\r\n  box that shows a check before the\r\n  <b>classNotFoundException: caught and uncaught</b> and the check should\r\n  disappear.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugbreakpoints.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nThen click the right-pointing green arrow (to the right of the Debug tab in the\r\n  upper-left window) again.\r\n<p>\r\n<hr align=\"left\" width=\"33%\">\r\n<p>\r\nYou will be prompted in the console window for the basic information needed\r\n  to start the Driver.\r\nIssue the <b>a</b> command and the String <b>test1</b>.\r\n<p>\r\nAt that point the Debugger should stop at line 64, highlighted by a green\r\n  line (this line is about to be executed).\r\nIf we disclose the <b>this</b> variable in the <b>Variables</b> tab it should\r\n  display the following information\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugaddstart.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNotice that the <b>modCount</b> and <b>objectCount</b> instance variables\r\n  are both <b>0</b>, the one element in the <b>q</b> array stores <b>null</b>\r\n  (refernce to no String).\r\nNotice also that the parameter variable <b>e</b> refers to the String\r\n  <b>\"test1\"</b>.\r\n<p>\r\nNow, <b>step over</b>/execute each of the statements in this method, watching\r\n  how each statement changes the instance variables in the disclosed\r\n  <b>this</b>.\r\nWhen the last line (<b>return</b> statement) is about to be executed, the\r\n  <b>Variables</b> tab should display the following information.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugaddstop.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nAt this point click the right-pointing green arrow again and issue the\r\n  <b>a</b> command and the String <b>test2</b>.\r\nNow, <b>step over</b>/execute each of the statements in this method, watching\r\n  how each statement changes the instance variables in the disclosed\r\n  <b>this</b>.\r\nWhen the last line (<b>return</b> statement) is about to be executed, the\r\n  the <b>Variables</b> tab should display the following information.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugaddstop2.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNote the new values for <b>modCount</b>, <b>objectCount</b>, and <b>q</b>\r\n  (whose length has been doubled to <b>2</b>).\r\n<p>\r\nAt this point click the right-pointing green arrow again and issue the\r\n  <b>r</b> command.\r\nThe Debugger should stop at line 76, highlighted by a green\r\n  line (this line is about to be executed).\r\nThe <b>Variables</b> tab it should display the following information\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugremovestart.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNow, <b>step over</b>/execute each of the statements in this method, watching\r\n  how each statement changes the instance variables in the disclosed\r\n  <b>this</b>.\r\nWhen the last line (<b>return</b> statement) is about to be executed, the\r\n  the <b>Variables</b> tab should display the following information.\r\n</td></tbody></table>\r\n<p>\r\n<img src=\"images/debugremovestop.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\nNote that the <b>answer</b> to be returned is <b>test1</b>.\r\nAlthough <b>\"test2\"</b> is stored <b>queue[0]</b> and <b>queue[1]</b>, the\r\n  fact that <b>objectCount</b> stores <b>1</b> indicates <b>queue</b>\r\n  currently stores only one value that will ever be examined.\r\nWe could have put the line\r\n<b><pre>  q[objectCount-1] = null;</pre></b>\r\n  directly after the <b>for</b> loop to store <b>null</b> into <b>q[1]</b>,\r\n  but as in the <b>clear</b> method, we have chosen to omit this unnecessary\r\n  code.\r\n<p>\r\nIn summary, it is important to know how to use the basics of the Debugger:\r\n  to set breakpoints, to single step over/execute code, and to observe the\r\n  values of variables (possible using disclosure to see \"inside\" an object).\r\nWhen we used the Debugger with the Driver program, we can carefully watch how\r\n  our code works -or more importantly, watch how it fails to work to be able\r\n  to debug it.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Submit via Checkmate -->\r\n\r\n<a name=\"checkmate\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Submit the Program for Grading via Checkmate</b></td>\r\n<td width =\"80%\">\r\nAfter you have fixed the code and verified that it works correctly via the\r\n  Driver and the JUnit tester, you should practice submitting the code for\r\n  grading via <b>Checkmate</b>.\r\nRemember that although this assignment is not graded, you should submit it so\r\n  that I will know that you know how to submit code correctly.\r\n<p>\r\nInformation about using Checkmate is available via the\r\n  <b>Handouts (General)</b> link on the webpage;\r\n  there, click the <b>Windows/ Operating System and \r\n  Eclipse IDE</b> link.\r\nOr, see the <b>Submitting Work</b> link at the bottom of the\r\n  <a href=\"../../../common/handouts/OS+IDE/index.html\">\r\n    Tutorial on the Windows Operating System and Eclipse IDE</a>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- End -->\r\n\r\n<a name=\"end\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Final Words</b></td>\r\n<td width =\"80%\">\r\nFinally, after you are done submitting your code you should backup/save the\r\n  entire project on a USB device (even if you are using your own computer,\r\n  you should still backup your work).\r\nProbably it is best to zip the project folder first (which makes it smaller\r\n  and also speeds up copying -which depends as much on how many files you\r\n  copy as on the size of the files).\r\nIf you are on a lab machine, you can also backup/save this folder on your\r\n  Unix file space.\r\n<p>\r\nInformation about using your Unix storage is available via the\r\n  <b>Handouts (General)</b> link on the webpage;\r\n  there, click the <b>Windows/ Operating System and \r\n  Eclipse IDE</b> link.\r\nOr, see the <b>File Storage</b> link in the\r\n  <a href=\"../../../common/handouts/OS+IDE/index.html\">\r\n    Tutorial on the Windows Operating System and Eclipse IDE</a>.\r\n<p>\r\nPractice doing everything in this lab over and again, until you are familiar\r\n  with all these skills and can do them without reading the directions.\r\nYou will save yourself much time during the quarter (when time is really\r\n  important) if you spend some time now (when things aren't so rushed)\r\n  mastering the material in the \"programming assignment\".\r\n</table>\r\n</body>\r\n</html>\r\n", "id": 33199.0}