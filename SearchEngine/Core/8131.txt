{"text": "Overview Review Testing TerminologyTesting Units Test Driven DevelopmentJUnit Walk Through if technology permits Testing Behaviors Behavior Driven DevelopmentMocking if technology time permits Review Testing Terminology Mistake vs Fault Bug vs Error vs FailureBlackbox Testing vs Whitebox TestingMore Testing Jargon Test CaseTest SuiteTest OracleTest Plan Mistake Fault Error Failure Review Testing Terminology Mistake A human action that produces an incorrect result Fault a k a Bug An anomaly in the source code of a program that may lead to an error Error The runtime effect of executing a fault which causes a deviation from correct behavior and may result in a failureFailure The externally visible manifestation of an error Mistake Fault Error Failure Review Testing Terminology source Prof James Jones Software Testing INF215 As it turns out Any fault has many possible fixes The fix can actually determine what the fault was Blackbox Testing Testing that ignores the internal mechanism of a system or component and focuses solely on the outputs generated in response to selected inputs and execution conditions IEEE Blackbox Testing Testing that ignores the internal mechanism of a system or component and focuses solely on the outputs generated in response to selected inputs and execution conditions IEEE Whitebox Testing Testing that takes into account the internal mechanism of a system or component IEEE Whitebox Testing Testing that takes into account the internal mechanism of a system or component IEEE Test Case Suite Oracle Plan More Testing Jargon Test Case A group of input values that cause a program to take some defined action with an expected output Test Suite A collection of test cases Test Oracle A mechanism for determining whether the actual behavior of a test case execution matches the expected behavior Test Plan A document describing the scope approach resources and schedule of intended testing activity Test Oracles What will test the mechanism itself Hidden slides are left out of the presentation Testing Units Test Driven Development TDD Test Driven Development Write tests first then implement the code for the test Agile technique grew out of extreme programming Method Write initially failing TestImplement or re factor Functionality for TestTest Functionality by running Test typically using automated testing frameworks Iterate We will see later BDD adopts this method idea TDD Example Code Example Bit Repository bitbucket org vpalepu 191b Write Test Test public void test1 assertEquals one NumbersToEnglish translateToEnglish 1 TDD Example Write Test Test public void test1 assertEquals one NumbersToEnglish translateToEnglish 1 Write Code public class NumbersToEnglish public static String translateToEnglish int number return null Run Test test1 Failed TDD Example contd Write Test Test public void test1 assertEquals one NumbersToEnglish translateToEnglish 1 Refactor Code public class NumbersToEnglish public static String translateToEnglish int number return one Run Test test1 Passed TDD Example contd Write Next Test Test public void test2 assertEquals two NumbersToEnglish translateToEnglish 2 Existing Code public class NumbersToEnglish public static String translateToEnglish int number return one Run Tests test1 Passedtest2 Failed TDD Example contd Write Next Test Test public void test2 assertEquals two NumbersToEnglish translateToEnglish 2 Refactor Existing Code public class NumbersToEnglish public static String translateToEnglish int number if number 2 return two return one Run Tests test1 Passedtest2 Passed TDD Example contd Write Next Tests Test public void test1 Assert assertEquals one NumbersToEnglish translateToEnglish 1 Test public void test2 Assert assertEquals two NumbersToEnglish translateToEnglish 2 Test public void test8 Assert assertEquals eight NumbersToEnglish translateToEnglish 8 Test public void test1 Assert assertEquals ten NumbersToEnglish translateToEnglish 1 Test public void test19 Assert assertEquals nineteen NumbersToEnglish translateToEnglish 19 TDD Example contd Write Even More Tests Test public void test12 Assert assertEquals twelve NumbersToEnglish translateToEnglish 12 Test public void test28 Assert assertEquals twenty eight NumbersToEnglish translateToEnglish 28 Test public void test2 Assert assertEquals twenty NumbersToEnglish translateToEnglish 2 Test public void testMinus2 Assert assertEquals minus twenty NumbersToEnglish translateToEnglish 2 Test public void test Assert assertEquals zero NumbersToEnglish translateToEnglish TDD Example contd Code as we last Saw it public class NumbersToEnglish public static String translateToEnglish int number if number 2 return two return one After many iterations public class NumbersToEnglish public static String translateToEnglish int number String result if number return zero if number result minus number number 1 return result translate1to29ToEnglish number TDD Example contd translate1to29ToEnglish int number private static String translate1to29ToEnglish int number if number translate1to19ToEnglish number String translation twenty int units digit number 1 if units digit translation translation translate1to19ToEnglish units digit return translation TDD Example contd translate1to19ToEnglish int number private static String translate1to19ToEnglish int number switch number case 1 return one case 2 return two case 3 return three case 4 return four case 5 return five case 6 return six case 7 return seven case 8 return eight case 9 return nine case 1 return ten case 11 return eleven case 12 return twelve case 13 return thirteen case 14 return fourteen case 15 return fifteen case 16 return sixteen case 17 return seventeen case 18 return eighteen default return nineteen Junit Screenshots junit org Testing Behaviors Behavior Driven Development and Mocking Testing Behaviors How do you do it Think in terms of Behaviors Not in terms of Tests Verify those Behaviors Introducing BDD by Dan North Test method names should be sentences A simple sentence template keeps test methods focused An expressive test name is helpful when a test fails Behavior is a more useful word than test Emphasize behavior over testing Method Write initially failing Test Determine or define the next most important behavior Implement Functionality for Test BehaviorTest Functionality against Behavior typically using automated testing frameworks Iterate Behaviors Stories Features Goals Scenarios It s all about Templates A simple sentence template keeps test methods focused Dan North Behaviors Typical Form User Story Title As a user I want feature so that goal Scenario Title Given some initial context When an event occurs Then ensure some outcomes Example Behavior User Story Student wants to adhere to English Grammar while using mathematical numerals in English passages As a student I want to translate mathematical numerals into words in English so that my English passages are grammatically correct when using numbers Scenario Mathematical Numeral or Number is 1 Given the number 1 denoted by a sequence of digits When the student requests for an English translation Then ensure the translation one for the number 1 is generated Immediate focus on User student Context Feature English Translation Goal correct English Grammar Example Behavior contd Scenario Mathematical Numeral or Number is 1 Given the number 1 denoted by a sequence of digitsWhen the student requests for an English translationThen ensure the translation one for the number 1 is generated Test Case from TDD Test public void test1 assertEquals one NumbersToEnglish translateToEnglish 1 Test Case from BDD Test public void shouldReturnOneFor1 expressive test name int given 1 when String translation NumbersToEnglish translateToEnglish given then assertEquals one translation Mocking Testing Interactions within Code Notes on Testing Verifying Behavior So are we really verifying behaviors with BDD Yes if Behaviors Stories Features Goals ScenariosNo if Behaviors Interactions between code components Did translateToEnglish correctly interact with translate1to29ToEnglish Did translate1to29ToEnglish correctly interact with translate1to19ToEnglish Testing State vs Testing Interactions Behaviors Stories Features Goals ScenariosBehaviors Interactions between code componentsTesting is mostly value based testing Compare Expected value vs Actual Computed ValueThis is true even with BDD when Behaviors Stories Features Goals Scenarios Issue You can arrive at the right value state with the wrong steps or interactionsSolution Make sure you follow the right steps or the right interactions in the code Enter Mocks and Mocking Mocks Testing Interactions Mocks are Objects with Expectations a specification of method calls they are expected to receive Keep track of all the method calls check them against a specification flag errors if the specifications and reality do not match up Mocks Code Example Testing Interactions Test public void shouldInvokeTranslateToWordsOnceAndNeverInvokeTranslate1to19 given NumbersToEnglish translator spy translator int number 2 when translator translateToWords number then verify translator translateToWords anyInt verify translator atLeastOnce translate1To29 anyInt verify translator never translate1To19 anyInt Review Review What is TDD General process behind TDD Idea Tests drive development Junit What does it look like What is BDD General process behind BDD Idea Behaviors over TestsBehaviors as Stories Features Goals ScenariosTesting Value State vs Method Calls InteractionsBehaviors as Method Calls InteractionsMocking Yes I have heard about it Happy Testing ", "_id": "http://www.ics.uci.edu/~vpalepu/testing-software/", "title": "none", "html": "<!--\nGoogle IO 2012/2013 HTML5 Slide Template\n\nAuthors: Eric Bidelman <ebidel@gmail.com>\n         Luke Mah\u00e9 <lukem@google.com>\n\nURL: https://code.google.com/p/io-2012-slides\n-->\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">\n  <!--<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0\">-->\n  <!--<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">-->\n  <!--This one seems to work all the time, but really small on ipad-->\n  <!--<meta name=\"viewport\" content=\"initial-scale=0.4\">-->\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n  <link rel=\"stylesheet\" media=\"all\" href=\"theme/css/default.css\">\n  <link rel=\"stylesheet\" media=\"only screen and (max-device-width: 480px)\" href=\"theme/css/phone.css\">\n  <base target=\"_blank\"> <!-- This amazingness opens all links in a new tab. -->\n  <script data-main=\"js/slides\" src=\"js/require-1.0.8.min.js\"></script>\n</head>\n<body style=\"opacity: 0\">\n\n<slides class=\"layout-widescreen\">\n\n<!--   <slide class=\"nobackground\">\n    <article class=\"flexbox vcenter\">\n      <span><img src=\"images/spider_circle_green_tiny.png\"></span>\n    </article>\n  </slide> -->\n\n  <slide class=\"title-slide segue nobackground\">\n    <aside class=\"gdbar\"><img src=\"images/spider_circle_green_tiny.png\"></aside>\n    <!-- The content of this hgroup is replaced programmatically through the slide_config.json. -->\n    <hgroup class=\"auto-fadein\">\n      <h1 data-config-title><!-- populated from slide_config.json --></h1>\n      <h2 data-config-subtitle><!-- populated from slide_config.json --></h2>\n      <p data-config-presenter><!-- populated from slide_config.json --></p>\n    </hgroup>\n  </slide>\n\n\n  <slide>\n    <hgroup>\n      <h2>Overview</h2>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li>Review: Testing Terminology</li>\n        <li>Testing Units\n          <ul>\n            <li>Test Driven Development</li>\n            <li>JUnit Walk Through (if technology permits)</li>\n          </ul>\n        </li>\n        <li>Testing Behaviors\n          <ul>\n            <li>Behavior Driven Development</li>\n            <li>Mocking (if technology+time permits)</li>\n          </ul>\n        </li>       \n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Review: Testing Terminology</h2>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li>Mistake vs. Fault (Bug) vs. Error vs. Failure</li>\n        <li>Blackbox Testing vs. Whitebox Testing</li>\n        <li>More Testing Jargon\n          <ul>\n            <li>Test Case</li>\n            <li>Test Suite</li>\n            <li>Test Oracle</li>\n            <li>Test Plan</li>\n          </ul>\n        </li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Mistake, Fault, Error, Failure</h2>\n      <h3>Review: Testing Terminology</h3>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li><b>Mistake</b>: A human action that produces an incorrect result.</li>\n        <li><b>Fault (a.k.a Bug)</b>: An anomaly in the source code of a program that *may* lead to an error.</li>\n        <li><b>Error</b>: The runtime effect of executing a fault, which causes a deviation from correct behavior and *may* result in a failure</li>\n        <li><b>Failure</b>: The externally visible manifestation of an error.</li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Mistake, Fault, Error, Failure</h2>\n      <h3>Review: Testing Terminology</h3>\n    </hgroup>\n    <article class=\"flexbox vcenter\">\n      <img src=\"images/testing-terminology.png\" alt=\"Testing Jargon\" title=\"Mistake, Fault, Error, Failure\">\n      <footer class=\"source\">source: Prof. James Jones, Software Testing INF215</footer>\n      <p><b>As it turns out:</b> Any fault has many possible fixes. The fix can actually determine what \u201cthe fault\u201d was!</p>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Blackbox Testing</h2>\n    </hgroup>\n\n    <article class=\"flexbox vleft auto-fadein\">\n      <q>Testing that ignores the internal mechanism of a system or component and focuses solely on the outputs generated in response to selected inputs and execution conditions.</q>\n      <div class=\"author\">IEEE</div>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Blackbox Testing</h2>\n    </hgroup>\n    <article class=\"flexbox vcenter\">\n      <p>\n        Testing that ignores the internal mechanism of a system or component and focuses solely on the outputs generated in response to selected inputs and execution conditions.\n        <br>\n        - IEEE\n      </p>\n      <img src=\"images/blackbox.png\" alt=\"blackbox testing\" />\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Whitebox Testing</h2>\n    </hgroup>\n\n    <article class=\"flexbox vleft auto-fadein\">\n      <q>Testing that takes into account the internal mechanism of a system or component.</q>\n      <div class=\"author\">IEEE</div>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Whitebox Testing</h2>\n    </hgroup>\n    <article class=\"flexbox vcenter\">\n      <p>\n        Testing that takes into account the internal mechanism of a system or component.\n        <br>\n        - IEEE\n      </p>\n      <img src=\"images/whitebox.png\" alt=\"whitebox testing\" />\n    </article>\n  </slide>\n\n\n  <slide>\n    <hgroup>\n      <h2>Test [Case, Suite, Oracle, Plan]</h2>\n      <h3>More Testing Jargon</h3>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li> <b>Test Case</b>: A group of input values that cause a program to take some defined action, with an expected output.\n        <li> <b>Test Suite</b>: A collection of test cases\n        <li> <b>Test Oracle</b>*: A mechanism for determining whether the actual behavior of a test case execution matches the expected behavior.\n        <li> <b>Test Plan</b>: A document describing the scope, approach, resources, and schedule of intended testing activity\n      </ul>\n    </article>\n\n    <article class=\"smaller\">\n      <ul class=\"build\">\n        <li>*<b>Test Oracles</b>: What will test the mechanism, itself?</li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide hidden>\n    Hidden slides are left out of the presentation.\n  </slide>\n\n  <slide class=\"segue dark nobackground\">\n    <aside class=\"gdbar\"><img src=\"images/spider_circle_green_tiny.png\"></aside>\n    <hgroup class=\"auto-fadein\">\n      <h2>Testing Units</h2>\n      <h3>Test Driven Development</h3>\n    </hgroup>\n  </slide>\n\n\n  <slide>\n    <hgroup>\n      <h2>TDD: Test Driven Development</h2>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li>Write tests first, then implement the code for the test.</li>\n        <li>Agile technique; grew out of extreme programming.</li>\n        <li>Method:\n          <ul class=\"build\">\n            <li>Write (initially failing) Test</li>\n            <li>Implement (or re-factor) Functionality for Test</li>\n            <li>Test Functionality by running Test (typically using automated testing frameworks)</li>\n            <li>Iterate</li>\n          </ul>\n        </li>\n        <li>We will see later: BDD adopts this method/idea!</li>\n      </ul>\n    </article>\n    \n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Code Example Bit Repository: <a href=\"https://bitbucket.org/vpalepu/191b\">bitbucket.org/vpalepu/191b</a></p>\n      <p>Write Test:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test1() {\n  assertEquals(\"one\", NumbersToEnglish.translateToEnglish(1));\n}\n      </pre> \n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Test:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test1() {\n  assertEquals(\"one\", NumbersToEnglish.translateToEnglish(1));\n}\n      </pre>\n\n      <p>Write Code:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    return null;\n  }\n}\n      </pre>\n\n      <p>Run Test:</p>\n      <ul>\n        <li class=\"red\">test1: Failed</li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Test:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test1() {\n  assertEquals(\"one\", NumbersToEnglish.translateToEnglish(1));\n}\n      </pre>\n\n      <p>Refactor Code:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    return \"one\";\n  }\n}\n      </pre>\n\n      <p>Run Test:</p>\n      <ul>\n        <li class=\"green\">test1: Passed</li>\n      </ul>\n    </article>\n  </slide>  \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Next Test:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test2() {\n  assertEquals(\"two\", NumbersToEnglish.translateToEnglish(2));\n}\n      </pre>\n\n      <p>Existing Code:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    return \"one\";\n  }\n}\n      </pre>\n\n      <p>Run Tests:</p>\n      <ul>\n        <li class=\"green\">test1: Passed</li>\n        <li class=\"red\">test2: Failed</li>\n      </ul>\n    </article>\n  </slide>   \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Next Test:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test2() {\n  assertEquals(\"two\", NumbersToEnglish.translateToEnglish(2));\n}\n      </pre>\n\n      <p>Refactor Existing Code:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    if(number == 2) return \"two\";\n    return \"one\";\n  }\n}\n      </pre>\n\n      <p>Run Tests:</p>\n      <ul>\n        <li class=\"green\">test1: Passed</li>\n        <li class=\"green\">test2: Passed</li>\n      </ul>     \n    </article>\n  </slide>  \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Next Tests:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test1() {\n  Assert.assertEquals(\"one\", NumbersToEnglish.translateToEnglish(1));\n}\n\n@Test\npublic void test2() {\n  Assert.assertEquals(\"two\", NumbersToEnglish.translateToEnglish(2));\n}\n\n@Test\npublic void test8() {\n  Assert.assertEquals(\"eight\", NumbersToEnglish.translateToEnglish(8));\n}\n\n@Test\npublic void test10() {\n  Assert.assertEquals(\"ten\", NumbersToEnglish.translateToEnglish(10));\n}\n\n@Test\npublic void test19() {\n  Assert.assertEquals(\"nineteen\", NumbersToEnglish.translateToEnglish(19));\n}\n      </pre>\n    </article>\n  </slide>  \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Write Even More Tests:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\n@Test\npublic void test12() {\n  Assert.assertEquals(\"twelve\", NumbersToEnglish.translateToEnglish(12));\n}\n\n@Test\npublic void test28() {\n  Assert.assertEquals(\"twenty eight\", NumbersToEnglish.translateToEnglish(28));\n}\n\n@Test\npublic void test20() {\n  Assert.assertEquals(\"twenty\", NumbersToEnglish.translateToEnglish(20));\n}\n\n@Test\npublic void testMinus20() {\n  Assert.assertEquals(\"minus twenty\", NumbersToEnglish.translateToEnglish(-20));\n}\n\n@Test\npublic void test0() {\n  Assert.assertEquals(\"zero\", NumbersToEnglish.translateToEnglish(0));\n}\n      </pre>\n    </article>\n  </slide> \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>Code as we last Saw it:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    <b>if(number == 2) return \"two\";\n    return \"one\";</b>\n  }\n}\n      </pre>\n\n      <p>After many iterations:</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\npublic class NumbersToEnglish {\n  public static String translateToEnglish(int number) {\n    String result = \"\";\n\n    <b>if(number == 0) return \"zero\";\n    if(number < 0) {\n      result = \"minus \"\n      number = number * -1;\n    }\n    return result + translate1to29ToEnglish(number)</b>;\n  }\n}\n      </pre>   \n    </article>\n  </slide>  \n\n    <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>translate1to29ToEnglish(int number)</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\nprivate static String translate1to29ToEnglish(int number) {\n    if(number <= 19) {\n      return <b>translate1to19ToEnglish(number)</b>;\n    }\n    String translation = \"twenty\";    \n    int units_digit = number % 10;\n    \n    if(units_digit != 0) {\n      translation = translation + \" \" + <b>translate1to19ToEnglish(units_digit)</b>;\n    }\n    \n    return translation;\n  }\n      </pre>\n    </article>\n  </slide> \n\n  <slide>\n    <hgroup>\n      <h2>TDD: Example (contd.)</h2>\n    </hgroup>\n    <article class=\"smaller\">\n      <p>translate1to19ToEnglish(int number)</p>\n      <pre class=\"prettyprint\" data-lang=\"java\">\nprivate static String translate1to19ToEnglish(int number) {\n    switch(number) {\n      <b>case 1: return \"one\";\n      case 2: return \"two\";\n      case 3: return \"three\";\n      case 4: return \"four\";\n      case 5: return \"five\";\n      case 6: return \"six\";\n      case 7: return \"seven\";\n      case 8: return \"eight\";\n      case 9: return \"nine\";\n      case 10: return \"ten\";\n      case 11: return \"eleven\";\n      case 12: return \"twelve\";\n      case 13: return \"thirteen\";\n      case 14: return \"fourteen\";\n      case 15: return \"fifteen\";\n      case 16: return \"sixteen\";\n      case 17: return \"seventeen\";\n      case 18: return \"eighteen\";\n      default: return \"nineteen\";</b>\n    }\n  }\n      </pre>   \n    </article>\n  </slide> \n\n  <slide>\n    <hgroup>\n      <h2>Junit</h2>\n      <h3>Screenshots</h3>\n    </hgroup>\n    <p><a href=\"http://junit.org\">junit.org</a></p>\n  </slide>\n\n  <slide class=\"fill nobackground\" style=\"background-image: url(images/junit-passed.png)\">\n    <hgroup>\n      <!-- <h2 class=\"white\">Full Image (with Optional Header)</h2> -->\n    </hgroup>\n  </slide>\n\n<slide class=\"fill nobackground\" style=\"background-image: url(images/junit-failed.png)\">\n    <hgroup>\n      <!-- <h2 class=\"white\">Full Image (with Optional Header)</h2> -->\n    </hgroup>\n  </slide>\n\n  <slide class=\"segue dark nobackground\">\n    <aside class=\"gdbar\"><img src=\"images/spider_circle_green_tiny.png\"></aside>\n    <hgroup class=\"auto-fadein\">\n      <h2>Testing Behaviors</h2>\n      <h3>Behavior Driven Development (and Mocking)</h3>\n    </hgroup>\n  </slide>\n\n  <slide>\n    <hgroup> \n      <h2>Testing Behaviors</h2>\n      <h3>How do you do it?</h3>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li>Think in terms of Behaviors.\n          <ul>\n            <li>Not in terms of Tests.</li>\n          </ul>\n        </li>\n        <li>Verify those Behaviors.</li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>\u201cIntroducing BDD\u201d by Dan North</h2>\n<!--       <h3>Thinking (in terms) of Behaviors</h3> -->\n    </hgroup>\n\n    <article>\n      <ul class=\"build\">\n        <li>Test method names should be sentences.\n          <ul class=\"build\">\n            <li>A simple <b>sentence template</b> keeps test methods focused.</li>\n            <li>An expressive test name is helpful when a test fails.</li>\n          </ul>\n        </li>\n        <li><b>Behavior</b> is a more useful word than <b>test</b>.\n          <ul class=\"build\">\n            <li>Emphasize behavior over testing.</li>\n            <li>Method:\n              <ul class=\"build\">\n                <li><strike>Write (initially failing) Test</strike> <br>\n                  Determine (or define) the next most important behavior.</li>\n                <li>Implement Functionality for <strike>Test</strike> Behavior</li>\n                <li>Test Functionality against Behavior (typically using automated testing frameworks)</li>\n                <li>Iterate</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n        <li><b>Behaviors => Stories, Features, Goals, Scenarios</b></li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>It's all about Templates</h2>\n    </hgroup>\n    <article>\n      <p>\"A simple <b>sentence template</b> keeps test methods focused.\" - Dan North</p>\n\n      <p>Behaviors - Typical Form</p>\n\n      <ul class=\"build\">\n        <li><b>User Story:</b> [Title]\n          <ul>\n            <li><b>As a</b> [user],</li>\n            <li><b>I want</b> [feature],</li>\n            <li><b>so that</b> [goal].</li>\n          </ul>\n        </li>\n\n        <li><b>Scenario:</b> [Title]\n          <ul>\n            <li><b>Given</b> [some initial context]</li>\n            <li><b>When</b> [an event occurs],</li>\n            <li><b>Then</b> [ensure some outcomes].</li>\n          </ul>\n        </li>\n      </ul>\n    </article>\n\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Example Behavior</h2>\n    </hgroup>\n\n    <article>\n      <ul class=\"build\">\n        <li><b>User Story:</b> Student wants to adhere to English Grammar while using mathematical numerals in English passages.\n          <ul class=\"build\">\n            <li><b>As a</b> student,</li>\n            <li><b>I want</b> to translate mathematical numerals into words in English,</li>\n            <li><b>so that</b> my English passages are grammatically correct when using numbers.</li>\n          </ul>\n        </li>\n\n        <li><b>Scenario:</b> Mathematical Numeral (or Number) is 1\n          <ul class=\"build\">\n            <li><b>Given</b> the number \"1\" denoted by a sequence of digits,</li>\n            <li><b>When</b> the student requests for an English translation,</li>\n            <li><b>Then</b> ensure the translation \"one\" for the number \"1\" is generated.</li>\n          </ul>\n        </li>\n\n        <li>Immediate focus on: \n          <ul>\n            <li>User (student);</li>\n            <li>Context: Feature (English Translation), Goal (correct English Grammar).</li>\n          </ul>\n          \n        </li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Example Behavior (contd.)</h2>\n    </hgroup>\n  <article class=\"smaller\">\n      <ul class=\"build\">\n        <li><b>Scenario:</b> Mathematical Numeral (or Number) is 1\n          <ul>\n            <li><b>Given</b> the number \"1\" denoted by a sequence of digits</li>\n            <li><b>When</b> the student requests for an English translation</li>\n            <li><b>Then</b> ensure the translation \"one\" for the number \"1\" is generated.</li>\n          </ul>\n        </li>\n\n\n        <li>Test Case from <b>TDD</b>\n                <pre class=\"prettyprint\" data-lang=\"java\">\n@Test public void <b>test1</b>() {\n  <b>assertEquals(\"one\", NumbersToEnglish.translateToEnglish(1));</b>\n}\n      </pre>\n        </li>\n        <li>Test Case from <b>BDD</b>\n<pre class=\"prettyprint\" data-lang=\"java\">\n@Test public void <b>shouldReturnOneFor1</b>() { // <b>expressive test name</b>\n  int <b>given = 1;</b>\n  // <b>when</b>\n  String translation  = NumbersToEnglish.<b>translateToEnglish(given)</b>\n  // <b>then</b>\n  <b>assertEquals(\"one\", translation);</b>\n}\n      </pre>\n        </li>\n\n      </ul>\n    </article>\n  </slide>\n\n\n\n\n  <slide>\n    <hgroup>\n      <h2>Mocking: Testing Interactions within Code</h2>\n\n    </hgroup>\n    <article>\n      <p><a href=\"http://www.ics.uci.edu/~vpalepu/2014/06/03/Notes-Testing-Software-Behavior.html\">Notes on Testing/Verifying Behavior</a></p>\n      <ul class=\"build\">\n        <li>So are we really verifying behaviors with BDD?\n          <ul class=\"build\">\n            <li>Yes, if Behaviors => Stories, Features, Goals, Scenarios</li>\n            <li>No, if Behaviors => Interactions between code components\n              <ul class=\"build\">\n                <li>Did <code>translateToEnglish</code>, correctly interact with <code>translate1to29ToEnglish</code>?</li>\n                <li>Did <code>translate1to29ToEnglish</code>, correctly interact with <code>translate1to19ToEnglish</code>?</li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </article>\n  </slide>  \n\n  <slide>\n    <hgroup>\n      <h2>Testing State vs Testing Interactions</h2>\n\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li><strike>Behaviors => Stories, Features, Goals, Scenarios</strike></li>\n        <li><b>Behaviors => Interactions between code components</b></li>\n        <li>Testing is mostly value based testing.\n          <ul>\n            <li>Compare: Expected value vs. Actual Computed Value</li>\n            <li>This is true even with BDD, when, Behaviors => Stories, Features, Goals, Scenarios.</li>\n          </ul>\n        </li>\n        <li>Issue: You can arrive at the right value/state with the wrong steps or interactions</li>\n        <li>Solution: Make sure you follow the right steps or the right interactions in the code.</li>\n        <li>Enter: Mocks and Mocking</li>\n      </ul>\n    </article>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Mocks</h2>\n      <h3>Testing Interactions</h3>\n    </hgroup>\n    <article>\n      <ul class=\"build\">\n        <li>Mocks are Objects with Expectations: a specification of method calls they are expected to receive.</li>\n        <li>Keep track of all the method calls; \n          <ul>\n            <li>check them against a specification;</li>\n            <li>flag errors if the specifications and reality do not match up.</li>\n          </ul>\n      </ul>\n    </article>\n\n  </slide>\n\n\n\n  <slide>\n    <hgroup>\n      <h2>Mocks: Code Example</h2>\n      <h3>Testing Interactions</h3>\n    </hgroup>\n    <article>\n    <pre class=\"prettyprint\" data-lang=\"java\">\n@Test \npublic void shouldInvokeTranslateToWordsOnceAndNeverInvokeTranslate1to19() {\n  //given\n  NumbersToEnglish translator = spy(translator());\n  <b>int number = 20;</b>\n  //when\n  translator.translateToWords(number);\n  //then\n<b>  verify(translator).translateToWords(anyInt());\n  verify(translator, atLeastOnce()).translate1To29(anyInt());\n  verify(translator, never()).translate1To19(anyInt());</b>\n}\n\n    </pre>\n    </article>\n  </slide>\n\n  <slide class=\"segue dark nobackground\">\n    <aside class=\"gdbar\"><img src=\"images/spider_circle_green_tiny.png\"></aside>\n    <hgroup class=\"auto-fadein\">\n      <h2>Review</h2>\n    </hgroup>\n  </slide>\n\n  <slide>\n    <hgroup>\n      <h2>Review</h2>\n    </hgroup>\n    <article>\n      <ul>\n        <li>What is TDD? General process behind TDD?</li>\n        <li>Idea: Tests drive development.</li>\n        <li>Junit: What does it look like?</li>\n        <li>What is BDD? General process behind BDD?</li>\n        <li>Idea: Behaviors over Tests</li>\n        <li>Behaviors as Stories, Features, Goals, Scenarios</li>\n        <li>Testing Value/State vs. Method Calls/Interactions</li>\n        <li>Behaviors as Method Calls/Interactions</li>\n        <li>Mocking (\"Yes, I have heard about it.\")</li>\n      </ul>\n    </article>\n\n  </slide>\n\n  <slide class=\"thank-you-slide segue nobackground\">\n    <aside class=\"gdbar right\"><img src=\"images/spider_circle_green_tiny.png\"></aside>\n    <article class=\"flexbox vleft auto-fadein\">\n      <h2>Happy Testing!</h2>\n      <!-- <p>Failure is good.</p> -->\n    </article>\n    <p class=\"auto-fadein\" data-config-contact>\n      <!-- populated from slide_config.json -->\n    </p>\n  </slide>\n\n<!--   <slide class=\"nobackground\">\n    <article class=\"flexbox vcenter\">\n      <span><img src=\"images/spider_circle_green_tiny.png\"></span>\n    </article>\n  </slide> -->\n\n  <slide class=\"backdrop\"></slide>\n\n</slides>\n\n<script>\n// var _gaq = _gaq || [];\n// _gaq.push(['_setAccount', 'UA-XXXXXXXX-1']);\n// _gaq.push(['_trackPageview']);\n\n// (function() {\n//   var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n//   ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n//   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n// })();\n</script>\n\n<!--[if IE]>\n  <script src=\"http://ajax.googleapis.com/ajax/libs/chrome-frame/1/CFInstall.min.js\"></script>\n  <script>CFInstall.check({mode: 'overlay'});</script>\n<![endif]-->\n</body>\n</html>\n", "id": 8131.0}