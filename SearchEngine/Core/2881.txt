{"text": "ICS CSE 46 Data Structure Implementation and Analysis Summer 2 14 Instructors and office hours Instructor Michael J Bannister Office DBH 4 32 Email mbannist at uci dot edu Office hours Wednesday from 3 pm 5 pm Friday from 1 3 pm 2 45pm in DBH 4 32Teaching assistant Zachary Becker Office DBH 4 32 Email zbecker at uci dot edu Lectures labs and exams Lecture Monday Wednesday Friday from 3 pm 4 5 pm in Steinhaus Hall 174 Lab Tuesday Thursday from 11 am 1 pm in ICS 189 Projects will be introduced in Tuesday s lab from 11 11 3 am Midterm exam Aug 22 Friday Final exam Sep 1 Wednesday Textbook and other resources The primary source of material for this course will be your lecture notes For this reason it is important that you attend all lectures In addition to your lecture notes you may find the following books to be valuable resources The first three are on reserve in the library and the last two are available for free to UCI students Algorithms in C Parts 1 5 by Robert Sedgewick Addison Wesley Professional Older edition on reserve in the library Data Structures and Algorithms in C by Michael T Goodrich Robert Tamassia and David M Mount Wiley On reserve in the library Data Structures and Algorithms in C by Mark A Weiss Prentice Hall Older edition on reserve in the library Algorithms and Data Structures The Basic Toolbox by Kurth Mehlhorn and Peter Sanders Springer Free PDF version The Algorithm Design Manual by Steven S Skiena Springer Free PDF version Grading Your grade in this course will be based on a weighted average of your scores on each of the five programming projects midterm and final exam The break down will be as follows Project 2 Projects 1 4 28 Midterm 3 Final 4 The conversion to letter grades will be determined at the end of the course Tentative schedule Week 1 Monday Aug 4 Time and space complexity using O notationWorst case analysisOrder statistics max min medianSearching linear and binaryThe sorting problem Week 1 Wednesday Aug 6 Sorting in O n 2 time insertion sort and selection sortDivide and conquer algorithmsSorting in O n log n time merge sort and quick sortSpace cost of recursion Week 1 Friday Aug 8 Big and Big notationA lower bound for comparison sortingSorting in linear time bucket sort and radix sort Week 2 Monday Aug 11 What is a data structure Arrays and linked listsArrayList data structureAmortized analysisStacks and queues Week 2 Wednesday Aug 13 Multidimensional arraysRooted binary treesExternal vs Internal nodesDepth first tree traversal preorder postorderBreadth first tree traversal Week 2 Friday Aug 15 Binary search treesAVL Trees Visualization The balance condition Week 3 Monday Aug 18 Skip listBinary heap Week 3 Wednesday Aug 2 Implementing binary heaps as arraysReview for midterm Week 3 Friday Aug 22 Midterm Week 4 Monday Aug 25 Hash functionsTabulation hashingHashing with chainingHashing with linear probingCuckoo hashing Note the link uses one table instead of two tables like I did in class Week 4 Wednesday Aug 27 Representing graphs Adjacency list adjacency matrix van Rossum representationDepth first searchBreadth first search Week 4 Friday Aug 29 Dijkstra s algorithmBellman Ford algorithm briefly Connected components Week 5 Monday Sep 1 Holiday Week 5 Wednesday Sep 3 Bellman Ford algorithm more Minimum spanning treeKruskal s algorithmUnion find data structureInverse Ackermann function Not on final Week 5 Friday Sep 5 Directed graphsStrong connectivityDirected acyclic graphsTopologically sortingReview for final Week 6 Wednesday Sep 1 Final Exam Example Code Example queue Template queue example Zach coded in lab Projects All of these projects will be coded entirely in C specifically C 14 Programming in C requires a level of care beyond that required in a higher level language like Python So expect the project to take more time than than your previous programming projects If you have prior experience programming in C make sure you are programming your projects using C In general make sure you start your project early to allow time for debugging Your projects will be evaluated based on their correctness and quality Specifically your projects will be evaluated on a 3 point scale The break down of the points will fall into two categories correctness and quality Correctness 2 points Does the program compiles run without error and meet specifications Quality 1 points Is the code readable well organized and easily modifiable If your submit code that does not compile you score will be severely reduced and you may receive a zero on the project In this course our target platform will be the Xubuntu 14 4 virtual machine distributed to the class If your project does not compile on this platform with the build scripts supplied with the project then it does not compile as far as we are concerned see Project for more information on our virtual machine Projects are due at 11 5 pm on their due date found on the project s webpage with a ten minute grace period You will be allowed one 48 hour extension during the course You are not required to notify us that you are going to use your extension The first project you submit late will fall under the 48 hour extension Other than this policy late work will not be accepted All projects will be submitted as a single file created by the gather script to the eee dropbox for the course see Project for details If a project is submitted in a different format your score will be reduced and you may receive a zero Under no circumstances will a project be graded if it is submitted via email You are responsible for submitting the version of the project you want graded Accidentally submitting the wrong version is not considered grounds for a regrade Project Adapting to your environmentProject 1 Sorting labProject 2 Sudoku solverProject 3 SkiplistProject 4 Shortest paths Academic honesty As a student in this course you are expected to understand and follow the academic honest policies of the University of California Irvine and the Bren School of Information and Computer Science Please take a few minutes to familiarize yourself with these policies All of your submitted code is expected to be completed solely by you without outside assistance Sharing code with students in the class is not permitted Of course high level discussion of course material is permitted and encouraged All submissions will be analyzed by automated plagiarism detection software which detects similarities in your code with other students code this quarter and in the past and code available on the internet Similarly in class exams are expected to be an individual effort In addition all exams will be closed notes and closed book Violators of academic honesty policies will be reported and are subject to the penalties described in the policies linked above Overall a bad course grade is nowhere near as bad as getting caught cheating Accommodations for disabilities If you feel that you may need an accommodation based on the impact of a disability you should contact me privately to discuss these specific needs Also contact the Disability Services Center online or by phone at 949 824 7494 as soon as possible to better ensure that such accommodations such as alternative test taking environments or note taking services can be arranged for you in a timely way ", "_id": "http://www.ics.uci.edu/~mbannist/teaching/ics46/", "title": "{ics,cse} 46: data structure implementation and analysis", "html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n  \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/~mbannist/css/default.css\"/>\n  \n\n  <title>{ICS,CSE} 46: Data Structure Implementation and Analysis</title>\n\n  \n</head>\n\n<body>\n  <h1 id=\"icscse-46-data-structure-implementation-and-analysis-summer-2014\">ICS/CSE 46: Data Structure Implementation and Analysis (Summer 2014)</h1>\n  <hr />\n  \n  <h2 id=\"instructors-and-office-hours\">Instructors and office hours</h2>\n  <ul>\n    <li>Instructor: <a href=\"http://www.ics.uci.edu/~mbannist\">Michael J. Bannister</a><br />\n  Office: <a href=\"http://www.classrooms.uci.edu/GAC/DBH.html\">DBH</a> 4032<br />\n  Email: mbannist at uci dot edu<br />\n  Office hours: Wednesday from 3:00pm-5:00pm, Friday from 1:30pm-2:45pm in DBH 4032</li>\n    <li>Teaching assistant: <a href=\"http://www.ics.uci.edu/~zbecker\">Zachary Becker</a><br />\n  Office: <a href=\"http://www.classrooms.uci.edu/GAC/DBH.html\">DBH</a> 4032<br />\n  Email: zbecker at uci dot edu</li>\n  </ul>\n  \n  <h2 id=\"lectures-labs-and-exams\">Lectures, labs and exams</h2>\n  <ul>\n    <li>Lecture: Monday, Wednesday, Friday from 3:00pm-4:50pm in <a href=\"http://www.classrooms.uci.edu/GAC/SH174.html\">Steinhaus Hall 174</a>.</li>\n    <li>Lab: Tuesday, Thursday from 11:00am-1:00pm in <a href=\"http://www.classrooms.uci.edu/GAC/ICS.html\">ICS</a> 189.<br />\n  Projects will be introduced in Tuesday\u2019s lab from 11:00-11:30am.</li>\n    <li>Midterm exam: Aug 22 (Friday)</li>\n    <li>Final exam: Sep 10 (Wednesday)</li>\n  </ul>\n  \n  <h2 id=\"textbook-and-other-resources\">Textbook and other resources</h2>\n  <p>The primary source of material for this course will be your lecture notes. For this reason it is important that you attend all lectures. In addition, to your lecture notes you may find the following books to be valuable resources. The first three are on reserve in the library and the last two are available for free to UCI students.</p>\n  \n  <ul>\n    <li>\n      <p><em>Algorithms in C++, Parts 1-5</em><br />\n  by Robert Sedgewick<br />\n  Addison-Wesley Professional<br />\n  (Older edition on reserve in the library)</p>\n    </li>\n    <li>\n      <p><em>Data Structures and Algorithms in C++</em><br />\n  by Michael T. Goodrich, Robert Tamassia and David M. Mount<br />\n  Wiley<br />\n  (On reserve in the library)</p>\n    </li>\n    <li>\n      <p><em>Data Structures and Algorithms in C++</em><br />\n  by Mark A. Weiss\n  Prentice Hall<br />\n  (Older edition on reserve in the library)</p>\n    </li>\n    <li>\n      <p><em>Algorithms and Data Structures: The Basic Toolbox</em><br />\n  by Kurth Mehlhorn and Peter Sanders<br />\n  Springer<br />\n  <a href=\"http://link.springer.com/book/10.1007/978-3-540-77978-0\">Free PDF version</a>  </p>\n    </li>\n    <li>\n      <p><em>The Algorithm Design Manual</em><br />\n  by Steven S. Skiena<br />\n  Springer<br />\n  <a href=\"http://link.springer.com/book/10.1007/978-1-84800-070-4\">Free PDF version</a>  </p>\n    </li>\n  </ul>\n  \n  <h2 id=\"grading\">Grading</h2>\n  <p>Your grade in this course will be based on a weighted average of your scores on each of the five programming projects, midterm and final exam. The break down will be as follows:</p>\n  \n  <ul>\n    <li>Project 0 (2%)</li>\n    <li>Projects 1-4 (28%)</li>\n    <li>Midterm (30%)</li>\n    <li>Final (40%)</li>\n  </ul>\n  \n  <p>The conversion to letter grades will be determined at the end of the course.</p>\n  \n  <h2 id=\"tentative-schedule\">Tentative schedule</h2>\n  <ul>\n    <li>Week 1, Monday (Aug 4)\n      <ul>\n        <li>Time and space complexity using <a href=\"https://en.wikipedia.org/wiki/O-notation\">O-notation</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Analysis_of_algorithms\">Worst case analysis</a></li>\n        <li>Order statistics: max, min, median</li>\n        <li>Searching: linear and <a href=\"https://en.wikipedia.org/wiki/Binary_search\">binary</a></li>\n        <li>The <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm\">sorting</a> problem</li>\n      </ul>\n    </li>\n    <li>Week 1, Wednesday (Aug 6)\n      <ul>\n        <li>Sorting in O(n^2) time: <a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">insertion sort</a> and <a href=\"https://en.wikipedia.org/wiki/Selection_sort\">selection sort</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm\">Divide and conquer algorithms</a></li>\n        <li>Sorting in O(n log n) time: <a href=\"https://en.wikipedia.org/wiki/Mergesort\">merge sort</a> and <a href=\"https://en.wikipedia.org/wiki/Quick_sort\">quick sort</a></li>\n        <li>Space cost of recursion</li>\n      </ul>\n    </li>\n    <li>Week 1, Friday (Aug 8)\n      <ul>\n        <li>Big <a href=\"https://en.wikipedia.org/wiki/Big_O_notation#Big_Omega_notation\">\u03a9 and Big \u0398 notation</a></li>\n        <li>A lower bound for <a href=\"https://en.wikipedia.org/wiki/Comparison_sort\">comparison sorting</a></li>\n        <li>Sorting in linear time: <a href=\"https://en.wikipedia.org/wiki/Bucket_sort\">bucket sort</a> and <a href=\"https://en.wikipedia.org/wiki/Radix_sort\">radix sort</a></li>\n      </ul>\n    </li>\n    <li>Week 2, Monday (Aug 11)\n      <ul>\n        <li>What is a data structure?</li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">Arrays</a> and <a href=\"https://en.wikipedia.org/wiki/Linked_list\">linked lists</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/ArrayList\">ArrayList</a> data structure</li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\">Amortized analysis</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29\">Stacks</a> and <a href=\"https://en.wikipedia.org/wiki/Queue_%28data_structure%29\">queues</a></li>\n      </ul>\n    </li>\n    <li>Week 2, Wednesday (Aug 13)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Row-major_order\">Multidimensional arrays</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Binary_trees\">Rooted binary trees</a></li>\n        <li>External vs. Internal nodes</li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Depth_first_search\">Depth-first tree traversal</a>: preorder, postorder</li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">Breadth-first tree traversal</a></li>\n      </ul>\n    </li>\n    <li>Week 2, Friday (Aug 15)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Binary_search_tree\">Binary search trees</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Avl_tree\">AVL Trees</a> (<a href=\"http://www.qmatica.com/DataStructures/Trees/AVL/AVLTree.html\">Visualization</a>)</li>\n        <li>The balance condition</li>\n      </ul>\n    </li>\n    <li>Week 3, Monday (Aug 18)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Skip_list\">Skip list</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Binary_heap\">Binary heap</a></li>\n      </ul>\n    </li>\n    <li>Week 3, Wednesday (Aug 20)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Binary_heap#Heap_implementation\">Implementing binary heaps as arrays</a></li>\n        <li>Review for midterm</li>\n      </ul>\n    </li>\n    <li>Week 3, Friday (Aug 22)\n      <ul>\n        <li>Midterm</li>\n      </ul>\n    </li>\n    <li>Week 4, Monday (Aug 25)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Hash_function\">Hash functions</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Tabulation_hashing\">Tabulation hashing</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Hash_table#Separate_chaining\">Hashing with chaining</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Linear_probing\">Hashing with linear probing</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Cuckoo_hashing\">Cuckoo hashing</a> Note: the link uses one table instead of two tables like I did in class.</li>\n      </ul>\n    </li>\n    <li>Week 4, Wednesday (Aug 27)\n      <ul>\n        <li>Representing graphs: <a href=\"https://en.wikipedia.org/wiki/Adjacency_list\">Adjacency list</a>, <a href=\"https://en.wikipedia.org/wiki/Adjacency_matrix\">adjacency matrix</a>, <a href=\"https://www.python.org/doc/essays/graphs/\">van Rossum representation</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">Depth first search</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">Breadth first search</a></li>\n      </ul>\n    </li>\n    <li>Week 4, Friday (Aug 29)\n      <ul>\n        <li><a href=\"http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra\u2019s algorithm</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\">Bellman-Ford algorithm (briefly)</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Connected_component_%28graph_theory%29\">Connected components</a></li>\n      </ul>\n    </li>\n    <li>Week 5, Monday (Sep 1)\n      <ul>\n        <li><strong>Holiday</strong></li>\n      </ul>\n    </li>\n    <li>Week 5, Wednesday (Sep 3)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\">Bellman-Ford algorithm (more)</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\">Minimum spanning tree</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\">Kruskal\u2019s algorithm</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\">Union find data structure</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Ackermann_function\">Inverse Ackermann function (Not on final)</a></li>\n      </ul>\n    </li>\n    <li>Week 5, Friday (Sep 5)\n      <ul>\n        <li><a href=\"https://en.wikipedia.org/wiki/Directed_graph\">Directed graphs</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">Strong connectivity</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\">Directed acyclic graphs</a></li>\n        <li><a href=\"https://en.wikipedia.org/wiki/Topological_sorting\">Topologically sorting</a></li>\n        <li>Review for final</li>\n      </ul>\n    </li>\n    <li>Week 6, Wednesday (Sep 10)\n      <ul>\n        <li><strong>Final Exam</strong></li>\n      </ul>\n    </li>\n  </ul>\n  \n  <h2 id=\"example-code\">Example Code</h2>\n  <ul>\n    <li><a href=\"examples/example_queue.tar.gz\">Example queue</a>: Template queue example Zach coded in lab.</li>\n  </ul>\n  \n  <h2 id=\"projects\">Projects</h2>\n  <p>All of these projects will be coded entirely in C++, specifically C++14. Programming in C++ requires a level of care beyond that required in a higher level language like Python. So expect the project to take more time than than your previous programming projects. If you have prior experience programming in C, make sure you are programming your projects using C++. In general, make sure you start your project early to allow time for debugging.</p>\n  \n  <p>Your projects will be evaluated based on their <em>correctness</em> and <em>quality</em>.  Specifically, your projects will be evaluated on a 30-point scale. The break down of the points will fall into two categories: correctness and quality.</p>\n  \n  <ul>\n    <li>Correctness (20 points): Does the program compiles, run without error, and meet specifications?</li>\n    <li>Quality (10 points): Is the code readable, well-organized, and easily modifiable?</li>\n  </ul>\n  \n  <p>If your submit code that does not compile, you score will be severely reduced and you may receive a zero on the project. In this course, our target platform will be the Xubuntu 14.04 virtual machine distributed to the class. If your project does not compile on this platform with the build scripts supplied with the project, then it does not compile as far as we are concerned (see <a href=\"project0/\">Project 0</a> for more information on our virtual machine).</p>\n  \n  <p>Projects are due at 11:50pm on their due date (found on the project\u2019s webpage), with a ten minute grace period.  You will be allowed one 48 hour extension during the course. You are not required to notify us that you are going to use your extension. The first project you submit late will fall under the 48 hour extension. Other than this policy, late work will not be accepted.</p>\n  \n  <p>All projects will be submitted as a single file created by the gather script to the eee dropbox for the course (see <a href=\"project0/\">Project 0</a> for details). If a project is submitted in a different format, your score will be reduced and you may receive a zero. Under <em>no circumstances</em> will a project be graded if it is submitted via email. You are responsible for submitting the version of the project you want graded. Accidentally submitting the wrong version is <em>not</em> considered grounds for a regrade.</p>\n  \n  <ul>\n    <li>Project 0: <a href=\"project0/\">Adapting to your environment</a></li>\n    <li>Project 1: <a href=\"project1/\">Sorting lab</a></li>\n    <li>Project 2: <a href=\"project2/\">Sudoku solver</a></li>\n    <li>Project 3: <a href=\"project3/\">Skiplist</a></li>\n    <li>Project 4: <a href=\"project4/\">Shortest paths</a></li>\n  </ul>\n  \n  <h2 id=\"academic-honesty\">Academic honesty</h2>\n  <p>As a student in this course, you are expected to understand and follow the academic honest policies of the University of California, Irvine and the Bren School of Information and Computer Science. Please take a few minutes to familiarize yourself with these <a href=\"http://www.ics.uci.edu/ugrad/policies/#03\">policies</a>.</p>\n  \n  <p>All of your submitted code is expected to be completed solely by you without outside assistance. Sharing code with students in the class is not permitted. Of course, high-level discussion of course material is permitted and encouraged. All submissions will be analyzed by automated plagiarism detection software, which detects similarities in your code with other students code (this quarter and in the past) and code available on the internet. Similarly, in-class exams are expected to be an individual effort. In addition, all exams will be closed-notes and closed-book.</p>\n  \n  <p>Violators of academic honesty policies will be reported and are subject to the penalties described in the policies linked above.</p>\n  \n  <p>Overall, a bad course grade is nowhere near as bad as getting caught cheating.</p>\n  \n  <h2 id=\"accommodations-for-disabilities\">Accommodations for disabilities</h2>\n  <p>If you feel that you may need an accommodation based on the impact of a disability, you should contact me privately to discuss these specific needs. Also, contact the Disability Services Center <a href=\"http://www.disability.uci.edu\">online</a> or by phone at (949) 824-7494 as soon as possible to better ensure that such accommodations, such as alternative test-taking environments or note-taking services, can be arranged for you in a timely way.</p>\n \n</body>\n\n</html>\n", "id": 2881.0}