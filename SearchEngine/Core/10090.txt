{"text": "Informatics 42 Winter 2 12 David G Kay UC Irvine Lab Assignment B Anteater Bed and Breakfast This assignment is due at the end of lab on Monday February 6 Assignment summary You will write a program to keep track of reservations at a small bed and breakfast hotel This assignment is divided into six required stages and optional seventh stage Each succeeding stage is built upon what you have already written for the previous stage We expect you to design write and test this program according to these stages first get the first stage program working then modify it to satisfy the second stage and so on As always be sure to keep a copy of each completed stage That way if you decide you ve gotten off on the wrong track for a stage you can start again easily from the end of the previous stage without the painstaking task of removing each addition You should make sure that each stage is entirely correct and working perfectly before you go on to the next As you complete each stage you must demonstrate briefly to your TA or tutor that it works correctly before you go on to the following stage What to turn in On Checkmate a single Python file containing your last stage code Grading Your grade depends on organized development did you design and debug each stage in sequence completeness does your program do everything the specification requires correctness does it produce the correct results quality and clarity of your output good modularity good data organization using data structures appropriately and good programming style are your identifier names descriptive is your organization clea You will receive appropriate partial credit for each stage you complete correctly You will receive no credit for work on a later stage if the previous stages are incomplete or incorrect The whole point of incremental development i e stages is to keep a programmer from biting off more than he or she can chew Statement of the problem UCI has just started a program in hotel and restaurant management its dean has established a small bed and breakfast hotel as a lab for the program s students The dean has asked you to write the reservations software for this new inn which will be called the Anteater BandB Your program will keep track of the rooms available for rent these vary since sometimes a room is closed for redecoration and the reservations that guests have made for these rooms When the full Anteater BandB system is completed it may have a graphical user interface but for now your program will be a batch program this means that you will read all of your input from an external data file and produce output as described below You could easily convert this program to an interactive one with a fancy user interface where the program presents the user with a menu of commands accepts the user s selection prompts the user for whatever additional information the command requires and then displays the results of that command We made this assignment a batch program for three reasons First it s extra work for you to write the menu printing and input prompting commands some of which you have already done in other assignments It s easier simply to assume that the data appears in the correct format in the input files Second it gives you practice learning how to read data from external text files Third testing your program will be much easier when you can create files of test data rather than typing in each test interactively every time The input for this program comes from a single file which consists of an unlimited number of input command lines We will describe the various commands below for each stage you will implement or modify a few more commands Stage I For this stage your program will keep track of the rooms that are available This stage implements four commands as described below On each command line the first two non whitespace characters are the command command letters may be upper or lower case NB for add a new bedroom followed by an integer room number in the range 1 999 Add a new bedroom with the specified room number LB for list bedrooms Print a list of the bedrooms currently available The input file may contain any number of these commands in any order each LB command prints a list of available bedrooms based on what has been added as of that point See the sample output below for the format of the printed bedroom list For this stage it doesn t matter what order the bedrooms appear in PL for print line followed by any text Simply print or echo a line copying the input not counting the PL and leading whitespace to the output You ll find it useful in testing and it s also a simple way to make the program s reports clearer or fancier Comment followed by any text Like comments in a program comment lines don t have any effect on the program s behavior they just serve as annotations in the command file Below is a sample input file for this stage This is a sample command file for the Anteater BandB Stage I PL A well written program works gracefully with empty lists Lb PL Now let s add a bedroom NB 1 1 LB And some more NB 1 4 Extra blanks around the command should be ignored nb 1 2 NB 2 1 Nb 2 3 LB PL Thank you for using the Anteater BandB Reservation System That s the end of the sample data for Stage I From this input file your program should produce the following output Here is a list of available bedrooms before adding any Number of bedrooms in service Number of bedrooms in service 1 1 1 Number of bedrooms in service 5 1 1 1 4 1 2 2 1 2 3 Thank you for using the Anteater BandB Reservation System Stage II Each stage of this assignment will continue to handle all the commands of the previous stages of course For this stage your program will handle deletions from the list of available bedrooms DB for delete bedroom followed by a bedroom number Delete the specified room from the list Print an error message if the specified room isn t on the list Here is some sample input for this stage This is a sample command file for the Anteater BandB Stage II First add some bedrooms NB 3 1 nb 3 2 nb 3 3 Now list what we have PL First list of available bedrooms LB Next delete one DB 3 2 And show the list reflecting the deletion PL List of available bedrooms after deleting one LB Try to delete a bedroom that doesn t exist and get an error message DB 4 5 Now add some more NB 3 2 NB 3 4 NB 3 5 PL List of available bedrooms LB We delete a bedroom db 3 1 we add another to the list NB 3 7 PL Another list having deleted one and added another LB PL Thank you for choosing the Anteater BandB Reservation System That s the end of the sample data for Stage II For the above input your program should produce the following output First list of available bedrooms Number of bedrooms in service 3 3 1 3 2 3 3 List of available bedrooms after deleting one Number of bedrooms in service 2 3 1 3 3 Sorry can t delete room 4 5 it is not in service now List of available bedrooms Number of bedrooms in service 5 3 4 3 5 3 1 3 2 3 3 Another list having deleted one and added another Number of bedrooms in service 5 3 2 3 3 3 4 3 5 3 7 Thank you for choosing the Anteater BandB Reservation System Stage III For this stage your program will keep track of reservations for specific rooms on specific dates The first new command for this stage adds a reservation NR followed by a bedroom number then an arrival date in the form mm dd yyyy then a departure date in the form mm dd yyyy then the guest s name Add a new reservation for the specified room on the specified dates Your program will keep track of all the reservations An attempt to reserve a room that isn t on the list of available rooms should produce an error message Note that available means the same thing here that it has in the previous stages Any room that is in service whether reserved by a guest or not is available At this stage your program is not checking for occupied or free rooms At this stage your program does not have to perform any checking that the dates are valid nor does it have to identify conflicting reservations Each new reservation prints and saves a unique confirmation number so the user can refer to it later to cancel it for example this confirmation number should just be 1 for the first reservation added 2 for the next and so on always increasing To make your coding task easier import the Python library datetime and use it for date calculations The split function with a argument will be helpful too Also handle these commands LR for list reservations Print all the reservations DR for delete a reservation followed by the confirmation number of a reservation Deletes the specified reservation If a DR command gives a confirmation number that isn t in the list of reservations your program should produce an error message Here is some sample input for this stage It s a common temptation to use an elaborate test case like this one as the first test of your newly modified program It s all right to indulge that temptation once if you must of course your test will fail Newly modified programs always have bugs At that point however you should try a succession of smaller more circumscribed tests rather than ramming this same large test through the program over and over again until you finally force it through successfully It s more productive more thorough and better organized in the long run to test each feature separately before going on to complex combinations By the same token however adequate testing involves more than this single combination test case this one case does not test everything that needs testing for this stage This is a sample command file for the Anteater BandB Stage III First add some bedrooms NB 3 1 nb 3 2 nb 3 3 Now make some reservations NR 3 3 1 17 2 12 1 19 2 12 Conrad Hilton NR 3 3 12 31 2 12 1 2 2 13 Cesar Ritz NR 3 1 11 3 2 12 12 15 2 17 Leona Helmsley NR 777 1 1 2 12 1 2 2 12 Ian Schrager LR Next delete one DR 2 And show the list reflecting the deletion PL List of reservations after deleting one LR Now try to delete that one again which should give an error DR 2 Now add another two reservations NR 3 2 1 1 2 13 2 15 2 13 Howard Johnson NR 3 3 11 25 2 12 11 3 2 12 Sultan of Brunei And try two more bogus deletions DR 2 DR 17 Finally list the remaining reservations LR PL Thank you for perusing the Anteater BandB Reservation System That s the end of the sample data for Stage III The sample input above should produce results as shown below Reserving room 3 3 for Conrad Hilton Confirmation 1 arriving 1 17 2 12 departing 1 19 2 12 Reserving room 3 3 for Cesar Ritz Confirmation 2 arriving 12 31 2 12 departing 1 2 2 13 Reserving room 3 1 for Leona Helmsley Confirmation 3 arriving 11 3 2 12 departing 12 15 2 17 Sorry can t reserve room 777 room not in service Number of reservations 3 No Rm Arrive Depart Guest 1 3 3 1 17 2 12 1 19 2 12 Conrad Hilton 2 3 3 12 31 2 12 1 2 2 13 Cesar Ritz 3 3 1 11 3 2 12 12 15 2 17 Leona Helmsley List of reservations after deleting one Number of reservations 2 No Rm Arrive Depart Guest 1 3 3 1 17 2 12 1 19 2 12 Conrad Hilton 3 3 1 11 3 2 12 12 15 2 17 Leona Helmsley Sorry can t cancel reservation no confirmation number 2 Reserving room 3 2 for Howard Johnson Confirmation 4 arriving 1 1 2 13 departing 2 15 2 13 Reserving room 3 3 for Sultan of Brunei Confirmation 5 arriving 11 25 2 12 departing 11 3 2 12 Sorry can t cancel reservation no confirmation number 2 Sorry can t cancel reservation no confirmation number 17 Number of reservations 4 No Rm Arrive Depart Guest 1 3 3 1 17 2 12 1 19 2 12 Conrad Hilton 3 3 1 11 3 2 12 12 15 2 17 Leona Helmsley 4 3 2 1 1 2 13 2 15 2 13 Howard Johnson 5 3 3 11 25 2 12 11 3 2 12 Sultan of Brunei Thank you for perusing the Anteater BandB Reservation System Stage IV In this stage your program will check each command for various inconsistencies and impossible situations First your program should reject any reservation whose arrival date is later than the departure date or any reservation where the guest arrives and departs on the same day we re running a respectable establishment Check the documentation for the datetime library for functions that help you with this Your program must also check each reservation for a given bedroom for conflicts with any existing reservations for that bedroom you can t rent the same room to two different guests on the same night Note however that one reservation can have the same arrival date as another reservation s departure date since the departure date is the date the guest leaves so the room is vacant that night Next your program should print an error message if the user attempts to add a bedroom with the same number as one that is already on the list Finally if the user deletes a bedroom your program should cancel all the reservations for that bedroom printing an appropriate message for each cancellation Here is some sample input for this stage This is a sample command file for the Anteater BandB Stage IV First add some bedrooms NB 1 1 nb 1 2 nb 1 3 Now make some reservations NR 1 1 12 17 2 12 12 19 2 12 Claude Crillon NR 1 2 12 31 2 12 1 5 2 13 Donald Dorchester Try a few reservations that go backwards in time NR 1 3 11 3 2 12 12 15 1989 Bonnie Bonaventure NR 1 3 12 17 2 12 11 18 2 12 Osamu Okura NR 1 3 12 31 2 12 12 25 2 12 Penelope Peninsula And one that comes and goes on the same date NR 1 3 12 1 2 12 12 1 2 12 Randolph Raffles LR Now try some conflicting reservations One that overlaps exactly nr 1 1 12 17 2 12 12 19 2 12 George Cinq One that overlaps a couple of days nr 1 2 12 25 2 12 1 1 2 13 Renata Rossiya One that s completely contained nr 1 2 1 1 2 13 1 3 2 13 Mark Hopkins And one that doesn t conflict barely nr 1 2 12 25 2 12 12 31 2 12 Belle Air LR Now try to add an already existing bedroom nb 1 3 Finally delete a bedroom which cancels all its reservations db 1 2 nr 1 3 12 17 2 12 12 19 2 12 Alfreda Algonquin PL The final list of reservations LR PL Thank you for confusing the Anteater BandB Reservation System That s the end of the sample data for Stage IV The sample input above should produce results as shown below Reserving room 1 1 for Claude Crillon Confirmation 1 arriving 12 17 2 12 departing 12 19 2 12 Reserving room 1 2 for Donald Dorchester Confirmation 2 arriving 12 31 2 12 departing 1 5 2 13 Sorry can t reserve room 1 3 11 3 2 12 to 12 15 1989 can t leave before you arrive Sorry can t reserve room 1 3 12 17 2 12 to 11 18 2 12 can t leave before you arrive Sorry can t reserve room 1 3 12 31 2 12 to 12 25 2 12 can t leave before you arrive Sorry can t reserve room 1 3 12 1 2 12 to 12 1 2 12 can t arrive and leave on the same day Number of reservations 2 No Rm Arrive Depart Guest 1 1 1 12 17 2 12 12 19 2 12 Claude Crillon 2 1 2 12 31 2 12 1 5 2 13 Donald Dorchester Sorry can t reserve room 1 1 12 17 2 12 to 12 19 2 12 it s already booked Conf 1 Sorry can t reserve room 1 2 12 25 2 12 to 1 1 2 13 it s already booked Conf 2 Sorry can t reserve room 1 2 1 1 2 13 to 1 3 2 13 it s already booked Conf 2 Reserving room 1 2 for Belle Air Confirmation 3 arriving 12 25 2 12 departing 12 31 2 12 Number of reservations 3 No Rm Arrive Depart Guest 1 1 1 12 17 2 12 12 19 2 12 Claude Crillon 2 1 2 12 31 2 12 1 5 2 13 Donald Dorchester 3 1 2 12 25 2 12 12 31 2 12 Belle Air Sorry can t add room 1 3 again it s already on the list Deleting room 1 2 forces cancellation of this reservation Donald Dorchester arriving 12 31 2 12 and departing 1 5 2 13 Conf 2 Deleting room 1 2 forces cancellation of this reservation Belle Air arriving 12 25 2 12 and departing 12 31 2 12 Conf 3 Reserving room 1 3 for Alfreda Algonquin Confirmation 4 arriving 12 17 2 12 departing 12 19 2 12 The final list of reservations Number of reservations 2 No Rm Arrive Depart Guest 1 1 1 12 17 2 12 12 19 2 12 Claude Crillon 4 1 3 12 17 2 12 12 19 2 12 Alfreda Algonquin Thank you for confusing the Anteater BandB Reservation System Stage V For this stage your program will produce various information listings RB for reservations by bedroom followed by a number Lists all reservations for a given bedroom RC for reservations by guest followed by a string List all reservations for a given guest LA for list arrivals followed by a date in the same mm dd yyyy form as before Print a list of all guests arriving on the specified date LD for list departures followed by a date in the same mm dd yy form as before Print a list of all guests departing on the specified date LF for list free bedrooms followed by two dates List all bedrooms that are free each night for a guest arriving on the first date and departing on the second LO for list occupied bedrooms followed by two dates List all bedrooms that are occupied for at least one night between the given arrival and departure dates Here is some sample input for this stage This is a sample command file for the Anteater BandB Stage V First add some bedrooms NB 5 1 nb 5 2 nb 5 3 nb 5 4 Now make some reservations NR 5 3 12 1 2 12 12 15 2 12 I Joliet nr 5 2 1 1 2 13 1 15 2 13 I Joliet nr 5 2 12 1 2 12 12 14 2 12 K Leavenworth nr 5 2 12 1 2 13 12 14 2 13 K Leavenworth nr 5 4 2 15 2 13 12 14 2 13 C S Quentin LR List reservations for a bedroom RB 5 2 List reservations for two guests RC K Leavenworth RC C S Quentin List everyone arriving December 1 2 12 LA 12 1 2 12 List everyone i e nobody arriving December 9 LA 12 9 2 12 List everyone departing December 14 2 13 LD 12 14 2 13 List the free rooms when the hotel is empty LF 12 2 2 12 12 25 2 12 List the free rooms when some are reserved LF 12 12 2 12 12 2 2 12 List the free rooms on a single date Remember that a room isn t occupied on the night of a departure LF 12 14 2 12 12 14 2 12 List occupied rooms on various dates LO 12 14 2 12 12 14 2 12 LO 12 12 2 12 12 2 2 12 LO 12 2 2 12 12 25 2 12 PL Thank you for abusing the Anteater BandB Reservation System That s the end of the sample data for Stage V The sample input above should produce results as shown below Reserving room 5 3 for I Joliet Confirmation 1 arriving 12 1 2 12 departing 12 15 2 12 Reserving room 5 2 for I Joliet Confirmation 2 arriving 1 1 2 13 departing 1 15 2 13 Reserving room 5 2 for K Leavenworth Confirmation 3 arriving 12 1 2 12 departing 12 14 2 12 Reserving room 5 2 for K Leavenworth Confirmation 4 arriving 12 1 2 13 departing 12 14 2 13 Reserving room 5 4 for C S Quentin Confirmation 5 arriving 2 15 2 13 departing 12 14 2 13 Number of reservations 5 No Rm Arrive Depart Guest 1 5 3 12 1 2 12 12 15 2 12 I Joliet 2 5 2 1 1 2 13 1 15 2 13 I Joliet 3 5 2 12 1 2 12 12 14 2 12 K Leavenworth 4 5 2 12 1 2 13 12 14 2 13 K Leavenworth 5 5 4 2 15 2 13 12 14 2 13 C S Quentin Reservations for room 5 2 1 1 2 13 to 1 15 2 13 I Joliet 12 1 2 12 to 12 14 2 12 K Leavenworth 12 1 2 13 to 12 14 2 13 K Leavenworth Reservations for K Leavenworth 12 1 2 12 to 12 14 2 12 room 5 2 12 1 2 13 to 12 14 2 13 room 5 2 Reservations for C S Quentin 2 15 2 13 to 12 14 2 13 room 5 4 Guests arriving on 12 1 2 12 K Leavenworth room 5 2 I Joliet room 5 3 Guests arriving on 12 9 2 12 Guests departing on 12 14 2 13 C S Quentin room 5 4 K Leavenworth room 5 2 Bedrooms free between 12 2 2 12 to 12 25 2 12 5 4 5 1 5 2 5 3 Bedrooms free between 12 12 2 12 to 12 2 2 12 5 4 5 1 Bedrooms free between 12 14 2 12 to 12 14 2 12 5 4 5 1 5 2 Bedrooms occupied between 12 14 2 12 to 12 14 2 12 5 3 Bedrooms occupied between 12 12 2 12 to 12 2 2 12 5 2 5 3 Bedrooms occupied between 12 2 2 12 to 12 25 2 12 Thank you for abusing the Anteater BandB Reservation System Stage VI This stage has two parts First the LB command should print the room list in order by room number and the LR command should list the reservations in order by arrival date The second part of this stage makes the file handling more realistic In a real hotel the room reservation system must save the reservation information at the end of the day to be used as the following day s starting data Before exiting your program should write out the room and reservation information to an external file as a series of NB and NR commands in the same format as the input command file You should not automatically write the end of day data on top of the original input file prompt the user for a new file name Thereafter when your program starts it will prompt the user for the file containing the previous day s ending data and read in those commands before it asks for the current day s command file and handles the commands there In addition to the program s output for the four test cases you will turn in you should also turn in a printed copy of the final end of day files for each of those four test cases In fact there is an inconsistency here because the NR command doesn t have space for an existing reservation s confirmation number Thus any carried forward reservation will get a new confirmation number and the number the guest has won t be any good Optionally propose a solution to this problem you don t have to implement it but it should be something you could implement if you had a few more days Stage VII optional In this stage before cancelling a reservation you check to see if it can be moved to another room First check if there s another room free for the entire duration of the reservation and move it there If no single room can accommodate the reservation but if it could be split between two rooms do that Only if that s not possible cancel it The following usual warnings advice policies and practices apply to this assignment Get started early Read and re read the specifications Do this with a partner you haven t worked with yet this quarter and let the TA know who your partner is Submit all your Python source code in one py file via Checkmate Each pair should submit just one solution The usual grading criteria for lab assignments apply Fill out a partner evaluation at EEE Written by David G Kay Winter 2 5 based on earlier assignments Modified by David G Kay for Python Winter 2 12 ", "_id": "http://www.ics.uci.edu/~kay/courses/i42/hw/labB.html", "title": "lab assignment b", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, January 20, 2006 10:57 AM\">\n<TITLE>Lab Assignment B</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D2442422\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, Java, OOP\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"A lab assignment for Informatics 42, a second-quarter course in computer science for Informatics majors in the Bren School of Information and Computer Sciences, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2005 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n  &bull; UC Irvine</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment B: Anteater Bed and Breakfast</B></FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">This assignment is due at the end of lab on\nMonday, February 6. </FONT></P>\n<title></title>\n<p><strong>Assignment summary:</strong> You will write a program to keep track\n  of reservations at a small \"bed and breakfast\" hotel.</p>\n<p>\nThis assignment is divided into six required stages and optional\nseventh stage. Each succeeding stage is built upon what you\nhave already written for the previous stage. We expect you to design,\nwrite, and test this program according to these stages\u2014first get the\nfirst-stage program working, then modify it to satisfy the second\nstage, and so on.  As always, be sure to keep a copy of each completed\nstage. That way, if you decide you've gotten off on the wrong track\nfor a stage, you can start again easily from the end of the previous\nstage, without the painstaking task of removing each addition.\nYou should make sure that each stage is entirely correct and working\nperfectly before you go on to the next. As you complete each stage,\nyou must demonstrate briefly to your TA or tutor that it works\ncorrectly before you go on to the following stage. </p>\n\n<p><strong>What to turn in:</strong>\nOn Checkmate, a single Python file containing your last-stage code.\n  </p>\n<p><strong>Grading:</strong> Your grade depends on organized development (did you design and debug each stage in sequence), completeness (does your program do everything the specification requires), correctness (does it produce the correct results), quality and clarity of your output, good modularity, good data organization (using data structures appropriately), and good programming style (are your identifier names descriptive, is your organization clea).\n  \n  You will receive appropriate partial credit for each stage you\n  complete correctly. You will receive no credit for work on a later\n  stage if the previous stages are incomplete or incorrect. The whole\n  point of incremental development (i.e., stages) is to keep a\nprogrammer from biting off more than he or she can chew.</p>\n\n<p><strong>Statement of the problem:</strong> UCI has just started a\n  program in hotel and restaurant management; its dean has established\n  a small \"bed and breakfast\" hotel as a lab for the program's\n  students. The dean has asked you to write the reservations software\n  for this new inn, which will be called the Anteater BandB.</p>\n\n<p>Your program will keep track of the rooms available for rent (these\n  vary, since sometimes a room is closed for redecoration) and the\n  reservations that guests have made for these rooms.</p>\n\n<p>When the full Anteater BandB system is completed, it may have a\n  graphical user interface, but for now your program will be a batch\n  program; this means that you will read all of your input from an\n  external data file and produce output as described below.</p>\n\n<p>You could easily convert this program to an interactive one with a\n  fancy user interface, where the program presents the user with a\n  menu of commands, accepts the user's selection, prompts the user for\n  whatever additional information the command requires, and then\n  displays the results of that command. We made this assignment a\n  batch program for three reasons: First, it's extra work for you to\n  write the menu- printing and input-prompting commands, some of which\n  you have already done in other assignments. It's easier simply to\n  assume that the data appears in the correct format in the input\n  files. Second, it gives you practice learning how to read data from\n  external text files. Third, testing your program will be much easier\n  when you can create files of test data rather than typing in each\n  test interactively every time.</p>\n\n<p>The input for this program comes from a single file, which\n  consists of an unlimited number of input command lines. We will\n  describe the various commands below; for each stage, you will\nimplement (or modify) a few more commands</p>\n<p><strong>Stage I:</strong> For this stage, your program will keep\n  track of the rooms that are available. This stage implements four\n  commands, as described below. On each command line, the first two non-whitespace characters are the command, command letters may be upper or lower case.\n<dl>\n<dt>NB</dt> <dd>(for \"add a new bedroom\") followed by\nan integer room number (in the range 1\u2013999). Add a new bedroom with\nthe specified room number.</dd>\n<dt>LB</dt><dd>(for \"list bedrooms\").  Print a list of the bedrooms currently available.\nThe input file may contain any number of these commands in any order;\n    each LB command prints a list of available bedrooms based on what\n    has been added as of that point. See the sample output below for\n    the format of the printed bedroom list. For this stage, it doesn't\n    matter what order the bedrooms appear in.</dd>\n<dt>PL</dt><dd>(for \"print line\"), followed by any text. Simply print (or \"echo\") a line,\ncopying the input (not counting the PL and leading whitespace) to the output. You'll find it useful in testing, and it's also a simple way to make the program's reports clearer or fancier.</dd>\n<dt>**</dt><dd>Comment, followed by any text. Like comments in a\n    program, comment lines don't have any effect on the program's\n    behavior; they just serve as annotations in the command\n    file. </dd></dl>\nBelow is a sample input file for this stage.\n<pre><code>** This is a sample command file for the Anteater BandB, Stage I\nPL ***********************************************************\n** A well-written program works gracefully with empty lists.\nLb\nPL ***********************************************************\n** Now let's add a bedroom:\nNB 101\nLB\n** And some more:\nNB 104\n** Extra blanks around the command should be ignored\nnb    102\n    NB 201\n    Nb      203\n LB\nPL Thank you for using the Anteater BandB Reservation System!\n** That's the end of the sample data for Stage I.\n</code></pre>\nFrom this input file, your program should produce the following\noutput:\n<pre><code>***********************************************************\nHere is a list of available bedrooms (before adding any!)\nNumber of bedrooms in service:  0\n------------------------------------\n***********************************************************\nNumber of bedrooms in service:  1\n------------------------------------\n101\nNumber of bedrooms in service:  5\n------------------------------------\n101\n104\n102\n201\n203\nThank you for using the Anteater BandB Reservation System!</code></pre>\n<strong>Stage II:</strong> Each stage of this assignment will\n  continue to handle all the commands of the previous stages, of\n  course. For this stage, your program will handle deletions from the\n  list of available bedrooms.\n<dl>\n<dt>DB</dt><dd>(for \"delete bedroom\"), followed by a bedroom number.\nDelete the specified room from the list.  Print an error message if\n    the specified room isn't on the list.</dt></dl>\nHere is some sample input for this stage:\n<pre><code>** This is a sample command file for the Anteater BandB, Stage II\n** First, add some bedrooms:\nNB 301\nnb 302\nnb 303\n** Now list what we have:\nPL First list of available bedrooms:\nLB\n** Next, delete one:\nDB 302\n** And show the list reflecting the deletion:\nPL List of available bedrooms after deleting one:\nLB\n** Try to delete a bedroom that doesn't exist, and get an error message.\nDB 405\n** Now add some more:\nNB 302\nNB 304\nNB 305\nPL List of available bedrooms:\nLB\n** We delete a bedroom ...\ndb   301\n** ... we add another to the list.\nNB 307\nPL Another list, having deleted one and added another:\nLB\nPL Thank you for choosing the Anteater BandB Reservation System!\n** That's the end of the sample data for Stage II.\n</code></pre>\nFor the above input, your program should produce the following output:\n<pre><code>First list of available bedrooms:\nNumber of bedrooms in service:  3\n------------------------------------\n301\n302\n303\nList of available bedrooms after deleting one:\nNumber of bedrooms in service:  2\n------------------------------------\n301\n303\nSorry, can't delete room 405; it is not in service now\nList of available bedrooms:\nNumber of bedrooms in service:  5\n------------------------------------\n304\n305\n301\n302\n303\nAnother list, having deleted one and added another:\nNumber of bedrooms in service:  5\n------------------------------------\n302\n303\n304\n305\n307\nThank you for choosing the Anteater BandB Reservation System!\n</code></pre>\n<strong>Stage III:</strong> For this stage, your program will keep\n  track of reservations for specific rooms on specific dates. The\n  first new command for this stage adds a reservation:\n<dl>\n<dt>NR</dt>\n<dd>(followed by a bedroom number, then an arrival date in the form\n  mm/dd/yyyy, then a departure date in the form mm/dd/yyyy, then the\n  guest's name):  Add a new reservation for the specified room on the\n  specified dates.\n</dd></dl>\nYour program will keep track of all the reservations.  An attempt\n  to reserve a room that isn't on the list of available rooms should\n  produce an error message. (Note that \"available\" means the same\n  thing here that it has in the previous stages: Any room that is \"in\n  service,\" whether reserved by a guest or not, is \"available.\" At\n  this stage your program is not checking for occupied or free\n  rooms.)</p>\n  <p>At this stage, your program does not have to perform any checking that the dates are valid, nor does it have to identify conflicting reservations. Each new reservation prints and saves a unique \"confirmation number\" so the user can refer to it later (to cancel it, for example); this confirmation number should just be 1 for the first reservation added, 2 for the next, and so on, always increasing.</p>\n<p>To make your coding task easier, import the Python\n  library <code>datetime</code> and use it for date\n  calculations. The <code>split</code> function with a <code>&quot;/&quot;</code> argument will be helpful, too.\n</p>\n<p>\nAlso handle these commands:\n<dl><dt>LR</dt><dd>(for \"list reservations\").  Print all the reservations.</dd>\n<dt>DR</dt><dd>(for \"delete a reservation\"), followed by the\n    confirmation number of a reservation.  Deletes the specified\n    reservation. If a DR command gives a confirmation number that isn't in the list of\n  reservations, your program should produce an error message.\n</dd>\n</dl>\nHere is some sample input for this stage.\n  [It's a common temptation to use an elaborate test case like this one\n  as the first test of your newly modified program. It's all right to\n  indulge that temptation once, if you must; of course, your test will\n  fail. Newly modified programs always have bugs. At that point,\n  however, you should try a succession of smaller, more circumscribed\n  tests, rather than ramming this same large test through the program\n  over and over again until you finally force it through\n  successfully. It's more productive, more thorough, and better\n  organized in the long run to test each feature separately before\n  going on to complex combinations. By the same token, however,\n  adequate testing involves more than this single combination test\n  case; this one case does not test everything that needs testing for\n  this stage.]\n<pre><code>** This is a sample command file for the Anteater BandB, Stage III\n** First, add some bedrooms:\nNB 301\nnb 302\nnb 303\n** Now make some reservations\nNR 303 10/17/2012 10/19/2012 Conrad Hilton\nNR 303 12/31/2012   1/2/2013 Cesar Ritz\nNR 301 11/3/2012  12/15/2017 Leona Helmsley\nNR 777 1/1/2012     1/2/2012 Ian Schrager\nLR\n** Next, delete one:\nDR 2\n** And show the list reflecting the deletion:\nPL List of reservations after deleting one:\nLR\n** Now try to delete that one again (which should give an error):\nDR 2\n** Now add another two reservations:\nNR 302 1/1/2013  2/15/2013 Howard Johnson\nNR 303 11/25/2012 11/30/2012 Sultan of Brunei\n** And try two more bogus deletions:\nDR 2\nDR 17\n** Finally, list the remaining reservations:\nLR\nPL Thank you for perusing the Anteater BandB Reservation System!\n** That's the end of the sample data for Stage III.\n</code></pre>\nThe sample input above should produce results as shown below:\n<pre><code>Reserving room 303 for Conrad Hilton -- Confirmation #1\n    (arriving 10/17/2012, departing 10/19/2012)\nReserving room 303 for Cesar Ritz -- Confirmation #2\n    (arriving 12/31/2012, departing 1/2/2013)\nReserving room 301 for Leona Helmsley -- Confirmation #3\n    (arriving 11/3/2012, departing 12/15/2017)\nSorry; can't reserve room 777; room not in service\nNumber of reservations:  3\nNo. Rm. Arrive      Depart     Guest\n------------------------------------------------\n  1 303 10/17/2012 10/19/2012 Conrad Hilton\n  2 303 12/31/2012  1/ 2/2013 Cesar Ritz\n  3 301 11/ 3/2012 12/15/2017 Leona Helmsley\nList of reservations after deleting one:\nNumber of reservations:  2\nNo. Rm. Arrive      Depart     Guest\n------------------------------------------------\n  1 303 10/17/2012 10/19/2012 Conrad Hilton\n  3 301 11/ 3/2012 12/15/2017 Leona Helmsley\nSorry, can't cancel reservation; no confirmation number 2\nReserving room 302 for Howard Johnson -- Confirmation #4\n    (arriving 1/1/2013, departing 2/15/2013)\nReserving room 303 for Sultan of Brunei -- Confirmation #5\n    (arriving 11/25/2012, departing 11/30/2012)\nSorry, can't cancel reservation; no confirmation number 2\nSorry, can't cancel reservation; no confirmation number 17\nNumber of reservations:  4\nNo. Rm. Arrive      Depart     Guest\n------------------------------------------------\n  1 303 10/17/2012 10/19/2012 Conrad Hilton\n  3 301 11/ 3/2012 12/15/2017 Leona Helmsley\n  4 302  1/ 1/2013  2/15/2013 Howard Johnson\n  5 303 11/25/2012 11/30/2012 Sultan of Brunei\nThank you for perusing the Anteater BandB Reservation System!</code></pre>\n<p><strong>Stage IV:</strong> In this stage, your program will check each command for various inconsistencies and impossible situations.</p>\n<p>First, your program should reject any reservation whose arrival date\n  is later than the departure date, or any reservation where the\n  guest arrives and departs on the same day (we're running a\n  respectable establishment). [Check the documentation for the\n  <code>datetime</code> library for functions that help you with this.]</p>\n<p>Your program must also check each reservation for a given bedroom\n  for conflicts with any existing reservations for that bedroom; you\n  can't rent the same room to two different guests on the same\n  night. (Note, however, that one reservation can have the same\n  arrival date as another reservation's departure date, since the\n  departure date is the date the guest leaves, so the room is\n  vacant that night.)</p>\n<p>Next, your program should print an error message if the user\n  attempts to add a bedroom with the same number as one that is\n  already on the list.</p>\n<p>\nFinally, if the user deletes a bedroom, your program should cancel all\nthe reservations for that bedroom (printing an appropriate message for\neach cancellation).</p>\n<p>Here is some sample input for this stage:</p>\n<pre><code>** This is a sample command file for the Anteater BandB, Stage IV\n** First, add some bedrooms:\nNB 101\nnb 102\nnb 103\n** Now make some reservations:\nNR 101 12/17/2012 12/19/2012 Claude Crillon\nNR 102 12/31/2012  1/5/2013 Donald Dorchester\n** Try a few reservations that go backwards in time:\nNR 103 11/3/2012 12/15/1989 Bonnie Bonaventure\nNR 103 12/17/2012 11/18/2012 Osamu Okura\nNR 103 12/31/2012 12/25/2012 Penelope Peninsula\n** And one that comes and goes on the same date:\nNR 103 12/1/2012 12/1/2012 Randolph Raffles\nLR\n** Now try some conflicting reservations\n** One that overlaps exactly:\nnr 101 12/17/2012 12/19/2012 George Cinq\n** One that overlaps a couple of days:\nnr 102 12/25/2012  1/1/2013 Renata Rossiya\n** One that's completely contained:\nnr 102 1/1/2013 1/3/2013 Mark Hopkins\n** And one that doesn't conflict, barely:\nnr 102 12/25/2012 12/31/2012 Belle Air\nLR\n** Now try to add an already-existing bedroom:\nnb 103\n** Finally, delete a bedroom (which cancels all its reservations):\ndb 102\nnr 103 12/17/2012 12/19/2012 Alfreda Algonquin\nPL The final list of reservations:\nLR\nPL Thank you for confusing the Anteater BandB Reservation System!\n** That's the end of the sample data for Stage IV.\n</code></pre>\n<p> The sample input above should produce results as shown below:</p>\n<pre><code>\nReserving room 101 for Claude Crillon -- Confirmation #1\n    (arriving 12/17/2012, departing 12/19/2012)\nReserving room 102 for Donald Dorchester -- Confirmation #2\n    (arriving 12/31/2012, departing 1/5/2013)\nSorry, can't reserve room 103 (11/3/2012 to 12/15/1989);\n    can't leave before you arrive.\nSorry, can't reserve room 103 (12/17/2012 to 11/18/2012);\n    can't leave before you arrive.\nSorry, can't reserve room 103 (12/31/2012 to 12/25/2012);\n    can't leave before you arrive.\nSorry, can't reserve room 103 (12/1/2012 to 12/1/2012);\n    can't arrive and leave on the same day.\nNumber of reservations:  2\nNo. Rm. Arrive     Depart     Guest\n------------------------------------------------\n  1 101 12/17/2012 12/19/2012 Claude Crillon\n  2 102 12/31/2012  1/ 5/2013 Donald Dorchester\nSorry, can't reserve room 101 (12/17/2012 to 12/19/2012);\n   it's already booked (Conf. #1)\nSorry, can't reserve room 102 (12/25/2012 to  1/ 1/2013);\n   it's already booked (Conf. #2)\nSorry, can't reserve room 102 ( 1/ 1/2013 to  1/ 3/2013);\n   it's already booked (Conf. #2)\nReserving room 102 for Belle Air -- Confirmation #3\n    (arriving 12/25/2012, departing 12/31/2012)\nNumber of reservations:  3\nNo. Rm. Arrive     Depart     Guest\n------------------------------------------------\n  1 101 12/17/2012 12/19/2012 Claude Crillon\n  2 102 12/31/2012  1/ 5/2013 Donald Dorchester\n  3 102 12/25/2012 12/31/2012 Belle Air\nSorry, can't add room 103 again; it's already on the list.\nDeleting room 102 forces cancellation of this reservation:\n   Donald Dorchester arriving 12/31/2012 and departing  1/ 5/2013 (Conf. #2)\nDeleting room 102 forces cancellation of this reservation:\n   Belle Air arriving 12/25/2012 and departing 12/31/2012 (Conf. #3)\nReserving room 103 for Alfreda Algonquin -- Confirmation #4\n    (arriving 12/17/2012, departing 12/19/2012)\nThe final list of reservations:\nNumber of reservations:  2\nNo. Rm. Arrive     Depart     Guest\n------------------------------------------------\n  1 101 12/17/2012 12/19/2012 Claude Crillon\n  4 103 12/17/2012 12/19/2012 Alfreda Algonquin\nThank you for confusing the Anteater BandB Reservation System!\n</code></pre>\n<p><strong>Stage V:</strong> For this stage, your program\n will produce various information listings.</p>\n<dl>\n<dt>RB</dt>\n<dd>(for \"reservations by bedroom\"), followed by a number. Lists all reservations for a given bedroom.</dd>\n<dt>RC</dt>\n<dd>(for \"reservations by guest\"), followed by a string.  List all reservations for a given guest.</dd>\n<dt>LA</dt><dd>(for \"list arrivals\"), followed by a date in the same\n    mm/dd/yyyy form as before.  Print a list of all guests arriving\n    on the specified date.</dd>\n<dt>LD</dt><dd>(for \"list departures\"), followed by a date in the same\n    mm/dd/yy form as before. Print a list of all guests departing on\n    the specified date.</dd>\n<dt>LF</dt><dd>(for \"list free bedrooms\"), followed by two dates.\n    List all bedrooms that are free each night for a guest arriving on\n    the first date and departing on the second.\n</dd>\n<dt>LO</dt><dd> (for \"list occupied bedrooms\"), followed by two\n    dates.  List all bedrooms that are occupied for at least one night\n    between the given arrival and departure dates.\n</dd></dl>\n<p>Here is some sample input for this stage:</p>\n<pre><code>** This is a sample command file for the Anteater BandB, Stage V\n** First, add some bedrooms:\nNB 501\nnb 502\nnb 503\nnb 504\n** Now make some reservations\nNR 503 12/10/2012 12/15/2012 I. Joliet\nnr 502  1/10/2013  1/15/2013 I. Joliet\nnr 502 12/10/2012 12/14/2012 K. Leavenworth\nnr 502 12/10/2013 12/14/2013 K. Leavenworth\nnr 504  2/15/2013 12/14/2013 C. S. Quentin\nLR\n** List reservations for a bedroom\nRB 502\n** List reservations for two guests\nRC K. Leavenworth\nRC C. S. Quentin\n** List everyone arriving December 10, 2012\nLA 12/10/2012\n** List everyone (i.e. nobody) arriving December 9\nLA 12/9/2012\n** List everyone departing December 14, 2013\nLD 12/14/2013\n** List the free rooms when the hotel is empty\nLF 12/20/2012 12/25/2012\n** List the free rooms when some are reserved\nLF 12/12/2012 12/20/2012\n** List the free rooms on a single date\n** (Remember that a room isn't occupied on the night of a departure)\nLF 12/14/2012 12/14/2012\n** List occupied rooms on various dates\nLO 12/14/2012 12/14/2012\nLO 12/12/2012 12/20/2012\nLO 12/20/2012 12/25/2012\nPL Thank you for abusing the Anteater BandB Reservation System!\n** That's the end of the sample data for Stage V.\n</code></pre>\nThe sample input above should produce results as shown below:\n<pre><code>Reserving room 503 for I. Joliet -- Confirmation #1\n    (arriving 12/10/2012, departing 12/15/2012)\nReserving room 502 for I. Joliet -- Confirmation #2\n    (arriving 1/10/2013, departing 1/15/2013)\nReserving room 502 for K. Leavenworth -- Confirmation #3\n    (arriving 12/10/2012, departing 12/14/2012)\nReserving room 502 for K. Leavenworth -- Confirmation #4\n    (arriving 12/10/2013, departing 12/14/2013)\nReserving room 504 for C. S. Quentin -- Confirmation #5\n    (arriving 2/15/2013, departing 12/14/2013)\nNumber of reservations:  5\nNo. Rm. Arrive     Depart     Guest\n------------------------------------------------\n  1 503 12/10/2012 12/15/2012 I. Joliet\n  2 502  1/10/2013  1/15/2013 I. Joliet\n  3 502 12/10/2012 12/14/2012 K. Leavenworth\n  4 502 12/10/2013 12/14/2013 K. Leavenworth\n  5 504  2/15/2013 12/14/2013 C. S. Quentin\nReservations for room 502:\n    1/10/2013 to  1/15/2013:  I. Joliet\n   12/10/2012 to 12/14/2012:  K. Leavenworth\n   12/10/2013 to 12/14/2013:  K. Leavenworth\nReservations for K. Leavenworth:\n   12/10/2012 to 12/14/2012:  room 502\n   12/10/2013 to 12/14/2013:  room 502\nReservations for C. S. Quentin:\n    2/15/2013 to 12/14/2013:  room 504\nGuests arriving on 12/10/2012:\n   K. Leavenworth (room 502)\n   I. Joliet (room 503)\nGuests arriving on 12/9/2012:\nGuests departing on 12/14/2013:\n   C. S. Quentin (room 504)\n   K. Leavenworth (room 502)\nBedrooms free between 12/20/2012 to 12/25/2012:\n   504\n   501\n   502\n   503\nBedrooms free between 12/12/2012 to 12/20/2012:\n   504\n   501\nBedrooms free between 12/14/2012 to 12/14/2012:\n   504\n   501\n   502\nBedrooms occupied between 12/14/2012 to 12/14/2012:\n   503\nBedrooms occupied between 12/12/2012 to 12/20/2012:\n   502\n   503\nBedrooms occupied between 12/20/2012 to 12/25/2012:\nThank you for abusing the Anteater BandB Reservation System!\n</code></pre>\n<p><strong>Stage VI:</strong> This stage has two parts. First, the LB command should print the room list in order by room number and the LR command should list the reservations in order by arrival date. </p>\n<p>The second part of this stage makes the file handling more\n  realistic. In a real hotel, the room reservation system must save\n  the reservation information at the end of the day, to be used as the\n  following day's starting data. Before exiting, your program should\n  write out the room and reservation information to an external file\n  as a series of NB and NR commands, in the same format as the input\n  command file. You should not automatically write the end-of-day data\n  on top of the original input file; prompt the user for a new file\n  name. Thereafter, when your program starts it will prompt the user\n  for the file containing the previous day's ending data and read in\n  those commands before it asks for the current day's command file and\n  handles the commands there. In addition to the program's output for\n  the four test cases you will turn in, you should also turn in a\n  printed copy of the final end-of-day files for each of those four\n  test cases.</p>\n\n[In fact, there is an inconsistency here, because the NR command doesn't have space for an existing reservation's confirmation number. Thus, any carried-forward reservation will get a new confirmation number, and the number the guest has won't be any good. Optionally, propose a solution to this problem (you don't have to implement it, but it should be something you could implement if you had a few more days).]\n<p><strong>Stage VII (optional): </strong>In this stage, before\ncancelling a reservation you check to see if it can be moved to\n  another room.  First check if there's another room free for the\nentire duration of the reservation, and move it there.  If no single\nroom can accommodate the reservation, but if it could be split\nbetween two rooms, do that.  Only if that's not possible,\ncancel it.</p>\n<p>&nbsp;</p>\n<P><FONT FACE=\"Goudy Old Style\">The following usual warnings, advice, policies,\n  and practices apply to this assignment:</FONT></P>\n<UL>\n  <LI>\n<FONT FACE=\"Goudy Old Style\">Get started early.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Read and re-read the specifications.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Do this with a partner you haven&#39;t worked\nwith yet this quarter (and let the TA know who your partner is).</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Submit all your Python source code in one </FONT><FONT FACE=\"Courier New\" SIZE=2>.py</FONT><FONT FACE=\"Goudy Old Style\">\nfile via Checkmate.  Each pair should submit just one solution.</FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">The usual <A HREF=\"http://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html\">grading criteria</A>\nfor lab assignments apply. </FONT></LI>\n<BR>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Fill out a partner evaluation at EEE.</FONT><BR>\n</LI>\n</UL>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay, Winter 2005, based on earlier assignments. Modified by David G. Kay for Python, Winter 2012.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>", "id": 10090.0}