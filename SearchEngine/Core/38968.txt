{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 3Introduction 3 1 Overview CGAL the Computational Geometry Algorithms Library was founded and initially developed by a consortium consisting of ETH Z rich Switzerland Freie Universit t Berlin Germany INRIA Sophia Antipolis France Martin Luther Universit t Halle Wittenberg Germany Max Planck Institut f r Informatik Saarbr cken Germany RISC Linz Austria Tel Aviv University Israel and Utrecht University The Netherlands CGAL has become an Open Source Project with the release 3 in November 2 3 New developers and sites are welcome to join the project and have done so already You can find more information about the project on the CGAL home page The CGAL Editorial Board consists of Andreas Fabri GEOMETRY FACTORY Efi Fogel Tel Aviv University Bernd G rtner ETH Z rich Michael Hoffmann ETH Z rich Menelaos Karavelas University of Notre Dame Lutz Kettner Max Planck Institut f r Informatik Sylvain Pion INRIA Sophia Antipolis Monique Teillaud INRIA Sophia Antipolis Remco Veltkamp Utrecht University Mariette Yvinec INRIA Sophia Antipolis CGAL is written in C and consists of three major parts The first part is the kernel which consists of constant size non modifiable geometric primitive objects and operations on these objects The objects are represented both as stand alone classes that are parameterized by a representation class which specifies the underlying number types used for calculations and as members of the kernel classes which allows for more flexibility and adaptability of the kernel The second part is a collection of basic geometric data structures and algorithms which are parameterized by traits classes that define the interface between the data structure or algorithm and the primitives they use In many cases the kernel classes provided in CGAL can be used as traits classes for these data structures and algorithms The collection of basic geometric algorithms and data structures currently includes polygons half edge data structures polyhedral surfaces topological maps planar maps arrangements of curves triangulations convex hulls alpha shapes optimisation algorithms dynamic point sets for geometric queries and multidimensional search trees The third part of the library consists of non geometric support facilities such as support for number types STL extensions for CGAL handles circulators protected access to internal representations geometric object generators timers I O stream operators and other stream support including PostScript colors windows and visualization tools GeoWin Geomview and a Qt widget for 2D CGAL objects Additional documents accompanying the CGAL distribution are the Installation Guide and The Use of STL and STL Extensions in CGAL which gives a manual style introduction to STL constructs such as iterators and containers as well an extension called circulator used in many places in CGAL We also recommend the standard text book by Austern Aus98 for the STL and its notion of concepts and models Other resources for CGAL are the tutorials at http www cgal org Tutorials and the user support page at www cgal org advanced Some functionality is considered more advanced Such functionality is described in sections such as this one that are bounded by horizontal brackets advanced 3 2 Namespace CGAL All names introduced by CGAL especially those documented in these manuals are in a namespace called CGAL which is in global scope 1 A user can either qualify names from CGAL by adding CGAL to the name e g CGAL Point 2 CGAL Homogeneous int making a single name from CGAL visible in a scope via a using statement e g using CGAL Cartesian and then use this name unqualified in this scope or making all names from namespace CGAL visible in a scope with using namespace CGAL The latter however is likely to give rise to name conflicts and is therefore not recommended 3 3 Inclusion Order of Header files Not all compilers fully support standard header names CGAL provides workarounds for these problems in CGAL basic h Consequently as a golden rule you should always include CGAL basic h first in your programs or CGAL Cartesian h or CGAL Homogeneous h since they include CGAL basic h first 3 4 Preconditions Postconditions Assertions and Warnings Much of the CGAL code contains checks For example all checks used in the kernel code are prefixed by CGAL KERNEL Other packages have their own prefixes as documented in the corresponding chapters Some are there to check if the kernel behaves correctly others are there to check if the user calls kernel routines in an acceptable manner To assure that programs and programmers behave as expected the following four types of checks are used through the CGAL code Preconditions check if the caller of a routine has called it in a proper fashion If such a check fails it is the responsibility of the caller usually the user of the library Preconditions for functions and data structures are documented in the corresponding reference pages Postconditions check if a routine does what it promises to do If such a check fails it is the fault of this routine Postconditions are also documented in the relevant sections of the reference manual Assertions are other checks that do not fit in the above two categories These are generally used to assure invariants in the code and are not generally documented Warnings are checks for which it is not so severe if they fail By default all of these checks are performed It is however possible to turn them off through the use of compile time switches The names of these switches for each of the above checks are CGAL package NO PRECONDITIONS CGAL package NO POSTCONDITIONS CGAL package NO ASSERTIONS and CGAL package NO WARNINGS Here package stands for a string that is particular to each package This string should be documented at the beginning of the chapter in this reference manual that includes the reference pages for the function or data structure you are using For example for the convex hull functions the word CH is used and thus the switches are CGAL CH NO PRECONDITIONS CGAL CH NO POSTCONDITIONS CGAL CH NO ASSERTIONS and CGAL CH NO WARNINGS So in order to compile the file foo C with the postcondition checks for these functions turned off you should do CC DCGAL CH NO POSTCONDITIONS foo C Not all checks are on by default All four types of checks can be marked as expensive or exactness checks or both These checks need to be turned on explicitly by supplying one or both of the compile time switches CGAL package CHECK EXPENSIVE and CGAL package CHECK EXACTNESS Expensive checks are as the word says checks that take a considerable time to compute Considerable is an imprecise phrase Checks that add less than 1 percent to the execution time of the routine they are in are not expensive Checks that can double the execution time are Somewhere in between lies the border line Checks that increase the asymptotic running time of an algorithm are always considered expensive Exactness checks are checks that rely on exact arithmetic For example if the intersection of two lines is computed the postcondition of this routine may state that the intersection point lies on both lines However if the computation is done with doubles as number type this may not be the case due to round off errors So exactness checks should only be turned on if the computation is done with some exact number type 3 5 Altering the failure behaviour If a postcondition precondition or assertion is violated the program will abort stop and produce a core dump This behaviour can be changed by means of the following function include CGAL assertions h Failure behaviour set error behaviour Failure behaviour eb The parameter should have one of the following values enum Failure behaviour ABORT EXIT EXIT WITH SUCCESS CONTINUE The first value is the default If the EXIT value is set the program will stop and return a value indicating failure but not dump the core The last value tells the checks to go on after diagnosing the error advanced If the EXIT WITH SUCCESS value is set the program will stop and return a value corresponding to successful execution and not dump the core advanced The value that is returned by set error behaviour is the value that was in use before For warnings there is a separate routine which works in the same way The only difference is that for warnings the default value is CONTINUE Failure behaviour set warning behaviour Failure behaviour eb advanced 3 6 Customising how errors are reported Normally error messages are written to the standard error output It is possible to do something different with them To that end you can register your own handler This function should be declared as follows void my failure function const char type const char expression const char file int line const char explanation Your failure function will be called with the following parameters type is a string that contains one of the words precondition postcondition assertion or warning expression contains the expression that was violated file is the file in which the check was made line is the line number in that file on which the check was made explanation contains an explanation of what was checked It can be NULL in which case the expression is thought to be descriptive enough There are several things that you can do with your own handler You can display a diagnostic message in a different way for instance in a pop up window or to a log file or a combination You can also implement a different policy on what to do after an error For instance you can throw an exception or ask the user in a dialogue whether to abort or to continue If you do this it is best to set the error behaviour to CONTINUE so that it does not interfere with your policy You can register two handlers one for warnings and one for errors Of course you can use the same function for both if you want When you set a handler the previous handler is returned so you can restore it if you want include CGAL assertions h Failure function set error handler Failure function handler Failure function set warning handler Failure function handler Example include CGAL assertions h void my failure handler const char type const char expr const char file int line const char msg report the error in some way void foo CGAL Failure function prev prev CGAL set error handler my failure handler call some routines CGAL set error handler prev advanced 3 7 Compile time Flags to Control Inlining Making funcitons inlined can at times improve the efficiency of your code However this is not always the case and it can differ for a single function depending on the application in which it is used Thus CGAL defines a set of compile time macros that can be used to control whether certain functions are designated as inlined functions or not The following table lists the macros and their default values which are set in one of the CGAL include files macro name default CGAL KERNEL INLINE inline CGAL KERNEL MEDIUM INLINE CGAL KERNEL LARGE INLINE CGAL MEDIUM INLINE inline CGAL LARGE INLINE CGAL HUGE INLINE If you wish to change the value of one or more of these macros you can simply give it a new value when compiling For example to make functions that use the macro CGAL KERNEL MEDIUM INLINE inline functions you should set the value of this macro to inline instead of the default blank 3 8 Acknowledgement This work was partially supported by the ESPRIT IV Long Term Research Projects No 21957 CGAL and No 28155 GALIA and by the IST Programme of the EU as a Shared cost RTD FET Open Project No IST 2 26473 ECG Effective Computational Geometry for Curves and Surfaces Footnotes 1 Removing prefix CGAL and introducing namespace CGAL is the major difference between releases 1 2 and 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Introduction_ref/Chapter_main.html", "title": "introduction", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Introduction_ref/main.tex' -->\n<html> <head>  \n<title>Introduction</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_3\"></a>\n  \n<h1>Chapter 3<BR>Introduction</h1>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>3.1&nbsp;&nbsp;&nbsp;Overview</h2>\n<P>\n\nC<SMALL>GAL</SMALL>, the <I>Computational Geometry Algorithms Library</I>, \nwas founded and initially developed by a consortium consisting of\n<A HREF=\"http://www.inf.ethz.ch/\" TARGET=\"_top\">ETH Z&uuml;rich</A> (Switzerland), \n<A HREF=\"http://www.inf.fu-berlin.de/\" TARGET=\"_top\">Freie Universit&auml;t Berlin</A> (Germany), \n<A HREF=\"http://www.inria.fr/recherche/equipes/geometrica.en.html\" TARGET=\"_top\">I<SMALL>NRIA</SMALL> \nSophia-Antipolis</A> (France),\n<A HREF=\"http://www.informatik.uni-halle.de/\" TARGET=\"_top\">Martin-Luther-Universit&auml;t \nHalle-Wittenberg</A> (Germany),\n<A HREF=\"http://www.mpi-sb.mpg.de/\" TARGET=\"_top\">Max-Planck Institut f&uuml;r Informatik</A>,\nSaarbr&uuml;cken (Germany),\n<A HREF=\"http://info.risc.uni-linz.ac.at/\" TARGET=\"_top\">R<SMALL>ISC</SMALL></A> Linz (Austria)\n<A HREF=\"http://www.cs.tau.ac.il/\" TARGET=\"_top\">Tel-Aviv University</A> (Israel), and\n<A HREF=\"http://www.cs.uu.nl/\" TARGET=\"_top\">Utrecht University</A> (The Netherlands). \nC<SMALL>GAL</SMALL> has become an Open Source Project with the release 3.0 in\nNovember 2003. New developers and sites are welcome to join the\nproject and have done so already. \nYou can find more information about the project on the \n<A HREF=\"http://www.cgal.org\" TARGET=\"_top\">C<SMALL>GAL</SMALL> home page</A>\n.\n<P>\n\nThe C<SMALL>GAL</SMALL> Editorial Board consists of:\n<P>\n\nAndreas Fabri (G<SMALL>EOMETRY</SMALL> F<SMALL>ACTORY</SMALL>)<BR>\n\nEfi Fogel (Tel-Aviv University)<BR>\n\nBernd G&auml;rtner (ETH Z&uuml;rich)<BR>\n\nMichael Hoffmann (ETH Z&uuml;rich)<BR>\n\nMenelaos Karavelas (University of Notre Dame)<BR>\n\nLutz Kettner (\n<!-- REMOVE_LINKS_BEGIN -->\nMax-Planck Institut f&uuml;r Informatik\n<!-- REMOVE_LINKS_END -->\n)<BR>\n\nSylvain Pion (I<SMALL>NRIA</SMALL> Sophia-Antipolis)<BR>\n\nMonique Teillaud (I<SMALL>NRIA</SMALL> Sophia-Antipolis)<BR>\n\nRemco Veltkamp (Utrecht University)<BR>\n\nMariette Yvinec (I<SMALL>NRIA</SMALL> Sophia-Antipolis)\n<P>\n\nC<SMALL>GAL</SMALL> is written in C++ and consists of three major parts.\n<P>\n\nThe first part is the kernel, which consists of constant-size non-modifiable \ngeometric primitive objects and operations on these objects. \nThe objects are represented both as stand-alone classes that are\nparameterized by a representation class, which specifies\nthe underlying number types used for calculations and as members of the\nkernel classes, which allows for more flexibility and adaptability of the \nkernel.\n<P>\n\nThe second part is a collection of basic geometric data structures and\nalgorithms, which are parameterized by traits classes that define the \ninterface between the data structure or algorithm and the primitives they use.\nIn many cases, the kernel classes provided in C<SMALL>GAL</SMALL> can be used as traits\nclasses for these data structures and algorithms.\nThe collection of basic geometric algorithms and data structures\ncurrently includes polygons, half-edge data structures, polyhedral surfaces, \ntopological maps, planar maps, arrangements of curves, triangulations, \nconvex hulls, alpha shapes, optimisation algorithms, dynamic\npoint sets for geometric queries, and multidimensional search trees.\n<P>\n\nThe third part of the library consists of non-geometric support\nfacilities, such as support for number types, STL extensions for\nC<SMALL>GAL</SMALL>, handles, circulators, protected access to internal\nrepresentations, geometric object generators, timers, I/O stream\noperators and other stream support including PostScript, colors,\nwindows, and visualization tools GeoWin, Geomview and a Qt widget for\n2D C<SMALL>GAL</SMALL> objects.\n<P>\n\nAdditional documents accompanying the C<SMALL>GAL</SMALL> distribution are the\n`Installation Guide' and `The Use of STL and STL Extensions in\nC<SMALL>GAL</SMALL>', which gives a manual style introduction to STL constructs\nsuch as iterators and containers, as well an extension, called\ncirculator, used in many places in C<SMALL>GAL</SMALL>. We also recommend the\nstandard text book by Austern&nbsp;[<A HREF=\"../biblio.html#Biblio_cgal:a-gps-98\">Aus98</A>] for the STL and\nits notion of <I>concepts</I> and <I>models</I>.\n<P>\n\nOther resources for C<SMALL>GAL</SMALL> are the tutorials at\n<A HREF=\"http://www.cgal.org/Tutorials/\"><TT>http://www.cgal.org/Tutorials/</TT></A> and the user support page at\n<A HREF=\"www.cgal.org\"><TT>www.cgal.org</TT></A>.\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nSome functionality is considered more advanced.\nSuch functionality is described in sections such as this one that are bounded \nby horizontal brackets.\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>3.2&nbsp;&nbsp;&nbsp;Namespace CGAL</h2>\n\nAll names introduced by C<SMALL>GAL</SMALL>, especially those documented in these manuals,\nare in a namespace called <I>CGAL</I>, which is in global \nscope.<A HREF=\"#Footnote_1\"><SUP>1</SUP></A> \nA user can either qualify names from C<SMALL>GAL</SMALL> by adding <I>CGAL::</I> to the name,\n<I>e.g.</I>, <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_17\">CGAL::Homogeneous</A>&lt; int&gt; &gt;</I>; making a \nsingle name from C<SMALL>GAL</SMALL> visible in a scope via a <I>using</I> statement, \n<I>e.g.</I>, <I>using <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>;</I>, and then use this name \nunqualified in this scope; or making all names from namespace <I>CGAL</I> \nvisible in a scope with <I>using namespace CGAL;</I>. The latter, however, is \nlikely to give rise to name conflicts and is therefore not recommended.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>3.3&nbsp;&nbsp;&nbsp;Inclusion Order of Header files</h2>\n\nNot all compilers fully support standard header names. C<SMALL>GAL</SMALL> provides \nworkarounds for these problems in <I>CGAL/basic.h</I>. Consequently, as a \ngolden rule, you should always include <I>CGAL/basic.h</I> first in your \nprograms (or <I>CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h</I>, or <I>CGAL/<A HREF=\"../Kernel_23_ref/Class_Homogeneous.html#Cross_link_anchor_18\">Homogeneous</A>.h</I>, since they \ninclude <I>CGAL/basic.h</I> first).\n<P>\n\n<a name=\"Section_4\"></a>\n        \n<h2>3.4&nbsp;&nbsp;&nbsp;Preconditions, Postconditions, Assertions and Warnings</h2>\n\n<A NAME=\"sec:checks\"></A>\n   \n     \n     \n<A NAME=\"Index_anchor_0\"></A> \n\n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_1\"></A> \n\n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_2\"></A> \n\n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_3\"></A> \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_4\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_5\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_6\"></A> \n\n   \n\n   \n\n\n      \n     \n     \n<A NAME=\"Index_anchor_7\"></A>\n<P>\n\nMuch of the C<SMALL>GAL</SMALL> code contains checks. \nFor example, all checks used in the kernel code are prefixed by \n<I>CGAL_KERNEL</I>.\nOther packages have their own prefixes, as documented in the corresponding\nchapters.\nSome are there to check if the kernel behaves correctly, others are there to \ncheck if the user calls kernel routines in an acceptable manner.\n<P>\n\nTo assure that programs (and programmers) behave as expected, \nthe following four types of checks are used through the C<SMALL>GAL</SMALL> code:\n<DL>\n<DT><B>Preconditions</B><DD> check if the caller of a routine has called it in a\nproper fashion. If such a check fails it is the responsibility of the caller \n(usually the user of the library).  Preconditions for functions and data\nstructures are documented in the corresponding reference pages.\n<DT><B>Postconditions</B><DD> check if a routine does what it promises to do. \nIf such a check fails it is the fault of this routine.  Postconditions\nare also documented in the relevant sections of the reference manual.\n<DT><B>Assertions</B><DD> are other checks that do not fit in the above two \ncategories.  These are generally used to assure invariants in the\ncode and are not generally documented.\n<DT><B>Warnings</B><DD> are checks for which it is not so severe if they fail.\n</DL>\n<P>\n\nBy default, all of these checks are performed. \nIt is however possible to turn them off through the use of compile time \nswitches.  The names of these switches for each of the above checks\nare:\n<UL>\n  <LI><I>CGAL_&lt;package&gt;_NO_PRECONDITIONS</I>, \n  <LI><I>CGAL_&lt;package&gt;_NO_POSTCONDITIONS</I>,\n  <LI><I>CGAL_&lt;package&gt;_NO_ASSERTIONS</I> and \n  <LI><I>CGAL_&lt;package&gt;_NO_WARNINGS</I>.\n</UL>\nHere <I>&lt;package&gt;</I> stands for a string that is particular to each\npackage.  This string should be documented at the beginning of the\nchapter in this reference manual that includes the reference pages \nfor the function or data structure you are using.\n<P>\n\nFor example, for the convex hull functions, the word\n<I>CH</I> is used and thus the switches are:\n<I>CGAL_CH_NO_PRECONDITIONS</I>, \n<I>CGAL_CH_NO_POSTCONDITIONS</I>,\n<I>CGAL_CH_NO_ASSERTIONS</I> and \n<I>CGAL_CH_NO_WARNINGS</I>.\nSo, in order to compile the file <TT>foo.C</TT> with the postcondition checks\nfor these functions turned off, you should do:<BR>\n\n<TT>CC -DCGAL_CH_NO_POSTCONDITIONS foo.C</TT>\n<P>\n\nNot all checks are on by default.\nAll four types of checks can be marked as expensive or exactness checks\n(or both).\nThese checks need to be turned on explicitly by supplying one or both of\nthe compile time switches <I>CGAL_&lt;package&gt;_CHECK_EXPENSIVE</I> and \n<I>CGAL_&lt;package&gt;_CHECK_EXACTNESS</I>.\n<P>\n\n<A NAME=\"Index_anchor_8\"></A> \n\n   \n\n\nExpensive checks are, as the word says, checks that take a considerable\ntime to compute. Considerable is an imprecise phrase. \nChecks that add less than 10 percent to the execution time of the routine \nthey are in are not expensive.  Checks that can double the execution time are. \nSomewhere in between lies the border line.\nChecks that increase the asymptotic running time of an algorithm are always \nconsidered expensive.\n   \n     \n     \n<A NAME=\"Index_anchor_9\"></A> \n\n   \n\n\nExactness checks are checks that rely on exact arithmetic. \nFor example, if the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two lines is computed, the postcondition \nof this routine may state that the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point lies on both lines. \nHowever, if the computation is done with doubles as number type, this may not \nbe the case, due to round off errors. \nSo, exactness checks should only be turned on if the computation is done \nwith some exact number type.\n<P>\n\n<a name=\"Section_5\"></a>\n        \n<h2>3.5&nbsp;&nbsp;&nbsp;Altering the failure behaviour</h2>\n\n   \n     \n     \n<A NAME=\"Index_anchor_10\"></A>\n<P>\n\nIf a postcondition, precondition or assertion is\nviolated, the program will abort (stop and produce a core dump).\nThis behaviour can be changed by means of the following function.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/assertions.h\">CGAL/assertions.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour_set_error_behaviour6Failure_behaviour_eb9;\"></A>\n<A HREF=\"Chapter_main#Enum_Failure_behaviour\">Failure_behaviour</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_error_behaviour ( <A HREF=\"Chapter_main#Enum_Failure_behaviour\">Failure_behaviour</A> eb)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nThe parameter should have one of the following values.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour\"></A>\n<A NAME=\"Enum_Failure_behaviour\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Chapter_main#Enum_Failure_behaviour\">Failure_behaviour</A> { <A HREF=\"Chapter_main#Enum_Failure_behaviour\">ABORT</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_main#Enum_Failure_behaviour\">EXIT</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_main#Enum_Failure_behaviour\">EXIT_WITH_SUCCESS</A><A NAME=\"Function_Failure_behaviour\"></A>\n, <A HREF=\"Chapter_main#Enum_Failure_behaviour\">CONTINUE</A><A NAME=\"Function_Failure_behaviour\"></A>\n};\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n\nThe first value is the default. \nIf the <I><A HREF=\"Chapter_main#Enum_Failure_behaviour\">EXIT</A></I> value is set, the program will stop and return a value \nindicating failure, but not dump the core. \nThe last value tells the checks to go on after diagnosing the error.\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\nIf the <I><A HREF=\"Chapter_main#Enum_Failure_behaviour\">EXIT_WITH_SUCCESS</A></I> value is set, the program will stop and \nreturn a value corresponding to successful execution and not dump the core. \n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\nThe value that is returned by <I>set_error_behaviour</I> is the value that \nwas in use before.\n<P>\n\nFor warnings there is a separate routine, which works in the same way.\nThe only difference is that for warnings the default value is\n<I><A HREF=\"Chapter_main#Enum_Failure_behaviour\">CONTINUE</A></I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_behaviour_set_warning_behaviour6Failure_behaviour_eb9;\"></A>\n<A HREF=\"Chapter_main#Enum_Failure_behaviour\">Failure_behaviour</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_warning_behaviour ( <A HREF=\"Chapter_main#Enum_Failure_behaviour\">Failure_behaviour</A> eb)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n<P>\n\n<a name=\"Section_6\"></a>\n        \n<h2>3.6&nbsp;&nbsp;&nbsp;Customising how errors are reported</h2>\n\n   \n     \n     \n<A NAME=\"Index_anchor_11\"></A> \n\n   \n\n   \n     \n     \n<A NAME=\"Index_anchor_12\"></A>\n<P>\n\nNormally, error messages are written to the standard error output.\nIt is possible to do something different with them.\nTo that end you can register your own handler.\nThis function should be declared as follows.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_my_failure_function6_const_char_*type+_const_char_*expression+_const_char_*file+_int_line+_const_char_*explanation9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    my_failure_function ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    const char *type,<BR>\n\nconst char *expression,<BR>\n\nconst char *file,<BR>\n\nint line,<BR>\n\nconst char *explanation)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nYour failure function will be called with the following parameters:\n<DL>\n <DT><B><I>type</I></B><DD> is a string that contains one of the words \n      <TT>precondition</TT>, <TT>postcondition</TT>, <TT>assertion</TT> or \n      <TT>warning</TT>. \n <DT><B><I>expression</I></B><DD> contains the expression that was violated.\n <DT><B><I>file</I></B><DD> is the file in which the check was made.\n <DT><B><I>line</I></B><DD> is the line number in that file on which the check\n      was made.\n <DT><B><I>explanation</I></B><DD> contains an explanation of what was \n      checked. It can be <I>NULL</I>, in which case the \n      <I>expression</I> is thought to be descriptive enough.\n</DL>\n<P>\n\nThere are several things that you can do with your own handler.\nYou can display a diagnostic message in a different way, for instance in \na pop-up window or to a log file (or a combination).\nYou can also implement a different policy on what to do after an error.\nFor instance, you can throw an exception or ask the user in a dialogue \nwhether to abort or to continue.\nIf you do this, it is best to set the error behaviour to\n<I><A HREF=\"Chapter_main#Enum_Failure_behaviour\">CONTINUE</A></I>, so that it does not interfere with your policy.\n<P>\n\nYou can register two handlers, one for warnings and one for errors.\nOf course, you can use the same function for both if you want.\nWhen you set a handler, the previous handler is returned, so you can restore\nit if you want.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/assertions.h\">CGAL/assertions.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_function_set_error_handler6Failure_function_handler9;\"></A>\nFailure_function\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_error_handler ( Failure_function handler)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Failure_function_set_warning_handler6Failure_function_handler9;\"></A>\nFailure_function\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    set_warning_handler ( Failure_function handler)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<h4>Example</h4>\n<P>\n\n<PRE>\n#include &lt;CGAL/assertions.h&gt;\n\nvoid my_failure_handler(\n    const char *type,\n    const char *expr,\n    const char* file,\n    int line,\n    const char* msg)\n{\n    /* report the error in some way. */\n}\n\nvoid foo()\n{\n    CGAL::Failure_function prev;\n    prev = CGAL::set_error_handler(my_failure_handler);\n    /* call some routines. */\n    CGAL::set_error_handler(prev);\n}\n</PRE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<a name=\"Section_7\"></a>\n        \n<h2>3.7&nbsp;&nbsp;&nbsp;Compile-time Flags to Control Inlining</h2>\n\n \n     \n<A NAME=\"Index_anchor_13\"></A> \n \n   \n\n \n     \n<A NAME=\"Index_anchor_14\"></A> \n \n   \n\n \n     \n<A NAME=\"Index_anchor_15\"></A>\n<P>\n\nMaking funcitons inlined can, at times, improve the efficiency of your code.\nHowever this is not always the case and it can differ for a single function\ndepending on the application in which it is used. Thus C<SMALL>GAL</SMALL> defines a set \nof compile-time macros that can be used to control whether certain functions \nare designated as inlined functions or not.  The following table lists the \nmacros and their default values, which are set in one of the C<SMALL>GAL</SMALL> include\nfiles.\n<P>\n\n<TABLE><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\nmacro name        \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\ndefault \n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><HR></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_KERNEL_INLINE</I>         \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\ninline \n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_KERNEL_MEDIUM_INLINE</I>  \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_KERNEL_LARGE_INLINE</I>   \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_MEDIUM_INLINE</I>         \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\ninline \n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_LARGE_INLINE</I>          \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n    </TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n<I>CGAL_HUGE_INLINE</I>           \n        </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n\n</TD></TR></TABLE>\n<P>\n\nIf you wish to change the value of one or more of these macros,\nyou can simply give it a new value when compiling.  For example, to make\nfunctions that use the macro <I>CGAL_KERNEL_MEDIUM_INLINE</I> inline functions,\nyou should set the value of this macro to <TT>inline</TT> instead of the\ndefault blank.\n<P>\n\n<a name=\"Section_8\"></a>\n        \n<h2>3.8&nbsp;&nbsp;&nbsp;Acknowledgement</h2>\n<P>\n\nThis work was partially supported by the ESPRIT IV Long Term Research\nProjects No.&nbsp;21957 (CGAL) and No.&nbsp;28155 (GALIA), and by the IST\nProgramme of the EU as a Shared-cost RTD (FET Open) Project No\nIST-2000-26473 (ECG - Effective Computational Geometry for Curves and\nSurfaces).\n<P>\n\n\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nRemoving prefix <I>CGAL_</I> and introducing namespace \n<I>CGAL</I> is the major difference between releases 1.2 and 2.0.\n\n</TD></TR></TABLE>\n<!Next_chapter_link_2_4!>\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38968.0}