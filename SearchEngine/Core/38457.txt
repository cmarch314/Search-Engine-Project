{"text": "OEChem C Theory Manual Version 1 3 1 Previous 22 1 Introduction Up 22 Predicate Functors Next 22 3 Functors have State 22 2 operator and function pointers C allows a user to define a function operator for any class This operator can have return values take arguments and be overloaded For instance bool operator const OEAtomBase atom is a functor which takes a const pointer to an OEAtomBase as an argument and returns boolean The operator function is called when the class instance name is followed by the arguments to the function If we have a class MyPredicate which defines bool operator const OEAtomBase then the function will be called in the example below MyPredicate pred create functor bool returnVal OEAtomBase atom define atom returnVal pred atom Note that while pred in the example above is actually a class However the syntax for calling a function and calling operator of a functor is indistinguishable While this idiom may be new to non C aficionados it is actually quite similar to using function pointers in C or other languages Note For technical reasons operator functions cannot be virtual OEChem C Theory Manual Version 1 3 1 Previous 22 1 Introduction Up 22 Predicate Functors Next 22 3 Functors have State Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node173.html", "title": "22.2 operator() and function pointers", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>22.2 operator() and function pointers</title>\n<META NAME=\"description\" CONTENT=\"22.2 operator() and function pointers\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node174.html\">\n<LINK REL=\"previous\" HREF=\"node172.html\">\n<LINK REL=\"up\" HREF=\"node171.html\">\n<LINK REL=\"next\" HREF=\"node174.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node172.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node174.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node172.html\">22.1 Introduction</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node174.html\">22.3 Functors have State</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0025200000000000000000\">\n22.2 <TT>operator()</TT> and function pointers</A>\n</H1>\n\n<P>\nC++ allows a user to define a function <code>operator ()</code> for any class.\nThis operator can have return values, take arguments and be overloaded.\nFor instance <code>bool operator()(const OEAtomBase *atom)</code> is a functor\nwhich takes a const pointer to an <code>OEAtomBase</code> as an argument and\nreturns boolean.  The <code>operator()</code> function is called when the class\ninstance name is followed by the arguments to the function.\n\n<P>\nIf we have a class <code>MyPredicate</code> which defines <code>bool\noperator()(const OEAtomBase *)</code>, then the function will be called in the\nexample below.\n\n<P>\n<dl><dd><pre class=\"verbatim\">  MyPredicate pred; //create functor\n  bool returnVal;\n  OEAtomBase *atom;\n\n  ...define atom...\n\n  returnVal = pred(atom);\n</pre></dl>\n\n<P>\nNote that while pred in the example above is actually a class.  However,\nthe syntax for calling a function and calling <code>operator()</code> of a\nfunctor is indistinguishable.\n\n<P>\nWhile this idiom may be new to non-C++-aficionados, it is actually quite\nsimilar to using function pointers in C or other languages.\n\n<P>\nNote: For technical reasons, <code>operator()</code> functions <i>cannot</i> be\nvirtual.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node172.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node171.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node174.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node172.html\">22.1 Introduction</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node171.html\">22. Predicate Functors</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node174.html\">22.3 Functors have State</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38457.0}