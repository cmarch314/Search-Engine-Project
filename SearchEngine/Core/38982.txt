{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL min parallelogram 2 DefinitionThe function computes a minimum area enclosing parallelogram A P of a given convex point set P Note that R P is not necessarily axis parallel and it is in general not unique The focus on convex sets is no restriction since any parallelogram enclosing P as a convex set contains the convex hull of P For general point sets one has to compute the convex hull as a preprocessing step include CGAL min quadrilateral 2 h template class ForwardIterator class OutputIterator class Traits OutputIterator min parallelogram 2 ForwardIterator points begin ForwardIterator points end OutputIterator o Traits t Default traits computes a minimum area enclosing parallelogram of the point set described by points begin points end writes its vertices counterclockwise to o and returns the past the end iterator of this sequence If the input range is empty o remains unchanged If the input range consists of one element only this point is written to o four times Precondition The points denoted by the range points begin points end form the boundary of a simple convex polygon P in counterclockwise orientation The geometric types and operations to be used for the computation are specified by the traits class parameter t The parameter can be omitted if ForwardIterator refers to a two dimensional point type from one the CGAL Kernels In this case a default traits class Min quadrilateral default traits 2 Kernel is used Requirement If Traits is specified it is a model for MinQuadrilateralTraits 2 and the value type VT of ForwardIterator is Traits Point 2 Otherwise VT is CGAL Point 2 Kernel for some Kernel Kernel OutputIterator accepts VT as value type See AlsoCGAL min rectangle 2 CGAL min strip 2 MinQuadrilateralTraits 2 CGAL Min quadrilateral default traits 2 Kernel ImplementationWe use a rotating caliper algorithm STV 95 Vai9 with worst case running time linear in the number of input points ExampleThe following code generates a random convex polygon P with 2 vertices and computes the minimum enclosing parallelogram of P include CGAL Cartesian h include CGAL Polygon 2 h include CGAL point generators 2 h include CGAL random convex set 2 h include CGAL min quadrilateral 2 h include iostream struct Kernel public CGAL Cartesian double typedef Kernel Point 2 Point 2 typedef Kernel Line 2 Line 2 typedef CGAL Polygon 2 Kernel Polygon 2 typedef CGAL Random points in square 2 Point 2 Generator int main build a random convex 2 gon p Polygon 2 p CGAL random convex set 2 2 std back inserter p Generator 1 std cout p std endl compute the minimal enclosing parallelogram p m of p Polygon 2 p m CGAL min parallelogram 2 p vertices begin p vertices end std back inserter p m std cout p m std endl return Next min strip 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation_ref/Function_min_parallelogram_2.html", "title": "min_parallelogram_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation_ref/spec_oops.tex' -->\n<html> <head>  \n<title>min_parallelogram_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1150\"></A>\n\n<A NAME=\"Cross_link_anchor_1151\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1111\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::min_parallelogram_2\"></A>\n<h2><I>CGAL::min_parallelogram_2</I></h2>\n\n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1112\"></A> \n\n   \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1113\"></A>\n<P>\n\n<H3>Definition</H3>The function computes a minimum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> enclosing\n  parallelogram <MATH><I>A(P)</I></MATH> of a given convex point set <MATH><I>P</I></MATH>.  Note that\n  <MATH><I>R(P)</I></MATH> is not necessarily axis-<A HREF=\"../Kernel_23_ref/Function_parallel.html#Cross_link_anchor_249\">parallel</A>, and it is in general not\n  unique. The focus on convex sets is no restriction, since any\n  parallelogram enclosing <MATH><I>P</I></MATH> - as a convex set - contains the convex\n  hull of <MATH><I>P</I></MATH>. For general point sets one has to compute the convex hull\n  as a preprocessing step.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/min_quadrilateral_2.h\">CGAL/min_quadrilateral_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class ForwardIterator, class OutputIterator, class Traits &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_min_parallelogram_26_ForwardIterator_points_begin+_ForwardIterator_points_end+_OutputIterator_o+_Traits__t_=_Default_traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    <A HREF=\"Function_min_parallelogram_2.html#Cross_link_anchor_1151\">min_parallelogram_2</A> ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ForwardIterator points_begin,<BR>\n\nForwardIterator points_end,<BR>\n\nOutputIterator o,<BR>\n\nTraits&amp; t = Default_traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\ncomputes a minimum <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> enclosing parallelogram of the point set\n  described by [<I>points_begin</I>, <I>points_end</I>), writes its\n  vertices (counterclockwise) to <I>o</I> and returns the past-the-end\n  iterator of this sequence.\n  If the input range is empty, <I>o</I> remains unchanged.<BR>\n\nIf the input range consists of one element only, this point is written\n  to <I>o</I> four times.\n<P>\n\n<BR>\n\n<EM>Precondition: </EM>The points denoted by the range [<I>points_begin</I>,\n  <I>points_end</I>) form the boundary of a simple convex polygon <MATH><I>P</I></MATH>\n  in counterclockwise <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.\n<P>\n\nThe geometric types and operations to be used for the computation\n  are specified by the traits class parameter <I>t</I>. The parameter can be\n  omitted, if <I>ForwardIterator</I> refers to a two-dimensional point\n  type from one the C<SMALL>GAL</SMALL> Kernels. In this case, a default traits class\n  (<I><A HREF=\"Class_Min_quadrilateral_default_traits_2.html#Cross_link_anchor_1155\">Min_quadrilateral_default_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>) is used.\n<P>\n\n<BR>\n\n<EM>Requirement: </EM><OL>\n  <LI>If <I>Traits</I> is specified, it is a model for\n    <I><A HREF=\"Concept_MinQuadrilateralTraits_2.html#Cross_link_anchor_1156\">MinQuadrilateralTraits_2</A></I> and the value type <I>VT</I> of\n    <I>ForwardIterator</I> is <I>Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>. Otherwise\n    <I>VT</I> is <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> for some <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>\n    <I><A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A></I>.\n  <LI><I>OutputIterator</I> accepts <I>VT</I> as value type.\n  </OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_min_rectangle_2.html#Cross_link_anchor_1148\">CGAL::min_rectangle_2</A></I><BR>\n\n<I><A HREF=\"Function_min_strip_2.html#Cross_link_anchor_1152\">CGAL::min_strip_2</A></I><BR>\n\n<I><A HREF=\"Concept_MinQuadrilateralTraits_2.html#Cross_link_anchor_1156\">MinQuadrilateralTraits_2</A></I><BR>\n\n<I><A HREF=\"Class_Min_quadrilateral_default_traits_2.html#Cross_link_anchor_1154\">CGAL::Min_quadrilateral_default_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>\n<P>\n\n<H3>Implementation</H3>We use a rotating caliper\n  \n<A NAME=\"Index_anchor_1114\"></A> \n algorithm\n  [<A HREF=\"../biblio.html#Biblio_stvwe-mepa-95\">STV<MATH><I><SUP>+</SUP></I></MATH>95</A>, <A HREF=\"../biblio.html#Biblio_v-fmep-90\">Vai90</A>] with worst case running time linear\n  in the number of input points.\n<P>\n\n<H3>Example</H3>The following code generates a random convex polygon\n  <I>P</I> with 20 vertices and computes the minimum enclosing\n  parallelogram of <I>P</I>.\n<P>\n\n<pre class=\"ExampleCode\">#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>.h&gt;\n#include &lt;CGAL/point_generators_2.h&gt;\n#include &lt;CGAL/<A HREF=\"../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1684\">random_convex_set_2</A>.h&gt;\n#include &lt;CGAL/min_quadrilateral_2.h&gt;\n#include &lt;iostream&gt;\n\nstruct <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> : public <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; {};\n\ntypedef <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A>                           <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\ntypedef <A HREF=\"../Kernel_23_ref/Concept_Kernel--Line_2.html#Cross_link_anchor_450\">Kernel::Line_2</A>                            <A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>;\ntypedef <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;                   <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>;\ntypedef <A HREF=\"../Generator_ref/Class_Random_points_in_square_2.html#Cross_link_anchor_1699\">CGAL::Random_points_in_square_2</A>&lt;<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&gt;  Generator;\n\nint main()\n{\n  // build a random convex 20-gon p\n  <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A> p;\n  <A HREF=\"../Generator_ref/Function_random_convex_set_2.html#Cross_link_anchor_1683\">CGAL::random_convex_set_2</A>(20, std::back_inserter(p), Generator(1.0));\n  std::cout &lt;&lt; p &lt;&lt; std::endl;\n\n  // compute the minimal enclosing parallelogram p_m of p\n  <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A> p_m;\n  <A HREF=\"Function_min_parallelogram_2.html#Cross_link_anchor_1150\">CGAL::min_parallelogram_2</A>(\n    p.vertices_begin(), p.vertices_end(), std::back_inserter(p_m));\n  std::cout &lt;&lt; p_m &lt;&lt; std::endl;\n\n  return 0;\n} \n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_min_strip_2.html\"><I>min_strip_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_52!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38982.0}