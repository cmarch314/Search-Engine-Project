{"text": "ICS 46 Spring 2 14 News Course Reference Schedule Project Guide Code Examples About Alex ICS 46 Spring 2 14 Project 3 Standing Outside a Broken Phone Booth with Money in My Hand Due date and time Sunday June 1 11 59pm Introduction The previous two projects shared a focus on developing recursive algorithms Though both were also well known data structure traversals in disguise they were largely intended to build up your facility with somewhat more complex recursive algorithms than you might have been accustomed to writing before There are many real world scenarios in which you ll need to develop algorithms to proceed data structures that you already have such as the maze from Project 1 or that you build or discover on the fly such as the search tree you navigated in Project 2 But sometimes the data structure you need simply isn t available to you perhaps it hasn t been implemented in your programming language s library or a suitably licensed implementation isn t available in open source In cases like this it sometimes becomes necessary to implement your own custom data structures This project places the focus squarely on custom data structure implementation asking you to implement a classic data structure called a map using a skip list While your skip list will be used to solve one particular problem the goal when implementing a data structure particularly one as broadly useful as a map is to implement it in a way that it might be reused again later So your skip list implementation will be generic able to support different kinds of keys and different kinds of values In C terms that means it will need to be implemented using templates this project also aims to improve your understanding of template functions and template classes Getting started Before you begin work on this project there are a couple of chores you ll need to complete on your ICS 46 VM to get it set up to proceed Refreshing your ICS 46 VM environment Even if you previously downloaded your ICS 46 VM you may need to refresh its environment before proceeding with this project Log into your VM and issue the command ics46 version to see what version of the ICS 46 environment you currently have stored on your VM Note in particular the timestamp if you see a version with a timestamp older than the one listed below you ll want to refresh your environment by running the command ics46 refresh to download the latest one before you proceed with this project 2 14 5 22 1 4 17 Project 3 template available Creating your project directory on your ICS 46 VM A project template has been created specifically for this project containing a similar structure to the other templates you ve seen previously including some code that is being provided as a starting point and that you are required to work from So you ll absolutely need to use the project3 template for this project as opposed to the basic one or one from a previous project Decide on a name for your project directory then issue the command ics46 start project YOUR CHOSEN PROJECT NAME project3 to create your new project directory using the project3 template For example if you wanted to call your project directory proj3 you would issue the command ics46 start project proj3 project3 to create it Now you re ready to proceed The project directory Change into your project directory and take a look around Having already completed Project 2 what you will see will look very familiar Once again your project directory is capable of building three separate programs that you can run by issuing the commands run app run exp or run gtest This time there are no precompiled libraries and there is a lot less pre written code as you ll be working mostly from scratch this time The usual app core exp and gtest directories are available for writing your code and they serve the same purpose as always Note that you ll be required to write code in the app core and gtest directories during this project More on this later The program While this project is centered around a data structure implementation there is also a program to write albeit a relatively straightforward one In the app directory in your project direcotry write a program that processes input from a hypothetical web site used to allow people to recommend a social networking service to their friends Recommendations are done by visiting a web site and typing the friend s phone number the phone number is used to send the friend a text message advertising the service If enough friends make a recommendation of a particular phone number the owner of that phone number is offered a bonus for signing up for the service Because of regulatory concerns e g it s possible that these kinds of text message based offers are not legal in all areas it is possible to disallow an entire area code in which case any phone number with that area code is removed from the database immediately and it is no longer possible to register them We ll presume that this system is intended to run only in the United States so we ll support only phone numbers in the style used in the U S The input and output The input to the program is a series of events each written as a single line of text to std cin This input represents a distillation of what s happening on the web site for example when a user recommends the service to a friend that results in a line of input to your program Each event is processed and results in one or more lines of output to std cout The events and their corresponding outputs are described below Input FormatDescriptionOutput FormatREC phone numberThis event occurs when a user has recommended another user with phone number being the phone number that was specified in the recommendation on the web site Note that phone number could have been entered in any format including invalid ones OFFER phone number normalized If the recommendation was successful this is the output note that success occurs even if the phone number has been recommended before phone number normalized is a normalized phone number see below BONUS phone number normalized If the phone number has been successfully recommended an exact multiple of ten times i e on the tenth twentieth thirtieth etc successful recommendation this line of output appears after the OFFER output INVALID invalid phone number If the recommendation did not constitute a valid phone number see below this line of output appears ILLEGAL phone number normalized If the recommended phone number has a disallowed area code or if the phone number has been canceled see below this line of output appears CANCEL phone numberThis event occurs when a user cancels his or her own phone number i e specifies that he or she is no longer interested in offers Subsequently the phone number cannot be recommended successfully CANCELED phone number normalized If the phone number was valid it is canceled and this is the output Note that the phone number does not have to have been successfully recommended previously to be canceled INVALID invalid phone number If the phone number was invalid see below this line of output appears DISALLOW area codeThis event occurs when an entire area code has been disallowed e g because a particular state or locality has passed regulations or laws making this kind of promotion illegal All phone numbers in that area code are immediately canceled and no subsequent phone numbers from that area code are permitted DISALLOWED area code If the area code is valid the cancelation of that area code occurs and this is the output INVALID invalid area code If the area code was invalid see below this line of output appears EXITThis event occurs when there is no more input DONEanything else If the input contains anything that is not a valid event as described above it is an error Print an error message and continue reading input ERROR You ll find an example input file called test in in the inputs directory in your project directory while it is not an exhaustive test it does show examples of all of the commands and a few phone number formats On the dirtiness of real data One of the primary problems with data supplied by human users of a system such as the phone numbers being entered into our hypothetical web site in this example is that users may not respect the same rules for formatting that data that you might expect For example there are lots of ways that people write or type phone numbers here are a few 949 123 4567 949 123 4567 949 123 4567 9491234567 949 123 4567 While a user interface can help by validating and or disallowing incorrectly formatted data the fact remains that the data entered by your users might be dirty in one way or another so it becomes necessary to clean it To simulate that kind of real world issue we ll say that your program will take as input whatever phone numbers users type in whatever format users choose to use it s up to you to read that data and make sense out of the phone numbers that are valid while noting the ones that aren t Phone numbers in the U S Just to be clear on terminology a phone number in the United States consists of ten digits arranged in three parts the first three are called an area code the next three are called a prefix and the last four are called a suffix These mostly correspond to geographical areas e g phone numbers in the immediate area around UCI predominantly have area codes of 714 and 949 and were once the basis for which telephone charges were assessed with longer distance calls charged at a higher rate than shorter distance ones of course mobile phones have blurred the boundaries and rules somewhat but the basic structure of phone numbers remains So in general if a phone number entered as input consists of ten digits regardless of whatever other characters are present accept the ten digits as a phone number and ignore the other characters If there aren t exactly ten digits the phone number is considered invalid Meanwhile area codes are always three digits What is a normalized phone number The requirements above state that you should sometimes print out a normalized phone number The basic goal is for there to be one format that is the normalized one no matter what format users have typed into the web form In reality any format would work fine as long as you were consistent however to make things easier for us when we grade your work we ll settle on a single format A normalized phone number is displayed as a sequence of digits with no parentheses dashes etc For example the normalized version of the phone number listed in several formats above is 9491234567 Implementing your SkipListMap The core directory in your project directory contains a file SkipListMap hpp which contains the declaration of a template class SkipListMap KeyType ValueType One of your primary goals of this project is to implement that template class including all of the member functions declared in SkipListMap hpp Note that we will be running our own unit tests against your implementation so you cannot change the signatures of public member functions in any way and you cannot change the fact that SkipListMap is a template with two type parameters KeyType and ValueType as our unit tests will presume that these things have not changed You can however add any additional member functions and member variables to the class you d like it s just important that existing members remain unaltered Deciding on constraints for the template arguments As we ve seen previously template classes and template functions take arguments which are used to configure them for one particular purpose Most often those arguments are types For example if you look at SkipListMap hpp you ll see that the declaration of the SkipListMap template class begins this way template typename KeyType typename ValueType class SkipListMap This means that the SkipListMap template class takes two parameters both of which are types called KeyType and ValueType Not surprisingly KeyType represents the type of keys that will be stored in a SkipListMap while ValueType represents the type of values that will be stored To make a template as flexible as possible one design goal is ensuring that there are as few constraints as possible on its arguments In this case we d like to support the widest possible set of possible key types and value types Ideally either could be anything as a practical matter though there are constraints that come into play In order to be able to search a SkipListMap to determine whether a particular key is present it s important to be able to compare keys for equality The natural way to do that in C is to use the operator two objects are considered equal in C if their operator returns true So whenever we need to compare two keys in our SkipListMap implementation we ll use the operator for this purpose The nodes on each level of a skip list are organized so that the keys are in ascending order This necessitates some way of comparing them for ordering A natural choice in C is to use relational operators like or for this purpose It must be possible to copy keys since we ll be storing copies of the keys passed into member functions like add or set into the nodes of our skip list There are no calculations that a SkipListMap needs to do with values so they can be essentially anything except that it needs to be possible to copy them since we ll be storing copies of them in the nodes of our skip list Remember though that our goal is to allow as much flexibility as possible in this case to accept the widest possible variety of key and value types So we ll need to take a little bit of additional care In particular using a wider variety of operators reduces the set of possible types that we can use as keys We can achieve the dual goals of supporting checking keys for equality and comparing them for ordering by using only two operators and Any other operation we need to implement can be rewritten in terms of these for example k1 k2 could be written as k2 k1 or k1 k2 could be written as k1 k2 Note that the latter example doesn t require the operator to be supported by our keys since it s being performed on the boolean result of the operator Aside from comparing them and copying them we shouldn t do anything to keys e g call member functions on them print them to the console so that we avoid limiting them You might want to print them to the console during your debugging but you wouldn t want to leave that in your SkipListMap implementation since it would make it impossible to use SkipListMap with keys that can t be printed to the console using the operartor We shouldn t do anything to values other than copy them e g construct copies use the assignment operator to avoid limiting them So from all of this analysis we can ultimately derive a complete list of constraints on KeyType and ValueType KeyType must support a operator and an operator KeyType must support copying i e have a copy constructor and an assignment operator ValueType must support copying i e have a copy constructor and an assignment operator Your SkipListMap implementation should apply only these constraints and no others any type that meets these constraints should be supported Sanity checking your SkipListMap implementation To ensure that your SkipListMap is compatible with our unit tests a set of sanity checking unit tests are included in the gtest directory in your project directory They make no attempt to validate any of the SkipListMap s functionality but they do at least ensure that your SkipListMap contains all of the necessary member functions and will be compatible with our unit tests Initially the sanity checking unit tests will not compile this is why they are all commented out but as you work you ll be able to gradually uncomment them and see them compile If you haven t successfully uncommented and compiled all of the sanity checking unit tests your SkipListMap will not compile against our unit tests As you work you may discover that the sanity checking tests that once compiled and linked successfully suddenly don t anymore this is actually a clue that something important may have changed so you ll want to be cognizant of it Many of the errors you ll get from the sanity checking tests are actually linker errors which can be a bit difficult to unravel when you haven t had a lot of practice with them but if you compile relatively often there won t be many candidates whenever you have a problem focus on changes you made most recently and you ll find your likely culprit Unit testing Along with your SkipListMap implementation you are required to implement a set of unit tests using Google Test separate from our sanity checking unit tests Our sanity checking tests ensure that your SkipListMap implementation is structurally correct i e that it has the necessary member functions supports keys and values of the appropriate types but not that it is functionally correct your goal with your unit tests is to ensure functional correctness Before building a program atop a data structure implementation it s vital to be sure that the data structure actually works as intended so you d be well advised to implement your unit tests alongside your SkipListMap implementation work proceeding with the rest of the program only once you ve got a SkipListMap that is complete and correct This is the right strategy if you re thinking about partial credit for incomplete work as a large part of the challenge here and therefore a large portion of the credit is allocated to your SkipListMap Your unit tests should cover all of your SkipListMap s functionality including member functions and cases that may not arise in your actual program part of the goal here is to build a SkipListMap that would be suitable for use in programs other than this one so it s important that you verify that it works even in ways that it doesn t need to work in your application If you have a good set of unit tests that covers the important possibilities there s a really good chance that your SkipListMap will pass all of our unit tests after you submit your work As usual write your unit tests in the gtest directory in your project directory Write them in a source file other than the provided one that contains sanity checking unit tests your unit tests have a separate goal Deliverables After using the gather script in your project directory to gather up your C source and header files into a single project3 tar gz file as you did in Project submit that file and only that file to Checkmate Refer back to Project if you need instructions on how to do that Follow this link for a discussion of how to submit your project via Checkmate Be aware that I ll be holding you to all of the rules specified in that document including the one that says that you re reponsible for submitting the version of the project that you want graded We won t regrade a project simply because you submitted the wrong version accidentally It s not a bad idea to look at the contents of your tarball before submitting it see Project for instructions on how to do that Can I submit after the deadline Yes it is possible subject to the late work policy for this course which is described in the section titled Late work at this link Originally written by Alex Thornton Spring 2 14 ", "_id": "http://www.ics.uci.edu/~thornton/ics46/ProjectGuide/Project3/", "title": "ics 46 spring 2014, project #3: standing outside a broken phone booth with money in my hand", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 46 Spring 2014, Project #3: Standing Outside a Broken Phone Booth with Money in My Hand</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 46 Spring 2014 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 46 Spring 2014<br />\r\n   Project #3: <i>Standing Outside a Broken Phone Booth with Money in My Hand</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Sunday, June 1, 11:59pm</i></b></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>The previous two projects shared a focus on developing recursive algorithms.  Though both were also well-known data structure traversals in disguise, they were largely intended to build up your facility with somewhat more complex recursive algorithms than you might have been accustomed to writing before.  There are many real-world scenarios in which you'll need to develop algorithms to proceed data structures that you already have (such as the maze from <a href=\"../Project1\">Project #1</a>), or that you build or discover on the fly (such as the search tree you navigated in <a href=\"../Project2\">Project #2</a>).  But sometimes the data structure you need simply isn't available to you &mdash; perhaps it hasn't been implemented in your programming language's library or a suitably-licensed implementation isn't available in open source.  In cases like this, it sometimes becomes necessary to implement your own custom data structures.</p>\r\n\r\n<p>This project places the focus squarely on custom data structure implementation, asking you to implement a classic data structure called a <i>map</i> using a <i>skip list</i>.  While your skip list will be used to solve one particular problem, the goal when implementing a data structure &mdash; particularly one as broadly useful as a map &mdash; is to implement it in a way that it might be reused again later.  So your skip list implementation will be generic, able to support different kinds of keys and different kinds of values.  In C++ terms, that means it will need to be implemented using templates; this project also aims to improve your understanding of template functions and template classes.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>Before you begin work on this project, there are a couple of chores you'll need to complete on your ICS 46 VM to get it set up to proceed.</p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 46 VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 46 VM, you may need to refresh its environment before proceeding with this project.  Log into your VM and issue the command <b>ics46 version</b> to see what version of the ICS 46 environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics46 refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2014-05-22 01:40:17\r\nProject #3 template available\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 46 VM</p>\r\n\r\n<p>A project template has been created specifically for this project, containing a similar structure to the other templates you've seen previously, including some code that is being provided as a starting point and that you are required to work from.  So you'll absolutely need to use the <b>project3</b> template for this project, as opposed to the <b>basic</b> one or one from a previous project.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics46 start_project <i>YOUR_CHOSEN_PROJECT_NAME</i> project3</b> to create your new project directory using the <b>project3</b> template.  (For example, if you wanted to call your project directory <b>proj3</b>, you would issue the command <b>ics46 start_project proj3 project3</b> to create it.)  Now you're ready to proceed!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The project directory</p>\r\n\r\n<p>Change into your project directory and take a look around.  Having already completed <a href=\"../Project2\">Project #2</a>, what you will see will look very familiar.  Once again, your project directory is capable of building three separate programs that you can run by issuing the commands <b>./run app</b>, <b>./run exp</b>, or <b>./run gtest</b>.  This time, there are no precompiled libraries, and there is a lot less pre-written code, as you'll be working mostly from scratch this time.  The usual <b>app</b>, <b>core</b>, <b>exp</b>, and <b>gtest</b> directories are available for writing your code, and they serve the same purpose as always.</p>\r\n\r\n<p>Note that you'll be required to write code in the <b>app</b>, <b>core</b>, and <b>gtest</b> directories during this project.  (More on this later.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>While this project is centered around a data structure implementation, there is also a program to write, albeit a relatively straightforward one.  In the <b>app</b> directory in your project direcotry, write a program that processes input from a hypothetical web site used to allow people to recommend a social networking service to their friends.  Recommendations are done by visiting a web site and typing the friend's phone number; the phone number is used to send the friend a text message advertising the service.  If enough friends make a recommendation of a particular phone number, the owner of that phone number is offered a bonus for signing up for the service.</p>\r\n\r\n<p>Because of regulatory concerns (e.g., it's possible that these kinds of text-message-based offers are not legal in all areas), it is possible to disallow an entire area code, in which case any phone number with that area code is removed from the database immediately, and it is no longer possible to register them.</p>\r\n\r\n<p>We'll presume that this system is intended to run only in the United States, so we'll support only phone numbers in the style used in the U.S.</p>\r\n\r\n<p class=\"subtitle\">The input and output</p>\r\n\r\n<p>The input to the program is a series of <i>events</i>, each written as a single line of text to <b>std::cin</b>.  This input represents a distillation of what's happening on the web site; for example, when a user recommends the service to a friend, that results in a line of input to your program.</p>\r\n\r\n<p>Each event is processed and results in one or more lines of output to <b>std::cout</b>.  The events and their corresponding outputs are described below.</p>\r\n\r\n<table class=\"normal\">\r\n  <tr class=\"top\">\r\n    <td>Input&nbsp;Format</td>\r\n    <td>Description</td>\r\n    <td>Output&nbsp;Format</td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>REC&nbsp;<i>phone_number</i></b></td>\r\n    <td>This event occurs when a user has recommended another user, with <i>phone_number</i> being the phone number that was specified in the recommendation on the web site.  Note that <i>phone_number</i> could have been entered in any format, including invalid ones.</td>\r\n    <td>\r\n      <ul>\r\n        <li><b>OFFER&nbsp;<i>phone_number_normalized</i></b>\r\n          <ul>\r\n            <li>If the recommendation was successful, this is the output; note that success occurs even if the phone number has been recommended before.  <i>phone_number_normalized</i> is a normalized phone number (see below).\r\n          </ul>\r\n        </li>\r\n        <li><b>BONUS&nbsp;<i>phone_number_normalized</i></b>\r\n          <ul>\r\n            <li>If the phone number has been successfully recommended an exact multiple of ten times (i.e., on the tenth, twentieth, thirtieth, etc., successful recommendation), this line of output appears after the <b>OFFER</b> output.</li>\r\n          </ul>\r\n        </li>\r\n        <li><b>INVALID&nbsp;<i>invalid_phone_number</i></b>\r\n          <ul>\r\n            <li>If the recommendation did not constitute a valid phone number (see below), this line of output appears.</li>\r\n          </ul>\r\n        </li>\r\n        <li><b>ILLEGAL&nbsp;<i>phone_number_normalized</i></b>\r\n          <ul>\r\n            <li>If the recommended phone number has a disallowed area code, or if the phone number has been canceled (see below), this line of output appears.</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>CANCEL&nbsp;phone_number</b></td>\r\n    <td>This event occurs when a user cancels his or her own phone number (i.e., specifies that he or she is no longer interested in offers).  Subsequently, the phone number cannot be recommended successfully.</td>\r\n    <td>\r\n      <ul>\r\n        <li><b>CANCELED&nbsp;<i>phone_number_normalized</i></b>\r\n          <ul>\r\n            <li>If the phone number was valid, it is canceled and this is the output.  Note that the phone number does not have to have been successfully recommended previously to be canceled.</li>\r\n          </ul>\r\n        </li>\r\n        <li><b>INVALID&nbsp;<i>invalid_phone_number</i></b>\r\n          <ul>\r\n            <li>If the phone number was invalid (see below), this line of output appears.</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>DISALLOW&nbsp;area_code</b></td>\r\n    <td>This event occurs when an entire area code has been disallowed (e.g., because a particular state or locality has passed regulations or laws making this kind of promotion illegal).  All phone numbers in that area code are immediately canceled, and no subsequent phone numbers from that area code are permitted.</td>\r\n    <td>\r\n      <ul>\r\n        <li><b>DISALLOWED&nbsp;area_code</b>\r\n          <ul>\r\n            <li>If the area code is valid, the cancelation of that area code occurs and this is the output.</li>\r\n          </ul>\r\n        </li>\r\n        <li><b>INVALID&nbsp;invalid_area_code</b>\r\n          <ul>\r\n            <li>If the area code was invalid (see below), this line of output appears.</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><b>EXIT</b></td>\r\n    <td>This event occurs when there is no more input.</td>\r\n    <td><b>DONE</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>anything else</i>\r\n    <td>If the input contains anything that is not a valid event as described above, it is an error.  Print an error message and continue reading input.</td>\r\n    <td><b>ERROR</b></td>\r\n  </tr>\r\n</table>\r\n\r\n<p>You'll find an example input file called <b>test.in</b> in the <b>inputs</b> directory in your project directory; while it is not an exhaustive test, it does show examples of all of the commands and a few phone number formats.</p>\r\n\r\n<p class=\"subtitle\">On the dirtiness of \"real\" data</p>\r\n\r\n<p>One of the primary problems with data supplied by human users of a system, such as the phone numbers being entered into our hypothetical web site in this example, is that users may not respect the same rules for formatting that data that you might expect.  For example, there are lots of ways that people write or type phone numbers; here are a few:</p>\r\n\r\n<blockquote><pre>\r\n949-123-4567\r\n(949) 123-4567\r\n949/123-4567\r\n9491234567\r\n(949)123-4567\r\n</pre></blockquote>\r\n\r\n<p>While a user interface can help by validating and/or disallowing incorrectly-formatted data, the fact remains that the data entered by your users might be \"dirty\" in one way or another, so it becomes necessary to \"clean\" it.  To simulate that kind of real-world issue, we'll say that your program will take, as input, whatever phone numbers users type, in whatever format users choose to use; it's up to you to read that data and make sense out of the phone numbers that are valid, while noting the ones that aren't.</p>\r\n\r\n<p class=\"subtitle\">Phone numbers in the U.S.</p>\r\n\r\n<p>Just to be clear on terminology, a phone number in the United States consists of ten digits, arranged in three parts: the first three are called an <i>area code</i>, the next three are called a <i>prefix</i>, and the last four are called a <i>suffix</i>.  These mostly correspond to geographical areas (e.g., phone numbers in the immediate area around UCI predominantly have area codes of 714 and 949) and were once the basis for which telephone charges were assessed (with longer-distance calls charged at a higher rate than shorter-distance ones); of course, mobile phones have blurred the boundaries and rules somewhat, but the basic structure of phone numbers remains.</p>\r\n\r\n<p>So, in general, if a phone number entered as input consists of ten digits &mdash; regardless of whatever other characters are present &mdash; accept the ten digits as a phone number and ignore the other characters.  If there aren't exactly ten digits, the phone number is considered invalid.  Meanwhile, area codes are always three digits.</p>\r\n\r\n<p class=\"subtitle\">What is a \"normalized\" phone number?</p>\r\n\r\n<p>The requirements above state that you should sometimes print out a <i>normalized</i> phone number.  The basic goal is for there to be one format that is the \"normalized\" one, no matter what format users have typed into the web form.  In reality, any format would work fine, as long as you were consistent; however, to make things easier for us when we grade your work, we'll settle on a single format:</p>\r\n\r\n<ul>\r\n  <li>A normalized phone number is displayed as a sequence of digits with no parentheses, dashes, etc.  For example, the normalized version of the phone number listed in several formats above is <b>9491234567</b>.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Implementing your SkipListMap</p>\r\n\r\n<p>The <b>core</b> directory in your project directory contains a file <b>SkipListMap.hpp</b>, which contains the declaration of a template class <b>SkipListMap&lt;KeyType, ValueType&gt;</b>.  One of your primary goals of this project is to implement that template class, including all of the member functions declared in <b>SkipListMap.hpp</b>.  Note that we will be running our own unit tests against your implementation, so <i>you cannot</i> change the signatures of public member functions in any way, and you cannot change the fact that <b>SkipListMap</b> is a template with two type parameters (KeyType and ValueType), as our unit tests will presume that these things have not changed.  You can, however, add any additional member functions and member variables to the class you'd like; it's just important that existing members remain unaltered.</p>\r\n\r\n<p class=\"subtitle\">Deciding on constraints for the template arguments</p>\r\n\r\n<p>As we've seen previously, template classes and template functions take <i>arguments</i>, which are used to configure them for one particular purpose.  Most often, those arguments are types.  For example, if you look at <b>SkipListMap.hpp</b>, you'll see that the declaration of the <b>SkipListMap</b> template class begins this way:</p>\r\n\r\n<blockquote><pre>\r\n<b>template</b> &lt;<b>typename</b> KeyType, <b>typename</b> ValueType&gt;\r\n<b>class</b> SkipListMap\r\n{\r\n    ...\r\n</pre></blockquote>\r\n\r\n<p>This means that the <b>SkipListMap</b> template class takes two parameters, both of which are types, called <b>KeyType</b> and <b>ValueType</b>.  Not surprisingly, <b>KeyType</b> represents the type of keys that will be stored in a <b>SkipListMap</b>, while <b>ValueType</b> represents the type of values that will be stored.</p>\r\n\r\n<p>To make a template as flexible as possible, one design goal is ensuring that there are as few constraints as possible on its arguments.  In this case, we'd like to support the widest possible set of possible key types and value types.  Ideally, either could be anything; as a practical matter, though, there are constraints that come into play.</p>\r\n\r\n<ul>\r\n  <li>In order to be able to search a <b>SkipListMap</b> to determine whether a particular key is present, it's important to be able to compare keys for equality.  The natural way to do that in C++ is to use the == operator; two objects are considered equal in C++ if their == operator returns <b>true</b>.  So, whenever we need to compare two keys in our <b>SkipListMap</b> implementation, we'll use the == operator for this purpose.</li>\r\n  <li>The nodes on each level of a skip list are organized so that the keys are in ascending order.  This necessitates some way of comparing them for ordering.  A natural choice in C++ is to use relational operators like &lt; or &gt;= for this purpose.</li>\r\n  <li>It must be possible to copy keys, since we'll be storing copies of the keys passed into member functions like <b>add</b> or <b>set</b> into the nodes of our skip list.</li>\r\n  <li>There are no calculations that a <b>SkipListMap</b> needs to do with values, so they can be essentially anything, <i>except</i> that it needs to be possible to copy them (since we'll be storing copies of them in the nodes of our skip list).</li>\r\n</ul>\r\n\r\n<p>Remember, though, that our goal is to allow as much flexibility as possible &mdash; in this case, to accept the widest possible variety of key and value types.  So we'll need to take a little bit of additional care.  In particular, using a wider variety of operators reduces the set of possible types that we can use as keys.</p>\r\n\r\n<ul>\r\n  <li>We can achieve the dual goals of supporting checking keys for equality and comparing them for ordering by using only two operators: &lt; and ==.  Any other operation we need to implement can be rewritten in terms of these; for example, <b>k1 &gt; k2</b> could be written as <b>k2 &lt; k1</b>, or <b>k1 != k2</b> could be written as <b>!(k1 == k2)</b>  (Note that the latter example doesn't require the ! operator to be supported by our keys, since it's being performed on the boolean result of the &lt; operator.)</li>\r\n  <li>Aside from comparing them and copying them, we shouldn't do anything to keys (e.g., call member functions on them, print them to the console), so that we avoid limiting them.  (You might want to print them to the console during your debugging, but you wouldn't want to leave that in your <b>SkipListMap</b> implementation, since it would make it impossible to use <b>SkipListMap</b> with keys that can't be printed to the console using the &lt;&lt; operartor.)</li>\r\n  <li>We shouldn't do anything to values other than copy them (e.g., construct copies, use the assignment operator) to avoid limiting them.</li>\r\n</ul>\r\n\r\n<p>So, from all of this analysis, we can ultimately derive a complete list of constraints on <b>KeyType</b> and <b>ValueType</b>.</p>\r\n\r\n<ul>\r\n  <li><b>KeyType</b> must support a &lt; operator and an == operator.</li>\r\n  <li><b>KeyType</b> must support copying (i.e., have a copy constructor and an assignment operator).</li>\r\n  <li><b>ValueType</b> must support copying (i.e., have a copy constructor and an assignment operator).</li>\r\n</ul>\r\n\r\n<p>Your <b>SkipListMap</b> implementation should apply only these constraints and no others; any type that meets these constraints should be supported.</p>\r\n\r\n<p class=\"subtitle\">Sanity-checking your SkipListMap implementation</p>\r\n\r\n<p>To ensure that your SkipListMap is compatible with our unit tests, a set of \"sanity-checking\" unit tests are included in the <b>gtest</b> directory in your project directory.  They make no attempt to validate any of the SkipListMap's functionality, but they do at least ensure that your SkipListMap contains all of the necessary member functions and will be compatible with our unit tests.  Initially, the sanity-checking unit tests will not compile &mdash; this is why they are all commented out &mdash; but as you work, you'll be able to gradually uncomment them and see them compile.  If you haven't successfully uncommented and compiled all of the sanity-checking unit tests, your SkipListMap will not compile against our unit tests.</p>\r\n\r\n<p>As you work, you may discover that the sanity-checking tests that once compiled and linked successfully suddenly don't anymore; this is actually a clue that something important may have changed, so you'll want to be cognizant of it.  Many of the errors you'll get from the sanity-checking tests are actually linker errors, which can be a bit difficult to unravel when you haven't had a lot of practice with them, but if you compile relatively often, there won't be many candidates whenever you have a problem; focus on changes you made most recently and you'll find your likely culprit.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Unit testing</p>\r\n\r\n<p>Along with your SkipListMap implementation, you are required to implement a set of unit tests using Google Test, separate from our sanity-checking unit tests.  Our sanity-checking tests ensure that your <b>SkipListMap</b> implementation is structurally correct (i.e., that it has the necessary member functions, supports keys and values of the appropriate types), but not that it is functionally correct; your goal with your unit tests is to ensure functional correctness.</p>\r\n\r\n<p>Before building a program atop a data structure implementation, it's vital to be sure that the data structure actually works as intended, so you'd be well-advised to implement your unit tests alongside your <b>SkipListMap</b> implementation work, proceeding with the rest of the program only once you've got a <b>SkipListMap</b> that is complete and correct.  (This is the right strategy if you're thinking about partial credit for incomplete work, as a large part of the challenge here &mdash; and, therefore, a large portion of the credit &mdash; is allocated to your <b>SkipListMap</b>.)</p>\r\n\r\n<p>Your unit tests should cover all of your <b>SkipListMap</b>'s functionality, including member functions and cases that may not arise in your actual program; part of the goal here is to build a <b>SkipListMap</b> that would be suitable for use in programs other than this one, so it's important that you verify that it works, even in ways that it doesn't need to work in your application.  If you have a good set of unit tests that covers the important possibilities, there's a really good chance that your SkipListMap will pass all of our unit tests after you submit your work.</p>\r\n\r\n<p>As usual, write your unit tests in the <b>gtest</b> directory in your project directory.  Write them in a source file <i>other than</i> the provided one that contains sanity-checking unit tests; your unit tests have a separate goal.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project3.tar.gz</b> file (as you did in <a href=\"../Project0\">Project #0</a>, submit that file (and only that file) to Checkmate.  Refer back to <a href=\"../Project0\">Project #0</a> if you need instructions on how to do that.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're reponsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball before submitting it; see <a href=\"../Project0\">Project #0</a> for instructions on how to do that.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Originally written by Alex Thornton, Spring 2014.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 16798.0}