{"text": "1 package swirl workspace 2 3 import java awt Color 4 import java util Map 5 6 import junit framework Test 7 import junit framework TestCase 8 import junit framework TestSuite 9 1 import org apache commons logging Log 11 import org apache commons logging LogFactory 12 13 import swirl workspace messages MessageSender 14 import swirl workspace security SwirlSecurity 15 import swirl workspace viz SwirlModel 16 17 18 TODO 19 2 author author 21 version Revision 1 2 22 23 public class PeerManagerTest extends TestCase 24 25 TODO 26 EmptySender sender new EmptySender 27 28 TODO 29 private Log log LogFactory getLog this getClass 3 31 32 Creates a new PeerManagerTest object 33 34 param test TODO 35 36 throws Exception TODO 37 38 public PeerManagerTest String test throws Exception 39 4 super test 41 42 43 44 TODO 45 46 return TODO 47 48 public static Test suite 49 5 Configuration init System getProperty basedir 51 target webapps swirl 52 53 54 TestSuite suite new TestSuite 55 suite addTest new PeerManagerTest testTwoPeerManagers 56 return suite 57 58 return new TestSuite PeerManagerTest class 59 6 61 62 TODO 63 64 throws Exception TODO 65 66 public void testBasePeer throws Exception 67 68 Peer peer new BasePeer Color BLACK test user 69 http www yahoo com 7 71 assertEquals Color BLACK peer getColor 72 assertEquals test user peer getUserName 73 74 75 76 TODO 77 78 throws Exception TODO 79 8 public void testPeerManager throws Exception 81 82 PeerManager peerManager new PeerManager sender 83 84 if log isDebugEnabled 85 86 log debug peerManager peerManager 87 88 89 TestPeerManagerListener listener new TestPeerManagerListener 9 91 peerManager addPeerManagerListener listener 92 peerManager start 93 94 swirl workspace security SecurityManager secMan new 95 swirl workspace security SecurityManager new SwirlSecurity 96 PeerTableModel model new PeerTableModel new SwirlModel peerManager secMan null null 97 98 model getColumnCount 99 model getColumnName 1 assertEquals model getRowCount 1 1 1 2 MePeerFinder finder new MePeerFinder peerManager 1 3 1 4 assertNotNull PeerManager should not return null peerManager 1 5 finder start 1 6 1 7 if log isDebugEnabled 1 8 1 9 log debug size peerManager size 11 111 112 assertEquals PeerManager should have two peers 2 peerManager size 113 assertEquals 2 model getRowCount 114 115 assertEquals Me model getValueAt 116 assertNotNull model getValueAt 1 117 118 peerManager removePeerManagerListener listener 119 finder stop 12 121 if log isDebugEnabled 122 123 log debug size peerManager size 124 125 126 assertEquals PeerManager should have no peers peerManager size 127 assertEquals model getRowCount 128 129 peerManager stop 13 131 132 133 TODO 134 135 author author 136 version Revision 1 2 137 138 private class EmptySender implements MessageSender 139 14 141 TODO 142 143 param msg TODO 144 145 public void sendMessage Map msg 146 147 if log isDebugEnabled 148 149 log debug sendMessage msg 15 151 152 153 public void sendMessage Map msg boolean isPrivate 154 155 if log isDebugEnabled 156 157 log debug sendMessage msg isPrivate 158 159 16 161 162 163 TODO 164 165 author author 166 version Revision 1 2 167 168 private class TestPeerManagerListener implements PeerManagerListener 169 17 171 TODO 172 173 param peer TODO 174 175 public void peerJoined Peer peer 176 177 assertNotNull peer 178 179 18 181 TODO 182 183 param peer TODO 184 185 public void peerLeft Peer peer 186 187 assertNotNull peer 188 189 19 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/swirl/workspace/PeerManagerTest.html", "title": "peermanagertest xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>PeerManagerTest xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.awt.Color;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.util.Map;\n<a name=\"5\" href=\"#5\">5</a>   \n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> junit.framework.Test;\n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> junit.framework.TestCase;\n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> junit.framework.TestSuite;\n<a name=\"9\" href=\"#9\">9</a>   \n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"12\" href=\"#12\">12</a>  \n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> swirl.workspace.messages.MessageSender;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> swirl.workspace.security.SwirlSecurity;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> swirl.workspace.viz.SwirlModel;\n<a name=\"16\" href=\"#16\">16</a>  \n<a name=\"17\" href=\"#17\">17</a>  <em>/**<em>*</em></em>\n<a name=\"18\" href=\"#18\">18</a>  <em> * TODO</em>\n<a name=\"19\" href=\"#19\">19</a>  <em> *</em>\n<a name=\"20\" href=\"#20\">20</a>  <em> * @author $author$</em>\n<a name=\"21\" href=\"#21\">21</a>  <em> * @version $Revision: 1.20 $</em>\n<a name=\"22\" href=\"#22\">22</a>  <em> */</em>\n<a name=\"23\" href=\"#23\">23</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../swirl/workspace/PeerManagerTest.html\">PeerManagerTest</a> <strong>extends</strong> TestCase\n<a name=\"24\" href=\"#24\">24</a>  {\n<a name=\"25\" href=\"#25\">25</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"26\" href=\"#26\">26</a>      EmptySender sender = <strong>new</strong> EmptySender();\n<a name=\"27\" href=\"#27\">27</a>  \n<a name=\"28\" href=\"#28\">28</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"29\" href=\"#29\">29</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"30\" href=\"#30\">30</a>  \n<a name=\"31\" href=\"#31\">31</a>      <em>/**<em>*</em></em>\n<a name=\"32\" href=\"#32\">32</a>  <em>     * Creates a new PeerManagerTest object.</em>\n<a name=\"33\" href=\"#33\">33</a>  <em>     *</em>\n<a name=\"34\" href=\"#34\">34</a>  <em>     * @param test TODO</em>\n<a name=\"35\" href=\"#35\">35</a>  <em>     *</em>\n<a name=\"36\" href=\"#36\">36</a>  <em>     * @throws Exception TODO</em>\n<a name=\"37\" href=\"#37\">37</a>  <em>     */</em>\n<a name=\"38\" href=\"#38\">38</a>      <strong>public</strong> <a href=\"../../swirl/workspace/PeerManagerTest.html\">PeerManagerTest</a>(String test) throws Exception\n<a name=\"39\" href=\"#39\">39</a>      {\n<a name=\"40\" href=\"#40\">40</a>          <strong>super</strong>(test);\n<a name=\"41\" href=\"#41\">41</a>      }\n<a name=\"42\" href=\"#42\">42</a>  \n<a name=\"43\" href=\"#43\">43</a>      <em>/**<em>*</em></em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     * TODO</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     *</em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     * @return TODO</em>\n<a name=\"47\" href=\"#47\">47</a>  <em>     */</em>\n<a name=\"48\" href=\"#48\">48</a>      <strong>public</strong> <strong>static</strong> Test suite()\n<a name=\"49\" href=\"#49\">49</a>      {\n<a name=\"50\" href=\"#50\">50</a>          Configuration.init(System.getProperty(<span class=\"string\">\"basedir\"</span>, <span class=\"string\">\".\"</span>)\n<a name=\"51\" href=\"#51\">51</a>                             + <span class=\"string\">\"/target/webapps/swirl\"</span>);\n<a name=\"52\" href=\"#52\">52</a>  \n<a name=\"53\" href=\"#53\">53</a>          <em class=\"comment\">/*</em>\n<a name=\"54\" href=\"#54\">54</a>  <em class=\"comment\">           TestSuite suite = new TestSuite();</em>\n<a name=\"55\" href=\"#55\">55</a>  <em class=\"comment\">           suite.addTest(new PeerManagerTest(\"testTwoPeerManagers\"));</em>\n<a name=\"56\" href=\"#56\">56</a>  <em class=\"comment\">           return suite;</em>\n<a name=\"57\" href=\"#57\">57</a>  <em class=\"comment\">           //*/</em>\n<a name=\"58\" href=\"#58\">58</a>          <strong>return</strong> <strong>new</strong> TestSuite(PeerManagerTest.<strong>class</strong>);\n<a name=\"59\" href=\"#59\">59</a>      }\n<a name=\"60\" href=\"#60\">60</a>  \n<a name=\"61\" href=\"#61\">61</a>      <em>/**<em>*</em></em>\n<a name=\"62\" href=\"#62\">62</a>  <em>     * TODO</em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     *</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     * @throws Exception TODO</em>\n<a name=\"65\" href=\"#65\">65</a>  <em>     */</em>\n<a name=\"66\" href=\"#66\">66</a>      <strong>public</strong> <strong>void</strong> testBasePeer() throws Exception\n<a name=\"67\" href=\"#67\">67</a>      {\n<a name=\"68\" href=\"#68\">68</a>          Peer peer = <strong>new</strong> BasePeer(Color.BLACK, <span class=\"string\">\"test-user\"</span>,\n<a name=\"69\" href=\"#69\">69</a>                                   <span class=\"string\">\"http://www.yahoo.com\"</span>);\n<a name=\"70\" href=\"#70\">70</a>  \n<a name=\"71\" href=\"#71\">71</a>          assertEquals(Color.BLACK, peer.getColor());\n<a name=\"72\" href=\"#72\">72</a>          assertEquals(<span class=\"string\">\"test-user\"</span>, peer.getUserName());\n<a name=\"73\" href=\"#73\">73</a>      }\n<a name=\"74\" href=\"#74\">74</a>  \n<a name=\"75\" href=\"#75\">75</a>      <em>/**<em>*</em></em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     * TODO</em>\n<a name=\"77\" href=\"#77\">77</a>  <em>     *</em>\n<a name=\"78\" href=\"#78\">78</a>  <em>     * @throws Exception TODO</em>\n<a name=\"79\" href=\"#79\">79</a>  <em>     */</em>\n<a name=\"80\" href=\"#80\">80</a>      <strong>public</strong> <strong>void</strong> testPeerManager() throws Exception\n<a name=\"81\" href=\"#81\">81</a>      {\n<a name=\"82\" href=\"#82\">82</a>          PeerManager peerManager = <strong>new</strong> PeerManager(sender);\n<a name=\"83\" href=\"#83\">83</a>  \n<a name=\"84\" href=\"#84\">84</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"85\" href=\"#85\">85</a>          {\n<a name=\"86\" href=\"#86\">86</a>              log.debug(<span class=\"string\">\"peerManager: \"</span> + peerManager);\n<a name=\"87\" href=\"#87\">87</a>          }\n<a name=\"88\" href=\"#88\">88</a>  \n<a name=\"89\" href=\"#89\">89</a>          TestPeerManagerListener listener = <strong>new</strong> TestPeerManagerListener();\n<a name=\"90\" href=\"#90\">90</a>  \n<a name=\"91\" href=\"#91\">91</a>          peerManager.addPeerManagerListener(listener);\n<a name=\"92\" href=\"#92\">92</a>          peerManager.start();\n<a name=\"93\" href=\"#93\">93</a>  \n<a name=\"94\" href=\"#94\">94</a>          swirl.workspace.security.SecurityManager secMan = <strong>new</strong>\n<a name=\"95\" href=\"#95\">95</a>  \t\t\tswirl.workspace.security.SecurityManager(<strong>new</strong> SwirlSecurity[]{});\n<a name=\"96\" href=\"#96\">96</a>          PeerTableModel model = <strong>new</strong> PeerTableModel(<strong>new</strong> SwirlModel(peerManager, secMan, <strong>null</strong>, <strong>null</strong>));\n<a name=\"97\" href=\"#97\">97</a>  \n<a name=\"98\" href=\"#98\">98</a>          model.getColumnCount();\n<a name=\"99\" href=\"#99\">99</a>          model.getColumnName(0);\n<a name=\"100\" href=\"#100\">100</a>         assertEquals(0, model.getRowCount());\n<a name=\"101\" href=\"#101\">101</a> \n<a name=\"102\" href=\"#102\">102</a>         MePeerFinder finder = <strong>new</strong> MePeerFinder(peerManager);\n<a name=\"103\" href=\"#103\">103</a> \n<a name=\"104\" href=\"#104\">104</a>         assertNotNull(<span class=\"string\">\"PeerManager should not return null\"</span>, peerManager);\n<a name=\"105\" href=\"#105\">105</a>         finder.start();\n<a name=\"106\" href=\"#106\">106</a> \n<a name=\"107\" href=\"#107\">107</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"108\" href=\"#108\">108</a>         {\n<a name=\"109\" href=\"#109\">109</a>             log.debug(<span class=\"string\">\"size: \"</span> + peerManager.size());\n<a name=\"110\" href=\"#110\">110</a>         }\n<a name=\"111\" href=\"#111\">111</a> \n<a name=\"112\" href=\"#112\">112</a>         assertEquals(<span class=\"string\">\"PeerManager should have two peers\"</span>, 2, peerManager.size());\n<a name=\"113\" href=\"#113\">113</a>         assertEquals(2, model.getRowCount());\n<a name=\"114\" href=\"#114\">114</a> \n<a name=\"115\" href=\"#115\">115</a>         assertEquals(<span class=\"string\">\"Me\"</span>, model.getValueAt(0, 0));\n<a name=\"116\" href=\"#116\">116</a>         assertNotNull(model.getValueAt(0, 1));\n<a name=\"117\" href=\"#117\">117</a> \n<a name=\"118\" href=\"#118\">118</a>         peerManager.removePeerManagerListener(listener);\n<a name=\"119\" href=\"#119\">119</a>         finder.stop();\n<a name=\"120\" href=\"#120\">120</a> \n<a name=\"121\" href=\"#121\">121</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"122\" href=\"#122\">122</a>         {\n<a name=\"123\" href=\"#123\">123</a>             log.debug(<span class=\"string\">\"size: \"</span> + peerManager.size());\n<a name=\"124\" href=\"#124\">124</a>         }\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>         assertEquals(<span class=\"string\">\"PeerManager should have no peers\"</span>, 0, peerManager.size());\n<a name=\"127\" href=\"#127\">127</a>         assertEquals(0, model.getRowCount());\n<a name=\"128\" href=\"#128\">128</a> \n<a name=\"129\" href=\"#129\">129</a>         peerManager.stop();\n<a name=\"130\" href=\"#130\">130</a>     }\n<a name=\"131\" href=\"#131\">131</a> \n<a name=\"132\" href=\"#132\">132</a>     <em>/**<em>*</em></em>\n<a name=\"133\" href=\"#133\">133</a> <em>     * TODO</em>\n<a name=\"134\" href=\"#134\">134</a> <em>     *</em>\n<a name=\"135\" href=\"#135\">135</a> <em>     * @author $author$</em>\n<a name=\"136\" href=\"#136\">136</a> <em>     * @version $Revision: 1.20 $</em>\n<a name=\"137\" href=\"#137\">137</a> <em>     */</em>\n<a name=\"138\" href=\"#138\">138</a>     <strong>private</strong> <strong>class</strong> EmptySender implements MessageSender\n<a name=\"139\" href=\"#139\">139</a>     {\n<a name=\"140\" href=\"#140\">140</a>         <em>/**<em>*</em></em>\n<a name=\"141\" href=\"#141\">141</a> <em>         * TODO</em>\n<a name=\"142\" href=\"#142\">142</a> <em>         *</em>\n<a name=\"143\" href=\"#143\">143</a> <em>         * @param msg TODO</em>\n<a name=\"144\" href=\"#144\">144</a> <em>         */</em>\n<a name=\"145\" href=\"#145\">145</a>         <strong>public</strong> <strong>void</strong> sendMessage(Map msg)\n<a name=\"146\" href=\"#146\">146</a>         {\n<a name=\"147\" href=\"#147\">147</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"148\" href=\"#148\">148</a>             {\n<a name=\"149\" href=\"#149\">149</a>                 log.debug(<span class=\"string\">\"sendMessage(\"</span> + msg + <span class=\"string\">\")\"</span>);\n<a name=\"150\" href=\"#150\">150</a>             }\n<a name=\"151\" href=\"#151\">151</a>         }\n<a name=\"152\" href=\"#152\">152</a>         \n<a name=\"153\" href=\"#153\">153</a>         <strong>public</strong> <strong>void</strong> sendMessage(Map msg, <strong>boolean</strong> isPrivate)\n<a name=\"154\" href=\"#154\">154</a>         {\n<a name=\"155\" href=\"#155\">155</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"156\" href=\"#156\">156</a>             {\n<a name=\"157\" href=\"#157\">157</a>                 log.debug(<span class=\"string\">\"sendMessage(\"</span> + msg + <span class=\"string\">\", \"</span> + isPrivate + <span class=\"string\">\")\"</span>);\n<a name=\"158\" href=\"#158\">158</a>             }\n<a name=\"159\" href=\"#159\">159</a>         }\n<a name=\"160\" href=\"#160\">160</a>     }\n<a name=\"161\" href=\"#161\">161</a> \n<a name=\"162\" href=\"#162\">162</a>     <em>/**<em>*</em></em>\n<a name=\"163\" href=\"#163\">163</a> <em>     * TODO</em>\n<a name=\"164\" href=\"#164\">164</a> <em>     *</em>\n<a name=\"165\" href=\"#165\">165</a> <em>     * @author $author$</em>\n<a name=\"166\" href=\"#166\">166</a> <em>     * @version $Revision: 1.20 $</em>\n<a name=\"167\" href=\"#167\">167</a> <em>     */</em>\n<a name=\"168\" href=\"#168\">168</a>     <strong>private</strong> <strong>class</strong> TestPeerManagerListener implements PeerManagerListener\n<a name=\"169\" href=\"#169\">169</a>     {\n<a name=\"170\" href=\"#170\">170</a>         <em>/**<em>*</em></em>\n<a name=\"171\" href=\"#171\">171</a> <em>         * TODO</em>\n<a name=\"172\" href=\"#172\">172</a> <em>         *</em>\n<a name=\"173\" href=\"#173\">173</a> <em>         * @param peer TODO</em>\n<a name=\"174\" href=\"#174\">174</a> <em>         */</em>\n<a name=\"175\" href=\"#175\">175</a>         <strong>public</strong> <strong>void</strong> peerJoined(Peer peer)\n<a name=\"176\" href=\"#176\">176</a>         {\n<a name=\"177\" href=\"#177\">177</a>             assertNotNull(peer);\n<a name=\"178\" href=\"#178\">178</a>         }\n<a name=\"179\" href=\"#179\">179</a> \n<a name=\"180\" href=\"#180\">180</a>         <em>/**<em>*</em></em>\n<a name=\"181\" href=\"#181\">181</a> <em>         * TODO</em>\n<a name=\"182\" href=\"#182\">182</a> <em>         *</em>\n<a name=\"183\" href=\"#183\">183</a> <em>         * @param peer TODO</em>\n<a name=\"184\" href=\"#184\">184</a> <em>         */</em>\n<a name=\"185\" href=\"#185\">185</a>         <strong>public</strong> <strong>void</strong> peerLeft(Peer peer)\n<a name=\"186\" href=\"#186\">186</a>         {\n<a name=\"187\" href=\"#187\">187</a>             assertNotNull(peer);\n<a name=\"188\" href=\"#188\">188</a>         }\n<a name=\"189\" href=\"#189\">189</a>     }\n<a name=\"190\" href=\"#190\">190</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34352.0}