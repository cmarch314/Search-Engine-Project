{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src twisted python filepath py View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 13 9 KB Line 1 test case name twisted test test paths 2 Copyright c 2 1 2 4 Twisted Matrix Laboratories 3 See LICENSE for details 45from twisted python runtime import platform67import os8import errno9import random1 import sha1112from os path import isabs exists normpath abspath splitext13from os path import basename dirname14from os path import join as joinpath15from os import sep as slash16from os import listdir utime stat1718from stat import ST MODE ST MTIME ST ATIME ST CTIME ST SIZE192 from stat import S ISREG S ISDIR2122try 23 from os path import islink24except ImportError 25 def islink path 26 return False2728try 29 from os import urandom as randomBytes3 except ImportError 31 def randomBytes n 32 randomData random randrange 256 for n in xrange n 33 return join map chr randomData 3435try 36 from base64 import urlsafe b64encode as armor37except ImportError 38 def armor s 39 return s encode hex 4 41class InsecurePath Exception 42 pass4344def secureEnoughString 45 46 Create a pseudorandom 16 character string for use in secure filenames 47 48 return armor sha new randomBytes 64 digest 16 495 class PathHelper 51 52 Abstract helper class also used by ZipPath implements certain utility methods 53 5455 def getContent self 56 return self open read 5758 def children self 59 return map self child self listdir 6 61 def walk self 62 63 Yield myself then each of my children and each of those children s64 children in turn 6566 return a generator yielding FilePath like objects 67 68 yield self69 if self isdir 7 for c in self children 71 for subc in c walk 72 yield subc7374 def sibling self path 75 return self parent child path 7677 def segmentsFrom self ancestor 78 79 Return a list of segments between a child and its ancestor 8 81 For example in the case of a path X representing a b c d and a path Y82 representing a b C Y segmentsFrom X will return C c 83 d 8485 param ancestor an instance of the same class as self ostensibly an86 ancestor of self 8788 raise ValueError if the ancestor parameter is not actually an89 ancestor i e a path for x y z is passed as an ancestor for a b c d 9 91 return a list of strs92 93 this might be an unnecessarily inefficient implementation but it will94 work on win32 and for zipfiles later I will deterimine if the95 obvious fast implemenation does the right thing too96 f self97 p f parent 98 segments 99 while f ancestor and p f 1 segments f basename 1 1 f p1 2 p p parent 1 3 if f ancestor and segments 1 4 return segments1 5 raise ValueError r not parent of r ancestor self 1 61 7class FilePath PathHelper 1 8 I am a path on the filesystem that only permits downwards access 1 911 Instantiate me with a pathname for example 111 FilePath home myuser public html and I will attempt to only provide112 access to files which reside inside that path I may be a path to a file 113 a directory or a file which does not exist 114115 The correct way to use me is to instantiate me and then do ALL filesystem116 access through me In other words do not import the os module if you117 need to open a file call my open method If you need to list a118 directory call my path method 11912 Even if you pass me a relative path I will convert that to an absolute121 path internally 122123 type alwaysCreate C bool 124 ivar alwaysCreate When opening this file only succeed if the file does not125 already exist 126 127128 slots path abs split 12913 statinfo None131 path None132133 def init self path alwaysCreate False 134 self path abspath path 135 self alwaysCreate alwaysCreate136137 def getstate self 138 d self dict copy 139 if d has key statinfo 14 del d statinfo 141 return d142143 def child self path 144 if platform isWindows and path count 145 Catch paths like C blah that don t have a slash146 raise InsecurePath r contains a colon path 147 norm normpath path 148 if slash in norm 149 raise InsecurePath r contains one or more directory separators path 15 newpath abspath joinpath self path norm 151 if not newpath startswith self path 152 raise InsecurePath r is not a child of s newpath self path 153 return self clonePath newpath 154155 def preauthChild self path 156 157 Use me if path might have slashes in it but you know they re safe 158159 NOT slashes at the beginning It still needs to be a child 16 161 newpath abspath joinpath self path normpath path 162 if not newpath startswith self path 163 raise InsecurePath s is not a child of s newpath self path 164 return self clonePath newpath 165166 def childSearchPreauth self paths 167 Return my first existing child with a name in paths 168169 paths is expected to be a list of pre secured path fragments in most17 cases this will be specified by a system administrator and not an171 arbitrary user 172173 If no appropriately named children exist this will return None 174 175 p self path176 for child in paths 177 jp joinpath p child 178 if exists jp 179 return self clonePath jp 18 181 def siblingExtensionSearch self exts 182 Attempt to return a path with my name given multiple possible183 extensions 184185 Each extension in exts will be tested and the first path which exists186 will be returned If no path exists None will be returned If is187 in exts then if the file referred to by this path exists self will188 be returned 18919 The extension has a magic meaning which means any path that191 begins with self path is acceptable 192 193 p self path194 for ext in exts 195 if not ext and self exists 196 return self197 if ext 198 basedot basename p 199 for fn in listdir dirname p 2 if fn startswith basedot 2 1 return self clonePath joinpath dirname p fn 2 2 p2 p ext2 3 if exists p2 2 4 return self clonePath p2 2 52 6 def siblingExtension self ext 2 7 return self clonePath self path ext 2 82 9 def open self mode r 21 if self alwaysCreate 211 assert a not in mode Appending not supported when alwaysCreate True 212 return self create 213 return open self path mode b 214215 stat methods below216217 def restat self reraise True 218 try 219 self statinfo stat self path 22 except OSError 221 self statinfo 222 if reraise 223 raise224225 def getsize self 226 st self statinfo227 if not st 228 self restat 229 st self statinfo23 return st ST SIZE 231232 def getmtime self 233 st self statinfo234 if not st 235 self restat 236 st self statinfo237 return st ST MTIME 238239 def getctime self 24 st self statinfo241 if not st 242 self restat 243 st self statinfo244 return st ST CTIME 245246 def getatime self 247 st self statinfo248 if not st 249 self restat 25 st self statinfo251 return st ST ATIME 252253 def exists self 254 if self statinfo 255 return True256 elif self statinfo is None 257 self restat False 258 return self exists 259 else 26 return False261262 def isdir self 263 st self statinfo264 if not st 265 self restat False 266 st self statinfo267 if not st 268 return False269 return S ISDIR st ST MODE 27 271 def isfile self 272 st self statinfo273 if not st 274 self restat False 275 st self statinfo276 if not st 277 return False278 return S ISREG st ST MODE 27928 def islink self 281 We can t use cached stat results here because that is the stat of282 the destination see 1773 which in every case but this one is283 the right thing to use We could call lstat here and use that but284 it seems unlikely we d actually save any work that way glyph285 return islink self path 286287 def isabs self 288 return isabs self path 28929 def listdir self 291 return listdir self path 292293 def splitext self 294 return splitext self path 295296 def repr self 297 return FilePath r self path 298299 def touch self 3 try 3 1 self open a close 3 2 except IOError 3 3 pass3 4 utime self path None 3 53 6 def remove self 3 7 if self isdir 3 8 for child in self children 3 9 child remove 31 os rmdir self path 311 else 312 os remove self path 313 self restat False 314315 def makedirs self 316 return os makedirs self path 317318 def globChildren self pattern 319 32 Assuming I am representing a directory return a list of321 FilePaths representing my children that match the given322 pattern 323 324 import glob325 path self path 1 and self path pattern or slash join self path pattern 326 return map self clonePath glob glob path 327328 def basename self 329 return basename self path 33 331 def dirname self 332 return dirname self path 333334 def parent self 335 return self clonePath self dirname 336337 def setContent self content ext new 338 sib self siblingExtension ext 339 sib open w write content 34 if platform isWindows and exists self path 341 os unlink self path 342 os rename sib path self path 343344 new in 2 2 345346 def cmp self other 347 if not isinstance other FilePath 348 return NotImplemented349 return cmp self path other path 35 351 def createDirectory self 352 os mkdir self path 353354 def requireCreate self val 1 355 self alwaysCreate val356357 def create self 358 Exclusively create a file only if this file previously did not exist 359 36 fdint os open self path os O EXCL 361 os O CREAT 362 os O RDWR 363364 XXX TODO name attribute of returned files is not mutable or365 settable via fdopen so this file is slighly less functional than the366 one returned from open by default send a patch to Python 367368 return os fdopen fdint w b 36937 def temporarySibling self 371 372 Create a path naming a temporary sibling of this path in a secure fashion 373 374 sib self sibling secureEnoughString self basename 375 sib requireCreate 376 return sib377378 chunkSize 2 2 2 237938 def copyTo self destination 381 XXX TODO thorough audit and documentation of the exact desired382 semantics of this code Right now the behavior of existent383 destination symlinks is convenient and quite possibly correct but384 its security properties need to be explained 385 if self isdir 386 if not destination exists 387 destination createDirectory 388 for child in self children 389 destChild destination child child basename 39 child copyTo destChild 391 elif self isfile 392 writefile destination open w 393 readfile self open 394 while 1 395 XXX TODO optionally use os open os read and O DIRECT and396 use os fstatvfs to determine chunk sizes and make397 sure copy is page atomic the following is good398 enough for 99 9 of everybody and won t take a week to audit399 though 4 chunk readfile read self chunkSize 4 1 writefile write chunk 4 2 if len chunk self chunkSize 4 3 break4 4 writefile close 4 5 readfile close 4 6 else 4 7 If you see the following message because you want to copy4 8 symlinks fifos block devices character devices or unix4 9 sockets please feel free to add support to do sensible things in41 reaction to those types 411 raise NotImplementedError 412 Only copying of files and directories supported 413414 def moveTo self destination 415 try 416 os rename self path destination path 417 self restat False 418 except OSError ose 419 if ose errno errno EXDEV 42 man 2 rename ubuntu linux 5 1 breezy 421422 oldpath and newpath are not on the same mounted filesystem 423 Linux permits a filesystem to be mounted at multiple424 points but rename 2 does not work across different mount425 points even if the same filesystem is mounted on both 426427 that means it s time to copy trees of directories 428 secsib destination temporarySibling 429 self copyTo secsib slow43 secsib moveTo destination visible431432 done creating new stuff let s clean me up 433 mysecsib self temporarySibling 434 self moveTo mysecsib visible435 mysecsib remove slow436 else 437 raise43843944 FilePath clonePath FilePath Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py", "title": "\n      filepath.py in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/twisted/python\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      filepath.py in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\" type=\"application/x-python; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/twisted/python/filepath.py?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted?order=name\" title=\"View twisted\">twisted</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python?order=name\" title=\"View python\">python</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py?order=name\" title=\"View filepath.py\">filepath.py</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/twisted/python/filepath.py\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"14198 bytes\">13.9 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td><span class=\"c\"># -*- test-case-name: twisted.test.test_paths -*-</span></td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td><span class=\"c\"># Copyright (c) 2001-2004 Twisted Matrix Laboratories.</span></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td><span class=\"c\"># See LICENSE for details.</span></td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python.runtime</span>\u00a0<span class=\"kn\">import</span>\u00a0platform</td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">os</span></td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">errno</span></td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">random</span></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">sha</span></td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td></td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">os.path</span>\u00a0<span class=\"kn\">import</span>\u00a0isabs<span class=\"p\">,</span>\u00a0exists<span class=\"p\">,</span>\u00a0normpath<span class=\"p\">,</span>\u00a0abspath<span class=\"p\">,</span>\u00a0splitext</td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">os.path</span>\u00a0<span class=\"kn\">import</span>\u00a0basename<span class=\"p\">,</span>\u00a0dirname</td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">os.path</span>\u00a0<span class=\"kn\">import</span>\u00a0join <span class=\"k\">as</span>\u00a0joinpath</td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">os</span>\u00a0<span class=\"kn\">import</span>\u00a0sep <span class=\"k\">as</span>\u00a0slash</td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">os</span>\u00a0<span class=\"kn\">import</span>\u00a0listdir<span class=\"p\">,</span>\u00a0utime<span class=\"p\">,</span>\u00a0stat</td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">stat</span>\u00a0<span class=\"kn\">import</span>\u00a0ST_MODE<span class=\"p\">,</span>\u00a0ST_MTIME<span class=\"p\">,</span>\u00a0ST_ATIME<span class=\"p\">,</span>\u00a0ST_CTIME<span class=\"p\">,</span>\u00a0ST_SIZE</td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">stat</span>\u00a0<span class=\"kn\">import</span>\u00a0S_ISREG<span class=\"p\">,</span>\u00a0S_ISDIR</td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td></td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td><span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td>\u00a0 \u00a0 <span class=\"kn\">from</span>\u00a0<span class=\"nn\">os.path</span>\u00a0<span class=\"kn\">import</span>\u00a0islink</td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td><span class=\"k\">except</span>\u00a0<span class=\"ne\">ImportError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">islink</span><span class=\"p\">(</span>path<span class=\"p\">):</span></td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td></td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td><span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td>\u00a0 \u00a0 <span class=\"kn\">from</span>\u00a0<span class=\"nn\">os</span>\u00a0<span class=\"kn\">import</span>\u00a0urandom <span class=\"k\">as</span>\u00a0randomBytes</td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td><span class=\"k\">except</span>\u00a0<span class=\"ne\">ImportError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">randomBytes</span><span class=\"p\">(</span>n<span class=\"p\">):</span></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 randomData <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span>random<span class=\"o\">.</span>randrange<span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">)</span>\u00a0<span class=\"k\">for</span>\u00a0n <span class=\"ow\">in</span>\u00a0<span class=\"nb\">xrange</span><span class=\"p\">(</span>n<span class=\"p\">)]</span></td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">''</span><span class=\"o\">.</span>join<span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">chr</span><span class=\"p\">,</span>\u00a0randomData<span class=\"p\">))</span></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td></td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td><span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td>\u00a0 \u00a0 <span class=\"kn\">from</span>\u00a0<span class=\"nn\">base64</span>\u00a0<span class=\"kn\">import</span>\u00a0urlsafe_b64encode <span class=\"k\">as</span>\u00a0armor</td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td><span class=\"k\">except</span>\u00a0<span class=\"ne\">ImportError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">armor</span><span class=\"p\">(</span>s<span class=\"p\">):</span></td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0s<span class=\"o\">.</span>encode<span class=\"p\">(</span><span class=\"s\">'hex'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">InsecurePath</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_secureEnoughString</span><span class=\"p\">():</span></td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td><span class=\"sd\">\u00a0 \u00a0 Create a pseudorandom, 16-character string for use in secure filenames.</span></td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0armor<span class=\"p\">(</span>sha<span class=\"o\">.</span>new<span class=\"p\">(</span>randomBytes<span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">))</span><span class=\"o\">.</span>digest<span class=\"p\">())[:</span><span class=\"mi\">16</span><span class=\"p\">]</span></td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td></td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_PathHelper</span><span class=\"p\">:</span></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td><span class=\"sd\">\u00a0 \u00a0 Abstract helper class also used by ZipPath; implements certain utility methods.</span></td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td></td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getContent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>open<span class=\"p\">()</span><span class=\"o\">.</span>read<span class=\"p\">()</span></td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">children</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>child<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>listdir<span class=\"p\">())</span></td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">walk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Yield myself, then each of my children, and each of those children's</span></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 children in turn.</span></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a generator yielding FilePath-like objects.</span></td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">yield</span>\u00a0<span class=\"bp\">self</span></td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isdir<span class=\"p\">():</span></td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0c <span class=\"ow\">in</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>children<span class=\"p\">():</span></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0subc <span class=\"ow\">in</span>\u00a0c<span class=\"o\">.</span>walk<span class=\"p\">():</span></td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">yield</span>\u00a0subc</td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td></td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">sibling</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0path<span class=\"p\">):</span></td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>parent<span class=\"p\">()</span><span class=\"o\">.</span>child<span class=\"p\">(</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td></td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">segmentsFrom</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0ancestor<span class=\"p\">):</span></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return a list of segments between a child and its ancestor.</span></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 For example, in the case of a path X representing /a/b/c/d and a path Y</span></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 representing /a/b, C{Y.segmentsFrom(X)} will return C{['c',</span></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 'd']}.</span></td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param ancestor: an instance of the same class as self, ostensibly an</span></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 ancestor of self.</span></td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @raise: ValueError if the 'ancestor' parameter is not actually an</span></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 ancestor, i.e. a path for /x/y/z is passed as an ancestor for /a/b/c/d.</span></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a list of strs</span></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># this might be an unnecessarily inefficient implementation but it will</span></td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># work on win32 and for zipfiles; later I will deterimine if the</span></td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># obvious fast implemenation does the right thing too</span></td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 f <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p <span class=\"o\">=</span>\u00a0f<span class=\"o\">.</span>parent<span class=\"p\">()</span></td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 segments <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">while</span>\u00a0f <span class=\"o\">!=</span>\u00a0ancestor <span class=\"ow\">and</span>\u00a0p <span class=\"o\">!=</span>\u00a0f<span class=\"p\">:</span></td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segments<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">[</span>f<span class=\"o\">.</span>basename<span class=\"p\">()]</span></td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f <span class=\"o\">=</span>\u00a0p</td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p <span class=\"o\">=</span>\u00a0p<span class=\"o\">.</span>parent<span class=\"p\">()</span></td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0f <span class=\"o\">==</span>\u00a0ancestor <span class=\"ow\">and</span>\u00a0segments<span class=\"p\">:</span></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0segments</td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%r</span><span class=\"s\">\u00a0not parent of </span><span class=\"si\">%r</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>ancestor<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">))</span></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">FilePath</span><span class=\"p\">(</span>_PathHelper<span class=\"p\">):</span></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"I am a path on the filesystem that only permits 'downwards' access.</span></td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td><span class=\"sd\">\u00a0 \u00a0 Instantiate me with a pathname (for example,</span></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td><span class=\"sd\">\u00a0 \u00a0 FilePath('/home/myuser/public_html')) and I will attempt to only provide</span></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td><span class=\"sd\">\u00a0 \u00a0 access to files which reside inside that path.\u00a0 I may be a path to a file,</span></td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td><span class=\"sd\">\u00a0 \u00a0 a directory, or a file which does not exist.</span></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td><span class=\"sd\">\u00a0 \u00a0 The correct way to use me is to instantiate me, and then do ALL filesystem</span></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td><span class=\"sd\">\u00a0 \u00a0 access through me.\u00a0 In other words, do not import the 'os' module; if you</span></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td><span class=\"sd\">\u00a0 \u00a0 need to open a file, call my 'open' method.\u00a0 If you need to list a</span></td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td><span class=\"sd\">\u00a0 \u00a0 directory, call my 'path' method.</span></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td><span class=\"sd\">\u00a0 \u00a0 Even if you pass me a relative path, I will convert that to an absolute</span></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td><span class=\"sd\">\u00a0 \u00a0 path internally.</span></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td><span class=\"sd\">\u00a0 \u00a0 @type alwaysCreate: C{bool}</span></td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar alwaysCreate: When opening this file, only succeed if the file does not</span></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td><span class=\"sd\">\u00a0 \u00a0 already exist.</span></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td>\u00a0 \u00a0 <span class=\"c\"># __slots__ = 'path abs'.split()</span></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td></td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td>\u00a0 \u00a0 statinfo <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td>\u00a0 \u00a0 path <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td></td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0path<span class=\"p\">,</span>\u00a0alwaysCreate<span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span></td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>path <span class=\"o\">=</span>\u00a0abspath<span class=\"p\">(</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>alwaysCreate <span class=\"o\">=</span>\u00a0alwaysCreate</td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td></td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>__dict__<span class=\"o\">.</span>copy<span class=\"p\">()</span></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0d<span class=\"o\">.</span>has_key<span class=\"p\">(</span><span class=\"s\">'statinfo'</span><span class=\"p\">):</span></td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">del</span>\u00a0d<span class=\"p\">[</span><span class=\"s\">'statinfo'</span><span class=\"p\">]</span></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td></td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0path<span class=\"p\">):</span></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0platform<span class=\"o\">.</span>isWindows<span class=\"p\">()</span>\u00a0<span class=\"ow\">and</span>\u00a0path<span class=\"o\">.</span>count<span class=\"p\">(</span><span class=\"s\">\":\"</span><span class=\"p\">):</span></td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Catch paths like C:blah that don't have a slash</span></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0InsecurePath<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%r</span><span class=\"s\">\u00a0contains a colon.\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>path<span class=\"p\">,))</span></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 norm <span class=\"o\">=</span>\u00a0normpath<span class=\"p\">(</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0slash <span class=\"ow\">in</span>\u00a0norm<span class=\"p\">:</span></td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0InsecurePath<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%r</span><span class=\"s\">\u00a0contains one or more directory separators\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>path<span class=\"p\">,))</span></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newpath <span class=\"o\">=</span>\u00a0abspath<span class=\"p\">(</span>joinpath<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0norm<span class=\"p\">))</span></td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0newpath<span class=\"o\">.</span>startswith<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">):</span></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0InsecurePath<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%r</span><span class=\"s\">\u00a0is not a child of </span><span class=\"si\">%s</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>newpath<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">))</span></td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span>newpath<span class=\"p\">)</span></td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">preauthChild</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0path<span class=\"p\">):</span></td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Use me if `path' might have slashes in it, but you know they're safe.</span></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 (NOT slashes at the beginning. It still needs to be a _child_).</span></td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newpath <span class=\"o\">=</span>\u00a0abspath<span class=\"p\">(</span>joinpath<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0normpath<span class=\"p\">(</span>path<span class=\"p\">)))</span></td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0newpath<span class=\"o\">.</span>startswith<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">):</span></td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0InsecurePath<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%s</span><span class=\"s\">\u00a0is not a child of </span><span class=\"si\">%s</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>newpath<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">))</span></td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span>newpath<span class=\"p\">)</span></td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td></td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">childSearchPreauth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>paths<span class=\"p\">):</span></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Return my first existing child with a name in 'paths'.</span></td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 paths is expected to be a list of *pre-secured* path fragments; in most</span></td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 cases this will be specified by a system administrator and not an</span></td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 arbitrary user.</span></td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If no appropriately-named children exist, this will return None.</span></td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path</td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0child <span class=\"ow\">in</span>\u00a0paths<span class=\"p\">:</span></td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 jp <span class=\"o\">=</span>\u00a0joinpath<span class=\"p\">(</span>p<span class=\"p\">,</span>\u00a0child<span class=\"p\">)</span></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0exists<span class=\"p\">(</span>jp<span class=\"p\">):</span></td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span>jp<span class=\"p\">)</span></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td></td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">siblingExtensionSearch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>exts<span class=\"p\">):</span></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Attempt to return a path with my name, given multiple possible</span></td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 extensions.</span></td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Each extension in exts will be tested and the first path which exists</span></td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 will be returned.\u00a0 If no path exists, None will be returned.\u00a0 If '' is</span></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 in exts, then if the file referred to by this path exists, 'self' will</span></td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 be returned.</span></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The extension '*' has a magic meaning, which means \"any path that</span></td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 begins with self.path+'.' is acceptable\".</span></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path</td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0ext <span class=\"ow\">in</span>\u00a0exts<span class=\"p\">:</span></td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0ext <span class=\"ow\">and</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>exists<span class=\"p\">():</span></td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span></td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0ext <span class=\"o\">==</span>\u00a0<span class=\"s\">'*'</span><span class=\"p\">:</span></td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 basedot <span class=\"o\">=</span>\u00a0basename<span class=\"p\">(</span>p<span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s\">'.'</span></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0fn <span class=\"ow\">in</span>\u00a0listdir<span class=\"p\">(</span>dirname<span class=\"p\">(</span>p<span class=\"p\">)):</span></td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0fn<span class=\"o\">.</span>startswith<span class=\"p\">(</span>basedot<span class=\"p\">):</span></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span>joinpath<span class=\"p\">(</span>dirname<span class=\"p\">(</span>p<span class=\"p\">),</span>\u00a0fn<span class=\"p\">))</span></td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 p2 <span class=\"o\">=</span>\u00a0p <span class=\"o\">+</span>\u00a0ext</td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0exists<span class=\"p\">(</span>p2<span class=\"p\">):</span></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span>p2<span class=\"p\">)</span></td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td></td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">siblingExtension</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0ext<span class=\"p\">):</span></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"o\">+</span>ext<span class=\"p\">)</span></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0mode<span class=\"o\">=</span><span class=\"s\">'r'</span><span class=\"p\">):</span></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>alwaysCreate<span class=\"p\">:</span></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"s\">'a'</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"ow\">in</span>\u00a0mode<span class=\"p\">,</span>\u00a0<span class=\"s\">\"Appending not supported when alwaysCreate == True\"</span></td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>create<span class=\"p\">()</span></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0mode<span class=\"o\">+</span><span class=\"s\">'b'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td></td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td>\u00a0 \u00a0 <span class=\"c\"># stat methods below</span></td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td></td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">restat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0reraise<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span></td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>statinfo <span class=\"o\">=</span>\u00a0stat<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0<span class=\"ne\">OSError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>statinfo <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0reraise<span class=\"p\">:</span></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span></td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td></td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getsize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">()</span></td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0st<span class=\"p\">[</span>ST_SIZE<span class=\"p\">]</span></td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getmtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">()</span></td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0st<span class=\"p\">[</span>ST_MTIME<span class=\"p\">]</span></td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td></td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getctime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">()</span></td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0st<span class=\"p\">[</span>ST_CTIME<span class=\"p\">]</span></td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td></td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getatime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">()</span></td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0st<span class=\"p\">[</span>ST_ATIME<span class=\"p\">]</span></td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo<span class=\"p\">:</span></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>exists<span class=\"p\">()</span></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td></td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">isdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0S_ISDIR<span class=\"p\">(</span>st<span class=\"p\">[</span>ST_MODE<span class=\"p\">])</span></td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td></td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">isfile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>statinfo</td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0st<span class=\"p\">:</span></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0S_ISREG<span class=\"p\">(</span>st<span class=\"p\">[</span>ST_MODE<span class=\"p\">])</span></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">islink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># We can't use cached stat results here, because that is the stat of</span></td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the destination - (see #1773) which in *every case* but this one is</span></td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the right thing to use.\u00a0 We could call lstat here and use that, but</span></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># it seems unlikely we'd actually save any work that way.\u00a0 -glyph</span></td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0islink<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">isabs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0isabs<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td></td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0listdir<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0splitext<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'FilePath(</span><span class=\"si\">%r</span><span class=\"s\">)'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,)</span></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">touch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>open<span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span><span class=\"o\">.</span>close<span class=\"p\">()</span></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0<span class=\"ne\">IOError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 utime<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isdir<span class=\"p\">():</span></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0child <span class=\"ow\">in</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>children<span class=\"p\">():</span></td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 child<span class=\"o\">.</span>remove<span class=\"p\">()</span></td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>rmdir<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>remove<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span></td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0os<span class=\"o\">.</span>makedirs<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">globChildren</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0pattern<span class=\"p\">):</span></td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Assuming I am representing a directory, return a list of</span></td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 FilePaths representing my children that match the given</span></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 pattern.</span></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"kn\">import</span>\u00a0<span class=\"nn\">glob</span></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 path <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"o\">==</span>\u00a0<span class=\"s\">'/'</span>\u00a0<span class=\"ow\">and</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path <span class=\"o\">+</span>\u00a0pattern <span class=\"ow\">or</span>\u00a0slash<span class=\"o\">.</span>join<span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0pattern<span class=\"p\">])</span></td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">,</span>\u00a0glob<span class=\"o\">.</span>glob<span class=\"p\">(</span>path<span class=\"p\">))</span></td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td></td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">basename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0basename<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td></td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0dirname<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>clonePath<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>dirname<span class=\"p\">())</span></td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td></td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">setContent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0content<span class=\"p\">,</span>\u00a0ext<span class=\"o\">=</span><span class=\"s\">'.new'</span><span class=\"p\">):</span></td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 sib <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>siblingExtension<span class=\"p\">(</span>ext<span class=\"p\">)</span></td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 sib<span class=\"o\">.</span>open<span class=\"p\">(</span><span class=\"s\">'w'</span><span class=\"p\">)</span><span class=\"o\">.</span>write<span class=\"p\">(</span>content<span class=\"p\">)</span></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0platform<span class=\"o\">.</span>isWindows<span class=\"p\">()</span>\u00a0<span class=\"ow\">and</span>\u00a0exists<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">):</span></td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>unlink<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>rename<span class=\"p\">(</span>sib<span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td></td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td>\u00a0 \u00a0 <span class=\"c\"># new in 2.2.0</span></td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td></td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__cmp__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0other<span class=\"p\">):</span></td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>other<span class=\"p\">,</span>\u00a0FilePath<span class=\"p\">):</span></td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">NotImplemented</span></td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">cmp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0other<span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td></td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">createDirectory</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>mkdir<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td></td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">requireCreate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0val<span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span></td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>alwaysCreate <span class=\"o\">=</span>\u00a0val</td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td></td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Exclusively create a file, only if this file previously did not exist.</span></td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 fdint <span class=\"o\">=</span>\u00a0os<span class=\"o\">.</span>open<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0<span class=\"p\">(</span>os<span class=\"o\">.</span>O_EXCL <span class=\"o\">|</span></td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>O_CREAT <span class=\"o\">|</span></td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>O_RDWR<span class=\"p\">))</span></td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td></td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX TODO: 'name' attribute of returned files is not mutable or</span></td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># settable via fdopen, so this file is slighly less functional than the</span></td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># one returned from 'open' by default.\u00a0 send a patch to Python...</span></td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td></td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0os<span class=\"o\">.</span>fdopen<span class=\"p\">(</span>fdint<span class=\"p\">,</span>\u00a0<span class=\"s\">'w+b'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td></td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">temporarySibling</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create a path naming a temporary sibling of this path in a secure fashion.</span></td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 sib <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>sibling<span class=\"p\">(</span>_secureEnoughString<span class=\"p\">()</span>\u00a0<span class=\"o\">+</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>basename<span class=\"p\">())</span></td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 sib<span class=\"o\">.</span>requireCreate<span class=\"p\">()</span></td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0sib</td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td></td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td>\u00a0 \u00a0 _chunkSize <span class=\"o\">=</span>\u00a0<span class=\"mi\">2</span>\u00a0<span class=\"o\">**</span>\u00a0<span class=\"mi\">2</span>\u00a0<span class=\"o\">**</span>\u00a0<span class=\"mi\">2</span>\u00a0<span class=\"o\">**</span>\u00a0<span class=\"mi\">2</span></td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td></td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">copyTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0destination<span class=\"p\">):</span></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX TODO: *thorough* audit and documentation of the exact desired</span></td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># semantics of this code.\u00a0 Right now the behavior of existent</span></td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># destination symlinks is convenient, and quite possibly correct, but</span></td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># its security properties need to be explained.</span></td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isdir<span class=\"p\">():</span></td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0destination<span class=\"o\">.</span>exists<span class=\"p\">():</span></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 destination<span class=\"o\">.</span>createDirectory<span class=\"p\">()</span></td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0child <span class=\"ow\">in</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>children<span class=\"p\">():</span></td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 destChild <span class=\"o\">=</span>\u00a0destination<span class=\"o\">.</span>child<span class=\"p\">(</span>child<span class=\"o\">.</span>basename<span class=\"p\">())</span></td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 child<span class=\"o\">.</span>copyTo<span class=\"p\">(</span>destChild<span class=\"p\">)</span></td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isfile<span class=\"p\">():</span></td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 writefile <span class=\"o\">=</span>\u00a0destination<span class=\"o\">.</span>open<span class=\"p\">(</span><span class=\"s\">'w'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 readfile <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>open<span class=\"p\">()</span></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">while</span>\u00a0<span class=\"mi\">1</span><span class=\"p\">:</span></td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX TODO: optionally use os.open, os.read and O_DIRECT and</span></td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># use os.fstatvfs to determine chunk sizes and make</span></td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># *****sure**** copy is page-atomic; the following is good</span></td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># enough for 99.9% of everybody and won't take a week to audit</span></td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># though.</span></td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 chunk <span class=\"o\">=</span>\u00a0readfile<span class=\"o\">.</span>read<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_chunkSize<span class=\"p\">)</span></td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 writefile<span class=\"o\">.</span>write<span class=\"p\">(</span>chunk<span class=\"p\">)</span></td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>chunk<span class=\"p\">)</span>\u00a0<span class=\"o\">&lt;</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_chunkSize<span class=\"p\">:</span></td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">break</span></td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 writefile<span class=\"o\">.</span>close<span class=\"p\">()</span></td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 readfile<span class=\"o\">.</span>close<span class=\"p\">()</span></td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># If you see the following message because you want to copy</span></td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># symlinks, fifos, block devices, character devices, or unix</span></td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># sockets, please feel free to add support to do sensible things in</span></td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># reaction to those types!</span></td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span></td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Only copying of files and directories supported\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td></td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">moveTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0destination<span class=\"p\">):</span></td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os<span class=\"o\">.</span>rename<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>path<span class=\"p\">,</span>\u00a0destination<span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>restat<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span></td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0<span class=\"ne\">OSError</span><span class=\"p\">,</span>\u00a0ose<span class=\"p\">:</span></td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0ose<span class=\"o\">.</span>errno <span class=\"o\">==</span>\u00a0errno<span class=\"o\">.</span>EXDEV<span class=\"p\">:</span></td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># man 2 rename, ubuntu linux 5.10 \"breezy\":</span></td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td></td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\">#\u00a0 \u00a0oldpath and newpath are not on the same mounted filesystem.</span></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\">#\u00a0 \u00a0(Linux permits a filesystem to be mounted at multiple</span></td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\">#\u00a0 \u00a0points, but rename(2) does not work across different mount</span></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\">#\u00a0 \u00a0points, even if the same filesystem is mounted on both.)</span></td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td></td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># that means it's time to copy trees of directories!</span></td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secsib <span class=\"o\">=</span>\u00a0destination<span class=\"o\">.</span>temporarySibling<span class=\"p\">()</span></td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>copyTo<span class=\"p\">(</span>secsib<span class=\"p\">)</span>\u00a0<span class=\"c\"># slow</span></td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secsib<span class=\"o\">.</span>moveTo<span class=\"p\">(</span>destination<span class=\"p\">)</span>\u00a0<span class=\"c\"># visible</span></td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># done creating new stuff.\u00a0 let's clean me up.</span></td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mysecsib <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>temporarySibling<span class=\"p\">()</span></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>moveTo<span class=\"p\">(</span>mysecsib<span class=\"p\">)</span>\u00a0<span class=\"c\"># visible</span></td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mysecsib<span class=\"o\">.</span>remove<span class=\"p\">()</span>\u00a0<span class=\"c\"># slow</span></td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span></td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td></td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td></td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td>FilePath<span class=\"o\">.</span>clonePath <span class=\"o\">=</span>\u00a0FilePath</td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/python/filepath.py\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44322.0}