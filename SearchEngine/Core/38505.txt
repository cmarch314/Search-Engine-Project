{"text": "OEChem C Theory Manual Version 1 3 1 Previous 32 1 Compiling a text Up 32 OpenEye Command Line Next 32 3 Parsing the Command 32 2 Configuring OEInterface Configuring an OEInterface is the process of telling the name type and other details of all the command line parameters the program is going to use It does not include the process of parsing the command line to set the parameter values however When initially constructed the OEInterface object does not know about any command line parameters This is demonstrated using the following program Chapter 32 Example 2 cpp file include oeplatform h include oesystem h using namespace OEPlatform using namespace OESystem int main int char OEInterface itf OEWriteSettings itf oeout true return Download as text The function OEWriteSettings lists the current settings of all the parameters the OEInterface class knows about Since it was just constructed the OEInterface class doesn t know about any parameters and when the output of the program when run looks like this Chapter 32 Example 2 output ch32 2 Interface settings indicating the OEInterface doesn t know anything about any parameters yet The OEInterface class can be configured either by explicitly calling the various member functions of the class detailed in the API documentation or by using the OEConfigure free function Taking our previous example we can add an OEConfigure call as follows Chapter 32 Example 3 cpp file include oeplatform h include oesystem h Defines static const unsigned char array InterfaceData include ch32 3 itf using namespace OEPlatform using namespace OESystem int main int char OEInterface itf OEConfigure itf InterfaceData OEWriteSettings itf oeout true return Download as text The OEConfigure function is passed the itf object and a pointer to a text file compiled into the program at compile time using the method described in the first section of this chapter For this example the text file is Chapter 32 Example 3 txt file PARAMETER x TYPE float END PARAMETER y TYPE float END PARAMETER op TYPE string END Download as text and given the output of the program is Chapter 32 Example 3 output ch32 3 Interface settings op Not set no default x Not set no default y Not set no default The example program now lists the three parameters that were configured by the OEConfigure function using the txt file listed above Rules for the format of this file are listed in the API documentation of OEConfigure Note that because all we have done is configure the OEInterface these parameters have no value set even though the parameters are now known to the OEInterface class OEChem C Theory Manual Version 1 3 1 Previous 32 1 Compiling a text Up 32 OpenEye Command Line Next 32 3 Parsing the Command Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node254.html", "title": "32.2 configuring oeinterface", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>32.2 Configuring OEInterface</title>\n<META NAME=\"description\" CONTENT=\"32.2 Configuring OEInterface\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node255.html\">\n<LINK REL=\"previous\" HREF=\"node253.html\">\n<LINK REL=\"up\" HREF=\"node252.html\">\n<LINK REL=\"next\" HREF=\"node255.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node253.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node255.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node253.html\">32.1 Compiling a text</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node255.html\">32.3 Parsing the Command</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0035200000000000000000\">\n32.2 Configuring OEInterface</A>\n</H1>\n\n<P>\nConfiguring an OEInterface is the process of telling the name, type\nand other details of all the command line parameters the program is\ngoing to use.  It does not include the process of parsing the command\nline to set the parameter values however.\n\n<P>\nWhen initially constructed the OEInterface object does not know about\nany command line parameters.  This is demonstrated using the following\nprogram.\n\n<P>\n<i>Chapter 32 - Example 2: cpp file</i>\n<dl><dd><pre class=\"verbatim\">#include \"oeplatform.h\"\n#include \"oesystem.h\"\n\nusing namespace OEPlatform;\nusing namespace OESystem;\n\nint main(int, char**)\n{\n  OEInterface itf;\n  OEWriteSettings(itf,oeout,true);\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe function OEWriteSettings lists the current settings of all the\nparameters the OEInterface class knows about.  Since it was just\nconstructed the OEInterface class doesn't know about any parameters\nand when the output of the program when run looks like this\n\n<P>\n<i>Chapter 32 - Example 2: output</i>\n<dl><dd><pre class=\"verbatim\">&gt; ch32-2\n#Interface settings\n&gt;\n</pre></dl>\n\n<P>\nindicating the OEInterface doesn't know anything about any parameters yet.\n\n<P>\nThe OEInterface class can be configured either by explicitly calling the\nvarious member functions of the class (detailed in the API documentation),\nor by using the OEConfigure free function.  Taking our previous example\nwe can add an OEConfigure call as follows\n\n<P>\n<i>Chapter 32 - Example 3: cpp file</i>\n<dl><dd><pre class=\"verbatim\">#include \"oeplatform.h\"\n#include \"oesystem.h\"\n\n//Defines static const unsigned char* array InterfaceData\n#include \"ch32-3.itf\"\n\nusing namespace OEPlatform;\nusing namespace OESystem;\n\nint main(int , char** )\n{\n  OEInterface itf;\n  OEConfigure(itf,InterfaceData);\n  OEWriteSettings(itf,oeout,true);\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe OEConfigure function is passed the itf object, and a pointer to a text\nfile compiled into the program at compile time using the method described\nin the first section of this chapter.  For this example the text file is\n\n<P>\n<i>Chapter 32 - Example 3: txt file</i>\n<dl><dd><pre class=\"verbatim\">!PARAMETER -x\n  !TYPE float\n!END\n\n!PARAMETER -y\n  !TYPE float\n!END\n\n!PARAMETER -op\n  !TYPE string\n!END\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nand given the output of the program is\n\n<P>\n<i>Chapter 32 - Example 3: output</i>\n<dl><dd><pre class=\"verbatim\">&gt; ch32-3\n#Interface settings\n#-op (Not set, no default)\n#-x (Not set, no default)\n#-y (Not set, no default)\n&gt;\n</pre></dl>\n\n<P>\nThe example program now lists the three parameters that were configured by\nthe OEConfigure function, using the txt file listed above.  (Rules for the\nformat of this file are listed in the API documentation of OEConfigure).\nNote that because all we have done is configure the OEInterface these\nparameters have no value set, even though the parameters are now known to\nthe OEInterface class.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node253.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node255.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node253.html\">32.1 Compiling a text</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node255.html\">32.3 Parsing the Command</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38505.0}