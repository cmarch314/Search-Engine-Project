{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src twisted protocols amp py View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 59 6 KB Line 1 test case name twisted test test amp 2 Copyright 2 5 Divmod Inc See LICENSE file for details34 5This module implements AMP the Asynchronous Messaging Protocol 67AMP is a protocol for sending multiple asynchronous request response pairs over8the same connection Requests and responses are both collections of key value9pairs 1 11AMP is a very simple protocol which is not an application This module is a12 protocol construction kit of sorts it attempts to be the simplest wire level13implementation of Deferreds AMP provides the following base level features 1415 Asynchronous request response handling hence the name 1617 Requests and responses are both key value pairs1819 Binary transfer of all data all data is length prefixed Your2 application will never need to worry about quoting 2122 Command dispatching like HTTP Verbs the protocol is extensible and23 multiple AMP sub protocols can be grouped together easily 2425The protocol implementation also provides a few additional features which are26not part of the core wire protocol but are nevertheless very useful 2728 Tight TLS integration with an included StartTLS command 293 Handshaking to other protocols because AMP has well defined message31 boundaries and maintains all incoming and outgoing requests for you you32 can start a connection over AMP and then switch to another protocol 33 This makes it ideal for firewall traversal applications where you may34 have only one forwarded port but multiple applications that want to use35 it 3637Using AMP with Twisted is simple Each message is a command with a response 38You begin by defining a command type Commands specify their input and output39in terms of the types that they expect to see in the request and response4 key value pairs Here s an example of a command that adds two integers a 41and b 4243 class Sum amp Command 44 arguments a amp Integer 45 b amp Integer 46 response total amp Integer 4748Once you have specified a command you need to make it part of a protocol and49define a responder for it Here s a JustSum protocol that includes a5 responder for our Sum command 5152 class JustSum amp AMP 53 def sum self a b 54 total a b55 print Did a sum d d d a b total 56 return total total 57 Sum responder sum 5859Later when you want to actually do a sum the following expression will return6 a Deferred whilch will fire with the result 6162 ClientCreator reactor amp AMP connectTCP addCallback 63 lambda p p callRemote Sum a 13 b 81 addCallback 64 lambda result result total 6566You can also define the propogation of specific errors in AMP For example 67for the slightly more complicated case of division we might have to deal with68division by zero 697 class Divide amp Command 71 arguments numerator amp Integer 72 denominator amp Integer 73 response result amp Float 74 errors ZeroDivisionError ZERO DIVISION 7576The errors mapping here tells AMP that if a responder to Divide emits a77L ZeroDivisionError then the other side should be informed that an error of78the type ZERO DIVISION has occurred Writing a responder which takes79advantage of this is very simple just raise your exception normally 8 81 class JustDivide amp AMP 82 def divide self numerator denominator 83 result numerator denominator84 print Divided d d d numerator denominator total 85 return result result 86 Divide responder divide 8788On the client side the errors mapping will be used to determine what the89 ZERO DIVISION error means and translated into an asynchronous exception 9 which can be handled normally as any L Deferred would be 9192 def trapZero result 93 result trap ZeroDivisionError 94 print Divided by zero returning INF 95 return 1e1 96 ClientCreator reactor amp AMP connectTCP addCallback 97 lambda p p callRemote Divide numerator 1234 98 denominator 99 addErrback trapZero 1 1 1For a complete runnable example of both of these commands see the files in1 2the Twisted repository 1 31 4 doc core examples ampserver py1 5 doc core examples ampclient py1 61 7On the wire AMP is a protocol which uses 2 byte lengths to prefix keys and1 8values and empty keys to separate messages 1 911 2 byte length key 2 byte length value 111 2 byte length key 2 byte length value 112 113 2 byte length key 2 byte length value 114 NUL NUL Empty Key End of Message115116And so on Because it s tedious to refer to lengths and NULs constantly the117documentation will refer to packets as if they were newline delimited like118so 11912 C command sum121 C ask ef639e5c892ccb54122 C a 13123 C b 81124125 S answer ef639e5c892ccb54126 S total 94127128Notes 12913 Values are limited to the maximum encodable size in a 16 bit length 65535131bytes 132133Keys are limited to the maximum encodable size in a 8 bit length 255 bytes 134Note that we still use 2 byte lengths to encode keys This small redundancy135has several features 136137 If an implementation becomes confused and starts emitting corrupt data 138 or gets keys confused with values many common errors will be139 signalled immediately instead of delivering obviously corrupt packets 14 141 A single NUL will separate every key and a double NUL separates142 messages This provides some redundancy when debugging traffic dumps 143144 NULs will be present at regular intervals along the protocol providing145 some padding for otherwise braindead C implementations of the protocol 146 so that stdio h string functions will see the NUL and stop 147148 This makes it possible to run an AMP server on a port also used by a149 plain text protocol and easily distinguish between non AMP clients like15 web browsers which issue non NUL as the first byte and AMP clients 151 which always issue NUL as the first byte 152153 154155 metaclass type156157import types158159from cStringIO import StringIO16 from struct import pack161162from twisted python reflect import accumulateClassDict163from twisted python failure import Failure164from twisted python import log filepath165166from twisted internet main import CONNECTION LOST167from twisted internet error import PeerVerifyError168from twisted internet defer import Deferred maybeDeferred fail169from twisted protocols basic import Int16StringReceiver StatefulStringProtocol17 171from twisted internet sslverify import problemsFromTransport172173 I d like this to use the exposed public API but for some reason when it was174 moved these names were not exposed by internet ssl 175176from twisted internet ssl import CertificateOptions Certificate DN KeyPair177178ASK ask 179ANSWER answer 18 COMMAND command 181ERROR error 182ERROR CODE error code 183ERROR DESCRIPTION error description 184UNKNOWN ERROR CODE UNKNOWN 185UNHANDLED ERROR CODE UNHANDLED 186187MAX KEY LENGTH xff188MAX VALUE LENGTH xffff18919 191192class AmpError Exception 193 194 Base class of all Amp related exceptions 195 196197198199class ProtocolSwitched Exception 2 2 1 Connections which have been switched to other protocols can no longer2 2 accept traffic at the AMP level This is raised when you try to send it 2 3 2 42 52 62 7class OnlyOneTLS AmpError 2 8 2 9 This is an implementation limitation TLS may only be started once per21 connection 211 212213214215class NoEmptyBoxes AmpError 216 217 You can t have empty boxes on the connection This is raised when you218 receive or attempt to send one 219 22 221222223class InvalidSignature AmpError 224 225 You didn t pass all the required arguments 226 22722822923 class TooLong AmpError 231 232 One of the protocol s length limitations was violated 233234 ivar isKey true if the string being encoded in a key position false if235 it was in a value position 236237 ivar isLocal Was the string encoded locally or received too long from238 the network It s only physically possible to encode too long values on239 the network for keys 24 241 ivar value The string that was too long 242243 ivar keyName If the string being encoded was in a value position what244 key was it being encoded for 245 246247 def init self isKey isLocal value keyName None 248 AmpError init self 249 self isKey isKey25 self isLocal isLocal251 self value value252 self keyName keyName253254255 def repr self 256 hdr self isKey and key or value 257 if not self isKey 258 hdr repr self keyName 259 lcl self isLocal and local or remote 26 return s s too long d lcl hdr len self value 261262263264class BadLocalReturn AmpError 265 266 A bad value was returned from a local command we were unable to coerce it 267 268 def init self message enclosed 269 AmpError init self 27 self message message271 self enclosed enclosed272273274 def repr self 275 return self message self enclosed getBriefTraceback 276277 str repr 27827928 281class RemoteAmpError AmpError 282 283 This error indicates that something went wrong on the remote end of the284 connection and the error was serialized and transmitted to you 285 286 def init self errorCode description fatal False local None 287 Create a remote error with an error code and description 288289 param errorCode the AMP error code of this error 29 291 param description some text to show to the user 292293 param fatal a boolean true if this error should terminate the294 connection 295296 param local a local Failure if one exists 297 298 if local 299 localwhat local 3 othertb local getBriefTraceback 3 1 else 3 2 localwhat 3 3 othertb 3 4 Exception init self Code s s s s 3 5 errorCode localwhat 3 6 description othertb 3 7 self local local3 8 self errorCode errorCode3 9 self description description31 self fatal fatal311312313314class UnknownRemoteError RemoteAmpError 315 316 This means that an error whose type we can t identify was raised from the317 other side 318 319 def init self description 32 errorCode UNKNOWN ERROR CODE321 RemoteAmpError init self errorCode description 322323324325class MalformedAmpBox AmpError 326 327 This error indicates that the wire level protocol was malformed 328 32933 331332class UnhandledCommand AmpError 333 334 A command received via amp could not be dispatched 335 336337338339class IncompatibleVersions AmpError 34 341 It was impossible to negotiate a compatible version of the protocol with342 the other end of the connection 343 344345346PROTOCOL ERRORS UNHANDLED ERROR CODE UnhandledCommand 347348class AmpBox dict 349 35 I am a packet in the AMP protocol much like a regular str str dictionary 351 352 slots be like a regular dictionary don t magically353 acquire a dict 354355356 def copy self 357 358 Return another AmpBox just like me 359 36 newBox self class 361 newBox update self 362 return newBox363364365 def serialize self 366 367 Convert me into a wire encoded string 368369 return a str encoded according to the rules described in the module37 docstring 371 372 i self items 373 i sort 374 L 375 w L append376 for k v in i 377 if len k MAX KEY LENGTH 378 raise TooLong True True k None 379 if len v MAX VALUE LENGTH 38 raise TooLong False True v k 381 for kv in k v 382 w pack H len kv 383 w kv 384 w pack H 385 return join L 386387388 def sendTo self proto 389 39 Serialize and send this box to a Amp instance By the time it is being391 sent several keys are required I must have exactly ONE of 392393 ask394 answer395 error396397 If the ask key is set then the command key must also be398 set 3994 param proto an AMP instance 4 1 4 2 proto sendBox self 4 34 4 def repr self 4 5 return AmpBox s dict repr self 4 64 7 amp Box AmpBox4 84 9Box AmpBox41 411class QuitBox AmpBox 412 413 I am an AmpBox that upon being sent terminates the connection 414 415 slots 416417418 def repr self 419 return QuitBox s super QuitBox self repr 42 421422 def sendTo self proto 423 424 Immediately call loseConnection after sending 425 426 super QuitBox self sendTo proto 427 proto transport loseConnection 428429class SwitchBox AmpBox 43 431 Implementation detail of ProtocolSwitchCommand I am a JuiceBox which sets432 up state for the protocol to switch 433 434435 DON T set slots here we do have an attribute 436437 def init self innerProto kw 438 439 Create a SwitchBox with the protocol to switch to after being sent 44 441 param innerProto the protocol instance to switch to 442 type innerProto an IProtocol provider 443 444 super SwitchBox self init kw 445 self innerProto innerProto446447448 def repr self 449 return SwitchBox r s self innerProto 45 dict repr self 451452453 def sendTo self proto 454 455 Send me I am the last box on the connection All further traffic will be456 over the new protocol 457 458 super SwitchBox self sendTo proto 459 proto switchTo self innerProto 46 461462463class DispatchMixin 464 465 I help AMP dispatch commands based on strings 466 467468 baseDispatchPrefix amp 46947 def wrapWithSerialization self aCallable command 471 472 Wrap aCallable with its command s argument argument de serialization473 and result serialization logic 474475 param aCallable a callable with a command attribute designed to be476 called with keyword arguments 477478 param command the command class whose serialization to use 47948 return a 1 arg callable which when invoked with an AmpBox will481 deserialize the argument list and invoke appropriate user code for the482 callable s command returning a Deferred which fires with the result or483 fails with an error 484 485 def doit box 486 kw stringsToObjects box command arguments self 487 def checkKnownErrors error 488 key error trap command allErrors 489 code command allErrors key 49 desc str error value 491 return Failure RemoteAmpError 492 code desc key in command fatalErrors local error 493 def makeResponseFor objects 494 try 495 return command makeResponse objects self 496 except 497 let s helpfully log this 498 originalFailure Failure 499 raise BadLocalReturn 5 r returned r and r could not serialize it 5 1 aCallable 5 2 objects 5 3 command 5 4 originalFailure 5 5 return maybeDeferred aCallable kw addCallback 5 6 makeResponseFor addErrback 5 7 checkKnownErrors 5 8 return doit5 951 511 def lookupFunction self name 512 513 Return a callable to invoke when executing the named command 514515 param name the normalized name from the wire of the command 516517 return a function that takes one argument a Box and returns a box 518 for handling the command identified by the given name 519 52 Try to find a high level method to invoke and if we can t find one 521 fall back to a low level one 522 cd self commandDispatch523 if name in cd 524 commandClass responderFunc cd name 525 responderMethod types MethodType responderFunc self self class 526 return self wrapWithSerialization responderMethod commandClass 527528 Fall back to simplistic command dispatching this uses only strings 529 not encoded decoded values 53 fName self baseDispatchPrefix name upper 531 return getattr self fName None 532533534 def dispatchCommand self box 535 536 A box with a command key was received 537538 Dispatch it to a local handler call it 53954 param proto an AMP instance 541 param box an AmpBox to be dispatched 542 543 cmd box COMMAND 544 fObj self lookupFunction cmd 545 if fObj is None 546 return fail RemoteAmpError 547 UNHANDLED ERROR CODE 548 Unhandled Command r cmd 549 False 55 local Failure UnhandledCommand 551 return maybeDeferred fObj box 552553554555PYTHON KEYWORDS 556 and del for is raise assert elif from lambda 557 return break else global not try class except 558 if or while continue exec import pass yield 559 def finally in print 56 561def wireNameToPythonIdentifier key 562 563 Private Normalize an argument name from the wire for use with Python564 code If the return value is going to be a python keyword it will be565 capitalized If it contains any dashes they will be replaced with566 underscores 567568 The rationale behind this method is that AMP should be an inherently569 multi language protocol so message keys may contain all manner of bizarre57 bytes This is not a complete solution there are still forms of arguments571 that this implementation will be unable to parse However Python572 identifiers share a huge raft of properties with identifiers from many573 other languages so this is a good enough effort for now We deal574 explicitly with dashes because that is the most likely departure Lisps575 commonly use dashes to separate method names so protocols initially576 implemented in a lisp amp dialect may use dashes in argument or command577 names 578579 param key a str looking something like foo bar baz or from 58 581 return a str which is a valid python identifier looking something like582 foo bar baz or From 583 584 lkey key replace 585 if lkey in PYTHON KEYWORDS 586 return lkey title 587 return lkey58858959 591class AmpParserBase DispatchMixin 592 593 Base class for parsing AMP boxes 594 595 def init self 596 597 Create an AmpParserBase initializing request response tracking state 598 599 self outstandingRequests 6 6 16 2 def puke self failure 6 3 6 4 This is a terminal callback called after application code has had a6 5 chance to quash any errors 6 6 6 7 log msg Amp server or network failure 6 8 unhandled by client application 6 9 log err failure 61 log msg 611 Dropping connection 612 To avoid add errbacks to ALL remote commands 613 if self transport is not None 614 self transport loseConnection 615616 counter L617618619 def nextTag self 62 621 Generate protocol local serial numbers for ask keys 622623 return a string that has not yet been used on this connection 624 625 self counter 1626 return x self counter 627628 failAllReason None62963 631 def failAllOutgoing self reason 632 633 Call the errback on all outstanding requests awaiting responses 634635 param reason the Failure instance to pass to those errbacks 636 637 self failAllReason reason638 OR self outstandingRequests items 639 self outstandingRequests None we can never send another request64 for key value in OR 641 value errback reason 642643644 def ampBoxReceived self box 645 646 An AmpBox was received Respond to it according to its contents 647648 param box an AmpBox649 65 if ANSWER in box 651 question self outstandingRequests pop box ANSWER 652 question addErrback self puke 653 question callback box 654 elif ERROR in box 655 question self outstandingRequests pop box ERROR 656 question addErrback self puke 657 protocol recognized errors658 errorCode box ERROR CODE 659 description box ERROR DESCRIPTION 66 if errorCode in PROTOCOL ERRORS 661 exc PROTOCOL ERRORS errorCode errorCode description 662 else 663 exc RemoteAmpError errorCode description 664 question errback Failure exc 665 elif COMMAND in box 666 cmd box COMMAND 667 def sendAnswer answerBox 668 if ASK not in box 669 return67 if self transport is None 671 return672 if self locked 673 return674 answerBox ANSWER box ASK 675 answerBox sendTo self 676 def sendError error 677 if ASK not in box 678 return error679 if error check RemoteAmpError 68 code error value errorCode681 desc error value description682 if error value fatal 683 errorBox QuitBox 684 else 685 errorBox AmpBox 686 else 687 errorBox QuitBox 688 log err error here is where server side logging happens689 if the error isn t handled69 code UNKNOWN ERROR CODE691 desc Unknown Error 692 errorBox ERROR box ASK 693 errorBox ERROR DESCRIPTION desc694 errorBox ERROR CODE code695 if self transport is not None 696 errorBox sendTo self 697 return None intentionally stop the error here don t log the698 traceback if it s handled do log it earlier if699 it isn t7 self dispatchCommand box addCallbacks 7 1 sendAnswer sendError addErrback self puke 7 2 else 7 3 raise NoEmptyBoxes box 7 47 57 6 def sendBoxCommand self command box requiresAnswer True 7 7 7 8 Send a command across the wire with the given C amp Box 7 971 Mutate the given box to give it any additional keys command ask 711 required for the command and request response machinery then send it 712713 Returns a Deferred which fires with the response C amp Box when it714 is received or fails with a C amp RemoteAmpError if an error is715 received 716717 If the Deferred fails and the error is not handled by the caller of718 this method the failure will be logged and the connection dropped 71972 param command a str the name of the command to issue 721722 param box an AmpBox with the arguments for the command 723724 param requiresAnswer a boolean Defaults to True If True return a725 Deferred which will fire when the other side responds to this command 726 If False return None and do not ask the other side for acknowledgement 727728 return a Deferred which fires the AmpBox that holds the response to729 this command or None as specified by requiresAnswer 73 731 if self locked 732 raise ProtocolSwitched 733 This connection has switched no AMP traffic allowed 734 if self failAllReason is not None 735 return fail self failAllReason 736 box COMMAND command737 tag self nextTag 738 if requiresAnswer 739 box ASK tag74 result self outstandingRequests tag Deferred 741 else 742 result None743 box sendTo self 744 return result745746747 def callRemoteString self command requiresAnswer True kw 748 749 This is a low level API designed only for opitmizing simple messages75 for which the overhead of parsing is too great 751752 param command a str naming the command 753754 param kw arguments to the amp box 755756 param requiresAnswer a boolean Defaults to True If True return a757 Deferred which will fire when the other side responds to this command 758 If False return None and do not ask the other side for acknowledgement 75976 return a Deferred which fires the AmpBox that holds the response to761 this command or None as specified by requiresAnswer 762 763 box Box kw 764 return self sendBoxCommand command box 765766767 def callRemote self commandType a kw 768 769 This is the primary high level API for sending messages via AMP Invoke it77 with a command and appropriate arguments to send a message to this771 connection s peer 772773 param commandType a subclass of Command 774 type commandType L type 775776 param a Positional special parameters taken by the command 777 Positional parameters will typically not be sent over the wire The778 only command included with AMP which uses positional parameters is779 L ProtocolSwitchCommand which takes the protocol that will be78 switched to as its first argument 781782 param kw Keyword arguments taken by the command These are the783 arguments declared in the command s arguments attribute They will784 be encoded and sent to the peer as arguments for the L commandType 785786 return If L commandType has a C requiresAnswer attribute set to787 L False then return L None Otherwise return a L Deferred which788 fires with a dictionary of objects representing the result of this789 call Additionally this L Deferred may fail with an exception79 representing a connection failure with L UnknownRemoteError if the791 other end of the connection fails for an unknown reason or with any792 error specified as a key in L commandType s C errors dictionary 793 794795 XXX this takes command subclasses and not command objects on purpose 796 There s really no reason to have all this back and forth between797 command objects and the protocol and the extra object being created798 the Command instance is pointless Command is kind of like799 Interface and should be more like it 8 8 1 In other words the fact that commandType is instantiated here is an8 2 implementation detail Don t rely on it 8 38 4 co commandType a kw 8 5 return co doCommand self 8 68 78 88 981 class Argument 811 812 Base class of all objects that take values from Amp packets and convert813 them into objects for Python functions 814 815 optional False816817818 def init self optional False 819 82 Create an Argument 821822 param optional a boolean indicating whether this argument can be823 omitted in the protocol 824 825 self optional optional826827828 def retrieve self d name proto 829 83 Retrieve the given key from the given dictionary removing it if found 831832 param d a dictionary 833834 param name a key in L d 835836 param proto an instance of an AMP 837838 raise KeyError if I am not optional and no value was found 83984 return d name 841 842 if self optional 843 value d get name 844 if value is not None 845 del d name 846 else 847 value d pop name 848 return value84985 851 def fromBox self name strings objects proto 852 853 Populate an out dictionary with mapping names to Python values854 decoded from an in AmpBox mapping strings to string values 855856 param name the argument name to retrieve857 type name str858859 param strings The AmpBox to read string s from a mapping of86 argument names to string values 861 type strings AmpBox862863 param objects The dictionary to write object s to a mapping of864 names to Python objects 865 type objects dict866867 param proto an AMP instance 868 869 st self retrieve strings name proto 87 nk wireNameToPythonIdentifier name 871 if self optional and st is None 872 objects nk None873 else 874 objects nk self fromStringProto st proto 875876877 def toBox self name strings objects proto 878 879 Populate an out AmpBox with strings encoded from an in dictionary88 mapping names to Python values 881882 param name the argument name to retrieve883 type name str884885 param strings The AmpBox to write string s to a mapping of886 argument names to string values 887 type strings AmpBox888889 param objects The dictionary to read object s from a mapping of89 names to Python objects 891892 type objects dict893894 param proto the protocol we are converting for 895 type proto AMP896 897 obj self retrieve objects wireNameToPythonIdentifier name proto 898 if self optional and obj is None 899 strings name None9 pass9 1 else 9 2 strings name self toStringProto obj proto 9 39 49 5 def fromStringProto self inString proto 9 6 9 7 Convert a string to a Python value 9 89 9 param inString the string to convert 91 911 param proto the protocol we are converting for 912 type proto AMP913914 return a Python object 915 916 return self fromString inString 917918919 def toStringProto self inObject proto 92 921 Convert a Python object to a string 922923 param inObject the object to convert 924925 param proto the protocol we are converting for 926 type proto AMP927 928 return self toString inObject 92993 931 def fromString self inString 932 933 Convert a string to a Python object Subclasses must implement this 934935 param inString the string to convert 936 type inString str937938 return the decoded value from inString939 94 941942 def toString self inObject 943 944 Convert a Python object into a string for passing over the network 945946 param inObject an object of the type that this Argument is intended947 to deal with 948949 return the wire encoding of inObject95 rtype str951 952953954955class Integer Argument 956 957 Convert to and from int 958 959 fromString int96 def toString self inObject 961 return str int inObject 962963964965class String Argument 966 967 Don t do any conversion at all just pass through str 968 969 def toString self inObject 97 return inObject971972973 def fromString self inString 974 return inString975976977978class Float Argument 979 98 Encode floating point values on the wire as their repr 981 982 fromString float983 toString repr984985986987class Boolean Argument 988 989 Encode True or False as True or False on the wire 99 991 def fromString self inString 992 if inString True 993 return True994 elif inString False 995 return False996 else 997 raise TypeError Bad boolean value r inString 9989991 def toString self inObject 1 1 if inObject 1 2 return True 1 3 else 1 4 return False 1 51 61 71 8class Unicode String 1 9 1 1 Encode a unicode string on the wire as UTF 8 1 11 1 121 13 def toString self inObject 1 14 assert isinstance inObject unicode 1 15 return String toString self inObject encode utf 8 1 161 171 18 def fromString self inString 1 19 assert isinstance inString str 1 2 return String fromString self inString decode utf 8 1 211 221 231 24class Path Unicode 1 25 1 26 Encode and decode L filepath FilePath instances as paths on the wire 1 271 28 This is really intended for use with subprocess communication tools 1 29 exchanging pathnames on different machines over a network is not generally1 3 meaningful but neither is it disallowed you can use this to communicate1 31 about NFS paths for example 1 32 1 33 def fromString self inString 1 34 return filepath FilePath Unicode fromString self inString 1 351 361 37 def toString self inObject 1 38 return Unicode toString self inObject path 1 391 4 1 411 42class AmpList Argument 1 43 1 44 Convert a list of dictionaries into a list of AMP boxes on the wire 1 451 46 For example if you want to pass 1 471 48 a 7 b u hello a 9 b u goodbye 1 491 5 You might use an AmpList like this in your arguments or response list 1 511 52 AmpList a Integer 1 53 b Unicode 1 54 1 55 def init self subargs 1 56 1 57 Create an AmpList 1 581 59 param subargs a list of 2 tuples of name argument describing the1 6 schema of the dictionaries in the sequence of amp boxes 1 61 1 62 self subargs subargs1 631 641 65 def fromStringProto self inString proto 1 66 boxes parseString inString 1 67 values stringsToObjects box self subargs proto 1 68 for box in boxes 1 69 return values1 7 1 711 72 def toStringProto self inObject proto 1 73 return join objectsToStrings 1 74 objects self subargs Box proto1 75 serialize for objects in inObject 1 761 77 RESPONDER METACLASS HELPER 1 781 79class Command 1 8 1 81 Subclass me to specify an AMP Command 1 821 83 cvar arguments A list of 2 tuples of name Argument subclass instance 1 84 specifying the names and values of the parameters which are required for1 85 this command 1 861 87 cvar response A list like L arguments but instead used for the return1 88 value 1 891 9 cvar errors A mapping of subclasses of L Exception to wire protocol tags1 91 for errors represented as L str s Responders which raise keys from this1 92 dictionary will have the error translated to the corresponding tag on the1 93 wire Invokers which receive Deferreds from invoking this command with1 94 L AMP callRemote will potentially receive Failures with keys from this1 95 mapping as their value This mapping is inherited if you declare a1 96 command which handles C FooError as FOO ERROR then subclass it and1 97 specify C BarError as BAR ERROR responders to the subclass may raise1 98 either C FooError or C BarError and invokers must be able to deal with1 99 either of those exceptions 11 11 1 cvar fatalErrors like errors but errors in this list will always11 2 terminate the connection despite being of a recognizable error type 11 311 4 cvar commandType The type of Box used to issue commands useful only for11 5 protocol modifying behavior like startTLS or protocol switching Defaults11 6 to a plain vanilla L Box 11 711 8 cvar responseType The type of Box used to respond to this command only11 9 useful for protocol modifying behavior like startTLS or protocol switching 111 Defaults to a plain vanilla L Box 11111112 ivar requiresAnswer a boolean defaults to True Set it to False on your1113 subclass if you want callRemote to return None Note this is a hint only1114 to the client side of the protocol The return type of a command responder1115 method must always be a dictionary adhering to the contract specified by1116 L response because clients are always free to request a response if they1117 want one 1118 1119112 class metaclass type 1121 1122 Metaclass hack to establish reverse mappings for errors and1123 fatalErrors as class vars 1124 1125 def new cls name bases attrs 1126 re attrs reverseErrors 1127 er attrs allErrors 1128 if commandName not in attrs 1129 attrs commandName name113 newtype type new cls name bases attrs 1131 errors 1132 fatalErrors 1133 accumulateClassDict newtype errors errors 1134 accumulateClassDict newtype fatalErrors fatalErrors 1135 for v k in errors iteritems 1136 re k v1137 er v k1138 for v k in fatalErrors iteritems 1139 re k v114 er v k1141 return newtype11421143 arguments 1144 response 1145 extra 1146 errors 1147 fatalErrors 11481149 commandType Box115 responseType Box11511152 requiresAnswer True115311541155 def init self kw 1156 1157 Create an instance of this command with specified values for its1158 parameters 1159116 param kw a dict containing an appropriate value for each name1161 specified in the L arguments attribute of my class 11621163 raise InvalidSignature if you forgot any required arguments 1164 1165 self structured kw1166 givenArgs kw keys 1167 forgotten 1168 for name arg in self arguments 1169 pythonName wireNameToPythonIdentifier name 117 if pythonName not in givenArgs and not arg optional 1171 forgotten append pythonName 1172 if forgotten 1173 raise InvalidSignature forgot s for s 1174 join forgotten self commandName 1175 forgotten 117611771178 def makeResponse cls objects proto 1179 118 This is a hook which can be used to implement a custom factory1181 response 11821183 param objects a dict with keys similar to the names specified in1184 self arguments having values of the types that the Argument objects in1185 self arguments can format 11861187 param proto an L AMP 11881189 return an L AmpBox 119 1191 return objectsToStrings objects cls response cls responseType 1192 proto 1193 makeResponse classmethod makeResponse 11941195 def responder cls methodfunc 1196 1197 Declare a method to be a responder for a particular command 11981199 This is a decorator 12 12 1 Use like so 12 212 3 class MyCommand Command 12 4 arguments a b 12 512 6 class MyProto AMP 12 7 def myFunMethod self a b 12 8 12 9 MyCommand responder myFunMethod 121 1211 Notes Although decorator syntax is not used within Twisted this1212 function returns its argument and is therefore safe to use with1213 decorator syntax 12141215 This is not thread safe Don t declare AMP subclasses in other1216 threads Don t declare responders outside the scope of AMP subclasses 1217 the behavior is undefined 12181219 param methodfunc A function which will later become a method which122 has a keyword signature compatible with this command s L argument list1221 and returns a dictionary with a set of keys compatible with this1222 command s L response list 12231224 return the methodfunc parameter 1225 1226 RESPONDER METACLASS HELPER append cls methodfunc 1227 return methodfunc1228 responder classmethod responder 1229123 1231 Our only instance method1232 def doCommand self proto 1233 1234 Encode and send this Command to the given protocol 12351236 param proto an AMP representing the connection to send to 12371238 return a Deferred which will fire or error appropriately when the1239 other side responds to the command or error if the connection is lost124 before it is responded to 1241 12421243 def massageError error 1244 error trap RemoteAmpError 1245 rje error value1246 errorType self reverseErrors get rje errorCode 1247 UnknownRemoteError 1248 return Failure errorType rje description 1249125 d proto sendBoxCommand 1251 self commandName objectsToStrings 1252 self structured self arguments self commandType proto 1253 self requiresAnswer 12541255 if self requiresAnswer 1256 d addCallback stringsToObjects self response proto 1257 d addErrback massageError 12581259 return d126 126112621263class NoCertificate 1264 1265 This is for peers which don t want to use a local certificate Used by1266 AMP because AMP s internal language is all about certificates and this1267 duck types in the appropriate place this API isn t really stable though 1268 so it s not exposed anywhere public 1269127 For clients it will use ephemeral DH keys or whatever the default is for1271 certificate less clients in OpenSSL For servers it will generate a1272 temporary self signed certificate with garbage values in the DN and use1273 that 1274 12751276 def init self client 1277 1278 Create a NoCertificate which either is or isn t for the client side of1279 the connection 128 1281 param client True if we are a client and should truly have no1282 certificate and be anonymous False if we are a server and actually1283 have to generate a temporary certificate 12841285 type client bool1286 1287 self client client12881289129 def options self authorities 1291 1292 Behaves like L twisted internet ssl PrivateCertificate options 1293 1294 if not self client 1295 do some crud with sslverify to generate a temporary self signed1296 certificate This is SLOOOWWWWW so it is only in the absolute1297 worst most naive case 12981299 We have to do this because OpenSSL will not let both the server13 and client be anonymous 13 1 sharedDN DN CN TEMPORARY CERTIFICATE 13 2 key KeyPair generate 13 3 cr key certificateRequest sharedDN 13 4 sscrd key signCertificateRequest sharedDN cr lambda dn True 1 13 5 cert key newCertificate sscrd 13 6 return cert options authorities 13 7 options dict 13 8 if authorities 13 9 options update dict verify True 131 requireCertificate True 1311 caCerts auth original for auth in authorities 1312 occo CertificateOptions options 1313 return occo1314131513161317class TLSBox AmpBox 1318 1319 I am an AmpBox that upon being sent initiates a TLS connection 132 1321 slots 13221323 def keyprop k default 1324 return property lambda self self get k default 132513261327 These properties are described in startTLS1328 certificate keyprop tls localCertificate NoCertificate False 1329 verify keyprop tls verifyAuthorities None 133 1331 def sendTo self proto 1332 1333 Send my encoded value to the protocol then initiate TLS 1334 1335 ab AmpBox self 1336 for k in tls localCertificate 1337 tls verifyAuthorities 1338 ab pop k None 1339 ab sendTo proto 134 proto startTLS self certificate self verify 1341134213431344class LocalArgument String 1345 1346 Local arguments are never actually relayed across the wire This is just a1347 shim so that StartTLS can pretend to have some arguments if arguments1348 acquire documentation properties replace this with something nicer later 1349 135 1351 def fromBox self name strings objects proto 1352 pass1353135413551356class StartTLS Command 1357 1358 Use or subclass me to implement a command that starts TLS 1359136 Callers of StartTLS may pass several special arguments which affect the1361 TLS negotiation 13621363 tls localCertificate This is a1364 twisted internet ssl PrivateCertificate which will be used to secure1365 the side of the connection it is returned on 13661367 tls verifyAuthorities This is a list of1368 twisted internet ssl Certificate objects that will be used as the1369 certificate authorities to verify our peer s certificate 137 1371 Each of those special parameters may also be present as a key in the1372 response dictionary 1373 13741375 arguments tls localCertificate LocalArgument optional True 1376 tls verifyAuthorities LocalArgument optional True 13771378 response tls localCertificate LocalArgument optional True 1379 tls verifyAuthorities LocalArgument optional True 138 1381 responseType TLSBox13821383 def init self kw 1384 1385 Create a StartTLS command This is private Use AMP callRemote 13861387 param tls localCertificate the PrivateCertificate object to use to1388 secure the connection If it s None or unspecified an ephemeral DH1389 key is used instead 139 1391 param tls verifyAuthorities a list of Certificate objects which1392 represent root certificates to verify our peer with 1393 1394 self certificate kw pop tls localCertificate NoCertificate True 1395 self authorities kw pop tls verifyAuthorities None 1396 Command init self kw 139713981399 def doCommand self proto 14 14 1 When a StartTLS command is sent prepare to start TLS but don t actually14 2 do it wait for the acknowledgement then initiate the TLS handshake 14 3 14 4 d Command doCommand self proto 14 5 proto prepareTLS self certificate self authorities 14 6 XXX before we get back to user code we are going to start TLS 14 7 def actuallystart response 14 8 proto startTLS self certificate self authorities 14 9 return response141 d addCallback actuallystart 1411 return d1412141314141415class ProtocolSwitchCommand Command 1416 1417 Use this command to switch from something Amp derived to a different1418 protocol mid connection This can be useful to use amp as the1419 connection startup negotiation phase Since TLS is a different layer142 entirely you can use Amp to negotiate the security parameters of your1421 connection then switch to a different protocol and the connection will1422 remain secured 1423 14241425 def init self protoToSwitchToFactory kw 1426 1427 Create a ProtocolSwitchCommand 14281429 param protoToSwitchToFactory a ProtocolFactory which will generate143 the Protocol to switch to 14311432 param kw Keyword arguments encoded and handled normally as1433 L Command would 1434 14351436 self protoToSwitchToFactory protoToSwitchToFactory1437 super ProtocolSwitchCommand self init kw 14381439144 def makeResponse cls innerProto proto 1441 return SwitchBox innerProto 1442 makeResponse classmethod makeResponse 144314441445 def doCommand self proto 1446 1447 When we emit a ProtocolSwitchCommand lock the protocol but don t actually1448 switch to the new protocol unless an acknowledgement is received If1449 an error is received switch back 145 1451 d super ProtocolSwitchCommand self doCommand proto 1452 proto lock 1453 def switchNow ign 1454 innerProto self protoToSwitchToFactory buildProtocol 1455 proto transport getPeer 1456 proto switchTo innerProto self protoToSwitchToFactory 1457 return ign1458 def handle ign 1459 proto locked False146 self protoToSwitchToFactory clientConnectionFailed 1461 None Failure CONNECTION LOST 1462 return ign1463 return d addCallbacks switchNow handle 1464146514661467class AMP StatefulStringProtocol Int16StringReceiver 1468 AmpParserBase 1469 147 This protocol is an AMP connection See the module docstring for protocol1471 details 1472 14731474 class metaclass type 1475 1476 Metaclass hack to record decorators 1477 1478 def new cls name bases attrs 1479 rmh RESPONDER METACLASS HELPER 148 RESPONDER METACLASS HELPER 1481 cd attrs commandDispatch 1482 for base in bases 1483 cls grabFromBase cd base 1484 for commandClass responderFunc in rmh 1485 cd commandClass commandName commandClass responderFunc 1486 return type new cls name bases attrs 14871488 def grabFromBase cls cd base 1489 if hasattr base commandDispatch 149 cd update base commandDispatch 1491 for subbase in base bases 1492 cls grabFromBase cd subbase 1493 grabFromBase classmethod grabFromBase 14941495 protocolName amp base 14961497 hostCertificate None1498149915 def repr self 15 1 15 2 A verbose string representation which gives us information about this AMP15 3 connection 15 4 15 5 return s s at x x 15 6 self class name 15 7 self innerProtocol id self 15 815 9 locked False151 15111512 def lock self 1513 1514 Lock this Amp instance so that no further Amp traffic may be sent 1515 This is used when sending a request to switch underlying protocols 1516 You probably want to subclass ProtocolSwitchCommand rather than calling1517 this directly 1518 1519 self locked True152 1521 innerProtocol None152215231524 def switchTo self newProto clientFactory None 1525 1526 Switch this Amp instance to a new protocol You need to do this1527 simultaneously on both ends of a connection the easiest way to do1528 this is to use a subclass of ProtocolSwitchCommand 1529153 param newProto the new protocol instance 15311532 param clientFactory the ClientFactory to send notifications to 1533 1534 self locked True1535 assert self innerProtocol is None 1536 Protocol can only be safely switched once 1537 All the data that Int16Receiver has not yet dealt with belongs to our1538 new protocol luckily it s keeping that in a handy although1539 ostensibly internal variable for us 154 newProtoData self recvd1541 self recvd We re quite possibly in the middle of a1542 dataReceived loop in Int16StringReceiver 1543 let s make sure that the next iteration the1544 loop will break and not attempt to look at1545 something that isn t a length prefix 15461547 self innerProtocol newProto1548 self innerProtocolClientFactory clientFactory1549 newProto makeConnection self transport 155 newProto dataReceived newProtoData 1551 innerProtocolClientFactory None155215531554 def sendBox self completeBox 1555 1556 Send a amp Box to my peer 15571558 Note transport write is never called outside of this method 1559156 param completeBox an AmpBox 1561 1562 assert not self locked this is taken care of everywhere a packet1563 might be emitted 1564 if self startingTLSBuffer is not None 1565 self startingTLSBuffer append completeBox 1566 else 1567 self transport write completeBox serialize 15681569 outstandingRequests None157 justStartedTLS False157115721573 def makeConnection self transport 1574 1575 When a connection is first established AMP clients send a greeting but1576 servers do not 1577 1578 self transportPeer transport getPeer 1579 self transportHost transport getHost 158 log msg s connection established HOST s PEER s 1581 self class name 1582 self transportHost 1583 self transportPeer 1584 self outstandingRequests 1585 self requestBuffer 1586 self sslVerifyProblems 1587 Later this will become a mutable list we can t get the handle1588 during connection shutdown thanks to the fact that Twisted destroys1589 the socket on our transport before notifying us of a lost connection159 which I guess is reasonable the socket is dead by then See a few1591 lines below in startTLS for details glyph1592 Int16StringReceiver makeConnection self transport 15931594 startingTLSBuffer None15951596 noPeerCertificate False for tests159715981599 def getPeerCertificate self 16 if self noPeerCertificate 16 1 return None16 2 return Certificate peerFromTransport self transport 16 3 peerCertificate property getPeerCertificate 16 416 516 6 def prepareTLS self certificate verifyAuthorities 16 7 16 8 Used by StartTLSCommand to put us into the state where we don t16 9 actually send things that get sent instead we buffer them see161 L sendBox 1611 1612 self startingTLSBuffer 1613 if self hostCertificate is not None 1614 raise OnlyOneTLS 1615 Previously authenticated connection between s and s 1616 is trying to re establish as s 1617 self hostCertificate 1618 self peerCertificate 1619 certificate verifyAuthorities 162 16211622 def startTLS self certificate verifyAuthorities 1623 1624 Used by TLSBox to initiate the SSL handshake 16251626 param certificate a L twisted internet ssl PrivateCertificate for1627 use locally 16281629 param verifyAuthorities L twisted internet ssl Certificate instances163 representing certificate authorities which will verify our peer 1631 1632 self hostCertificate certificate1633 self justStartedTLS True1634 if verifyAuthorities is None 1635 verifyAuthorities 1636 self transport startTLS certificate options verifyAuthorities 1637 Remember that mutable list that we were just talking about Here1638 it is sslverify py takes care of populating this list as1639 necessary glyph164 self sslVerifyProblems problemsFromTransport self transport 1641 stlsb self startingTLSBuffer1642 if stlsb is not None 1643 self startingTLSBuffer None1644 for box in stlsb 1645 self sendBox box 164616471648 def defaultStartTLSResponder self 1649 165 The default TLS responder doesn t specify any certificate or anything 16511652 From a security perspective it s little better than a plain text1653 connection but it is still a bit better so it s included for1654 convenience 16551656 You probably want to override this by providing your own StartTLS responder 1657 1658 return 1659 StartTLS responder defaultStartTLSResponder 166 16611662 def connectionLost self reason 1663 1664 Terminate all outstanding request deferreds and notify nested protocol1665 that the connection has terminated 1666 1667 log msg s connection lost HOST s PEER s 1668 self class name 1669 self transportHost 167 self transportPeer 1671 XXX this may be a slight oversimplification but I believe that if1672 there are pending SSL errors they are the reason that the1673 connection was lost a totally correct implementation of this would1674 set up a simple state machine to track whether any bytes were1675 received after startTLS was called glyph1676 problems self sslVerifyProblems1677 if problems 1678 failReason Failure problems 1679 elif self justStartedTLS 168 We just started TLS and haven t received any data This means1681 the other connection didn t like our cert although they may not1682 have told us why later Twisted should make reason into a TLS1683 error 1684 failReason PeerVerifyError 1685 Peer rejected our certificate for an unknown reason 1686 else 1687 failReason reason1688 self failAllOutgoing failReason 1689 if self innerProtocol is not None 169 self innerProtocol connectionLost reason 1691 if self innerProtocolClientFactory is not None 1692 self innerProtocolClientFactory clientConnectionLost None reason 1693 self transport None169416951696 def dataReceived self data 1697 1698 Either parse incoming data as AMP packets or relay it to our nested1699 protocol 17 17 1 If we successfully receive any data after TLS has been started that17 2 means the connection was secured properly Make a note of that fact 17 3 if self justStartedTLS 17 4 self justStartedTLS False17 517 6 If we already have an inner protocol then we don t deliver data to17 7 the protocol parser any more we just hand it off 17 8 if self innerProtocol is not None 17 9 self innerProtocol dataReceived data 171 return1711 return Int16StringReceiver dataReceived self data 17121713 currentKey None1714 currentBox None171517161717 def proto init self string 1718 1719 String received in the init state 172 1721 self currentBox AmpBox 1722 return self proto key string 172317241725 def proto key self string 1726 1727 String received in the key state If the key is empty a complete1728 box has been received 1729 173 if string 1731 self currentKey string1732 return value 1733 else 1734 self ampBoxReceived self currentBox 1735 self currentBox None1736 return init 173717381739 def proto value self string 174 1741 String received in the value state 1742 1743 self currentBox self currentKey string1744 self currentKey None1745 return key 1746174717481749class ParserHelper AMP 175 1751 Utility subclass to help with string parsing 1752 1753 def init self 1754 AMP init self 1755 self boxes 1756 self results Deferred 175717581759 def getPeer self 176 return string 176117621763 def getHost self 1764 return string 17651766 disconnecting False176717681769 def ampBoxReceived self box 177 self boxes append box 177117721773 Synchronous helpers1774 def parse cls fileObj 1775 1776 Parse some amp data stored in a file 17771778 param fileObj a file like object 1779178 return a list of AmpBoxes encoded in the given file 1781 1782 p cls 1783 p makeConnection p 1784 p dataReceived fileObj read 1785 return p boxes1786 parse classmethod parse 178717881789 def parseString cls data 179 1791 Parse some amp data stored in a string 17921793 param data a str holding some amp encoded data 17941795 return a list of AmpBoxes encoded in the given string 1796 1797 return cls parse StringIO data 1798 parseString classmethod parseString 179918 18 118 2parse ParserHelper parse18 3parseString ParserHelper parseString18 418 5def stringsToObjects strings arglist proto 18 6 18 7 Convert an AmpBox to a dictionary of python objects converting through a18 8 given arglist 18 9181 param strings an AmpBox or dict of strings 18111812 param arglist a list of 2 tuples of strings and Argument objects as1813 described in L Command arguments 18141815 param proto an L AMP instance 18161817 return the converted dictionary mapping names to argument objects 1818 1819 objects 182 myStrings strings copy 1821 for argname argparser in arglist 1822 argparser fromBox argname myStrings objects proto 1823 return objects1824182518261827def objectsToStrings objects arglist strings proto 1828 1829 Convert a dictionary of python objects to an AmpBox converting through a183 given arglist 18311832 param objects a dict mapping names to python objects18331834 param arglist a list of 2 tuples of strings and Argument objects as1835 described in L Command arguments 18361837 param proto an L AMP instance 18381839 return the converted dictionary mapping names to encoded argument184 strings 1841 1842 myObjects 1843 for k v in objects items 1844 myObjects k v18451846 for argname argparser in arglist 1847 argparser toBox argname strings myObjects proto 1848 return strings1849185 Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py", "title": "\n      amp.py in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/twisted/protocols\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      amp.py in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\" type=\"application/x-python; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/twisted/protocols/amp.py?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted?order=name\" title=\"View twisted\">twisted</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols?order=name\" title=\"View protocols\">protocols</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py?order=name\" title=\"View amp.py\">amp.py</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/twisted/protocols/amp.py\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"60989 bytes\">59.6 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td><span class=\"c\"># -*- test-case-name: twisted.test.test_amp -*-</span></td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td><span class=\"c\"># Copyright 2005 Divmod, Inc.\u00a0 See LICENSE file for details</span></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td></td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td><span class=\"sd\">This module implements AMP, the Asynchronous Messaging Protocol.</span></td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td><span class=\"sd\">AMP is a protocol for sending multiple asynchronous request/response pairs over</span></td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td><span class=\"sd\">the same connection.\u00a0 Requests and responses are both collections of key/value</span></td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td><span class=\"sd\">pairs.</span></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td><span class=\"sd\">AMP is a very simple protocol which is not an application.\u00a0 This module is a</span></td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td><span class=\"sd\">\"protocol construction kit\" of sorts; it attempts to be the simplest wire-level</span></td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td><span class=\"sd\">implementation of Deferreds.\u00a0 AMP provides the following base-level features:</span></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Asynchronous request/response handling (hence the name)</span></td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Requests and responses are both key/value pairs</span></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Binary transfer of all data: all data is length-prefixed.\u00a0 Your</span></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 application will never need to worry about quoting.</span></td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Command dispatching (like HTTP Verbs): the protocol is extensible, and</span></td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 multiple AMP sub-protocols can be grouped together easily.</span></td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td><span class=\"sd\">The protocol implementation also provides a few additional features which are</span></td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td><span class=\"sd\">not part of the core wire protocol, but are nevertheless very useful:</span></td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Tight TLS integration, with an included StartTLS command.</span></td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td><span class=\"sd\">\u00a0 \u00a0 - Handshaking to other protocols: because AMP has well-defined message</span></td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 boundaries and maintains all incoming and outgoing requests for you, you</span></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 can start a connection over AMP and then switch to another protocol.</span></td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 This makes it ideal for firewall-traversal applications where you may</span></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 have only one forwarded port but multiple applications that want to use</span></td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 it.</span></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td><span class=\"sd\">Using AMP with Twisted is simple.\u00a0 Each message is a command, with a response.</span></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td><span class=\"sd\">You begin by defining a command type.\u00a0 Commands specify their input and output</span></td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td><span class=\"sd\">in terms of the types that they expect to see in the request and response</span></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td><span class=\"sd\">key-value pairs.\u00a0 Here's an example of a command that adds two integers, 'a'</span></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td><span class=\"sd\">and 'b'::</span></td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td><span class=\"sd\">\u00a0 \u00a0 class Sum(amp.Command):</span></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 arguments = [('a', amp.Integer()),</span></td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0('b', amp.Integer())]</span></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 response = [('total', amp.Integer())]</span></td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td><span class=\"sd\">Once you have specified a command, you need to make it part of a protocol, and</span></td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td><span class=\"sd\">define a responder for it.\u00a0 Here's a 'JustSum' protocol that includes a</span></td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td><span class=\"sd\">responder for our 'Sum' command::</span></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td><span class=\"sd\">\u00a0 \u00a0 class JustSum(amp.AMP):</span></td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def sum(self, a, b):</span></td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 total = a + b</span></td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print 'Did a sum: %d + %d = %d' % (a, b, total)</span></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return {'total': total}</span></td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Sum.responder(sum)</span></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td><span class=\"sd\">Later, when you want to actually do a sum, the following expression will return</span></td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td><span class=\"sd\">a Deferred whilch will fire with the result::</span></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td><span class=\"sd\">\u00a0 \u00a0 ClientCreator(reactor, amp.AMP).connectTCP(...).addCallback(</span></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 lambda p: p.callRemote(Sum, a=13, b=81)).addCallback(</span></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 lambda result: result['total'])</span></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td><span class=\"sd\">You can also define the propogation of specific errors in AMP.\u00a0 For example,</span></td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td><span class=\"sd\">for the slightly more complicated case of division, we might have to deal with</span></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td><span class=\"sd\">division by zero::</span></td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td><span class=\"sd\">\u00a0 \u00a0 class Divide(amp.Command):</span></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 arguments = [('numerator', amp.Integer()),</span></td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0('denominator', amp.Integer())]</span></td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 response = [('result', amp.Float())]</span></td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 errors = {ZeroDivisionError: 'ZERO_DIVISION'}</span></td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td><span class=\"sd\">The 'errors' mapping here tells AMP that if a responder to Divide emits a</span></td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td><span class=\"sd\">L{ZeroDivisionError}, then the other side should be informed that an error of</span></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td><span class=\"sd\">the type 'ZERO_DIVISION' has occurred.\u00a0 Writing a responder which takes</span></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td><span class=\"sd\">advantage of this is very simple - just raise your exception normally::</span></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td><span class=\"sd\">\u00a0 \u00a0 class JustDivide(amp.AMP):</span></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def divide(self, numerator, denominator):</span></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result = numerator / denominator</span></td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print 'Divided: %d / %d = %d' % (numerator, denominator, total)</span></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return {'result': result}</span></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Divide.responder(divide)</span></td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td><span class=\"sd\">On the client side, the errors mapping will be used to determine what the</span></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td><span class=\"sd\">'ZERO_DIVISION' error means, and translated into an asynchronous exception,</span></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td><span class=\"sd\">which can be handled normally as any L{Deferred} would be::</span></td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td><span class=\"sd\">\u00a0 \u00a0 def trapZero(result):</span></td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 result.trap(ZeroDivisionError)</span></td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 print \"Divided by zero: returning INF\"</span></td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 return 1e1000</span></td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td><span class=\"sd\">\u00a0 \u00a0 ClientCreator(reactor, amp.AMP).connectTCP(...).addCallback(</span></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 lambda p: p.callRemote(Divide, numerator=1234,</span></td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0denominator=0)</span></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 ).addErrback(trapZero)</span></td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td><span class=\"sd\">For a complete, runnable example of both of these commands, see the files in</span></td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td><span class=\"sd\">the Twisted repository::</span></td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td><span class=\"sd\">\u00a0 \u00a0 doc/core/examples/ampserver.py</span></td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td><span class=\"sd\">\u00a0 \u00a0 doc/core/examples/ampclient.py</span></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td><span class=\"sd\">On the wire, AMP is a protocol which uses 2-byte lengths to prefix keys and</span></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td><span class=\"sd\">values, and empty keys to separate messages::</span></td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td><span class=\"sd\">\u00a0 \u00a0 &lt;2-byte length&gt;&lt;key&gt;&lt;2-byte length&gt;&lt;value&gt;</span></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td><span class=\"sd\">\u00a0 \u00a0 &lt;2-byte length&gt;&lt;key&gt;&lt;2-byte length&gt;&lt;value&gt;</span></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...</span></td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td><span class=\"sd\">\u00a0 \u00a0 &lt;2-byte length&gt;&lt;key&gt;&lt;2-byte length&gt;&lt;value&gt;</span></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td><span class=\"sd\">\u00a0 \u00a0 &lt;NUL&gt;&lt;NUL&gt;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Empty Key == End of Message</span></td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td><span class=\"sd\">And so on.\u00a0 Because it's tedious to refer to lengths and NULs constantly, the</span></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td><span class=\"sd\">documentation will refer to packets as if they were newline delimited, like</span></td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td><span class=\"sd\">so::</span></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td><span class=\"sd\">\u00a0 \u00a0 C: _command: sum</span></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td><span class=\"sd\">\u00a0 \u00a0 C: _ask: ef639e5c892ccb54</span></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td><span class=\"sd\">\u00a0 \u00a0 C: a: 13</span></td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td><span class=\"sd\">\u00a0 \u00a0 C: b: 81</span></td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td><span class=\"sd\">\u00a0 \u00a0 S: _answer: ef639e5c892ccb54</span></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td><span class=\"sd\">\u00a0 \u00a0 S: total: 94</span></td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td><span class=\"sd\">Notes:</span></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td><span class=\"sd\">Values are limited to the maximum encodable size in a 16-bit length, 65535</span></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td><span class=\"sd\">bytes.</span></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td><span class=\"sd\">Keys are limited to the maximum encodable size in a 8-bit length, 255 bytes.</span></td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td><span class=\"sd\">Note that we still use 2-byte lengths to encode keys.\u00a0 This small redundancy</span></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td><span class=\"sd\">has several features:</span></td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td><span class=\"sd\">\u00a0 \u00a0 - If an implementation becomes confused and starts emitting corrupt data,</span></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 or gets keys confused with values, many common errors will be</span></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 signalled immediately instead of delivering obviously corrupt packets.</span></td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td><span class=\"sd\">\u00a0 \u00a0 - A single NUL will separate every key, and a double NUL separates</span></td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 messages.\u00a0 This provides some redundancy when debugging traffic dumps.</span></td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td><span class=\"sd\">\u00a0 \u00a0 - NULs will be present at regular intervals along the protocol, providing</span></td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 some padding for otherwise braindead C implementations of the protocol,</span></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 so that &lt;stdio.h&gt; string functions will see the NUL and stop.</span></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td><span class=\"sd\">\u00a0 \u00a0 - This makes it possible to run an AMP server on a port also used by a</span></td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 plain-text protocol, and easily distinguish between non-AMP clients (like</span></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 web browsers) which issue non-NUL as the first byte, and AMP clients,</span></td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 which always issue NUL as the first byte.</span></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td>__metaclass__ <span class=\"o\">=</span>\u00a0<span class=\"nb\">type</span></td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td></td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">types</span></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">cStringIO</span>\u00a0<span class=\"kn\">import</span>\u00a0StringIO</td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">struct</span>\u00a0<span class=\"kn\">import</span>\u00a0pack</td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td></td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python.reflect</span>\u00a0<span class=\"kn\">import</span>\u00a0accumulateClassDict</td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python.failure</span>\u00a0<span class=\"kn\">import</span>\u00a0Failure</td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python</span>\u00a0<span class=\"kn\">import</span>\u00a0log<span class=\"p\">,</span>\u00a0filepath</td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td></td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet.main</span>\u00a0<span class=\"kn\">import</span>\u00a0CONNECTION_LOST</td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet.error</span>\u00a0<span class=\"kn\">import</span>\u00a0PeerVerifyError</td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet.defer</span>\u00a0<span class=\"kn\">import</span>\u00a0Deferred<span class=\"p\">,</span>\u00a0maybeDeferred<span class=\"p\">,</span>\u00a0fail</td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.protocols.basic</span>\u00a0<span class=\"kn\">import</span>\u00a0Int16StringReceiver<span class=\"p\">,</span>\u00a0StatefulStringProtocol</td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td></td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet._sslverify</span>\u00a0<span class=\"kn\">import</span>\u00a0problemsFromTransport</td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td><span class=\"c\"># I'd like this to use the exposed public API, but for some reason, when it was</span></td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td><span class=\"c\"># moved, these names were not exposed by internet.ssl.</span></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td></td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet.ssl</span>\u00a0<span class=\"kn\">import</span>\u00a0CertificateOptions<span class=\"p\">,</span>\u00a0Certificate<span class=\"p\">,</span>\u00a0DN<span class=\"p\">,</span>\u00a0KeyPair</td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>ASK <span class=\"o\">=</span>\u00a0<span class=\"s\">'_ask'</span></td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td>ANSWER <span class=\"o\">=</span>\u00a0<span class=\"s\">'_answer'</span></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td>COMMAND <span class=\"o\">=</span>\u00a0<span class=\"s\">'_command'</span></td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td>ERROR <span class=\"o\">=</span>\u00a0<span class=\"s\">'_error'</span></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td>ERROR_CODE <span class=\"o\">=</span>\u00a0<span class=\"s\">'_error_code'</span></td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td>ERROR_DESCRIPTION <span class=\"o\">=</span>\u00a0<span class=\"s\">'_error_description'</span></td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td>UNKNOWN_ERROR_CODE <span class=\"o\">=</span>\u00a0<span class=\"s\">'UNKNOWN'</span></td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td>UNHANDLED_ERROR_CODE <span class=\"o\">=</span>\u00a0<span class=\"s\">'UNHANDLED'</span></td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td>MAX_KEY_LENGTH <span class=\"o\">=</span>\u00a0<span class=\"mh\">0xff</span></td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td>MAX_VALUE_LENGTH <span class=\"o\">=</span>\u00a0<span class=\"mh\">0xffff</span></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td></td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td></td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">AmpError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td><span class=\"sd\">\u00a0 \u00a0 Base class of all Amp-related exceptions.</span></td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td></td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td></td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">ProtocolSwitched</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td><span class=\"sd\">\u00a0 \u00a0 Connections which have been switched to other protocols can no longer</span></td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td><span class=\"sd\">\u00a0 \u00a0 accept traffic at the AMP level.\u00a0 This is raised when you try to send it.</span></td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td></td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td></td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">OnlyOneTLS</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td><span class=\"sd\">\u00a0 \u00a0 This is an implementation limitation; TLS may only be started once per</span></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td><span class=\"sd\">\u00a0 \u00a0 connection.</span></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td></td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td></td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">NoEmptyBoxes</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td><span class=\"sd\">\u00a0 \u00a0 You can't have empty boxes on the connection.\u00a0 This is raised when you</span></td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td><span class=\"sd\">\u00a0 \u00a0 receive or attempt to send one.</span></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td></td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">InvalidSignature</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td><span class=\"sd\">\u00a0 \u00a0 You didn't pass all the required arguments.</span></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td></td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td></td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td></td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">TooLong</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td><span class=\"sd\">\u00a0 \u00a0 One of the protocol's length limitations was violated.</span></td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar isKey: true if the string being encoded in a key position, false if</span></td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td><span class=\"sd\">\u00a0 \u00a0 it was in a value position.</span></td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar isLocal: Was the string encoded locally, or received too long from</span></td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td><span class=\"sd\">\u00a0 \u00a0 the network?\u00a0 (It's only physically possible to encode \"too long\" values on</span></td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td><span class=\"sd\">\u00a0 \u00a0 the network for keys.)</span></td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar value: The string that was too long.</span></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar keyName: If the string being encoded was in a value position, what</span></td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td><span class=\"sd\">\u00a0 \u00a0 key was it being encoded for?</span></td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td></td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0isKey<span class=\"p\">,</span>\u00a0isLocal<span class=\"p\">,</span>\u00a0value<span class=\"p\">,</span>\u00a0keyName<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 AmpError<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>isKey <span class=\"o\">=</span>\u00a0isKey</td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>isLocal <span class=\"o\">=</span>\u00a0isLocal</td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>value <span class=\"o\">=</span>\u00a0value</td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>keyName <span class=\"o\">=</span>\u00a0keyName</td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td></td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 hdr <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isKey <span class=\"ow\">and</span>\u00a0<span class=\"s\">\"key\"</span>\u00a0<span class=\"ow\">or</span>\u00a0<span class=\"s\">\"value\"</span></td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isKey<span class=\"p\">:</span></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 hdr <span class=\"o\">+=</span>\u00a0<span class=\"s\">' '</span>\u00a0<span class=\"o\">+</span>\u00a0<span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>keyName<span class=\"p\">)</span></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 lcl <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>isLocal <span class=\"ow\">and</span>\u00a0<span class=\"s\">\"local\"</span>\u00a0<span class=\"ow\">or</span>\u00a0<span class=\"s\">\"remote\"</span></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">\"</span><span class=\"si\">%s</span><span class=\"s\">\u00a0</span><span class=\"si\">%s</span><span class=\"s\">\u00a0too long: </span><span class=\"si\">%d</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>lcl<span class=\"p\">,</span>\u00a0hdr<span class=\"p\">,</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>value<span class=\"p\">))</span></td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td></td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td></td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">BadLocalReturn</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td><span class=\"sd\">\u00a0 \u00a0 A bad value was returned from a local command; we were unable to coerce it.</span></td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0message<span class=\"p\">,</span>\u00a0enclosed<span class=\"p\">):</span></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 AmpError<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>message <span class=\"o\">=</span>\u00a0message</td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>enclosed <span class=\"o\">=</span>\u00a0enclosed</td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td></td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>message <span class=\"o\">+</span>\u00a0<span class=\"s\">\" \"</span>\u00a0<span class=\"o\">+</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>enclosed<span class=\"o\">.</span>getBriefTraceback<span class=\"p\">()</span></td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td>\u00a0 \u00a0 __str__ <span class=\"o\">=</span>\u00a0__repr__</td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td></td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">RemoteAmpError</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td><span class=\"sd\">\u00a0 \u00a0 This error indicates that something went wrong on the remote end of the</span></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td><span class=\"sd\">\u00a0 \u00a0 connection, and the error was serialized and transmitted to you.</span></td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0errorCode<span class=\"p\">,</span>\u00a0description<span class=\"p\">,</span>\u00a0fatal<span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\u00a0local<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Create a remote error with an error code and description.</span></td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param errorCode: the AMP error code of this error.</span></td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param description: some text to show to the user.</span></td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param fatal: a boolean, true if this error should terminate the</span></td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 connection.</span></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param local: a local Failure, if one exists.</span></td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0local<span class=\"p\">:</span></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 localwhat <span class=\"o\">=</span>\u00a0<span class=\"s\">' (local)'</span></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 othertb <span class=\"o\">=</span>\u00a0local<span class=\"o\">.</span>getBriefTraceback<span class=\"p\">()</span></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 localwhat <span class=\"o\">=</span>\u00a0<span class=\"s\">''</span></td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 othertb <span class=\"o\">=</span>\u00a0<span class=\"s\">''</span></td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"ne\">Exception</span><span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"Code&lt;</span><span class=\"si\">%s</span><span class=\"s\">&gt;</span><span class=\"si\">%s</span><span class=\"s\">: </span><span class=\"si\">%s%s</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorCode<span class=\"p\">,</span>\u00a0localwhat<span class=\"p\">,</span></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description<span class=\"p\">,</span>\u00a0othertb<span class=\"p\">))</span></td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>local <span class=\"o\">=</span>\u00a0local</td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>errorCode <span class=\"o\">=</span>\u00a0errorCode</td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>description <span class=\"o\">=</span>\u00a0description</td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>fatal <span class=\"o\">=</span>\u00a0fatal</td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td></td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td></td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">UnknownRemoteError</span><span class=\"p\">(</span>RemoteAmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td><span class=\"sd\">\u00a0 \u00a0 This means that an error whose type we can't identify was raised from the</span></td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td><span class=\"sd\">\u00a0 \u00a0 other side.</span></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0description<span class=\"p\">):</span></td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 errorCode <span class=\"o\">=</span>\u00a0UNKNOWN_ERROR_CODE</td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 RemoteAmpError<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0errorCode<span class=\"p\">,</span>\u00a0description<span class=\"p\">)</span></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td></td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">MalformedAmpBox</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td><span class=\"sd\">\u00a0 \u00a0 This error indicates that the wire-level protocol was malformed.</span></td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td></td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">UnhandledCommand</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td><span class=\"sd\">\u00a0 \u00a0 A command received via amp could not be dispatched.</span></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td></td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td></td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td></td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IncompatibleVersions</span><span class=\"p\">(</span>AmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td><span class=\"sd\">\u00a0 \u00a0 It was impossible to negotiate a compatible version of the protocol with</span></td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td><span class=\"sd\">\u00a0 \u00a0 the other end of the connection.</span></td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td></td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td></td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td>PROTOCOL_ERRORS <span class=\"o\">=</span>\u00a0<span class=\"p\">{</span>UNHANDLED_ERROR_CODE<span class=\"p\">:</span>\u00a0UnhandledCommand<span class=\"p\">}</span></td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td></td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">AmpBox</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">):</span></td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td><span class=\"sd\">\u00a0 \u00a0 I am a packet in the AMP protocol, much like a regular str:str dictionary.</span></td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td>\u00a0 \u00a0 __slots__ <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># be like a regular dictionary, don't magically</span></td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># acquire a __dict__...</span></td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td></td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td></td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return another AmpBox just like me.</span></td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newBox <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"p\">()</span></td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newBox<span class=\"o\">.</span>update<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0newBox</td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td></td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td></td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Convert me into a wire-encoded string.</span></td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a str encoded according to the rules described in the module</span></td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 docstring.</span></td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 i <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>items<span class=\"p\">()</span></td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 i<span class=\"o\">.</span>sort<span class=\"p\">()</span></td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 L <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 w <span class=\"o\">=</span>\u00a0L<span class=\"o\">.</span>append</td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0k<span class=\"p\">,</span>\u00a0v <span class=\"ow\">in</span>\u00a0i<span class=\"p\">:</span></td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>k<span class=\"p\">)</span>\u00a0<span class=\"o\">&gt;</span>\u00a0MAX_KEY_LENGTH<span class=\"p\">:</span></td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0TooLong<span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0<span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0k<span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>v<span class=\"p\">)</span>\u00a0<span class=\"o\">&gt;</span>\u00a0MAX_VALUE_LENGTH<span class=\"p\">:</span></td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0TooLong<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">,</span>\u00a0<span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0v<span class=\"p\">,</span>\u00a0k<span class=\"p\">)</span></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0kv <span class=\"ow\">in</span>\u00a0k<span class=\"p\">,</span>\u00a0v<span class=\"p\">:</span></td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 w<span class=\"p\">(</span>pack<span class=\"p\">(</span><span class=\"s\">\"!H\"</span><span class=\"p\">,</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>kv<span class=\"p\">)))</span></td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 w<span class=\"p\">(</span>kv<span class=\"p\">)</span></td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 w<span class=\"p\">(</span>pack<span class=\"p\">(</span><span class=\"s\">\"!H\"</span><span class=\"p\">,</span>\u00a0<span class=\"mi\">0</span><span class=\"p\">))</span></td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">''</span><span class=\"o\">.</span>join<span class=\"p\">(</span>L<span class=\"p\">)</span></td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td></td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Serialize and send this box to a Amp instance.\u00a0 By the time it is being</span></td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 sent, several keys are required.\u00a0 I must have exactly ONE of::</span></td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _ask</span></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _answer</span></td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _error</span></td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the '_ask' key is set, then the '_command' key must also be</span></td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 set.</span></td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an AMP instance.</span></td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_sendBox<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td></td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'AmpBox(</span><span class=\"si\">%s</span><span class=\"s\">)'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"o\">.</span>__repr__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),)</span></td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td></td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td><span class=\"c\"># amp.Box =&gt; AmpBox</span></td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td></td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td>Box <span class=\"o\">=</span>\u00a0AmpBox</td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td></td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">QuitBox</span><span class=\"p\">(</span>AmpBox<span class=\"p\">):</span></td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td><span class=\"sd\">\u00a0 \u00a0 I am an AmpBox that, upon being sent, terminates the connection.</span></td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td>\u00a0 \u00a0 __slots__ <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td></td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td></td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'QuitBox(**</span><span class=\"si\">%s</span><span class=\"s\">)'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"nb\">super</span><span class=\"p\">(</span>QuitBox<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>__repr__<span class=\"p\">(),)</span></td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td></td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td></td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Immediately call loseConnection after sending.</span></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"nb\">super</span><span class=\"p\">(</span>QuitBox<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>_sendTo<span class=\"p\">(</span>proto<span class=\"p\">)</span></td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>transport<span class=\"o\">.</span>loseConnection<span class=\"p\">()</span></td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td></td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_SwitchBox</span><span class=\"p\">(</span>AmpBox<span class=\"p\">):</span></td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td><span class=\"sd\">\u00a0 \u00a0 Implementation detail of ProtocolSwitchCommand: I am a JuiceBox which sets</span></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td><span class=\"sd\">\u00a0 \u00a0 up state for the protocol to switch.</span></td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td></td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td>\u00a0 \u00a0 <span class=\"c\"># DON'T set __slots__ here; we do have an attribute.</span></td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td></td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0innerProto<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create a _SwitchBox with the protocol to switch to after being sent.</span></td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L441\"><a href=\"#L441\">441</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param innerProto: the protocol instance to switch to.</span></td></tr><tr><th id=\"L442\"><a href=\"#L442\">442</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type innerProto: an IProtocol provider.</span></td></tr><tr><th id=\"L443\"><a href=\"#L443\">443</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L444\"><a href=\"#L444\">444</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"nb\">super</span><span class=\"p\">(</span>_SwitchBox<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L445\"><a href=\"#L445\">445</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProto <span class=\"o\">=</span>\u00a0innerProto</td></tr><tr><th id=\"L446\"><a href=\"#L446\">446</a></th><td></td></tr><tr><th id=\"L447\"><a href=\"#L447\">447</a></th><td></td></tr><tr><th id=\"L448\"><a href=\"#L448\">448</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L449\"><a href=\"#L449\">449</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'_SwitchBox(</span><span class=\"si\">%r</span><span class=\"s\">, **</span><span class=\"si\">%s</span><span class=\"s\">)'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>innerProto<span class=\"p\">,</span></td></tr><tr><th id=\"L450\"><a href=\"#L450\">450</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"nb\">dict</span><span class=\"o\">.</span>__repr__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),)</span></td></tr><tr><th id=\"L451\"><a href=\"#L451\">451</a></th><td></td></tr><tr><th id=\"L452\"><a href=\"#L452\">452</a></th><td></td></tr><tr><th id=\"L453\"><a href=\"#L453\">453</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L454\"><a href=\"#L454\">454</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L455\"><a href=\"#L455\">455</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Send me; I am the last box on the connection.\u00a0 All further traffic will be</span></td></tr><tr><th id=\"L456\"><a href=\"#L456\">456</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 over the new protocol.</span></td></tr><tr><th id=\"L457\"><a href=\"#L457\">457</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L458\"><a href=\"#L458\">458</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"nb\">super</span><span class=\"p\">(</span>_SwitchBox<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>_sendTo<span class=\"p\">(</span>proto<span class=\"p\">)</span></td></tr><tr><th id=\"L459\"><a href=\"#L459\">459</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_switchTo<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>innerProto<span class=\"p\">)</span></td></tr><tr><th id=\"L460\"><a href=\"#L460\">460</a></th><td></td></tr><tr><th id=\"L461\"><a href=\"#L461\">461</a></th><td></td></tr><tr><th id=\"L462\"><a href=\"#L462\">462</a></th><td></td></tr><tr><th id=\"L463\"><a href=\"#L463\">463</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_DispatchMixin</span><span class=\"p\">:</span></td></tr><tr><th id=\"L464\"><a href=\"#L464\">464</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L465\"><a href=\"#L465\">465</a></th><td><span class=\"sd\">\u00a0 \u00a0 I help AMP dispatch commands based on strings.</span></td></tr><tr><th id=\"L466\"><a href=\"#L466\">466</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L467\"><a href=\"#L467\">467</a></th><td></td></tr><tr><th id=\"L468\"><a href=\"#L468\">468</a></th><td>\u00a0 \u00a0 baseDispatchPrefix <span class=\"o\">=</span>\u00a0<span class=\"s\">'amp_'</span></td></tr><tr><th id=\"L469\"><a href=\"#L469\">469</a></th><td></td></tr><tr><th id=\"L470\"><a href=\"#L470\">470</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_wrapWithSerialization</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0aCallable<span class=\"p\">,</span>\u00a0command<span class=\"p\">):</span></td></tr><tr><th id=\"L471\"><a href=\"#L471\">471</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L472\"><a href=\"#L472\">472</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Wrap aCallable with its command's argument argument de-serialization</span></td></tr><tr><th id=\"L473\"><a href=\"#L473\">473</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 and result serialization logic.</span></td></tr><tr><th id=\"L474\"><a href=\"#L474\">474</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L475\"><a href=\"#L475\">475</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param aCallable: a callable with a 'command' attribute, designed to be</span></td></tr><tr><th id=\"L476\"><a href=\"#L476\">476</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 called with keyword arguments.</span></td></tr><tr><th id=\"L477\"><a href=\"#L477\">477</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L478\"><a href=\"#L478\">478</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param command: the command class whose serialization to use.</span></td></tr><tr><th id=\"L479\"><a href=\"#L479\">479</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L480\"><a href=\"#L480\">480</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a 1-arg callable which, when invoked with an AmpBox, will</span></td></tr><tr><th id=\"L481\"><a href=\"#L481\">481</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 deserialize the argument list and invoke appropriate user code for the</span></td></tr><tr><th id=\"L482\"><a href=\"#L482\">482</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 callable's command, returning a Deferred which fires with the result or</span></td></tr><tr><th id=\"L483\"><a href=\"#L483\">483</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 fails with an error.</span></td></tr><tr><th id=\"L484\"><a href=\"#L484\">484</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L485\"><a href=\"#L485\">485</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">doit</span><span class=\"p\">(</span>box<span class=\"p\">):</span></td></tr><tr><th id=\"L486\"><a href=\"#L486\">486</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kw <span class=\"o\">=</span>\u00a0_stringsToObjects<span class=\"p\">(</span>box<span class=\"p\">,</span>\u00a0command<span class=\"o\">.</span>arguments<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L487\"><a href=\"#L487\">487</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">checkKnownErrors</span><span class=\"p\">(</span>error<span class=\"p\">):</span></td></tr><tr><th id=\"L488\"><a href=\"#L488\">488</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key <span class=\"o\">=</span>\u00a0error<span class=\"o\">.</span>trap<span class=\"p\">(</span><span class=\"o\">*</span>command<span class=\"o\">.</span>allErrors<span class=\"p\">)</span></td></tr><tr><th id=\"L489\"><a href=\"#L489\">489</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 code <span class=\"o\">=</span>\u00a0command<span class=\"o\">.</span>allErrors<span class=\"p\">[</span>key<span class=\"p\">]</span></td></tr><tr><th id=\"L490\"><a href=\"#L490\">490</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc <span class=\"o\">=</span>\u00a0<span class=\"nb\">str</span><span class=\"p\">(</span>error<span class=\"o\">.</span>value<span class=\"p\">)</span></td></tr><tr><th id=\"L491\"><a href=\"#L491\">491</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Failure<span class=\"p\">(</span>RemoteAmpError<span class=\"p\">(</span></td></tr><tr><th id=\"L492\"><a href=\"#L492\">492</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 code<span class=\"p\">,</span>\u00a0desc<span class=\"p\">,</span>\u00a0key <span class=\"ow\">in</span>\u00a0command<span class=\"o\">.</span>fatalErrors<span class=\"p\">,</span>\u00a0local<span class=\"o\">=</span>error<span class=\"p\">))</span></td></tr><tr><th id=\"L493\"><a href=\"#L493\">493</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">makeResponseFor</span><span class=\"p\">(</span>objects<span class=\"p\">):</span></td></tr><tr><th id=\"L494\"><a href=\"#L494\">494</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L495\"><a href=\"#L495\">495</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0command<span class=\"o\">.</span>makeResponse<span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L496\"><a href=\"#L496\">496</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L497\"><a href=\"#L497\">497</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># let's helpfully log this.</span></td></tr><tr><th id=\"L498\"><a href=\"#L498\">498</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 originalFailure <span class=\"o\">=</span>\u00a0Failure<span class=\"p\">()</span></td></tr><tr><th id=\"L499\"><a href=\"#L499\">499</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0BadLocalReturn<span class=\"p\">(</span></td></tr><tr><th id=\"L500\"><a href=\"#L500\">500</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"</span><span class=\"si\">%r</span><span class=\"s\">\u00a0returned </span><span class=\"si\">%r</span><span class=\"s\">\u00a0and </span><span class=\"si\">%r</span><span class=\"s\">\u00a0could not serialize it\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L501\"><a href=\"#L501\">501</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 aCallable<span class=\"p\">,</span></td></tr><tr><th id=\"L502\"><a href=\"#L502\">502</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 objects<span class=\"p\">,</span></td></tr><tr><th id=\"L503\"><a href=\"#L503\">503</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 command<span class=\"p\">),</span></td></tr><tr><th id=\"L504\"><a href=\"#L504\">504</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 originalFailure<span class=\"p\">)</span></td></tr><tr><th id=\"L505\"><a href=\"#L505\">505</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0maybeDeferred<span class=\"p\">(</span>aCallable<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span><span class=\"o\">.</span>addCallback<span class=\"p\">(</span></td></tr><tr><th id=\"L506\"><a href=\"#L506\">506</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 makeResponseFor<span class=\"p\">)</span><span class=\"o\">.</span>addErrback<span class=\"p\">(</span></td></tr><tr><th id=\"L507\"><a href=\"#L507\">507</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 checkKnownErrors<span class=\"p\">)</span></td></tr><tr><th id=\"L508\"><a href=\"#L508\">508</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0doit</td></tr><tr><th id=\"L509\"><a href=\"#L509\">509</a></th><td></td></tr><tr><th id=\"L510\"><a href=\"#L510\">510</a></th><td></td></tr><tr><th id=\"L511\"><a href=\"#L511\">511</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">lookupFunction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0name<span class=\"p\">):</span></td></tr><tr><th id=\"L512\"><a href=\"#L512\">512</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L513\"><a href=\"#L513\">513</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Return a callable to invoke when executing the named command.</span></td></tr><tr><th id=\"L514\"><a href=\"#L514\">514</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L515\"><a href=\"#L515\">515</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param name: the normalized name (from the wire) of the command.</span></td></tr><tr><th id=\"L516\"><a href=\"#L516\">516</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L517\"><a href=\"#L517\">517</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a function that takes one argument (a Box) and returns a box,</span></td></tr><tr><th id=\"L518\"><a href=\"#L518\">518</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 for handling the command identified by the given name.</span></td></tr><tr><th id=\"L519\"><a href=\"#L519\">519</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L520\"><a href=\"#L520\">520</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Try to find a high-level method to invoke, and if we can't find one,</span></td></tr><tr><th id=\"L521\"><a href=\"#L521\">521</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># fall back to a low-level one.</span></td></tr><tr><th id=\"L522\"><a href=\"#L522\">522</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 cd <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_commandDispatch</td></tr><tr><th id=\"L523\"><a href=\"#L523\">523</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0name <span class=\"ow\">in</span>\u00a0cd<span class=\"p\">:</span></td></tr><tr><th id=\"L524\"><a href=\"#L524\">524</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 commandClass<span class=\"p\">,</span>\u00a0responderFunc <span class=\"o\">=</span>\u00a0cd<span class=\"p\">[</span>name<span class=\"p\">]</span></td></tr><tr><th id=\"L525\"><a href=\"#L525\">525</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 responderMethod <span class=\"o\">=</span>\u00a0types<span class=\"o\">.</span>MethodType<span class=\"p\">(</span>responderFunc<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"p\">)</span></td></tr><tr><th id=\"L526\"><a href=\"#L526\">526</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_wrapWithSerialization<span class=\"p\">(</span>responderMethod<span class=\"p\">,</span>\u00a0commandClass<span class=\"p\">)</span></td></tr><tr><th id=\"L527\"><a href=\"#L527\">527</a></th><td></td></tr><tr><th id=\"L528\"><a href=\"#L528\">528</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Fall back to simplistic command dispatching - this uses only strings,</span></td></tr><tr><th id=\"L529\"><a href=\"#L529\">529</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># not encoded/decoded values.</span></td></tr><tr><th id=\"L530\"><a href=\"#L530\">530</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 fName <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>baseDispatchPrefix <span class=\"o\">+</span>\u00a0<span class=\"p\">(</span>name<span class=\"o\">.</span>upper<span class=\"p\">())</span></td></tr><tr><th id=\"L531\"><a href=\"#L531\">531</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0fName<span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L532\"><a href=\"#L532\">532</a></th><td></td></tr><tr><th id=\"L533\"><a href=\"#L533\">533</a></th><td></td></tr><tr><th id=\"L534\"><a href=\"#L534\">534</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">dispatchCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0box<span class=\"p\">):</span></td></tr><tr><th id=\"L535\"><a href=\"#L535\">535</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L536\"><a href=\"#L536\">536</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A box with a _command key was received.</span></td></tr><tr><th id=\"L537\"><a href=\"#L537\">537</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L538\"><a href=\"#L538\">538</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Dispatch it to a local handler call it.</span></td></tr><tr><th id=\"L539\"><a href=\"#L539\">539</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L540\"><a href=\"#L540\">540</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an AMP instance.</span></td></tr><tr><th id=\"L541\"><a href=\"#L541\">541</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param box: an AmpBox to be dispatched.</span></td></tr><tr><th id=\"L542\"><a href=\"#L542\">542</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L543\"><a href=\"#L543\">543</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 cmd <span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>COMMAND<span class=\"p\">]</span></td></tr><tr><th id=\"L544\"><a href=\"#L544\">544</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 fObj <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>lookupFunction<span class=\"p\">(</span>cmd<span class=\"p\">)</span></td></tr><tr><th id=\"L545\"><a href=\"#L545\">545</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0fObj <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L546\"><a href=\"#L546\">546</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">(</span>RemoteAmpError<span class=\"p\">(</span></td></tr><tr><th id=\"L547\"><a href=\"#L547\">547</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UNHANDLED_ERROR_CODE<span class=\"p\">,</span></td></tr><tr><th id=\"L548\"><a href=\"#L548\">548</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Unhandled Command: </span><span class=\"si\">%r</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>cmd<span class=\"p\">,),</span></td></tr><tr><th id=\"L549\"><a href=\"#L549\">549</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">False</span><span class=\"p\">,</span></td></tr><tr><th id=\"L550\"><a href=\"#L550\">550</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 local<span class=\"o\">=</span>Failure<span class=\"p\">(</span>UnhandledCommand<span class=\"p\">())))</span></td></tr><tr><th id=\"L551\"><a href=\"#L551\">551</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0maybeDeferred<span class=\"p\">(</span>fObj<span class=\"p\">,</span>\u00a0box<span class=\"p\">)</span></td></tr><tr><th id=\"L552\"><a href=\"#L552\">552</a></th><td></td></tr><tr><th id=\"L553\"><a href=\"#L553\">553</a></th><td></td></tr><tr><th id=\"L554\"><a href=\"#L554\">554</a></th><td></td></tr><tr><th id=\"L555\"><a href=\"#L555\">555</a></th><td>PYTHON_KEYWORDS <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span></td></tr><tr><th id=\"L556\"><a href=\"#L556\">556</a></th><td>\u00a0 \u00a0 <span class=\"s\">'and'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'del'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'for'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'is'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'raise'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'assert'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'elif'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'from'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'lambda'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L557\"><a href=\"#L557\">557</a></th><td>\u00a0 \u00a0 <span class=\"s\">'return'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'break'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'else'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'global'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'not'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'try'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'class'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'except'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L558\"><a href=\"#L558\">558</a></th><td>\u00a0 \u00a0 <span class=\"s\">'if'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'or'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'while'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'continue'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'exec'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'import'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'pass'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'yield'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L559\"><a href=\"#L559\">559</a></th><td>\u00a0 \u00a0 <span class=\"s\">'def'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'finally'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'in'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'print'</span><span class=\"p\">]</span></td></tr><tr><th id=\"L560\"><a href=\"#L560\">560</a></th><td></td></tr><tr><th id=\"L561\"><a href=\"#L561\">561</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_wireNameToPythonIdentifier</span><span class=\"p\">(</span>key<span class=\"p\">):</span></td></tr><tr><th id=\"L562\"><a href=\"#L562\">562</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L563\"><a href=\"#L563\">563</a></th><td><span class=\"sd\">\u00a0 \u00a0 (Private) Normalize an argument name from the wire for use with Python</span></td></tr><tr><th id=\"L564\"><a href=\"#L564\">564</a></th><td><span class=\"sd\">\u00a0 \u00a0 code.\u00a0 If the return value is going to be a python keyword it will be</span></td></tr><tr><th id=\"L565\"><a href=\"#L565\">565</a></th><td><span class=\"sd\">\u00a0 \u00a0 capitalized.\u00a0 If it contains any dashes they will be replaced with</span></td></tr><tr><th id=\"L566\"><a href=\"#L566\">566</a></th><td><span class=\"sd\">\u00a0 \u00a0 underscores.</span></td></tr><tr><th id=\"L567\"><a href=\"#L567\">567</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L568\"><a href=\"#L568\">568</a></th><td><span class=\"sd\">\u00a0 \u00a0 The rationale behind this method is that AMP should be an inherently</span></td></tr><tr><th id=\"L569\"><a href=\"#L569\">569</a></th><td><span class=\"sd\">\u00a0 \u00a0 multi-language protocol, so message keys may contain all manner of bizarre</span></td></tr><tr><th id=\"L570\"><a href=\"#L570\">570</a></th><td><span class=\"sd\">\u00a0 \u00a0 bytes.\u00a0 This is not a complete solution; there are still forms of arguments</span></td></tr><tr><th id=\"L571\"><a href=\"#L571\">571</a></th><td><span class=\"sd\">\u00a0 \u00a0 that this implementation will be unable to parse.\u00a0 However, Python</span></td></tr><tr><th id=\"L572\"><a href=\"#L572\">572</a></th><td><span class=\"sd\">\u00a0 \u00a0 identifiers share a huge raft of properties with identifiers from many</span></td></tr><tr><th id=\"L573\"><a href=\"#L573\">573</a></th><td><span class=\"sd\">\u00a0 \u00a0 other languages, so this is a 'good enough' effort for now.\u00a0 We deal</span></td></tr><tr><th id=\"L574\"><a href=\"#L574\">574</a></th><td><span class=\"sd\">\u00a0 \u00a0 explicitly with dashes because that is the most likely departure: Lisps</span></td></tr><tr><th id=\"L575\"><a href=\"#L575\">575</a></th><td><span class=\"sd\">\u00a0 \u00a0 commonly use dashes to separate method names, so protocols initially</span></td></tr><tr><th id=\"L576\"><a href=\"#L576\">576</a></th><td><span class=\"sd\">\u00a0 \u00a0 implemented in a lisp amp dialect may use dashes in argument or command</span></td></tr><tr><th id=\"L577\"><a href=\"#L577\">577</a></th><td><span class=\"sd\">\u00a0 \u00a0 names.</span></td></tr><tr><th id=\"L578\"><a href=\"#L578\">578</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L579\"><a href=\"#L579\">579</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param key: a str, looking something like 'foo-bar-baz' or 'from'</span></td></tr><tr><th id=\"L580\"><a href=\"#L580\">580</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L581\"><a href=\"#L581\">581</a></th><td><span class=\"sd\">\u00a0 \u00a0 @return: a str which is a valid python identifier, looking something like</span></td></tr><tr><th id=\"L582\"><a href=\"#L582\">582</a></th><td><span class=\"sd\">\u00a0 \u00a0 'foo_bar_baz' or 'From'.</span></td></tr><tr><th id=\"L583\"><a href=\"#L583\">583</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L584\"><a href=\"#L584\">584</a></th><td>\u00a0 \u00a0 lkey <span class=\"o\">=</span>\u00a0key<span class=\"o\">.</span>replace<span class=\"p\">(</span><span class=\"s\">\"-\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"_\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L585\"><a href=\"#L585\">585</a></th><td>\u00a0 \u00a0 <span class=\"k\">if</span>\u00a0lkey <span class=\"ow\">in</span>\u00a0PYTHON_KEYWORDS<span class=\"p\">:</span></td></tr><tr><th id=\"L586\"><a href=\"#L586\">586</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0lkey<span class=\"o\">.</span>title<span class=\"p\">()</span></td></tr><tr><th id=\"L587\"><a href=\"#L587\">587</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0lkey</td></tr><tr><th id=\"L588\"><a href=\"#L588\">588</a></th><td></td></tr><tr><th id=\"L589\"><a href=\"#L589\">589</a></th><td></td></tr><tr><th id=\"L590\"><a href=\"#L590\">590</a></th><td></td></tr><tr><th id=\"L591\"><a href=\"#L591\">591</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_AmpParserBase</span><span class=\"p\">(</span>_DispatchMixin<span class=\"p\">):</span></td></tr><tr><th id=\"L592\"><a href=\"#L592\">592</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L593\"><a href=\"#L593\">593</a></th><td><span class=\"sd\">\u00a0 \u00a0 Base class for parsing AMP boxes.</span></td></tr><tr><th id=\"L594\"><a href=\"#L594\">594</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L595\"><a href=\"#L595\">595</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L596\"><a href=\"#L596\">596</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L597\"><a href=\"#L597\">597</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create an _AmpParserBase, initializing request-response tracking state.</span></td></tr><tr><th id=\"L598\"><a href=\"#L598\">598</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L599\"><a href=\"#L599\">599</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L600\"><a href=\"#L600\">600</a></th><td></td></tr><tr><th id=\"L601\"><a href=\"#L601\">601</a></th><td></td></tr><tr><th id=\"L602\"><a href=\"#L602\">602</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_puke</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0failure<span class=\"p\">):</span></td></tr><tr><th id=\"L603\"><a href=\"#L603\">603</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L604\"><a href=\"#L604\">604</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is a terminal callback called after application code has had a</span></td></tr><tr><th id=\"L605\"><a href=\"#L605\">605</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 chance to quash any errors.</span></td></tr><tr><th id=\"L606\"><a href=\"#L606\">606</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L607\"><a href=\"#L607\">607</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span><span class=\"s\">\"Amp server or network failure \"</span></td></tr><tr><th id=\"L608\"><a href=\"#L608\">608</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"unhandled by client application:\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L609\"><a href=\"#L609\">609</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>err<span class=\"p\">(</span>failure<span class=\"p\">)</span></td></tr><tr><th id=\"L610\"><a href=\"#L610\">610</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span></td></tr><tr><th id=\"L611\"><a href=\"#L611\">611</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Dropping connection!\u00a0 \"</span></td></tr><tr><th id=\"L612\"><a href=\"#L612\">612</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"To avoid, add errbacks to ALL remote commands!\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L613\"><a href=\"#L613\">613</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>transport <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L614\"><a href=\"#L614\">614</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"o\">.</span>loseConnection<span class=\"p\">()</span></td></tr><tr><th id=\"L615\"><a href=\"#L615\">615</a></th><td></td></tr><tr><th id=\"L616\"><a href=\"#L616\">616</a></th><td>\u00a0 \u00a0 _counter <span class=\"o\">=</span>\u00a0<span class=\"il\">0L</span></td></tr><tr><th id=\"L617\"><a href=\"#L617\">617</a></th><td></td></tr><tr><th id=\"L618\"><a href=\"#L618\">618</a></th><td></td></tr><tr><th id=\"L619\"><a href=\"#L619\">619</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_nextTag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L620\"><a href=\"#L620\">620</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L621\"><a href=\"#L621\">621</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Generate protocol-local serial numbers for _ask keys.</span></td></tr><tr><th id=\"L622\"><a href=\"#L622\">622</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L623\"><a href=\"#L623\">623</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a string that has not yet been used on this connection.</span></td></tr><tr><th id=\"L624\"><a href=\"#L624\">624</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L625\"><a href=\"#L625\">625</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_counter <span class=\"o\">+=</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L626\"><a href=\"#L626\">626</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'</span><span class=\"si\">%x</span><span class=\"s\">'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_counter<span class=\"p\">,)</span></td></tr><tr><th id=\"L627\"><a href=\"#L627\">627</a></th><td></td></tr><tr><th id=\"L628\"><a href=\"#L628\">628</a></th><td>\u00a0 \u00a0 _failAllReason <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L629\"><a href=\"#L629\">629</a></th><td></td></tr><tr><th id=\"L630\"><a href=\"#L630\">630</a></th><td></td></tr><tr><th id=\"L631\"><a href=\"#L631\">631</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">failAllOutgoing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0reason<span class=\"p\">):</span></td></tr><tr><th id=\"L632\"><a href=\"#L632\">632</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L633\"><a href=\"#L633\">633</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Call the errback on all outstanding requests awaiting responses.</span></td></tr><tr><th id=\"L634\"><a href=\"#L634\">634</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L635\"><a href=\"#L635\">635</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param reason: the Failure instance to pass to those errbacks.</span></td></tr><tr><th id=\"L636\"><a href=\"#L636\">636</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L637\"><a href=\"#L637\">637</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_failAllReason <span class=\"o\">=</span>\u00a0reason</td></tr><tr><th id=\"L638\"><a href=\"#L638\">638</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 OR <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests<span class=\"o\">.</span>items<span class=\"p\">()</span></td></tr><tr><th id=\"L639\"><a href=\"#L639\">639</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span>\u00a0<span class=\"c\"># we can never send another request</span></td></tr><tr><th id=\"L640\"><a href=\"#L640\">640</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0key<span class=\"p\">,</span>\u00a0value <span class=\"ow\">in</span>\u00a0OR<span class=\"p\">:</span></td></tr><tr><th id=\"L641\"><a href=\"#L641\">641</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value<span class=\"o\">.</span>errback<span class=\"p\">(</span>reason<span class=\"p\">)</span></td></tr><tr><th id=\"L642\"><a href=\"#L642\">642</a></th><td></td></tr><tr><th id=\"L643\"><a href=\"#L643\">643</a></th><td></td></tr><tr><th id=\"L644\"><a href=\"#L644\">644</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">ampBoxReceived</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0box<span class=\"p\">):</span></td></tr><tr><th id=\"L645\"><a href=\"#L645\">645</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L646\"><a href=\"#L646\">646</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 An AmpBox was received.\u00a0 Respond to it according to its contents.</span></td></tr><tr><th id=\"L647\"><a href=\"#L647\">647</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L648\"><a href=\"#L648\">648</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param box: an AmpBox</span></td></tr><tr><th id=\"L649\"><a href=\"#L649\">649</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L650\"><a href=\"#L650\">650</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0ANSWER <span class=\"ow\">in</span>\u00a0box<span class=\"p\">:</span></td></tr><tr><th id=\"L651\"><a href=\"#L651\">651</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests<span class=\"o\">.</span>pop<span class=\"p\">(</span>box<span class=\"p\">[</span>ANSWER<span class=\"p\">])</span></td></tr><tr><th id=\"L652\"><a href=\"#L652\">652</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question<span class=\"o\">.</span>addErrback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_puke<span class=\"p\">)</span></td></tr><tr><th id=\"L653\"><a href=\"#L653\">653</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question<span class=\"o\">.</span>callback<span class=\"p\">(</span>box<span class=\"p\">)</span></td></tr><tr><th id=\"L654\"><a href=\"#L654\">654</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0ERROR <span class=\"ow\">in</span>\u00a0box<span class=\"p\">:</span></td></tr><tr><th id=\"L655\"><a href=\"#L655\">655</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests<span class=\"o\">.</span>pop<span class=\"p\">(</span>box<span class=\"p\">[</span>ERROR<span class=\"p\">])</span></td></tr><tr><th id=\"L656\"><a href=\"#L656\">656</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question<span class=\"o\">.</span>addErrback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_puke<span class=\"p\">)</span></td></tr><tr><th id=\"L657\"><a href=\"#L657\">657</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># protocol-recognized errors</span></td></tr><tr><th id=\"L658\"><a href=\"#L658\">658</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorCode <span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>ERROR_CODE<span class=\"p\">]</span></td></tr><tr><th id=\"L659\"><a href=\"#L659\">659</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description <span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>ERROR_DESCRIPTION<span class=\"p\">]</span></td></tr><tr><th id=\"L660\"><a href=\"#L660\">660</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0errorCode <span class=\"ow\">in</span>\u00a0PROTOCOL_ERRORS<span class=\"p\">:</span></td></tr><tr><th id=\"L661\"><a href=\"#L661\">661</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exc <span class=\"o\">=</span>\u00a0PROTOCOL_ERRORS<span class=\"p\">[</span>errorCode<span class=\"p\">](</span>errorCode<span class=\"p\">,</span>\u00a0description<span class=\"p\">)</span></td></tr><tr><th id=\"L662\"><a href=\"#L662\">662</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L663\"><a href=\"#L663\">663</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 exc <span class=\"o\">=</span>\u00a0RemoteAmpError<span class=\"p\">(</span>errorCode<span class=\"p\">,</span>\u00a0description<span class=\"p\">)</span></td></tr><tr><th id=\"L664\"><a href=\"#L664\">664</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 question<span class=\"o\">.</span>errback<span class=\"p\">(</span>Failure<span class=\"p\">(</span>exc<span class=\"p\">))</span></td></tr><tr><th id=\"L665\"><a href=\"#L665\">665</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0COMMAND <span class=\"ow\">in</span>\u00a0box<span class=\"p\">:</span></td></tr><tr><th id=\"L666\"><a href=\"#L666\">666</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cmd <span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>COMMAND<span class=\"p\">]</span></td></tr><tr><th id=\"L667\"><a href=\"#L667\">667</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">sendAnswer</span><span class=\"p\">(</span>answerBox<span class=\"p\">):</span></td></tr><tr><th id=\"L668\"><a href=\"#L668\">668</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0ASK <span class=\"ow\">not</span>\u00a0<span class=\"ow\">in</span>\u00a0box<span class=\"p\">:</span></td></tr><tr><th id=\"L669\"><a href=\"#L669\">669</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L670\"><a href=\"#L670\">670</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>transport <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L671\"><a href=\"#L671\">671</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L672\"><a href=\"#L672\">672</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_locked<span class=\"p\">:</span></td></tr><tr><th id=\"L673\"><a href=\"#L673\">673</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L674\"><a href=\"#L674\">674</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 answerBox<span class=\"p\">[</span>ANSWER<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>ASK<span class=\"p\">]</span></td></tr><tr><th id=\"L675\"><a href=\"#L675\">675</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 answerBox<span class=\"o\">.</span>_sendTo<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L676\"><a href=\"#L676\">676</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">sendError</span><span class=\"p\">(</span>error<span class=\"p\">):</span></td></tr><tr><th id=\"L677\"><a href=\"#L677\">677</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0ASK <span class=\"ow\">not</span>\u00a0<span class=\"ow\">in</span>\u00a0box<span class=\"p\">:</span></td></tr><tr><th id=\"L678\"><a href=\"#L678\">678</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0error</td></tr><tr><th id=\"L679\"><a href=\"#L679\">679</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0error<span class=\"o\">.</span>check<span class=\"p\">(</span>RemoteAmpError<span class=\"p\">):</span></td></tr><tr><th id=\"L680\"><a href=\"#L680\">680</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 code <span class=\"o\">=</span>\u00a0error<span class=\"o\">.</span>value<span class=\"o\">.</span>errorCode</td></tr><tr><th id=\"L681\"><a href=\"#L681\">681</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc <span class=\"o\">=</span>\u00a0error<span class=\"o\">.</span>value<span class=\"o\">.</span>description</td></tr><tr><th id=\"L682\"><a href=\"#L682\">682</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0error<span class=\"o\">.</span>value<span class=\"o\">.</span>fatal<span class=\"p\">:</span></td></tr><tr><th id=\"L683\"><a href=\"#L683\">683</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox <span class=\"o\">=</span>\u00a0QuitBox<span class=\"p\">()</span></td></tr><tr><th id=\"L684\"><a href=\"#L684\">684</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L685\"><a href=\"#L685\">685</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox <span class=\"o\">=</span>\u00a0AmpBox<span class=\"p\">()</span></td></tr><tr><th id=\"L686\"><a href=\"#L686\">686</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L687\"><a href=\"#L687\">687</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox <span class=\"o\">=</span>\u00a0QuitBox<span class=\"p\">()</span></td></tr><tr><th id=\"L688\"><a href=\"#L688\">688</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>err<span class=\"p\">(</span>error<span class=\"p\">)</span>\u00a0<span class=\"c\"># here is where server-side logging happens</span></td></tr><tr><th id=\"L689\"><a href=\"#L689\">689</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"c\"># if the error isn't handled</span></td></tr><tr><th id=\"L690\"><a href=\"#L690\">690</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 code <span class=\"o\">=</span>\u00a0UNKNOWN_ERROR_CODE</td></tr><tr><th id=\"L691\"><a href=\"#L691\">691</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 desc <span class=\"o\">=</span>\u00a0<span class=\"s\">\"Unknown Error\"</span></td></tr><tr><th id=\"L692\"><a href=\"#L692\">692</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox<span class=\"p\">[</span>ERROR<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0box<span class=\"p\">[</span>ASK<span class=\"p\">]</span></td></tr><tr><th id=\"L693\"><a href=\"#L693\">693</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox<span class=\"p\">[</span>ERROR_DESCRIPTION<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0desc</td></tr><tr><th id=\"L694\"><a href=\"#L694\">694</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox<span class=\"p\">[</span>ERROR_CODE<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0code</td></tr><tr><th id=\"L695\"><a href=\"#L695\">695</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>transport <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L696\"><a href=\"#L696\">696</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorBox<span class=\"o\">.</span>_sendTo<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L697\"><a href=\"#L697\">697</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">None</span>\u00a0<span class=\"c\"># intentionally stop the error here: don't log the</span></td></tr><tr><th id=\"L698\"><a href=\"#L698\">698</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># traceback if it's handled, do log it (earlier) if</span></td></tr><tr><th id=\"L699\"><a href=\"#L699\">699</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># it isn't</span></td></tr><tr><th id=\"L700\"><a href=\"#L700\">700</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>dispatchCommand<span class=\"p\">(</span>box<span class=\"p\">)</span><span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span></td></tr><tr><th id=\"L701\"><a href=\"#L701\">701</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sendAnswer<span class=\"p\">,</span>\u00a0sendError<span class=\"p\">)</span><span class=\"o\">.</span>addErrback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_puke<span class=\"p\">)</span></td></tr><tr><th id=\"L702\"><a href=\"#L702\">702</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L703\"><a href=\"#L703\">703</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0NoEmptyBoxes<span class=\"p\">(</span>box<span class=\"p\">)</span></td></tr><tr><th id=\"L704\"><a href=\"#L704\">704</a></th><td></td></tr><tr><th id=\"L705\"><a href=\"#L705\">705</a></th><td></td></tr><tr><th id=\"L706\"><a href=\"#L706\">706</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendBoxCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0command<span class=\"p\">,</span>\u00a0box<span class=\"p\">,</span>\u00a0requiresAnswer<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span></td></tr><tr><th id=\"L707\"><a href=\"#L707\">707</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L708\"><a href=\"#L708\">708</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Send a command across the wire with the given C{amp.Box}.</span></td></tr><tr><th id=\"L709\"><a href=\"#L709\">709</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L710\"><a href=\"#L710\">710</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Mutate the given box to give it any additional keys (_command, _ask)</span></td></tr><tr><th id=\"L711\"><a href=\"#L711\">711</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 required for the command and request/response machinery, then send it.</span></td></tr><tr><th id=\"L712\"><a href=\"#L712\">712</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L713\"><a href=\"#L713\">713</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Returns a Deferred which fires with the response C{amp.Box} when it</span></td></tr><tr><th id=\"L714\"><a href=\"#L714\">714</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 is received, or fails with a C{amp.RemoteAmpError} if an error is</span></td></tr><tr><th id=\"L715\"><a href=\"#L715\">715</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 received.</span></td></tr><tr><th id=\"L716\"><a href=\"#L716\">716</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L717\"><a href=\"#L717\">717</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the Deferred fails and the error is not handled by the caller of</span></td></tr><tr><th id=\"L718\"><a href=\"#L718\">718</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 this method, the failure will be logged and the connection dropped.</span></td></tr><tr><th id=\"L719\"><a href=\"#L719\">719</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L720\"><a href=\"#L720\">720</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param command: a str, the name of the command to issue.</span></td></tr><tr><th id=\"L721\"><a href=\"#L721\">721</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L722\"><a href=\"#L722\">722</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param box: an AmpBox with the arguments for the command.</span></td></tr><tr><th id=\"L723\"><a href=\"#L723\">723</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L724\"><a href=\"#L724\">724</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param requiresAnswer: a boolean.\u00a0 Defaults to True.\u00a0 If True, return a</span></td></tr><tr><th id=\"L725\"><a href=\"#L725\">725</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Deferred which will fire when the other side responds to this command.</span></td></tr><tr><th id=\"L726\"><a href=\"#L726\">726</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If False, return None and do not ask the other side for acknowledgement.</span></td></tr><tr><th id=\"L727\"><a href=\"#L727\">727</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L728\"><a href=\"#L728\">728</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which fires the AmpBox that holds the response to</span></td></tr><tr><th id=\"L729\"><a href=\"#L729\">729</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 this command, or None, as specified by requiresAnswer.</span></td></tr><tr><th id=\"L730\"><a href=\"#L730\">730</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L731\"><a href=\"#L731\">731</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_locked<span class=\"p\">:</span></td></tr><tr><th id=\"L732\"><a href=\"#L732\">732</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0ProtocolSwitched<span class=\"p\">(</span></td></tr><tr><th id=\"L733\"><a href=\"#L733\">733</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"This connection has switched: no AMP traffic allowed.\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L734\"><a href=\"#L734\">734</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_failAllReason <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L735\"><a href=\"#L735\">735</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_failAllReason<span class=\"p\">)</span></td></tr><tr><th id=\"L736\"><a href=\"#L736\">736</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 box<span class=\"p\">[</span>COMMAND<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0command</td></tr><tr><th id=\"L737\"><a href=\"#L737\">737</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 tag <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_nextTag<span class=\"p\">()</span></td></tr><tr><th id=\"L738\"><a href=\"#L738\">738</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0requiresAnswer<span class=\"p\">:</span></td></tr><tr><th id=\"L739\"><a href=\"#L739\">739</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 box<span class=\"p\">[</span>ASK<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0tag</td></tr><tr><th id=\"L740\"><a href=\"#L740\">740</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests<span class=\"p\">[</span>tag<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L741\"><a href=\"#L741\">741</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L742\"><a href=\"#L742\">742</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L743\"><a href=\"#L743\">743</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 box<span class=\"o\">.</span>_sendTo<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L744\"><a href=\"#L744\">744</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0result</td></tr><tr><th id=\"L745\"><a href=\"#L745\">745</a></th><td></td></tr><tr><th id=\"L746\"><a href=\"#L746\">746</a></th><td></td></tr><tr><th id=\"L747\"><a href=\"#L747\">747</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">callRemoteString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0command<span class=\"p\">,</span>\u00a0requiresAnswer<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L748\"><a href=\"#L748\">748</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L749\"><a href=\"#L749\">749</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is a low-level API, designed only for opitmizing simple messages</span></td></tr><tr><th id=\"L750\"><a href=\"#L750\">750</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 for which the overhead of parsing is too great.</span></td></tr><tr><th id=\"L751\"><a href=\"#L751\">751</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L752\"><a href=\"#L752\">752</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param command: a str naming the command.</span></td></tr><tr><th id=\"L753\"><a href=\"#L753\">753</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L754\"><a href=\"#L754\">754</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param kw: arguments to the amp box.</span></td></tr><tr><th id=\"L755\"><a href=\"#L755\">755</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L756\"><a href=\"#L756\">756</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param requiresAnswer: a boolean.\u00a0 Defaults to True.\u00a0 If True, return a</span></td></tr><tr><th id=\"L757\"><a href=\"#L757\">757</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Deferred which will fire when the other side responds to this command.</span></td></tr><tr><th id=\"L758\"><a href=\"#L758\">758</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If False, return None and do not ask the other side for acknowledgement.</span></td></tr><tr><th id=\"L759\"><a href=\"#L759\">759</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L760\"><a href=\"#L760\">760</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which fires the AmpBox that holds the response to</span></td></tr><tr><th id=\"L761\"><a href=\"#L761\">761</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 this command, or None, as specified by requiresAnswer.</span></td></tr><tr><th id=\"L762\"><a href=\"#L762\">762</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L763\"><a href=\"#L763\">763</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 box <span class=\"o\">=</span>\u00a0Box<span class=\"p\">(</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L764\"><a href=\"#L764\">764</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_sendBoxCommand<span class=\"p\">(</span>command<span class=\"p\">,</span>\u00a0box<span class=\"p\">)</span></td></tr><tr><th id=\"L765\"><a href=\"#L765\">765</a></th><td></td></tr><tr><th id=\"L766\"><a href=\"#L766\">766</a></th><td></td></tr><tr><th id=\"L767\"><a href=\"#L767\">767</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">callRemote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0commandType<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>a<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L768\"><a href=\"#L768\">768</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L769\"><a href=\"#L769\">769</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is the primary high-level API for sending messages via AMP.\u00a0 Invoke it</span></td></tr><tr><th id=\"L770\"><a href=\"#L770\">770</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 with a command and appropriate arguments to send a message to this</span></td></tr><tr><th id=\"L771\"><a href=\"#L771\">771</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 connection's peer.</span></td></tr><tr><th id=\"L772\"><a href=\"#L772\">772</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L773\"><a href=\"#L773\">773</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param commandType: a subclass of Command.</span></td></tr><tr><th id=\"L774\"><a href=\"#L774\">774</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type commandType: L{type}</span></td></tr><tr><th id=\"L775\"><a href=\"#L775\">775</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L776\"><a href=\"#L776\">776</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param a: Positional (special) parameters taken by the command.</span></td></tr><tr><th id=\"L777\"><a href=\"#L777\">777</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Positional parameters will typically not be sent over the wire.\u00a0 The</span></td></tr><tr><th id=\"L778\"><a href=\"#L778\">778</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 only command included with AMP which uses positional parameters is</span></td></tr><tr><th id=\"L779\"><a href=\"#L779\">779</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 L{ProtocolSwitchCommand}, which takes the protocol that will be</span></td></tr><tr><th id=\"L780\"><a href=\"#L780\">780</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 switched to as its first argument.</span></td></tr><tr><th id=\"L781\"><a href=\"#L781\">781</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L782\"><a href=\"#L782\">782</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param kw: Keyword arguments taken by the command.\u00a0 These are the</span></td></tr><tr><th id=\"L783\"><a href=\"#L783\">783</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 arguments declared in the command's 'arguments' attribute.\u00a0 They will</span></td></tr><tr><th id=\"L784\"><a href=\"#L784\">784</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 be encoded and sent to the peer as arguments for the L{commandType}.</span></td></tr><tr><th id=\"L785\"><a href=\"#L785\">785</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L786\"><a href=\"#L786\">786</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: If L{commandType} has a C{requiresAnswer} attribute set to</span></td></tr><tr><th id=\"L787\"><a href=\"#L787\">787</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 L{False}, then return L{None}.\u00a0 Otherwise, return a L{Deferred} which</span></td></tr><tr><th id=\"L788\"><a href=\"#L788\">788</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 fires with a dictionary of objects representing the result of this</span></td></tr><tr><th id=\"L789\"><a href=\"#L789\">789</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 call.\u00a0 Additionally, this L{Deferred} may fail with an exception</span></td></tr><tr><th id=\"L790\"><a href=\"#L790\">790</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 representing a connection failure, with L{UnknownRemoteError} if the</span></td></tr><tr><th id=\"L791\"><a href=\"#L791\">791</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 other end of the connection fails for an unknown reason, or with any</span></td></tr><tr><th id=\"L792\"><a href=\"#L792\">792</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 error specified as a key in L{commandType}'s C{errors} dictionary.</span></td></tr><tr><th id=\"L793\"><a href=\"#L793\">793</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L794\"><a href=\"#L794\">794</a></th><td></td></tr><tr><th id=\"L795\"><a href=\"#L795\">795</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX this takes command subclasses and not command objects on purpose.</span></td></tr><tr><th id=\"L796\"><a href=\"#L796\">796</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># There's really no reason to have all this back-and-forth between</span></td></tr><tr><th id=\"L797\"><a href=\"#L797\">797</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># command objects and the protocol, and the extra object being created</span></td></tr><tr><th id=\"L798\"><a href=\"#L798\">798</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># (the Command instance) is pointless.\u00a0 Command is kind of like</span></td></tr><tr><th id=\"L799\"><a href=\"#L799\">799</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Interface, and should be more like it.</span></td></tr><tr><th id=\"L800\"><a href=\"#L800\">800</a></th><td></td></tr><tr><th id=\"L801\"><a href=\"#L801\">801</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># In other words, the fact that commandType is instantiated here is an</span></td></tr><tr><th id=\"L802\"><a href=\"#L802\">802</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># implementation detail.\u00a0 Don't rely on it.</span></td></tr><tr><th id=\"L803\"><a href=\"#L803\">803</a></th><td></td></tr><tr><th id=\"L804\"><a href=\"#L804\">804</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 co <span class=\"o\">=</span>\u00a0commandType<span class=\"p\">(</span><span class=\"o\">*</span>a<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L805\"><a href=\"#L805\">805</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0co<span class=\"o\">.</span>_doCommand<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L806\"><a href=\"#L806\">806</a></th><td></td></tr><tr><th id=\"L807\"><a href=\"#L807\">807</a></th><td></td></tr><tr><th id=\"L808\"><a href=\"#L808\">808</a></th><td></td></tr><tr><th id=\"L809\"><a href=\"#L809\">809</a></th><td></td></tr><tr><th id=\"L810\"><a href=\"#L810\">810</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Argument</span><span class=\"p\">:</span></td></tr><tr><th id=\"L811\"><a href=\"#L811\">811</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L812\"><a href=\"#L812\">812</a></th><td><span class=\"sd\">\u00a0 \u00a0 Base-class of all objects that take values from Amp packets and convert</span></td></tr><tr><th id=\"L813\"><a href=\"#L813\">813</a></th><td><span class=\"sd\">\u00a0 \u00a0 them into objects for Python functions.</span></td></tr><tr><th id=\"L814\"><a href=\"#L814\">814</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L815\"><a href=\"#L815\">815</a></th><td>\u00a0 \u00a0 optional <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L816\"><a href=\"#L816\">816</a></th><td></td></tr><tr><th id=\"L817\"><a href=\"#L817\">817</a></th><td></td></tr><tr><th id=\"L818\"><a href=\"#L818\">818</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0optional<span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span></td></tr><tr><th id=\"L819\"><a href=\"#L819\">819</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L820\"><a href=\"#L820\">820</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create an Argument.</span></td></tr><tr><th id=\"L821\"><a href=\"#L821\">821</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L822\"><a href=\"#L822\">822</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param optional: a boolean indicating whether this argument can be</span></td></tr><tr><th id=\"L823\"><a href=\"#L823\">823</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 omitted in the protocol.</span></td></tr><tr><th id=\"L824\"><a href=\"#L824\">824</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L825\"><a href=\"#L825\">825</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>optional <span class=\"o\">=</span>\u00a0optional</td></tr><tr><th id=\"L826\"><a href=\"#L826\">826</a></th><td></td></tr><tr><th id=\"L827\"><a href=\"#L827\">827</a></th><td></td></tr><tr><th id=\"L828\"><a href=\"#L828\">828</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">retrieve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0d<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L829\"><a href=\"#L829\">829</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L830\"><a href=\"#L830\">830</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Retrieve the given key from the given dictionary, removing it if found.</span></td></tr><tr><th id=\"L831\"><a href=\"#L831\">831</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L832\"><a href=\"#L832\">832</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param d: a dictionary.</span></td></tr><tr><th id=\"L833\"><a href=\"#L833\">833</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L834\"><a href=\"#L834\">834</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param name: a key in L{d}.</span></td></tr><tr><th id=\"L835\"><a href=\"#L835\">835</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L836\"><a href=\"#L836\">836</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an instance of an AMP.</span></td></tr><tr><th id=\"L837\"><a href=\"#L837\">837</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L838\"><a href=\"#L838\">838</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @raise KeyError: if I am not optional and no value was found.</span></td></tr><tr><th id=\"L839\"><a href=\"#L839\">839</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L840\"><a href=\"#L840\">840</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: d[name].</span></td></tr><tr><th id=\"L841\"><a href=\"#L841\">841</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L842\"><a href=\"#L842\">842</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>optional<span class=\"p\">:</span></td></tr><tr><th id=\"L843\"><a href=\"#L843\">843</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value <span class=\"o\">=</span>\u00a0d<span class=\"o\">.</span>get<span class=\"p\">(</span>name<span class=\"p\">)</span></td></tr><tr><th id=\"L844\"><a href=\"#L844\">844</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0value <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L845\"><a href=\"#L845\">845</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">del</span>\u00a0d<span class=\"p\">[</span>name<span class=\"p\">]</span></td></tr><tr><th id=\"L846\"><a href=\"#L846\">846</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L847\"><a href=\"#L847\">847</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value <span class=\"o\">=</span>\u00a0d<span class=\"o\">.</span>pop<span class=\"p\">(</span>name<span class=\"p\">)</span></td></tr><tr><th id=\"L848\"><a href=\"#L848\">848</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0value</td></tr><tr><th id=\"L849\"><a href=\"#L849\">849</a></th><td></td></tr><tr><th id=\"L850\"><a href=\"#L850\">850</a></th><td></td></tr><tr><th id=\"L851\"><a href=\"#L851\">851</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromBox</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0strings<span class=\"p\">,</span>\u00a0objects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L852\"><a href=\"#L852\">852</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L853\"><a href=\"#L853\">853</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Populate an 'out' dictionary with mapping names to Python values</span></td></tr><tr><th id=\"L854\"><a href=\"#L854\">854</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 decoded from an 'in' AmpBox mapping strings to string values.</span></td></tr><tr><th id=\"L855\"><a href=\"#L855\">855</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L856\"><a href=\"#L856\">856</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param name: the argument name to retrieve</span></td></tr><tr><th id=\"L857\"><a href=\"#L857\">857</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type name: str</span></td></tr><tr><th id=\"L858\"><a href=\"#L858\">858</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L859\"><a href=\"#L859\">859</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param strings: The AmpBox to read string(s) from, a mapping of</span></td></tr><tr><th id=\"L860\"><a href=\"#L860\">860</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 argument names to string values.</span></td></tr><tr><th id=\"L861\"><a href=\"#L861\">861</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type strings: AmpBox</span></td></tr><tr><th id=\"L862\"><a href=\"#L862\">862</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L863\"><a href=\"#L863\">863</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param objects: The dictionary to write object(s) to, a mapping of</span></td></tr><tr><th id=\"L864\"><a href=\"#L864\">864</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 names to Python objects.</span></td></tr><tr><th id=\"L865\"><a href=\"#L865\">865</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type objects: dict</span></td></tr><tr><th id=\"L866\"><a href=\"#L866\">866</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L867\"><a href=\"#L867\">867</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an AMP instance.</span></td></tr><tr><th id=\"L868\"><a href=\"#L868\">868</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L869\"><a href=\"#L869\">869</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 st <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>retrieve<span class=\"p\">(</span>strings<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L870\"><a href=\"#L870\">870</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 nk <span class=\"o\">=</span>\u00a0_wireNameToPythonIdentifier<span class=\"p\">(</span>name<span class=\"p\">)</span></td></tr><tr><th id=\"L871\"><a href=\"#L871\">871</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>optional <span class=\"ow\">and</span>\u00a0st <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L872\"><a href=\"#L872\">872</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 objects<span class=\"p\">[</span>nk<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L873\"><a href=\"#L873\">873</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L874\"><a href=\"#L874\">874</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 objects<span class=\"p\">[</span>nk<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>fromStringProto<span class=\"p\">(</span>st<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L875\"><a href=\"#L875\">875</a></th><td></td></tr><tr><th id=\"L876\"><a href=\"#L876\">876</a></th><td></td></tr><tr><th id=\"L877\"><a href=\"#L877\">877</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toBox</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0strings<span class=\"p\">,</span>\u00a0objects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L878\"><a href=\"#L878\">878</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L879\"><a href=\"#L879\">879</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Populate an 'out' AmpBox with strings encoded from an 'in' dictionary</span></td></tr><tr><th id=\"L880\"><a href=\"#L880\">880</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 mapping names to Python values.</span></td></tr><tr><th id=\"L881\"><a href=\"#L881\">881</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L882\"><a href=\"#L882\">882</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param name: the argument name to retrieve</span></td></tr><tr><th id=\"L883\"><a href=\"#L883\">883</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type name: str</span></td></tr><tr><th id=\"L884\"><a href=\"#L884\">884</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L885\"><a href=\"#L885\">885</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param strings: The AmpBox to write string(s) to, a mapping of</span></td></tr><tr><th id=\"L886\"><a href=\"#L886\">886</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 argument names to string values.</span></td></tr><tr><th id=\"L887\"><a href=\"#L887\">887</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type strings: AmpBox</span></td></tr><tr><th id=\"L888\"><a href=\"#L888\">888</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L889\"><a href=\"#L889\">889</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param objects: The dictionary to read object(s) from, a mapping of</span></td></tr><tr><th id=\"L890\"><a href=\"#L890\">890</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 names to Python objects.</span></td></tr><tr><th id=\"L891\"><a href=\"#L891\">891</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L892\"><a href=\"#L892\">892</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type objects: dict</span></td></tr><tr><th id=\"L893\"><a href=\"#L893\">893</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L894\"><a href=\"#L894\">894</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: the protocol we are converting for.</span></td></tr><tr><th id=\"L895\"><a href=\"#L895\">895</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type proto: AMP</span></td></tr><tr><th id=\"L896\"><a href=\"#L896\">896</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L897\"><a href=\"#L897\">897</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 obj <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>retrieve<span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0_wireNameToPythonIdentifier<span class=\"p\">(</span>name<span class=\"p\">),</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L898\"><a href=\"#L898\">898</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>optional <span class=\"ow\">and</span>\u00a0obj <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L899\"><a href=\"#L899\">899</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># strings[name] = None</span></td></tr><tr><th id=\"L900\"><a href=\"#L900\">900</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L901\"><a href=\"#L901\">901</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L902\"><a href=\"#L902\">902</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 strings<span class=\"p\">[</span>name<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>toStringProto<span class=\"p\">(</span>obj<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L903\"><a href=\"#L903\">903</a></th><td></td></tr><tr><th id=\"L904\"><a href=\"#L904\">904</a></th><td></td></tr><tr><th id=\"L905\"><a href=\"#L905\">905</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromStringProto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L906\"><a href=\"#L906\">906</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L907\"><a href=\"#L907\">907</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Convert a string to a Python value.</span></td></tr><tr><th id=\"L908\"><a href=\"#L908\">908</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L909\"><a href=\"#L909\">909</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param inString: the string to convert.</span></td></tr><tr><th id=\"L910\"><a href=\"#L910\">910</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L911\"><a href=\"#L911\">911</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: the protocol we are converting for.</span></td></tr><tr><th id=\"L912\"><a href=\"#L912\">912</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type proto: AMP</span></td></tr><tr><th id=\"L913\"><a href=\"#L913\">913</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L914\"><a href=\"#L914\">914</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Python object.</span></td></tr><tr><th id=\"L915\"><a href=\"#L915\">915</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L916\"><a href=\"#L916\">916</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>fromString<span class=\"p\">(</span>inString<span class=\"p\">)</span></td></tr><tr><th id=\"L917\"><a href=\"#L917\">917</a></th><td></td></tr><tr><th id=\"L918\"><a href=\"#L918\">918</a></th><td></td></tr><tr><th id=\"L919\"><a href=\"#L919\">919</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toStringProto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L920\"><a href=\"#L920\">920</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L921\"><a href=\"#L921\">921</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Convert a Python object to a string.</span></td></tr><tr><th id=\"L922\"><a href=\"#L922\">922</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L923\"><a href=\"#L923\">923</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param inObject: the object to convert.</span></td></tr><tr><th id=\"L924\"><a href=\"#L924\">924</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L925\"><a href=\"#L925\">925</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: the protocol we are converting for.</span></td></tr><tr><th id=\"L926\"><a href=\"#L926\">926</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type proto: AMP</span></td></tr><tr><th id=\"L927\"><a href=\"#L927\">927</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L928\"><a href=\"#L928\">928</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>toString<span class=\"p\">(</span>inObject<span class=\"p\">)</span></td></tr><tr><th id=\"L929\"><a href=\"#L929\">929</a></th><td></td></tr><tr><th id=\"L930\"><a href=\"#L930\">930</a></th><td></td></tr><tr><th id=\"L931\"><a href=\"#L931\">931</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">):</span></td></tr><tr><th id=\"L932\"><a href=\"#L932\">932</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L933\"><a href=\"#L933\">933</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Convert a string to a Python object.\u00a0 Subclasses must implement this.</span></td></tr><tr><th id=\"L934\"><a href=\"#L934\">934</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L935\"><a href=\"#L935\">935</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param inString: the string to convert.</span></td></tr><tr><th id=\"L936\"><a href=\"#L936\">936</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type inString: str</span></td></tr><tr><th id=\"L937\"><a href=\"#L937\">937</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L938\"><a href=\"#L938\">938</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: the decoded value from inString</span></td></tr><tr><th id=\"L939\"><a href=\"#L939\">939</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L940\"><a href=\"#L940\">940</a></th><td></td></tr><tr><th id=\"L941\"><a href=\"#L941\">941</a></th><td></td></tr><tr><th id=\"L942\"><a href=\"#L942\">942</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L943\"><a href=\"#L943\">943</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L944\"><a href=\"#L944\">944</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Convert a Python object into a string for passing over the network.</span></td></tr><tr><th id=\"L945\"><a href=\"#L945\">945</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L946\"><a href=\"#L946\">946</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param inObject: an object of the type that this Argument is intended</span></td></tr><tr><th id=\"L947\"><a href=\"#L947\">947</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 to deal with.</span></td></tr><tr><th id=\"L948\"><a href=\"#L948\">948</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L949\"><a href=\"#L949\">949</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: the wire encoding of inObject</span></td></tr><tr><th id=\"L950\"><a href=\"#L950\">950</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @rtype: str</span></td></tr><tr><th id=\"L951\"><a href=\"#L951\">951</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L952\"><a href=\"#L952\">952</a></th><td></td></tr><tr><th id=\"L953\"><a href=\"#L953\">953</a></th><td></td></tr><tr><th id=\"L954\"><a href=\"#L954\">954</a></th><td></td></tr><tr><th id=\"L955\"><a href=\"#L955\">955</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Integer</span><span class=\"p\">(</span>Argument<span class=\"p\">):</span></td></tr><tr><th id=\"L956\"><a href=\"#L956\">956</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L957\"><a href=\"#L957\">957</a></th><td><span class=\"sd\">\u00a0 \u00a0 Convert to and from 'int'.</span></td></tr><tr><th id=\"L958\"><a href=\"#L958\">958</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L959\"><a href=\"#L959\">959</a></th><td>\u00a0 \u00a0 fromString <span class=\"o\">=</span>\u00a0<span class=\"nb\">int</span></td></tr><tr><th id=\"L960\"><a href=\"#L960\">960</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L961\"><a href=\"#L961\">961</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span>inObject<span class=\"p\">))</span></td></tr><tr><th id=\"L962\"><a href=\"#L962\">962</a></th><td></td></tr><tr><th id=\"L963\"><a href=\"#L963\">963</a></th><td></td></tr><tr><th id=\"L964\"><a href=\"#L964\">964</a></th><td></td></tr><tr><th id=\"L965\"><a href=\"#L965\">965</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">String</span><span class=\"p\">(</span>Argument<span class=\"p\">):</span></td></tr><tr><th id=\"L966\"><a href=\"#L966\">966</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L967\"><a href=\"#L967\">967</a></th><td><span class=\"sd\">\u00a0 \u00a0 Don't do any conversion at all; just pass through 'str'.</span></td></tr><tr><th id=\"L968\"><a href=\"#L968\">968</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L969\"><a href=\"#L969\">969</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L970\"><a href=\"#L970\">970</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0inObject</td></tr><tr><th id=\"L971\"><a href=\"#L971\">971</a></th><td></td></tr><tr><th id=\"L972\"><a href=\"#L972\">972</a></th><td></td></tr><tr><th id=\"L973\"><a href=\"#L973\">973</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">):</span></td></tr><tr><th id=\"L974\"><a href=\"#L974\">974</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0inString</td></tr><tr><th id=\"L975\"><a href=\"#L975\">975</a></th><td></td></tr><tr><th id=\"L976\"><a href=\"#L976\">976</a></th><td></td></tr><tr><th id=\"L977\"><a href=\"#L977\">977</a></th><td></td></tr><tr><th id=\"L978\"><a href=\"#L978\">978</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Float</span><span class=\"p\">(</span>Argument<span class=\"p\">):</span></td></tr><tr><th id=\"L979\"><a href=\"#L979\">979</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L980\"><a href=\"#L980\">980</a></th><td><span class=\"sd\">\u00a0 \u00a0 Encode floating-point values on the wire as their repr.</span></td></tr><tr><th id=\"L981\"><a href=\"#L981\">981</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L982\"><a href=\"#L982\">982</a></th><td>\u00a0 \u00a0 fromString <span class=\"o\">=</span>\u00a0<span class=\"nb\">float</span></td></tr><tr><th id=\"L983\"><a href=\"#L983\">983</a></th><td>\u00a0 \u00a0 toString <span class=\"o\">=</span>\u00a0<span class=\"nb\">repr</span></td></tr><tr><th id=\"L984\"><a href=\"#L984\">984</a></th><td></td></tr><tr><th id=\"L985\"><a href=\"#L985\">985</a></th><td></td></tr><tr><th id=\"L986\"><a href=\"#L986\">986</a></th><td></td></tr><tr><th id=\"L987\"><a href=\"#L987\">987</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Boolean</span><span class=\"p\">(</span>Argument<span class=\"p\">):</span></td></tr><tr><th id=\"L988\"><a href=\"#L988\">988</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L989\"><a href=\"#L989\">989</a></th><td><span class=\"sd\">\u00a0 \u00a0 Encode True or False as \"True\" or \"False\" on the wire.</span></td></tr><tr><th id=\"L990\"><a href=\"#L990\">990</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L991\"><a href=\"#L991\">991</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">):</span></td></tr><tr><th id=\"L992\"><a href=\"#L992\">992</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0inString <span class=\"o\">==</span>\u00a0<span class=\"s\">'True'</span><span class=\"p\">:</span></td></tr><tr><th id=\"L993\"><a href=\"#L993\">993</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L994\"><a href=\"#L994\">994</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0inString <span class=\"o\">==</span>\u00a0<span class=\"s\">'False'</span><span class=\"p\">:</span></td></tr><tr><th id=\"L995\"><a href=\"#L995\">995</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L996\"><a href=\"#L996\">996</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L997\"><a href=\"#L997\">997</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\"Bad boolean value: </span><span class=\"si\">%r</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>inString<span class=\"p\">,))</span></td></tr><tr><th id=\"L998\"><a href=\"#L998\">998</a></th><td></td></tr><tr><th id=\"L999\"><a href=\"#L999\">999</a></th><td></td></tr><tr><th id=\"L1000\"><a href=\"#L1000\">1000</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L1001\"><a href=\"#L1001\">1001</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0inObject<span class=\"p\">:</span></td></tr><tr><th id=\"L1002\"><a href=\"#L1002\">1002</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'True'</span></td></tr><tr><th id=\"L1003\"><a href=\"#L1003\">1003</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1004\"><a href=\"#L1004\">1004</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'False'</span></td></tr><tr><th id=\"L1005\"><a href=\"#L1005\">1005</a></th><td></td></tr><tr><th id=\"L1006\"><a href=\"#L1006\">1006</a></th><td></td></tr><tr><th id=\"L1007\"><a href=\"#L1007\">1007</a></th><td></td></tr><tr><th id=\"L1008\"><a href=\"#L1008\">1008</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Unicode</span><span class=\"p\">(</span>String<span class=\"p\">):</span></td></tr><tr><th id=\"L1009\"><a href=\"#L1009\">1009</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1010\"><a href=\"#L1010\">1010</a></th><td><span class=\"sd\">\u00a0 \u00a0 Encode a unicode string on the wire as UTF-8.</span></td></tr><tr><th id=\"L1011\"><a href=\"#L1011\">1011</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1012\"><a href=\"#L1012\">1012</a></th><td></td></tr><tr><th id=\"L1013\"><a href=\"#L1013\">1013</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L1014\"><a href=\"#L1014\">1014</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># assert isinstance(inObject, unicode)</span></td></tr><tr><th id=\"L1015\"><a href=\"#L1015\">1015</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0String<span class=\"o\">.</span>toString<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"o\">.</span>encode<span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">))</span></td></tr><tr><th id=\"L1016\"><a href=\"#L1016\">1016</a></th><td></td></tr><tr><th id=\"L1017\"><a href=\"#L1017\">1017</a></th><td></td></tr><tr><th id=\"L1018\"><a href=\"#L1018\">1018</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">):</span></td></tr><tr><th id=\"L1019\"><a href=\"#L1019\">1019</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># assert isinstance(inString, str)</span></td></tr><tr><th id=\"L1020\"><a href=\"#L1020\">1020</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0String<span class=\"o\">.</span>fromString<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">)</span><span class=\"o\">.</span>decode<span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1021\"><a href=\"#L1021\">1021</a></th><td></td></tr><tr><th id=\"L1022\"><a href=\"#L1022\">1022</a></th><td></td></tr><tr><th id=\"L1023\"><a href=\"#L1023\">1023</a></th><td></td></tr><tr><th id=\"L1024\"><a href=\"#L1024\">1024</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Path</span><span class=\"p\">(</span>Unicode<span class=\"p\">):</span></td></tr><tr><th id=\"L1025\"><a href=\"#L1025\">1025</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1026\"><a href=\"#L1026\">1026</a></th><td><span class=\"sd\">\u00a0 \u00a0 Encode and decode L{filepath.FilePath} instances as paths on the wire.</span></td></tr><tr><th id=\"L1027\"><a href=\"#L1027\">1027</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1028\"><a href=\"#L1028\">1028</a></th><td><span class=\"sd\">\u00a0 \u00a0 This is really intended for use with subprocess communication tools:</span></td></tr><tr><th id=\"L1029\"><a href=\"#L1029\">1029</a></th><td><span class=\"sd\">\u00a0 \u00a0 exchanging pathnames on different machines over a network is not generally</span></td></tr><tr><th id=\"L1030\"><a href=\"#L1030\">1030</a></th><td><span class=\"sd\">\u00a0 \u00a0 meaningful, but neither is it disallowed; you can use this to communicate</span></td></tr><tr><th id=\"L1031\"><a href=\"#L1031\">1031</a></th><td><span class=\"sd\">\u00a0 \u00a0 about NFS paths, for example.</span></td></tr><tr><th id=\"L1032\"><a href=\"#L1032\">1032</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1033\"><a href=\"#L1033\">1033</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">):</span></td></tr><tr><th id=\"L1034\"><a href=\"#L1034\">1034</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0filepath<span class=\"o\">.</span>FilePath<span class=\"p\">(</span>Unicode<span class=\"o\">.</span>fromString<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">))</span></td></tr><tr><th id=\"L1035\"><a href=\"#L1035\">1035</a></th><td></td></tr><tr><th id=\"L1036\"><a href=\"#L1036\">1036</a></th><td></td></tr><tr><th id=\"L1037\"><a href=\"#L1037\">1037</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">):</span></td></tr><tr><th id=\"L1038\"><a href=\"#L1038\">1038</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Unicode<span class=\"o\">.</span>toString<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"o\">.</span>path<span class=\"p\">)</span></td></tr><tr><th id=\"L1039\"><a href=\"#L1039\">1039</a></th><td></td></tr><tr><th id=\"L1040\"><a href=\"#L1040\">1040</a></th><td></td></tr><tr><th id=\"L1041\"><a href=\"#L1041\">1041</a></th><td></td></tr><tr><th id=\"L1042\"><a href=\"#L1042\">1042</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">AmpList</span><span class=\"p\">(</span>Argument<span class=\"p\">):</span></td></tr><tr><th id=\"L1043\"><a href=\"#L1043\">1043</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1044\"><a href=\"#L1044\">1044</a></th><td><span class=\"sd\">\u00a0 \u00a0 Convert a list of dictionaries into a list of AMP boxes on the wire.</span></td></tr><tr><th id=\"L1045\"><a href=\"#L1045\">1045</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1046\"><a href=\"#L1046\">1046</a></th><td><span class=\"sd\">\u00a0 \u00a0 For example, if you want to pass::</span></td></tr><tr><th id=\"L1047\"><a href=\"#L1047\">1047</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1048\"><a href=\"#L1048\">1048</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 [{'a': 7, 'b': u'hello'}, {'a': 9, 'b': u'goodbye'}]</span></td></tr><tr><th id=\"L1049\"><a href=\"#L1049\">1049</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1050\"><a href=\"#L1050\">1050</a></th><td><span class=\"sd\">\u00a0 \u00a0 You might use an AmpList like this in your arguments or response list::</span></td></tr><tr><th id=\"L1051\"><a href=\"#L1051\">1051</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1052\"><a href=\"#L1052\">1052</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 AmpList([('a', Integer()),</span></td></tr><tr><th id=\"L1053\"><a href=\"#L1053\">1053</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0('b', Unicode())])</span></td></tr><tr><th id=\"L1054\"><a href=\"#L1054\">1054</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1055\"><a href=\"#L1055\">1055</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0subargs<span class=\"p\">):</span></td></tr><tr><th id=\"L1056\"><a href=\"#L1056\">1056</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1057\"><a href=\"#L1057\">1057</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create an AmpList.</span></td></tr><tr><th id=\"L1058\"><a href=\"#L1058\">1058</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1059\"><a href=\"#L1059\">1059</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param subargs: a list of 2-tuples of ('name', argument) describing the</span></td></tr><tr><th id=\"L1060\"><a href=\"#L1060\">1060</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 schema of the dictionaries in the sequence of amp boxes.</span></td></tr><tr><th id=\"L1061\"><a href=\"#L1061\">1061</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1062\"><a href=\"#L1062\">1062</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>subargs <span class=\"o\">=</span>\u00a0subargs</td></tr><tr><th id=\"L1063\"><a href=\"#L1063\">1063</a></th><td></td></tr><tr><th id=\"L1064\"><a href=\"#L1064\">1064</a></th><td></td></tr><tr><th id=\"L1065\"><a href=\"#L1065\">1065</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromStringProto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inString<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1066\"><a href=\"#L1066\">1066</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 boxes <span class=\"o\">=</span>\u00a0parseString<span class=\"p\">(</span>inString<span class=\"p\">)</span></td></tr><tr><th id=\"L1067\"><a href=\"#L1067\">1067</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 values <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span>_stringsToObjects<span class=\"p\">(</span>box<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>subargs<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1068\"><a href=\"#L1068\">1068</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0box <span class=\"ow\">in</span>\u00a0boxes<span class=\"p\">]</span></td></tr><tr><th id=\"L1069\"><a href=\"#L1069\">1069</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0values</td></tr><tr><th id=\"L1070\"><a href=\"#L1070\">1070</a></th><td></td></tr><tr><th id=\"L1071\"><a href=\"#L1071\">1071</a></th><td></td></tr><tr><th id=\"L1072\"><a href=\"#L1072\">1072</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">toStringProto</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0inObject<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1073\"><a href=\"#L1073\">1073</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">''</span><span class=\"o\">.</span>join<span class=\"p\">([</span>_objectsToStrings<span class=\"p\">(</span></td></tr><tr><th id=\"L1074\"><a href=\"#L1074\">1074</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 objects<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>subargs<span class=\"p\">,</span>\u00a0Box<span class=\"p\">(),</span>\u00a0proto</td></tr><tr><th id=\"L1075\"><a href=\"#L1075\">1075</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">)</span><span class=\"o\">.</span>serialize<span class=\"p\">()</span>\u00a0<span class=\"k\">for</span>\u00a0objects <span class=\"ow\">in</span>\u00a0inObject<span class=\"p\">])</span></td></tr><tr><th id=\"L1076\"><a href=\"#L1076\">1076</a></th><td></td></tr><tr><th id=\"L1077\"><a href=\"#L1077\">1077</a></th><td>_RESPONDER_METACLASS_HELPER <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1078\"><a href=\"#L1078\">1078</a></th><td></td></tr><tr><th id=\"L1079\"><a href=\"#L1079\">1079</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Command</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1080\"><a href=\"#L1080\">1080</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1081\"><a href=\"#L1081\">1081</a></th><td><span class=\"sd\">\u00a0 \u00a0 Subclass me to specify an AMP Command.</span></td></tr><tr><th id=\"L1082\"><a href=\"#L1082\">1082</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1083\"><a href=\"#L1083\">1083</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar arguments: A list of 2-tuples of (name, Argument-subclass-instance),</span></td></tr><tr><th id=\"L1084\"><a href=\"#L1084\">1084</a></th><td><span class=\"sd\">\u00a0 \u00a0 specifying the names and values of the parameters which are required for</span></td></tr><tr><th id=\"L1085\"><a href=\"#L1085\">1085</a></th><td><span class=\"sd\">\u00a0 \u00a0 this command.</span></td></tr><tr><th id=\"L1086\"><a href=\"#L1086\">1086</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1087\"><a href=\"#L1087\">1087</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar response: A list like L{arguments}, but instead used for the return</span></td></tr><tr><th id=\"L1088\"><a href=\"#L1088\">1088</a></th><td><span class=\"sd\">\u00a0 \u00a0 value.</span></td></tr><tr><th id=\"L1089\"><a href=\"#L1089\">1089</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1090\"><a href=\"#L1090\">1090</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar errors: A mapping of subclasses of L{Exception} to wire-protocol tags</span></td></tr><tr><th id=\"L1091\"><a href=\"#L1091\">1091</a></th><td><span class=\"sd\">\u00a0 \u00a0 for errors represented as L{str}s.\u00a0 Responders which raise keys from this</span></td></tr><tr><th id=\"L1092\"><a href=\"#L1092\">1092</a></th><td><span class=\"sd\">\u00a0 \u00a0 dictionary will have the error translated to the corresponding tag on the</span></td></tr><tr><th id=\"L1093\"><a href=\"#L1093\">1093</a></th><td><span class=\"sd\">\u00a0 \u00a0 wire.\u00a0 Invokers which receive Deferreds from invoking this command with</span></td></tr><tr><th id=\"L1094\"><a href=\"#L1094\">1094</a></th><td><span class=\"sd\">\u00a0 \u00a0 L{AMP.callRemote} will potentially receive Failures with keys from this</span></td></tr><tr><th id=\"L1095\"><a href=\"#L1095\">1095</a></th><td><span class=\"sd\">\u00a0 \u00a0 mapping as their value.\u00a0 This mapping is inherited; if you declare a</span></td></tr><tr><th id=\"L1096\"><a href=\"#L1096\">1096</a></th><td><span class=\"sd\">\u00a0 \u00a0 command which handles C{FooError} as 'FOO_ERROR', then subclass it and</span></td></tr><tr><th id=\"L1097\"><a href=\"#L1097\">1097</a></th><td><span class=\"sd\">\u00a0 \u00a0 specify C{BarError} as 'BAR_ERROR', responders to the subclass may raise</span></td></tr><tr><th id=\"L1098\"><a href=\"#L1098\">1098</a></th><td><span class=\"sd\">\u00a0 \u00a0 either C{FooError} or C{BarError}, and invokers must be able to deal with</span></td></tr><tr><th id=\"L1099\"><a href=\"#L1099\">1099</a></th><td><span class=\"sd\">\u00a0 \u00a0 either of those exceptions.</span></td></tr><tr><th id=\"L1100\"><a href=\"#L1100\">1100</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1101\"><a href=\"#L1101\">1101</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar fatalErrors: like 'errors', but errors in this list will always</span></td></tr><tr><th id=\"L1102\"><a href=\"#L1102\">1102</a></th><td><span class=\"sd\">\u00a0 \u00a0 terminate the connection, despite being of a recognizable error type.</span></td></tr><tr><th id=\"L1103\"><a href=\"#L1103\">1103</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1104\"><a href=\"#L1104\">1104</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar commandType: The type of Box used to issue commands; useful only for</span></td></tr><tr><th id=\"L1105\"><a href=\"#L1105\">1105</a></th><td><span class=\"sd\">\u00a0 \u00a0 protocol-modifying behavior like startTLS or protocol switching.\u00a0 Defaults</span></td></tr><tr><th id=\"L1106\"><a href=\"#L1106\">1106</a></th><td><span class=\"sd\">\u00a0 \u00a0 to a plain vanilla L{Box}.</span></td></tr><tr><th id=\"L1107\"><a href=\"#L1107\">1107</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1108\"><a href=\"#L1108\">1108</a></th><td><span class=\"sd\">\u00a0 \u00a0 @cvar responseType: The type of Box used to respond to this command; only</span></td></tr><tr><th id=\"L1109\"><a href=\"#L1109\">1109</a></th><td><span class=\"sd\">\u00a0 \u00a0 useful for protocol-modifying behavior like startTLS or protocol switching.</span></td></tr><tr><th id=\"L1110\"><a href=\"#L1110\">1110</a></th><td><span class=\"sd\">\u00a0 \u00a0 Defaults to a plain vanilla L{Box}.</span></td></tr><tr><th id=\"L1111\"><a href=\"#L1111\">1111</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1112\"><a href=\"#L1112\">1112</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar requiresAnswer: a boolean; defaults to True.\u00a0 Set it to False on your</span></td></tr><tr><th id=\"L1113\"><a href=\"#L1113\">1113</a></th><td><span class=\"sd\">\u00a0 \u00a0 subclass if you want callRemote to return None.\u00a0 Note: this is a hint only</span></td></tr><tr><th id=\"L1114\"><a href=\"#L1114\">1114</a></th><td><span class=\"sd\">\u00a0 \u00a0 to the client side of the protocol.\u00a0 The return-type of a command responder</span></td></tr><tr><th id=\"L1115\"><a href=\"#L1115\">1115</a></th><td><span class=\"sd\">\u00a0 \u00a0 method must always be a dictionary adhering to the contract specified by</span></td></tr><tr><th id=\"L1116\"><a href=\"#L1116\">1116</a></th><td><span class=\"sd\">\u00a0 \u00a0 L{response}, because clients are always free to request a response if they</span></td></tr><tr><th id=\"L1117\"><a href=\"#L1117\">1117</a></th><td><span class=\"sd\">\u00a0 \u00a0 want one.</span></td></tr><tr><th id=\"L1118\"><a href=\"#L1118\">1118</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1119\"><a href=\"#L1119\">1119</a></th><td></td></tr><tr><th id=\"L1120\"><a href=\"#L1120\">1120</a></th><td>\u00a0 \u00a0 <span class=\"k\">class</span>\u00a0<span class=\"nc\">__metaclass__</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1121\"><a href=\"#L1121\">1121</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1122\"><a href=\"#L1122\">1122</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Metaclass hack to establish reverse-mappings for 'errors' and</span></td></tr><tr><th id=\"L1123\"><a href=\"#L1123\">1123</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 'fatalErrors' as class vars.</span></td></tr><tr><th id=\"L1124\"><a href=\"#L1124\">1124</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1125\"><a href=\"#L1125\">1125</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__new__</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0bases<span class=\"p\">,</span>\u00a0attrs<span class=\"p\">):</span></td></tr><tr><th id=\"L1126\"><a href=\"#L1126\">1126</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 re <span class=\"o\">=</span>\u00a0attrs<span class=\"p\">[</span><span class=\"s\">'reverseErrors'</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1127\"><a href=\"#L1127\">1127</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 er <span class=\"o\">=</span>\u00a0attrs<span class=\"p\">[</span><span class=\"s\">'allErrors'</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1128\"><a href=\"#L1128\">1128</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"s\">'commandName'</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"ow\">in</span>\u00a0attrs<span class=\"p\">:</span></td></tr><tr><th id=\"L1129\"><a href=\"#L1129\">1129</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 attrs<span class=\"p\">[</span><span class=\"s\">'commandName'</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0name</td></tr><tr><th id=\"L1130\"><a href=\"#L1130\">1130</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newtype <span class=\"o\">=</span>\u00a0<span class=\"nb\">type</span><span class=\"o\">.</span>__new__<span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0bases<span class=\"p\">,</span>\u00a0attrs<span class=\"p\">)</span></td></tr><tr><th id=\"L1131\"><a href=\"#L1131\">1131</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errors <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1132\"><a href=\"#L1132\">1132</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fatalErrors <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1133\"><a href=\"#L1133\">1133</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 accumulateClassDict<span class=\"p\">(</span>newtype<span class=\"p\">,</span>\u00a0<span class=\"s\">'errors'</span><span class=\"p\">,</span>\u00a0errors<span class=\"p\">)</span></td></tr><tr><th id=\"L1134\"><a href=\"#L1134\">1134</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 accumulateClassDict<span class=\"p\">(</span>newtype<span class=\"p\">,</span>\u00a0<span class=\"s\">'fatalErrors'</span><span class=\"p\">,</span>\u00a0fatalErrors<span class=\"p\">)</span></td></tr><tr><th id=\"L1135\"><a href=\"#L1135\">1135</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0v<span class=\"p\">,</span>\u00a0k <span class=\"ow\">in</span>\u00a0errors<span class=\"o\">.</span>iteritems<span class=\"p\">():</span></td></tr><tr><th id=\"L1136\"><a href=\"#L1136\">1136</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 re<span class=\"p\">[</span>k<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0v</td></tr><tr><th id=\"L1137\"><a href=\"#L1137\">1137</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 er<span class=\"p\">[</span>v<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0k</td></tr><tr><th id=\"L1138\"><a href=\"#L1138\">1138</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0v<span class=\"p\">,</span>\u00a0k <span class=\"ow\">in</span>\u00a0fatalErrors<span class=\"o\">.</span>iteritems<span class=\"p\">():</span></td></tr><tr><th id=\"L1139\"><a href=\"#L1139\">1139</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 re<span class=\"p\">[</span>k<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0v</td></tr><tr><th id=\"L1140\"><a href=\"#L1140\">1140</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 er<span class=\"p\">[</span>v<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0k</td></tr><tr><th id=\"L1141\"><a href=\"#L1141\">1141</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0newtype</td></tr><tr><th id=\"L1142\"><a href=\"#L1142\">1142</a></th><td></td></tr><tr><th id=\"L1143\"><a href=\"#L1143\">1143</a></th><td>\u00a0 \u00a0 arguments <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1144\"><a href=\"#L1144\">1144</a></th><td>\u00a0 \u00a0 response <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1145\"><a href=\"#L1145\">1145</a></th><td>\u00a0 \u00a0 extra <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1146\"><a href=\"#L1146\">1146</a></th><td>\u00a0 \u00a0 errors <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1147\"><a href=\"#L1147\">1147</a></th><td>\u00a0 \u00a0 fatalErrors <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1148\"><a href=\"#L1148\">1148</a></th><td></td></tr><tr><th id=\"L1149\"><a href=\"#L1149\">1149</a></th><td>\u00a0 \u00a0 commandType <span class=\"o\">=</span>\u00a0Box</td></tr><tr><th id=\"L1150\"><a href=\"#L1150\">1150</a></th><td>\u00a0 \u00a0 responseType <span class=\"o\">=</span>\u00a0Box</td></tr><tr><th id=\"L1151\"><a href=\"#L1151\">1151</a></th><td></td></tr><tr><th id=\"L1152\"><a href=\"#L1152\">1152</a></th><td>\u00a0 \u00a0 requiresAnswer <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L1153\"><a href=\"#L1153\">1153</a></th><td></td></tr><tr><th id=\"L1154\"><a href=\"#L1154\">1154</a></th><td></td></tr><tr><th id=\"L1155\"><a href=\"#L1155\">1155</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L1156\"><a href=\"#L1156\">1156</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1157\"><a href=\"#L1157\">1157</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create an instance of this command with specified values for its</span></td></tr><tr><th id=\"L1158\"><a href=\"#L1158\">1158</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 parameters.</span></td></tr><tr><th id=\"L1159\"><a href=\"#L1159\">1159</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1160\"><a href=\"#L1160\">1160</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param kw: a dict containing an appropriate value for each name</span></td></tr><tr><th id=\"L1161\"><a href=\"#L1161\">1161</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 specified in the L{arguments} attribute of my class.</span></td></tr><tr><th id=\"L1162\"><a href=\"#L1162\">1162</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1163\"><a href=\"#L1163\">1163</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @raise InvalidSignature: if you forgot any required arguments.</span></td></tr><tr><th id=\"L1164\"><a href=\"#L1164\">1164</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1165\"><a href=\"#L1165\">1165</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>structured <span class=\"o\">=</span>\u00a0kw</td></tr><tr><th id=\"L1166\"><a href=\"#L1166\">1166</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 givenArgs <span class=\"o\">=</span>\u00a0kw<span class=\"o\">.</span>keys<span class=\"p\">()</span></td></tr><tr><th id=\"L1167\"><a href=\"#L1167\">1167</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 forgotten <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1168\"><a href=\"#L1168\">1168</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0name<span class=\"p\">,</span>\u00a0arg <span class=\"ow\">in</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>arguments<span class=\"p\">:</span></td></tr><tr><th id=\"L1169\"><a href=\"#L1169\">1169</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pythonName <span class=\"o\">=</span>\u00a0_wireNameToPythonIdentifier<span class=\"p\">(</span>name<span class=\"p\">)</span></td></tr><tr><th id=\"L1170\"><a href=\"#L1170\">1170</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0pythonName <span class=\"ow\">not</span>\u00a0<span class=\"ow\">in</span>\u00a0givenArgs <span class=\"ow\">and</span>\u00a0<span class=\"ow\">not</span>\u00a0arg<span class=\"o\">.</span>optional<span class=\"p\">:</span></td></tr><tr><th id=\"L1171\"><a href=\"#L1171\">1171</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 forgotten<span class=\"o\">.</span>append<span class=\"p\">(</span>pythonName<span class=\"p\">)</span></td></tr><tr><th id=\"L1172\"><a href=\"#L1172\">1172</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0forgotten<span class=\"p\">:</span></td></tr><tr><th id=\"L1173\"><a href=\"#L1173\">1173</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0InvalidSignature<span class=\"p\">(</span><span class=\"s\">\"forgot </span><span class=\"si\">%s</span><span class=\"s\">\u00a0for </span><span class=\"si\">%s</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L1174\"><a href=\"#L1174\">1174</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">', '</span><span class=\"o\">.</span>join<span class=\"p\">(</span>forgotten<span class=\"p\">),</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>commandName<span class=\"p\">))</span></td></tr><tr><th id=\"L1175\"><a href=\"#L1175\">1175</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 forgotten <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1176\"><a href=\"#L1176\">1176</a></th><td></td></tr><tr><th id=\"L1177\"><a href=\"#L1177\">1177</a></th><td></td></tr><tr><th id=\"L1178\"><a href=\"#L1178\">1178</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">makeResponse</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0objects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1179\"><a href=\"#L1179\">1179</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1180\"><a href=\"#L1180\">1180</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is a hook which can be used to implement a custom factory</span></td></tr><tr><th id=\"L1181\"><a href=\"#L1181\">1181</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 response.</span></td></tr><tr><th id=\"L1182\"><a href=\"#L1182\">1182</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1183\"><a href=\"#L1183\">1183</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param objects: a dict with keys similar to the names specified in</span></td></tr><tr><th id=\"L1184\"><a href=\"#L1184\">1184</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 self.arguments, having values of the types that the Argument objects in</span></td></tr><tr><th id=\"L1185\"><a href=\"#L1185\">1185</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 self.arguments can format.</span></td></tr><tr><th id=\"L1186\"><a href=\"#L1186\">1186</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1187\"><a href=\"#L1187\">1187</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an L{AMP}.</span></td></tr><tr><th id=\"L1188\"><a href=\"#L1188\">1188</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1189\"><a href=\"#L1189\">1189</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: an L{AmpBox}.</span></td></tr><tr><th id=\"L1190\"><a href=\"#L1190\">1190</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1191\"><a href=\"#L1191\">1191</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0_objectsToStrings<span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0cls<span class=\"o\">.</span>response<span class=\"p\">,</span>\u00a0cls<span class=\"o\">.</span>responseType<span class=\"p\">(),</span></td></tr><tr><th id=\"L1192\"><a href=\"#L1192\">1192</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1193\"><a href=\"#L1193\">1193</a></th><td>\u00a0 \u00a0 makeResponse <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>makeResponse<span class=\"p\">)</span></td></tr><tr><th id=\"L1194\"><a href=\"#L1194\">1194</a></th><td></td></tr><tr><th id=\"L1195\"><a href=\"#L1195\">1195</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">responder</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0methodfunc<span class=\"p\">):</span></td></tr><tr><th id=\"L1196\"><a href=\"#L1196\">1196</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1197\"><a href=\"#L1197\">1197</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Declare a method to be a responder for a particular command.</span></td></tr><tr><th id=\"L1198\"><a href=\"#L1198\">1198</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1199\"><a href=\"#L1199\">1199</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is a decorator.</span></td></tr><tr><th id=\"L1200\"><a href=\"#L1200\">1200</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1201\"><a href=\"#L1201\">1201</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Use like so::</span></td></tr><tr><th id=\"L1202\"><a href=\"#L1202\">1202</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1203\"><a href=\"#L1203\">1203</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class MyCommand(Command):</span></td></tr><tr><th id=\"L1204\"><a href=\"#L1204\">1204</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arguments = [('a', ...), ('b', ...)]</span></td></tr><tr><th id=\"L1205\"><a href=\"#L1205\">1205</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1206\"><a href=\"#L1206\">1206</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class MyProto(AMP):</span></td></tr><tr><th id=\"L1207\"><a href=\"#L1207\">1207</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 def myFunMethod(self, a, b):</span></td></tr><tr><th id=\"L1208\"><a href=\"#L1208\">1208</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ...</span></td></tr><tr><th id=\"L1209\"><a href=\"#L1209\">1209</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MyCommand.responder(myFunMethod)</span></td></tr><tr><th id=\"L1210\"><a href=\"#L1210\">1210</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1211\"><a href=\"#L1211\">1211</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Notes: Although decorator syntax is not used within Twisted, this</span></td></tr><tr><th id=\"L1212\"><a href=\"#L1212\">1212</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 function returns its argument and is therefore safe to use with</span></td></tr><tr><th id=\"L1213\"><a href=\"#L1213\">1213</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 decorator syntax.</span></td></tr><tr><th id=\"L1214\"><a href=\"#L1214\">1214</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1215\"><a href=\"#L1215\">1215</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is not thread safe.\u00a0 Don't declare AMP subclasses in other</span></td></tr><tr><th id=\"L1216\"><a href=\"#L1216\">1216</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 threads.\u00a0 Don't declare responders outside the scope of AMP subclasses;</span></td></tr><tr><th id=\"L1217\"><a href=\"#L1217\">1217</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the behavior is undefined.</span></td></tr><tr><th id=\"L1218\"><a href=\"#L1218\">1218</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1219\"><a href=\"#L1219\">1219</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param methodfunc: A function which will later become a method, which</span></td></tr><tr><th id=\"L1220\"><a href=\"#L1220\">1220</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 has a keyword signature compatible with this command's L{argument} list</span></td></tr><tr><th id=\"L1221\"><a href=\"#L1221\">1221</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 and returns a dictionary with a set of keys compatible with this</span></td></tr><tr><th id=\"L1222\"><a href=\"#L1222\">1222</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 command's L{response} list.</span></td></tr><tr><th id=\"L1223\"><a href=\"#L1223\">1223</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1224\"><a href=\"#L1224\">1224</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: the methodfunc parameter.</span></td></tr><tr><th id=\"L1225\"><a href=\"#L1225\">1225</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1226\"><a href=\"#L1226\">1226</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 _RESPONDER_METACLASS_HELPER<span class=\"o\">.</span>append<span class=\"p\">((</span>cls<span class=\"p\">,</span>\u00a0methodfunc<span class=\"p\">))</span></td></tr><tr><th id=\"L1227\"><a href=\"#L1227\">1227</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0methodfunc</td></tr><tr><th id=\"L1228\"><a href=\"#L1228\">1228</a></th><td>\u00a0 \u00a0 responder <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>responder<span class=\"p\">)</span></td></tr><tr><th id=\"L1229\"><a href=\"#L1229\">1229</a></th><td></td></tr><tr><th id=\"L1230\"><a href=\"#L1230\">1230</a></th><td></td></tr><tr><th id=\"L1231\"><a href=\"#L1231\">1231</a></th><td>\u00a0 \u00a0 <span class=\"c\"># Our only instance method</span></td></tr><tr><th id=\"L1232\"><a href=\"#L1232\">1232</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_doCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1233\"><a href=\"#L1233\">1233</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1234\"><a href=\"#L1234\">1234</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Encode and send this Command to the given protocol.</span></td></tr><tr><th id=\"L1235\"><a href=\"#L1235\">1235</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1236\"><a href=\"#L1236\">1236</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param proto: an AMP, representing the connection to send to.</span></td></tr><tr><th id=\"L1237\"><a href=\"#L1237\">1237</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1238\"><a href=\"#L1238\">1238</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which will fire or error appropriately when the</span></td></tr><tr><th id=\"L1239\"><a href=\"#L1239\">1239</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 other side responds to the command (or error if the connection is lost</span></td></tr><tr><th id=\"L1240\"><a href=\"#L1240\">1240</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 before it is responded to).</span></td></tr><tr><th id=\"L1241\"><a href=\"#L1241\">1241</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1242\"><a href=\"#L1242\">1242</a></th><td></td></tr><tr><th id=\"L1243\"><a href=\"#L1243\">1243</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_massageError</span><span class=\"p\">(</span>error<span class=\"p\">):</span></td></tr><tr><th id=\"L1244\"><a href=\"#L1244\">1244</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 error<span class=\"o\">.</span>trap<span class=\"p\">(</span>RemoteAmpError<span class=\"p\">)</span></td></tr><tr><th id=\"L1245\"><a href=\"#L1245\">1245</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rje <span class=\"o\">=</span>\u00a0error<span class=\"o\">.</span>value</td></tr><tr><th id=\"L1246\"><a href=\"#L1246\">1246</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errorType <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>reverseErrors<span class=\"o\">.</span>get<span class=\"p\">(</span>rje<span class=\"o\">.</span>errorCode<span class=\"p\">,</span></td></tr><tr><th id=\"L1247\"><a href=\"#L1247\">1247</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0UnknownRemoteError<span class=\"p\">)</span></td></tr><tr><th id=\"L1248\"><a href=\"#L1248\">1248</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Failure<span class=\"p\">(</span>errorType<span class=\"p\">(</span>rje<span class=\"o\">.</span>description<span class=\"p\">))</span></td></tr><tr><th id=\"L1249\"><a href=\"#L1249\">1249</a></th><td></td></tr><tr><th id=\"L1250\"><a href=\"#L1250\">1250</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0proto<span class=\"o\">.</span>_sendBoxCommand<span class=\"p\">(</span></td></tr><tr><th id=\"L1251\"><a href=\"#L1251\">1251</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>commandName<span class=\"p\">,</span>\u00a0_objectsToStrings<span class=\"p\">(</span></td></tr><tr><th id=\"L1252\"><a href=\"#L1252\">1252</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>structured<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>arguments<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>commandType<span class=\"p\">(),</span>\u00a0proto<span class=\"p\">),</span></td></tr><tr><th id=\"L1253\"><a href=\"#L1253\">1253</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>requiresAnswer<span class=\"p\">)</span></td></tr><tr><th id=\"L1254\"><a href=\"#L1254\">1254</a></th><td></td></tr><tr><th id=\"L1255\"><a href=\"#L1255\">1255</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>requiresAnswer<span class=\"p\">:</span></td></tr><tr><th id=\"L1256\"><a href=\"#L1256\">1256</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>addCallback<span class=\"p\">(</span>_stringsToObjects<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>response<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1257\"><a href=\"#L1257\">1257</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>addErrback<span class=\"p\">(</span>_massageError<span class=\"p\">)</span></td></tr><tr><th id=\"L1258\"><a href=\"#L1258\">1258</a></th><td></td></tr><tr><th id=\"L1259\"><a href=\"#L1259\">1259</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L1260\"><a href=\"#L1260\">1260</a></th><td></td></tr><tr><th id=\"L1261\"><a href=\"#L1261\">1261</a></th><td></td></tr><tr><th id=\"L1262\"><a href=\"#L1262\">1262</a></th><td></td></tr><tr><th id=\"L1263\"><a href=\"#L1263\">1263</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_NoCertificate</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1264\"><a href=\"#L1264\">1264</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1265\"><a href=\"#L1265\">1265</a></th><td><span class=\"sd\">\u00a0 \u00a0 This is for peers which don't want to use a local certificate.\u00a0 Used by</span></td></tr><tr><th id=\"L1266\"><a href=\"#L1266\">1266</a></th><td><span class=\"sd\">\u00a0 \u00a0 AMP because AMP's internal language is all about certificates and this</span></td></tr><tr><th id=\"L1267\"><a href=\"#L1267\">1267</a></th><td><span class=\"sd\">\u00a0 \u00a0 duck-types in the appropriate place; this API isn't really stable though,</span></td></tr><tr><th id=\"L1268\"><a href=\"#L1268\">1268</a></th><td><span class=\"sd\">\u00a0 \u00a0 so it's not exposed anywhere public.</span></td></tr><tr><th id=\"L1269\"><a href=\"#L1269\">1269</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1270\"><a href=\"#L1270\">1270</a></th><td><span class=\"sd\">\u00a0 \u00a0 For clients, it will use ephemeral DH keys, or whatever the default is for</span></td></tr><tr><th id=\"L1271\"><a href=\"#L1271\">1271</a></th><td><span class=\"sd\">\u00a0 \u00a0 certificate-less clients in OpenSSL.\u00a0 For servers, it will generate a</span></td></tr><tr><th id=\"L1272\"><a href=\"#L1272\">1272</a></th><td><span class=\"sd\">\u00a0 \u00a0 temporary self-signed certificate with garbage values in the DN and use</span></td></tr><tr><th id=\"L1273\"><a href=\"#L1273\">1273</a></th><td><span class=\"sd\">\u00a0 \u00a0 that.</span></td></tr><tr><th id=\"L1274\"><a href=\"#L1274\">1274</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1275\"><a href=\"#L1275\">1275</a></th><td></td></tr><tr><th id=\"L1276\"><a href=\"#L1276\">1276</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0client<span class=\"p\">):</span></td></tr><tr><th id=\"L1277\"><a href=\"#L1277\">1277</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1278\"><a href=\"#L1278\">1278</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create a _NoCertificate which either is or isn't for the client side of</span></td></tr><tr><th id=\"L1279\"><a href=\"#L1279\">1279</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the connection.</span></td></tr><tr><th id=\"L1280\"><a href=\"#L1280\">1280</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1281\"><a href=\"#L1281\">1281</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param client: True if we are a client and should truly have no</span></td></tr><tr><th id=\"L1282\"><a href=\"#L1282\">1282</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 certificate and be anonymous, False if we are a server and actually</span></td></tr><tr><th id=\"L1283\"><a href=\"#L1283\">1283</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 have to generate a temporary certificate.</span></td></tr><tr><th id=\"L1284\"><a href=\"#L1284\">1284</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1285\"><a href=\"#L1285\">1285</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type client: bool</span></td></tr><tr><th id=\"L1286\"><a href=\"#L1286\">1286</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1287\"><a href=\"#L1287\">1287</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>client <span class=\"o\">=</span>\u00a0client</td></tr><tr><th id=\"L1288\"><a href=\"#L1288\">1288</a></th><td></td></tr><tr><th id=\"L1289\"><a href=\"#L1289\">1289</a></th><td></td></tr><tr><th id=\"L1290\"><a href=\"#L1290\">1290</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>authorities<span class=\"p\">):</span></td></tr><tr><th id=\"L1291\"><a href=\"#L1291\">1291</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1292\"><a href=\"#L1292\">1292</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Behaves like L{twisted.internet.ssl.PrivateCertificate.options}().</span></td></tr><tr><th id=\"L1293\"><a href=\"#L1293\">1293</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1294\"><a href=\"#L1294\">1294</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>client<span class=\"p\">:</span></td></tr><tr><th id=\"L1295\"><a href=\"#L1295\">1295</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># do some crud with sslverify to generate a temporary self-signed</span></td></tr><tr><th id=\"L1296\"><a href=\"#L1296\">1296</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># certificate.\u00a0 This is SLOOOWWWWW so it is only in the absolute</span></td></tr><tr><th id=\"L1297\"><a href=\"#L1297\">1297</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># worst, most naive case.</span></td></tr><tr><th id=\"L1298\"><a href=\"#L1298\">1298</a></th><td></td></tr><tr><th id=\"L1299\"><a href=\"#L1299\">1299</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># We have to do this because OpenSSL will not let both the server</span></td></tr><tr><th id=\"L1300\"><a href=\"#L1300\">1300</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># and client be anonymous.</span></td></tr><tr><th id=\"L1301\"><a href=\"#L1301\">1301</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sharedDN <span class=\"o\">=</span>\u00a0DN<span class=\"p\">(</span>CN<span class=\"o\">=</span><span class=\"s\">'TEMPORARY CERTIFICATE'</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1302\"><a href=\"#L1302\">1302</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key <span class=\"o\">=</span>\u00a0KeyPair<span class=\"o\">.</span>generate<span class=\"p\">()</span></td></tr><tr><th id=\"L1303\"><a href=\"#L1303\">1303</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cr <span class=\"o\">=</span>\u00a0key<span class=\"o\">.</span>certificateRequest<span class=\"p\">(</span>sharedDN<span class=\"p\">)</span></td></tr><tr><th id=\"L1304\"><a href=\"#L1304\">1304</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sscrd <span class=\"o\">=</span>\u00a0key<span class=\"o\">.</span>signCertificateRequest<span class=\"p\">(</span>sharedDN<span class=\"p\">,</span>\u00a0cr<span class=\"p\">,</span>\u00a0<span class=\"k\">lambda</span>\u00a0dn<span class=\"p\">:</span>\u00a0<span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0<span class=\"mi\">1</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1305\"><a href=\"#L1305\">1305</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cert <span class=\"o\">=</span>\u00a0key<span class=\"o\">.</span>newCertificate<span class=\"p\">(</span>sscrd<span class=\"p\">)</span></td></tr><tr><th id=\"L1306\"><a href=\"#L1306\">1306</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0cert<span class=\"o\">.</span>options<span class=\"p\">(</span><span class=\"o\">*</span>authorities<span class=\"p\">)</span></td></tr><tr><th id=\"L1307\"><a href=\"#L1307\">1307</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 options <span class=\"o\">=</span>\u00a0<span class=\"nb\">dict</span><span class=\"p\">()</span></td></tr><tr><th id=\"L1308\"><a href=\"#L1308\">1308</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0authorities<span class=\"p\">:</span></td></tr><tr><th id=\"L1309\"><a href=\"#L1309\">1309</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 options<span class=\"o\">.</span>update<span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span>verify<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1310\"><a href=\"#L1310\">1310</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requireCertificate<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1311\"><a href=\"#L1311\">1311</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 caCerts<span class=\"o\">=</span><span class=\"p\">[</span>auth<span class=\"o\">.</span>original <span class=\"k\">for</span>\u00a0auth <span class=\"ow\">in</span>\u00a0authorities<span class=\"p\">]))</span></td></tr><tr><th id=\"L1312\"><a href=\"#L1312\">1312</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 occo <span class=\"o\">=</span>\u00a0CertificateOptions<span class=\"p\">(</span><span class=\"o\">**</span>options<span class=\"p\">)</span></td></tr><tr><th id=\"L1313\"><a href=\"#L1313\">1313</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0occo</td></tr><tr><th id=\"L1314\"><a href=\"#L1314\">1314</a></th><td></td></tr><tr><th id=\"L1315\"><a href=\"#L1315\">1315</a></th><td></td></tr><tr><th id=\"L1316\"><a href=\"#L1316\">1316</a></th><td></td></tr><tr><th id=\"L1317\"><a href=\"#L1317\">1317</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_TLSBox</span><span class=\"p\">(</span>AmpBox<span class=\"p\">):</span></td></tr><tr><th id=\"L1318\"><a href=\"#L1318\">1318</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1319\"><a href=\"#L1319\">1319</a></th><td><span class=\"sd\">\u00a0 \u00a0 I am an AmpBox that, upon being sent, initiates a TLS connection.</span></td></tr><tr><th id=\"L1320\"><a href=\"#L1320\">1320</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1321\"><a href=\"#L1321\">1321</a></th><td>\u00a0 \u00a0 __slots__ <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1322\"><a href=\"#L1322\">1322</a></th><td></td></tr><tr><th id=\"L1323\"><a href=\"#L1323\">1323</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_keyprop</span><span class=\"p\">(</span>k<span class=\"p\">,</span>\u00a0default<span class=\"p\">):</span></td></tr><tr><th id=\"L1324\"><a href=\"#L1324\">1324</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"k\">lambda</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">:</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>get<span class=\"p\">(</span>k<span class=\"p\">,</span>\u00a0default<span class=\"p\">))</span></td></tr><tr><th id=\"L1325\"><a href=\"#L1325\">1325</a></th><td></td></tr><tr><th id=\"L1326\"><a href=\"#L1326\">1326</a></th><td></td></tr><tr><th id=\"L1327\"><a href=\"#L1327\">1327</a></th><td>\u00a0 \u00a0 <span class=\"c\"># These properties are described in startTLS</span></td></tr><tr><th id=\"L1328\"><a href=\"#L1328\">1328</a></th><td>\u00a0 \u00a0 certificate <span class=\"o\">=</span>\u00a0_keyprop<span class=\"p\">(</span><span class=\"s\">'tls_localCertificate'</span><span class=\"p\">,</span>\u00a0_NoCertificate<span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">))</span></td></tr><tr><th id=\"L1329\"><a href=\"#L1329\">1329</a></th><td>\u00a0 \u00a0 verify <span class=\"o\">=</span>\u00a0_keyprop<span class=\"p\">(</span><span class=\"s\">'tls_verifyAuthorities'</span><span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1330\"><a href=\"#L1330\">1330</a></th><td></td></tr><tr><th id=\"L1331\"><a href=\"#L1331\">1331</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1332\"><a href=\"#L1332\">1332</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1333\"><a href=\"#L1333\">1333</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Send my encoded value to the protocol, then initiate TLS.</span></td></tr><tr><th id=\"L1334\"><a href=\"#L1334\">1334</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1335\"><a href=\"#L1335\">1335</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 ab <span class=\"o\">=</span>\u00a0AmpBox<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1336\"><a href=\"#L1336\">1336</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0k <span class=\"ow\">in</span>\u00a0<span class=\"p\">[</span><span class=\"s\">'tls_localCertificate'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1337\"><a href=\"#L1337\">1337</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">'tls_verifyAuthorities'</span><span class=\"p\">]:</span></td></tr><tr><th id=\"L1338\"><a href=\"#L1338\">1338</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ab<span class=\"o\">.</span>pop<span class=\"p\">(</span>k<span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1339\"><a href=\"#L1339\">1339</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 ab<span class=\"o\">.</span>_sendTo<span class=\"p\">(</span>proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1340\"><a href=\"#L1340\">1340</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_startTLS<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>certificate<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>verify<span class=\"p\">)</span></td></tr><tr><th id=\"L1341\"><a href=\"#L1341\">1341</a></th><td></td></tr><tr><th id=\"L1342\"><a href=\"#L1342\">1342</a></th><td></td></tr><tr><th id=\"L1343\"><a href=\"#L1343\">1343</a></th><td></td></tr><tr><th id=\"L1344\"><a href=\"#L1344\">1344</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_LocalArgument</span><span class=\"p\">(</span>String<span class=\"p\">):</span></td></tr><tr><th id=\"L1345\"><a href=\"#L1345\">1345</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1346\"><a href=\"#L1346\">1346</a></th><td><span class=\"sd\">\u00a0 \u00a0 Local arguments are never actually relayed across the wire.\u00a0 This is just a</span></td></tr><tr><th id=\"L1347\"><a href=\"#L1347\">1347</a></th><td><span class=\"sd\">\u00a0 \u00a0 shim so that StartTLS can pretend to have some arguments: if arguments</span></td></tr><tr><th id=\"L1348\"><a href=\"#L1348\">1348</a></th><td><span class=\"sd\">\u00a0 \u00a0 acquire documentation properties, replace this with something nicer later.</span></td></tr><tr><th id=\"L1349\"><a href=\"#L1349\">1349</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1350\"><a href=\"#L1350\">1350</a></th><td></td></tr><tr><th id=\"L1351\"><a href=\"#L1351\">1351</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">fromBox</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0strings<span class=\"p\">,</span>\u00a0objects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1352\"><a href=\"#L1352\">1352</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L1353\"><a href=\"#L1353\">1353</a></th><td></td></tr><tr><th id=\"L1354\"><a href=\"#L1354\">1354</a></th><td></td></tr><tr><th id=\"L1355\"><a href=\"#L1355\">1355</a></th><td></td></tr><tr><th id=\"L1356\"><a href=\"#L1356\">1356</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">StartTLS</span><span class=\"p\">(</span>Command<span class=\"p\">):</span></td></tr><tr><th id=\"L1357\"><a href=\"#L1357\">1357</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1358\"><a href=\"#L1358\">1358</a></th><td><span class=\"sd\">\u00a0 \u00a0 Use, or subclass, me to implement a command that starts TLS.</span></td></tr><tr><th id=\"L1359\"><a href=\"#L1359\">1359</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1360\"><a href=\"#L1360\">1360</a></th><td><span class=\"sd\">\u00a0 \u00a0 Callers of StartTLS may pass several special arguments, which affect the</span></td></tr><tr><th id=\"L1361\"><a href=\"#L1361\">1361</a></th><td><span class=\"sd\">\u00a0 \u00a0 TLS negotiation:</span></td></tr><tr><th id=\"L1362\"><a href=\"#L1362\">1362</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1363\"><a href=\"#L1363\">1363</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 - tls_localCertificate: This is a</span></td></tr><tr><th id=\"L1364\"><a href=\"#L1364\">1364</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 twisted.internet.ssl.PrivateCertificate which will be used to secure</span></td></tr><tr><th id=\"L1365\"><a href=\"#L1365\">1365</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the side of the connection it is returned on.</span></td></tr><tr><th id=\"L1366\"><a href=\"#L1366\">1366</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1367\"><a href=\"#L1367\">1367</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 - tls_verifyAuthorities: This is a list of</span></td></tr><tr><th id=\"L1368\"><a href=\"#L1368\">1368</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 twisted.internet.ssl.Certificate objects that will be used as the</span></td></tr><tr><th id=\"L1369\"><a href=\"#L1369\">1369</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 certificate authorities to verify our peer's certificate.</span></td></tr><tr><th id=\"L1370\"><a href=\"#L1370\">1370</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1371\"><a href=\"#L1371\">1371</a></th><td><span class=\"sd\">\u00a0 \u00a0 Each of those special parameters may also be present as a key in the</span></td></tr><tr><th id=\"L1372\"><a href=\"#L1372\">1372</a></th><td><span class=\"sd\">\u00a0 \u00a0 response dictionary.</span></td></tr><tr><th id=\"L1373\"><a href=\"#L1373\">1373</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1374\"><a href=\"#L1374\">1374</a></th><td></td></tr><tr><th id=\"L1375\"><a href=\"#L1375\">1375</a></th><td>\u00a0 \u00a0 arguments <span class=\"o\">=</span>\u00a0<span class=\"p\">[(</span><span class=\"s\">\"tls_localCertificate\"</span><span class=\"p\">,</span>\u00a0_LocalArgument<span class=\"p\">(</span>optional<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)),</span></td></tr><tr><th id=\"L1376\"><a href=\"#L1376\">1376</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"p\">(</span><span class=\"s\">\"tls_verifyAuthorities\"</span><span class=\"p\">,</span>\u00a0_LocalArgument<span class=\"p\">(</span>optional<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))]</span></td></tr><tr><th id=\"L1377\"><a href=\"#L1377\">1377</a></th><td></td></tr><tr><th id=\"L1378\"><a href=\"#L1378\">1378</a></th><td>\u00a0 \u00a0 response <span class=\"o\">=</span>\u00a0<span class=\"p\">[(</span><span class=\"s\">\"tls_localCertificate\"</span><span class=\"p\">,</span>\u00a0_LocalArgument<span class=\"p\">(</span>optional<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)),</span></td></tr><tr><th id=\"L1379\"><a href=\"#L1379\">1379</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">(</span><span class=\"s\">\"tls_verifyAuthorities\"</span><span class=\"p\">,</span>\u00a0_LocalArgument<span class=\"p\">(</span>optional<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))]</span></td></tr><tr><th id=\"L1380\"><a href=\"#L1380\">1380</a></th><td></td></tr><tr><th id=\"L1381\"><a href=\"#L1381\">1381</a></th><td>\u00a0 \u00a0 responseType <span class=\"o\">=</span>\u00a0_TLSBox</td></tr><tr><th id=\"L1382\"><a href=\"#L1382\">1382</a></th><td></td></tr><tr><th id=\"L1383\"><a href=\"#L1383\">1383</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L1384\"><a href=\"#L1384\">1384</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1385\"><a href=\"#L1385\">1385</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create a StartTLS command.\u00a0 (This is private.\u00a0 Use AMP.callRemote.)</span></td></tr><tr><th id=\"L1386\"><a href=\"#L1386\">1386</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1387\"><a href=\"#L1387\">1387</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param tls_localCertificate: the PrivateCertificate object to use to</span></td></tr><tr><th id=\"L1388\"><a href=\"#L1388\">1388</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 secure the connection.\u00a0 If it's None, or unspecified, an ephemeral DH</span></td></tr><tr><th id=\"L1389\"><a href=\"#L1389\">1389</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 key is used instead.</span></td></tr><tr><th id=\"L1390\"><a href=\"#L1390\">1390</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1391\"><a href=\"#L1391\">1391</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param tls_verifyAuthorities: a list of Certificate objects which</span></td></tr><tr><th id=\"L1392\"><a href=\"#L1392\">1392</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 represent root certificates to verify our peer with.</span></td></tr><tr><th id=\"L1393\"><a href=\"#L1393\">1393</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1394\"><a href=\"#L1394\">1394</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>certificate <span class=\"o\">=</span>\u00a0kw<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"s\">'tls_localCertificate'</span><span class=\"p\">,</span>\u00a0_NoCertificate<span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">))</span></td></tr><tr><th id=\"L1395\"><a href=\"#L1395\">1395</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>authorities <span class=\"o\">=</span>\u00a0kw<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"s\">'tls_verifyAuthorities'</span><span class=\"p\">,</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1396\"><a href=\"#L1396\">1396</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 Command<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L1397\"><a href=\"#L1397\">1397</a></th><td></td></tr><tr><th id=\"L1398\"><a href=\"#L1398\">1398</a></th><td></td></tr><tr><th id=\"L1399\"><a href=\"#L1399\">1399</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_doCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1400\"><a href=\"#L1400\">1400</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1401\"><a href=\"#L1401\">1401</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 When a StartTLS command is sent, prepare to start TLS, but don't actually</span></td></tr><tr><th id=\"L1402\"><a href=\"#L1402\">1402</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 do it; wait for the acknowledgement, then initiate the TLS handshake.</span></td></tr><tr><th id=\"L1403\"><a href=\"#L1403\">1403</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1404\"><a href=\"#L1404\">1404</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Command<span class=\"o\">.</span>_doCommand<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1405\"><a href=\"#L1405\">1405</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_prepareTLS<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>certificate<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>authorities<span class=\"p\">)</span></td></tr><tr><th id=\"L1406\"><a href=\"#L1406\">1406</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX before we get back to user code we are going to start TLS...</span></td></tr><tr><th id=\"L1407\"><a href=\"#L1407\">1407</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">actuallystart</span><span class=\"p\">(</span>response<span class=\"p\">):</span></td></tr><tr><th id=\"L1408\"><a href=\"#L1408\">1408</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_startTLS<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>certificate<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>authorities<span class=\"p\">)</span></td></tr><tr><th id=\"L1409\"><a href=\"#L1409\">1409</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0response</td></tr><tr><th id=\"L1410\"><a href=\"#L1410\">1410</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>addCallback<span class=\"p\">(</span>actuallystart<span class=\"p\">)</span></td></tr><tr><th id=\"L1411\"><a href=\"#L1411\">1411</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L1412\"><a href=\"#L1412\">1412</a></th><td></td></tr><tr><th id=\"L1413\"><a href=\"#L1413\">1413</a></th><td></td></tr><tr><th id=\"L1414\"><a href=\"#L1414\">1414</a></th><td></td></tr><tr><th id=\"L1415\"><a href=\"#L1415\">1415</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">ProtocolSwitchCommand</span><span class=\"p\">(</span>Command<span class=\"p\">):</span></td></tr><tr><th id=\"L1416\"><a href=\"#L1416\">1416</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1417\"><a href=\"#L1417\">1417</a></th><td><span class=\"sd\">\u00a0 \u00a0 Use this command to switch from something Amp-derived to a different</span></td></tr><tr><th id=\"L1418\"><a href=\"#L1418\">1418</a></th><td><span class=\"sd\">\u00a0 \u00a0 protocol mid-connection.\u00a0 This can be useful to use amp as the</span></td></tr><tr><th id=\"L1419\"><a href=\"#L1419\">1419</a></th><td><span class=\"sd\">\u00a0 \u00a0 connection-startup negotiation phase.\u00a0 Since TLS is a different layer</span></td></tr><tr><th id=\"L1420\"><a href=\"#L1420\">1420</a></th><td><span class=\"sd\">\u00a0 \u00a0 entirely, you can use Amp to negotiate the security parameters of your</span></td></tr><tr><th id=\"L1421\"><a href=\"#L1421\">1421</a></th><td><span class=\"sd\">\u00a0 \u00a0 connection, then switch to a different protocol, and the connection will</span></td></tr><tr><th id=\"L1422\"><a href=\"#L1422\">1422</a></th><td><span class=\"sd\">\u00a0 \u00a0 remain secured.</span></td></tr><tr><th id=\"L1423\"><a href=\"#L1423\">1423</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1424\"><a href=\"#L1424\">1424</a></th><td></td></tr><tr><th id=\"L1425\"><a href=\"#L1425\">1425</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0_protoToSwitchToFactory<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L1426\"><a href=\"#L1426\">1426</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1427\"><a href=\"#L1427\">1427</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Create a ProtocolSwitchCommand.</span></td></tr><tr><th id=\"L1428\"><a href=\"#L1428\">1428</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1429\"><a href=\"#L1429\">1429</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param _protoToSwitchToFactory: a ProtocolFactory which will generate</span></td></tr><tr><th id=\"L1430\"><a href=\"#L1430\">1430</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the Protocol to switch to.</span></td></tr><tr><th id=\"L1431\"><a href=\"#L1431\">1431</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1432\"><a href=\"#L1432\">1432</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param kw: Keyword arguments, encoded and handled normally as</span></td></tr><tr><th id=\"L1433\"><a href=\"#L1433\">1433</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 L{Command} would.</span></td></tr><tr><th id=\"L1434\"><a href=\"#L1434\">1434</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1435\"><a href=\"#L1435\">1435</a></th><td></td></tr><tr><th id=\"L1436\"><a href=\"#L1436\">1436</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>protoToSwitchToFactory <span class=\"o\">=</span>\u00a0_protoToSwitchToFactory</td></tr><tr><th id=\"L1437\"><a href=\"#L1437\">1437</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"nb\">super</span><span class=\"p\">(</span>ProtocolSwitchCommand<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L1438\"><a href=\"#L1438\">1438</a></th><td></td></tr><tr><th id=\"L1439\"><a href=\"#L1439\">1439</a></th><td></td></tr><tr><th id=\"L1440\"><a href=\"#L1440\">1440</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">makeResponse</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0innerProto<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1441\"><a href=\"#L1441\">1441</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0_SwitchBox<span class=\"p\">(</span>innerProto<span class=\"p\">)</span></td></tr><tr><th id=\"L1442\"><a href=\"#L1442\">1442</a></th><td>\u00a0 \u00a0 makeResponse <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>makeResponse<span class=\"p\">)</span></td></tr><tr><th id=\"L1443\"><a href=\"#L1443\">1443</a></th><td></td></tr><tr><th id=\"L1444\"><a href=\"#L1444\">1444</a></th><td></td></tr><tr><th id=\"L1445\"><a href=\"#L1445\">1445</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_doCommand</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1446\"><a href=\"#L1446\">1446</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1447\"><a href=\"#L1447\">1447</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 When we emit a ProtocolSwitchCommand, lock the protocol, but don't actually</span></td></tr><tr><th id=\"L1448\"><a href=\"#L1448\">1448</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 switch to the new protocol unless an acknowledgement is received.\u00a0 If</span></td></tr><tr><th id=\"L1449\"><a href=\"#L1449\">1449</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 an error is received, switch back.</span></td></tr><tr><th id=\"L1450\"><a href=\"#L1450\">1450</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1451\"><a href=\"#L1451\">1451</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0<span class=\"nb\">super</span><span class=\"p\">(</span>ProtocolSwitchCommand<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span>_doCommand<span class=\"p\">(</span>proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1452\"><a href=\"#L1452\">1452</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_lock<span class=\"p\">()</span></td></tr><tr><th id=\"L1453\"><a href=\"#L1453\">1453</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">switchNow</span><span class=\"p\">(</span>ign<span class=\"p\">):</span></td></tr><tr><th id=\"L1454\"><a href=\"#L1454\">1454</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 innerProto <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>protoToSwitchToFactory<span class=\"o\">.</span>buildProtocol<span class=\"p\">(</span></td></tr><tr><th id=\"L1455\"><a href=\"#L1455\">1455</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>transport<span class=\"o\">.</span>getPeer<span class=\"p\">())</span></td></tr><tr><th id=\"L1456\"><a href=\"#L1456\">1456</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_switchTo<span class=\"p\">(</span>innerProto<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>protoToSwitchToFactory<span class=\"p\">)</span></td></tr><tr><th id=\"L1457\"><a href=\"#L1457\">1457</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0ign</td></tr><tr><th id=\"L1458\"><a href=\"#L1458\">1458</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">handle</span><span class=\"p\">(</span>ign<span class=\"p\">):</span></td></tr><tr><th id=\"L1459\"><a href=\"#L1459\">1459</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 proto<span class=\"o\">.</span>_locked <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L1460\"><a href=\"#L1460\">1460</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>protoToSwitchToFactory<span class=\"o\">.</span>clientConnectionFailed<span class=\"p\">(</span></td></tr><tr><th id=\"L1461\"><a href=\"#L1461\">1461</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0Failure<span class=\"p\">(</span>CONNECTION_LOST<span class=\"p\">))</span></td></tr><tr><th id=\"L1462\"><a href=\"#L1462\">1462</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0ign</td></tr><tr><th id=\"L1463\"><a href=\"#L1463\">1463</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d<span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span>switchNow<span class=\"p\">,</span>\u00a0handle<span class=\"p\">)</span></td></tr><tr><th id=\"L1464\"><a href=\"#L1464\">1464</a></th><td></td></tr><tr><th id=\"L1465\"><a href=\"#L1465\">1465</a></th><td></td></tr><tr><th id=\"L1466\"><a href=\"#L1466\">1466</a></th><td></td></tr><tr><th id=\"L1467\"><a href=\"#L1467\">1467</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">AMP</span><span class=\"p\">(</span>StatefulStringProtocol<span class=\"p\">,</span>\u00a0Int16StringReceiver<span class=\"p\">,</span></td></tr><tr><th id=\"L1468\"><a href=\"#L1468\">1468</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _AmpParserBase<span class=\"p\">):</span></td></tr><tr><th id=\"L1469\"><a href=\"#L1469\">1469</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1470\"><a href=\"#L1470\">1470</a></th><td><span class=\"sd\">\u00a0 \u00a0 This protocol is an AMP connection.\u00a0 See the module docstring for protocol</span></td></tr><tr><th id=\"L1471\"><a href=\"#L1471\">1471</a></th><td><span class=\"sd\">\u00a0 \u00a0 details.</span></td></tr><tr><th id=\"L1472\"><a href=\"#L1472\">1472</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1473\"><a href=\"#L1473\">1473</a></th><td></td></tr><tr><th id=\"L1474\"><a href=\"#L1474\">1474</a></th><td>\u00a0 \u00a0 <span class=\"k\">class</span>\u00a0<span class=\"nc\">__metaclass__</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1475\"><a href=\"#L1475\">1475</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1476\"><a href=\"#L1476\">1476</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Metaclass hack to record decorators.</span></td></tr><tr><th id=\"L1477\"><a href=\"#L1477\">1477</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1478\"><a href=\"#L1478\">1478</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__new__</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0bases<span class=\"p\">,</span>\u00a0attrs<span class=\"p\">):</span></td></tr><tr><th id=\"L1479\"><a href=\"#L1479\">1479</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rmh <span class=\"o\">=</span>\u00a0_RESPONDER_METACLASS_HELPER<span class=\"p\">[:]</span></td></tr><tr><th id=\"L1480\"><a href=\"#L1480\">1480</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _RESPONDER_METACLASS_HELPER<span class=\"p\">[:]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1481\"><a href=\"#L1481\">1481</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cd <span class=\"o\">=</span>\u00a0attrs<span class=\"p\">[</span><span class=\"s\">'_commandDispatch'</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1482\"><a href=\"#L1482\">1482</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0base <span class=\"ow\">in</span>\u00a0bases<span class=\"p\">:</span></td></tr><tr><th id=\"L1483\"><a href=\"#L1483\">1483</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cls<span class=\"o\">.</span>_grabFromBase<span class=\"p\">(</span>cd<span class=\"p\">,</span>\u00a0base<span class=\"p\">)</span></td></tr><tr><th id=\"L1484\"><a href=\"#L1484\">1484</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0commandClass<span class=\"p\">,</span>\u00a0responderFunc <span class=\"ow\">in</span>\u00a0rmh<span class=\"p\">:</span></td></tr><tr><th id=\"L1485\"><a href=\"#L1485\">1485</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cd<span class=\"p\">[</span>commandClass<span class=\"o\">.</span>commandName<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">(</span>commandClass<span class=\"p\">,</span>\u00a0responderFunc<span class=\"p\">)</span></td></tr><tr><th id=\"L1486\"><a href=\"#L1486\">1486</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">type</span><span class=\"o\">.</span>__new__<span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0name<span class=\"p\">,</span>\u00a0bases<span class=\"p\">,</span>\u00a0attrs<span class=\"p\">)</span></td></tr><tr><th id=\"L1487\"><a href=\"#L1487\">1487</a></th><td></td></tr><tr><th id=\"L1488\"><a href=\"#L1488\">1488</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_grabFromBase</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0cd<span class=\"p\">,</span>\u00a0base<span class=\"p\">):</span></td></tr><tr><th id=\"L1489\"><a href=\"#L1489\">1489</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">hasattr</span><span class=\"p\">(</span>base<span class=\"p\">,</span>\u00a0<span class=\"s\">\"_commandDispatch\"</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1490\"><a href=\"#L1490\">1490</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cd<span class=\"o\">.</span>update<span class=\"p\">(</span>base<span class=\"o\">.</span>_commandDispatch<span class=\"p\">)</span></td></tr><tr><th id=\"L1491\"><a href=\"#L1491\">1491</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0subbase <span class=\"ow\">in</span>\u00a0base<span class=\"o\">.</span>__bases__<span class=\"p\">:</span></td></tr><tr><th id=\"L1492\"><a href=\"#L1492\">1492</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cls<span class=\"o\">.</span>_grabFromBase<span class=\"p\">(</span>cd<span class=\"p\">,</span>\u00a0subbase<span class=\"p\">)</span></td></tr><tr><th id=\"L1493\"><a href=\"#L1493\">1493</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 _grabFromBase <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>_grabFromBase<span class=\"p\">)</span></td></tr><tr><th id=\"L1494\"><a href=\"#L1494\">1494</a></th><td></td></tr><tr><th id=\"L1495\"><a href=\"#L1495\">1495</a></th><td>\u00a0 \u00a0 protocolName <span class=\"o\">=</span>\u00a0<span class=\"s\">'amp-base'</span></td></tr><tr><th id=\"L1496\"><a href=\"#L1496\">1496</a></th><td></td></tr><tr><th id=\"L1497\"><a href=\"#L1497\">1497</a></th><td>\u00a0 \u00a0 hostCertificate <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1498\"><a href=\"#L1498\">1498</a></th><td></td></tr><tr><th id=\"L1499\"><a href=\"#L1499\">1499</a></th><td></td></tr><tr><th id=\"L1500\"><a href=\"#L1500\">1500</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1501\"><a href=\"#L1501\">1501</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1502\"><a href=\"#L1502\">1502</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 A verbose string representation which gives us information about this AMP</span></td></tr><tr><th id=\"L1503\"><a href=\"#L1503\">1503</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 connection.</span></td></tr><tr><th id=\"L1504\"><a href=\"#L1504\">1504</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1505\"><a href=\"#L1505\">1505</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'&lt;</span><span class=\"si\">%s</span><span class=\"s\">\u00a0</span><span class=\"si\">%s</span><span class=\"s\">\u00a0at 0x</span><span class=\"si\">%x</span><span class=\"s\">&gt;'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L1506\"><a href=\"#L1506\">1506</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"o\">.</span>__name__<span class=\"p\">,</span></td></tr><tr><th id=\"L1507\"><a href=\"#L1507\">1507</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol<span class=\"p\">,</span>\u00a0<span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span></td></tr><tr><th id=\"L1508\"><a href=\"#L1508\">1508</a></th><td></td></tr><tr><th id=\"L1509\"><a href=\"#L1509\">1509</a></th><td>\u00a0 \u00a0 _locked <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L1510\"><a href=\"#L1510\">1510</a></th><td></td></tr><tr><th id=\"L1511\"><a href=\"#L1511\">1511</a></th><td></td></tr><tr><th id=\"L1512\"><a href=\"#L1512\">1512</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_lock</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1513\"><a href=\"#L1513\">1513</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1514\"><a href=\"#L1514\">1514</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Lock this Amp instance so that no further Amp traffic may be sent.</span></td></tr><tr><th id=\"L1515\"><a href=\"#L1515\">1515</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This is used when sending a request to switch underlying protocols.</span></td></tr><tr><th id=\"L1516\"><a href=\"#L1516\">1516</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 You probably want to subclass ProtocolSwitchCommand rather than calling</span></td></tr><tr><th id=\"L1517\"><a href=\"#L1517\">1517</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 this directly.</span></td></tr><tr><th id=\"L1518\"><a href=\"#L1518\">1518</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1519\"><a href=\"#L1519\">1519</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_locked <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L1520\"><a href=\"#L1520\">1520</a></th><td></td></tr><tr><th id=\"L1521\"><a href=\"#L1521\">1521</a></th><td>\u00a0 \u00a0 innerProtocol <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1522\"><a href=\"#L1522\">1522</a></th><td></td></tr><tr><th id=\"L1523\"><a href=\"#L1523\">1523</a></th><td></td></tr><tr><th id=\"L1524\"><a href=\"#L1524\">1524</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_switchTo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0newProto<span class=\"p\">,</span>\u00a0clientFactory<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1525\"><a href=\"#L1525\">1525</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1526\"><a href=\"#L1526\">1526</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Switch this Amp instance to a new protocol.\u00a0 You need to do this</span></td></tr><tr><th id=\"L1527\"><a href=\"#L1527\">1527</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 'simultaneously' on both ends of a connection; the easiest way to do</span></td></tr><tr><th id=\"L1528\"><a href=\"#L1528\">1528</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 this is to use a subclass of ProtocolSwitchCommand.</span></td></tr><tr><th id=\"L1529\"><a href=\"#L1529\">1529</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1530\"><a href=\"#L1530\">1530</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param newProto: the new protocol instance.</span></td></tr><tr><th id=\"L1531\"><a href=\"#L1531\">1531</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1532\"><a href=\"#L1532\">1532</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param clientFactory: the ClientFactory to send notifications to.</span></td></tr><tr><th id=\"L1533\"><a href=\"#L1533\">1533</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1534\"><a href=\"#L1534\">1534</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_locked <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L1535\"><a href=\"#L1535\">1535</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0\\</td></tr><tr><th id=\"L1536\"><a href=\"#L1536\">1536</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Protocol can only be safely switched once.\"</span></td></tr><tr><th id=\"L1537\"><a href=\"#L1537\">1537</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># All the data that Int16Receiver has not yet dealt with belongs to our</span></td></tr><tr><th id=\"L1538\"><a href=\"#L1538\">1538</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># new protocol: luckily it's keeping that in a handy (although</span></td></tr><tr><th id=\"L1539\"><a href=\"#L1539\">1539</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># ostensibly internal) variable for us:</span></td></tr><tr><th id=\"L1540\"><a href=\"#L1540\">1540</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newProtoData <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>recvd</td></tr><tr><th id=\"L1541\"><a href=\"#L1541\">1541</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>recvd <span class=\"o\">=</span>\u00a0<span class=\"s\">''</span>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"c\"># We're quite possibly in the middle of a</span></td></tr><tr><th id=\"L1542\"><a href=\"#L1542\">1542</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># 'dataReceived' loop in Int16StringReceiver:</span></td></tr><tr><th id=\"L1543\"><a href=\"#L1543\">1543</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># let's make sure that the next iteration, the</span></td></tr><tr><th id=\"L1544\"><a href=\"#L1544\">1544</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># loop will break and not attempt to look at</span></td></tr><tr><th id=\"L1545\"><a href=\"#L1545\">1545</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># something that isn't a length prefix.</span></td></tr><tr><th id=\"L1546\"><a href=\"#L1546\">1546</a></th><td></td></tr><tr><th id=\"L1547\"><a href=\"#L1547\">1547</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol <span class=\"o\">=</span>\u00a0newProto</td></tr><tr><th id=\"L1548\"><a href=\"#L1548\">1548</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocolClientFactory <span class=\"o\">=</span>\u00a0clientFactory</td></tr><tr><th id=\"L1549\"><a href=\"#L1549\">1549</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newProto<span class=\"o\">.</span>makeConnection<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"p\">)</span></td></tr><tr><th id=\"L1550\"><a href=\"#L1550\">1550</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 newProto<span class=\"o\">.</span>dataReceived<span class=\"p\">(</span>newProtoData<span class=\"p\">)</span></td></tr><tr><th id=\"L1551\"><a href=\"#L1551\">1551</a></th><td>\u00a0 \u00a0 innerProtocolClientFactory <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1552\"><a href=\"#L1552\">1552</a></th><td></td></tr><tr><th id=\"L1553\"><a href=\"#L1553\">1553</a></th><td></td></tr><tr><th id=\"L1554\"><a href=\"#L1554\">1554</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_sendBox</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0completeBox<span class=\"p\">):</span></td></tr><tr><th id=\"L1555\"><a href=\"#L1555\">1555</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1556\"><a href=\"#L1556\">1556</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Send a amp.Box to my peer.</span></td></tr><tr><th id=\"L1557\"><a href=\"#L1557\">1557</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1558\"><a href=\"#L1558\">1558</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Note: transport.write is never called outside of this method.</span></td></tr><tr><th id=\"L1559\"><a href=\"#L1559\">1559</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1560\"><a href=\"#L1560\">1560</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param completeBox: an AmpBox.</span></td></tr><tr><th id=\"L1561\"><a href=\"#L1561\">1561</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1562\"><a href=\"#L1562\">1562</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_locked <span class=\"c\"># this is taken care of everywhere a packet</span></td></tr><tr><th id=\"L1563\"><a href=\"#L1563\">1563</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># might be emitted.</span></td></tr><tr><th id=\"L1564\"><a href=\"#L1564\">1564</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_startingTLSBuffer <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1565\"><a href=\"#L1565\">1565</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_startingTLSBuffer<span class=\"o\">.</span>append<span class=\"p\">(</span>completeBox<span class=\"p\">)</span></td></tr><tr><th id=\"L1566\"><a href=\"#L1566\">1566</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1567\"><a href=\"#L1567\">1567</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"o\">.</span>write<span class=\"p\">(</span>completeBox<span class=\"o\">.</span>serialize<span class=\"p\">())</span></td></tr><tr><th id=\"L1568\"><a href=\"#L1568\">1568</a></th><td></td></tr><tr><th id=\"L1569\"><a href=\"#L1569\">1569</a></th><td>\u00a0 \u00a0 _outstandingRequests <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1570\"><a href=\"#L1570\">1570</a></th><td>\u00a0 \u00a0 _justStartedTLS <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L1571\"><a href=\"#L1571\">1571</a></th><td></td></tr><tr><th id=\"L1572\"><a href=\"#L1572\">1572</a></th><td></td></tr><tr><th id=\"L1573\"><a href=\"#L1573\">1573</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">makeConnection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0transport<span class=\"p\">):</span></td></tr><tr><th id=\"L1574\"><a href=\"#L1574\">1574</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1575\"><a href=\"#L1575\">1575</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 When a connection is first established, AMP clients send a greeting but</span></td></tr><tr><th id=\"L1576\"><a href=\"#L1576\">1576</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 servers do not.</span></td></tr><tr><th id=\"L1577\"><a href=\"#L1577\">1577</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1578\"><a href=\"#L1578\">1578</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_transportPeer <span class=\"o\">=</span>\u00a0transport<span class=\"o\">.</span>getPeer<span class=\"p\">()</span></td></tr><tr><th id=\"L1579\"><a href=\"#L1579\">1579</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_transportHost <span class=\"o\">=</span>\u00a0transport<span class=\"o\">.</span>getHost<span class=\"p\">()</span></td></tr><tr><th id=\"L1580\"><a href=\"#L1580\">1580</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%s</span><span class=\"s\">\u00a0connection established (HOST:</span><span class=\"si\">%s</span><span class=\"s\">\u00a0PEER:</span><span class=\"si\">%s</span><span class=\"s\">)\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L1581\"><a href=\"#L1581\">1581</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"o\">.</span>__name__<span class=\"p\">,</span></td></tr><tr><th id=\"L1582\"><a href=\"#L1582\">1582</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_transportHost<span class=\"p\">,</span></td></tr><tr><th id=\"L1583\"><a href=\"#L1583\">1583</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_transportPeer<span class=\"p\">))</span></td></tr><tr><th id=\"L1584\"><a href=\"#L1584\">1584</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_outstandingRequests <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1585\"><a href=\"#L1585\">1585</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_requestBuffer <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1586\"><a href=\"#L1586\">1586</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_sslVerifyProblems <span class=\"o\">=</span>\u00a0<span class=\"p\">()</span></td></tr><tr><th id=\"L1587\"><a href=\"#L1587\">1587</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># ^ Later this will become a mutable list - we can't get the handle</span></td></tr><tr><th id=\"L1588\"><a href=\"#L1588\">1588</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># during connection shutdown thanks to the fact that Twisted destroys</span></td></tr><tr><th id=\"L1589\"><a href=\"#L1589\">1589</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the socket on our transport before notifying us of a lost connection</span></td></tr><tr><th id=\"L1590\"><a href=\"#L1590\">1590</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># (which I guess is reasonable - the socket is dead by then) See a few</span></td></tr><tr><th id=\"L1591\"><a href=\"#L1591\">1591</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># lines below in startTLS for details.\u00a0 --glyph</span></td></tr><tr><th id=\"L1592\"><a href=\"#L1592\">1592</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 Int16StringReceiver<span class=\"o\">.</span>makeConnection<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0transport<span class=\"p\">)</span></td></tr><tr><th id=\"L1593\"><a href=\"#L1593\">1593</a></th><td></td></tr><tr><th id=\"L1594\"><a href=\"#L1594\">1594</a></th><td>\u00a0 \u00a0 _startingTLSBuffer <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1595\"><a href=\"#L1595\">1595</a></th><td></td></tr><tr><th id=\"L1596\"><a href=\"#L1596\">1596</a></th><td>\u00a0 \u00a0 noPeerCertificate <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span>\u00a0 \u00a0<span class=\"c\"># for tests</span></td></tr><tr><th id=\"L1597\"><a href=\"#L1597\">1597</a></th><td></td></tr><tr><th id=\"L1598\"><a href=\"#L1598\">1598</a></th><td></td></tr><tr><th id=\"L1599\"><a href=\"#L1599\">1599</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_getPeerCertificate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1600\"><a href=\"#L1600\">1600</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>noPeerCertificate<span class=\"p\">:</span></td></tr><tr><th id=\"L1601\"><a href=\"#L1601\">1601</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1602\"><a href=\"#L1602\">1602</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Certificate<span class=\"o\">.</span>peerFromTransport<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"p\">)</span></td></tr><tr><th id=\"L1603\"><a href=\"#L1603\">1603</a></th><td>\u00a0 \u00a0 peerCertificate <span class=\"o\">=</span>\u00a0<span class=\"nb\">property</span><span class=\"p\">(</span>_getPeerCertificate<span class=\"p\">)</span></td></tr><tr><th id=\"L1604\"><a href=\"#L1604\">1604</a></th><td></td></tr><tr><th id=\"L1605\"><a href=\"#L1605\">1605</a></th><td></td></tr><tr><th id=\"L1606\"><a href=\"#L1606\">1606</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_prepareTLS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0certificate<span class=\"p\">,</span>\u00a0verifyAuthorities<span class=\"p\">):</span></td></tr><tr><th id=\"L1607\"><a href=\"#L1607\">1607</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1608\"><a href=\"#L1608\">1608</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Used by StartTLSCommand to put us into the state where we don't</span></td></tr><tr><th id=\"L1609\"><a href=\"#L1609\">1609</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 actually send things that get sent, instead we buffer them.\u00a0 see</span></td></tr><tr><th id=\"L1610\"><a href=\"#L1610\">1610</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 L{_sendBox}.</span></td></tr><tr><th id=\"L1611\"><a href=\"#L1611\">1611</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1612\"><a href=\"#L1612\">1612</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_startingTLSBuffer <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1613\"><a href=\"#L1613\">1613</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>hostCertificate <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1614\"><a href=\"#L1614\">1614</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0OnlyOneTLS<span class=\"p\">(</span></td></tr><tr><th id=\"L1615\"><a href=\"#L1615\">1615</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Previously authenticated connection between </span><span class=\"si\">%s</span><span class=\"s\">\u00a0and </span><span class=\"si\">%s</span><span class=\"s\">\u00a0\"</span></td></tr><tr><th id=\"L1616\"><a href=\"#L1616\">1616</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"is trying to re-establish as </span><span class=\"si\">%s</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L1617\"><a href=\"#L1617\">1617</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>hostCertificate<span class=\"p\">,</span></td></tr><tr><th id=\"L1618\"><a href=\"#L1618\">1618</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>peerCertificate<span class=\"p\">,</span></td></tr><tr><th id=\"L1619\"><a href=\"#L1619\">1619</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">(</span>certificate<span class=\"p\">,</span>\u00a0verifyAuthorities<span class=\"p\">)))</span></td></tr><tr><th id=\"L1620\"><a href=\"#L1620\">1620</a></th><td></td></tr><tr><th id=\"L1621\"><a href=\"#L1621\">1621</a></th><td></td></tr><tr><th id=\"L1622\"><a href=\"#L1622\">1622</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_startTLS</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0certificate<span class=\"p\">,</span>\u00a0verifyAuthorities<span class=\"p\">):</span></td></tr><tr><th id=\"L1623\"><a href=\"#L1623\">1623</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1624\"><a href=\"#L1624\">1624</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Used by TLSBox to initiate the SSL handshake.</span></td></tr><tr><th id=\"L1625\"><a href=\"#L1625\">1625</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1626\"><a href=\"#L1626\">1626</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param certificate: a L{twisted.internet.ssl.PrivateCertificate} for</span></td></tr><tr><th id=\"L1627\"><a href=\"#L1627\">1627</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 use locally.</span></td></tr><tr><th id=\"L1628\"><a href=\"#L1628\">1628</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1629\"><a href=\"#L1629\">1629</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param verifyAuthorities: L{twisted.internet.ssl.Certificate} instances</span></td></tr><tr><th id=\"L1630\"><a href=\"#L1630\">1630</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 representing certificate authorities which will verify our peer.</span></td></tr><tr><th id=\"L1631\"><a href=\"#L1631\">1631</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1632\"><a href=\"#L1632\">1632</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>hostCertificate <span class=\"o\">=</span>\u00a0certificate</td></tr><tr><th id=\"L1633\"><a href=\"#L1633\">1633</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_justStartedTLS <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L1634\"><a href=\"#L1634\">1634</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0verifyAuthorities <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1635\"><a href=\"#L1635\">1635</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verifyAuthorities <span class=\"o\">=</span>\u00a0<span class=\"p\">()</span></td></tr><tr><th id=\"L1636\"><a href=\"#L1636\">1636</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"o\">.</span>startTLS<span class=\"p\">(</span>certificate<span class=\"o\">.</span>options<span class=\"p\">(</span><span class=\"o\">*</span>verifyAuthorities<span class=\"p\">))</span></td></tr><tr><th id=\"L1637\"><a href=\"#L1637\">1637</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Remember that mutable list that we were just talking about?\u00a0 Here</span></td></tr><tr><th id=\"L1638\"><a href=\"#L1638\">1638</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># it is.\u00a0 sslverify.py takes care of populating this list as</span></td></tr><tr><th id=\"L1639\"><a href=\"#L1639\">1639</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># necessary. --glyph</span></td></tr><tr><th id=\"L1640\"><a href=\"#L1640\">1640</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_sslVerifyProblems <span class=\"o\">=</span>\u00a0problemsFromTransport<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>transport<span class=\"p\">)</span></td></tr><tr><th id=\"L1641\"><a href=\"#L1641\">1641</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 stlsb <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_startingTLSBuffer</td></tr><tr><th id=\"L1642\"><a href=\"#L1642\">1642</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0stlsb <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1643\"><a href=\"#L1643\">1643</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_startingTLSBuffer <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1644\"><a href=\"#L1644\">1644</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0box <span class=\"ow\">in</span>\u00a0stlsb<span class=\"p\">:</span></td></tr><tr><th id=\"L1645\"><a href=\"#L1645\">1645</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_sendBox<span class=\"p\">(</span>box<span class=\"p\">)</span></td></tr><tr><th id=\"L1646\"><a href=\"#L1646\">1646</a></th><td></td></tr><tr><th id=\"L1647\"><a href=\"#L1647\">1647</a></th><td></td></tr><tr><th id=\"L1648\"><a href=\"#L1648\">1648</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_defaultStartTLSResponder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1649\"><a href=\"#L1649\">1649</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1650\"><a href=\"#L1650\">1650</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The default TLS responder doesn't specify any certificate or anything.</span></td></tr><tr><th id=\"L1651\"><a href=\"#L1651\">1651</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1652\"><a href=\"#L1652\">1652</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 From a security perspective, it's little better than a plain-text</span></td></tr><tr><th id=\"L1653\"><a href=\"#L1653\">1653</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 connection - but it is still a *bit* better, so it's included for</span></td></tr><tr><th id=\"L1654\"><a href=\"#L1654\">1654</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 convenience.</span></td></tr><tr><th id=\"L1655\"><a href=\"#L1655\">1655</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1656\"><a href=\"#L1656\">1656</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 You probably want to override this by providing your own StartTLS.responder.</span></td></tr><tr><th id=\"L1657\"><a href=\"#L1657\">1657</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1658\"><a href=\"#L1658\">1658</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1659\"><a href=\"#L1659\">1659</a></th><td>\u00a0 \u00a0 StartTLS<span class=\"o\">.</span>responder<span class=\"p\">(</span>_defaultStartTLSResponder<span class=\"p\">)</span></td></tr><tr><th id=\"L1660\"><a href=\"#L1660\">1660</a></th><td></td></tr><tr><th id=\"L1661\"><a href=\"#L1661\">1661</a></th><td></td></tr><tr><th id=\"L1662\"><a href=\"#L1662\">1662</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">connectionLost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0reason<span class=\"p\">):</span></td></tr><tr><th id=\"L1663\"><a href=\"#L1663\">1663</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1664\"><a href=\"#L1664\">1664</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Terminate all outstanding request deferreds, and notify nested protocol</span></td></tr><tr><th id=\"L1665\"><a href=\"#L1665\">1665</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 that the connection has terminated.</span></td></tr><tr><th id=\"L1666\"><a href=\"#L1666\">1666</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1667\"><a href=\"#L1667\">1667</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%s</span><span class=\"s\">\u00a0connection lost (HOST:</span><span class=\"si\">%s</span><span class=\"s\">\u00a0PEER:</span><span class=\"si\">%s</span><span class=\"s\">)\"</span>\u00a0<span class=\"o\">%</span></td></tr><tr><th id=\"L1668\"><a href=\"#L1668\">1668</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"o\">.</span>__name__<span class=\"p\">,</span></td></tr><tr><th id=\"L1669\"><a href=\"#L1669\">1669</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_transportHost<span class=\"p\">,</span></td></tr><tr><th id=\"L1670\"><a href=\"#L1670\">1670</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_transportPeer<span class=\"p\">))</span></td></tr><tr><th id=\"L1671\"><a href=\"#L1671\">1671</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># XXX this may be a slight oversimplification, but I believe that if</span></td></tr><tr><th id=\"L1672\"><a href=\"#L1672\">1672</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># there are pending SSL errors, they _are_ the reason that the</span></td></tr><tr><th id=\"L1673\"><a href=\"#L1673\">1673</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># connection was lost.\u00a0 a totally correct implementation of this would</span></td></tr><tr><th id=\"L1674\"><a href=\"#L1674\">1674</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># set up a simple state machine to track whether any bytes were</span></td></tr><tr><th id=\"L1675\"><a href=\"#L1675\">1675</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># received after startTLS was called.\u00a0 --glyph</span></td></tr><tr><th id=\"L1676\"><a href=\"#L1676\">1676</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 problems <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_sslVerifyProblems</td></tr><tr><th id=\"L1677\"><a href=\"#L1677\">1677</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0problems<span class=\"p\">:</span></td></tr><tr><th id=\"L1678\"><a href=\"#L1678\">1678</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 failReason <span class=\"o\">=</span>\u00a0Failure<span class=\"p\">(</span>problems<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span></td></tr><tr><th id=\"L1679\"><a href=\"#L1679\">1679</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_justStartedTLS<span class=\"p\">:</span></td></tr><tr><th id=\"L1680\"><a href=\"#L1680\">1680</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># We just started TLS and haven't received any data.\u00a0 This means</span></td></tr><tr><th id=\"L1681\"><a href=\"#L1681\">1681</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the other connection didn't like our cert (although they may not</span></td></tr><tr><th id=\"L1682\"><a href=\"#L1682\">1682</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># have told us why - later Twisted should make 'reason' into a TLS</span></td></tr><tr><th id=\"L1683\"><a href=\"#L1683\">1683</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># error.)</span></td></tr><tr><th id=\"L1684\"><a href=\"#L1684\">1684</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 failReason <span class=\"o\">=</span>\u00a0PeerVerifyError<span class=\"p\">(</span></td></tr><tr><th id=\"L1685\"><a href=\"#L1685\">1685</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Peer rejected our certificate for an unknown reason.\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1686\"><a href=\"#L1686\">1686</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1687\"><a href=\"#L1687\">1687</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 failReason <span class=\"o\">=</span>\u00a0reason</td></tr><tr><th id=\"L1688\"><a href=\"#L1688\">1688</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>failAllOutgoing<span class=\"p\">(</span>failReason<span class=\"p\">)</span></td></tr><tr><th id=\"L1689\"><a href=\"#L1689\">1689</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1690\"><a href=\"#L1690\">1690</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol<span class=\"o\">.</span>connectionLost<span class=\"p\">(</span>reason<span class=\"p\">)</span></td></tr><tr><th id=\"L1691\"><a href=\"#L1691\">1691</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocolClientFactory <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1692\"><a href=\"#L1692\">1692</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocolClientFactory<span class=\"o\">.</span>clientConnectionLost<span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0reason<span class=\"p\">)</span></td></tr><tr><th id=\"L1693\"><a href=\"#L1693\">1693</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>transport <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1694\"><a href=\"#L1694\">1694</a></th><td></td></tr><tr><th id=\"L1695\"><a href=\"#L1695\">1695</a></th><td></td></tr><tr><th id=\"L1696\"><a href=\"#L1696\">1696</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">dataReceived</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0data<span class=\"p\">):</span></td></tr><tr><th id=\"L1697\"><a href=\"#L1697\">1697</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1698\"><a href=\"#L1698\">1698</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Either parse incoming data as AMP packets or relay it to our nested</span></td></tr><tr><th id=\"L1699\"><a href=\"#L1699\">1699</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 protocol.</span></td></tr><tr><th id=\"L1700\"><a href=\"#L1700\">1700</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1701\"><a href=\"#L1701\">1701</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># If we successfully receive any data after TLS has been started, that</span></td></tr><tr><th id=\"L1702\"><a href=\"#L1702\">1702</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># means the connection was secured properly.\u00a0 Make a note of that fact.</span></td></tr><tr><th id=\"L1703\"><a href=\"#L1703\">1703</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_justStartedTLS<span class=\"p\">:</span></td></tr><tr><th id=\"L1704\"><a href=\"#L1704\">1704</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_justStartedTLS <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L1705\"><a href=\"#L1705\">1705</a></th><td></td></tr><tr><th id=\"L1706\"><a href=\"#L1706\">1706</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># If we already have an inner protocol, then we don't deliver data to</span></td></tr><tr><th id=\"L1707\"><a href=\"#L1707\">1707</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the protocol parser any more; we just hand it off.</span></td></tr><tr><th id=\"L1708\"><a href=\"#L1708\">1708</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1709\"><a href=\"#L1709\">1709</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>innerProtocol<span class=\"o\">.</span>dataReceived<span class=\"p\">(</span>data<span class=\"p\">)</span></td></tr><tr><th id=\"L1710\"><a href=\"#L1710\">1710</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L1711\"><a href=\"#L1711\">1711</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Int16StringReceiver<span class=\"o\">.</span>dataReceived<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0data<span class=\"p\">)</span></td></tr><tr><th id=\"L1712\"><a href=\"#L1712\">1712</a></th><td></td></tr><tr><th id=\"L1713\"><a href=\"#L1713\">1713</a></th><td>\u00a0 \u00a0 _currentKey <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1714\"><a href=\"#L1714\">1714</a></th><td>\u00a0 \u00a0 _currentBox <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1715\"><a href=\"#L1715\">1715</a></th><td></td></tr><tr><th id=\"L1716\"><a href=\"#L1716\">1716</a></th><td></td></tr><tr><th id=\"L1717\"><a href=\"#L1717\">1717</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">proto_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0string<span class=\"p\">):</span></td></tr><tr><th id=\"L1718\"><a href=\"#L1718\">1718</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1719\"><a href=\"#L1719\">1719</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 String received in the 'init' state.</span></td></tr><tr><th id=\"L1720\"><a href=\"#L1720\">1720</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1721\"><a href=\"#L1721\">1721</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_currentBox <span class=\"o\">=</span>\u00a0AmpBox<span class=\"p\">()</span></td></tr><tr><th id=\"L1722\"><a href=\"#L1722\">1722</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>proto_key<span class=\"p\">(</span>string<span class=\"p\">)</span></td></tr><tr><th id=\"L1723\"><a href=\"#L1723\">1723</a></th><td></td></tr><tr><th id=\"L1724\"><a href=\"#L1724\">1724</a></th><td></td></tr><tr><th id=\"L1725\"><a href=\"#L1725\">1725</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">proto_key</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0string<span class=\"p\">):</span></td></tr><tr><th id=\"L1726\"><a href=\"#L1726\">1726</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1727\"><a href=\"#L1727\">1727</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 String received in the 'key' state.\u00a0 If the key is empty, a complete</span></td></tr><tr><th id=\"L1728\"><a href=\"#L1728\">1728</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 box has been received.</span></td></tr><tr><th id=\"L1729\"><a href=\"#L1729\">1729</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1730\"><a href=\"#L1730\">1730</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0string<span class=\"p\">:</span></td></tr><tr><th id=\"L1731\"><a href=\"#L1731\">1731</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_currentKey <span class=\"o\">=</span>\u00a0string</td></tr><tr><th id=\"L1732\"><a href=\"#L1732\">1732</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'value'</span></td></tr><tr><th id=\"L1733\"><a href=\"#L1733\">1733</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L1734\"><a href=\"#L1734\">1734</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>ampBoxReceived<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_currentBox<span class=\"p\">)</span></td></tr><tr><th id=\"L1735\"><a href=\"#L1735\">1735</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_currentBox <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1736\"><a href=\"#L1736\">1736</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'init'</span></td></tr><tr><th id=\"L1737\"><a href=\"#L1737\">1737</a></th><td></td></tr><tr><th id=\"L1738\"><a href=\"#L1738\">1738</a></th><td></td></tr><tr><th id=\"L1739\"><a href=\"#L1739\">1739</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">proto_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0string<span class=\"p\">):</span></td></tr><tr><th id=\"L1740\"><a href=\"#L1740\">1740</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1741\"><a href=\"#L1741\">1741</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 String received in the 'value' state.</span></td></tr><tr><th id=\"L1742\"><a href=\"#L1742\">1742</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1743\"><a href=\"#L1743\">1743</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_currentBox<span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span>_currentKey<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0string</td></tr><tr><th id=\"L1744\"><a href=\"#L1744\">1744</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_currentKey <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L1745\"><a href=\"#L1745\">1745</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'key'</span></td></tr><tr><th id=\"L1746\"><a href=\"#L1746\">1746</a></th><td></td></tr><tr><th id=\"L1747\"><a href=\"#L1747\">1747</a></th><td></td></tr><tr><th id=\"L1748\"><a href=\"#L1748\">1748</a></th><td></td></tr><tr><th id=\"L1749\"><a href=\"#L1749\">1749</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_ParserHelper</span><span class=\"p\">(</span>AMP<span class=\"p\">):</span></td></tr><tr><th id=\"L1750\"><a href=\"#L1750\">1750</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1751\"><a href=\"#L1751\">1751</a></th><td><span class=\"sd\">\u00a0 \u00a0 Utility subclass to help with string parsing.</span></td></tr><tr><th id=\"L1752\"><a href=\"#L1752\">1752</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1753\"><a href=\"#L1753\">1753</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1754\"><a href=\"#L1754\">1754</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 AMP<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L1755\"><a href=\"#L1755\">1755</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>boxes <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L1756\"><a href=\"#L1756\">1756</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>results <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L1757\"><a href=\"#L1757\">1757</a></th><td></td></tr><tr><th id=\"L1758\"><a href=\"#L1758\">1758</a></th><td></td></tr><tr><th id=\"L1759\"><a href=\"#L1759\">1759</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getPeer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1760\"><a href=\"#L1760\">1760</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'string'</span></td></tr><tr><th id=\"L1761\"><a href=\"#L1761\">1761</a></th><td></td></tr><tr><th id=\"L1762\"><a href=\"#L1762\">1762</a></th><td></td></tr><tr><th id=\"L1763\"><a href=\"#L1763\">1763</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getHost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L1764\"><a href=\"#L1764\">1764</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'string'</span></td></tr><tr><th id=\"L1765\"><a href=\"#L1765\">1765</a></th><td></td></tr><tr><th id=\"L1766\"><a href=\"#L1766\">1766</a></th><td>\u00a0 \u00a0 disconnecting <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L1767\"><a href=\"#L1767\">1767</a></th><td></td></tr><tr><th id=\"L1768\"><a href=\"#L1768\">1768</a></th><td></td></tr><tr><th id=\"L1769\"><a href=\"#L1769\">1769</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">ampBoxReceived</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0box<span class=\"p\">):</span></td></tr><tr><th id=\"L1770\"><a href=\"#L1770\">1770</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>boxes<span class=\"o\">.</span>append<span class=\"p\">(</span>box<span class=\"p\">)</span></td></tr><tr><th id=\"L1771\"><a href=\"#L1771\">1771</a></th><td></td></tr><tr><th id=\"L1772\"><a href=\"#L1772\">1772</a></th><td></td></tr><tr><th id=\"L1773\"><a href=\"#L1773\">1773</a></th><td>\u00a0 \u00a0 <span class=\"c\"># Synchronous helpers</span></td></tr><tr><th id=\"L1774\"><a href=\"#L1774\">1774</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">parse</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0fileObj<span class=\"p\">):</span></td></tr><tr><th id=\"L1775\"><a href=\"#L1775\">1775</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1776\"><a href=\"#L1776\">1776</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Parse some amp data stored in a file.</span></td></tr><tr><th id=\"L1777\"><a href=\"#L1777\">1777</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1778\"><a href=\"#L1778\">1778</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param fileObj: a file-like object.</span></td></tr><tr><th id=\"L1779\"><a href=\"#L1779\">1779</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1780\"><a href=\"#L1780\">1780</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a list of AmpBoxes encoded in the given file.</span></td></tr><tr><th id=\"L1781\"><a href=\"#L1781\">1781</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1782\"><a href=\"#L1782\">1782</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p <span class=\"o\">=</span>\u00a0cls<span class=\"p\">()</span></td></tr><tr><th id=\"L1783\"><a href=\"#L1783\">1783</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p<span class=\"o\">.</span>makeConnection<span class=\"p\">(</span>p<span class=\"p\">)</span></td></tr><tr><th id=\"L1784\"><a href=\"#L1784\">1784</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 p<span class=\"o\">.</span>dataReceived<span class=\"p\">(</span>fileObj<span class=\"o\">.</span>read<span class=\"p\">())</span></td></tr><tr><th id=\"L1785\"><a href=\"#L1785\">1785</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0p<span class=\"o\">.</span>boxes</td></tr><tr><th id=\"L1786\"><a href=\"#L1786\">1786</a></th><td>\u00a0 \u00a0 parse <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>parse<span class=\"p\">)</span></td></tr><tr><th id=\"L1787\"><a href=\"#L1787\">1787</a></th><td></td></tr><tr><th id=\"L1788\"><a href=\"#L1788\">1788</a></th><td></td></tr><tr><th id=\"L1789\"><a href=\"#L1789\">1789</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">parseString</span><span class=\"p\">(</span>cls<span class=\"p\">,</span>\u00a0data<span class=\"p\">):</span></td></tr><tr><th id=\"L1790\"><a href=\"#L1790\">1790</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1791\"><a href=\"#L1791\">1791</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Parse some amp data stored in a string.</span></td></tr><tr><th id=\"L1792\"><a href=\"#L1792\">1792</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1793\"><a href=\"#L1793\">1793</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param data: a str holding some amp-encoded data.</span></td></tr><tr><th id=\"L1794\"><a href=\"#L1794\">1794</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1795\"><a href=\"#L1795\">1795</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a list of AmpBoxes encoded in the given string.</span></td></tr><tr><th id=\"L1796\"><a href=\"#L1796\">1796</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1797\"><a href=\"#L1797\">1797</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0cls<span class=\"o\">.</span>parse<span class=\"p\">(</span>StringIO<span class=\"p\">(</span>data<span class=\"p\">))</span></td></tr><tr><th id=\"L1798\"><a href=\"#L1798\">1798</a></th><td>\u00a0 \u00a0 parseString <span class=\"o\">=</span>\u00a0<span class=\"nb\">classmethod</span><span class=\"p\">(</span>parseString<span class=\"p\">)</span></td></tr><tr><th id=\"L1799\"><a href=\"#L1799\">1799</a></th><td></td></tr><tr><th id=\"L1800\"><a href=\"#L1800\">1800</a></th><td></td></tr><tr><th id=\"L1801\"><a href=\"#L1801\">1801</a></th><td></td></tr><tr><th id=\"L1802\"><a href=\"#L1802\">1802</a></th><td>parse <span class=\"o\">=</span>\u00a0_ParserHelper<span class=\"o\">.</span>parse</td></tr><tr><th id=\"L1803\"><a href=\"#L1803\">1803</a></th><td>parseString <span class=\"o\">=</span>\u00a0_ParserHelper<span class=\"o\">.</span>parseString</td></tr><tr><th id=\"L1804\"><a href=\"#L1804\">1804</a></th><td></td></tr><tr><th id=\"L1805\"><a href=\"#L1805\">1805</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_stringsToObjects</span><span class=\"p\">(</span>strings<span class=\"p\">,</span>\u00a0arglist<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1806\"><a href=\"#L1806\">1806</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1807\"><a href=\"#L1807\">1807</a></th><td><span class=\"sd\">\u00a0 \u00a0 Convert an AmpBox to a dictionary of python objects, converting through a</span></td></tr><tr><th id=\"L1808\"><a href=\"#L1808\">1808</a></th><td><span class=\"sd\">\u00a0 \u00a0 given arglist.</span></td></tr><tr><th id=\"L1809\"><a href=\"#L1809\">1809</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1810\"><a href=\"#L1810\">1810</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param strings: an AmpBox (or dict of strings)</span></td></tr><tr><th id=\"L1811\"><a href=\"#L1811\">1811</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1812\"><a href=\"#L1812\">1812</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param arglist: a list of 2-tuples of strings and Argument objects, as</span></td></tr><tr><th id=\"L1813\"><a href=\"#L1813\">1813</a></th><td><span class=\"sd\">\u00a0 \u00a0 described in L{Command.arguments}.</span></td></tr><tr><th id=\"L1814\"><a href=\"#L1814\">1814</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1815\"><a href=\"#L1815\">1815</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param proto: an L{AMP} instance.</span></td></tr><tr><th id=\"L1816\"><a href=\"#L1816\">1816</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1817\"><a href=\"#L1817\">1817</a></th><td><span class=\"sd\">\u00a0 \u00a0 @return: the converted dictionary mapping names to argument objects.</span></td></tr><tr><th id=\"L1818\"><a href=\"#L1818\">1818</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1819\"><a href=\"#L1819\">1819</a></th><td>\u00a0 \u00a0 objects <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1820\"><a href=\"#L1820\">1820</a></th><td>\u00a0 \u00a0 myStrings <span class=\"o\">=</span>\u00a0strings<span class=\"o\">.</span>copy<span class=\"p\">()</span></td></tr><tr><th id=\"L1821\"><a href=\"#L1821\">1821</a></th><td>\u00a0 \u00a0 <span class=\"k\">for</span>\u00a0argname<span class=\"p\">,</span>\u00a0argparser <span class=\"ow\">in</span>\u00a0arglist<span class=\"p\">:</span></td></tr><tr><th id=\"L1822\"><a href=\"#L1822\">1822</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 argparser<span class=\"o\">.</span>fromBox<span class=\"p\">(</span>argname<span class=\"p\">,</span>\u00a0myStrings<span class=\"p\">,</span>\u00a0objects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1823\"><a href=\"#L1823\">1823</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0objects</td></tr><tr><th id=\"L1824\"><a href=\"#L1824\">1824</a></th><td></td></tr><tr><th id=\"L1825\"><a href=\"#L1825\">1825</a></th><td></td></tr><tr><th id=\"L1826\"><a href=\"#L1826\">1826</a></th><td></td></tr><tr><th id=\"L1827\"><a href=\"#L1827\">1827</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_objectsToStrings</span><span class=\"p\">(</span>objects<span class=\"p\">,</span>\u00a0arglist<span class=\"p\">,</span>\u00a0strings<span class=\"p\">,</span>\u00a0proto<span class=\"p\">):</span></td></tr><tr><th id=\"L1828\"><a href=\"#L1828\">1828</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L1829\"><a href=\"#L1829\">1829</a></th><td><span class=\"sd\">\u00a0 \u00a0 Convert a dictionary of python objects to an AmpBox, converting through a</span></td></tr><tr><th id=\"L1830\"><a href=\"#L1830\">1830</a></th><td><span class=\"sd\">\u00a0 \u00a0 given arglist.</span></td></tr><tr><th id=\"L1831\"><a href=\"#L1831\">1831</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1832\"><a href=\"#L1832\">1832</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param objects: a dict mapping names to python objects</span></td></tr><tr><th id=\"L1833\"><a href=\"#L1833\">1833</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1834\"><a href=\"#L1834\">1834</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param arglist: a list of 2-tuples of strings and Argument objects, as</span></td></tr><tr><th id=\"L1835\"><a href=\"#L1835\">1835</a></th><td><span class=\"sd\">\u00a0 \u00a0 described in L{Command.arguments}.</span></td></tr><tr><th id=\"L1836\"><a href=\"#L1836\">1836</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1837\"><a href=\"#L1837\">1837</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param proto: an L{AMP} instance.</span></td></tr><tr><th id=\"L1838\"><a href=\"#L1838\">1838</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L1839\"><a href=\"#L1839\">1839</a></th><td><span class=\"sd\">\u00a0 \u00a0 @return: the converted dictionary mapping names to encoded argument</span></td></tr><tr><th id=\"L1840\"><a href=\"#L1840\">1840</a></th><td><span class=\"sd\">\u00a0 \u00a0 strings.</span></td></tr><tr><th id=\"L1841\"><a href=\"#L1841\">1841</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L1842\"><a href=\"#L1842\">1842</a></th><td>\u00a0 \u00a0 myObjects <span class=\"o\">=</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L1843\"><a href=\"#L1843\">1843</a></th><td>\u00a0 \u00a0 <span class=\"k\">for</span>\u00a0<span class=\"p\">(</span>k<span class=\"p\">,</span>\u00a0v<span class=\"p\">)</span>\u00a0<span class=\"ow\">in</span>\u00a0objects<span class=\"o\">.</span>items<span class=\"p\">():</span></td></tr><tr><th id=\"L1844\"><a href=\"#L1844\">1844</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 myObjects<span class=\"p\">[</span>k<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0v</td></tr><tr><th id=\"L1845\"><a href=\"#L1845\">1845</a></th><td></td></tr><tr><th id=\"L1846\"><a href=\"#L1846\">1846</a></th><td>\u00a0 \u00a0 <span class=\"k\">for</span>\u00a0argname<span class=\"p\">,</span>\u00a0argparser <span class=\"ow\">in</span>\u00a0arglist<span class=\"p\">:</span></td></tr><tr><th id=\"L1847\"><a href=\"#L1847\">1847</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 argparser<span class=\"o\">.</span>toBox<span class=\"p\">(</span>argname<span class=\"p\">,</span>\u00a0strings<span class=\"p\">,</span>\u00a0myObjects<span class=\"p\">,</span>\u00a0proto<span class=\"p\">)</span></td></tr><tr><th id=\"L1848\"><a href=\"#L1848\">1848</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0strings</td></tr><tr><th id=\"L1849\"><a href=\"#L1849\">1849</a></th><td></td></tr><tr><th id=\"L1850\"><a href=\"#L1850\">1850</a></th><td></td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/protocols/amp.py\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44234.0}