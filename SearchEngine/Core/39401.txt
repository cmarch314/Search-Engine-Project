{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Object include CGAL Object h DefinitionSome functions can return different types of objects A typical C solution to this problem is to derive all possible return types from a common base class to return a pointer to this class and to perform a dynamic cast on this pointer The class Object provides an abstraction An object obj of the class Object can represent an arbitrary class The only operations it provides is to make copies and assignments so that you can put them in lists or arrays Note that Object is NOT a common base class for the elementary classes Therefore there is no automatic conversion from these classes to Object Rather this is done with the global function make object This encapsulation mechanism requires the use of assign to use the functionality of the encapsulated class Creation Object obj introduces an uninitialized variable Object obj o Copy constructor Objects of type Object are normally created via the global function make object Operations Object obj operator o Assignment Assignment of an object of type Object to an object of type T is done using assign There is also a member function to check whether an object of type Object contains an object bool obj is empty returns true if object does not contain an object ExampleIn the following example the object class is used as return value for the intersection computation as there are possibly different return values Point 2 Cartesian double point Segment 2 Cartesian double segment segment 1 segment 2 std cin segment 1 segment 2 Object obj intersection segment 1 segment 2 if assign point obj do something with point else if assign segment obj do something with segment there was no intersection The intersection routine itself looks roughly as follows template class Kernel Object intersection Segment 2 Kernel s1 Segment 2 Kernel s2 if intersection in a point Point 2 Kernel p return make object p else if intersection in a segment Segment 2 Kernel s return make object s return Object See AlsoCGAL assign CGAL make object Kernel Object 2 Kernel Object 3 Next assign Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Object.html", "title": "object", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Object.tex' -->\n<html> <head>  \n<title>Object</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_87\"></A>\n\n<A NAME=\"Cross_link_anchor_88\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_65\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Object\"></A>\n<h2><I>CGAL::Object</I></h2>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Object.h\">CGAL/Object.h</A>&gt;</I>\n<P>\n\n<H3>Definition</H3>Some functions can return different types of objects. A typical\nC++ solution to this problem is to derive all possible return\ntypes from a common base class, to return a pointer to this \nclass and to perform a dynamic cast on this pointer. The class\n<I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> provides an abstraction.\nAn object <I>obj</I> of the class <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> can\nrepresent an arbitrary class. The only operations it provides is\nto make copies and assignments, so that you can put them in lists\nor arrays. Note that <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> is NOT a common base class for the\nelementary classes. Therefore, there is no \nautomatic conversion from these classes to <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I>. Rather \nthis is done with the global function <I><A HREF=\"Function_make_object.html#Cross_link_anchor_92\">make_object</A></I>. This \nencapsulation mechanism requires the use of <I><A HREF=\"Function_assign.html#Cross_link_anchor_90\">assign</A></I> to use \nthe functionality of the encapsulated class.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A> obj;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces an uninitialized variable.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A> obj (  o);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nObjects of type <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> are normally created via the global function\n<I><A HREF=\"Function_make_object.html#Cross_link_anchor_92\">make_object</A></I>.\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A> &amp;<A NAME=\"Function_Object__operator=6const_Object__o9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    obj.operator= (  o)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assignment.\n        </TD></TR>\n        </TABLE>\n<P>\n\nAssignment of an object of type <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> to an object of type <I>T</I> \nis done using <I><A HREF=\"Function_assign.html#Cross_link_anchor_90\">assign</A></I>.\n<P>\n\nThere is also a member function to check whether an object of type <I><A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A></I> contains an object.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_empty69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    obj.is_empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true, if <I>object</I> does not \n        contain an object.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>In the following example, the object class is used as return value for the \n\n<!-- REMOVE_LINKS_BEGIN -->\nintersection\n<!-- REMOVE_LINKS_END -->\n computation, as there are possibly different return values.\n<P>\n\n<PRE>\n{\n    <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt; <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt; point;\n    <A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt; <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt; segment,  segment_1, segment_2;\n\n    std::cin &gt;&gt; segment_1 &gt;&gt; segment_2;\n\n    <A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A> obj = <A HREF=\"Function_intersection.html#Cross_link_anchor_221\">intersection</A>(segment_1, segment_2);\n\n    if (<A HREF=\"Function_assign.html#Cross_link_anchor_90\">assign</A>(point, obj)) {\n        /* do something with point */\n    } else if ((<A HREF=\"Function_assign.html#Cross_link_anchor_90\">assign</A>(segment, obj)) {\n        /* do something with segment*/\n    }\n</PRE>\n\n<!-- REMOVE_LINKS_BEGIN -->\n<PRE>\n    /*  there was no intersection */\n}\n</PRE>\n\n<!-- REMOVE_LINKS_END -->\n<P>\n\n<BR>\n\n<BR>\n\nThe \n<!-- REMOVE_LINKS_BEGIN -->\nintersection\n<!-- REMOVE_LINKS_END -->\n routine itself looks roughly as follows:\n<P>\n\n<PRE>\n\ntemplate &lt; class <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> &gt;\n<A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A>  <A HREF=\"Function_intersection.html#Cross_link_anchor_221\">intersection</A>(<A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s1, <A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s2)\n{\n</PRE> \n\n<!-- REMOVE_LINKS_BEGIN -->\n<PRE>\n    if (/* intersection in a point */ ) {\n</PRE> \n\n<!-- REMOVE_LINKS_END -->\n<PRE>\n       <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p = ... ;\n       return <A HREF=\"Function_make_object.html#Cross_link_anchor_92\">make_object</A>(p);\n</PRE> \n\n<!-- REMOVE_LINKS_BEGIN -->\n<PRE>\n    } else if (/* intersection in a segment */ ) {\n</PRE> \n\n<!-- REMOVE_LINKS_END -->\n<PRE>\n       <A HREF=\"Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s = ... ;\n       return <A HREF=\"Function_make_object.html#Cross_link_anchor_92\">make_object</A>(s);\n    }\n    return <A HREF=\"Class_Object.html#Cross_link_anchor_88\">Object</A>();\n}\n</PRE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_assign.html#Cross_link_anchor_89\">CGAL::assign</A></I><BR>\n\n<I><A HREF=\"Function_make_object.html#Cross_link_anchor_91\">CGAL::make_object</A></I><BR>\n\n<I><A HREF=\"Concept_Kernel--Object_2.html#Cross_link_anchor_452\">Kernel::Object_2</A></I><BR>\n\n<I><A HREF=\"Concept_Kernel--Object_3.html#Cross_link_anchor_453\">Kernel::Object_3</A></I><BR>\n\n\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_assign.html\"><I>assign</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39401.0}