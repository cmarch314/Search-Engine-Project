{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 12Colors Window streams and Postscript Streams Matthias B sken Andreas Fabri Lutz Kettner and Stefan Schirra 12 1 Introduction The LEDA library comes with its own window toolkit and with a Postscipt file stream CGAL provides two classes CGAL Window stream Postscript file stream which are a thin glue layer that allows I O for the geometric classes of the CGAL Kernel 12 2 Window output An object of type CGAL Window stream is a two dimensional window for graphical IO The input and output operations perform a mapping from object coordinates to window coordinates Actually CGAL Window stream is identical to the LEDA class leda window and LEDA must be installed The class additionlly provides input and output operators for the classes which are defined in the CGAL kernel CGAL Window stream should be initialized with a coordinate frame by calling member function init and must be displayed by calling member function display before drawing For further information on leda window we refer to the LEDA manual Input and output operators for CGAL Window stream are defined for the geometric classes in the CGAL kernel The coordinates of the geometric objects are in object space Data are entered with the left mouse button It is important that the window stream header file gets included after the inclusion of the header files of geometric classes that get inserted to or extracted from the window stream See the following small example program include CGAL Cartesian h include CGAL Segment 2 h include CGAL IO Window stream h typedef CGAL Point 2 CGAL Cartesian double Point typedef CGAL Segment 2 CGAL Cartesian double Segment int main Point p 1 q 2 2 Segment s p q CGAL Window stream W 1 1 W init 1 1 CGAL cgalize W W display W CGAL RED s CGAL BLACK p q W s p return 3D objects can be used as well with the Window stream The stream output operator projects them to the xy plane The stream input operator sets the z coordinate to zero To get these operators you have to include CGAL IO window stream xy 3 h 12 3 Postscript output An object of type Postscript file stream provides graphical output in PostScript format Postscript file stream is derived from the LEDA class ps file Therefore the functionality of ps file is available on Postscript file stream as well In addition the class Postscript file stream provides output operators for the classes which are defined in the CGAL kernel The interface of Postscript file stream is very similar to the interface of leda window To increase similarity some functions have been added with respect to ps file For further information on ps file we refer to the LEDA manual The output operator to Postscript file stream is defined for all geometric classes in the two dimensional CGAL kernel There are no input operators of course It is important that the postscript file stream header file gets included after the inclusion of the header files of geometric classes that get inserted to the postscript stream file See the following example program include CGAL Cartesian h include CGAL Segment 2 h include CGAL IO Postscript file stream h typedef CGAL Point 2 CGAL Cartesian double Point typedef CGAL Segment 2 CGAL Cartesian double Segment int main Point p 1 q 2 2 Segment s p q CGAL Postscript file stream PS 1 1 PS init 1 CGAL cgalize PS PS display PS CGAL RED s CGAL BLACK p q return Next chapter Colors Window streams and Postscript Streams Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Colors_and_windows/Chapter_main.html", "title": "colors, window streams, and postscript streams", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Colors_and_windows/main.tex' -->\n<html> <head>  \n<title>Colors, Window streams, and Postscript Streams</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_12\"></a>\n  \n<h1>Chapter 12<BR>Colors, Window streams, and Postscript Streams</h1>\n\n<A NAME=\"chapterWin\"></A>\n<EM>Matthias B&auml;sken, Andreas Fabri, Lutz\n Kettner, and Stefan Schirra</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>12.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nThe L<SMALL>EDA</SMALL> library comes with its own window toolkit and with a\nPostscipt file stream. C<SMALL>GAL</SMALL> provides two classes \n <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I> <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> \nwhich  are a thin glue layer that allows I/O for the geometric \nclasses of the C<SMALL>GAL</SMALL> <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>12.2&nbsp;&nbsp;&nbsp;Window output</h2>\n<P>\n\nAn object of type <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I> is a two-dimensional window for\ngraphical IO. The input and output operations perform a mapping from\nobject coordinates to window coordinates.\nActually, <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I> is identical to the L<SMALL>EDA</SMALL> class <I>leda_window</I>,\nand L<SMALL>EDA</SMALL> must be installed. The class additionlly provides input and output \noperators for the classes which are defined in the C<SMALL>GAL</SMALL> kernel.\n<I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I> should be initialized with a coordinate frame \n(by calling member function\n<I>init</I>) and must be displayed (by calling member function <I>display</I>) before\ndrawing.\n<P>\n\nFor further information on <i>leda_window</i>, we refer to the \n<A HREF=\"http://www.algorithmic-solutions.info/leda_manual/MANUAL.html\">LEDA manual</A>.\n<P>\n\nInput and output operators for <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A></I> are defined for \nthe geometric classes in the C<SMALL>GAL</SMALL> kernel.\nThe coordinates of the geometric objects are in object space. Data are\nentered with the left mouse button.\n<P>\n\nIt is important that the window stream header file gets included\n<I>after</I> the inclusion of the header files of geometric classes\nthat get inserted to or extracted from the window stream. See the following \nsmall example program.\n<P>\n\n<pre class=\"Verbatim\">\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>.h&gt;\n#include &lt;CGAL/IO/<A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;     Point;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_55\">CGAL::Segment_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;   Segment;\n\nint main()\n{\n    Point p(0,1), q(2,2);\n    Segment s(p,q);\n\n    <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A> W(100,100);\n    W.init(0,10,10);\n    CGAL::cgalize( W);\n    W.display();\n\n    W &lt;&lt; CGAL::RED &lt;&lt; s &lt;&lt; CGAL::BLACK &lt;&lt; p &lt;&lt; q ;\n    W &gt;&gt; s &gt;&gt; p;\n    return 0;\n}\n</pre>\n<P>\n\n3D objects can be used as well with the <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A></I>. The stream output\noperator <I>&lt;&lt;</I> projects them to the <MATH><I>xy</I></MATH>-plane. The stream input\noperator <I>&gt;&gt;</I> sets the <MATH><I>z</I></MATH> coordinate to zero.\nTo get these operators you have to\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/window_stream_xy_3.h\">CGAL/IO/window_stream_xy_3.h</A>&gt;</I>\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>12.3&nbsp;&nbsp;&nbsp;Postscript output</h2>\n<P>\n\nAn object of type <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> provides graphical output in PostScript\nformat.\n<I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> is derived from the L<SMALL>EDA</SMALL> class <I>ps_file</I>.\nTherefore, the functionality of <I>ps_file</I> is available on <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I>\nas well.\nIn addition, the class <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> provides output \noperators for the classes which are defined in the C<SMALL>GAL</SMALL> kernel.\nThe interface of <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> is very similar to the interface \nof <I>leda_window</I>. \nTo increase similarity, some functions have been added with respect to <I>ps_file</I>.\n\n\nFor further information on <i>ps_file</i>, we refer to the \n<A HREF=\"http://www.algorithmic-solutions.info/leda_manual/MANUAL.html\">LEDA manual</A>.\n<P>\n\nThe output operator to <I><A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A></I> is defined for all geometric classes \nin the two-dimensional C<SMALL>GAL</SMALL> kernel. There are no input operators of course.\n<P>\n\nIt is important that the postscript file stream header file gets included\n<I>after</I> the inclusion of the header files of geometric classes\nthat get inserted to the postscript stream file. See the following example program.\n<P>\n\n<pre class=\"Verbatim\">\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>.h&gt;\n#include &lt;CGAL/IO/<A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1756\">Postscript_file_stream</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;     Point;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_55\">CGAL::Segment_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;   Segment;\n\nint main()\n{\n    Point p(0,1), q(2,2);\n    Segment s(p,q);\n\n    <A HREF=\"../Colors_and_windows_ref/Class_Postscript_file_stream.html#Cross_link_anchor_1755\">CGAL::Postscript_file_stream</A> PS(100,100);\n    PS.init(0,10,0);\n    CGAL::cgalize( PS);\n    PS.display();\n\n    PS &lt;&lt; CGAL::RED &lt;&lt; s &lt;&lt; CGAL::BLACK &lt;&lt; p &lt;&lt; q ;\n    return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Colors_and_windows_ref/Chapter_intro.html\">Colors, Window streams, and Postscript Streams</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_12!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38229.0}