{"text": "1 package swirl workspace 2 3 import javax swing JOptionPane 4 5 import junit framework Test 6 import junit framework TestSuite 7 8 import org apache commons httpclient HttpMethod 9 import org apache commons logging Log 1 import org apache commons logging LogFactory 11 import org apache webdav lib methods PropFindMethod 12 import org apache webdav lib methods XMLResponseMethodBase 13 import org dom4j Document 14 import org dom4j io DOMReader 15 16 import swirl workspace common DocumentLogger 17 18 19 TODO 2 21 author author 22 version Revision 1 18 23 24 public class PropfindCommandTest extends CommandTest 25 26 TODO 27 Document body 28 29 TODO 3 String xpaths 31 32 TODO 33 boolean prompt false 34 35 TODO 36 private Log log LogFactory getLog this getClass 37 38 39 Creates a new PropfindCommandTest object 4 41 param name TODO 42 43 public PropfindCommandTest String name 44 45 super name 46 47 48 49 TODO 5 51 return TODO 52 53 public static Test suite 54 55 TestSuite suite new TestSuite 56 57 suite addTestSuite PropfindCommandTest class 58 59 6 suite addTest new PropfindCommandTest testSlash 61 suite addTest new PropfindCommandTest testNoSlash 62 suite addTest new PropfindCommandTest testCollection 63 suite addTest new PropfindCommandTest testFile 64 suite addTest new PropfindCommandTest testDeepFile 65 suite addTest new PropfindCommandTest testNonexistentFile 66 suite addTest new PropfindCommandTest testCollectionWithSpace 67 68 return wrapSuite suite 69 7 71 72 TODO 73 74 public void setUp 75 76 super setUp 77 xpaths new String 78 79 8 81 TODO 82 83 throws Exception TODO 84 85 public void testCollection throws Exception 86 87 xpaths new String 88 89 count D multistatus 9 91 92 should have a swirl test collection 93 count D multistatus D response D href text 94 SlideTestSetup SWIRL SlideTestSetup COLLECTION 95 96 97 should have a D resourcetype D collection element 98 count D multistatus D response D href text 99 SlideTestSetup SWIRL SlideTestSetup COLLECTION 1 D propstat D prop D resourcetype D collection 1 1 1 2 1 3 should have a swirl test collection deep license txt 1 4 count D multistatus D response D href text 1 5 SlideTestSetup SWIRL SlideTestSetup DEEP FILE 1 6 1 7 1 8 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 1 9 SlideTestSetup COLLECTION 2 7 11 111 112 113 TODO 114 115 throws Exception TODO 116 117 public void testCollectionWithSpace throws Exception 118 119 MkcolCommandTest mkcol new MkcolCommandTest 12 121 mkcol tearDown 122 mkcol setUp 123 mkcol testCollectionWithSpace 124 125 xpaths new String 126 127 count D multistatus 128 129 13 should have a swirl MkcolCommandTest MAC COLLECTION 131 count D multistatus D response D href starts with text 132 SlideTestSetup SWIRL MkcolCommandTest MAC COLLECTION 133 134 135 136 should have a D resourcetype D collection element 137 count D multistatus D response starts with D href text 138 SlideTestSetup SWIRL MkcolCommandTest MAC COLLECTION 139 D propstat D prop D resourcetype D collection 14 141 142 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 143 MkcolCommandTest MAC COLLECTION 2 7 144 145 mkcol tearDown 146 147 148 149 TODO 15 151 throws Exception TODO 152 153 public void testDeepFile throws Exception 154 155 xpaths new String 156 157 count D multistatus 158 should have only one response 159 count D multistatus D response 16 161 162 should have a swirl test collection and deep license txt file 163 count D multistatus D response D href starts with text 164 SlideTestSetup SWIRL SlideTestSetup COLLECTION 165 and contains text SlideTestSetup DEEP FILE 166 167 168 169 should have a contentlength of SlideTestSetup DEEP FILE length 17 count D multistatus D response D propstat D prop D getcontentlength text 171 SlideTestSetup DEEP FILE length 172 173 174 prompt true 175 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 176 SlideTestSetup DEEP FILE 2 7 177 178 179 18 TODO 181 182 throws Exception TODO 183 184 public void testFile throws Exception 185 186 xpaths new String 187 188 count D multistatus 189 should have only one response 19 count D multistatus D response 191 192 193 should have a swirl license txt file 194 count D multistatus D response D href starts with text 195 SlideTestSetup SWIRL SlideTestSetup FILE 196 197 198 should have a contentlength of SlideTestSetup FILE length 199 count D multistatus D response D propstat D prop D getcontentlength text 2 SlideTestSetup FILE length 2 1 2 2 2 3 prompt true 2 4 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 2 5 SlideTestSetup FILE 2 7 2 6 2 7 2 8 2 9 TODO 21 211 throws Exception TODO 212 213 public void testNoSlash throws Exception 214 215 xpaths new String 216 217 count D multistatus 218 219 22 should have a swirl collection 221 count D multistatus D response D href text 222 SlideTestSetup SWIRL NO SLASH 223 224 225 should have a swirl license txt file 226 count D multistatus D response D href text 227 SlideTestSetup SWIRL SlideTestSetup FILE 228 229 23 should have a swirl test collection 231 count D multistatus D response D href text 232 SlideTestSetup SWIRL SlideTestSetup COLLECTION 233 234 235 should have a swirl test collection and deep license txt 236 count D multistatus D response D href contains text 237 SlideTestSetup SWIRL SlideTestSetup COLLECTION 238 and contains text SlideTestSetup DEEP FILE 239 24 241 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL NO SLASH 2 7 242 243 244 245 TODO 246 247 throws Exception TODO 248 249 public void testNonexistentFile throws Exception 25 251 super go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 252 SlideTestSetup BAD FILE 4 4 253 254 255 HTTP 1 1 4 4 256 Not Found 3A No object found at 2Ffiles 2Fnonexistent 2Efile Date 257 Wed 23 Jun 2 4 21 52 41 GMT Server Jetty 5 RC Windows XP 5 1 258 x86 java 1 4 2 3 Expires Thu 1 Jan 197 GMT 259 Set Cookie JSESSIONID 5 3p1bd95or i path slide Content Type 26 text html Content Length 1329 261 262 263 264 265 TODO 266 267 throws Exception TODO 268 269 public void testSlash throws Exception 27 271 xpaths new String 272 273 count D multistatus 274 275 276 should have a swirl collection 277 count D multistatus D response D href text 278 SlideTestSetup SWIRL NO SLASH 279 28 281 should have a swirl license txt file 282 count D multistatus D response D href text 283 SlideTestSetup SWIRL SlideTestSetup FILE 284 285 286 should have a swirl test collection 287 count D multistatus D response D href text 288 SlideTestSetup SWIRL SlideTestSetup COLLECTION 289 29 291 should have a swirl test collection and deep license txt 292 count D multistatus D response D href contains text 293 SlideTestSetup SWIRL SlideTestSetup COLLECTION 294 and contains text SlideTestSetup DEEP FILE 295 296 297 go SlideTestSetup LOCALHOST SlideTestSetup SWIRL 2 7 298 299 3 3 1 TODO 3 2 3 3 param uri TODO 3 4 3 5 return TODO 3 6 3 7 protected HttpMethod createMethod String uri 3 8 3 9 return new PropFindMethod uri PropFindMethod DEPTH INFINITY 31 311 312 313 TODO 314 315 param uri TODO 316 param expectedVal TODO 317 318 throws Exception TODO 319 32 protected void go String uri int expectedVal throws Exception 321 322 super go uri expectedVal 323 assertEquals Content Type should be text xml charset UTF 8 324 getMethod getResponseHeader Content Type getValue 325 text xml charset UTF 8 326 327 DOMReader reader new DOMReader 328 XMLResponseMethodBase method XMLResponseMethodBase getMethod 329 33 body reader read method getResponseDocument 331 332 for int i i xpaths length i 333 334 runXPath xpaths i 1 335 336 337 if prompt 338 339 runPrompt 34 341 342 343 344 TODO 345 346 private void runPrompt 347 348 String xpath 349 35 while xpath equals quit 351 352 xpath JOptionPane showInputDialog xpath 353 runXPath xpath 1 354 355 356 357 358 TODO 359 36 param xpath TODO 361 param expectedVal TODO 362 363 private void runXPath String xpath int expectedVal 364 365 try 366 367 if log isDebugEnabled 368 369 log debug xpath xpath 37 371 372 DocumentLogger logDocument log body body 373 374 Object ret body selectObject xpath 375 376 if log isDebugEnabled 377 378 log debug xpath ret 379 38 381 if prompt 382 383 assertEquals Response should have xpath equal to 384 expectedVal expectedVal 385 Number ret intValue 386 387 388 catch Exception e 389 39 log error Trying to run xpath xpath e 391 392 393 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref-test/swirl/workspace/PropfindCommandTest.html", "title": "propfindcommandtest xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>PropfindCommandTest xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> javax.swing.JOptionPane;\n<a name=\"4\" href=\"#4\">4</a>   \n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> junit.framework.Test;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> junit.framework.TestSuite;\n<a name=\"7\" href=\"#7\">7</a>   \n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> org.apache.commons.httpclient.HttpMethod;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.webdav.lib.methods.PropFindMethod;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> org.apache.webdav.lib.methods.XMLResponseMethodBase;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> org.dom4j.Document;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> org.dom4j.io.DOMReader;\n<a name=\"15\" href=\"#15\">15</a>  \n<a name=\"16\" href=\"#16\">16</a>  <strong>import</strong> swirl.workspace.common.DocumentLogger;\n<a name=\"17\" href=\"#17\">17</a>  \n<a name=\"18\" href=\"#18\">18</a>  <em>/**<em>*</em></em>\n<a name=\"19\" href=\"#19\">19</a>  <em> * TODO</em>\n<a name=\"20\" href=\"#20\">20</a>  <em> *</em>\n<a name=\"21\" href=\"#21\">21</a>  <em> * @author $author$</em>\n<a name=\"22\" href=\"#22\">22</a>  <em> * @version $Revision: 1.18 $</em>\n<a name=\"23\" href=\"#23\">23</a>  <em> */</em>\n<a name=\"24\" href=\"#24\">24</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../swirl/workspace/PropfindCommandTest.html\">PropfindCommandTest</a> <strong>extends</strong> <a href=\"../../swirl/workspace/CommandTest.html\">CommandTest</a>\n<a name=\"25\" href=\"#25\">25</a>  {\n<a name=\"26\" href=\"#26\">26</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"27\" href=\"#27\">27</a>      Document body;\n<a name=\"28\" href=\"#28\">28</a>  \n<a name=\"29\" href=\"#29\">29</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"30\" href=\"#30\">30</a>      String[] xpaths;\n<a name=\"31\" href=\"#31\">31</a>  \n<a name=\"32\" href=\"#32\">32</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"33\" href=\"#33\">33</a>      <strong>boolean</strong> prompt = false;\n<a name=\"34\" href=\"#34\">34</a>  \n<a name=\"35\" href=\"#35\">35</a>      <em>/**<em>* TODO */</em></em>\n<a name=\"36\" href=\"#36\">36</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"37\" href=\"#37\">37</a>  \n<a name=\"38\" href=\"#38\">38</a>      <em>/**<em>*</em></em>\n<a name=\"39\" href=\"#39\">39</a>  <em>     * Creates a new PropfindCommandTest object.</em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     *</em>\n<a name=\"41\" href=\"#41\">41</a>  <em>     * @param name TODO</em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     */</em>\n<a name=\"43\" href=\"#43\">43</a>      <strong>public</strong> <a href=\"../../swirl/workspace/PropfindCommandTest.html\">PropfindCommandTest</a>(String name)\n<a name=\"44\" href=\"#44\">44</a>      {\n<a name=\"45\" href=\"#45\">45</a>          <strong>super</strong>(name);\n<a name=\"46\" href=\"#46\">46</a>      }\n<a name=\"47\" href=\"#47\">47</a>  \n<a name=\"48\" href=\"#48\">48</a>      <em>/**<em>*</em></em>\n<a name=\"49\" href=\"#49\">49</a>  <em>     * TODO</em>\n<a name=\"50\" href=\"#50\">50</a>  <em>     *</em>\n<a name=\"51\" href=\"#51\">51</a>  <em>     * @return TODO</em>\n<a name=\"52\" href=\"#52\">52</a>  <em>     */</em>\n<a name=\"53\" href=\"#53\">53</a>      <strong>public</strong> <strong>static</strong> Test suite()\n<a name=\"54\" href=\"#54\">54</a>      {\n<a name=\"55\" href=\"#55\">55</a>          TestSuite suite = <strong>new</strong> TestSuite();\n<a name=\"56\" href=\"#56\">56</a>  \n<a name=\"57\" href=\"#57\">57</a>          suite.addTestSuite(PropfindCommandTest.<strong>class</strong>);\n<a name=\"58\" href=\"#58\">58</a>  \n<a name=\"59\" href=\"#59\">59</a>          <em class=\"comment\">/*</em>\n<a name=\"60\" href=\"#60\">60</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testSlash\"));</em>\n<a name=\"61\" href=\"#61\">61</a>  <em class=\"comment\">           suite.addTest(new PropfindCommandTest(\"testNoSlash\"));</em>\n<a name=\"62\" href=\"#62\">62</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testCollection\"));</em>\n<a name=\"63\" href=\"#63\">63</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testFile\"));</em>\n<a name=\"64\" href=\"#64\">64</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testDeepFile\"));</em>\n<a name=\"65\" href=\"#65\">65</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testNonexistentFile\"));</em>\n<a name=\"66\" href=\"#66\">66</a>  <em class=\"comment\">           //suite.addTest(new PropfindCommandTest(\"testCollectionWithSpace\"));</em>\n<a name=\"67\" href=\"#67\">67</a>  <em class=\"comment\">           //*/</em>\n<a name=\"68\" href=\"#68\">68</a>          <strong>return</strong> wrapSuite(suite);\n<a name=\"69\" href=\"#69\">69</a>      }\n<a name=\"70\" href=\"#70\">70</a>  \n<a name=\"71\" href=\"#71\">71</a>      <em>/**<em>*</em></em>\n<a name=\"72\" href=\"#72\">72</a>  <em>     * TODO</em>\n<a name=\"73\" href=\"#73\">73</a>  <em>     */</em>\n<a name=\"74\" href=\"#74\">74</a>      <strong>public</strong> <strong>void</strong> setUp()\n<a name=\"75\" href=\"#75\">75</a>      {\n<a name=\"76\" href=\"#76\">76</a>          <strong>super</strong>.setUp();\n<a name=\"77\" href=\"#77\">77</a>          xpaths = <strong>new</strong> String[]{};\n<a name=\"78\" href=\"#78\">78</a>      }\n<a name=\"79\" href=\"#79\">79</a>  \n<a name=\"80\" href=\"#80\">80</a>      <em>/**<em>*</em></em>\n<a name=\"81\" href=\"#81\">81</a>  <em>     * TODO</em>\n<a name=\"82\" href=\"#82\">82</a>  <em>     *</em>\n<a name=\"83\" href=\"#83\">83</a>  <em>     * @throws Exception TODO</em>\n<a name=\"84\" href=\"#84\">84</a>  <em>     */</em>\n<a name=\"85\" href=\"#85\">85</a>      <strong>public</strong> <strong>void</strong> testCollection() throws Exception\n<a name=\"86\" href=\"#86\">86</a>      {\n<a name=\"87\" href=\"#87\">87</a>          xpaths = <strong>new</strong> String[]\n<a name=\"88\" href=\"#88\">88</a>                   {\n<a name=\"89\" href=\"#89\">89</a>                       <span class=\"string\">\"count(/D:multistatus)\"</span>,\n<a name=\"90\" href=\"#90\">90</a>                       \n<a name=\"91\" href=\"#91\">91</a>  \n<a name=\"92\" href=\"#92\">92</a>          <em class=\"comment\">// should have a /swirl/test-collection</em>\n<a name=\"93\" href=\"#93\">93</a>          <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"94\" href=\"#94\">94</a>                       + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION + <span class=\"string\">\"'])\"</span>,\n<a name=\"95\" href=\"#95\">95</a>                       \n<a name=\"96\" href=\"#96\">96</a>  \n<a name=\"97\" href=\"#97\">97</a>          <em class=\"comment\">// should have a D:resourcetype/D:collection element</em>\n<a name=\"98\" href=\"#98\">98</a>          <span class=\"string\">\"count(/D:multistatus/D:response[D:href/text() = '\"</span>\n<a name=\"99\" href=\"#99\">99</a>                       + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION\n<a name=\"100\" href=\"#100\">100</a>                      + <span class=\"string\">\"']/D:propstat/D:prop/D:resourcetype/D:collection)\"</span>,\n<a name=\"101\" href=\"#101\">101</a>                      \n<a name=\"102\" href=\"#102\">102</a> \n<a name=\"103\" href=\"#103\">103</a>         <em class=\"comment\">// should have a /swirl/test-collection/deep-license.txt</em>\n<a name=\"104\" href=\"#104\">104</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"105\" href=\"#105\">105</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.DEEP_FILE + <span class=\"string\">\"'])\"</span>\n<a name=\"106\" href=\"#106\">106</a>                  };\n<a name=\"107\" href=\"#107\">107</a> \n<a name=\"108\" href=\"#108\">108</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL\n<a name=\"109\" href=\"#109\">109</a>            + SlideTestSetup.COLLECTION, 207);\n<a name=\"110\" href=\"#110\">110</a>     }\n<a name=\"111\" href=\"#111\">111</a> \n<a name=\"112\" href=\"#112\">112</a>     <em>/**<em>*</em></em>\n<a name=\"113\" href=\"#113\">113</a> <em>     * TODO</em>\n<a name=\"114\" href=\"#114\">114</a> <em>     *</em>\n<a name=\"115\" href=\"#115\">115</a> <em>     * @throws Exception TODO</em>\n<a name=\"116\" href=\"#116\">116</a> <em>     */</em>\n<a name=\"117\" href=\"#117\">117</a>     <strong>public</strong> <strong>void</strong> testCollectionWithSpace() throws Exception\n<a name=\"118\" href=\"#118\">118</a>     {\n<a name=\"119\" href=\"#119\">119</a>         <a href=\"../../swirl/workspace/MkcolCommandTest.html\">MkcolCommandTest</a> mkcol = <strong>new</strong> <a href=\"../../swirl/workspace/MkcolCommandTest.html\">MkcolCommandTest</a>(<span class=\"string\">\"\"</span>);\n<a name=\"120\" href=\"#120\">120</a> \n<a name=\"121\" href=\"#121\">121</a>         mkcol.tearDown();\n<a name=\"122\" href=\"#122\">122</a>         mkcol.setUp();\n<a name=\"123\" href=\"#123\">123</a>         mkcol.testCollectionWithSpace();\n<a name=\"124\" href=\"#124\">124</a> \n<a name=\"125\" href=\"#125\">125</a>         xpaths = <strong>new</strong> String[]\n<a name=\"126\" href=\"#126\">126</a>                  {\n<a name=\"127\" href=\"#127\">127</a>                      <span class=\"string\">\"count(/D:multistatus)\"</span>,\n<a name=\"128\" href=\"#128\">128</a>                      \n<a name=\"129\" href=\"#129\">129</a> \n<a name=\"130\" href=\"#130\">130</a>         <em class=\"comment\">// should have a /swirl/MkcolCommandTest.MAC_COLLECTION</em>\n<a name=\"131\" href=\"#131\">131</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[starts-with(text(),'\"</span>\n<a name=\"132\" href=\"#132\">132</a>                      + SlideTestSetup.SWIRL + MkcolCommandTest.MAC_COLLECTION\n<a name=\"133\" href=\"#133\">133</a>                      + <span class=\"string\">\"')])\"</span>,\n<a name=\"134\" href=\"#134\">134</a>                      \n<a name=\"135\" href=\"#135\">135</a> \n<a name=\"136\" href=\"#136\">136</a>         <em class=\"comment\">// should have a D:resourcetype/D:collection element</em>\n<a name=\"137\" href=\"#137\">137</a>         <span class=\"string\">\"count(/D:multistatus/D:response[starts-with(D:href/text(),'\"</span>\n<a name=\"138\" href=\"#138\">138</a>                      + SlideTestSetup.SWIRL + MkcolCommandTest.MAC_COLLECTION\n<a name=\"139\" href=\"#139\">139</a>                      + <span class=\"string\">\"')]/D:propstat/D:prop/D:resourcetype/D:collection)\"</span>,\n<a name=\"140\" href=\"#140\">140</a>                  };\n<a name=\"141\" href=\"#141\">141</a> \n<a name=\"142\" href=\"#142\">142</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL\n<a name=\"143\" href=\"#143\">143</a>            + MkcolCommandTest.MAC_COLLECTION, 207);\n<a name=\"144\" href=\"#144\">144</a> \n<a name=\"145\" href=\"#145\">145</a>         mkcol.tearDown();\n<a name=\"146\" href=\"#146\">146</a>     }\n<a name=\"147\" href=\"#147\">147</a> \n<a name=\"148\" href=\"#148\">148</a>     <em>/**<em>*</em></em>\n<a name=\"149\" href=\"#149\">149</a> <em>     * TODO</em>\n<a name=\"150\" href=\"#150\">150</a> <em>     *</em>\n<a name=\"151\" href=\"#151\">151</a> <em>     * @throws Exception TODO</em>\n<a name=\"152\" href=\"#152\">152</a> <em>     */</em>\n<a name=\"153\" href=\"#153\">153</a>     <strong>public</strong> <strong>void</strong> testDeepFile() throws Exception\n<a name=\"154\" href=\"#154\">154</a>     {\n<a name=\"155\" href=\"#155\">155</a>         xpaths = <strong>new</strong> String[]\n<a name=\"156\" href=\"#156\">156</a>                  {\n<a name=\"157\" href=\"#157\">157</a>                      <span class=\"string\">\"count(/D:multistatus)\"</span>, \n<a name=\"158\" href=\"#158\">158</a>         <em class=\"comment\">// should have only one response</em>\n<a name=\"159\" href=\"#159\">159</a>         <span class=\"string\">\"count(/D:multistatus/D:response)\"</span>,\n<a name=\"160\" href=\"#160\">160</a>                      \n<a name=\"161\" href=\"#161\">161</a> \n<a name=\"162\" href=\"#162\">162</a>         <em class=\"comment\">// should have a /swirl/test-collection and deep-license.txt file</em>\n<a name=\"163\" href=\"#163\">163</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[starts-with(text(),'\"</span>\n<a name=\"164\" href=\"#164\">164</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION\n<a name=\"165\" href=\"#165\">165</a>                      + <span class=\"string\">\"') and contains(text(), \"</span> + SlideTestSetup.DEEP_FILE\n<a name=\"166\" href=\"#166\">166</a>                      + <span class=\"string\">\"')])\"</span>,\n<a name=\"167\" href=\"#167\">167</a>                      \n<a name=\"168\" href=\"#168\">168</a> \n<a name=\"169\" href=\"#169\">169</a>         <em class=\"comment\">// should have a contentlength of SlideTestSetup.DEEP_FILE.length()</em>\n<a name=\"170\" href=\"#170\">170</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:propstat/D:prop/D:getcontentlength[text() = '\"</span>\n<a name=\"171\" href=\"#171\">171</a>                      + SlideTestSetup.DEEP_FILE.length() + <span class=\"string\">\"'])\"</span>\n<a name=\"172\" href=\"#172\">172</a>                  };\n<a name=\"173\" href=\"#173\">173</a> \n<a name=\"174\" href=\"#174\">174</a>         <em class=\"comment\">//prompt = true;</em>\n<a name=\"175\" href=\"#175\">175</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL\n<a name=\"176\" href=\"#176\">176</a>            + SlideTestSetup.DEEP_FILE, 207);\n<a name=\"177\" href=\"#177\">177</a>     }\n<a name=\"178\" href=\"#178\">178</a> \n<a name=\"179\" href=\"#179\">179</a>     <em>/**<em>*</em></em>\n<a name=\"180\" href=\"#180\">180</a> <em>     * TODO</em>\n<a name=\"181\" href=\"#181\">181</a> <em>     *</em>\n<a name=\"182\" href=\"#182\">182</a> <em>     * @throws Exception TODO</em>\n<a name=\"183\" href=\"#183\">183</a> <em>     */</em>\n<a name=\"184\" href=\"#184\">184</a>     <strong>public</strong> <strong>void</strong> testFile() throws Exception\n<a name=\"185\" href=\"#185\">185</a>     {\n<a name=\"186\" href=\"#186\">186</a>         xpaths = <strong>new</strong> String[]\n<a name=\"187\" href=\"#187\">187</a>                  {\n<a name=\"188\" href=\"#188\">188</a>                      <span class=\"string\">\"count(/D:multistatus)\"</span>, \n<a name=\"189\" href=\"#189\">189</a>         <em class=\"comment\">// should have only one response</em>\n<a name=\"190\" href=\"#190\">190</a>         <span class=\"string\">\"count(/D:multistatus/D:response)\"</span>,\n<a name=\"191\" href=\"#191\">191</a>                      \n<a name=\"192\" href=\"#192\">192</a> \n<a name=\"193\" href=\"#193\">193</a>         <em class=\"comment\">// should have a /swirl/license.txt file</em>\n<a name=\"194\" href=\"#194\">194</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[starts-with(text(),'\"</span>\n<a name=\"195\" href=\"#195\">195</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.FILE + <span class=\"string\">\"')])\"</span>,\n<a name=\"196\" href=\"#196\">196</a>                      \n<a name=\"197\" href=\"#197\">197</a> \n<a name=\"198\" href=\"#198\">198</a>         <em class=\"comment\">// should have a contentlength of SlideTestSetup.FILE.length()</em>\n<a name=\"199\" href=\"#199\">199</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:propstat/D:prop/D:getcontentlength[text() = '\"</span>\n<a name=\"200\" href=\"#200\">200</a>                      + SlideTestSetup.FILE.length() + <span class=\"string\">\"'])\"</span>\n<a name=\"201\" href=\"#201\">201</a>                  };\n<a name=\"202\" href=\"#202\">202</a> \n<a name=\"203\" href=\"#203\">203</a>         <em class=\"comment\">//prompt = true;</em>\n<a name=\"204\" href=\"#204\">204</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL\n<a name=\"205\" href=\"#205\">205</a>            + SlideTestSetup.FILE, 207);\n<a name=\"206\" href=\"#206\">206</a>     }\n<a name=\"207\" href=\"#207\">207</a> \n<a name=\"208\" href=\"#208\">208</a>     <em>/**<em>*</em></em>\n<a name=\"209\" href=\"#209\">209</a> <em>     * TODO</em>\n<a name=\"210\" href=\"#210\">210</a> <em>     *</em>\n<a name=\"211\" href=\"#211\">211</a> <em>     * @throws Exception TODO</em>\n<a name=\"212\" href=\"#212\">212</a> <em>     */</em>\n<a name=\"213\" href=\"#213\">213</a>     <strong>public</strong> <strong>void</strong> testNoSlash() throws Exception\n<a name=\"214\" href=\"#214\">214</a>     {\n<a name=\"215\" href=\"#215\">215</a>         xpaths = <strong>new</strong> String[]\n<a name=\"216\" href=\"#216\">216</a>                  {\n<a name=\"217\" href=\"#217\">217</a>                      <span class=\"string\">\"count(/D:multistatus)\"</span>,\n<a name=\"218\" href=\"#218\">218</a>                      \n<a name=\"219\" href=\"#219\">219</a> \n<a name=\"220\" href=\"#220\">220</a>         <em class=\"comment\">// should have a /swirl collection</em>\n<a name=\"221\" href=\"#221\">221</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"222\" href=\"#222\">222</a>                      + SlideTestSetup.SWIRL_NO_SLASH + <span class=\"string\">\"'])\"</span>,\n<a name=\"223\" href=\"#223\">223</a>                      \n<a name=\"224\" href=\"#224\">224</a> \n<a name=\"225\" href=\"#225\">225</a>         <em class=\"comment\">// should have a /swirl/license.txt file</em>\n<a name=\"226\" href=\"#226\">226</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"227\" href=\"#227\">227</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.FILE + <span class=\"string\">\"'])\"</span>,\n<a name=\"228\" href=\"#228\">228</a>                      \n<a name=\"229\" href=\"#229\">229</a> \n<a name=\"230\" href=\"#230\">230</a>         <em class=\"comment\">// should have a /swirl/test-collection</em>\n<a name=\"231\" href=\"#231\">231</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"232\" href=\"#232\">232</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION + <span class=\"string\">\"'])\"</span>,\n<a name=\"233\" href=\"#233\">233</a>                      \n<a name=\"234\" href=\"#234\">234</a> \n<a name=\"235\" href=\"#235\">235</a>         <em class=\"comment\">// should have a /swirl/test-collection and deep-license.txt</em>\n<a name=\"236\" href=\"#236\">236</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[contains(text(),'\"</span>\n<a name=\"237\" href=\"#237\">237</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION\n<a name=\"238\" href=\"#238\">238</a>                      + <span class=\"string\">\"') and contains(text(), '\"</span> + SlideTestSetup.DEEP_FILE\n<a name=\"239\" href=\"#239\">239</a>                      + <span class=\"string\">\"')])\"</span>\n<a name=\"240\" href=\"#240\">240</a>                  };\n<a name=\"241\" href=\"#241\">241</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL_NO_SLASH, 207);\n<a name=\"242\" href=\"#242\">242</a>     }\n<a name=\"243\" href=\"#243\">243</a> \n<a name=\"244\" href=\"#244\">244</a>     <em>/**<em>*</em></em>\n<a name=\"245\" href=\"#245\">245</a> <em>     * TODO</em>\n<a name=\"246\" href=\"#246\">246</a> <em>     *</em>\n<a name=\"247\" href=\"#247\">247</a> <em>     * @throws Exception TODO</em>\n<a name=\"248\" href=\"#248\">248</a> <em>     */</em>\n<a name=\"249\" href=\"#249\">249</a>     <strong>public</strong> <strong>void</strong> testNonexistentFile() throws Exception\n<a name=\"250\" href=\"#250\">250</a>     {\n<a name=\"251\" href=\"#251\">251</a>         <strong>super</strong>.go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL\n<a name=\"252\" href=\"#252\">252</a>                  + SlideTestSetup.BAD_FILE, 404);\n<a name=\"253\" href=\"#253\">253</a> \n<a name=\"254\" href=\"#254\">254</a>         <em>/**<em>*</em></em>\n<a name=\"255\" href=\"#255\">255</a> <em>         * HTTP/1.1 404</em>\n<a name=\"256\" href=\"#256\">256</a> <em>         * Not+Found%3A+No+object+found+at+%2Ffiles%2Fnonexistent%2Efile Date:</em>\n<a name=\"257\" href=\"#257\">257</a> <em>         * Wed, 23 Jun 2004 21:52:41 GMT Server: Jetty/5.0.RC0 (Windows XP/5.1</em>\n<a name=\"258\" href=\"#258\">258</a> <em>         * x86 java/1.4.2_03) Expires: Thu, 01 Jan 1970 00:00:00 GMT</em>\n<a name=\"259\" href=\"#259\">259</a> <em>         * Set-Cookie: JSESSIONID=503p1bd95or0i;path=/slide Content-Type:</em>\n<a name=\"260\" href=\"#260\">260</a> <em>         * text/html Content-Length: 1329</em>\n<a name=\"261\" href=\"#261\">261</a> <em>         */</em>\n<a name=\"262\" href=\"#262\">262</a>     }\n<a name=\"263\" href=\"#263\">263</a> \n<a name=\"264\" href=\"#264\">264</a>     <em>/**<em>*</em></em>\n<a name=\"265\" href=\"#265\">265</a> <em>     * TODO</em>\n<a name=\"266\" href=\"#266\">266</a> <em>     *</em>\n<a name=\"267\" href=\"#267\">267</a> <em>     * @throws Exception TODO</em>\n<a name=\"268\" href=\"#268\">268</a> <em>     */</em>\n<a name=\"269\" href=\"#269\">269</a>     <strong>public</strong> <strong>void</strong> testSlash() throws Exception\n<a name=\"270\" href=\"#270\">270</a>     {\n<a name=\"271\" href=\"#271\">271</a>         xpaths = <strong>new</strong> String[]\n<a name=\"272\" href=\"#272\">272</a>                  {\n<a name=\"273\" href=\"#273\">273</a>                      <span class=\"string\">\"count(/D:multistatus)\"</span>,\n<a name=\"274\" href=\"#274\">274</a>                      \n<a name=\"275\" href=\"#275\">275</a> \n<a name=\"276\" href=\"#276\">276</a>         <em class=\"comment\">// should have a /swirl collection</em>\n<a name=\"277\" href=\"#277\">277</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"278\" href=\"#278\">278</a>                      + SlideTestSetup.SWIRL_NO_SLASH + <span class=\"string\">\"'])\"</span>,\n<a name=\"279\" href=\"#279\">279</a>                      \n<a name=\"280\" href=\"#280\">280</a> \n<a name=\"281\" href=\"#281\">281</a>         <em class=\"comment\">// should have a /swirl/license.txt file</em>\n<a name=\"282\" href=\"#282\">282</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"283\" href=\"#283\">283</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.FILE + <span class=\"string\">\"'])\"</span>,\n<a name=\"284\" href=\"#284\">284</a>                      \n<a name=\"285\" href=\"#285\">285</a> \n<a name=\"286\" href=\"#286\">286</a>         <em class=\"comment\">// should have a /swirl/test-collection</em>\n<a name=\"287\" href=\"#287\">287</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[text() = '\"</span>\n<a name=\"288\" href=\"#288\">288</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION + <span class=\"string\">\"'])\"</span>,\n<a name=\"289\" href=\"#289\">289</a>                      \n<a name=\"290\" href=\"#290\">290</a> \n<a name=\"291\" href=\"#291\">291</a>         <em class=\"comment\">// should have a /swirl/test-collection and deep-license.txt</em>\n<a name=\"292\" href=\"#292\">292</a>         <span class=\"string\">\"count(/D:multistatus/D:response/D:href[contains(text(),'\"</span>\n<a name=\"293\" href=\"#293\">293</a>                      + SlideTestSetup.SWIRL + SlideTestSetup.COLLECTION\n<a name=\"294\" href=\"#294\">294</a>                      + <span class=\"string\">\"') and contains(text(), '\"</span> + SlideTestSetup.DEEP_FILE\n<a name=\"295\" href=\"#295\">295</a>                      + <span class=\"string\">\"')])\"</span>\n<a name=\"296\" href=\"#296\">296</a>                  };\n<a name=\"297\" href=\"#297\">297</a>         go(SlideTestSetup.LOCALHOST + SlideTestSetup.SWIRL, 207);\n<a name=\"298\" href=\"#298\">298</a>     }\n<a name=\"299\" href=\"#299\">299</a> \n<a name=\"300\" href=\"#300\">300</a>     <em>/**<em>*</em></em>\n<a name=\"301\" href=\"#301\">301</a> <em>     * TODO</em>\n<a name=\"302\" href=\"#302\">302</a> <em>     *</em>\n<a name=\"303\" href=\"#303\">303</a> <em>     * @param uri TODO</em>\n<a name=\"304\" href=\"#304\">304</a> <em>     *</em>\n<a name=\"305\" href=\"#305\">305</a> <em>     * @return TODO</em>\n<a name=\"306\" href=\"#306\">306</a> <em>     */</em>\n<a name=\"307\" href=\"#307\">307</a>     <strong>protected</strong> HttpMethod createMethod(String uri)\n<a name=\"308\" href=\"#308\">308</a>     {\n<a name=\"309\" href=\"#309\">309</a>         <strong>return</strong> <strong>new</strong> PropFindMethod(uri, PropFindMethod.DEPTH_INFINITY);\n<a name=\"310\" href=\"#310\">310</a>     }\n<a name=\"311\" href=\"#311\">311</a> \n<a name=\"312\" href=\"#312\">312</a>     <em>/**<em>*</em></em>\n<a name=\"313\" href=\"#313\">313</a> <em>     * TODO</em>\n<a name=\"314\" href=\"#314\">314</a> <em>     *</em>\n<a name=\"315\" href=\"#315\">315</a> <em>     * @param uri TODO</em>\n<a name=\"316\" href=\"#316\">316</a> <em>     * @param expectedVal TODO</em>\n<a name=\"317\" href=\"#317\">317</a> <em>     *</em>\n<a name=\"318\" href=\"#318\">318</a> <em>     * @throws Exception TODO</em>\n<a name=\"319\" href=\"#319\">319</a> <em>     */</em>\n<a name=\"320\" href=\"#320\">320</a>     <strong>protected</strong> <strong>void</strong> go(String uri, <strong>int</strong> expectedVal) throws Exception\n<a name=\"321\" href=\"#321\">321</a>     {\n<a name=\"322\" href=\"#322\">322</a>         <strong>super</strong>.go(uri, expectedVal);\n<a name=\"323\" href=\"#323\">323</a>         assertEquals(<span class=\"string\">\"Content-Type should be text/xml; charset=\\&quot;UTF-8\\&quot;\"</span>,\n<a name=\"324\" href=\"#324\">324</a>                      getMethod().getResponseHeader(<span class=\"string\">\"Content-Type\"</span>).getValue(),\n<a name=\"325\" href=\"#325\">325</a>                      <span class=\"string\">\"text/xml; charset=\\&quot;UTF-8\\&quot;\"</span>);\n<a name=\"326\" href=\"#326\">326</a> \n<a name=\"327\" href=\"#327\">327</a>         DOMReader reader = <strong>new</strong> DOMReader();\n<a name=\"328\" href=\"#328\">328</a>         XMLResponseMethodBase method = (XMLResponseMethodBase)getMethod();\n<a name=\"329\" href=\"#329\">329</a> \n<a name=\"330\" href=\"#330\">330</a>         body = reader.read(method.getResponseDocument());\n<a name=\"331\" href=\"#331\">331</a> \n<a name=\"332\" href=\"#332\">332</a>         <strong>for</strong>(<strong>int</strong> i = 0; i &lt; xpaths.length; ++i)\n<a name=\"333\" href=\"#333\">333</a>         {\n<a name=\"334\" href=\"#334\">334</a>             runXPath(xpaths[i], 1);\n<a name=\"335\" href=\"#335\">335</a>         }\n<a name=\"336\" href=\"#336\">336</a> \n<a name=\"337\" href=\"#337\">337</a>         <strong>if</strong>(prompt)\n<a name=\"338\" href=\"#338\">338</a>         {\n<a name=\"339\" href=\"#339\">339</a>             runPrompt();\n<a name=\"340\" href=\"#340\">340</a>         }\n<a name=\"341\" href=\"#341\">341</a>     }\n<a name=\"342\" href=\"#342\">342</a> \n<a name=\"343\" href=\"#343\">343</a>     <em>/**<em>*</em></em>\n<a name=\"344\" href=\"#344\">344</a> <em>     * TODO</em>\n<a name=\"345\" href=\"#345\">345</a> <em>     */</em>\n<a name=\"346\" href=\"#346\">346</a>     <strong>private</strong> <strong>void</strong> runPrompt()\n<a name=\"347\" href=\"#347\">347</a>     {\n<a name=\"348\" href=\"#348\">348</a>         String xpath = <span class=\"string\">\"\"</span>;\n<a name=\"349\" href=\"#349\">349</a> \n<a name=\"350\" href=\"#350\">350</a>         <strong>while</strong>(!xpath.equals(<span class=\"string\">\"quit\"</span>))\n<a name=\"351\" href=\"#351\">351</a>         {\n<a name=\"352\" href=\"#352\">352</a>             xpath = JOptionPane.showInputDialog(<span class=\"string\">\"xpath\"</span>);\n<a name=\"353\" href=\"#353\">353</a>             runXPath(xpath, 1);\n<a name=\"354\" href=\"#354\">354</a>         }\n<a name=\"355\" href=\"#355\">355</a>     }\n<a name=\"356\" href=\"#356\">356</a> \n<a name=\"357\" href=\"#357\">357</a>     <em>/**<em>*</em></em>\n<a name=\"358\" href=\"#358\">358</a> <em>     * TODO</em>\n<a name=\"359\" href=\"#359\">359</a> <em>     *</em>\n<a name=\"360\" href=\"#360\">360</a> <em>     * @param xpath TODO</em>\n<a name=\"361\" href=\"#361\">361</a> <em>     * @param expectedVal TODO</em>\n<a name=\"362\" href=\"#362\">362</a> <em>     */</em>\n<a name=\"363\" href=\"#363\">363</a>     <strong>private</strong> <strong>void</strong> runXPath(String xpath, <strong>int</strong> expectedVal)\n<a name=\"364\" href=\"#364\">364</a>     {\n<a name=\"365\" href=\"#365\">365</a>         <strong>try</strong>\n<a name=\"366\" href=\"#366\">366</a>         {\n<a name=\"367\" href=\"#367\">367</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"368\" href=\"#368\">368</a>             {\n<a name=\"369\" href=\"#369\">369</a>                 log.debug(<span class=\"string\">\"xpath: \"</span> + xpath);\n<a name=\"370\" href=\"#370\">370</a>             }\n<a name=\"371\" href=\"#371\">371</a> \n<a name=\"372\" href=\"#372\">372</a>             DocumentLogger.logDocument(log, <span class=\"string\">\"body:\"</span>, body);\n<a name=\"373\" href=\"#373\">373</a> \n<a name=\"374\" href=\"#374\">374</a>             Object ret = body.selectObject(xpath);\n<a name=\"375\" href=\"#375\">375</a> \n<a name=\"376\" href=\"#376\">376</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"377\" href=\"#377\">377</a>             {\n<a name=\"378\" href=\"#378\">378</a>                 log.debug(xpath + <span class=\"string\">\" = \"</span> + ret);\n<a name=\"379\" href=\"#379\">379</a>             }\n<a name=\"380\" href=\"#380\">380</a> \n<a name=\"381\" href=\"#381\">381</a>             <strong>if</strong>(!prompt)\n<a name=\"382\" href=\"#382\">382</a>             {\n<a name=\"383\" href=\"#383\">383</a>                 assertEquals(<span class=\"string\">\"Response should have \"</span> + xpath + <span class=\"string\">\" equal to \"</span>\n<a name=\"384\" href=\"#384\">384</a>                              + expectedVal, expectedVal,\n<a name=\"385\" href=\"#385\">385</a>                              ((Number)ret).intValue());\n<a name=\"386\" href=\"#386\">386</a>             }\n<a name=\"387\" href=\"#387\">387</a>         }\n<a name=\"388\" href=\"#388\">388</a>         <strong>catch</strong>(Exception e)\n<a name=\"389\" href=\"#389\">389</a>         {\n<a name=\"390\" href=\"#390\">390</a>             log.error(<span class=\"string\">\"Trying to run xpath: \"</span> + xpath, e);\n<a name=\"391\" href=\"#391\">391</a>         }\n<a name=\"392\" href=\"#392\">392</a>     }\n<a name=\"393\" href=\"#393\">393</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34383.0}