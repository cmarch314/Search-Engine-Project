{"text": "Navigation Up Table of Contents Bibliography Index Title Page Circle Type Circle Definition An object of the class Circle is a circle in two dimensional Euclidean plane 2 Its boundary splits the plane into a bounded and an unbounded side By definition an empty Circle has no boundary and no bounded side i e its unbounded side equals the whole plane 2 A Circle containing exactly one point p has no bounded side its boundary is p and its unbounded side equals 2 p Types Circle Point Point type The following type is only needed if the member function is valid of Min circle 2 is used Circle Distance Distance type The function squared radius see below returns an object of this type Creation void circle set sets circle to the empty circle void circle set Point p sets circle to the circle containing exactly p void circle set Point p Point q sets circle to the circle with diameter equal to the segment connecting p and q The algorithm guarantees that set is never called with two equal points void circle set Point p Point q Point r sets circle to the circle through p q r The algorithm guarantees that set is never called with three collinear points Predicates bool circle has on unbounded side Point p returns true iff p lies properly outside of circle Each of the following predicates is only needed if the corresponding predicate of Min circle 2 is used CGAL Bounded side circle bounded side Point p returns CGAL ON BOUNDED SIDE CGAL ON BOUNDARY or CGAL ON UNBOUNDED SIDE iff p lies properly inside on the boundary or properly outside of circle resp bool circle has on bounded side Point p returns true iff p lies properly inside circle bool circle has on boundary Point p returns true iff p lies on the boundary of circle bool circle is empty returns true iff circle is empty this implies degeneracy bool circle is degenerate returns true iff circle is degenerate i e if circle is empty or equal to a single point Additional Operations for Checking The following operations are only needed if the member function is valid of Min circle 2 is used bool circle circle2 returns true iff circle and circle2 are equal Point circle center returns the center of circle Distance circle squared radius returns the squared radius of circle I O The following I O operators are only needed if the corresponding I O operators of Min circle 2 are used std ostream std ostream os circle writes circle to output stream os CGAL Window stream CGAL Window stream ws circle writes circle to window stream ws Next Min ellipse 2 Traits Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation_ref/Circle.html", "title": "circle", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation_ref/MinCircle2Traits.tex' -->\n<html> <head>  \n<title>Circle</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n\n<h3>Circle Type (<I>Circle</I>)</h3>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn object of the class <I>Circle</I> is a circle in two-dimensional\nEuclidean plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUB>2</SUB></I></MATH>. Its boundary splits the plane into a bounded\nand an unbounded side. By definition, an empty <I>Circle</I> has no\nboundary and no bounded side, i.e. its unbounded side equals the\nwhole plane <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUB>2</SUB></I></MATH>. A <I>Circle</I> containing exactly one point&nbsp;<MATH><I>p</I></MATH>\nhas no bounded side, its boundary is <MATH><I>{p}</I></MATH>, and its unbounded side\nequals <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUB>2</SUB></I></MATH>-<MATH><I>{p}</I></MATH>.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Circle::Point\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Point type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nThe following type is only needed, if the member function <I>is_valid</I>\nof <I><A HREF=\"Class_Min_circle_2.html#Cross_link_anchor_1139\">Min_circle_2</A></I> is used.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Circle::Distance\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Distance type. The function <I><A HREF=\"../Kernel_23_ref/Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A></I> (see below)\n        returns an object of this type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    circle.set ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets <I>circle</I> to the empty circle.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.set (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets <I>circle</I> to the circle containing exactly <MATH><I>{</I></MATH><I>p</I><MATH><I>}</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.set (  Point p,  Point q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets <I>circle</I> to the circle with diameter equal to the segment\n        connecting <I>p</I> and <I>q</I>. The algorithm guarantees that\n        <I>set</I> is never called with two equal points.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    void\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.set (  Point p,  Point q,  Point r)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets <I>circle</I> to the circle through <I>p</I>,<I>q</I>,<I>r</I>.\n        The algorithm guarantees that <I>set</I> is never called with\n        three <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A> points.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.has_on_unbounded_side (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>p</I> lies properly outside of <I>circle</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nEach of the following predicates is only needed, if the corresponding\npredicate of <I><A HREF=\"Class_Min_circle_2.html#Cross_link_anchor_1139\">Min_circle_2</A></I> is used.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_98\">CGAL::Bounded_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.bounded_side (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>CGAL::</I><I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A></I>,\n        <I>CGAL::</I><I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A></I>, or\n        <I>CGAL::</I><I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A></I> iff <I>p</I> lies properly inside,\n        on the boundary, or properly outside of <I>circle</I>, resp.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.has_on_bounded_side (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>p</I> lies properly inside <I>circle</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.has_on_boundary (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>p</I> lies on the boundary\n        of <I>circle</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    circle.is_empty ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>circle</I> is empty (this implies\n        degeneracy).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.is_degenerate ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>circle</I> is degenerate, i.e. if\n        <I>circle</I> is empty or equal to a single point.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Additional Operations for Checking</H3>\n<P>\n\nThe following operations are only needed, if the member function\n<I>is_valid</I> of <I><A HREF=\"Class_Min_circle_2.html#Cross_link_anchor_1139\">Min_circle_2</A></I> is used.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     circle ==  circle2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I>, iff <I>circle</I> and <I>circle2</I> are equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Point\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    circle.center ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the center of <I>circle</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Distance\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    circle.<A HREF=\"../Kernel_23_ref/Function_squared_radius.html#Cross_link_anchor_267\">squared_radius</A> ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the squared radius of <I>circle</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>I/O</H3>\n<P>\n\nThe following I/O operators are only needed, if the corresponding I/O\noperators of <I><A HREF=\"Class_Min_circle_2.html#Cross_link_anchor_1139\">Min_circle_2</A></I> are used.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    std::ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     std::ostream&amp; os &lt;&lt;  circle\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    writes <I>circle</I> to output stream <I>os</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A>&amp;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A>&amp; ws &lt;&lt;  circle\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    writes <I>circle</I> to window stream <I>ws</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Min_ellipse_2.html\"><I>Min_ellipse_2&lt;Traits&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_52!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38857.0}