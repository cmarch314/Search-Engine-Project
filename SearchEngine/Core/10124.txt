{"text": "Informatics 42 Winter 2 12 David G Kay UC Irvine Lab Assignment F This assignment is due at the end of lab on Wednesday March 14 Turn in whatever you have completed by that date since it s the end of the quarter there isn t much leeway for later submissions Please read the introductory instructions carefully For this lab you will implement some more enhancements to the theme park simulator There are nine parts to the assignment each of which is independent You don t have to do them in order and you don t have to do all of them we don t expect anyone to do all of them More important than how many of the parts you implement is that what you do implement is thorough and correct Partial but correct implementations that state clearly what they do and don t include will receive much more credit than attempts to do everything but that contain bugs or other unexpected or undocumented behavior It s your choice whether you make your enhancements cumulatively e g implementing part b on top of the changes you made for part a or independently i e starting from the base simulator for each part There is ample opportunity in many of these parts for you to make design decisions in three different areas the precise functionality and behavior of the enhancement the user interface and the design of the code you write A thorough discussion of the design choices you made in each area will contribute to your score In that way a group that thought a lot about the user interface they designed for one of the parts describing clearly the rationale for their design choices may get as high a score as a group that implemented more features correctly but that followed a straightforward design approach without much analysis or description We expect every group actually to implement some of these features but thorough consideration and description of design choices can be as valuable as raw coding Along with your code submit a short document explaining very clearly what parts of the assignment you completed correctly and including the discussion and analysis mentioned in the previous paragraph The simulator s home page is at http www ics uci edu kay courses i42 wildride a Using the tkinter examples as a basis create a setup or preference panel for the simulator The panel should display the default parameters allow the user to change those values and include a button for starting the actual simulation You should allow the user to set such values as opening time closing time park entrance park exit the name of the customers file the name of the rides file and if you implement the timer code below the simulation speed If there are other constants in the code consider adding them to your preference pane A good way to approach designing many GUIs is to start with the model view distinction Write a separate function to supply the information you ll want your GUI to supply but first write an equivalent function that s text based prompting the user for the needed information or calculating it Once that text based version works you can write the GUI version with the same parameters and return type Think about the GUI components that make the most sense for entry of each kind of information Making sense in this context means minimizing effort both in terms of typing and in terms of thinking for the user and taking advantage of conventions that other software follows You should make your display pleasing and legible using the pack or grid layout manager b Implement the commands that write complete statistics out to a file these should include the summary statistics followed by a line of statistics for each customer or each ride Choose a format that is complete concise and easy to scan c Using your plan from Lab E or your partner s plan or a new plan change the simulator s tick length from one per minute to one per second Then re run your tests rescaling the data too of course and see whether the results are significantly different d Using Tkinter s Canvas widget implement a graphical display for the overview statistics printed for the customers and for the attractions Bear in mind the general principle that every pixel should contribute to conveying information Don t get carried away with fancy decoration e Using Tkinter create a real time graphical display so that some aspect of the simulation can be viewed while the simulation is running Here are some ideas Display the queue length for each ride or selected rides Plot a map of the park showing the location of each customer Plot a map of the park showing the location of each ride perhaps using a color to indicate the estimated wait f Implement store type rides as mentioned in the problem description g Create a GUI for the customer file generator you created in Lab E You might integrate this with the simulator itself perhaps having a pane or button in the setup panel that allows the user to generate the customer data You might also implement a way for users to describe random numbers generated according to some distribution other than randomly across the whole space of possible values If you d like to generate ride data using a grammar based approach and turn that into a GUI too go right ahead h Change the implementation of one or more of the data structures you identified in the Ninth Homework to make them more efficient Be sure to describe your choices and their performance relative to the original i Create a GUI progress bar that shows how far a simulation has come or has to go until completion The usual warnings wisdom and what to dos apply to this assignment Get started early Read and re read the specifications Do this with a partner you haven t worked with yet this quarter and make sure Joel knows whom you re paired with Use Checkmate for your submissions as usual each pair should submit just one solution The usual grading criteria for lab assignments apply Fill out a partner evaluation at EEE Do this by the end of the day on Friday March 16 or you won t get credit Written by David G Kay and Jeff Ridenour Winter 2 5 modified Winter 2 6 Winter 2 8 and Winter 2 12 ", "_id": "http://www.ics.uci.edu/~kay/courses/i42/hw/labF.html", "title": "lab assignment f", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Thursday, March 2, 2006 3:38 PM\">\n<TITLE>Lab Assignment F</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"AD9E542D\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, Java, OOP\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"A lab assignment for Informatics 42, a second-quarter course in computer science for Informatics majors in the Bren School of Information and Computer Sciences, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2005 by David G. Kay.  All rights reserved.\">\n<link href=\"/~kay/courses/i42/code.css\" rel=\"stylesheet\" type=\"text/css\" />\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<P><FONT FACE=\"Goudy Old Style\">Informatics 42 &bull; Winter 2012 &bull; David G. Kay\n  &bull; UC Irvine</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\" SIZE=6><B>Lab Assignment F</B></FONT></P>\n<P><FONT FACE=\"Goudy Old Style\">This assignment is due at the end of lab on Wednesday, March 14. Turn in whatever you have completed by that date; since it's the end of the quarter, there isn't much leeway for later submissions.  Please read the introductory instructions carefully.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">For this lab, you will implement some more\nenhancements to the theme park simulator.  There are nine parts to the\nassignment, each of which is independent.  You don&#39;t have to do them\nin order, and you don&#39;t have to do all of them (we don&#39;t expect\nanyone to do <I>all</I> of them).  More important than how many of the parts\nyou implement is that what you <I>do</I> implement is thorough and correct.\n Partial but correct implementations (that state clearly what they do and\ndon&#39;t include) will receive much more credit than attempts to do everything, but\nthat contain bugs or other unexpected or undocumented behavior.  It&#39;s\nyour choice whether you make your enhancements cumulatively (e.g., implementing\npart <B>(b)</B> on top of the changes you made for part <B>(a)</B>) or independently\n(i.e., starting from the base simulator for each part).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">There is ample opportunity in many of these\nparts for you to make design decisions in three different areas:  the precise\nfunctionality and behavior of the enhancement, the user interface, and the\ndesign of the code you write.  A thorough discussion of the design choices\nyou made in each area will contribute to your score.  In that way, a group\nthat thought a lot about the user interface they designed for one of the\nparts, describing clearly the rationale for their design choices, may get\nas high a score as a group that implemented more features (correctly) but\nthat followed a straightforward design approach without much analysis or\ndescription.  We expect every group actually to implement some of these\nfeatures, but thorough consideration and description of design choices can\nbe as valuable as raw coding.</FONT></P>\n<P>Along with your code, submit a short document explaining very clearly what parts of the assignment you completed correctly and including the discussion and analysis mentioned in the previous paragraph.</P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The simulator&#39;s home page is at </FONT><FONT FACE=\"Courier New\" SIZE=2><A HREF=\"http://www.ics.uci.edu/~kay/courses/i42/wildride/\">http://www.ics.uci.edu/~kay/courses/i42/wildride/</A></FONT><FONT FACE=\"Goudy Old Style\">.\n </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(a)</B>  Using the tkinter examples as\na basis, create a setup or preference panel for the simulator.  The panel\nshould display the default parameters, allow the user to change those values,\nand include a button for starting the actual simulation.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You should allow the user to set such values\nas opening time, closing time, park entrance, park exit, the name of the\ncustomers file, the name of the rides file, and (if you implement the timer\ncode below) the simulation speed.  If there are other constants in the code,\nconsider adding them to your preference pane.</FONT></P>\n<P>A good way to approach designing many GUIs is to start with the model/view distinction. Write a separate function to supply the information you'll want your GUI to supply, but first write an equivalent function that's text-based, prompting the user for the needed information (or calculating it). Once that text-based version works, you can write the GUI version (with the same parameters and return type).</P>\n<P>\n<FONT FACE=\"Goudy Old Style\">Think about the GUI components that make the\nmost sense for entry of each kind of information.  &quot;Making sense&quot;\nin this context means minimizing effort (both in terms of typing and in\nterms of thinking) for the user and taking advantage of conventions that\nother software follows.  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">You should make your display pleasing and legible,\nusing the <code>pack</code> or <code>grid</code> layout manager.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(b)</B> Implement the commands that write complete statistics out to a file; these should include the summary statistics followed by a line of statistics for each customer or each ride. Choose a format that is complete, concise, and easy to scan.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(c)</B> Using your plan from Lab E (or\nyour partner&#39;s plan, or a new plan), change the simulator&#39;s tick\nlength from one per minute to one per second.</FONT></P>\n<P> <FONT FACE=\"Goudy Old Style\">Then re-run your tests (rescaling the data,\n  too, of course) and see whether the results are significantly different.</FONT></P>\n<P><FONT FACE=\"Goudy Old Style\"><B>(d)</B>  Using Tkinter's <code>Canvas</code> widget, implement a graphical display for the overview \n  statistics printed for the customers and for the attractions.  (Bear in\n  mind the general principle that every pixel should contribute to conveying\n  information.  Don&#39;t get carried away with fancy decoration.)</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(e)</B>  Using Tkinter, create a real-time graphical display so that some aspect of\nthe simulation can be viewed while the simulation is running.  Here are\nsome ideas:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Display the queue length for each ride (or\nselected rides)</FONT><BR>\n</LI>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Plot a map of the park showing the location\nof each customer</FONT><BR>\n</LI>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Plot a map of the park showing the location\nof each ride, perhaps using a color to indicate the estimated wait</FONT></LI>\n</UL>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(f)</B>  Implement store-type rides as \nmentioned in the problem description.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(g)</B>  Create a GUI for the customer-file\ngenerator you created in Lab E.  You might integrate this with the simulator\nitself, perhaps having a pane or button in the setup panel that allows the\nuser to generate the customer data.  You might also implement a way for\nusers to describe random numbers generated according to some distribution\n(other than randomly across the whole space of possible values).</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">If you&#39;d like to generate ride data using\na grammar-based approach and turn that into a GUI, too, go right ahead.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(h)</B>  Change the implementation of one\nor more of the data structures you identified in the Ninth Homework to make\nthem more efficient.  Be sure to describe your choices and their performance\nrelative to the original.</FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\"><B>(i)</B>  Create a GUI progress bar that\nshows how far a simulation has come (or has to go until completion).  </FONT></P>\n<P>\n<FONT FACE=\"Goudy Old Style\">The usual warnings, wisdom, and what-to-dos\napply to this assignment:</FONT></P>\n<UL>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Get started early.</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Read and re-read the specifications.</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Do this with a partner you haven&#39;t worked\nwith yet this quarter and make sure Joel knows whom you're paired with.</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">Use Checkmate for your submissions as usual;\neach pair should submit just one solution.</FONT><BR>\n</LI><LI>\n<FONT FACE=\"Goudy Old Style\">The usual <A HREF=\"http://www.ics.uci.edu/~kay/courses/i42/hw/assignments_index_files/grading_criteria_for_lab.html\">grading criteria</A>\nfor lab assignments apply.</FONT><BR>\n</LI>\n<LI>\n<FONT FACE=\"Goudy Old Style\">Fill out a partner evaluation at EEE.</FONT> Do this by the end of the day on Friday, March 16, or you won't get credit.</LI>\n</UL>\n<BR>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Written by David G. Kay and Jeff Ridenour,\nWinter 2005; modified Winter 2006, Winter 2008, and Winter 2012.</FONT></P>\n<BR CLEAR=ALL>\n</BODY>\n</HTML>", "id": 10124.0}