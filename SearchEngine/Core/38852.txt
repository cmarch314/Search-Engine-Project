{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Constrained triangulation 2 Traits Tds Itag DefinitionA constrained triangulation is a triangulation of a set of points which has to include among its edges a given set of segments joining the points The given segments are called constraints and the corresponding edges in the triangulation are called constrained edges The endpoints of constrained edges are of course vertices of the triangulation However the triangulation may include include other vertices as well There are three versions of constrained triangulations In the basic version the constrained triangulation does not handle intersecting constraints and the set of input constraints is required to be a set of segments that do not intersect except possibly at their endpoints Any number of constrained edges are allowed to share the same endpoint Vertical constrained edges are allowed as well as constrained edges with null length The two other versions support intersecting input constraints In those versions input constraints are allowed to be intersecting overlapping or partially overlapping segments The triangulation introduce additional vertices at each point which is a proper intersection point of two constraints A single constraint intersecting other constraints will then appear as the union of several constrained edges of the triangulation The two versions dealing with intersecting constraints slightly differ in the way intersecting constraints are dealt with One of them is designed to be robust when predicates are evaluated exactly but constructions i e intersection computations are approximative The other one is designed to be used with an exact arithmetic meaning exact evaluation of predicates and exact computation of intersections This last version finds its full efficiency when used in conjunction with a constraint hierarchy data structure as provided in the class Constrained triangulation plus 2 See section The class Constrained triangulation 2 Traits Tds Itag of the CGAL library implements constrained triangulations The template parameter Traits stands for a geometric traits class It has to be a model of the concept TriangulationTraits 2 When intersection of input constraints are supported the geometric traits class is required to provide additional function object types to compute the intersection of two segments It has then to be a model of the concept ConstrainedTriangulationTraits 2 The template parameter Tds stands for a triangulation data structure class that has to be a model of the concept TriangulationDataStructure 2 The third parameter Itag is the intersection tag which serves to choose between the different strategies to deal with constraints intersections CGAL provides three valid types for this parameter CGAL No intersection tag disallows intersections of input constraints CGAL Exact predicates tag is to be used when the traits class provides exact predicates but approximate constructions of the intersection points CGAL Exact intersections tag is to be used in conjunction with an exact arithmetic type The information about constrained edges is stored in the faces of the triangulation Thus the nested Face type of a constrained triangulation offers additonnal functionalities to deal with this information These additional functionalities induce additionnal requirements on the base face class plugged into the triangulation data structure of a constrained Delaunay triangulation The base face of a constrained Delaunay triangulation has to be a model of the concept ConstrainedTriangulationFaceBase 2 CGAL provides default instantiations for the template parameters Tds and Itag and for the ConstrainedTriangulationFaceBase 2 If Gt is the geometric traits parameter the default for ConstrainedTriangulationFaceBase 2 is the class CGAL Constrained triangulation face base 2 Gt and the default for the triangulation data structure parameter is the class CGAL Triangulation data structure 2 CGAL Triangulation vertex base 2 Gt CGAL Constrained triangulation face base 2 Gt The default intersection tag is CGAL No intersection tag include CGAL Constrained triangulation 2 h Inherits From Triangulation 2 Traits Tds Types typedef std pair Point Point Constraint The type of input constraints typedef Itag Intersection tag The intersection tag which decides how intersections between input constraints are dealt with Creation Constrained triangulation 2 Traits Tds Itag ct default constructor Constrained triangulation 2 Traits Tds Itag ct Constrained triangulation 2 ct1 Copy constructor all faces and vertices are duplicated and the constrained status of edges is copied Constrained triangulation 2 Traits Tds Itag ct std list Constraint lc Traits t Traits Introduces a constrained triangulation the constrained edges of which are the edges of the list lc template class InputIterator Constrained triangulation 2 Traits Tds Itag ct InputIterator first InputIterator last Traits t Traits A templated constructor which introduces and builds a constrained triangulation with constrained edges in the range first last Precondition The value type of first and last is Constraint Queries bool ct is constrained Edge e Returns true if edge e is a constrained edge bool ct are there incident constraints Vertex handle v Returns true if at least one of the edges incident to vertex v is constrained template class OutputItEdges OutputItEdges ct incident constraints Vertex handle v OutputItEdges out OutputItEdges is an ouput iterator with Edge as value type Outputs the constrained edges incident to v in the sequence pointed to by out and returns the resulting output iterator Insertion and removal Vertex handle ct insert Point p Face handle f Face handle Inserts point p and restores the status constrained or not of all the touched edges If present f is used as an hint for the location of p Vertex handle ct insert Point p Locate type lt Face handle loc int li Same as above except that the location of the point p to be inserted is assumed to be given by lt loc i Vertex handle ct push back Point p Equivalent to insert p template class InputIterator int ct insert InputIterator first InputIterator last Inserts the points in the range first last Returns the number of inserted points Precondition The value type of first and last is Point void ct insert constraint Point a Point b Inserts points a and b and inserts segment ab as a constraint Removes the faces crossed by segment ab and creates new faces instead If a vertex c lies on segment ab constraint ab is replaced by the two constraints ac and cb Apart from the insertion of a and b the algorithm runs in time proportionnal to the number of removed triangles Precondition The relative interior of segment ab does not intersect the relative interior of another constrained edge void ct push back Constraint c Inserts constraints c as above void ct insert constraint Vertex handle va Vertex handle vb Inserts the line segment s whose endpoints are the vertices va and vb as a constrained edge e The triangles intersected by s are removed and new ones are created void ct remove Vertex handle v Removes a vertex v Precondition Vertex v is not incident to a constrained edge void ct remove incident constraints Vertex handle v Make the edges incident to vertex v unconstrained edges void ct remove constrained edge Face handle f int i Make edge f i no longer constrained advanced bool ct is valid bool verbose false int level Checks the validity of the triangulation and the consistency of the constrained marks in edges advanced I O ostream ostream os Constrained triangulation 2 Traits Tds Ct Writes the triangulation and for each face f and integers i 1 2 write C or N depending whether edge f i is constrained or not See AlsoCGAL Triangulation 2 Traits Tds TriangulationDataStructure 2 TriangulationTraits 2 ConstrainedTriangulationTraits 2 ConstrainedTriangulationFaceBase 2 Implementation The insertion of a constrained edge runs in time proportionnal to the number of triangles intersected by this edge Next Constrained triangulation face base 2 Traits Fb Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Triangulation_2_ref/Class_Constrained_triangulation_2.html", "title": "constrained_triangulation_2&lt;traits,tds,itag&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Triangulation_2_ref/Constrained_triangulation_2.tex' -->\n<html> <head>  \n<title>Constrained_triangulation_2&lt;Traits,Tds,Itag&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_912\"></A>\n\n<A NAME=\"Cross_link_anchor_913\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_877\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Constrained_triangulation_2<Traits,Tds,Itag>\"></A>\n<h2><I>CGAL::Constrained_triangulation_2&lt;Traits,Tds,Itag&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>A constrained triangulation is a triangulation of a set of points\nwhich has to include among its edges \na given set of segments\njoining the points. The given segments are\ncalled <I>constraints</I>  and the corresponding \nedges in the triangulation are called <I>constrained edges</I>.\n<P>\n\nThe endpoints of constrained edges are of course vertices of the\ntriangulation. However the triangulation may include\ninclude other vertices as well.\nThere are three versions of  constrained triangulations\n<UL>\n<LI>In the basic version, the constrained triangulation \ndoes not handle intersecting constraints, and the set of input \nconstraints is required to be a set of segments that do not intersect\nexcept possibly at their endpoints. Any number of constrained edges\nare allowed to share the same endpoint.  Vertical constrained edges\nare allowed as well as \nconstrained edges with null length.\n<LI>The two other versions support intersecting input constraints.\nIn those versions, input constraints are allowed to be\nintersecting, overlapping or partially\noverlapping segments.\nThe triangulation introduce  additional  vertices at each point which\nis a proper <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point of  two \nconstraints. A single constraint intersecting other\nconstraints will then appear as the union of several \nconstrained edges of  the triangulation.\nThe two versions dealing with intersecting constraints, slightly differ\nin the way intersecting constraints are dealt with.\n<UL>\n<LI>One of them is\ndesigned to be robust when predicates are evaluated exactly but\nconstructions (i. e.  <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> computations) are\napproximative.\n<LI>The other one is designed to be used \nwith an exact arithmetic (meaning exact\nevaluation of predicates and exact computation of intersections.)\nThis last version finds its full efficiency  when used in conjunction\nwith a constraint hierarchy data structure \nas provided in the class\n<I><A HREF=\"Class_Constrained_triangulation_plus_2.html#Cross_link_anchor_917\">Constrained_triangulation_plus_2</A></I>. See\nsection&nbsp;<A HREF=\"../Triangulation_2/Chapter_main.html#Section_2D_Triangulations_Constrained_Plus\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\n</UL>\n</UL>\n<P>\n\n<CENTER>\n<img border=0 src=\"./constraints.gif\" align=\"center\" alt=\"A set of\nconstraints and its constrained triangulation\">\n</CENTER>\n<P>\n\nThe class <I><A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt;</I> of the CGAL library\nimplements constrained triangulations.\nThe template parameter <I>Traits</I> \nstands for a geometric traits class. It has to be a model\nof the concept <I><A HREF=\"Concept_TriangulationTraits_2.html#Cross_link_anchor_936\">TriangulationTraits_2</A></I>.\nWhen <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of input constraints are supported, \nthe geometric traits class \nis required to provide additional function object  types\nto compute the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of two segments.\nIt has then to be a model of the concept\n<I><A HREF=\"Concept_ConstrainedTriangulationTraits_2.html#Cross_link_anchor_909\">ConstrainedTriangulationTraits_2</A></I>.\nThe template parameter <I>Tds</I>\nstands for \na triangulation data structure class that has to be a model\nof the concept <I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>.\nThe third parameter <I>Itag</I> is the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> tag\nwhich serves  to choose between the different\nstrategies to deal with constraints intersections. \nC<SMALL>GAL</SMALL> provides three valid types for this parameter :<BR>\n\n<I>CGAL::No_intersection_tag</I> disallows intersections of\n input constraints,<BR>\n\n<I>CGAL::Exact_predicates_tag</I> is to be used when the traits\nclass\nprovides exact predicates but approximate constructions of the\n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> points.<BR>\n\n<I>CGAL::Exact_intersections_tag</I> is to be used in conjunction\nwith an exact arithmetic type.\n<P>\n\nThe information about constrained edges is stored in the \nfaces of the triangulation. Thus the nested <I>Face</I>\ntype of a constrained triangulation offers\nadditonnal functionalities to deal with this information.\nThese additional functionalities \ninduce additionnal requirements on the base face class\nplugged into the triangulation data structure of \n a constrained Delaunay triangulation.\nThe base face of a constrained Delaunay triangulation\nhas to be a model of the concept\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>.\n<P>\n\nC<SMALL>GAL</SMALL> provides  default instantiations for the template parameters\n<I>Tds</I> and <I>Itag</I>, and for the <I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>.\n If <I>Gt</I> is the geometric traits\nparameter,\nthe default  for\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I>  is the class\n<I><A HREF=\"Class_Constrained_triangulation_face_base_2.html#Cross_link_anchor_914\">CGAL::Constrained_triangulation_face_base_2</A>&lt;Gt&gt;</I>\nand the default for the\ntriangulation data structure parameter is the class\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A> &lt;                        <A HREF=\"Class_Triangulation_vertex_base_2.html#Cross_link_anchor_954\">CGAL::Triangulation_vertex_base_2</A>&lt;Gt&gt;, \t\t       <A HREF=\"Class_Constrained_triangulation_face_base_2.html#Cross_link_anchor_914\">CGAL::Constrained_triangulation_face_base_2</A>&lt;Gt&gt; &gt;</I>.\nThe default <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> tag is <I>CGAL::No_intersection_tag</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Constrained_triangulation_2.h\">CGAL/Constrained_triangulation_2.h</A>&gt;</I>\n<P>\n\n<H3>Inherits From</H3>\n<P>\n\n<I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_939\">Triangulation_2</A>&lt;Traits,Tds&gt;</I>\n<P>\n\n<H3>Types</H3>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Constraint\"></A>\n<A NAME=\"Typedef_Constraint\"></A>\ntypedef std::pair&lt;Point,Point&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Constraint;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The type of input\nconstraints\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Intersection_tag\"></A>\n<A NAME=\"Typedef_Intersection_tag\"></A>\ntypedef Itag\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Intersection_tag;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> tag which decides how \nintersections between input constraints are dealt with.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt; ct;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt; ct ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A> ct1);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor, all faces and vertices\nare duplicated and  the constrained status of edges\nis copied.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt; ct ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    std::list&lt;Constraint&gt;&amp; lc,<BR>\n\nTraits t = Traits());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces a constrained triangulation, the constrained edges of which\nare the edges of the list <I>lc</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template&lt;class InputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds,Itag&gt; ct ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\nTraits t=Traits());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A templated constructor which introduces and builds\n a constrained triangulation with constrained edges in the range \n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and <I>last</I>\n is <I>Constraint</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Queries</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_constrained6Edge_e9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.is_constrained ( Edge e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns true if edge <I>e</I> is a constrained edge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_are_there_incident_constraints6Vertex_handle_v9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.are_there_incident_constraints ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns true if at least one of the edges incident to vertex <I>v</I>\nis constrained.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt;class OutputItEdges&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputItEdges_incident_constraints6Vertex_handle_v+_OutputItEdges_out9_const;\"></A>\nOutputItEdges\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ct.incident_constraints ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle v,<BR>\n\nOutputItEdges out)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    OutputItEdges is an ouput iterator with <I>Edge</I> as value\ntype.\nOutputs the constrained edges incident to <I>v</I>\nin the sequence pointed to by <I>out</I> and returns the resulting\noutput iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion and removal</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_p+_Face_handle_f_=_Face_handle69_9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.insert ( Point p,  Face_handle f = Face_handle())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts point <I>p</I> and restores the status (constrained or not) of all\nthe touched edges. If present <I>f</I> is used as an hint\nfor the location of <I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6const_Point__p+_Locate_type__lt+_Face_handle_loc+_int_li_9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ct.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Point p,<BR>\n\n<A HREF=\"Enum_Triangulation_2-Traits-Tds---Locate_type#Enum_Locate_type\">Locate_type</A>&amp; lt,<BR>\n\nFace_handle loc,<BR>\n\nint li)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Same as above except that the location of the point\n <I>p</I> to be inserted is assumed to be given by\n<I>(lt,loc,i).</I>\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_push_back6const_Point__p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.push_back (  Point p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Equivalent to <I>insert(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_insert6InputIterator_first+_InputIterator_last9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.insert ( InputIterator first,  InputIterator last)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the points in the range\n <MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>.\n Returns the number of inserted points.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and <I>last</I>\n is <I>Point</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_constraint6Point_a+_Point_b9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.insert_constraint ( Point a,  Point b)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts points a and b, and inserts segment ab as a\nconstraint. Removes the faces crossed by segment ab and creates new\nfaces instead. If a vertex c lies on segment ab, constraint ab is\nreplaced by the two constraints ac and cb. Apart from the insertion of\na and b, the algorithm runs in time proportionnal to the number of\nremoved triangles.<BR>\n\n<EM>Precondition: </EM>The relative interior of segment <I>ab</I> does not\nintersect the relative interior of another constrained edge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_push_back6const_Constraint__c9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.push_back (  Constraint c)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts constraints <I>c</I> as above.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_constraint6const_Vertex_handle___va+_const_Vertex_handle___vb9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    ct.insert_constraint ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Vertex_handle va,<BR>\n\nVertex_handle vb)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the line segment <I>s</I> whose endpoints are the vertices \n<I>va</I> and\n<I>vb</I>  as a constrained edge <I>e</I>. The triangles intersected by s\nare removed and new ones are created.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.remove ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Removes a vertex v.<BR>\n\n<EM>Precondition: </EM>Vertex <I>v</I>  is not incident to a constrained edge.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_incident_constraints6Vertex_handle_v9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.remove_incident_constraints ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Make the edges incident to vertex <I>v</I> unconstrained edges.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_constrained_edge6Face_handle_f+_int_i9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.remove_constrained_edge ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Make edge <I>(f,i)</I>  no longer constrained.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false+_int_level_=_09_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    ct.is_valid ( bool verbose = false,  int level = 0)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Checks the validity of the triangulation and\nthe consistency of the constrained marks in edges.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<H3>I/O</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream &amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  <A HREF=\"Class_Constrained_triangulation_2.html#Cross_link_anchor_913\">Constrained_triangulation_2</A>&lt;Traits,Tds&gt; Ct<A NAME=\"Function_ostream___operator666ostream__os+_const_Constrained_triangulation_26Traits+Tds9__Ct9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Writes the triangulation and, for each face f, and integers i=0,1,2,\nwrite ``C'' or ``N'' depending whether edge \n<I>(f,i)</I> is constrained or not.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Triangulation_2.html#Cross_link_anchor_938\">CGAL::Triangulation_2</A>&lt;Traits,Tds&gt;</I>,<BR>\n\n<I><A HREF=\"../TDS_2_ref/Concept_TriangulationDataStructure_2.html#Cross_link_anchor_960\">TriangulationDataStructure_2</A></I>,<BR>\n\n<I><A HREF=\"Concept_TriangulationTraits_2.html#Cross_link_anchor_936\">TriangulationTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ConstrainedTriangulationTraits_2.html#Cross_link_anchor_909\">ConstrainedTriangulationTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_ConstrainedTriangulationFaceBase_2.html#Cross_link_anchor_908\">ConstrainedTriangulationFaceBase_2</A></I><BR>\n\n\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nThe insertion of a constrained edge runs in time\nproportionnal to the number of triangles intersected by this edge.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Constrained_triangulation_face_base_2.html\"><I>Constrained_triangulation_face_base_2&lt;Traits,Fb&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_32!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38852.0}