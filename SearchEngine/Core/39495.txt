{"text": "Navigation Up Table of Contents Bibliography Index Title Page RingNumberType Definition The concept RingNumberType defines the syntactic requirements a number type must meet in order to be used in CGAL as a ring type This implies that CGAL Number type traits RingNumberType Has division is not required to be CGAL Tag true Unsigned numbers are excluded due to semantical limitations in the ordering Refines CopyConstructible Assignable Creation RingNumberType n1 Declaration of a variable RingNumberType n1 int i Declaration and initialization with a small integer constant i i 127 The neutral elements for addition zero and multiplication one are needed quite often but sometimes other small constants are useful too The value 127 was chosen such that even signed 8 bit number types can fulfill this condition Operations The comparison operators need to be provided bool n1 n2 bool n1 n2 bool n1 n2 bool n1 n2 bool n1 n2 bool n1 n2 In addition the comparisons with small values of type int are also required bool int n1 n2 bool int n1 n2 bool int n1 n2 bool int n1 n2 bool int n1 n2 bool int n1 n2 bool n1 int n2 bool n1 int n2 bool n1 int n2 bool n1 int n2 bool n1 int n2 bool n1 int n2 The arithmetic operators for the addition subtraction and multiplication are required as well RingNumberType n1 n2 RingNumberType n1 n2 RingNumberType n1 n2 RingNumberType n RingNumberType n1 n2 RingNumberType n1 n2 RingNumberType n1 n2 And similarly the mixed operators with small values of type int are also required RingNumberType int n1 n2 RingNumberType int n1 n2 RingNumberType int n1 n2 RingNumberType n1 int n2 RingNumberType n1 int n2 RingNumberType n1 int n2 RingNumberType n1 int n2 RingNumberType n1 int n2 RingNumberType n1 int n2 The following accessory functions are needed for special purposes bool is valid n Not all values of a number type need be valid The function is valid checks this For example an expression like NT NT can result in an invalid number Routines may have as a precondition that all numerical values are valid bool is finite n When two large values are multiplied the result may not fit in a NT Some number types e g the standard float and double types have a way to represent a too big value as infinity is finite implies is valid double to double n gives the double value for a number type This is usually an approximation for the real stored value It can be used to send numbers to a renderer or to store them in a file std pair double double to interval n gives a double interval that encloses n Has Models C built in number types CGAL Filtered exact RingNumberType ET CGAL Fixed precision nt CGAL Gmpq CGAL Gmpz CGAL Interval nt CGAL Interval nt advanced CGAL Lazy exact nt RingNumberType CGAL MP Float CGAL Quotient RingNumberType leda integer leda rational leda bigfloat leda real See AlsoEuclideanRingNumberType FieldNumberType CGAL Ring tag Support Library Manual Next SqrtFieldNumberType Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Concept_RingNumberType.html", "title": "ringnumbertype", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/RingNumberType.tex' -->\n<html> <head>  \n<title>RingNumberType</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_3\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_22\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_RingNumberType\"></A>\n<h2><I>RingNumberType</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe concept <I><A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A></I> defines the syntactic requirements a number type must\nmeet in order to be used in C<SMALL>GAL</SMALL> as a ring type.  This implies that\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Number_type_traits.html#Cross_link_anchor_1401\">CGAL::Number_type_traits</A>&lt;<A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>&gt;::Has_division</I> is not required\nto be <I><A HREF=\"Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>. Unsigned numbers are excluded due to\nsemantical limitations in the ordering.\n<P>\n\n<H3>Refines</H3>\n<P>\n\nCopyConstructible, Assignable\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A> n1;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Declaration of a variable.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A> n1 ( int i);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Declaration and initialization with a small integer\nconstant <MATH><I>i</I></MATH>, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> i  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> 127</I></MATH>. The neutral elements for addition\n(zero) and multiplication (one) are needed quite often, but sometimes\nother small constants are useful too. The value 127 was chosen such\nthat even signed 8 bit number types can fulfill this condition.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe comparison operators need to be provided.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 ==  n2<A NAME=\"Function_bool_operator==6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 !=  n2<A NAME=\"Function_bool_operator!=6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &lt;  n2<A NAME=\"Function_bool_operator66const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &gt;  n2<A NAME=\"Function_bool_operator96const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &lt;=  n2<A NAME=\"Function_bool_operator6=6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &gt;=  n2<A NAME=\"Function_bool_operator9=6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\nIn addition, the comparisons with small values of type <I>int</I> are also\nrequired.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 ==  n2<A NAME=\"Function_bool_operator==6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 !=  n2<A NAME=\"Function_bool_operator!=6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 &lt;  n2<A NAME=\"Function_bool_operator66int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 &gt;  n2<A NAME=\"Function_bool_operator96int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 &lt;=  n2<A NAME=\"Function_bool_operator6=6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 &gt;=  n2<A NAME=\"Function_bool_operator9=6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 ==  int n2<A NAME=\"Function_bool_operator==6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 !=  int n2<A NAME=\"Function_bool_operator!=6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &lt;  int n2<A NAME=\"Function_bool_operator66const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &gt;  int n2<A NAME=\"Function_bool_operator96const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &lt;=  int n2<A NAME=\"Function_bool_operator6=6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 &gt;=  int n2<A NAME=\"Function_bool_operator9=6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\nThe arithmetic operators for the addition, subtraction and multiplication\nare required as well.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 +  n2<A NAME=\"Function_RingNumberType_operator+6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 -  n2<A NAME=\"Function_RingNumberType_operator-6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 *  n2<A NAME=\"Function_RingNumberType_operator*6const_RingNumberType__n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    -  n  <A NAME=\"Function_RingNumberType_operator-6const_RingNumberType__n9;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 +=  n2<A NAME=\"Function_RingNumberType_operator+=6const_RingNumberType__n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 -=  n2<A NAME=\"Function_RingNumberType_operator-=6const_RingNumberType__n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 *=  n2<A NAME=\"Function_RingNumberType_operator*=6const_RingNumberType__n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\nAnd similarly, the mixed operators with small values of type <I>int</I> are also\nrequired.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 +  n2<A NAME=\"Function_RingNumberType_operator+6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 -  n2<A NAME=\"Function_RingNumberType_operator-6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     int n1 *  n2<A NAME=\"Function_RingNumberType_operator*6int_n1+_const_RingNumberType__n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 +  int n2<A NAME=\"Function_RingNumberType_operator+6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 -  int n2<A NAME=\"Function_RingNumberType_operator-6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n      n1 *  int n2<A NAME=\"Function_RingNumberType_operator*6const_RingNumberType__n1+_int_n29;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 += int n2<A NAME=\"Function_RingNumberType_operator+=6int_n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 -= int n2<A NAME=\"Function_RingNumberType_operator-=6int_n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     n1 *= int n2<A NAME=\"Function_RingNumberType_operator*=6int_n29_const;\"></A>\n\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\nThe following accessory functions are needed for special purposes :\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6const_RingNumberType__n9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    is_valid (  n)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Not all values of a number type need be valid. The function\n<I>is_valid</I> checks this. For example, an expression like\n<I>NT(0)/NT(0)</I> can result in an invalid number. Routines may\nhave as a precondition that all numerical values are valid.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_finite6const_RingNumberType__n9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    is_finite (  n)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    When two large values are multiplied, the result may not fit in a\n  <I>NT</I>. \n  Some number types (e.g. the standard <I>float</I> and <I>double</I> types)\n  have a way to represent a too big value as infinity.\n  <I>is_finite</I> implies <I>is_valid</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_to_double6const_RingNumberType__n9;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    to_double (  n)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    gives the double value for a number type.\n          This is usually an approximation for the real (stored) value.\n          It can be used to send numbers to a renderer or to store them \n          in a file.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6double+double9_to_interval6const_RingNumberType__n9;\"></A>\nstd::pair&lt;double,double&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    to_interval (  n)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    gives a double interval that encloses <I>n</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\nC++ built-in number types<BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Filtered_exact.html#Cross_link_anchor_1351\">CGAL::Filtered_exact</A>&lt;<A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>, ET&gt;</I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Fixed_precision_nt.html#Cross_link_anchor_1353\">CGAL::Fixed_precision_nt</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Gmpq.html#Cross_link_anchor_1361\">CGAL::Gmpq</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Gmpz.html#Cross_link_anchor_1363\">CGAL::Gmpz</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Interval_nt.html#Cross_link_anchor_1365\">CGAL::Interval_nt</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Interval_nt_advanced.html#Cross_link_anchor_1367\">CGAL::Interval_nt_advanced</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Lazy_exact_nt.html#Cross_link_anchor_1385\">CGAL::Lazy_exact_nt</A>&lt;<A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>&gt;</I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1403\">CGAL::Quotient</A>&lt;<A HREF=\"Concept_RingNumberType.html#Cross_link_anchor_3\">RingNumberType</A>&gt;</I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_leda_integer.html#Cross_link_anchor_1388\">leda_integer</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_leda_rational.html#Cross_link_anchor_1389\">leda_rational</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_leda_bigfloat.html#Cross_link_anchor_1387\">leda_bigfloat</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_leda_real.html#Cross_link_anchor_1390\">leda_real</A></I><BR>\n\n\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_EuclideanRingNumberType.html#Cross_link_anchor_1\">EuclideanRingNumberType</A></I><BR>\n\n<I><A HREF=\"Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A></I><BR>\n\n<I><A HREF=\"../NumberTypeSupport_ref/Class_Ring_tag.html#Cross_link_anchor_1407\">CGAL::Ring_tag</A></I><BR>\n\nSupport Library Manual\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_SqrtFieldNumberType.html\"><I>SqrtFieldNumberType</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39495.0}