{"text": "Timing on your computer In order to determine the relative execution efficiency of various algorithms you will need to use a timer package I have available see below for your use such a package written in C However with advance approval from me you may use other packages Note that CPU time is used by your program user time as well as the system system time We will be interested in capturing the values of the user time usage only A problem On some systems the timing function gives times in multiples of 1 seconds On others the timing coarseness may be significantly smaller or larger You should determine the timing coarseness for your machine Thus for example on a system with 1 second timing coarseness timing anything which takes less than one fiftieth of a second could result in more than a 5 error Your programs for small values of n should be easily this fast A solution When the algorithm to be timed is too fast to obtain an accurate measurement the algorithm can be run many times in succession with the cumulative time being measured This time can then be divided by the number of runs to obtain a more accurate measurement of the time required by an individual run As little as possible other then the successive calls should occur while the timing is taking place In fact for particularly speedy code the time spent updating the loop variable may be of the same order of magnitude as the time you are attempting to measure To account for this you can subsequently time the loop with a nearly empty body and subtract this measure from your first measure the net result reflecting more accurately the time spent within the code of interest One should note that some optimizing compilers will optimize loops that contain an empty body by discarding them Timer package Program file timer c should be compiled and linked with your program system It defines the following routines user time returns the total amount of user cpu time used by the current process start timer starts the timer actually it only records the current value of user time elapsed time returns the amount of cpu time that has been used since the last call to start timer Header file timer h declares the routines that are defined in timer c and it should be included in all program files that invoke any of those routines Note that the MinGW system does not have the proper version of include timing files If you were to try to compile the timer c program file in MinGW you would get compilation errors Accordingly for your own personal use not to be used for course submissions you may make use of file timerMinGW c instead which I believe should work on the MinGW system Dan Hirschberg Computer Science Department University of California Irvine CA 92697 3435 dan at ics uci edu Last modified Mar 13 2 14", "_id": "http://www.ics.uci.edu/~dan/class/165/TIME/index.html", "title": "timing", "html": "<HTML><HEAD>\n<TITLE>Timing</TITLE>\n</HEAD><BODY>\n<span style=\"color:#000000; font:16px Arial, Helvetica, sans-serif;\">\n\n<center>\n<H2> Timing on your computer </H2>\n</center>\n\nIn order to determine the relative execution efficiency of various\nalgorithms, you will need to use a timer package.&nbsp;\nI have available (see below) for your use such a package\nwritten in C.&nbsp;\nHowever, with advance approval from me, you may use other packages.\nNote that CPU time is used by your program (user time)\nas well as the system (system time).  We will be interested in\ncapturing the values of the user time usage only.\n<P>\n<B>A problem</B>:&nbsp;\nOn some systems, the timing function gives times in multiples\nof .01 seconds.&nbsp;\nOn others, the timing coarseness may be\nsignificantly smaller or larger.&nbsp;\n(You should determine the timing coarseness for your machine.)&nbsp;\nThus, for example, on a system with .01 second timing coarseness,\ntiming anything which takes less than\none fiftieth of a second could result in more than a 50% error.&nbsp;\nYour programs, for small values of <I>n</I>,\nshould be easily this fast.\n<P>\n<B>A solution</B>:&nbsp;\nWhen the algorithm to be timed is too fast to obtain an accurate\nmeasurement, the algorithm can be run many times in succession,\nwith the cumulative time being measured.&nbsp;\nThis time can then be divided by the number of runs to obtain a more\naccurate measurement of the time required by an individual run.&nbsp;\n<I>As little as possible</I>, other then the successive calls,\nshould occur while the timing is taking place.&nbsp;\nIn fact, for particularly speedy code, the time spent updating\nthe loop variable may be of the same order of magnitude as\nthe time you are attempting to measure.&nbsp;\nTo account for this, you can subsequently time the loop with\na (nearly) empty body and subtract this measure from your first measure,\nthe net result reflecting more accurately the time spent within\nthe code of interest.\nOne should note that some optimizing compilers will\noptimize loops that contain an empty body by discarding them.\n\n<H3> Timer package </H3>\n\nProgram file <a href=\"timer.c\"><tt>timer.c</tt></a> should be compiled\nand linked with your program system.&nbsp;\nIt defines the following routines:\n<UL>\n<LI> <tt>user_time()</tt>\n  <BR>\nreturns the total amount of user cpu time used by the current process\n  <BR>\n<LI> <tt>start_timer()</tt>\n  <BR>\nstarts the timer\n[actually, it only records the current value of <tt>user_time()</tt>]\n  <BR>\n<LI> <tt>elapsed_time()</tt>\n  <BR>\nreturns the amount of cpu time that has been used since the last call\nto <tt>start_timer()</tt>\n</UL>\n<P>\nHeader file <a href=\"timer.h\"><tt>timer.h</tt></a>\ndeclares the routines that are defined in <tt>timer.c</tt>\nand it should be <tt>include</tt>d in all program files\nthat invoke any of those routines.\n\n<P>\nNote that the MinGW system does not have the proper version of <tt>include</tt> timing files.\nIf you were to try to compile the <tt>timer.c</tt> program file in MinGW,\nyou would get compilation errors.\nAccordingly, for your own personal use (not to be used for course submissions),\nyou may make use of file <a href=\"timerMinGW.c\"><tt>timerMinGW.c</tt></a> instead,\nwhich I believe should work on the MinGW system.\n\n</span>\n<HR>\n<ADDRESS>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435<BR>\n</ADDRESS>\n<tt>dan (at) ics.uci.edu</tt><br>\n\nLast modified: Mar 13, 2014\n</BODY></HTML>\n", "id": 4780.0}