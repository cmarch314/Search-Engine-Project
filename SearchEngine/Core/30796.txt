{"text": "Next CIO Up Libraries Previous quintus util Apply Macros Very often the programmer wants to scan a given list or structure and apply a given predicate on every subterm or even to collect some data from every subterm Although it is quite easy to define the apply 2 or maplist 3 etc predicates their performance is poor because of the involved metacalls ECLiPSe offers the possibility to use macros to define these operations so that they have the efficiency of specialized predicates i e as if the predicates were partially evaluated with respect to the given inputs The library is loaded using lib apply macros It provides the following macros maplist Pred ListIn ListOut calls Pred with two additional arguments on every element of the ListIn yielding ListOut For example eclipse 1 lib apply macros loading the library usr local eclipse lib apply macros pl yes eclipse 2 maplist times 3 1 2 3 L Creating auxiliary predicate maplist times 3 2 L 3 6 9 yes checklist Pred List calls Pred with one additional argument on every element of List eclipse 1 checklist 1 2 3 Creating auxiliary predicate checklist 1 yes selectlist Pred ListIn ListOut stores in ListOut all element from ListIn which satisfy Pred eclipse 1 selectlist 5 1 6 8 3 9 5 L Creating auxiliary predicate selectlist 5 2 L 6 8 9 yes sumlist Pred List AccIn AccOut calls Pred enhanced by three arguments on every element of List using an accumulator i e if List the following sequence is called Pred X1 AccIn A1 Pred X2 A1 A2 Pred Xn An 1 AccOut e g eclipse 1 sumlist times 2 3 4 5 1 X Creating auxiliary predicate sumlist times 3 X 12 yes mapargs Pred TermIn TermOut is similar to maplist but traverses the arguments of TermIn rather than a list e g eclipse 1 mapargs atom string s a b c X Creating auxiliary predicate mapargs atom string 2 X s a b c yes sumargs Pred Term AccIn AccOut is similar to sumlist but traverses the arguments of Term rather than a list e g eclipse 1 sumargs times s 1 2 3 4 1 X Creating auxiliary predicate sumargs times 3 X 24 yes sumnodes Pred Term AccIn AccOut is like sumlist 4 but Term may be any term and Pred is called recursively on all its subterms Example collect all variables in a term eclipse 1 user vars X var X X user compiled traceable 26 bytes in seconds yes eclipse 2 sumnodes vars s 1 t X 2 Y List Creating auxiliary predicate sumnodes vars 3 X X Y Y List X Y yes mapstream Pred ListIn ListOut is similar to maplist but delays if the input list is a variable e g in coroutine mode eclipse 1 mapstream 3 In Out In 1 2 3 T Creating auxiliary predicate mapstream 3 2 Out 4 5 6 News In 1 2 3 T Delayed goals mapstream 3 T News yes Next CIO Up Libraries Previous quintus util Micha Meier Mon Mar 4 12 11 45 MET 1996", "_id": "http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node275.html", "title": "", "html": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Apply Macros</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Apply Macros\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html5582 HREF=\"node276.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5580 HREF=\"node268.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5574 HREF=\"node274.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5584 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5583 HREF=\"node276.html\"> CIO</A>\r\n<B>Up:</B> <A NAME=tex2html5581 HREF=\"node268.html\"> Libraries</A>\r\n<B> Previous:</B> <A NAME=tex2html5575 HREF=\"node274.html\"> quintus_util</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION002220000000000000000> Apply Macros</A></H1>\r\n<P>\r\n<A NAME=6515>&#160;</A>\r\n<A NAME=6516>&#160;</A>\r\n<A NAME=libapply>&#160;</A>\r\n<P>\r\nVery often the programmer wants to scan a given list or structure\r\nand apply a given predicate on every subterm, or even to collect\r\nsome data from every subterm.\r\nAlthough it is quite easy to define the <b> apply/2</b> or <b> maplist/3</b>\r\netc. predicates, their performance is poor because of the involved\r\nmetacalls.\r\n<A NAME=tex2html1290 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  offers the possibility to use macros to define these operations,\r\nso that they have the efficiency of specialized predicates,\r\ni.e. as if the predicates were partially evaluated with respect\r\nto the given inputs. The library is loaded using\r\n<blockquote> <PRE>:- lib(apply_macros).\r\n</PRE></blockquote>\r\nIt provides the following macros:\r\n<DL ><DT>maplist(Pred, ListIn, ListOut)\r\n<DD>\r\n<A NAME=6523>&#160;</A>\r\ncalls <i> Pred</i> with two additional arguments\r\non every element of the <i> ListIn</i>, yielding <i> ListOut</i>.\r\nFor example\r\n<PRE>[eclipse 1]: lib(apply_macros).\r\nloading the library /usr/local/eclipse/lib/apply_macros.pl\r\n\r\nyes.\r\n[eclipse 2]: maplist(times(3), [1, 2, 3], L).\r\n*** Creating auxiliary predicate 'maplist(times(3))' / 2\r\n\r\nL = [3, 6, 9]\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>checklist(Pred, List)\r\n<DD>\r\n<A NAME=6527>&#160;</A>\r\ncalls <i> Pred</i> with one additional argument on every element of <i> List</i>.\r\n<P>\r\n<PRE>[eclipse 1]: checklist(&lt;(0), [1, 2, 3]).\r\n*** Creating auxiliary predicate 'checklist(&lt;(0))' / 1\r\n\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>selectlist(Pred, ListIn, ListOut)\r\n<DD>\r\n<A NAME=6530>&#160;</A>\r\nstores in <i> ListOut</i> all element from <i> ListIn</i> which\r\nsatisfy <i> Pred</i>\r\n<P>\r\n<PRE>[eclipse 1]: selectlist(&lt;(5), [1, 6, 8, 3, 9, 5], L).\r\n*** Creating auxiliary predicate 'selectlist(&lt;(5))' / 2\r\n\r\nL = [6, 8, 9]\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>sumlist(Pred, List, AccIn, AccOut)\r\n<DD>\r\n<A NAME=6534>&#160;</A>\r\ncalls <i> Pred</i> enhanced by three arguments on every element of <i> List</i>,\r\nusing an accumulator, i.e. if <i> List = <IMG  ALIGN=MIDDLE ALT=\"\" SRC=\"img45.gif\"></i>,\r\nthe following sequence is called:\r\n<blockquote> Pred(X1, AccIn, A1),<BR> \r\nPred(X2, A1, A2),<BR> \r\n..<BR> \r\nPred(Xn, An-1, AccOut).\r\n</blockquote>\r\ne.g.\r\n<PRE>[eclipse 1]: sumlist(times, [2, 3, 4, 5], 1, X).\r\n*** Creating auxiliary predicate 'sumlist(times)' / 3\r\n\r\nX = 120\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>mapargs(Pred, TermIn, TermOut)\r\n<DD>\r\n<A NAME=6540>&#160;</A>\r\nis similar to maplist, but traverses the arguments of <i> TermIn</i> rather than\r\na list, e.g.\r\n<PRE>[eclipse 1]: mapargs(atom_string, s(a,b,c), X).\r\n*** Creating auxiliary predicate 'mapargs(atom_string)' / 2\r\n\r\nX = s(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>sumargs(Pred, Term, AccIn, AccOut)\r\n<DD>\r\n<A NAME=6542>&#160;</A>\r\nis similar to sumlist, but traverses the arguments of <i> Term</i> rather than\r\na list, e.g.\r\n<PRE>[eclipse 1]: sumargs(times, s(1,2,3,4), 1, X).\r\n*** Creating auxiliary predicate 'sumargs(times)' / 3\r\n\r\nX = 24\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>sumnodes(Pred, Term, AccIn, AccOut)\r\n<DD>\r\n<A NAME=6544>&#160;</A>\r\nis like <b> sumlist/4</b>, but <i> Term</i> may be any term and <i> Pred</i>\r\nis called recursively on all its subterms.\r\nExample: collect all variables in a term\r\n<PRE>[eclipse 1]: [user].\r\nvars(X) --&gt; {var(X)} -&gt; [X]; [].\r\nuser       compiled traceable 260 bytes in 0.00 seconds\r\n\r\nyes.\r\n[eclipse 2]: sumnodes(vars, s(1,t(X,2),[Y]), List, []).\r\n*** Creating auxiliary predicate 'sumnodes(vars)' / 3\r\n\r\nX = X\r\nY = Y\r\nList = [X, Y]\r\nyes.\r\n</PRE>\r\n<P>\r\n<DT>mapstream(Pred, ListIn, ListOut)\r\n<DD>\r\n<A NAME=6548>&#160;</A>\r\nis similar to maplist, but delays if the input list is a variable, e.g. in\r\ncoroutine mode:\r\n<PRE>[eclipse 1]: mapstream(+(3), In, Out), In = [1,2,3|T].\r\n*** Creating auxiliary predicate 'mapstream(+(3))' / 2\r\n\r\nOut = [4, 5, 6|News0]\r\nIn = [1, 2, 3|T]\r\n\r\nDelayed goals:\r\n        'mapstream(+(3))'(T, News0)\r\nyes.\r\n</PRE>\r\n<P>\r\n </DL><BR> <HR><A NAME=tex2html5582 HREF=\"node276.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5580 HREF=\"node268.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5574 HREF=\"node274.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5584 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5583 HREF=\"node276.html\"> CIO</A>\r\n<B>Up:</B> <A NAME=tex2html5581 HREF=\"node268.html\"> Libraries</A>\r\n<B> Previous:</B> <A NAME=tex2html5575 HREF=\"node274.html\"> quintus_util</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "id": 30796.0}