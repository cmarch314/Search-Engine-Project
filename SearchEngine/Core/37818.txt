{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 17 1 Using SMARTS Up 17 Pattern Matching Next 17 3 Maximum Common Substructure 17 2 Using Query Molecules An alternate method of describing a substructure query uses a Query molecule Using a molecule or piece of one along with graph modifier you are able to define very flexible queries in a manner subtly different from SMARTS Loading a query molecule is almost the same as a OEGraphMol They can be used directly in the OERead commands or they can be created from an already existing OEGraphMol create an OEGraphMol mol OEGraphMol OEParseSmiles mol c1ccccc1 create a query molecule qmol OEQMol mol Once a query molecule is created before it can be used in a substructure search we have to define the level of matching between the graph in the query molecule and any target molecule We do this with the BuildExpressions method of the OEQMol The method takes two arguments the first describing atom matches and the second bond matches The following table shows switches that are OR d together to give the desired level of matching All of the constants are defined in the OEExprOpts namespace in C hence the OEExprOpts prefix Modifiers of atom expressions OEExprOpts Mass OEExprOpts Hcount OEExprOpts ImplicitHCount OEExprOpts FormalCharge OEExprOpts StrictFormalCharge OEExprOpts Degree OEExprOpts HvyDegree OEExprOpts Valence OEExprOpts Hybridization OEExprOpts AtomicNumber Extra modifiers used with AtomicNumber OEExprOpts EqMetal OEExprOpts EqHalogen OEExprOpts EqON OEExprOpts EqONS OEExprOpts EqPS OEExprOpts EqAromatic OEExprOpts EqCHalogen OEExprOpts EqCAliphaticON OEExprOpts EqCPSAcidRoot OEExprOpts EqKetoneSulfoneRoot Modifiers of bond expressions OEExprOpts BondOrder Extra modifiers used with BondOrder OEExprOpts EqSingleDouble OEExprOpts EqDoubleTriple OEExprOpts EqNotAromatic Modifiers of both atom and bond expressions OEExprOpts Aromaticity OEExprOpts RingMember OEExprOpts Chiral There are some pre defined expressions OEExprOpts DefaultAtoms AtomicNumber Aromaticity FormalCharge OEExprOpts DefaultBonds BondOrder Aromaticity OEExprOpts ExactAtoms AtomicNumber Aromaticity StrictFormalCharge Degree HCount Chiral Mass RingMember OEExprOpts ExactBonds BondOrder Aromaticity RingMember Chiral OEExprOpts AutomorphAtoms AtomicNumber Aromaticity Degree Chiral HCount OEExprOpts AutomorphBonds Aromaticity A few examples are perhaps the best way to describe how query molecules work Starting with a simple example that provides for uncolored graph matching from an input molecule Note that in this example an OEQMol is created from an existing molecule Then before using it to create an OESubSearch instance the user must call the BuildExpressions method giving two integers The first is modifiers on how atoms will be matched In this case means all match all The second is a modifier on how bonds match In this case as well means all bonds match So an OEQMol constructed as such will basically be a graph only match on any target Since started construction of the qmol using benzene the subsequent OESubSearch will match any six membered ring ch17 3 py from openeye oechem import import os sys m1 OEMol m2 OEMol OEParseSmiles m1 c1ccccc1 OEParseSmiles m2 C1CCCCC1 qmol OEQMol m1 qmol BuildExpressions pat OESubSearch qmol if pat SingleMatch m2 1 print got a match else print darn no match The best way to understand what the switches to BuildExpressions is to try the above example changing the molecules and using different switch combinations To get a match much like a SMARTS search change the above code to qmol BuildExpressions DefaultAtoms DefaultBonds Since OEQMols are used to create an OESubSearch object once it is created the same mechanism as in Figure 17 2 can be used to extract matching atoms bonds and to restrict the match to unique matches only OEChem Python Theory Manual Version 1 3 1 Previous 17 1 Using SMARTS Up 17 Pattern Matching Next 17 3 Maximum Common Substructure Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node150.html", "title": "17.2 using query molecules", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>17.2 Using Query Molecules</title>\n<META NAME=\"description\" CONTENT=\"17.2 Using Query Molecules\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node151.html\">\n<LINK REL=\"previous\" HREF=\"node149.html\">\n<LINK REL=\"up\" HREF=\"node148.html\">\n<LINK REL=\"next\" HREF=\"node151.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node149.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node151.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node149.html\">17.1 Using SMARTS</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node151.html\">17.3 Maximum Common Substructure</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0019200000000000000000\">\n17.2 Using Query Molecules</A>\n</H1>\n\n<P>\nAn alternate method of describing a substructure query uses a Query\nmolecule. Using a molecule (or piece of one) along with graph\nmodifier, you are able to define very flexible queries in a manner\nsubtly different from SMARTS. Loading a query molecule is almost the\nsame as a OEGraphMol. They can be used directly in the OERead*()\ncommands or they can be created from an already existing OEGraphMol.\n\n<P>\n<dl><dd><pre class=\"verbatim\"># create an OEGraphMol\nmol = OEGraphMol()\nOEParseSmiles(mol, \"c1ccccc1\")\n\n# create a query molecule\nqmol = OEQMol(mol)\n</pre></dl>\n\n<P>\nOnce a query molecule is created, before it can be used in a\nsubstructure search, we have to define the level of matching between\nthe graph in the query molecule and any target molecule. We do this\nwith the BuildExpressions() method of the OEQMol. The method takes two\narguments, the first describing atom matches and the second bond\nmatches. The following table shows switches that are OR'd together to\ngive the desired level of matching. All of the constants are defined\nin the OEExprOpts namespace in C++ hence the ``OEExprOpts_'' prefix.\n\n<P>\n<i>Modifiers of atom expressions:</i>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_Mass\nOEExprOpts_Hcount\nOEExprOpts_ImplicitHCount\nOEExprOpts_FormalCharge\nOEExprOpts_StrictFormalCharge\nOEExprOpts_Degree\nOEExprOpts_HvyDegree\nOEExprOpts_Valence\nOEExprOpts_Hybridization\nOEExprOpts_AtomicNumber\n</pre></dl>\n\n<P>\n<i>Extra modifiers used with AtomicNumber:</i>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_EqMetal\nOEExprOpts_EqHalogen\nOEExprOpts_EqON\nOEExprOpts_EqONS\nOEExprOpts_EqPS\nOEExprOpts_EqAromatic\nOEExprOpts_EqCHalogen\nOEExprOpts_EqCAliphaticON\nOEExprOpts_EqCPSAcidRoot\nOEExprOpts_EqKetoneSulfoneRoot\n</pre></dl>\n\n<P>\n<i>Modifiers of bond expressions:</i>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_BondOrder\n</pre></dl>\n\n<P>\n<i>Extra modifiers used with BondOrder:</i>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_EqSingleDouble\nOEExprOpts_EqDoubleTriple\nOEExprOpts_EqNotAromatic\n</pre></dl>\n\n<P>\n<i>Modifiers of both atom and bond expressions:</i>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_Aromaticity\nOEExprOpts_RingMember\nOEExprOpts_Chiral\n</pre></dl>\n\n<P>\nThere are some pre-defined expressions:\n\n<P>\n<dl><dd><pre class=\"verbatim\">OEExprOpts_DefaultAtoms = AtomicNumber | Aromaticity | FormalCharge\nOEExprOpts_DefaultBonds = BondOrder | Aromaticity\n\nOEExprOpts_ExactAtoms =\n  AtomicNumber|Aromaticity|StrictFormalCharge|Degree|HCount|Chiral|Mass|RingMember\nOEExprOpts_ExactBonds = BondOrder|Aromaticity|RingMember|Chiral\n\nOEExprOpts_AutomorphAtoms = AtomicNumber|Aromaticity|Degree|Chiral|HCount\nOEExprOpts_AutomorphBonds = Aromaticity\n</pre></dl>\n\n<P>\nA few examples are perhaps the best way to describe how query\nmolecules work. Starting with a simple example that provides for\nuncolored graph matching from an input molecule.  Note that in this\nexample, an OEQMol is created from an existing molecule. Then, before\nusing it to create an OESubSearch instance, the user must call the\nBuildExpressions method giving two integers. The first is modifiers on\nhow atoms will be matched. In this case '0' means all match all. The\nsecond is a modifier on how bonds match. In this case as well, '0'\nmeans all bonds match. So, an OEQMol constructed as such will\nbasically be a graph only match on any target. Since started\nconstruction of the qmol using benzene, the subsequent OESubSearch\nwill match any six-membered ring.\n\n<P>\n<dl><dd><pre class=\"verbatim\"># ch17-3.py\nfrom openeye.oechem import *\n\nimport os,sys\n\nm1 = OEMol()\nm2 = OEMol()\n\nOEParseSmiles(m1, 'c1ccccc1')\nOEParseSmiles(m2, 'C1CCCCC1')\n\nqmol = OEQMol(m1)\nqmol.BuildExpressions(0,0)\npat = OESubSearch(qmol)\n\nif pat.SingleMatch(m2) == 1:\n    print 'got a match'\nelse:\n    print 'darn, no match'\n</pre></dl>\n\n<P>\nThe best way to understand what the switches to BuildExpressions is to\ntry the above example, changing the molecules and using different\nswitch combinations.  To get a match much like a SMARTS search, change\nthe above code to ``qmol.BuildExpressions(DefaultAtoms,\nDefaultBonds)''. Since OEQMols are used to create an OESubSearch\nobject, once it is created, the same mechanism as in Figure 17-2 can\nbe used to extract matching atoms/bonds and to restrict the match to\nunique matches only.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node149.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node148.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node151.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node149.html\">17.1 Using SMARTS</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node148.html\">17. Pattern Matching</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node151.html\">17.3 Maximum Common Substructure</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37818.0}