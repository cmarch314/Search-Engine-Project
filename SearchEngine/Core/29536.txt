{"text": "Mechanism Callback Intent The callback mechanism enables an application to invoke an externally supplied function sometime called a handler in A short statement that answers the following questions What does the design pattern do What is its rationale and intent What particular design issue or problem does it address Also Known As Motivation A scenario that illustrates a design problem and how the class and object structures in the pattern solve the problem The scenario will help you understand the more abstract description of the pattern that follows Applicability What are the situations in which the design pattern can be applied What are examples of poor designs that the pattern can address How can you recognize these situations An applicable situation Collaborations How the participants collaborate to carry out their responsibilities Collaboration Consequences Callbacks have the following benefits They support late binding Any user defined function that matches the function signature of the callback can be bound to the invocation Callbacks have the following limitations They lack compositionality Only one callee can be registered for a callback at any given point in time This prevents multiple independent callees from registering for the same callback The lack of a chaining mechanism e g CLOS s call next method restricts the utility of the mechanism They can disturb time sensitive processing The caller does not know how long the callee will execute before regaining the thread of control For example a time consuming callback can starve GUI event processing Known Uses Callbacks are commonly used in GUI toolkits as a way of invoking application specified code in response to a UI event For example Microsoft s Win32 API associates each window with an event handler responsible for responding to the event Related Mechanisms Object oriented inheritance has become a more popular mechanism for implementing callback like behavior in OO languages Consider for example GUI frameworks such as Microsoft s MFC Sun s Java AWT Apple s MacApp and Unix s InterViews Back to the Adaptation home page This page maintained by Peyman Oreizy peymano at ics uci edu Last updated on ", "_id": "http://www.ics.uci.edu/~peymano/adaptation/callbacks.html", "title": "mechanism:", "html": "<html>\r\r\r\r<head>\r\r<meta http-equiv=\"Content-Type\"\r\rcontent=\"text/html; charset=iso-8859-1\">\r\r<meta name=\"GENERATOR\" content=\"Microsoft FrontPage 6.0\">\r\r<title>Mechanism:</title>\r\r</head>\r\r\r\r<body bgcolor=\"#FFFFFF\">\r\r\r\r<h2>Mechanism: Callback</h2>\r\r\r\r<h3>Intent</h3>\r\r\r\r<blockquote>\r\r    <p>The callback mechanism enables an application to invoke an\r\r    externally supplied function (sometime called a\r\r    &quot;handler&quot;) in </p>\r\r    <p><em>A short statement that answers the following\r\r    questions: What does the design pattern do? What is its\r\r    rationale and intent? What particular design issue or problem\r\r    does it address? </em></p>\r\r</blockquote>\r\r\r\r<h3>Also Known As</h3>\r\r\r\r<blockquote>\r\r    <p>?</p>\r\r</blockquote>\r\r\r\r<h3>Motivation</h3>\r\r\r\r<blockquote>\r\r    <p><em>A scenario that illustrates a design problem and how\r\r    the class and object structures in the pattern solve the\r\r    problem. The scenario will help you understand the more\r\r    abstract description of the pattern that follows. </em></p>\r\r</blockquote>\r\r\r\r<h3>Applicability</h3>\r\r\r\r<blockquote>\r\r    <p><em>What are the situations in which the design pattern\r\r    can be applied? What are examples of poor designs that the\r\r    pattern can address? How can you recognize these situations? </em></p>\r\r</blockquote>\r\r\r\r<blockquote>\r\r    <ul>\r\r        <li><em>An applicable situation </em></li>\r\r    </ul>\r\r</blockquote>\r\r\r\r<h3>Collaborations</h3>\r\r\r\r<blockquote>\r\r    <p>How the participants collaborate to carry out their\r\r    responsibilities. </p>\r\r</blockquote>\r\r\r\r<blockquote>\r\r    <ul>\r\r        <li>[Collaboration] </li>\r\r    </ul>\r\r</blockquote>\r\r\r\r<h3>Consequences</h3>\r\r\r\r<blockquote>\r\r    <p>Callbacks have the following benefits:</p>\r\r    <ol>\r\r        <li><em>They support late binding</em>. Any user-defined\r\r            function that matches the function signature of the\r\r            callback can be bound to the invocation.</li>\r\r    </ol>\r\r    <p>Callbacks have the following limitations:</p>\r\r</blockquote>\r\r\r\r<blockquote>\r\r    <ol>\r\r        <li><em>They lack compositionality</em>. Only one callee\r\r            can be registered for a callback at any given point\r\r            in time. This prevents multiple, independent callees\r\r            from registering for the same callback. The lack of a\r\r            &quot;chaining&quot; mechanism (e.g., CLOS's\r\r            call-next-method) restricts the utility of the\r\r            mechanism.</li>\r\r        <li><em>They can disturb time sensitive processing</em>.\r\r            The caller does not know how long the callee will\r\r            execute before regaining the thread of control. For\r\r            example, a time consuming callback can starve GUI\r\r            event processing.</li>\r\r    </ol>\r\r</blockquote>\r\r\r\r<h3>Known Uses</h3>\r\r\r\r<blockquote>\r\r    <p>Callbacks are commonly used in GUI toolkits as a way of\r\r    invoking application-specified code in response to a UI\r\r    event. For example, Microsoft's Win32 API associates each\r\r    window with an event handler responsible for responding to\r\r    the event.</p>\r\r</blockquote>\r\r\r\r<h3>Related Mechanisms</h3>\r\r\r\r<blockquote>\r\r    <p>Object-oriented inheritance has become a more popular\r\r    mechanism for implementing callback-like behavior in OO\r\r    languages. Consider, for example, GUI frameworks such as\r\r    Microsoft's MFC, Sun's Java AWT, Apple's MacApp, and Unix's\r\r    InterViews.</p>\r\r</blockquote>\r\r\r\r<hr>\r\r\r\r<p><a href=\"http://www.ics.uci.edu/~peymano/adaptation/\"><em>Back\r\rto the Adaptation home page</em></a><em>. This page maintained by\r\rPeyman Oreizy </em>(<a href=\"mailto:peymano at ics.uci.edu\">peymano at ics.uci.edu</a>).\r\rLast updated on <!--#flastmod virtual = \"index.shtml\" -->.</p>\r\r</body>\r\r</html>\r\r\ufffd", "id": 29536.0}