{"text": "Program Learning to Use Eclipse C Course Libraries GoogleTest and Checkmate ICS 46 Data Structure Implementation and Analysis Introduction This programming assignment is designed to ensure that you know how to use at least in a cookbook way Eclipse for editing running and debugging C programs after installing the course library GoogleTest and driver programs for testing and locating errors in code and Checkmate for submitting programs for grading You will start this programming assignment similarly to others this quarter First you will download unzip an Eclipse Start Project Folder Second you will start Eclipse create a C project using the downloaded project folder as the existing source and then configure the project for use with the courselib and googletestlib libraries as you will for most programming assignments Third you will use a driver program and GoogleTest to test code that I have provided in the start project folder and later for code that you will write my code has a deliberate error that you will find and fix Fourth when you have corrected the program you will submit its hpp file using the Checkmate submission system For all later assignments I will not be providing as much code as I do in this assignment because the focus of this assignment is using tools not writing code the focus of the later assignments is writing code using the tools that you will learn in this assignment But that assumes that you learn how to use these tools now There is actually just one error in this code and this write up will detail where it is and how to fix it So the purpose of this assignment is not to fix the error but instead to become familiar with the tools you will use throughout the quarter to find and fix your own errors You may want to print this document and carefully read it marking any parts that contain important information for review before you submit the file you might want to save the copy you marked up Please report any major problems on the Programming Assignments message board and any minor problems like typos to me I expect you to read this entire document and perform all the operations it describes maybe even more than once to better learn the tools covered Download and Unzip Download onto your desktop and unzip the following Eclipse Start Project Folder Generally if you right click the zip file one of the options available will unzip the file Izarc and WinZip are two common programs both further specify an Extract to Here option If you have any problems ask one of the staff for help The resulting unzipped folder contains a src folder as all Eclipse C projects do in which are nested the hpp and cpp files for the programming project This project contans five files The src folder contains four files The linear array queue hpp file implements a queue data type but with one bug The driver cpp and driver queue hpp files which we use to test drive the LinearArrayQueue The test queue cpp file which contains a GoogleTest for any implementation of a queue In driver queue hpp and test queue hpp the two lines include linear array queue hpp typedef ics LinearArrayQueue std string QueueType choose the linear array queue implementation to test There is also a file named loadq txt outside the src folder which is used with the lf command in the driver Start Eclipse Create a C Project and Configure Eclipse to use the courselib Next you need to start Eclipse and create a project using the project folder you just downloaded If you have not already installed a courselib project in Eclipse follow the Courselib Installation instructions at the start of Courselib Installation and Use document Once you have correctly created a courselib project and built it follow the Creating a Project that Uses the Courselib instructions later in that document for creating a new project and configuring it to use the courselib For uniformity use the name Program for your project s name I did these operations from memory in 2 minutes if it takes you longer than 5 minutes practice more Later in this handout you will be instructed to install use the googletest library which is not needed yet For most projects later in the quarter when you create the project you should immediately configure it to use both the courselib and googletest libraries The LinearArrayQueue file in this project defines an almost correct class that implements the behavior of a queue data type it is a simpler to understand but less efficient version of the ArrayQueue class supplied in the courselib You will be implementing lots of abstract data types like this one during the quarter A queue is a simple FIFO data type adhering to the First in First out ordering property Queues enqueue values to their rear and dequeue values from their front so these are the two hot spots that must be efficiently accessed in any data structure that implements a queue We can implement the queues data type efficiently by using either an array or linked list data structure The queue type implementation in this programming assignment LinearArrayQueue declares the required instance variables and needed methods using an array data structure the front of the queue is always stored at index the rear is stored at a higher index in the array Using a linear array is conceptually simple to understand and program but it has a slower than necessary dequeue operation when compared with using a circular array data structure used in the ArrayQueue class which we will discuss later in lecture it always requires looping through an array When all the necessary libraries are installed this class compiles and can be tested in the driver and via GoogleTest but it is incorrect so it results in a few execution run time errors Run the Driver Each data type that we will discuss this quarter has a driver program that allows us to drive it to call test each of its methods and observe the results The driver for queues is in the class named DriverQueue stored in the driver queue hpp file in the src folder in courselib To run this driver program on the LinearArrayQueue I have already done the following in the driver queue hpp file but you will have to do something similar in later projects so carefully observe what I did here I copied the driver queue hpp file from the src folder in courselib for this project In the driver queue hpp file I changed the include in line 11 from include array queue hpp to include linear array queue hpp In the driver queue hpp file I changed the typedef in line 16 from typedef ics ArrayQueue std string QueueType to typedef ics LinearArrayQueue std string QueueType In the driver cpp file ensure that the include on line 1 refers to driver queue hpp and ensure the definition on line 4 refers to ics DriverQueue d When a file name appears in your project s src folder and also in the courselib s src folder as driver queue hpp does the one appearing in the project will be the one used Because I already made all these changes in the downloaded project folder just build and run this program the main in driver cpp constructs a driver queue object that tests the LinearArrayQueue implementation of a queue data type The program should now start running in the Console tab at the bottom of Eclipse The console window will display the queue being manipulated now empty and the following menu of options that you can use to call test each queue method Note that this driver tests a queue that stores std string values You must enter a string to test any Mutator Command or Accessor Query method Of special note is the it command which constructs and tests an explicit iterator for this queue it has its own submenu of options applicable to iterators which are the same for every data type Note that the queue being manipulated prints before the menu using its str query that starts with the data type here queue followed by the enqueued values in brackets Afterwards are all the data members in the implementing class and their values In an LinearArrayQueue the length is the length of its array the used is the number of array indexes containing values always length the mod count counts the number of modifications made to the queue since its construction The command shows just the queue part of the str command This relationship is true for how and str are related for all classes the str version produces more detailed information that is often useful for debugging Issue the m s and p commands to query the state of the empty queue The driver should show the following The peek method returns a reference to the queue s first value which the driver prints but it cannot work correctly on an empty queue Notice what is printed instead the thrown exception EmptyError and the Class method that raised the error Thus the driver just ignores this command and we can continue driving the LinearArrayQueue class Next issue the e command and enqueue test1 when prompted This method returns the number of values enqueued to the queue for queues which can contain duplicate values it always returns 1 for sets which cannot contain duplicate values this method may return if the value is already in the set The queue now prints before the next menu as queue q queue test1 rear length 1 used 1 mod count 1 which shows the queue now contains the value test1 and the rear of the queue is indicated by rear this annotation makes more sense when the queue contains more than one value the length of the array holding the queue values has increased to 1 the queue is using 1 value in the array the queue has been mutated 1 time since being constructed the previous accessors queries are not counted Next issue the e command again and enqueue test2 when prompted The queue now prints before the next menu as queue q queue test1 test2 rear length 2 used 2 mod count 2 Order is important in queues the earlier a value is enqueued the earlier it appears in the array Notice that both length and used increase to 2 Next issue the e command again and enqueue test3 when prompted The queue now prints before the next menu as queue q queue test1 test2 test3 rear length 4 used 3 mod count 3 Notice that length increases to 4 while used increases to 3 generally if there is not enough room in an array its length is doubled not just incremented by 1 we will discuss why later in the quarter when we analyze the running time of N enqueues The driver should show the following Next issue the d command which should dequeue the value at the front of the queue It correctly prints dequeue test1 but when it prints the queue before the next menu it appears as queue q queue test2 test3 test3 rear length 4 used 3 mod count 4 This result is incorrect because a used is still 3 and b test3 now appears in two different queue array locations it was shifted one to the left but still appears at the end In fact if you issue the d command again it correctly prints dequeue test2 but used remains 3 and now test3 appears in all three positions in the array Next issue the x command whose clear method is void and returns and the driver prints no result It will correctly clear the queue which prints before the final menu as queue q queue rear length 4 used mod count 5 So using this driver we can call test all the methods in the LinearArrayQueue class looking for incorrect behavior If we see errors in the output to help us debug any errors that we find we can add code in the driver to print intermediate results and rerun it add code in the LinearArrayQueue to print intermediate results and rerun the driver use the debugger to set breakpoints in our methods and execute step through the code while observing how it changes its state A later section of this document illustrates using the driver with the debugger For now continue to explore and experiment with the other commands in this driver and DO NOT fix the error in delete yet The lf command allows quickly enqueuing a series of values read from a file the default it loadq txt which is included with this project Try the it commands to better understand what we can do with iterators especially how to erase selected values inside the queue If you ever find your program in an infinite loop you can terminate the program manually by clicking the red square Terminate button the top left icon on the console window Then you can click the gray X or Xx icon to clear the the console to the right of the red square To rerun the driver after editing any of these files click the right pointing triangle icon When Eclipse builds a project it compiles all its files When Eclipse runs a project it links these compiled files and the code in configured libraries and runs the single main function it finds if it finds none or more than one it will report an error So we can build but not run the courselib project because it is a library and has no main method to run Run the GoogleTest Unit Test Each data type that we will discuss this quarter also has a GoogleTest for testing any all of its implementations While a driver for a class is code that allows us to manually test its methods and observe their results a GoogleTest is code that automatically tests the class and report its results It produces output to show clearly which tests passed and which tests failed and for the failed tests it produces more detailed information about how the test failed When the code is modified hopefully corrected it is very easy to rerun all the tests and observe the changes hopefully more all tests are now passed automatically To run the GoogleTest program we must change the program project as follows Configure the project for use with the googletestlib library If you have not already installed a googletestlib in Eclipse follow the Googlettest Installation instructions at the Course Software page Once you have correctly installed the googletestlib follow the Creating a Project that Uses the Googletestlib instructions later in the document for creating a new project already done for this project and configuring it to use the googletestlib I did these operations from memory in 2 minutes if it takes you longer than 5 minutes practice more Uncomment the main function at the bottom of the test queue cpp file actually uncomment the entire file Likewise we must comment out the main function in the driver cpp file actually comment out the entire file Only one main function can exist in a C project because there can be only one starting point for the program being run Before running this project examine the code in the test queue file It consists of 12 separate tests each which should be readable and understandable if you understand what queues are about Now run the GoogleTest The result is illustrated below Check the bottom of GoogleTest s output first It summarizes the number of passed tests and names the failed tests you can examine these failed tests in more detail if they are present Failure Modes There are two major failure modes possible in each GoogleTest An assertion failure in a test means that the code being tested did not meet its requirements GoogleTest will print useful information about the failure just what it prints is based on what kind of assertion failed In the figure above both the dequeue1 and dequeue2 tests failed on lines 138 and 15 respectively the assertions concerned truth values for calling the q empty method whose different Actual and Expected values are shown An exception failure in a test means that the code being tested threw an exception GoogleTest will print information about the exception although often it just states an unexpected exception was thrown In the figure above no unexpected exceptions were thrown In addition it is also possible that incorrect code will exhibit a failure mode that GoogleTest cannot detect and report an infinite loop In such a case GoogleTest will stop printing information in the console after starting to run a test If the enqueue test caused an infinite loop the console might look as follows If you ever find your program in an infinite loop you can terminate the program manually by clicking the Red Square on the top of the console window the leftmost icon Then you can click the X or Xx icons to the right of the Red Square to clear the the console In such a case you would have to manually stop the program as described above clicking the Red Square in the Console window In the console with the original test the Red Square is greyed out because the GoogleTest has already terminated You have a choice of either commenting out this test code so GoogleTest won t run this test but will run subsequent tests or keeping this test and immediately debugging the code that is causing it to loop infinitely If you choose the former remember to uncomment the test code eventually to ensure your code is passing the test Debugging Here is a short but important list of four stategies that we can employ when our code fails to try to understand the cause of the problem and then hopefully correct it First examine the line of code in the test at which the failure was detected which is printed in the console and the information it displays related to the failure Seaching the code for a mistake using the failure information as a guide Add arbitrary C code in the GoogleTest to print useful information Use the debugger to set a breakpoint before the failed assertion and then examine any relevant state Use the driver to duplicate explore the problem manually Tests Generally each public method has its own GoogleTest reflecting the semantics meaning of what that method does in the class sometimes needing to call other methods too It is good to be able to read and understand the GoogleTest code and you will get more experience doing so during the quarter because it can be useful to add debugging code to it typically printing the state of variables just before a test assertion failed Mostly GoogleTest code intersperses calls to the methods of the class being tested with assertions about what the results of those method calls should be a test method fails when any assertions in it fail The tests are peformed in the order in which they appear I try to arrange my tests from the simple to the more complex Sometimes bugs causing failures in the earlier tests also cause failures in the latter ones So an important debugging strategy is to concentrate on and correct the earlier bugs at best the later bugs might automatically disappear at worst it will be easier to understand correct the later more complicated bugs after you have understood corrected the earlier simpler ones Also note that each test is abandoned when the first assertion fails it doesn t test subsequent assertions in that test function but GoogleTest will still attempt to do all other test functions after any failure This strategy leads to two interesting consequences The output is not cluttered with multiple failure messages for multiple assertions in each test instead each test either passes or fails and if it fails it presents details on only the first failure Expect that a test might still fail after you make corrections to your code but the correction should cause a failure later in the test e g an earlier assertion in the test that failed should now pass even if later assertions which were not reached because of the earlier failure now are tested and fail Debugging Examples Here we will examine the four strategies for debugging stated above The first failure was on line 138 in the dequeue1 test The entire test appears as follows with its line numbers 13 TEST F QueueTest dequeue1 131 QueueType q 132 q enqueue a 133 q enqueue b 134 q enqueue c 135 ASSERT EQ a q dequeue 136 ASSERT EQ b q dequeue 137 ASSERT EQ c q dequeue 138 ASSERT TRUE q empty 139 ASSERT EQ q size 14 The error states that the queue was expected to be empty but it was not Our first stategy would be just to look at the code in the LinearArrayQueue class We will see that the the empty method returns false when used is not We will also see that used is initialized to and if we enqueue three values and then dequeue three values it should return to Since the enqueue test worked we can focuse on the dequeue method to learn why used was not decremented to Our second stategy would be to add some code in the dequeue1 test to help us understand why the empty method returns false We could for example print the size and even the queue itself using the more verbose str function using the following code std cout in deqeue1 size q size queue q str std endl I highly recommend putting textual material in these debugging displays to identify them as we put more and more debugging displays into a program which we typically do when debugging they can become confusing If we put this code right before the line 138 it would display in deqeue1 size 3 queue queue c c c rear length 4 used 3 mod count 6 The queue is supposed to be empty but its used is 3 It might be useful to put this statement after the last call to enqueue and after each call to dequeue to observe how used changes in fact it doesn t Our third strategy is to use the debugger to set a breakpoint before the failed assertion and then examine relevant state The debugger in Eclipse C operates similarly to the Eclipse Python We can set unconditional and conditional breakpoints single step into over and out of code observe the values of global and local variables Experiment with the debugger until you know how to use it to perform common debugging tasks like those indicated below Try these steps Set an unconditional breakpoint on line 138 recall that when a line has a breakpoint execution stops before the line is executed Launch the debugger by clicking the bug icon When the Confirm Perspective Switch popup window appears click Yes it will switch from the C perpsective to the debug perspective Click the resume icon to start execution of the GoogleTest program The debugger stops the program before executing line 138 and shows the following Note that used is 3 which is why the empty method returns false We could investigate the dequeue method by setting a breakpoint earlier on line 135 and then when that line is reached we could click the step over icon and observe by lack of yellow highlighting that the executing the dequeue method did not change the used instance variable For now just terminate the debugger and return to the C C perspective Our fourth strategy would be to use the driver to duplicate explore the problem manually Actually in our discussion of the driver we saw that when we enqueued three values and dequeued all three the result was a queue whose used was still 3 with the last enqueued values stored in all indexes In fact both test failures relate to a single bug the used variable was not decremented in the dequeue method I commented out the code at line 174 of the linear array queue hpp file Remember that sometimes fixing one bug will cause many failed tests to pass Restore this line of code uncomment it to fix the error Now rerun this GoogleTest and verify that there are no more failures The bottom of the Console window should show Both errors and failures indicate that the code is incorrect and should be fixed Of course we must be careful because it is possible that an assertion is incorrect e g an assertion asserts the size of the queue is some number but based on the add remove methods called in the GoogleTest it should be some other number While you should mostly believe the GoogleTests I distribute there is always the possibility that I have made a mistake If you look closely at a GoogleTest and don t understand why some failing assertion should be true please contact me to resolve the problem Submit the Program for Grading via Checkmate After you have fixed the code and verified that it works correctly via the Driver and the GoogleTest you should submit the code for grading via Checkmate If you are unfamiliar with this system read the Submitting Homework Using Checkmate document It explains how to submit programs even if you are not officially registered in the class yet You are responsible for submtting the correct version of your code Final Words You are also responsible for backing up your work frequently Whenever you have updated your code and when you have finished an assignment you should backup save the entire project folder on a USB drive Even if you are using your own computer you should still backup your work Probably it is best to zip the entire project folder which makes it smaller and also speeds up copying which depends as much on how many files you copy as on the size of the files If you are on a lab machine you can also backup save this zipped project folder on your Unix file space If you need to restore a project folder follow these steps Unzip the project folder Delete its cproject and project file Delete its settings and Debug folders Recreate the project and configure all its libraries Practice doing everything in this lab over and again until you are familiar with all these skills and can do them without reading the directions You will save yourself much time later in the quarter when time is really important if you spend some time now when things aren t so rushed mastering this material ", "_id": "http://www.ics.uci.edu/~pattis/ICS-46/assignments/program0/program.html", "title": "program 0", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 0</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 0</h1>\r\n<h1>Learning to Use Eclipse/C++, Course Libraries,<br>\r\n    GoogleTest, and Checkmate</h1>\r\n<p>\r\n<h2>ICS-46: Data Structure Implementation and Analysis\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis \"programming assignment\" is designed to ensure that you know how to\r\n  use -at least in a cookbook way-\r\n  <b>Eclipse</b> (for editing, running, and debugging C++ programs, after\r\n    installing the course library),\r\n <b>GoogleTest</b> (and driver programs, for testing and locating errors in\r\n    code), and <b>Checkmate</b> for submitting programs for grading.\r\n<p>\r\nYou will start this programming assignment similarly to others this quarter.\r\n<ul>\r\n<li>First you will download, unzip an Eclipse Start Project Folder.\r\n<p>\r\n<li>Second, you will start Eclipse, create a C++ project (using the downloaded\r\n      project folder, as the existing source) and then configure the project for\r\n      use with the <b>courselib</b> and <b>googletestlib</b> libraries (as you\r\n      will for most programming assignments).\r\n<p>\r\n<li>Third, you will use a driver program and GoogleTest to test code\r\n      that I have provided in the start project folder (and later for code that\r\n      you will write): my code has a deliberate error that you will find and\r\n      fix.\r\n<p>\r\n<li>Fourth, when you have corrected the program, you will submit its\r\n      <b>.hpp</b> file using the Checkmate submission system.\r\n</ul>\r\nFor all later assignments, I will not be providing as much code as I do in\r\n  this assignment, because the focus of this assignment is using tools,\r\n  not writing code; the focus of the later assignments is writing code\r\n using the tools that you will learn in this assignment.\r\n<b>But</b> that assumes that you learn how to use these tools now.\r\nThere is actually just one error in this code, and this write-up will\r\n  detail where it is and how to fix it.\r\nSo the purpose of this assignment is not to fix the error, but instead to become\r\n  familiar with the tools you will use throughout the quarter to find and fix\r\n  your own errors.\r\n<p>\r\nYou may want to print this document and carefully read it, marking any parts\r\n  that contain important information (for review, before you submit the file);\r\n  you might want to save the copy you marked-up.\r\nPlease report any major problems on the <b>Programming Assignments</b> message\r\n  board (and any minor problems, like typos, to me).\r\nI expect you to read this entire document and perform all the operations it\r\n  describes...maybe even more than once to better learn the tools covered.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Download/Unzip -->\r\n\r\n<a name=\"download\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Download and Unzip</b></td>\r\n<td width =\"80%\">\r\nDownload (onto your desktop) and unzip the following \r\n  <a href=\"program0.zip\">Eclipse Start Project Folder</a>.\r\nGenerally if you right-click the <b>.zip</b> file, one of\r\n  the options available will unzip the file: <b>Izarc</b>\r\n  and <b>WinZip</b> are two common programs, both further\r\n  specify an <b>Extract [to] Here</b> option.\r\nIf you have any problems ask one of the staff for help.\r\n<p>\r\nThe resulting unzipped folder contains a <b>src</b> folder (as\r\n  all Eclipse/C++ projects do) in which are nested the <b>.hpp</b> and\r\n  <b>.cpp</b> files for the programming project.\r\nThis project contans five files.\r\nThe <b>src</b> folder contains four files.\r\n<ul>\r\n  <li>The <b>linear_array_queue.hpp</b> file implements a queue data type\r\n       (but with one bug).\r\n  <li>The <b>driver.cpp</b> and <b>driver_queue.hpp</b> files, which we use\r\n        to test drive the <b>LinearArrayQueue</b>\r\n  <li>The <b>test_queue.cpp</b> file which contains a GoogleTest for any\r\n        implementation of a queue.\r\n</ul>\r\nIn <b>driver_queue.hpp</b> and <b>test_queue.hpp</b> the two lines\r\n        <b><pre>  #include \"linear_array_queue.hpp\"\r\n  typedef ics::LinearArrayQueue&lt;std::string&gt; QueueType;</b></pre>\r\nchoose the linear array queue implementation to test.\r\n<p>\r\nThere is also a file named <b>loadq.txt</b>, outside the <b>src</b> folder,\r\n  which is used with the <b>lf</b> command in the driver.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Start Eclipse, Create a Project, Install Libraries -->\r\n\r\n<a name=\"eclipse\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Start Eclipse, Create a C++<br>\r\n                    Project, and Configure<br>\r\n                    Eclipse to use the courselib</b></td>\r\n<td width =\"80%\">\r\nNext you need to start Eclipse and create a project using the project folder\r\n  you just downloaded.\r\nIf you have not already installed a <b>courselib</b> project in Eclipse, follow\r\n  the <b>Courselib Installation</b> instructions at the start of\r\n  <a href=\"../../../common/modules46/courselib.html\">\r\n    Courselib Installation and Use</a> document.\r\nOnce you have correctly created a <b>courselib</b> project and built it,\r\n  follow the <b>Creating a Project that Uses the Courselib</b> instructions\r\n  later in that document for creating a new project and configuring it to use\r\n  the <b>courselib</b>.\r\nFor uniformity, use the name <b>Program0</b> for your project's name.\r\nI did these operations from memory in 2 minutes: if it takes you longer\r\n  than 5 minutes, practice more.\r\n<p>\r\nLater in this handout you will be instructed to install/use the\r\n  <b>googletest</b> library, which is not needed yet.\r\nFor most projects later in the quarter, when you create the project you should\r\n  immediately configure it to use both the <b>courselib</b> and\r\n  <b>googletest</b> libraries.\r\n<p>\r\nThe <b>LinearArrayQueue</b> file in this project defines an almost correct\r\n  class that implements the behavior of a queue data type: it is a simpler to\r\n  understand but less efficient version of the <b>ArrayQueue</b> class supplied\r\n  in the <b>courselib</b>.\r\nYou will be implementing lots of (abstract) data types, like this one, during\r\n  the quarter.\r\nA queue is a simple FIFO data type, adhering to the First-in First-out ordering\r\n  property.\r\nQueues enqueue values to their rear and dequeue values from their front, so\r\n  these are the two \"hot spots\" that must be efficiently accessed in any data\r\n  structure that implements a queue.\r\n<p>\r\nWe can implement the queues data type efficiently by using either an array or\r\n  linked list data structure.\r\nThe queue type implementation in this programming assignment,\r\n  <b>LinearArrayQueue</b>, declares the required instance variables and needed\r\n  methods using an array data structure: the front of the queue is always\r\n  stored at index 0; the rear is stored at a higher index in the array.\r\nUsing a linear array is conceptually simple to understand and program,\r\n  but it has a slower-than-necessary <b>dequeue</b> operation (when compared\r\n  with using a circular array data structure used in the <b>ArrayQueue</b>\r\n  class, which we will discuss later in lecture): it always requires\r\n  looping through an array.\r\nWhen all the necessary libraries are installed, this class compiles and can\r\n  be tested in the driver and via GoogleTest; but it is incorrect, so it\r\n  results in a few execution/run-time errors.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Run Driver -->\r\n\r\n<a name=\"driver\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the Driver</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter has a \"driver\" program that\r\n  allows us to \"drive it\": to call (test) each of its methods and observe the\r\n  results.\r\nThe driver for queues is in the class named <b>DriverQueue</b> stored in the\r\n  <b>driver_queue.hpp</b> file in the <b>src</b> folder in <b>courselib</b>.\r\n<p>\r\n<b>To run this driver program on the <b>LinearArrayQueue</b> I have already done\r\n  the following in the driver_queue.hpp file; but you will have to do something\r\n  similar in later projects, so carefully observe what I did here. </b>\r\n<ul>\r\n  <li>I copied the <b>driver_queue.hpp</b> file from the <b>src</b> folder in\r\n        <b>courselib</b> for this project.\r\n  <p>\r\n  <li>In the <b>driver_queue.hpp</b> file, I changed the <b>#include</b> in\r\n      line 11 from\r\n        <b><pre>#include \"array_queue_.hpp\"</pre></b>\r\n      to\r\n        <b><pre>#include \"linear_array_queue_.hpp\"</pre></b>\r\n  <li>In the <b>driver_queue.hpp</b> file, I changed the <b>typedef</b> in line\r\n      16 from\r\n        <b><pre>typedef ics::ArrayQueue&lt;std::string&gt; QueueType;</pre></b>\r\n      to\r\n        <b><pre>typedef ics::LinearArrayQueue&lt;std::string&gt; QueueType;</pre></b>\r\n  <li>In the <b>driver.cpp</b> file, ensure that the <b>#include</b> on line 1 \r\n        refers to <b>\"driver_queue.hpp\"</b> and ensure the definition on\r\n        line 4 refers to <b>ics::DriverQueue d;</b>\r\n</ul>\r\nWhen a file name appears in your project's <b>src</b> folder and also in\r\nthe <b>courselib</b>'s <b>src</b> folder (as <b>driver_queue.hpp</b> does), the\r\n  one appearing in the project will be the one used.\r\n<p>\r\nBecause I already made all these changes in the downloaded project folder,\r\n  just build and run this program: the <b>main</b> in <b>driver.cpp</b>\r\n  constructs a <b>driver_queue</b> object that tests the\r\n   <b>LinearArrayQueue</b> implementation of a queue data type.\r\n<p>\r\nThe program should now start running in the <b>Console</b> tab at the bottom\r\n  of Eclipse.\r\nThe console window will display the queue being manipulated (now empty)\r\n and the following menu of options that you can use to call/test each queue\r\n method.\r\n<!--- </td></tbody></table> --->\r\n<p>\r\n<img src=\"images/rundriverconsole.jpg\"></img>\r\n<p>\r\n<!--- <table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\nNote that this driver tests a queue that stores <b>std::string</b> values.\r\nYou must enter a string to test any Mutator (Command) or Accessor (Query)\r\n  method.\r\nOf special note is the <b>it</b> command, which constructs and tests an explicit\r\n  iterator for this queue: it has its own submenu of options applicable\r\n  to iterators (which are the same for every data type).\r\n<p>\r\nNote that the queue being manipulated prints before the menu using its\r\n  <b>.str()</b> query, that starts with the data type (here <b>queue</b>)\r\n  followed by the enqueued values in brackets.\r\nAfterwards are all the data members in the implementing class and their values.\r\nIn an <b>LinearArrayQueue</b>...\r\n<ul>\r\n  <li>...the <b>length</b> is the length of its array.\r\n  <li>...the <b>used</b> is the number of array indexes containing values\r\n        (always <= <b>length</b>).\r\n  <li>...the <b>mod_count</b> counts the number of modifications made to the\r\n        queue since its construction.\r\n</ul>\r\nThe <b>&lt;</b> command shows just the <b>queue[]</b> part of the <b>.str()</b>\r\n  command.\r\nThis relationship is true for how <b>&lt;&lt</b> and <b>.str()</b> are\r\n  related for all classes: the <b>.str()</b> version produces more detailed\r\n  information that is often useful for debugging.\r\n<p>\r\nIssue the <b>m</b>, <b>s</b>, and <b>p</b> commands to query the state of\r\n  the empty queue.\r\nThe driver should show the following.\r\n<!---</td></tbody></table>--->\r\n<p>\r\n<img src=\"images/rundriverconsolemsp.jpg\"></img>\r\n<p>\r\n<!---<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\nThe <b>peek</b> method returns a reference to the queue's first value (which\r\n  the driver prints); but it cannot work correctly on an empty queue.\r\nNotice what is printed instead: the thrown exception\r\n  (<b>EmptyError</b>) and the <b>Class::method</b> that raised the error.\r\nThus, the driver just ignores this command and we can continue driving the\r\n  <b>LinearArrayQueue</b> class.\r\n<p>\r\nNext issue the <b>e</b> command and enqueue <b>test1</b> when prompted.\r\nThis method returns the number of values enqueued to the queue\r\n  (for queues, which can contain duplicate values, it always returns\r\n  <b>1</b>; for sets, which cannot contain duplicate values, this method\r\n  may return <b>0</b> if the value is already in the set).\r\nThe queue now prints (before the next menu) as\r\n<b><pre>queue q = queue[test1]:rear(length=1,used=1,mod_count=1)</pre></b>\r\nwhich shows...\r\n<ul>\r\n  <li>...the queue now contains the value <b>test1</b> (and the rear of the\r\n        queue is indicated by <b>:rear</b>: this annotation makes more sense\r\n        when the queue contains more than one value).\r\n  <li>...the length of the array holding the queue values has increased to\r\n        <b>1</b>.\r\n  <li>...the queue is using <b>1</b> value in the array.\r\n  <li>...the queue has been mutated <b>1</b> time since being constructed:\r\n        the previous accessors/queries are not counted.\r\n</ul>\r\n<p>\r\nNext issue the <b>e</b> command again and enqueue <b>test2</b> when prompted.\r\nThe queue now prints (before the next menu) as\r\n<b><pre>queue q = queue[test1,test2]:rear(length=2,used=2,mod_count=2)</pre></b>\r\nOrder is important in queues: the earlier a value is enqueued, the earlier it\r\n  appears in the array.\r\nNotice that both <b>length</b> and <b>used</b> increase to <b>2</b>.\r\n<p>\r\nNext issue the <b>e</b> command again and enqueue <b>test3</b> when prompted.\r\nThe queue now prints (before the next menu) as\r\n<b><pre>queue q = queue[test1,test2,test3]:rear(length=4,used=3,mod_count=3)</pre></b>\r\nNotice that <b>length</b> increases to <b>4</b> while <b>used</b> increases to\r\n  <b>3</b>: generally if there is not enough room in an array, its length is\r\n  <b>doubled</b>, not just <b>incremented by 1</b>: we will discuss why later in\r\n  the quarter, when we analyze the running time of <b>N</b> enqueues.\r\nThe driver should show the following.\r\n<p>\r\n<!---</td></tbody></table>--->\r\n<p>\r\n<img src=\"images/rundriverconsoleeee.jpg\"></img>\r\n<p>\r\n<!---<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\nNext issue the <b>d</b> command which should dequeue the value at the front of\r\n  the queue.\r\nIt correctly prints <b>dequeue = test1</b>, but when it prints the queue\r\n  before the next menu, it appears as\r\n<b><pre>queue q = queue[test2,test3,test3]:rear(length=4,used=3,mod_count=4)</pre></b>\r\nThis result is <b>incorrect</b> because (a) <b>used</b> is still <b>3</b>, and\r\n  (b) <b>test3</b> now appears in two different queue/array locations (it was\r\n  shifted one to the left, but still appears at the end).\r\nIn fact, if you issue the <b>d</b> command again, it correctly prints\r\n  <b>dequeue = test2</b> but <b>used</b> remains <b>3</b> and now <b>test3</b>\r\n  appears in all three positions in the array.\r\n<p>\r\nNext issue the <b>x</b> command (whose <b>clear</b> method is <b>void</b> and\r\n  returns -and the driver prints- no result).\r\nIt will correctly clear the queue, which prints before the final menu as\r\n<b><pre>queue q = queue[]:rear(length=4,used=0,mod_count=5)</pre></b>\r\n<p>\r\n<!---</td></tbody></table>--->\r\n<p>\r\n<img src=\"images/rundriverconsoledddx.jpg\"></img>\r\n<p>\r\n<!---<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\nSo, using this driver, we can call/test all the methods in the\r\n  <b>LinearArrayQueue</b> class, looking for incorrect behavior.\r\n<p>\r\nIf we see errors in the output, to help us debug any errors that we find we \r\n  can...\r\n<ul>\r\n  <li>...add code in the driver (to print intermediate results) and rerun it.\r\n  <li>...add code in the <b>LinearArrayQueue</b> (to print intermediate results)\r\n          and rerun the driver.\r\n  <li>...use the debugger to set breakpoints in our methods and execute/step\r\n       through the code while observing how it changes its state \r\n</ul>\r\nA later section of this document illustrates using the driver with the debugger.\r\nFor now, continue to explore and experiment with the other commands in this\r\n driver, and <b>DO NOT</b> fix the error in <b>delete</b> yet.\r\nThe <b>lf</b> command allows quickly enqueuing a series of values read from\r\n  a file (the default it <b>loadq.txt</b>, which is included with this project).\r\nTry the <b>it</b> commands to better understand what we can do with iterators\r\n  (especially how to erase selected values inside the queue).\r\n<p>\r\nIf you ever find your program in an <b>infinite loop</b>, you can terminate the\r\n  program manually by clicking the red-square Terminate button\r\n  <img src=\"images/stop.jpg\"></img> the top-left icon on the console window.\r\nThen you can click the gray X or Xx icon <img src=\"images/xs.jpg\"></img>\r\n  to clear the the console (to the right of the red square).\r\n<p>\r\nTo rerun the driver after editing any of these files, click the right-pointing\r\n  triangle icon <img src=\"images/run.jpg\"></img>.\r\nWhen Eclipse <b>builds</b> a project it compiles all its files.\r\nWhen Eclipse <b>runs</b> a project it links these compiled files and the\r\n  code in configured libraries and runs the single <b>main</b> function it\r\n  finds (if it finds none or more than one, it will report an error).\r\nSo we can build but not run the <b>courselib</b> project because it is a\r\n  library and has no <b>main</b> method to run.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Run GoogleTest Test -->\r\n\r\n<a name=\"junit\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Run the GoogleTest<br> Unit Test</b></td>\r\n<td width =\"80%\">\r\nEach data type that we will discuss this quarter also has a GoogleTest for\r\n  testing any/all of its implementations.\r\nWhile a driver for a class is code that allows us to manually test its methods\r\n  and observe their results, a GoogleTest is code that automatically tests the\r\n  class and report its results.\r\nIt produces output to show clearly which tests passed and which tests failed;\r\n  and for the failed tests, it produces more detailed information about how the\r\n  test failed.\r\nWhen the code is modified (hopefully corrected), it is very easy to rerun all\r\n  the tests and observe the changes (hopefully more/all tests are now passed)\r\n  automatically.\r\n<p>\r\nTo run the GoogleTest program, we must change the <b>program0</b> project as\r\n  follows.\r\n<ul>\r\n  <li>Configure the project for use with the <b>googletestlib</b> library.\r\n      If you have not already installed a <b>googletestlib</b> in\r\n        Eclipse, follow the <b>Googlettest Installation</b> instructions at the\r\n        <a href=\"../../../common/online.html\">Course Software</a> page.\r\n      Once you have correctly installed the <b>googletestlib</b>,\r\n        follow the <b>Creating a Project that Uses the Googletestlib</b>\r\n        instructions later in the document for creating a new project (already\r\n        done for this project) and configuring it to use the\r\n        <b>googletestlib</b>.\r\n      I did these operations from memory in 2 minutes: if it takes you longer\r\n        than 5 minutes, practice more.\r\n  <p>\r\n  <li>Uncomment the <b>main</b> function at the bottom of the\r\n        <b>test_queue.cpp</b> file (actually uncomment the entire file).\r\n      Likewise we must comment-out the <b>main</b> function in the\r\n        <b>driver.cpp</b> file (actually comment-out the entire file).\r\n      Only one <b>main</b> function can exist in a C++ project, because there\r\n        can be only one starting point for the program being run.\r\n</ul>\r\nBefore running this project, examine the code in the <b>test_queue</b> file.\r\nIt consists of 12 separate tests, each which should be readable and\r\n  understandable if you understand what queues are about.\r\nNow run the GoogleTest.\r\nThe result is illustrated below.\r\nCheck the bottom of GoogleTest's output first\r\nIt summarizes the number of passed tests and names the failed tests: you can\r\n  examine these failed tests in more detail, if they are present.\r\n<!---</td></tbody></table>--->\r\n<p>\r\n<img src=\"images/rungoogletest.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<!---<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\n<p>\r\n<h3>Failure Modes</h3>\r\n<p>\r\nThere are two major failure modes possible in each GoogleTest.\r\n<ul>\r\n  <li>An assertion failure in a test means that the code being tested did not\r\n        meet its requirements.\r\n      GoogleTest will print useful information about the failure (just what it\r\n        prints is based on what kind of assertion failed).\r\n      In the figure above, both the <b>dequeue1</b> and <b>dequeue2</b> tests\r\n        failed (on lines 138 and 150 respectively); the assertions concerned\r\n        truth values for calling the <b>q.empty()</b> method, whose different\r\n        <b>Actual</b> and <b>Expected</b> values are shown.\r\n  <p>\r\n  <li>An exception failure in a test means that the code being tested threw an\r\n       exception.\r\n      GoogleTest will print information about the exception (although often\r\n        it just states an unexpected exception was thrown..\r\n      In the figure above, no unexpected exceptions were thrown.\r\n  <p>\r\n</ul>\r\nIn addition, it is also possible that incorrect code will exhibit a failure\r\n  mode that GoogleTest cannot detect and report: an infinite loop.\r\nIn such a case GoogleTest will stop printing information in the console\r\n  after starting to run a test.\r\nIf the <b>enqueue</b> test caused an infinite loop, the console might look\r\n  as follows.\r\n<!---</td></tbody></table>--->\r\n<p>\r\n<img src=\"images/rungoogletestinfinite.jpg\"></img>\r\n<p>\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<!---<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>&nbsp;</b></td>\r\n<td width =\"80%\">\r\n--->\r\nIf you ever find your program in an <b>infinite loop</b>, you can terminate the\r\n  program manually by clicking the Red Square on the top of the console\r\n  window (the leftmost icon).\r\nThen you can click the X or Xx icons (to the right of the Red Square) to clear\r\n  the the console.\r\nIn such a case, you would have to manually stop the program as described above\r\n  (clicking the Red Square in the Console window).\r\nIn the console with the original test, the Red Square is greyed-out, because\r\n  the GoogleTest has already terminated.\r\n<p>\r\nYou have a choice of either commenting-out this test code (so GoogleTest won't\r\n  run this test, but will run subsequent tests) or keeping this test and\r\n  immediately debugging the code that is causing it to loop infinitely.\r\nIf you choose the former, remember to uncomment the test code eventually to\r\n  ensure your code is passing the test.\r\n<p>\r\n<h3>Debugging</h3>\r\n<p>\r\nHere is a short but <b>important</b> list of four stategies that we can employ\r\n  when our code fails, to try to understand the cause of the problem (and then\r\n  hopefully correct it).\r\nFirst, examine the line of code in the test at which the failure was detected\r\n  (which is printed in the console) and the information it displays related to\r\n  the failure.\r\n<ol>\r\n  <li>Seaching the code for a mistake using the failure information as a guide.\r\n  <li>Add arbitrary C++ code in the GoogleTest to print useful information.\r\n  <li>Use the debugger to set a breakpoint before the failed assertion, \r\n        and then examine any relevant state.\r\n   <li>Use the driver to duplicate/explore the problem manually.\r\n</ol>\r\n<p>\r\n<h3>Tests</h3>\r\n<p>\r\nGenerally, each public method has its own GoogleTest, reflecting the\r\n  semantics (meaning) of what that method does in the class (sometimes needing\r\n  to call other methods too).\r\nIt is good to be able to read and understand the GoogleTest code (and you will\r\n  get more experience doing so during the quarter) because it can be useful to\r\n  add debugging code to it: typically printing the state of variables just\r\n  before a test/assertion failed.\r\nMostly GoogleTest code intersperses calls to the methods of the class being\r\n  tested with assertions about what the results of those method-calls should\r\n  be: a test method fails when any assertions in it fail.\r\n<p>\r\nThe tests are peformed in the order in which they appear.\r\nI try to arrange my tests from the simple to the more complex.\r\nSometimes bugs causing failures in the earlier tests also cause failures in\r\n  the latter ones.\r\nSo an important debugging strategy is to concentrate on and correct the earlier\r\n  bugs: at best the later bugs might automatically disappear; at worst it will\r\n  be easier to understand/correct the later/more complicated bugs after you have\r\n  understood/corrected the earlier/simpler ones.\r\n<p>\r\nAlso note that each test is abandoned when the first assertion fails; it \r\n  doesn't test subsequent assertions <b>in that test function</b>\r\n  (but GoogleTest will still attempt to do all <b>other</b> test functions\r\n   after any failure).\r\nThis strategy leads to two interesting consequences\r\n<ul>\r\n  <li>The output is not cluttered with multiple failure messages for\r\n        multiple assertions in each test: instead each test either passes or\r\n        fails; and if it fails, it presents details on only the first failure.\r\n  <p>\r\n  <li>Expect that a test might still fail after you make corrections to your\r\n        code; but the correction should cause a failure later in the test:\r\n        e.g., an earlier assertion in the test that failed should now pass,\r\n        even if later assertions (which were not reached because of the earlier\r\n        failure) now are tested and fail.\r\n</ul>\r\n<p>\r\n<h3>Debugging Examples</h3>\r\n<p>\r\nHere we will examine the four strategies for debugging stated above.\r\nThe first failure was on line 138 in the <b>dequeue1</b> test.\r\nThe entire test appears as follows, with its line numbers.\r\n<b><pre>  130 TEST_F(QueueTest, dequeue1) {\r\n  131   QueueType q;\r\n  132   q.enqueue(\"a\");\r\n  133   q.enqueue(\"b\");\r\n  134   q.enqueue(\"c\");\r\n  135   ASSERT_EQ(\"a\",q.dequeue());\r\n  136   ASSERT_EQ(\"b\",q.dequeue());\r\n  137   ASSERT_EQ(\"c\",q.dequeue());\r\n  138   ASSERT_TRUE(q.empty());\r\n  139   ASSERT_EQ(0, q.size());\r\n  140 }</pre></b>\r\nThe error states that the queue was expected to be empty but it was not.\r\n<ol>\r\n<li>Our first stategy would be just to look at the code in the\r\n      <b>LinearArrayQueue</b/b> class.\r\n    We will see that the the <b>empty</b> method returns <b>false</b> when\r\n      <b>used</b> is not <b>0</b>.\r\n    We will also see that <b>used</b> is initialized to <b>0</b>, and if we\r\n      enqueue three values and then dequeue three values it should return to\r\n      <b>0</b>.\r\n    Since the <b>enqueue</b> test worked, we can focuse on the <b>dequeue</b>\r\n       method to learn why <b>used</b> was not decremented to <b>0</b>.\r\n<p>\r\n\r\n<li>Our second stategy would be to add some code in the <b>dequeue1</b> test to\r\n      help us understand why the <b>empty</b> method returns <b>false</b>.\r\n    We could, for example, print the size and even the queue itself (using the\r\n      more verbose <b>.str()</b> function), using the  following code.\r\n    <b><pre>std::cout << \"in deqeue1: size = \" << q.size() << \", queue = \" << q.str() << std::endl;</pre></b>\r\n    I highly recommend putting textual material in these debugging displays, to\r\n      identify them: as we put more and more debugging displays into a program\r\n      (which we typically do when debugging) they can become confusing.\r\n    If we put this code right before the line 138 it would display\r\n    <b><pre>in deqeue1: size = 3, queue = queue[c,c,c]:rear(length=4,used=3,mod_count=6)</pre></b>\r\n    The queue is supposed to be empty, but its <b>used</b> is <b>3</b>.\r\n    It might be useful to put this statement after the last call to\r\n    <b>enqueue</b> and after each call to <b>dequeue()</b> to observe how\r\n    <b>used</b> changes (in fact, it doesn't).\r\n<p>\r\n\r\n<li>Our third strategy is to use the debugger to set a breakpoint before the\r\n      failed assertion, and then examine relevant state.\r\n    The debugger in Eclipse/C++ operates similarly to the Eclipse/Python.\r\n    We can set unconditional and conditional breakpoints, single step (into,\r\n      over, and out of) code, observe the values of global and local variables.\r\n    Experiment with the debugger until you know how to use it to perform common\r\n      debugging tasks (like those indicated below).\r\n    <p>\r\n    Try these steps.\r\n    <ul>\r\n       <li>Set an unconditional breakpoint on line 138; recall that when a line\r\n             has a breakpoint, execution stops <b>before</b> the line is\r\n             executed.\r\n       <li>Launch the debugger by clicking the bug icon \r\n             <img src=\"images/debug.jpg\"></img>.\r\n           When the <b>Confirm Perspective Switch</b> popup window appears,\r\n             click <b>Yes</b>: it will switch from the <b>C++</b> perpsective\r\n             to the <b>debug</b> perspective.\r\n       <li>Click the resume icon <img src=\"images/resume.jpg\"></img> to start\r\n             execution of the GoogleTest program.\r\n       <li>The debugger stops the program before executing line 138 and shows\r\n             the following\r\n           <p>\r\n           <img src=\"images/rundebugging.jpg\"></img>.\r\n           <p>\r\n           Note that <b>used</b> is <b>3</b>, which is why the <b>empty</b>\r\n             method returns false.\r\n       <li>We could investigate the <b>dequeue</b> method by setting a\r\n             breakpoint earlier, on line 135; and then when that line is\r\n             reached, we could click the step over icon\r\n             <img src=\"images/stepover.jpg\"></img>,\r\n             and observe (by lack of yellow highlighting) that the executing the\r\n             <b>dequeue</b> method did not change the <b>used</b> instance\r\n             variable.\r\n           <p>\r\n           <img src=\"images/debugstepover.jpg\"></img>.\r\n           <p>\r\n       <li>For now, just terminate the debugger and return to the <b>C/C++</b>\r\n             perspective\r\n    </ul>\r\n<p>\r\n\r\n<li>Our fourth strategy would be to use the driver to duplicate/explore the\r\n      problem manually.\r\n    Actually in our discussion of the driver we saw that when we enqueued\r\n      three values and dequeued all three, the result was a queue whose\r\n      <b>used</b> was still <b>3</b>, with the last enqueued values stored in\r\n      all indexes.\r\n</ol>\r\n\r\nIn fact, both test failures relate to a single bug: the <b>used</b> variable\r\n  was not decremented in the <b>dequeue</b> method: I commented-out the code\r\n  at line 174 of the <b>linear_array_queue.hpp</b> file.\r\nRemember that sometimes fixing one bug will cause many failed tests to pass.\r\n<p>\r\nRestore this line of code (uncomment it) to fix the error.\r\nNow rerun this GoogleTest and verify that there are no more failures.\r\nThe bottom of the <b>Console</b> window should show\r\n<p>\r\n<img src=\"images/allpass.jpg\"></img>.\r\n<p>\r\nBoth errors and failures indicate that the code is incorrect and should be\r\n  fixed.\r\nOf course, we must be careful because it is possible that an assertion is\r\n  incorrect: e.g., an assertion asserts the size of the queue is some number\r\n  but based on the <b>add</b>/<b>remove</b> methods called in the GoogleTest\r\n  it should be some other number.\r\nWhile you should mostly believe the GoogleTests I distribute, there is always\r\n  the possibility that I have made a mistake.\r\nIf you look closely at a GoogleTest and don't understand why some failing\r\n  assertion should be true, please contact me to resolve the problem.\r\n</td>\r\n</tbody>\r\n</table>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Submit via Checkmate -->\r\n\r\n<a name=\"checkmate\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Submit the Program for Grading via Checkmate</b></td>\r\n<td width =\"80%\">\r\nAfter you have fixed the code and verified that it works correctly via the\r\n  Driver and the GoogleTest, you should submit the code for grading via\r\n  <b>Checkmate</b>.\r\nIf you are unfamiliar with this system, read the\r\n  <a href=\"../../../common/handouts/checkmate/index.html\">\r\n    Submitting Homework Using Checkmate</a> document.\r\nIt explains how to submit programs, even if you are not officially registered\r\n  in the class yet.\r\n<p>\r\n<b>You are responsible for submtting the correct version of your code</b>.\r\n<p>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- End -->\r\n\r\n<a name=\"end\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Final Words</b></td>\r\n<td width =\"80%\">\r\n<b>You are also responsible for backing up your work frequently</b>.\r\n<p>\r\nWhenever you have updated your code (and when you have finished an assignment)\r\n  you should backup/save the entire project folder on a USB drive.\r\nEven if you are using your own computer, you should still backup your work.\r\nProbably it is best to zip the entire project folder (which makes it smaller\r\n  and also speeds up copying -which depends as much on how many files you\r\n  copy as on the size of the files).\r\nIf you are on a lab machine, you can also backup/save this zipped project\r\n  folder on your Unix file space.\r\n<p>\r\nIf you need to restore a project folder, follow these steps.\r\n<ol>\r\n  <li>Unzip the project folder.\r\n  <li>Delete its <b>.cproject</b> and <b>.project</b> file.\r\n  <li>Delete its <b>.settings</b> and <b>Debug</b> folders.\r\n  <li>Recreate the project and configure all its libraries.\r\n</ol>\r\n<p>\r\nPractice doing everything in this lab over and again, until you are familiar\r\n  with all these skills and can do them without reading the directions.\r\nYou will save yourself much time later in the quarter (when time is really\r\n  important) if you spend some time now (when things aren't so rushed)\r\n  mastering this material.\r\n</table>\r\n</body>\r\n</html>\r\n", "id": 11070.0}