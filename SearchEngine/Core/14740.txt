{"text": "Navigation HomeDocumentationPeoplePublicationsRelated LinksFAQResearch Homepage Downloads Dynamo Framework v 1Power Aware KernelSystem Query LibrariesChange log Distribution Download Demo PA API API s File Structure Dynamo middleware lib paapi user levelkernel levellinux ipaq v 6 1 Directory user level use level library for using the PAAPI paapi dvs h data structures and functions visible to the end userpaapi dvs c contains all functions that interface with the PAAPI system calls as well as control the creation the destruction of POSIX threads The functions are described as follows paapi dvs create thread type creates a thread type It takes in as parameter the thread type info wcet deadline period and it returns a handle identifying the typepaapi dvs change thread type changes the thread type of the calling threadpaapi dvs create instance creates a thread instance given the type the code to be executed and the data to pass to the thread and returns a handle identifying the instance This functions creates a POSIX thread under the SCHED FIFO linux real time scheduling policy and stores the handles for the posix thread internally in the library in the vector threads The threads start executing but get block when they call paapi dvs app associate paapi dvs init start the PAAPI library It only sets the scheduling policy of the calling thread and all its children to SCHED FIFOpaapi dvs select policy chooses which PAAPI scheduling policy will be usedpaapi dvs start taskset Starts all the threads created with paapi dvs create instance Here the schedulability analysis takes place within the kernel and the PAAPI tasks are waken up paapi dvs app start Called by the PAAPI threads It notifies the beginning of execution this functions is actually unnecessary but I kept it there anyways If you look at the code you will see that it does not do anything paapi dvs app start period Called by the PAAPI threads It tells the PAAPI scheduler that the task will start executing its periodic jobs paapi dvs app done it notifies the PAAPI scheduler that the execution of the job is finished paapi dvs app associate Called by the PAAPI threads Associated the thread as a PAAPI thread Before calling this function the thread is technically not a PAAPI thread yet paapi dvs app leave Called by the PAAPI threads Leaves the PAAPI scheduler freeing all the resources allocated to it paapi dvs app sleep until next period called by the PAAPI threads Puts the thread to sleep until its next period is due Directory kernel level use level library for using the PAAPI include linux paapi user h defines data structures and constants visible to the user level librariesinclude linux paapi syscall h proper definition of the PAAPI system calls added to the kernel nothing very interesting include linux paapi sched h data structure and constants used at kernel level onlyinclude paapi h interface of the new system calls to user levelpaapi sched c contains the kernel internal data structures type and instance tables as well as functions to help on debugging and trace collection This file initially has a lot more code but it was cut down to a few functions and data structures only log trace we don t print out trace message during the execution of tasks because the overhead is prohibitive So we store a trace of events in a kernel internal table and print it out at the end of the execution of the task set print trace print the trace messages mentioned above paapi c contains the implementation of all the PAAPI system calls defined at kernel level as well as the queues used to manipulate the PAAPI threads There are two internal queues wait for admission control the PAAPI threads are put in this queue after calling sys paapi associate wait for next period the PAAPI threads are put in this queue after calling sys paapi sleep until next period sys paapi create type creates a system type and insert in the system type tablesys paapi create instance creates a new instance and inserts it in the instance tablesys paapi app status depends on the parameter status as follows PAAPI DVS APP START does not do anything anymore PAAPI DVS APP START PERIOD initializes some data structures in the instance table and puts the thread to sleep in the wait for next period queue PAAPI DVS APP DONE updates the instance table for the calling thread marking that the thread is done sys paapi associate marks the flag in the linux process data structure saying that the calling thread is a PAAPI thread sys paapi sleep until next period puts the calling thread to sleep in the wait for next period queue sys paapi control taskset implement three distinct functions depending on the parameter cmd PAAPI CTRL START TASKSET goes over the wait for admission control queue and collects information about each thread from the type tables in order to perform the schedulability analysis and wake up the tasksPAAPI CTRL CHANGE TYPE changes the type information of the calling thread and performs a new schedulability testPAAPI PRINT LOG print the trace log in the screen It is called by the paapi dvs start taskset user level function after all PAAPI threads join the parent thread sys paapi destroy task deallocates info from the instance and type tables if necessarywake up tasks called by the operating system tick handler in order to wake up tasks which are due to execution according to their period rm schedulability analysis performs the schedulability analysis and sets the processor speed accordingly The three parameters are essential in this functions and change its behavior as follows max iterations defines for how many iterations the schedulability analysis algorithm runs 1 iteration means that a single slowdown factor for the entires taskset will be computed With more iterations it tries to compute individual slowdown factors per task calc dynamic factor when there this is a computation of dynamic slowdown factors or static slowdown factors For the static factors the WCET of each task is used For the dynamic factor the average execution time in the last HISTORY WINDOW SIZE is used change frequency whether the processor frequency should be changed after computing the slowdown factors update next task incl macro inserted within the Linux scheduler to keep track of execution information of a PAAPI job whenever a context switch takes place This macro updates the info of the task selected for execution update current task incl This macro updates the info of the job preempted of completed Linux kernel files modified relative to the Linux directory three power softlink inserted in the tree and pointing to the directory kernel level include linux power softlink inserted in the tree and pointing to the directory kernel level include linux kernel sched c macros update next task incl and update current task incl are inserted right before a context switch takes place Two includes are also inserted include linux cpufreq h and include linux power paapi sched h include linux sched h two new fields are added to the struct task struct data structure instance index and paapi task The first is a pointer to the PAAPI instance table representing this task and the second is a flag used to recognize whether this thread is a PAAPI thread include asm arm arch sa11 time h function call to wake up tasks is inserted in the OS tick interrupt handler sa11 timer interrupt in order to wake up tasks when their period is due arch arm config in this line int Timer frequency HZ 1 CONFIG HZ 1 is inserted to allow configuration of the OS timer tick precision fs proc array c the following was added in the file start modified for PAAPI implementation priority nice UL removed task it real value hz to std task it real value hz to std task start time vsize mm mm rss you might want to shift this left 3 end modified for PAAPI implementation include asm arm param h the following was modified in the file The lines commented out were there originally The rest was added start modified for PAAPI implementation ifndef HZ define HZ 1 ifdef KERNEL define HZ CONFIG HZ internal kernel timer frequency define USER HZ 1 some user interfaces are in ticks define CLOCKS PER SEC USER HZ like times define hz to std x x HZ USER HZ endif if defined KERNEL HZ 1 define hz to std a a ifndef HZ define HZ 1 if userspace cheats give them 1 endif end modified for PAAPI implementation ", "_id": "http://dynamo.ics.uci.edu/paapi.html", "title": "forge/dynamo: pa-api documentation", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n    <head>\n        <title>FORGE/Dynamo: PA-API Documentation</title>\n        <style type=\"text/css\" media=\"screen\">\n            /*<![CDATA[*/\n                @import url(css/dynamo.css);\n            /*]]>*/\n        </style>\n    </head>\n    <body>\n        <div id=\"container\">\n            <div id=\"top\">\n                <center><img src=\"./img/dynamoheader.png\" alt=\"homepage banner\" /></center>\n            </div>\n            <div id=\"rightnav\">\n                <ul>\n                    <li class=\"header\">Navigation\n                        <ul>\n                            <li><a href=\"index.html\">Home</a></li>\n                            <li><a href=\"docs.html\">Documentation</a></li>\n                            <li><a href=\"people.html\">People</a></li>\n                            <li><a href=\"publication.html\">Publications</a></li>\n                            <li><a href=\"related.html\">Related Links</a></li>\n                            <li><a href=\"faq.html\">FAQ</a></li>\n                            <li><a href=\"http://dynamo.ics.uci.edu\">Research Homepage</a></li>\n                        </ul>\n                    </li>\n                    <li class=\"header\">Downloads\n                        <ul>\n                          <!-- <li><b>For Internal Use Only</b></li>  -->\n                            <li><a href=\"files/dynamo_paapi_framework.tgz\">Dynamo Framework v0.1</a></li>\n                            <li><a href=\"files/zImage_paapi\">Power-Aware Kernel</a></li>\n                            <li><a href=\"files/libDynamoMiddleware.tgz\">System Query Libraries</a></li>\n                            <li><a href=\"changelog.txt\">Change log</a></li>\n                        </ul>\n                    </li>\n                    <li class=\"header\">Distribution\n                        <ul>\n                            <!-- <li><b>For Internal Use Only</b></li> -->\n                            <li><a href=\"demo.html\">Download Demo</a></li>\n                            <!-- <li><a href=\"changelog.txt\">Change log</a></li>  -->\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n            <div id=\"content\">\n                <h2>PA-API API's</h2>\n                File Structure:\n                <ul>\n                    <li>Dynamo\n                        <ul>\n                            <li>middleware\n                                <ul>\n                                    <li>lib</li>\n                                </ul>\n                            </li>\n                            <li>paapi\n                                <ul>\n                                    <li>user-level</li>\n                                    <li>kernel-level</li>\n                                    <li>linux-ipaq-v0.6.1</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                </ul><br/>\n                <h3>Directory user-level/ : use level library for using the PAAPI</h3>\n                <ul>\n                    <li>paapi_dvs.h - data structures and functions visible to the end user</li>\n                    <li>paapi_dvs.c - contains all functions that interface with the PAAPI system\n                    calls as well as control the creation the destruction of POSIX threads. The\n                    functions are described as follows:\n                        <ul>\n                            <li>paapi_dvs_create_thread_type: creates a thread type. It takes in as \n                                parameter the thread type info (wcet, deadline, period) and it returns\n                                a handle identifying the type</li>\n                            <li>paapi_dvs_change_thread_type: changes the thread type of the calling thread</li>\n                            <li>paapi_dvs_create_instance: creates a thread instance given the type, the\n                                code to be executed and the data to pass to the thread and returns a \n                                handle identifying the instance. This functions creates a POSIX thread\n                                under the SCHED_FIFO linux real time scheduling policy and stores the \n                                handles for the posix thread internally in the library in the vector\n                                \"threads\". The threads start executing but get block when they call \n                                paapi_dvs_app_associate.</li>\n                            <li>paapi_dvs_init: start the PAAPI library. It only sets the scheduling policy\n                                of the calling thread and all its children to SCHED_FIFO</li>\n                            <li>paapi_dvs_select_policy: chooses which PAAPI scheduling policy will be used</li>\n                            <li>paapi_dvs_start_taskset: Starts all the threads created with \n                                paapi_dvs_create_instance. Here the schedulability analysis takes place\n                                (within the kernel) and the PAAPI tasks are waken up.</li>\n                            <li>paapi_dvs_app_start: Called by the PAAPI threads. It notifies the beginning\n                                of execution (this functions is actually unnecessary but I kept it there\n                                anyways. If you look at the code you will see that it does not do anything)</li> \n                            <li>paapi_dvs_app_start_period: Called by the PAAPI threads. It tells the \n                                PAAPI scheduler that the task will start executing its periodic jobs.</li>\n                            <li>paapi_dvs_app_done: it notifies the PAAPI scheduler that the execution \n                                of the job is finished.</li>\n                            <li>paapi_dvs_app_associate: Called by the PAAPI threads. Associated the thread\n                                as a PAAPI thread. Before calling this function the thread is technically \n                                not a PAAPI thread yet.</li>\n                            <li>paapi_dvs_app_leave: Called by the PAAPI threads. Leaves the PAAPI scheduler\n                                freeing all the resources allocated to it.</li>\n                            <li>paapi_dvs_app_sleep_until_next_period: called by the PAAPI threads. Puts\n                                the thread to sleep until its next period is due.</li>\n                        </ul>\n                    </li>\n                </ul>\n                <h3>Directory kernel-level/ : use level library for using the PAAPI</h3>\n                <ul>\n                    <li>include/linux/paapi-user.h - defines data structures and constants visible\n                        to the user level libraries</li>\n                    <li>include/linux/paapi_syscall.h - proper definition of the PAAPI system calls\n                        added to the kernel (nothing very interesting)</li>\n                    <li>include/linux/paapi_sched.h - data structure and constants used at\n                        kernel level only</li>\n                    <li>include/paapi.h - interface of the new system calls to user level</li>\n                    <li>paapi_sched.c - contains the kernel internal data structures (type and\n                        instance tables) as well as functions to help on debugging and trace \n                        collection. This file initially has a lot more code but it was cut down\n                        to a few functions and data structures only\n                        <ul>\n                            <li>log_trace - we don't print out trace message during the execution of tasks\n                                because the overhead is prohibitive. So we store a trace of events in a \n                                kernel internal table and print it out at the end of the execution of the\n                                task set.</li>\n                            <li>print_trace - print the trace messages mentioned above.</li>\n                        </ul>\n                    </li>\n                    <li>paapi.c - contains the implementation of all the PAAPI system calls defined  \n                        at kernel level as well as the queues used to manipulate the PAAPI\n                        threads. There are two internal queues:\n                        <ul>\n                            <li>wait_for_admission_control - the PAAPI threads are put in this queue\n                                after calling sys_paapi_associate.</li>\n                            <li>wait_for_next_period - the PAAPI threads are put in this queue after\n                                calling sys_paapi_sleep_until_next_period</li>\n                        </ul>\n                        <ul>\n                            <li>sys_paapi_create_type - creates a system type and insert in the system \n                                type table</li>\n                            <li>sys_paapi_create_instance - creates a new instance and inserts it in the\n                                instance table</li>\n                            <li>sys_paapi_app_status - depends on the parameter \"status\" as follows:\n                                <ul>\n                                    <li>PAAPI_DVS_APP_START - does not do anything anymore.</li>\n                                    <li>PAAPI_DVS_APP_START_PERIOD - initializes some data structures in the\n                                        instance table and puts the thread to sleep in the\n                                        \"wait_for_next_period\" queue.</li>\n                                    <li>PAAPI_DVS_APP_DONE - updates the instance table for the calling thread\n                                        marking that the thread is done.</li>\n                                </ul>\n                            </li>\n                            <li>sys_paapi_associate - marks the flag in the linux process data structure \n                                saying that the calling thread is a PAAPI thread.</li>\n                            <li>sys_paapi_sleep_until_next_period - puts the calling thread to sleep in\n                                the \"wait_for_next_period\" queue.</li>\n                            <li>sys_paapi_control_taskset - implement three distinct functions depending \n                                on the parameter \"cmd\":\n                                <ul>\n                                    <li>PAAPI_CTRL_START_TASKSET - goes over the \"wait_for_admission_control\"\n                                        queue and collects information about each thread (from the type tables)\n                                        in order to perform the schedulability analysis and wake up the tasks</li>\n                                    <li>PAAPI_CTRL_CHANGE_TYPE - changes the type information of the calling\n                                        thread and performs a new schedulability test</li>\n                                    <li>PAAPI_PRINT_LOG - print the trace log in the screen. It is called \n                                        by the paapi_dvs_start_taskset user level function after all PAAPI\n                                        threads join the parent thread.</li>\n                                </ul>\n                            </li>\n                            <li>sys_paapi_destroy_task - deallocates info from the instance and type \n                                tables if necessary</li>\n                            <li>wake_up_tasks - called by the operating system tick handler in order to \n                                wake up tasks which are due to execution (according to their period).</li>\n                            <li>rm_schedulability_analysis - performs the schedulability analysis and \n                                sets the processor speed accordingly. The three parameters are essential\n                                in this functions and change its behavior as follows:\n                                <ul>\n                                    <li>max_iterations - defines for how many iterations the schedulability\n                                        analysis algorithm runs. 1 iteration means that a single slowdown\n                                        factor for the entires taskset will be computed. With more iterations \n                                        it tries to compute individual slowdown factors per task.</li>\n                                    <li>calc_dynamic_factor - when there this is a computation of dynamic \n                                        slowdown factors or static slowdown factors. For the static factors\n                                        the WCET of each task is used. For the dynamic factor the average \n                                        execution time in the last HISTORY_WINDOW_SIZE is used.</li>\n                                    <li>change_frequency - whether the processor frequency should be changed\n                                        after computing the slowdown factors.</li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </li>\n                    <li>update_next_task.incl - macro inserted within the Linux scheduler to keep\n                        track of execution information of a PAAPI job whenever a context switch\n                        takes place. This macro updates the info of the task selected for\n                        execution.</li>\n                    <li>update_current_task.incl - This macro updates the info of the job preempted\n                        of completed.</li>\n                </ul>\n                <h3>Linux kernel files modified (relative to the Linux directory three):</h3>\n                <ul>\n                    <li>power - softlink inserted in the tree and pointing to the directory \n                        \"kernel-level\"</li>\n                    <li>include/linux/power - softlink inserted in the tree and pointing to the\n                        directory \"kernel-level/include/linux/\".</li> \n                    <li>kernel/sched.c - macros update_next_task.incl and update_current_task.incl\n                        are inserted right before a context switch takes place. Two includes are \n                        also inserted \"#include &lt;linux/cpufreq.h&gt;\" and \n                        \"#include &lt;linux/power/paapi_sched.h&gt;\".</li>\n                    <li>include/linux/sched.h - two new fields are added to the \"struct task_struct\"\n                        data structure: instance_index and paapi_task. The first is a pointer to\n                        the PAAPI instance table representing this task and the second is a flag\n                        used to recognize whether this thread is a PAAPI thread.</li>\n                    <li>include/asm-arm/arch-sa1100/time.h - function call to wake_up_tasks is \n                        inserted in the OS tick interrupt handler \"sa1100_timer_interrupt\" in order\n                        to wake up tasks when their period is due.</li>\n                    <li>arch/arm/config.in - this line\n                        \"int 'Timer frequency (HZ) (100)' CONFIG_HZ 100\" is inserted to allow\n                        configuration of the OS timer tick precision.\n                    <li>fs/proc/array.c - the following was added in the file:\n                        <pre>\n        /* start: modified for PAAPI implementation */\n        priority,\n        nice,\n        0UL /* removed */,\n        //task->it_real_value,\n        hz_to_std(task->it_real_value),\n        hz_to_std(task->start_time),\n        vsize,\n        mm ? mm->rss : 0, /* you might want to shift this left 3 */\n        /* end: modified for PAAPI implementation */\n                        </pre>\n                    </li>\n                    <li>include/asm-arm/param.h the following was modified in the file. The lines\n                        commented out were there originally. The rest was added.\n                        <pre>\n        /* start: modified for PAAPI implementation */\n        //#ifndef HZ\n        //#define HZ 100\n        #ifdef __KERNEL__\n        # define HZ            CONFIG_HZ       /* internal kernel timer frequency */\n        # define USER_HZ       100             /* some user interfaces are in ticks */\n        # define CLOCKS_PER_SEC        (USER_HZ)       /* like times() */\n        # define hz_to_std(x) ((x) / ((HZ) / (USER_HZ)))\n        #endif\n        //#if defined(__KERNEL__) && (HZ == 100)\n        //#define hz_to_std(a) (a)\n        #ifndef HZ\n        #define HZ 100                  /* if userspace cheats, give them 100 */\n        #endif\n        /* end: modified for PAAPI implementation */\n                        </pre>\n                    </li>\n                </ul>\n            </div>\n            <div id=\"footer\">\n                <!-- &copy; Copyright 2004 Michael Philpott. -->\n            </div>\n        </div>\n    </body>\n</html>\n", "id": 14740.0}