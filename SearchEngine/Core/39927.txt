{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Istream iterator T Stream Definition The class Istream iterator T Stream is an input iterator adaptor for the input stream class Stream and value type T It is particularly useful for classes that are similar but not compatible to std istream include CGAL IO Istream iterator h Creation Istream iterator T Stream i creates an end of stream iterator i This is a past the end iterator and it is useful when constructing a range Istream iterator T Stream i Stream s creates an input iterator i reading from s When s reaches end of stream this iterator will compare equal to an end of stream iterator created using the default constructor Operations i fulfills the requirements for an input iterator Example The following program reads points from a Window stream until the right mouse button gets clicked ifndef CGAL USE LEDA include iostream int main std cout This demo needs LEDA std endl return else include CGAL Cartesian h include CGAL IO Istream iterator h include CGAL IO Window stream h include iostream include algorithm typedef CGAL Cartesian double Point 2 Point typedef CGAL Istream iterator Point CGAL Window stream Iterator ifdef CGAL USE CGAL WINDOW define leda window CGAL window define leda green CGAL green endif void init window leda window W CGAL cgalize W W set fg color leda green W display W init 1 1 1 int main CGAL Window stream window 512 512 init window window std copy Iterator window Iterator std ostream iterator Point std cout n return endif Next Mode Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/IOstream_ref/Class_Istream_iterator.html", "title": "istream_iterator&lt;t,stream&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './IOstream_ref/Istream_iterator.tex' -->\n<html> <head>  \n<title>Istream_iterator&lt;T,Stream&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1734\"></A>\n\n<A NAME=\"Cross_link_anchor_1735\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1578\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Istream_iterator<T,Stream>\"></A>\n<h2><I>CGAL::Istream_iterator&lt;T,Stream&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Istream_iterator.html#Cross_link_anchor_1735\">Istream_iterator</A>&lt;T,Stream&gt;</I> is an input iterator adaptor for the\ninput stream class <I>Stream</I> and value type <MATH><I>T</I></MATH>. It is particularly\nuseful for classes that are similar but not compatible to <I>std::istream</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Istream_iterator.h\">CGAL/IO/Istream_iterator.h</A>&gt;</I>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Istream_iterator.html#Cross_link_anchor_1735\">Istream_iterator</A>&lt;T,Stream&gt; i;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an end-of-stream\n  iterator <I>i</I>. This is a past-the-end iterator, and it is useful\n  when constructing a range.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Istream_iterator.html#Cross_link_anchor_1735\">Istream_iterator</A>&lt;T,Stream&gt; i ( Stream&amp; s);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates an input\n  iterator <I>i</I> reading from <MATH><I>s</I></MATH>. When <MATH><I>s</I></MATH> reaches end of stream,\n  this iterator will <A HREF=\"../NumberTypeSupport_ref/Function_compare.html#Cross_link_anchor_1339\">compare</A> equal to an end-of-stream iterator\n  created using the default constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<I>i</I> fulfills the requirements for an input iterator.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program reads points from a <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A></I> until\nthe right mouse button gets clicked.\n<P>\n\n<pre class=\"ExampleCode\">#ifndef CGAL_USE_LEDA\n#include &lt;iostream&gt;\nint main(){ std::cout &lt;&lt; &quot;This demo needs LEDA&quot; &lt;&lt; std::endl; return 0;}\n#else\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/IO/<A HREF=\"Class_Istream_iterator.html#Cross_link_anchor_1735\">Istream_iterator</A>.h&gt;\n#include &lt;CGAL/IO/<A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A>.h&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt;::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                   Point;\ntypedef <A HREF=\"Class_Istream_iterator.html#Cross_link_anchor_1734\">CGAL::Istream_iterator</A>&lt;Point, <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A>&gt; Iterator;\n\n#ifdef CGAL_USE_CGAL_WINDOW\n#define leda_window CGAL::window\n#define leda_green  CGAL::green\n#endif\n\nvoid init_window( leda_window&amp; W) {\n    CGAL::cgalize( W);\n    W.set_fg_color( leda_green);\n    W.display();\n    W.init(-1.0, 1.0, -1.0);\n}\n\nint main () {\n    <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1757\">CGAL::Window_stream</A> window( 512, 512);\n    init_window(window);\n    std::copy( Iterator(window), Iterator(),\n               std::ostream_iterator&lt;Point&gt;(std::cout,&quot;\\n&quot;));\n    return 0;\n}\n\n#endif\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Enum_Mode.html\"><I>Mode</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_11!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39927.0}