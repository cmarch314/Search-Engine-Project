{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Aff transformation d Kernel Definition An instance of the data type Aff transformation d Kernel is an affine transformation of d dimensional space It is specified by a square matrix M of dimension d 1 All entries in the last row of M except the diagonal entry must be zero the diagonal entry must be non zero A point p with homogeneous coordinates p p d can be transformed into the point p transform A Mp where A is an affine transformation created from M by the constructors below Types Aff transformation d Kernel RT the ring type Aff transformation d Kernel FT the field type Aff transformation d Kernel LA the linear algebra layer Aff transformation d Kernel Matrix the matrix type Creation Aff transformation d Kernel t introduces some transformation Aff transformation d Kernel t int d Identity transformation introduces the identity transformation in d dimensional space Aff transformation d Kernel t Matrix M introduces the transformation of d space specified by matrix M Precondition M is a square matrix of dimension d 1 where entries in the last row of M except the diagonal entry must be zero the diagonal entry must be non zero template typename Forward iterator Aff transformation d Kernel t Scaling Forward iterator start Forward iterator end introduces the transformation of d space specified by a diagonal matrix with entries set start end on the diagonal a scaling of the space Precondition set start end is a vector of dimension d 1 Aff transformation d Kernel t Translation Vector d Kernel v introduces the translation by vector v Aff transformation d Kernel t int d Scaling RT num RT den returns a scaling by a scale factor num den Precondition den Aff transformation d Kernel t int d Rotation RT sin num RT cos num RT den int e1 int e2 1 returns a planar rotation with sine and cosine values sin num den and cos num den in the plane spanned by the base vectors be1 and be2 in d space Thus the default use delivers a planar rotation in the x y plane Precondition sin num2 cos num2 den2 and e1 e2 d Precondition den Aff transformation d Kernel t int d Rotation Direction d Kernel dir RT num RT den int e1 int e2 1 returns a planar rotation within a two dimensional linear subspace The subspace is spanned by the base vectors be1 and be2 in d space The rotation parameters are given by the 2 dimensional direction dir such that the difference between the sines and cosines of the rotation given by dir and the approximated rotation are at most num den each Precondition dir dimension 2 dir is degenerate and num den is positive den e1 e2 d Operations int t dimension the dimension of the underlying space Matrix t matrix returns the transformation matrix Aff transformation d Kernel t inverse returns the inverse transformation Precondition t matrix is invertible Aff transformation d Kernel t s composition of transformations Note that transformations are not necessarily commutative t s is the transformation which transforms first by t and then by s Implementation Affine Transformations are implemented by matrices of number type RT as a handle type All operations like creation initialization input and output on a transformation t take time O t dimension 2 dimension takes constant time The operations for inversion and composition have the cubic costs of the used matrix operations The space requirement is O t dimension 2 Next affinely independent Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_d_ref/Class_Aff_transformation_d.html", "title": "aff_transformation_d&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_d_ref/Aff_transformation_d.tex' -->\n<html> <head>  \n<title>Aff_transformation_d&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_504\"></A>\n\n<A NAME=\"Cross_link_anchor_505\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_376\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Aff_transformation_d<Kernel>\"></A>\n<h2><I>CGAL::Aff_transformation_d&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nAn instance of the data type <I><A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> is an\naffine transformation of <MATH><I>d</I></MATH>-dimensional space. It is specified by a\n<A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> matrix <MATH><I>M</I></MATH> of dimension <MATH><I>d + 1</I></MATH>. All entries in the last row of\n<I>M</I> except the diagonal entry must be zero; the diagonal entry\nmust be non-zero.  A point <MATH><I>p</I></MATH> with homogeneous coordinates <MATH><I>(p[0],\n..., p[d])</I></MATH> can be transformed into the point <I>p.transform(A)</I>\n= <MATH><I>Mp</I></MATH>, where <I>A</I> is an affine transformation created from <I>M</I>\nby the constructors below.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the ring type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the field type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::LA\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the linear algebra layer.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;::<A HREF=\"Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the matrix type.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces some\ntransformation.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( int d,  <A HREF=\"../Kernel_23_ref/Class_Identity_transformation.html#Cross_link_anchor_143\">Identity_transformation</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the identity transformation in\n  <MATH><I>d</I></MATH>-dimensional space.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( <A HREF=\"Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A> M);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the\n  transformation of <MATH><I>d</I></MATH>-space specified by matrix <MATH><I>M</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>M</I> is a <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> matrix of dimension <MATH><I>d + 1</I></MATH> where entries in the\n  last row of <I>M</I> except the diagonal entry must be zero; the\n  diagonal entry must be non-zero.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt;typename Forward_iterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"../Kernel_23_ref/Class_Scaling.html#Cross_link_anchor_149\">Scaling</A>,<BR>\n\nForward_iterator start,<BR>\n\nForward_iterator end);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the transformation of <MATH><I>d</I></MATH>-space\n  specified by a diagonal matrix with entries <I>set [start,end)</I> on\n  the diagonal (a scaling of the space).<BR>\n\n<EM>Precondition: </EM><I>set     [start,end)</I> is a vector of dimension <MATH><I>d+1</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( <A HREF=\"../Kernel_23_ref/Class_Translation.html#Cross_link_anchor_151\">Translation</A>,  <A HREF=\"Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the translation by vector <MATH><I>v</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( int d,  <A HREF=\"../Kernel_23_ref/Class_Scaling.html#Cross_link_anchor_149\">Scaling</A>,  RT num,  RT den);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    returns a scaling by a scale factor <I>num/den</I>.<BR>\n\n<EM>Precondition: </EM><I>den !=0 </I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    int d,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Rotation.html#Cross_link_anchor_147\">Rotation</A>,<BR>\n\nRT sin_num,<BR>\n\nRT cos_num,<BR>\n\nRT den,<BR>\n\nint e1 = 0,<BR>\n\nint e2 = 1);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    returns a planar rotation\n  with sine and cosine values <I>sin_num/den</I> and <I>cos_num/den</I>\n  in the plane spanned by the base vectors <MATH><I>b<SUB>e1</SUB></I></MATH> and <MATH><I>b<SUB>e2</SUB></I></MATH> in\n  <MATH><I>d</I></MATH>-space. Thus the default use delivers a planar rotation in the\n  <MATH><I>x</I></MATH>-<MATH><I>y</I></MATH> plane.<BR>\n\n<EM>Precondition: </EM><MATH><I><I>sin_num</I><SUP>2</SUP> + <I>cos_num</I><SUP>2</SUP> =\n  <I>den</I><SUP>2</SUP></I></MATH> and <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> e<SUB>1</SUB> &lt; e<SUB>2</SUB> &lt; d</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>den != 0</I>\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    int d,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Rotation.html#Cross_link_anchor_147\">Rotation</A>,<BR>\n\n<A HREF=\"Class_Direction_d.html#Cross_link_anchor_491\">Direction_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; dir,<BR>\n\nRT num,<BR>\n\nRT den,<BR>\n\nint e1 = 0,<BR>\n\nint e2 = 1);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    returns a planar\n  rotation within a two-dimensional linear subspace. The subspace is\n  spanned by the base vectors <MATH><I>b<SUB>e1</SUB></I></MATH> and <MATH><I>b<SUB>e2</SUB></I></MATH> in <MATH><I>d</I></MATH>-space.  The\n  rotation parameters are given by the <MATH><I>2</I></MATH>-dimensional direction\n  <I>dir</I>, such that the difference between the sines and cosines of\n  the rotation given by <I>dir</I> and the approximated rotation are at\n  most <I>num/den</I> each.<BR>\n\n<BR>\n\n<EM>Precondition: </EM><I>dir.dimension()==2</I>,\n  <I>!dir.is_degenerate()</I> and <I>num &lt; den</I> is positive, <I>den     != 0</I>, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> e<SUB>1</SUB> &lt; e<SUB>2</SUB> &lt; d</I></MATH>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the dimension of the underlying space\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Matrix__matrix69_;\"></A>\n <A HREF=\"Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.matrix ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the transformation matrix\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Aff_transformation_d6Kernel9_inverse69_;\"></A>\n<A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    t.inverse ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the inverse\n  transformation.<BR>\n\n<EM>Precondition: </EM><I>t.matrix()</I> is invertible.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Class_Aff_transformation_d.html#Cross_link_anchor_505\">Aff_transformation_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     t *  s<A NAME=\"Function_Aff_transformation_d6Kernel9_operator*6const_Aff_transformation_d6Kernel9__s9_;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    composition of transformations. Note\n  that transformations are not necessarily commutative. <I>t*s</I> is\n  the transformation which transforms first by <I>t</I> and then by\n  <I>s</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>\n<P>\n\nAffine Transformations are implemented by matrices of number type\n<I>RT</I> as a handle type. All operations like creation,\ninitialization, input and output on a transformation <MATH><I>t</I></MATH> take time\n<MATH><I>O(<I>t.dimension()</I><SUP>2</SUP>)</I></MATH>. <I>dimension()</I> takes constant time.\nThe operations for inversion and composition have the cubic costs of\nthe used matrix operations. The space requirement is\n<MATH><I>O(<I>t.dimension()</I><SUP>2</SUP>)</I></MATH>.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_affinely_independent.html\"><I>affinely_independent</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37767.0}