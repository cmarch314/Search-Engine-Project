{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Interval nt Definition This section describes briefly what interval arithmetic is its implementation in CGAL and its possible use by geometric programs The main reason for having interval arithmetic in CGAL is its integration into the filtered robust and fast predicates scheme but we also provide a number type so that you can use it separately if you find any use for it such as interval analysis or to represent data with tolerance The purpose of interval arithmetic is to provide an efficient way to bound the roundoff errors made by floating point computations You can choose the behaviour of your program depending on these errors that is what is done for the filtered robust predicates see Section You can find more theoretical information on this topic in BBP 1 Interval arithmetic is a large concept and we will only consider here a simple arithmetic based on intervals whose bounds are doubles So each variable is an interval representing any value inside the interval All arithmetic operations sqrt square min max and abs on intervals preserve the inclusion This property can be expressed by the following formula x and y are reals X and Y are intervals is an arithmetic operation x X y Y x y X Y For example if the final result of a sequence of arithmetic operations is an interval that does not contain zero then you can safely determine its sign include CGAL Interval arithmetic h Is Model for the ConceptFieldNumberType Creation Interval nt I double d introduces the interval d d Interval nt I double i double s introduces the interval i s Operations All functions required by a class to be considered as a CGAL number type see are present as well as the utility functions sometimes with a particular semantic which is described below There are also a few additional functions Interval nt I J returns when the denominator contains Interval nt sqrt I returns sqrt upper bound I when only the lower bound is negative expectable case with roundoff errors and is unspecified when the upper bound also is negative unexpected case double to double I returns the middle of the interval as a double approximation of the interval double I inf returns the lower bound of the interval double I sup returns the upper bound of the interval bool I is point returns whether both bounds are equal bool I is same J returns whether both intervals have the same bounds bool I do overlap J returns whether both intervals have a non empty intersection The two following operators can be used for interval analysis they are not directly useful for Interval nt as a number type Interval nt I J returns the smallest interval containing the two intervals Interval nt I J returns the biggest interval contained in the two intervals The result is unspecified if the two intervals don t intersect The comparison operators sign and compare have the following semantic it is the intuitive one when for all couples of values in both intervals the comparison is identical case of non overlapping intervals This can be expressed by the following formula x and y are reals X and Y are intervals is a comparison operator x X y Y x y true X Y true and x X y Y x y false X Y false Otherwise the comparison is not safe and we first increment the counter Interval nt advanced number of failures and then throw the exception Interval nt advanced unsafe comparison Implementation Interval nt derives from Interval nt advanced The operations on Interval nt are automatically protected against rounding modes and are thus slower than those on Interval nt advanced but easier to use Users that need performance are encouraged to use Interval nt advanced instead see Section Next Interval nt advanced Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/NumberTypeSupport_ref/Class_Interval_nt.html", "title": "interval_nt", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './NumberTypeSupport_ref/Interval.tex' -->\n<html> <head>  \n<title>Interval_nt</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1365\"></A>\n\n<A NAME=\"Cross_link_anchor_1366\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1386\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Interval_nt\"></A>\n<h2><I>CGAL::Interval_nt</I></h2>\n\n\n<A NAME=\"interval\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThis section describes briefly what interval arithmetic is, its implementation\nin C<SMALL>GAL</SMALL>, and its possible use by geometric programs.\nThe main reason for having interval arithmetic in C<SMALL>GAL</SMALL> is its integration\ninto the filtered robust and fast predicates scheme, but we also provide a\nnumber type so that you can use it separately if you find any use for it\n(such as interval analysis, or to represent data with tolerance).\n<P>\n\nThe purpose of interval arithmetic is to provide an efficient way to bound\nthe roundoff errors made by floating point computations.\nYou can choose the behaviour of your program depending on these errors; that\nis what is done for the filtered robust predicates (see Section&nbsp;<A HREF=\"Class_Filtered_exact.html#filter\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).\nYou can find more theoretical information on this topic in\n[<A HREF=\"../biblio.html#Biblio_cgal:bbp-iayed-01\">BBP01</A>].\n<P>\n\n<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A> arithmetic is a large concept and we will only consider here a \nsimple arithmetic based on intervals whose bounds are <I>double</I>s.\nSo each variable is an interval representing any value inside the interval.\nAll arithmetic operations (+, -, <MATH><I>*</I></MATH>, <MATH><I>/</I></MATH>, <MATH><I><A HREF=\"Function_sqrt.html#Cross_link_anchor_1414\">sqrt</A>()</I></MATH>, <I><A HREF=\"Function_square.html#Cross_link_anchor_1418\">square</A>()</I>,\n<I><A HREF=\"Function_min.html#Cross_link_anchor_1394\">min</A>()</I>, <I><A HREF=\"Function_max.html#Cross_link_anchor_1392\">max</A>()</I> and <I><A HREF=\"Function_abs.html#Cross_link_anchor_1335\">abs</A>()</I>) on intervals preserve the inclusion.\nThis property can be expressed by the following formula (<MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> are\nreals, <MATH><I>X</I></MATH> and <MATH><I>Y</I></MATH> are intervals, <MATH><I><IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> is an arithmetic operation):\n<P>\n\n<P ALIGN=CENTER>\n<MATH><I>\n <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\">  x  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> X,  <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\">  y  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> Y, (x <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> y)\n <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> (X <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> Y)\n</I></MATH>\n<P>\n\nFor example, if the final result of a sequence of arithmetic operations is\nan interval that does not contain zero, then you can safely determine its <A HREF=\"Function_sign.html#Cross_link_anchor_1410\">sign</A>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Interval_arithmetic.h\">CGAL/Interval_arithmetic.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3><A HREF=\"../Kernel_23_ref/Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A> I ( double d);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the interval [<I>d</I>;<I>d</I>].\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A> I ( double i,  double s);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces the interval [<I>i</I>;<I>s</I>].\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nAll functions required by a class to be considered as a C<SMALL>GAL</SMALL> number type\n(see&nbsp;<A HREF=\"../NumberTypeSupport/Chapter_main.html#Numbertype\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>) are present, as well as the utility functions,\nsometimes with a particular semantic which is described below.  There are also\na few additional functions.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     I /  J<A NAME=\"Function_Interval_nt_operator/6Interval_nt_J9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n[<MATH><I>- <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </I></MATH>;<MATH><I>+ <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </I></MATH>] when the denominator contains 0.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Interval_nt_sqrt6Interval_nt_I9;\"></A>\n<A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Function_sqrt.html#Cross_link_anchor_1414\">sqrt</A> (  I)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\n[0;<MATH><I><A HREF=\"Function_sqrt.html#Cross_link_anchor_1414\">sqrt</A>(upper_bound(I))</I></MATH>] when only the lower bound is negative (expectable\ncase with roundoff errors), and is unspecified when the upper bound also is\nnegative (unexpected case).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_to_double6Interval_nt_I9;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    to_double (  I)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the\nmiddle of the interval, as a double approximation of the interval.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_inf69;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    I.inf ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the lower bound of the interval.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_double_sup69;\"></A>\ndouble\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    I.sup ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the upper bound of the interval.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_point69;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    I.is_point ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether both bounds are equal.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_same6Interval_nt_J9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    I.is_same (  J)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether both intervals have\nthe same bounds.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_do_overlap6Interval_nt_J9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    I.<A HREF=\"../Kernel_23_ref/Function_do_overlap.html#Cross_link_anchor_207\">do_overlap</A> (  J)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether both intervals\nhave a non empty <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe two following operators can be used for interval analysis, they are not\ndirectly useful for <I><A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A></I> as a number type.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     I ||  J<A NAME=\"Function_Interval_nt_operator__6Interval_nt_J9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the smallest\ninterval containing the two intervals.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     I &amp;&amp;  J<A NAME=\"Function_Interval_nt_operator__6Interval_nt_J9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the biggest\ninterval contained in the two intervals.  The result is unspecified if\nthe two intervals don't intersect.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe comparison operators (<MATH><I>&lt;</I></MATH>, <MATH><I>&gt;</I></MATH>, <MATH><I>&lt;=</I></MATH>, <MATH><I>&gt;=</I></MATH>, <MATH><I>==</I></MATH>, <MATH><I>!=</I></MATH>, <I><A HREF=\"Function_sign.html#Cross_link_anchor_1410\">sign</A>()</I>\nand <I><A HREF=\"Function_compare.html#Cross_link_anchor_1339\">compare</A>()</I>) have the following semantic: it is the intuitive\none when for all couples of values in both intervals, the comparison\nis identical (case of non-overlapping intervals).  This can be expressed\nby the following formula (<MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> are reals, <MATH><I>X</I></MATH> and <MATH><I>Y</I></MATH> are\nintervals, <MATH><I><IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> is a comparison operator):\n<P>\n\n<P ALIGN=CENTER>\n<MATH><I>\n( <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\"> x  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> X,  <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\"> y  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> Y, (x <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> y) = true)\n <IMG BORDER=0 WIDTH=14 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Rightarrow.gif\"> (X <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> Y) = true\n</I></MATH>\n<P>\n\nand\n<P ALIGN=CENTER>\n<MATH><I>\n( <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\"> x  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> X,  <IMG BORDER=0 WIDTH=9 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_forall.gif\"> y  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> Y, (x <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> y) = false)\n <IMG BORDER=0 WIDTH=14 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_Rightarrow.gif\"> (X <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\"><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"> Y) =false\n</I></MATH>\n<P>\n\nOtherwise, the comparison is not safe, and we first increment the counter\n<I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A>::number_of_failures</I>, and then throw the exception\n<I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A>::unsafe_comparison</I>.\n<P>\n\n<H3>Implementation</H3>\n<P>\n\n<I><A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A></I> derives from <I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A></I>.\nThe operations on <I><A HREF=\"Class_Interval_nt.html#Cross_link_anchor_1366\">Interval_nt</A></I> are automatically protected against\nrounding modes, and are thus slower than those on <I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A></I>,\nbut easier to use.\n<P>\n\nUsers that need performance are encouraged to use <I><A HREF=\"Class_Interval_nt_advanced.html#Cross_link_anchor_1368\">Interval_nt_advanced</A></I>\ninstead (see Section&nbsp;<A HREF=\"Class_Interval_nt_advanced.html#interval-adv\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>).\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Interval_nt_advanced.html\"><I>Interval_nt_advanced</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_2!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39192.0}