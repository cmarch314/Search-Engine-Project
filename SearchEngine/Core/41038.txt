{"text": " Home Trees Indices Help Package CHEM Package CombiCDB Module BaseScreen Class BaseScreen hide private frames no frames Class BaseScreen Abstract base class for all screen classes Screen classes are those that take an oemolistream list of molecules as input and outputs a subset of them as an oemolostream that passes some screening criteria determined by the instantiating class Subclasses should primarily just define their own constructor that accepts as parameters anything necessary to define the screening function and override the screenMolecule method Once done then client code just needs to create an instance set the input and output sources and any screening parameters and call runScreen to fill in the output stream Instance Methods hide private setOEIS self oeis setOEOS self oeos setParameter self key value getParameter self key clearParameters self screenMolecule self mol Primary method for subclass to override screenSmiles self smiles Wrapper for primary screenMolecule method prepareParameters self Another method for subclass to override runScreen self Primary execution method to be called by client code runScreenByFilename self sourceFilename screenFilename Alternative to runScreen where filenames are specified to read write instead of assuming the mOEIS and mOEOS attributes are set Class Variables hide private mOEIS CHEM DB rdb search NameRxnPatternMatchingModel Search Output oemolostream to send screened results to mOEOS CHEM DB rdb search NameRxnPatternMatchingModel Search Screening parameters as a dictionary mParameters Method Details hide private screenMolecule self mol Primary method for subclass to override Given a molecule OEMolBase the method should just return True or False as to whether the molecule passes the screening criteria screenSmiles self smiles Wrapper for primary screenMolecule method Creates a molecule object by parsing the SMILES string first prepareParameters self Another method for subclass to override Called before any screenMolecule is done by the runScreen method This is important if say the caller uses the setParameter method after instantiation then need to have a chance to prepare the parameters for usage since can t count on it being done at construction time and don t want to have to do it each time screenMolecule is called However this also means if the screenMolecule method is called directly instead of runScreen the caller must be responsible to call prepareParameters first The again if no extra parameter preparation is necessary as in if simple calls to getParameter can be used by the screenMolecule method then not much to do here runScreen self Primary execution method to be called by client code After setting the input and output streams and any screening parameters just iterate through the input stream and pass all molecules that pass the screenMolecule method to the output stream Class Variable Details hide private mOEIS Output oemolostream to send screened results to Value None mOEOS Screening parameters as a dictionary Better to have these all set by the instantiating subclass s constructor but have it here to provide option to specify or change after instantiation while still only using base class methods Value None Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 27 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.CombiCDB.BaseScreen.BaseScreen-class.html", "title": "chem.combicdb.basescreen.basescreen", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.CombiCDB.BaseScreen.BaseScreen</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.CombiCDB-module.html\">Package&nbsp;CombiCDB</a> ::\n        <a href=\"CHEM.CombiCDB.BaseScreen-module.html\">Module&nbsp;BaseScreen</a> ::\n        Class&nbsp;BaseScreen\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class BaseScreen</h1><br /><br />\n<p>Abstract base class for all screen classes.  Screen classes are those \n  that take an oemolistream (list of molecules) as input and outputs a \n  subset of them, as an oemolostream, that passes some screening criteria, \n  determined by the instantiating class.</p>\n  <p>Subclasses should primarily just define their own constructor that \n  accepts as parameters anything necessary to define the screening \n  function, and override the screenMolecule(...) method.</p>\n  Once done, then client code just needs to create an instance, set the \n  input and output sources and any screening parameters and call \n  runScreen(...) to fill in the output stream.<br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"setOEIS\"></a><span class=\"summary-sig-name\">setOEIS</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">oeis</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"setOEOS\"></a><span class=\"summary-sig-name\">setOEOS</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">oeos</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"setParameter\"></a><span class=\"summary-sig-name\">setParameter</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">key</span>,\n        <span class=\"summary-sig-arg\">value</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"getParameter\"></a><span class=\"summary-sig-name\">getParameter</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">key</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"clearParameters\"></a><span class=\"summary-sig-name\">clearParameters</span>(<span class=\"summary-sig-arg\">self</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#screenMolecule\" class=\"summary-sig-name\">screenMolecule</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">mol</span>)</span><br />\n      Primary method for subclass to override.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#screenSmiles\" class=\"summary-sig-name\">screenSmiles</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">smiles</span>)</span><br />\n      Wrapper for primary screenMolecule method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#prepareParameters\" class=\"summary-sig-name\">prepareParameters</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Another method for subclass to override.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#runScreen\" class=\"summary-sig-name\">runScreen</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Primary execution method to be called by client code.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"runScreenByFilename\"></a><span class=\"summary-sig-name\">runScreenByFilename</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">sourceFilename</span>,\n        <span class=\"summary-sig-arg\">screenFilename</span>)</span><br />\n      Alternative to runScreen(...) where filenames are specified to \n      read / write instead of assuming the mOEIS and mOEOS attributes are \n      set.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#mOEIS\" class=\"summary-name\">mOEIS</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Search<code class=\"variable-ellipsis\">...</code></code><br />\n      Output oemolostream to send screened results to\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.CombiCDB.BaseScreen.BaseScreen-class.html#mOEOS\" class=\"summary-name\">mOEOS</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Search<code class=\"variable-ellipsis\">...</code></code><br />\n      Screening parameters as a dictionary.\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"mParameters\"></a><span class=\"summary-name\">mParameters</span> = <code title=\"{}\">{}</code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"screenMolecule\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">screenMolecule</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">mol</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Primary method for subclass to override.  Given a molecule \n  (OEMolBase), the method should just return True or False as to whether \n  the molecule passes the screening criteria.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"screenSmiles\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">screenSmiles</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">smiles</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Wrapper for primary screenMolecule method.  Creates a molecule object \n  by parsing the SMILES string first.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"prepareParameters\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">prepareParameters</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Another method for subclass to override.  Called before any \n  screenMolecule(...) is done by the runScreen(...) method. This is \n  important if say, the caller uses the setParameter(...) method after \n  instantiation, then need to have a chance to prepare the parameters for \n  usage, since can't count on it being done at construction time and don't \n  want to have to do it each time screenMolecule(...) is called.</p>\n  <p>However, this also means, if the screenMolecule(...) method is called \n  directly instead of runScreen(...), the caller must be responsible to \n  call prepareParameters(...) first.</p>\n  The again, if no extra parameter preparation is necessary, as in if \n  simple calls to getParameter(...) can be used by the screenMolecule(...) \n  method, then not much to do here.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"runScreen\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">runScreen</span>(<span class=\"sig-arg\">self</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Primary execution method to be called by client code. After setting \n  the input and output streams and any screening parameters, just iterate \n  through the input stream and pass all molecules that pass the \n  screenMolecule(...) method to the output stream.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== CLASS VARIABLE DETAILS ==================== -->\n<a name=\"section-ClassVariableDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variable Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariableDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"mOEIS\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">mOEIS</h3>\n  Output oemolostream to send screened results to\n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"mOEOS\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">mOEOS</h3>\n  Screening parameters as a dictionary. Better to have these all set by \n  the instantiating subclass's constructor, but have it here to provide \n  option to specify or change after instantiation, while still only using \n  base class methods.\n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:27 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 41038.0}