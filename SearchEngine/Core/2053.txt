{"text": "Homework 2 due Wednesday Wk 3 required problemstopic1 Baase Exercise 1 41 on page 65 Write out the algorithm to find X in an ordered array using the method that compares X to every fourth entry until X itself or an entry larger than X is found and then in the latter case searches for X among the preceding three How many element comparisons does your algorithm do in the worst case search ordered list2 Baase Exercise 4 5 on page 216 Give an efficient in place algorithm to rearrange an array of N elements so that all the negative keys precede all the nonnegative keys How fast is your algorithm sorting3CLR Exercise 8 1 4 on page 194 Suppose that you are given a sequence of n elements to sort The input sequence consists of n k subsequences each containing k elements The elements in a given subsequence are all smaller than the elements in the succeeding subsequence and larger than the elements in the preceding subsequence Thus all that is needed to sort the whole sequence of length n is to sort the k elements in each of the n k subsequences Show an n lg k lower bound on the number of comparisons needed to solve this variant of the sorting algorithm Hint It is not rigorous to simply combine the lower bounds for the individual subsequences sorting lower bound4CLR Exercise 6 4 3 on page 16 What is the running time of HEAPSORT on an array A of length n that is already sorted in increasing order What about decreasing order heapsort complexity suggested problems topic5CLR Exercise 8 1 3 on page 194lower bound on sorting6CLR Exercise 8 2 2 on page 196stability7Baase Exercise 1 5 on page 67search8Baase Exercise 4 37 on page 214heapsort9CLR Exercise 6 1 1 on page 153heaps1 Baase Exercise 1 47 on pages 66searching unknown sized array11 Linear time solution for Baase Exercise 4 59a on page 218maximum profit window in 2D12 Consider a rectangular array Sort the elements in each row into increasing order Next sort the elements in each column into increasing order Prove that the elements in each row remain sorted shellsort basis Dan Hirschberg Computer Science Department University of California Irvine CA 92697 3435 dan at ics uci edu Last modified Nov 1 2 14", "_id": "http://www.ics.uci.edu/~dan/class/161/hw2.html", "title": " compsci 161 homework #2 ", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n      \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<HTML><HEAD>\n<TITLE> CompSci 161 Homework #2 </TITLE>\n</HEAD><BODY>\n\n<!-- <H2> Homework #2 -- due Monday Wk 3</H2> -->\n<H2 align=center> Homework #2 -- due Wednesday Wk 3</H2>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=red>required problems</font></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>1</td>\n    <td>(Baase Exercise 1.41 on page 65)\n      <BR>Write out the algorithm to find X in an ordered array\n          using the method that compares X to every fourth entry\n          until X itself or an entry larger than X is found,\n          and then, in the latter case, searches for X among the\n          preceding three.&nbsp; How many element comparisons does\n          your algorithm do in the worst case?</td>\n    <td>search ordered list</td>\n<tr><td align=center>2</td>\n    <td>(Baase Exercise 4.50 on page 216)\n       <BR>Give an efficient in-place algorithm to rearrange\n           an array of N elements so that all the negative keys\n           precede all the nonnegative keys.&nbsp;\n           How fast is your algorithm?</td>\n    <td>sorting</td>\n<tr><td align=center>3</td>\n    <td>CLR Exercise 8.1-4 on page 194\n       <BR>Suppose that you are given a sequence of <I>n</I> elements to sort.\n         The input sequence consists of <I>n/k</I> subsequences,\n         each containing <I>k</I> elements.\n         The elements in a given subsequence are all smaller than the elements\n         in the succeeding subsequence and larger than the elements in the\n         preceding subsequence.\n         Thus, all that is needed to sort the whole sequence of length <I>n</I>\n         is to sort the <I>k</I> elements in each of the <I>n/k</I> subsequences.\n         Show an &Omega;(<I>n</I>&nbsp;lg&nbsp;<I>k</I>) lower bound on the\n         number of comparisons needed to solve this variant of the sorting algorithm.\n         (<I>Hint</I>: It is not rigorous to simply combine the lower bounds for the\n         individual subsequences.)\n        </td>\n    <td>sorting lower bound</td>\n<tr><td align=center>4</td>\n    <td>CLR Exercise 6.4-3 on page 160\n       <BR>What is the running time of <tt>HEAPSORT</tt> on an array <I>A</I>\n         of length <I>n</I> that is already sorted in increasing order?\n         What about decreasing order?\n        </td>\n    <td>heapsort complexity</td>\n</table>\n\n<p>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=\"#009900\">suggested problems</font>\n<!--              -- not to be turned in --></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>5</td>\n    <td>CLR Exercise 8.1-3 on page 194</td>\n    <td>lower bound on sorting</td>\n<tr><td align=center>6</td>\n    <td>CLR Exercise 8.2-2 on page 196</td>\n    <td>stability</td>\n<tr><td align=center>7</td>\n    <td>Baase Exercise 1.50 on page 67</td>\n    <td>search</td>\n<tr><td align=center>8</td>\n    <td>Baase Exercise 4.37 on page 214</td>\n    <td>heapsort</td>\n<tr><td align=center>9</td>\n    <td>CLR Exercise 6.1-1 on page 153</td>\n    <td>heaps</td>\n<tr><td align=center>10<font color=blue>*</font></td>\n    <td>Baase Exercise 1.47 on pages 66</td>\n    <td>searching unknown sized array</td>\n<tr><td align=center>11<font color=blue>*</font></td>\n    <td>Linear-time solution for Baase Exercise 4.59a on page 218</td>\n    <td>maximum profit window in 2D</td>\n<tr><td align=center>12<font color=blue>*</font></td>\n    <td>Consider a rectangular array.<BR>\n        Sort the elements in each row into increasing order.<BR>\n        Next sort the elements in each column into increasing order.<BR>\n        Prove that the elements in each row remain sorted.\n    </td>\n    <td>shellsort basis</td>\n</table>\n\n<HR>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\n<ADDRESS>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435\n</ADDRESS>\n<tt>dan at ics.uci.edu</tt><br>\n\nLast modified: Nov 10, 2014\n</BODY></HTML>\n", "id": 2053.0}