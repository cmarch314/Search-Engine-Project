{"text": " Home Trees Indices Help Package CHEM Package CombiCDB Module ReactionProcessor Class ReactionProcessor hide private frames no frames Class ReactionProcessor Given a set of SMIRKS reactions and reactant molecules generates as many combinatorial products as possible by running every reactant permutation through each reaction Also includes a script to generate the output in a format easily inserted into the application database Assuming starting with some reactant and SMIRKS files that have NOT been inserted to the database a complete run including inserting the product info into the database could be accomplished with the following from the command line python ReactionProcessor py reactant smi example smirks product smi python DBUtil py ireactant smi tMOLECULE oreactant smi id CAN SMILES LABEL python DBUtil py iexample smirks tREACTION oexample smirks id SMIRKS LABEL python DBUtil py iproduct smi tMOLECULE oproduct smi id CAN SMILES LABEL python ReactionProcessor py dsynthesis txt pproduct smi reactant smi id example smirks id product smi id python DBUtil py isynthesis txt tSYNTHESIS osynthesis id PRODUCT ID REACTION ID REACTANT ID REACTANT POSITION Alternatively if you wish to use reactants and SMIRKS from the database something like this python DBUtil py select CAN SMILES LABEL MOLECULE ID from MOLECULE reactant smi python DBUtil py select SMIRKS LABEL REACTION ID from REACTION example smirks python ReactionProcessor py reactant smi example smirks product smi python DBUtil py iproduct smi tMOLECULE oproduct smi id CAN SMILES LABEL python ReactionProcessor py dsynthesis pproduct smi reactant smi example smirks product smi id python DBUtil py isynthesis tSYNTHESIS osynthesis id PRODUCT ID REACTION ID REACTANT ID REACTANT POSITION Input Reacant molecule file Can be any format understandable by oemolistream assuming a properly named extension For example molecules smi for SMILES format SMIRKS reaction file File containing one SMIRKS reaction string per line that will be used to process the reactants Either of the above can take stdin as their source by specifying the filename or smi or something similar See documentation of oemolistream for more information Output Product molecule file Outputs all possible products generated from the SMIRKS reactions out of the reactant molecules Again redirection to stdout possible by specifying the filename Each product SMILES will be followed by a molecule title of the format SMIRKS A Reactants X Y Z etc where A Index position in the SMIRKS reaction file of the reaction used to generate this product Index is zero based X Y Z etc Index position in the Reactant molecule file of the respective reactant used Instance Methods hide private getIncludeReactants self setIncludeReactants self value generateProductsByFilename self reactantFilename smirksFilename productFilename Opens files with respective names and delegates most work to generateProducts generateProducts self reactantOEISFactory smirksFile productOEOS Primary method reads the source files to generate products to the output file readSMIRKSFile self smirksFile Read the contents of the file as a list of SMIRKS strings applyReaction self libgen reactantOEISFactory productOEOS reactionIndex currReactantIndexes None reactantList None rejectProductSmiSet None Recursive function to apply the reaction in libgen to all possible permutations of reactants from the reactantOEIS and outputting the results to the productOEOS applyReactionBySmirks self smirks reactantList uniqueOnly True Convenience method addReactants self product libgen reactantList Given a reaction product molecule OEMolBase and the library generator that created it OELibraryGen find all of the reactants starting materials from the libGen and add them as part of the product molecule such that the product molecule will instead represent the whole reaction reactants included productPostProcessing self product reactantOEISFactory reactantList Post processing of product just before it is finally written to the output formatDBFileByFilename self productFilename reactantIDFilename smirksIDFilename productIDFilename dbFilename Opens files with respective names and delegates most work to formatDBFile formatDBFile self productOEIS reactantIDFile smirksIDFile productIDFile dbFile Given the database IDs of reactants reactions smirks and products and information indicating how they are all related generate a simple text file that should be very easy to import into the database to persist that association information visitBondedAtoms self atom visitedAtomIndexes None Starting from the given atom add every visited atom s index to the visistedAtomIndexes Set Class Variables hide private ignoreSelfReactions False includeReactants CHEM DB rdb search NameRxnPatternMatchingM includeUnusedReactants False Method Details hide private generateProducts self reactantOEISFactory smirksFile productOEOS Primary method reads the source files to generate products to the output file See module documentation for more information Note This method takes actual File objects oemolistreams and oemolostreams not filenames to allow the caller to pass virtual Files for the purpose of testing and interfacing Use the main method to have the module take care of opening files from filenames Note that the reactantOEISFactory is not a simple oemolistream either but a factory object that can generate oemolistreams over the list of reactants This is necessary as nested loops iterating over the reactants simultaneously is required readSMIRKSFile self smirksFile Read the contents of the file as a list of SMIRKS strings Comment lines prefixed with will be ignored Expects one SMIRKS string per line of the file Each SMIRKS string can be followed by any title comment etc separated by whitespace These will be ignored applyReaction self libgen reactantOEISFactory productOEOS reactionIndex currReactantIndexes None reactantList None rejectProductSmiSet None Recursive function to apply the reaction in libgen to all possible permutations of reactants from the reactantOEIS and outputting the results to the productOEOS Returns the number of products added for this function call libgen OELibraryGen initialized with a SMIRKS or other reaction string and any number of reactants upto libgen NumReactants reactantOEISFactory IteratorFactory object that can generate oemolistreams over the reactant molecules to feed into libgen productOEOS Oemolostream to write output products from reaction processing to reactionIndex Index indicating what reaction was used in this libgen Just for labelling purposes of output currReactantIndexes List of indexes of reactants that have already been set on the libgen Length of list indicates how many have already been set i e the current depth of recursion and the actual indexes are again useful for labelling the output If reactions always had 2 reactants this design would not be necessary A simple doubly nested loop could enumerate all permutations However since an arbitrary reaction may have n reactants an n leveled nested loop would be required which cannot be determined until runtime Thus this recursive approach is used instead applyReactionBySmirks self smirks reactantList uniqueOnly True Convenience method Parse out the SMIRKS string for the caller and collect product results in a list rather than requiring an OE output stream This instantiates separate copies of every product list thus being less efficient in memory usage than a streaming process Should only be used for convenience Reactant list parameter is expected to be a list of molecule objects If uniqueOnly will only return non redundant results addReactants self product libgen reactantList Given a reaction product molecule OEMolBase and the library generator that created it OELibraryGen find all of the reactants starting materials from the libGen and add them as part of the product molecule such that the product molecule will instead represent the whole reaction reactants included Note that this method assumes that there is only one starting material per reactant position For other library generation applications this assumption may be true productPostProcessing self product reactantOEISFactory reactantList Post processing of product just before it is finally written to the output Return True if everything is okay Return False if this product has an error and should be rejected from final output formatDBFile self productOEIS reactantIDFile smirksIDFile productIDFile dbFile Given the database IDs of reactants reactions smirks and products and information indicating how they are all related generate a simple text file that should be very easy to import into the database to persist that association information Each line should correspond to a row in the SYNTHESIS table with values to insert respective to PRODUCT ID REACTION ID REACTANT ID and REACTANT POSITION visitBondedAtoms self atom visitedAtomIndexes None Starting from the given atom add every visited atom s index to the visistedAtomIndexes Set Recursively visit all bonded atoms Class Variable Details hide private includeReactants Value None Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 27 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html", "title": "chem.combicdb.reactionprocessor.reactionprocessor", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.CombiCDB.ReactionProcessor.ReactionProcessor</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.CombiCDB-module.html\">Package&nbsp;CombiCDB</a> ::\n        <a href=\"CHEM.CombiCDB.ReactionProcessor-module.html\">Module&nbsp;ReactionProcessor</a> ::\n        Class&nbsp;ReactionProcessor\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class ReactionProcessor</h1><br /><br />\n<pre class=\"literalblock\">\nGiven a set of SMIRKS reactions and reactant molecules, generates as many \ncombinatorial products as possible by running every reactant permutation \nthrough each reaction\n\nAlso includes a script to generate the output in a format easily inserted\ninto the application database.  Assuming starting with some reactant\nand SMIRKS files that have NOT been inserted to the database, a complete\nrun, including inserting the product info into the database could be\naccomplished with the following from the command line:\n\n===========================================================================\npython ReactionProcessor.py reactant.smi example.smirks product.smi\npython DBUtil.py -ireactant.smi     -tMOLECULE -oreactant.smi.id    CAN_SMILES LABEL\npython DBUtil.py -iexample.smirks   -tREACTION -oexample.smirks.id  SMIRKS LABEL\npython DBUtil.py -iproduct.smi      -tMOLECULE -oproduct.smi.id     CAN_SMILES LABEL\npython ReactionProcessor.py -dsynthesis.txt -pproduct.smi reactant.smi.id example.smirks.id product.smi.id\npython DBUtil.py -isynthesis.txt    -tSYNTHESIS -osynthesis.id      PRODUCT_ID  REACTION_ID REACTANT_ID REACTANT_POSITION\n===========================================================================\n\nAlternatively, if you wish to use reactants and SMIRKS from the database, something like this:\n\n===========================================================================\npython DBUtil.py &quot;select CAN_SMILES, LABEL, MOLECULE_ID from MOLECULE&quot;  reactant.smi\npython DBUtil.py &quot;select SMIRKS, LABEL, REACTION_ID from REACTION&quot;      example.smirks\npython ReactionProcessor.py reactant.smi example.smirks product.smi\npython DBUtil.py -iproduct.smi      -tMOLECULE -oproduct.smi.id     CAN_SMILES LABEL\npython ReactionProcessor.py -dsynthesis -pproduct.smi reactant.smi example.smirks product.smi.id\npython DBUtil.py -isynthesis        -tSYNTHESIS -osynthesis.id      PRODUCT_ID  REACTION_ID REACTANT_ID REACTANT_POSITION\n===========================================================================\n\nInput: \n- Reacant molecule file\n    Can be any format understandable by oemolistream, assuming a properly \n    named extension.  For example, &quot;molecules.smi&quot; for SMILES format.\n\n- SMIRKS reaction file\n    File containing one SMIRKS reaction string per line that will \n    be used to process the reactants\n\nEither of the above can take stdin as their source by specifying the \nfilename &quot;-&quot; or &quot;.smi&quot; or something similar.  See documentation of \noemolistream for more information\n\nOutput:\n- Product molecule file\n    Outputs all possible products generated from the SMIRKS reactions\n    out of the reactant molecules.  Again, redirection to stdout possible \n    by specifying the filename &quot;-&quot;.  Each product SMILES will be followed \n    by a molecule &quot;title&quot; of the format &quot;SMIRKS[A]Reactants[X,Y,Z,etc.]&quot; where\n        A = Index / position in the SMIRKS reaction file of the reaction \n            used to generate this product.  Index is zero-based\n        X,Y,Z,etc. = Index / position in the Reactant molecule file of \n            the respective reactant used\n\n</pre><br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"getIncludeReactants\"></a><span class=\"summary-sig-name\">getIncludeReactants</span>(<span class=\"summary-sig-arg\">self</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"setIncludeReactants\"></a><span class=\"summary-sig-name\">setIncludeReactants</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">value</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"generateProductsByFilename\"></a><span class=\"summary-sig-name\">generateProductsByFilename</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">reactantFilename</span>,\n        <span class=\"summary-sig-arg\">smirksFilename</span>,\n        <span class=\"summary-sig-arg\">productFilename</span>)</span><br />\n      Opens files with respective names and delegates most work to \n      &quot;generateProducts&quot;</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#generateProducts\" class=\"summary-sig-name\">generateProducts</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">reactantOEISFactory</span>,\n        <span class=\"summary-sig-arg\">smirksFile</span>,\n        <span class=\"summary-sig-arg\">productOEOS</span>)</span><br />\n      Primary method, reads the source files to generate products to the\n      output file.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#readSMIRKSFile\" class=\"summary-sig-name\">readSMIRKSFile</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">smirksFile</span>)</span><br />\n      Read the contents of the file as a list of SMIRKS strings.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#applyReaction\" class=\"summary-sig-name\">applyReaction</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">libgen</span>,\n        <span class=\"summary-sig-arg\">reactantOEISFactory</span>,\n        <span class=\"summary-sig-arg\">productOEOS</span>,\n        <span class=\"summary-sig-arg\">reactionIndex</span>=<span class=\"summary-sig-default\">0</span>,\n        <span class=\"summary-sig-arg\">currReactantIndexes</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">reactantList</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">rejectProductSmiSet</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Recursive function to apply the reaction in libgen to all possible\npermutations of reactants from the reactantOEIS and outputting the results\nto the productOEOS.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#applyReactionBySmirks\" class=\"summary-sig-name\">applyReactionBySmirks</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">smirks</span>,\n        <span class=\"summary-sig-arg\">reactantList</span>,\n        <span class=\"summary-sig-arg\">uniqueOnly</span>=<span class=\"summary-sig-default\">True</span>)</span><br />\n      Convenience method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#addReactants\" class=\"summary-sig-name\">addReactants</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">product</span>,\n        <span class=\"summary-sig-arg\">libgen</span>,\n        <span class=\"summary-sig-arg\">reactantList</span>)</span><br />\n      Given a reaction product molecule (OEMolBase) and the library \n      generator that created it (OELibraryGen), find all of the reactants \n      (starting materials) from the libGen and add them as part of the \n      product molecule such that the product molecule will instead \n      represent the whole reaction, reactants included.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#productPostProcessing\" class=\"summary-sig-name\">productPostProcessing</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">product</span>,\n        <span class=\"summary-sig-arg\">reactantOEISFactory</span>,\n        <span class=\"summary-sig-arg\">reactantList</span>)</span><br />\n      Post-processing of product just before it is finally written to \n      the output.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"formatDBFileByFilename\"></a><span class=\"summary-sig-name\">formatDBFileByFilename</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">productFilename</span>,\n        <span class=\"summary-sig-arg\">reactantIDFilename</span>,\n        <span class=\"summary-sig-arg\">smirksIDFilename</span>,\n        <span class=\"summary-sig-arg\">productIDFilename</span>,\n        <span class=\"summary-sig-arg\">dbFilename</span>)</span><br />\n      Opens files with respective names and delegates most work to \n      &quot;formatDBFile&quot;</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#formatDBFile\" class=\"summary-sig-name\">formatDBFile</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">productOEIS</span>,\n        <span class=\"summary-sig-arg\">reactantIDFile</span>,\n        <span class=\"summary-sig-arg\">smirksIDFile</span>,\n        <span class=\"summary-sig-arg\">productIDFile</span>,\n        <span class=\"summary-sig-arg\">dbFile</span>)</span><br />\n      Given the database IDs of reactants, reactions (smirks) and \n      products and information indicating how they are all related, \n      generate a simple text file that should be very easy to import into \n      the database to persist that association information.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#__visitBondedAtoms\" class=\"summary-sig-name\">__visitBondedAtoms</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">atom</span>,\n        <span class=\"summary-sig-arg\">visitedAtomIndexes</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Starting from the given atom, add every visited atom's index to \n      the visistedAtomIndexes Set.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"ignoreSelfReactions\"></a><span class=\"summary-name\">ignoreSelfReactions</span> = <code title=\"False\">False</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.CombiCDB.ReactionProcessor.ReactionProcessor-class.html#includeReactants\" class=\"summary-name\">includeReactants</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingM<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"includeUnusedReactants\"></a><span class=\"summary-name\">includeUnusedReactants</span> = <code title=\"False\">False</code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"generateProducts\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">generateProducts</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">reactantOEISFactory</span>,\n        <span class=\"sig-arg\">smirksFile</span>,\n        <span class=\"sig-arg\">productOEOS</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Primary method, reads the source files to generate products to the \n  output file.  See module documentation for more information.</p>\n  <p>Note:  This method takes actual File objects, oemolistreams and \n  oemolostreams, not filenames, to allow the caller to pass &quot;virtual \n  Files&quot; for the purpose of testing and interfacing.  Use the \n  &quot;main&quot; method to have the module take care of opening files \n  from filenames.</p>\n  Note that the reactantOEISFactory is not a simple oemolistream either,\n  but a factory object that can generate oemolistreams over the list of \n  reactants.  This is necessary as nested loops iterating over the \n  reactants simultaneously is required.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"readSMIRKSFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">readSMIRKSFile</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">smirksFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\nRead the contents of the file as a list of SMIRKS strings.\nComment lines prefixed with &quot;#&quot; will be ignored.  \nExpects one SMIRKS string per line of the file.  Each SMIRKS string can be followed\n    by any title / comment, etc. separated by whitespace.  These will be ignored.\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"applyReaction\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">applyReaction</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">libgen</span>,\n        <span class=\"sig-arg\">reactantOEISFactory</span>,\n        <span class=\"sig-arg\">productOEOS</span>,\n        <span class=\"sig-arg\">reactionIndex</span>=<span class=\"sig-default\">0</span>,\n        <span class=\"sig-arg\">currReactantIndexes</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">reactantList</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">rejectProductSmiSet</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\nRecursive function to apply the reaction in libgen to all possible\npermutations of reactants from the reactantOEIS and outputting the results\nto the productOEOS.  Returns the number of products added for this function call.\n\nlibgen = OELibraryGen initialized with a SMIRKS (or other reaction) string\n        and any number of reactants upto libgen.NumReactants()\nreactantOEISFactory = IteratorFactory object that can generate\n        oemolistreams over the reactant molecules to feed into libgen.\nproductOEOS = Oemolostream to write output products from reaction processing to\nreactionIndex = Index indicating what reaction was used in this libgen.\n        Just for labelling purposes of output.\ncurrReactantIndexes = List of indexes of reactants that have already been set\n        on the libgen.  Length of list indicates how many have already been set\n        (i.e. the current depth of recursion)\n        and the actual indexes are again useful for labelling the output.\n\nIf reactions always had 2 reactants, this design would not be necessary.\nA simple doubly nested loop could enumerate all permutations.  However,\nsince an arbitrary reaction may have n reactants, an &quot;n-leveled&quot; nested\nloop would be required, which cannot be determined until runtime.  Thus,\nthis recursive approach is used instead.\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"applyReactionBySmirks\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">applyReactionBySmirks</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">smirks</span>,\n        <span class=\"sig-arg\">reactantList</span>,\n        <span class=\"sig-arg\">uniqueOnly</span>=<span class=\"sig-default\">True</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Convenience method.  Parse out the SMIRKS string for the caller and \n  collect product results in a list, rather than requiring an OE output \n  stream. This instantiates separate copies of every product list, thus \n  being less efficient in memory usage than a streaming process.  Should \n  only be used for convenience.</p>\n  <p>Reactant list parameter is expected to be a list of molecule \n  objects.</p>\n  If uniqueOnly, will only return non-redundant results\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"addReactants\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">addReactants</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">product</span>,\n        <span class=\"sig-arg\">libgen</span>,\n        <span class=\"sig-arg\">reactantList</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a reaction product molecule (OEMolBase) and the library \n  generator that created it (OELibraryGen), find all of the reactants \n  (starting materials) from the libGen and add them as part of the product \n  molecule such that the product molecule will instead represent the whole \n  reaction, reactants included.</p>\n  Note that this method assumes that there is only one starting material\n  per reactant position.  For other library generation applications, this \n  assumption may be true.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"productPostProcessing\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">productPostProcessing</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">product</span>,\n        <span class=\"sig-arg\">reactantOEISFactory</span>,\n        <span class=\"sig-arg\">reactantList</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Post-processing of product just before it is finally written to the \n  output. Return True if everything is okay.  Return False if this product \n  has an error and should be rejected from final output\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"formatDBFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">formatDBFile</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">productOEIS</span>,\n        <span class=\"sig-arg\">reactantIDFile</span>,\n        <span class=\"sig-arg\">smirksIDFile</span>,\n        <span class=\"sig-arg\">productIDFile</span>,\n        <span class=\"sig-arg\">dbFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given the database IDs of reactants, reactions (smirks) and products \n  and information indicating how they are all related, generate a simple \n  text file that should be very easy to import into the database to persist\n  that association information.</p>\n  Each line should correspond to a row in the SYNTHESIS table, with \n  values to insert respective to PRODUCT_ID, REACTION_ID, REACTANT_ID and \n  REACTANT_POSITION\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__visitBondedAtoms\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__visitBondedAtoms</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">atom</span>,\n        <span class=\"sig-arg\">visitedAtomIndexes</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Starting from the given atom, add every visited atom's index to the \n  visistedAtomIndexes Set.  Recursively visit all bonded atoms\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== CLASS VARIABLE DETAILS ==================== -->\n<a name=\"section-ClassVariableDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variable Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariableDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"includeReactants\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">includeReactants</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:27 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40928.0}