{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 3Kernel Geometry 3 1 Points and Vectors In CGAL we strictly distinguish between points vectors and directions A point is a point in the Euclidean space d a vector is the difference of two points p2 p1 and denotes the direction and the distance from p1 to p2 in the vector space d and a direction is a vector where we forget about its length They are different mathematical concepts For example they behave different under affine transformations and an addition of two points is meaningless in affine geometry By putting them in different classes we not only get cleaner code but also type checking by the compiler which avoids ambiguous expressions Hence it pays twice to make this distinction CGAL defines a symbolic constant ORIGIN of type Origin which denotes the point at the origin This constant is used in the conversion between points and vectors Subtracting it from a point p results in the locus vector of p Point 2 Cartesian double p 1 1 q Vector 2 Cartesian double v v p ORIGIN q ORIGIN v assert p q In order to obtain the point corresponding to a vector v you simply have to add v to ORIGIN If you want to determine the point q in the middle between two points p1 and p2 you can write1 q p 1 p 2 p 1 2 Note that these constructions do not involve any performance overhead for the conversion with the currently available representation classes 3 2 Kernel Objects Besides points Point 2 Kernel Point 3 Kernel Point d Kernel vectors Vector 2 Kernel Vector 3 Kernel and directions Direction 2 Kernel Direction 3 Kernel CGAL provides lines rays segments planes triangles tetrahedra iso rectangles iso cuboids circles and spheres Lines Line 2 Kernel Line 3 Kernel in CGAL are oriented In two dimensional space they induce a partition of the plane into a positive side and a negative side Any two points on a line induce an orientation of this line A ray Ray 2 Kernel Ray 3 Kernel is semi infinite interval on a line and this line is oriented from the finite endpoint of this interval towards any other point in this interval A segment Segment 2 Kernel Segment 3 Kernel is a bounded interval on a directed line and the endpoints are ordered so that they induce the same direction as that of the line Planes are affine subspaces of dimension two in 3 passing through three points or a point and a line ray or segment CGAL provides a correspondence between any plane in the ambient space 3 and the embedding of 2 in that space Just like lines planes are oriented and partition space into a positive side and a negative side In CGAL there are no special classes for halfspaces Halfspaces in 2D and 3D are supposed to be represented by oriented lines and planes respectively Concerning polygons and polyhedra the kernel provides triangles iso oriented rectangles iso oriented cuboids and tetrahedra More complex polygons2 and polyhedra or polyhedral surfaces can be obtained from the basic library Polygon 2 Polyhedron 3 so they are not part of the kernel As with any Jordan curves triangles iso oriented rectangles and circles separate the plane into two regions one bounded and one unbounded 3 3 Orientation and Relative Position Geometric objects in CGAL have member functions that test the position of a point relative to the object Full dimensional objects and their boundaries are represented by the same type e g halfspaces and hyperplanes are not distinguished neither are balls and spheres and discs and circles Such objects split the ambient space into two full dimensional parts a bounded part and an unbounded part e g circles or two unbounded parts e g hyperplanes By default these objects are oriented i e one of the resulting parts is called the positive side the other one is called the negative side Both of these may be unbounded For these objects there is a function oriented side that determines whether a test point is on the positive side the negative side or on the oriented boundary These function returns a value of type Oriented side Those objects that split the space in a bounded and an unbounded part have a member function bounded side with return type Bounded side If an object is lower dimensional e g a triangle in three dimensional space or a segment in two dimensional space there is only a test whether a point belongs to the object or not This member function which takes a point as an argument and returns a boolean value is called has on Footnotes 1 you might call midpoint p 1 p 2 instead 2 Any sequence of points can be seen as a not necessary simple polygon or polyline This view is used frequently in the basic library as well Next chapter Predicates and Constructions Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23/Chapter_kernel_geometry.html", "title": "kernel geometry", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23/kernel_geometry.tex' -->\n<html> <head>  \n<title>Kernel Geometry</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_kernel_geometry.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_3\"></a>\n  \n<h1>Chapter 3<BR>Kernel Geometry</h1>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>3.1&nbsp;&nbsp;&nbsp;Points and Vectors</h2>\n\nIn C<SMALL>GAL</SMALL>, we strictly distinguish between points, vectors and directions.\nA <I>point</I> is a point in the Euclidean space\n<MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>d</SUP></I></MATH>, a <I>vector</I> is the difference of two points <MATH><I>p<SUB>2</SUB></I></MATH>, <MATH><I>p<SUB>1</SUB></I></MATH>\nand denotes the direction and the distance from <MATH><I>p<SUB>1</SUB></I></MATH> to <MATH><I>p<SUB>2</SUB></I></MATH> in the\nvector space <MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_R.gif\"> <SUP>d</SUP></I></MATH>, and a <I>direction</I> is a vector where we forget\nabout its length.\nThey are different mathematical concepts. For example, they behave\ndifferent under affine transformations and an addition of two\npoints is meaningless in affine geometry.  By putting them in different\nclasses we not only get cleaner code, but also type checking by the\ncompiler which avoids ambiguous expressions. Hence, it pays twice to\nmake this distinction.\n<P>\n\nC<SMALL>GAL</SMALL> defines a symbolic constant <I><A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I> of type <I><A HREF=\"../Kernel_23_ref/Class_Origin.html#Cross_link_anchor_139\">Origin</A></I>\nwhich denotes the point at the origin. This constant is used in the conversion \nbetween points and vectors. Subtracting it from a point <MATH><I>p</I></MATH> results in the \nlocus vector of <MATH><I>p</I></MATH>.\n<P>\n\n<PRE>\n  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt;  p(1.0, 1.0), q;\n  <A HREF=\"../Kernel_23_ref/Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;double&gt; &gt;  v;\n  v = p - <A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A>;\n  q = <A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A> + v;  \n  assert( p == q );\n</PRE>\n<P>\n\nIn order to obtain the point corresponding to a vector <MATH><I>v</I></MATH> you simply\nhave to add <MATH><I>v</I></MATH> to <I><A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I>. If you want to determine \nthe point <MATH><I>q</I></MATH> in the middle between two points <MATH><I>p<SUB>1</SUB></I></MATH> and <MATH><I>p<SUB>2</SUB></I></MATH>, you can write<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>\n<P>\n\n<PRE>\n  q = p_1 + (p_2 - p_1) / 2.0;\n</PRE>\n<P>\n\nNote that these constructions do not involve any performance overhead for \nthe conversion with the currently available representation classes.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>3.2&nbsp;&nbsp;&nbsp;Kernel Objects</h2>\n\nBesides points (<I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>), \nvectors (<I><A HREF=\"../Kernel_23_ref/Class_Vector_2.html#Cross_link_anchor_60\">Vector_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>), and \ndirections (<I><A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_23_ref/Class_Direction_3.html#Cross_link_anchor_66\">Direction_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>), \nC<SMALL>GAL</SMALL> provides lines, rays, segments, planes,\ntriangles, tetrahedra, iso-rectangles, iso-cuboids, circles and spheres.\n<P>\n\nLines  (<I><A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_23_ref/Class_Line_3.html#Cross_link_anchor_70\">Line_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>) in C<SMALL>GAL</SMALL> are oriented. In \ntwo-dimensional space, they induce a partition of the plane\ninto a positive side and a negative side. \nAny two points on a line induce an \n<!-- REMOVE_LINKS_BEGIN -->\norientation\n<!-- REMOVE_LINKS_END -->\n\nof this line. \nA ray (<I><A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, <I><A HREF=\"../Kernel_23_ref/Class_Ray_3.html#Cross_link_anchor_76\">Ray_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>) is semi-infinite interval on a line, \nand this line is oriented from the finite endpoint of this interval towards \nany other point in this interval. A segment (<I><A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>, \n<I><A HREF=\"../Kernel_23_ref/Class_Segment_3.html#Cross_link_anchor_78\">Segment_3</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I>) is a bounded interval on a directed line,\nand the endpoints are ordered so that they induce the same direction \nas that of the line.\n<P>\n\nPlanes are affine subspaces of dimension two in <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>3</SUP></I></MATH>, passing through \nthree points, or a point and a line, ray, or segment. \nC<SMALL>GAL</SMALL> provides a correspondence between any plane in the ambient \nspace <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>3</SUP></I></MATH> and the embedding of <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>2</SUP></I></MATH> in that space.\nJust like lines, planes are oriented and partition space into a positive side \nand a negative side.\nIn C<SMALL>GAL</SMALL>, there are no special classes for halfspaces. Halfspaces in 2D and\n3D are supposed to be represented by oriented lines and planes, respectively.\n<P>\n\nConcerning polygons and polyhedra, the kernel provides triangles,\niso-oriented rectangles, iso-oriented cuboids and tetrahedra. \nMore complex polygons<A HREF=\"#Footnote_2\"><SUP>2</SUP></A>\nand polyhedra or polyhedral surfaces can be obtained \nfrom the basic library (<I><A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A></I>, <I><A HREF=\"../Polyhedron_ref/Class_Polyhedron_3.html#Cross_link_anchor_854\">Polyhedron_3</A></I>), \nso they are not part of the kernel. \nAs with any Jordan curves, triangles, iso-oriented rectangles and circles\nseparate the plane into two regions, one bounded and one unbounded.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>3.3&nbsp;&nbsp;&nbsp;Orientation and Relative Position</h2>\n\nGeometric objects in C<SMALL>GAL</SMALL> have member functions that test the\nposition of a point relative to the object.  Full dimensional objects\nand their boundaries are represented by the same type, \ne.g. halfspaces and hyperplanes are not distinguished, neither are balls and\nspheres and discs and circles. Such objects split the ambient space into two\nfull-dimensional parts, a bounded part and an unbounded part \n(e.g. circles), or two unbounded parts (e.g. hyperplanes). By default these\nobjects are oriented, i.e., one of the resulting parts is called the\npositive side, the other one is called the negative side. Both of\nthese may be unbounded.\n<P>\n\nFor these objects there is a function <I>oriented_side()</I> that\ndetermines whether a test point is on the positive side, the negative\nside, or on the oriented boundary. These function returns a value of type\n<I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A></I>.\n<P>\n\nThose objects that split the space in a bounded and an unbounded part, have\na member function <I>bounded_side()</I> with return type\n<I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_99\">Bounded_side</A></I>.\n<P>\n\nIf an object is lower dimensional, e.g. a triangle in three-dimensional\nspace or a segment in two-dimensional space, there is only a test whether a\npoint belongs to the object or not. This member function, which takes a \npoint as an argument and returns a boolean value, is called <I>has_on()</I>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nyou might call <I><A HREF=\"../Kernel_23_ref/Function_midpoint.html#Cross_link_anchor_239\">midpoint</A>(p_1,p_2)</I> instead\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_2\">&nbsp;<SUP>2</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nAny sequence of points can be seen as\na (not necessary simple) polygon or polyline. This view is used \nfrequently in the basic library as well.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"Chapter_predicates_constructions.html\">Predicates and Constructions</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38732.0}