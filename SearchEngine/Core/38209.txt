{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Alpha shape 2 Dt Definition The class Alpha shape 2 Dt represents the family of shapes of points in a plane for all positive It maintains the underlying triangulation Dt which represents connectivity and order among its faces Each k dimensional face of the Dt is associated with an interval that specifies for which values of the face belongs to the shape There are links between the intervals and the k dimensional faces of the triangulation Note that this class is at the same time used for basic and for weighted Alpha Shapes Inherits From Dt This class is the underlying triangulation class The modifying functions insert and remove will overwrite the inherited functions At the moment only the static version is implemented Types Alpha shape 2 Dt Gt the alpha shape traits type it has to derive from a triangulation traits class For example Dt Point is a Point class typedef Gt FT FT the number type for computation Alpha shape 2 Dt Alpha iterator A bidirectional and non mutable iterator that allow to traverse the increasing sequence of different values Precondition Its value type is FT Alpha shape 2 Dt Alpha shape vertices iterator A bidirectional and non mutable iterator that allow to traverse the vertices which belongs to the shape for the current Precondition Its value type is Dt Vertex handle Alpha shape 2 Dt Alpha shape edges iterator A bidirectional and non mutable iterator that allow to traverse the edges which belongs to the shape for the current Precondition Its value type is Dt Edge enum Classification type EXTERIOR SINGULAR REGULAR INTERIOR Distinguishes the different cases for classifying a k dimensional face of the underlying triangulation of the shape EXTERIOR if the face does not belong to the complex SINGULAR if the face belongs to the boundary of the shape but is not incident to any 2 dimensional face of the complex REGULAR if the face belongs to the boundary of the shape and is incident to a 2 dimensional face of the complex INTERIOR if the face belongs to the complex but does not belong to the boundary of the shape enum Mode GENERAL REGULARIZED In general an alpha shape can be disconnected and contain many singular edges or vertices Its regularized version is formed by the set of regular edges and their vertices Creation Alpha shape 2 Dt A FT alpha Mode m GENERAL Introduces an empty shape A for a positive value alpha Precondition alpha template class InputIterator Alpha shape 2 Dt A InputIterator first InputIterator last FT alpha Mode m GENERAL Initializes the family of alpha shapes with the points in the range first last and introduces an shape A for a positive value alpha Precondition The value type of first and last is Point alpha Operations template class InputIterator int A make alpha shape InputIterator first InputIterator last Initialize the family of alpha shapes with the points in the range first last Returns the number of inserted points If the function is applied to an non empty family of alpha shape it is cleared before initialization Precondition The value type of first and last is Point void A clear Clears the structure FT A set alpha FT alpha Sets the value to alpha Returns the previous value Precondition alpha FT A get alpha void Returns the current value FT A get nth alpha int n Returns the n th alpha value sorted in an increasing order Precondition n number of alphas int A number of alphas Returns the number of different alpha values Mode A set mode Mode m GENERAL Sets A to its general or regularized version Returns the previous mode Mode A get mode void Returns whether A is general or regularized Alpha shape vertices iterator A alpha shape vertices begin Starts at an arbitrary finite vertex which belongs to the shape for the current Alpha shape vertices iterator A alpha shape vertices end Past the end iterator Alpha shape edges iterator A alpha shape edges begin Starts at an arbitrary finite edge which belongs to the shape for the current In regularised mode edges are represented as a pair f i where f is an interior face of the shape Alpha shape edges iterator A alpha shape edges end Past the end iterator Predicates Classification type A classify Point p FT alpha get alpha Locates a point p in the underlying triangulation and Classifies the associated k face with respect to A Classification type A classify Face handle f FT alpha get alpha Classifies the face f of the underlying triangulation with respect to A Classification type A classify Edge e FT alpha get alpha Classifies the edge e of the underlying triangulation with respect to A Classification type A classify Face handle f int i FT alpha get alpha Classifies the edge of the face f opposite to the vertex with index i of the underlying triangulation with respect to A Classification type A classify Vertex handle v FT alpha get alpha Classifies the vertex v of the underlying triangulation with respect to A Traversal of the Values Alpha iterator A alpha begin Returns an iterator that allows to traverse the sorted sequence of values of the family of alpha shapes Alpha iterator A alpha end Returns the corresponding past the end iterator Alpha iterator A alpha find FT alpha Returns an iterator pointing to an element with value alpha or the corresponding past the end iterator if such an element is not found Alpha iterator A alpha lower bound FT alpha Returns an iterator pointing to the first element with value not less than alpha Alpha iterator A alpha upper bound FT alpha Returns an iterator pointing to the first element with value greater than alpha Operations int A number of solid components FT alpha get alpha Returns the number of solid components of A that is the number of components of its regularized version Alpha iterator A find optimal alpha int nb components Returns an iterator pointing to the first element with value such that A satisfies the following two properties nb components equals the number of solid components and all data points are either on the boundary or in the interior of the regularized version of A If no such value is found the iterator points to the first element with value such that A satisfies the second property I O The I O operators are defined for iostream and for the window stream provided by CGAL The format for the iostream is an internal format include CGAL IO io h ostream ostream os A Inserts the alpha shape A for the current value into the stream os Precondition The insert operator must be defined for Point include CGAL IO Window stream h include CGAL IO alpha shapes 2 window stream h Window stream Window stream W A Inserts the alpha shape A for the current value into the window stream W Precondition The insert operator must be defined for Point and Segment ImplementationThe set of intervals associated with the k dimensional faces of the underlying triangulation are stored in multimaps The cross links between the intervals and the k dimensional faces of the triangulation are realized using methods in the k dimensional faces themselves A alpha find uses linear search while A alpha lower bound and A alpha upper bound use binary search A number of solid components performs a graph traversal and takes time linear in the number of faces of the underlying triangulation A find optimal alpha uses binary search and takes time O n log n where n is the number of points Next AlphaShapeFace 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Alpha_shapes_2_ref/Class_Alpha_shape_2.html", "title": "alpha_shape_2&lt;dt&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Alpha_shapes_2_ref/Alpha_shape_2.tex' -->\n<html> <head>  \n<title>Alpha_shape_2&lt;Dt&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1015\"></A>\n\n<A NAME=\"Cross_link_anchor_1016\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_945\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Alpha_shape_2<Dt>\"></A>\n<h2><I>CGAL::Alpha_shape_2&lt;Dt&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt;</I> represents the family of\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes of points in a plane for <I>all</I> positive\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>. It maintains the underlying triangulation <I>Dt</I> which\nrepresents connectivity and order among its faces. Each\n<MATH><I>k</I></MATH>-dimensional face of the <I>Dt</I> is associated with\nan interval that specifies for which values of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> the face\nbelongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape. There are links between the intervals\nand the <MATH><I>k</I></MATH>-dimensional faces of the triangulation.\n<P>\n\nNote that this class is at the same time used for <I>basic</I> and\nfor <I>weighted</I> Alpha Shapes\n<A NAME=\"Index_anchor_946\"></A> \n.\n<P>\n\n<H3>Inherits From</H3>\n<P>\n\n<I>Dt</I>\n<P>\n\nThis class is the underlying triangulation class.\n<P>\n\nThe modifying functions <I>insert</I> and <I>remove</I> will overwrite\nthe inherited functions. At the moment, only the static version is implemented.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt;::Gt\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the alpha shape traits type.\n<P>\n\n</TD></TR>\n        </TABLE>\n\nit has to derive from a  triangulation traits class.  \nFor example <I>Dt::Point</I> is a Point class.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_FT\"></A>\n<A NAME=\"Typedef_FT\"></A>\ntypedef Gt::FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    FT;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the number type for computation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt;::Alpha_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A bidirectional and non-mutable iterator that allow to traverse \nthe increasing sequence of different <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-values.<BR>\n\n<EM>Precondition: </EM>Its <I>value_type</I> is <I>FT</I>\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt;::Alpha_shape_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A bidirectional and non-mutable iterator that allow to traverse \nthe vertices which belongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape for the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>.<BR>\n\n<EM>Precondition: </EM>Its <I>value_type</I> is <I>Dt::Vertex_handle</I>\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt;::Alpha_shape_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A bidirectional and non-mutable iterator that allow to traverse \nthe edges which belongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape for the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>.<BR>\n\n<EM>Precondition: </EM>Its <I>value_type</I> is <I>Dt::Edge</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type\"></A>\n<A NAME=\"Enum_Classification_type\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A> { <A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">EXTERIOR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">SINGULAR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">REGULAR</A><A NAME=\"Function_Classification_type\"></A>\n, <A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">INTERIOR</A><A NAME=\"Function_Classification_type\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Distinguishes the different cases for classifying a <MATH><I>k</I></MATH>-dimensional face\n of the underlying triangulation of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape.<BR>\n\n<I><A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">EXTERIOR</A></I> if the face does not belong to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex.<BR>\n\n<I><A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">SINGULAR</A></I> if the face belongs to the boundary of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape,\n but is not incident to any 2-dimensional face of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex<BR>\n\n<I><A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">REGULAR</A></I> if the face belongs to the boundary of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape\n and is incident to a 2-dimensional face of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex<BR>\n\n<I><A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">INTERIOR</A></I> if the face belongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex, but does\nnot belong to the boundary of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape.<BR>\n\n\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Mode\"></A>\n<A NAME=\"Enum_Mode\"></A>\n<A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A> { <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">GENERAL</A><A NAME=\"Function_Mode\"></A>\n, <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">REGULARIZED</A><A NAME=\"Function_Mode\"></A>\n};\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    In general, an alpha shape can be disconnected and contain many singular edges \nor vertices. Its regularized version is formed by the set of regular edges\nand their vertices.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt; A ( FT alpha = 0,  <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">GENERAL</A>);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Introduces an empty <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape <I>A</I> for a positive <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\n <I>alpha</I>.<BR>\n\n<EM>Precondition: </EM><I>alpha</I>&nbsp;<MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> &nbsp;0</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>&lt;Dt&gt; A ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last,<BR>\n\nFT alpha = 0,<BR>\n\n<A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">GENERAL</A>);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Initializes the family of alpha-shapes with the points in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH> and \nintroduces an <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape <I>A</I> for a positive <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\n<I>alpha</I>.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and\n<I>last</I> is <I>Point</I>.<BR>\n\n<I>alpha</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> 0</I></MATH>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class InputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_make_alpha_shape6_InputIterator_first+_InputIterator_last9;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.make_alpha_shape ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator last)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Initialize the family of alpha-shapes with the points in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>last</I><MATH><I>.)</I></MATH>. Returns the number of\ninserted points.<BR>\n\nIf the function is applied to an non-empty family of alpha-shape, it is cleared\nbefore initialization.<BR>\n\n<EM>Precondition: </EM>The <I>value_type</I> of <I>first</I> and\n<I>last</I> is <I>Point</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clears the structure.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_FT_set_alpha6const_FT__alpha9;\"></A>\nFT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.set_alpha (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value to <I>alpha</I>.\n Returns the previous <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value.<BR>\n\n<EM>Precondition: </EM><I>alpha</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_geq.gif\"> 0</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_FT__get_alpha6void9_const;\"></A>\n FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.get_alpha ( void)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_FT__get_nth_alpha6int_n9_const;\"></A>\n FT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.get_nth_alpha ( int n)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the <MATH><I>n</I></MATH>-th alpha-value, sorted in an increasing order.<BR>\n\n<EM>Precondition: </EM><I>n</I> <MATH><I>&lt;</I></MATH> number of alphas.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_alphas69_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.number_of_alphas ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of different alpha-values.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Mode_set_mode6Mode_m_=_GENERAL_9;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.<A HREF=\"../IOstream_ref/Function_set_mode.html#Cross_link_anchor_1748\">set_mode</A> ( <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A> m = <A HREF=\"Class_Alpha_shape_2#Enum_Mode\">GENERAL</A>)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Sets <I>A</I> to its general or regularized version. \nReturns the previous mode.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Mode_get_mode6void9_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.<A HREF=\"../IOstream_ref/Function_get_mode.html#Cross_link_anchor_1727\">get_mode</A> ( void)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns whether <I>A</I> is general or regularized.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_shape_vertices_iterator_alpha_shape_vertices_begin69;\"></A>\nAlpha_shape_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_shape_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at\nan arbitrary finite vertex which belongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape for the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_shape_vertices_iterator_alpha_shape_vertices_end69;\"></A>\nAlpha_shape_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_shape_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_shape_edges_iterator_alpha_shape_edges_begin69;\"></A>\nAlpha_shape_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_shape_edges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at\nan arbitrary finite edge which belongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape for the current\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>. In regularised mode, edges are represented as a pair (f,i), where f is \nan interior face of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_shape_edges_iterator_alpha_shape_edges_end69;\"></A>\nAlpha_shape_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_shape_edges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6const_Point__p+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify (  Point p,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Locates a point  <I>p</I> in the underlying triangulation and Classifies the \nassociated k-face with respect to <I>A</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Face_handle_f+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Face_handle f,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the face <I>f</I> of the underlying triangulation with respect to <I>A</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Edge_e+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Edge e,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the edge <I>e</I> of the underlying triangulation with respect to <I>A</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Face_handle_f+_int_i+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    A.classify ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Face_handle f,<BR>\n\nint i,<BR>\n\nFT alpha = get_alpha())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the edge of the face <I>f</I> <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to the vertex with index\n<I>i</I> \nof the underlying triangulation with respect to <I>A</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Classification_type_classify6Vertex_handle_v+_const_FT__alpha_=_get_alpha699_const;\"></A>\n<A HREF=\"Class_Alpha_shape_2#Enum_Classification_type\">Classification_type</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.classify ( Vertex_handle v,  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Classifies the vertex <I>v</I> of the underlying triangulation with respect to <I>A</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Traversal of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-Values</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_begin69_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.alpha_begin ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator that allows to traverse the\nsorted sequence of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-values of the family of alpha shapes.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_end69_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    A.alpha_end ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the corresponding past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_find6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_find (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to an element with <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\n<I>alpha</I>, or the corresponding past-the-end iterator if such \nan element is not found.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_lower_bound6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_lower_bound (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to the first element with\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value not less than <I>alpha</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_alpha_upper_bound6const_FT__alpha9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.alpha_upper_bound (  FT alpha)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to the first element with <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\ngreater than <I>alpha</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_number_of_solid_components6const_FT__alpha_=_get_alpha699_const;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.number_of_solid_components (  FT alpha = get_alpha())\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of solid components of <I>A</I>, that is, the number of\ncomponents of its \nregularized version.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Alpha_iterator_find_optimal_alpha6int_nb_components9_const;\"></A>\nAlpha_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    A.find_optimal_alpha ( int nb_components)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns an iterator pointing to the first element with <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\nsuch that <I>A</I> satisfies the following two properties:<BR>\n\n<I>nb_components</I> equals the number of solid components and<BR>\n\nall data points are either on the boundary or in the interior of the regularized version of <I>A</I>.<BR>\n\nIf no such value is found, the iterator points to the first element with \n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value such that <I>A</I> satisfies the second property.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>I/O</H3>\n<P>\n\nThe I/O operators are defined for <I>iostream</I>, and for\nthe window stream provided by C<SMALL>GAL</SMALL>. The format for the iostream\nis an internal format.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/io.h\">CGAL/IO/io.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  A<A NAME=\"Function_ostream__operator666ostream__os+_const_Alpha_shape_26Dt9__A9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the alpha shape <I>A</I> for the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value into the stream <I>os</I>.<BR>\n\n<EM>Precondition: </EM>The insert operator must be defined for <I>Point</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Window_stream.h\">CGAL/IO/Window_stream.h</A>&gt;</I>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/alpha_shapes_2_window_stream.h\">CGAL/IO/alpha_shapes_2_window_stream.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A>&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     <A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A>&amp; W &lt;&lt;  A<A NAME=\"Function_Window_stream__operator666Window_stream__W+_const_Alpha_shape_26Dt9__A9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the alpha shape <I>A</I> for the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value into the window stream <I>W</I>.<BR>\n\n<EM>Precondition: </EM>The insert operator must be defined for <I>Point</I> and <I>Segment</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Implementation</H3>The set of intervals associated with the\n<MATH><I>k</I></MATH>-dimensional faces of the underlying triangulation are\nstored in <I>multimaps</I>.\n<P>\n\nThe cross links between the intervals and the <MATH><I>k</I></MATH>-dimensional faces of the\ntriangulation are realized using methods in the <MATH><I>k</I></MATH>-dimensional faces\nthemselves.\n<P>\n\n<I>A.alpha find</I> uses linear search, while \n<I>A.alpha lower bound</I> and <I>A.alpha upper bound</I> \nuse binary search.\n<I>A.number of solid components</I> performs a graph traversal and takes time\nlinear in the number of faces of the underlying triangulation.\n<I>A.find optimal alpha</I> uses binary search and takes time\n<MATH><I>O(</I></MATH> <I>n </I><MATH><I> </I></MATH>log<MATH><I></I></MATH> <I>n </I><MATH><I> )</I></MATH>, where  <MATH><I>n</I></MATH> is the number of points.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_AlphaShapeFace_2.html\"><I>AlphaShapeFace_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_40!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38209.0}