{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 25 1 1 Biological Hierarchies Up 25 1 Ontology and Schema Next 25 1 3 OEChem Examples 25 1 2 Set Theory to the Rescue It turns out that there are simple computer science solutions to these problems Indeed it was Codd s exposition of these principals for relational database systems that completely killed off use of hierarchical and network database management systems within a decade of their introduction The premise is that rather than encode a single fragile hierarchy explicitly each leaf or record instead maintains its identity or position within the organization This allows the representation of arbitrary sets and or partitions of a set of records All ligand atoms of a molecule are denoted by the fact that they have a ligand property that is true rather than it being implicit from where it is stored in the abstract sense of an access path Of course each record may possess more than one property allowing it to simultaneously exist in more than one set Hence this representation is generic enough to handle arbitrary Venn diagrams Strict hierarchies and trees are therefore just an emergent property where some sets are strict subsets of others This allows elements to simultaneously be organized in more than one hierarchy or to elide or introduce new levels into the hierarchy The next realization is that once sets or levels in a hierarchy are represented by boolean properties or predicates that there s no need to have an explicit name or placeholder for a set Instead a set or partition can be defined named by providing a representative member and a binary predicate that determines whether another member record is in the same set partition as it For example to represent a protein chain it is sufficient to specify an arbitrary atom in the appropriate chain and provide a SameChain function Similarly a residue can be specified by providing the exact same atom and a SameResidue function OEChem Python Theory Manual Version 1 3 1 Previous 25 1 1 Biological Hierarchies Up 25 1 Ontology and Schema Next 25 1 3 OEChem Examples Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node222.html", "title": "25.1.2 set theory to the rescue", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>25.1.2 Set Theory to the Rescue</title>\n<META NAME=\"description\" CONTENT=\"25.1.2 Set Theory to the Rescue\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node223.html\">\n<LINK REL=\"previous\" HREF=\"node221.html\">\n<LINK REL=\"up\" HREF=\"node220.html\">\n<LINK REL=\"next\" HREF=\"node223.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node221.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node220.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node223.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node221.html\">25.1.1 Biological Hierarchies</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node220.html\">25.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node223.html\">25.1.3 OEChem Examples</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H2><A NAME=\"SECTION0027120000000000000000\">\n25.1.2 Set Theory to the Rescue</A>\n</H2>\n\n<P>\nIt turns out that there are simple computer science solutions to these\nproblems.  Indeed, it was Codd's exposition of these principals for\n\"relational\" database systems, that completely killed off use of\nhierarchical and network database management systems within a decade\nof their introduction.\n\n<P>\nThe premise is that rather than encode a single fragile hierarchy\nexplicitly, each leaf or record instead maintains its identity or\nposition within the organization.  This allows the representation\nof arbitrary sets and/or partitions of a set of records.  All ligand\natoms of a molecule are denoted by the fact that they have a ligand\nproperty that is true, rather than it being implicit from where it\nis stored (in the abstract sense of an access path).  Of course,\neach record may possess more than one property, allowing it to\nsimultaneously exist in more than one set.  Hence, this representation\nis generic enough to handle arbitrary Venn diagrams.  Strict hierarchies\nand trees are therefore just an emergent property, where some sets are\nstrict subsets of others.  This allows elements to simultaneously be\norganized in more than one hierarchy, or to elide or introduce new\nlevels into the hierarchy.\n\n<P>\nThe next realization is that once sets, or levels in a hierarchy, are\nrepresented by boolean properties or predicates, that there's no need\nto have an explicit \"name\" or placeholder for a set.  Instead, a set\nor partition can be defined/named by providing a representative member,\nand a binary predicate that determines whether another member/record is\nin the same set/partition as it.  For example, to represent a protein\nchain, it is sufficient to specify an arbitrary atom in the appropriate\nchain, and provide a SameChain function.  Similarly, a residue can be\nspecified by providing the exact same atom and a SameResidue function.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node221.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node220.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node223.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node221.html\">25.1.1 Biological Hierarchies</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node220.html\">25.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node223.html\">25.1.3 OEChem Examples</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37708.0}