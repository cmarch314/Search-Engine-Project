{"text": "Test of Closest Pair Data Structures Rectilinear Greedy Maximum Weight Matching Brute ForceNeighborsQuadtreeConga LineMultiCongaFastPairn 25 81s 92s 14s 3s 4s 3s5 6 65s7 43s 78s 16s 15s 14s1 55 54s65 8s3 57s 72s 69s 67s2 492 97s552 8s 3 22s3 13s3 2s4 13 36s13 2 s12 87s8 58 92s6 8s59 76s16 264 92s289 49s298 5s32 1136 59s1273 68s1367 93s Matching was performed by repeatedly finding and removing the two farthest apart points Points were placed uniformly at random in the unit square Times include only the construction of the closest pair data structure and algorithm execution not the initial point placement and are averages over ten runs The quadtree data structure was only run on data sets of 1 or fewer points due to its high storage requirements Code was written in C compiled and optimized by Metrowerks Codewarrior 1 and run on a 2 MHz PowerPC 6 3e processor Apple Powerbook 34 c ", "_id": "http://www.ics.uci.edu/~eppstein/projects/pairs/Data/-g12/", "title": "rectilinear greedy maximum-weight matching", "html": "<HTML>\n<HEAD>\n<TITLE>Rectilinear Greedy Maximum-Weight Matching</TITLE>\n</HEAD>\n\n<BODY>\n<H1><A HREF=\"../\">Test of Closest Pair Data Structures</A></H1>\n<H2>Rectilinear Greedy Maximum-Weight Matching</H2>\n\n<TABLE BORDER=1>\n<TR ALIGN=RIGHT><TD></TD>\n    <TD>Brute&nbsp;Force</TD>\n    <TD>Neighbors</TD>\n    <TD>Quadtree</TD>\n    <TD>Conga&nbsp;Line</TD>\n    <TD>MultiConga</TD>\n    <TD>FastPair</TD></TR>\n<TR ALIGN=RIGHT><TD><I>n</I>&nbsp;=&nbsp;250</TD>\n    <TD><A HREF=\"b250\">0.81s</A></TD>\n    <TD><A HREF=\"n250\">0.92s</A></TD>\n    <TD><A HREF=\"q250\">0.14s</A></TD>\n    <TD><A HREF=\"c250\"><B>0.03s</B></A></TD>\n    <TD><A HREF=\"m250\">0.04s</A></TD>\n    <TD><A HREF=\"f250\">0.03s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>500</TD>\n    <TD><A HREF=\"b500\">6.65s</A></TD>\n    <TD><A HREF=\"n500\">7.43s</A></TD>\n    <TD><A HREF=\"q500\">0.78s</A></TD>\n    <TD><A HREF=\"c500\">0.16s</A></TD>\n    <TD><A HREF=\"m500\">0.15s</A></TD>\n    <TD><A HREF=\"f500\"><B>0.14s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>1000</TD>\n    <TD><A HREF=\"b1000\">55.54s</A></TD>\n    <TD><A HREF=\"n1000\">65.08s</A></TD>\n    <TD><A HREF=\"q1000\">3.57s</A></TD>\n    <TD><A HREF=\"c1000\">0.72s</A></TD>\n    <TD><A HREF=\"m1000\">0.69s</A></TD>\n    <TD><A HREF=\"f1000\"><B>0.67s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>2000</TD>\n    <TD><A HREF=\"b2000\">492.97s</A></TD>\n    <TD><A HREF=\"n2000\">552.08s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c2000\">3.22s</A></TD>\n    <TD><A HREF=\"m2000\">3.13s</A></TD>\n    <TD><A HREF=\"f2000\"><B>3.02s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>4000</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c4000\">13.36s</A></TD>\n    <TD><A HREF=\"m4000\">13.20s</A></TD>\n    <TD><A HREF=\"f4000\"><B>12.87s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>8000</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c8000\"><B>58.92s</B></A></TD>\n    <TD><A HREF=\"m8000\">60.08s</A></TD>\n    <TD><A HREF=\"f8000\">59.76s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>16000</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c16000\"><B>264.92s</B></A></TD>\n    <TD><A HREF=\"m16000\">289.49s</A></TD>\n    <TD><A HREF=\"f16000\">298.05s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>32000</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c32000\"><B>1136.59s</B></A></TD>\n    <TD><A HREF=\"m32000\">1273.68s</A></TD>\n    <TD><A HREF=\"f32000\">1367.93s</A></TD></TR>\n</TABLE>\n\n<P>Matching was performed by repeatedly finding and removing the two \nfarthest-apart points. Points were placed \nuniformly at random in the unit square. Times include only the construction of the closest pair data structure \nand algorithm execution (not the initial point placement) and are averages \nover ten runs.  The quadtree data structure was only run on data sets of \n1000 or fewer points due to its high storage requirements.  Code was \nwritten in C++, compiled and optimized by Metrowerks Codewarrior 10, and \nrun on a 200MHz PowerPC 603e processor (Apple Powerbook 3400c).\n</BODY>\n</HTML>", "id": 24962.0}