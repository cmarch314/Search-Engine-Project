{"text": "Next Memory Management Up Interface to Externals Previous I O in External Arrays Arrays can be used as a convenient way to pass structured C data between C and Prolog For example C structures can be mapped onto Prolog integer arrays and mapping of C arrays is obvious Passing whole arrays from Prolog to C is achieved specifying the name and order of the array like for predicates e g process ar 2 calls the predicate process 1 and its argument is the two dimensional array ar The macro Get Array Address adid address can be used to obtain the address of the global array beginning from its DID If the DID is that of an atom the address of the global variable is returned If the array does not exist an exception is raised address must be of type pword Thus the macro Get Functor Did in combination with Get Array Address can be used to process arrays specified as above process ar 2 For advanced array usage the macro Get Array Header adid address returns the address of the array header The array header is a pword whose tag specifies the type of the array and whose value points to further information The array type is specified as follows TCOMP Prolog type TINT integer array TFLOAT real array TSTRG byte array The value of the array header points to a block of arity 1 word32 s the first one is the DID of the array functor and the following ones are its dimensions After the dimensions the array itself is located Since a global variable has no header trying to apply this macro on a global variable will issue an error As described in chapter arrays and global variables are sensitive to the module system The macros mentioned above always access the non local array or variable To access the visible array or variable in a given module the module argument is needed The corresponding macros are Get Visible Array Header adid mod val mod tag address Get Visible Array Address adid mod val mod tag address As an example here is the source of an external predicate that prints the contents of the specified Prolog i e untyped array which must be visible in the given module int p print array varr tarr vmod tmod value varr vmod type tarr tmod int size 1 number of array elements pword p word32 dim word32 wdid int arity Error If Ref tarr if IsAtom tarr a global variable wdid varr did else an array Get Functor Did varr tarr wdid Get Visible Array Header wdid vmod tmod p if IsStructure p tag error if not prolog Error TYPE ERROR dim word32 p val ptr dim skip the did for arity DidArity wdid arity arity size dim compute the size Get Visible Array Address wdid vmod tmod p for size size p Write p val p tag Current Output Fprintf Current Output Succeed Note the use of pword and word32 pointers the array header and array elements are pword s the dimensions are word32 s To avoid the need of specifying a module argument on every call it is convenient to define a tool interface using the external predicate as the tool body external print array 2 p print array tool print array 1 print array 2 The resulting predicate print array 1 will print the array with the specified name that is visible in the module from where print array 1 is called Next Memory Management Up Interface to Externals Previous I O in External Micha Meier Mon Mar 4 12 11 45 MET 1996", "_id": "http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node231.html", "title": "", "html": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Arrays</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Arrays\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html5024 HREF=\"node232.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5022 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5016 HREF=\"node230.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5026 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5025 HREF=\"node232.html\"> Memory Management</A>\r\n<B>Up:</B> <A NAME=tex2html5023 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html5017 HREF=\"node230.html\"> I/O in External </A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION001949000000000000000> Arrays</A></H2>\r\n<P>\r\nArrays can be used as a convenient way to pass structured C data\r\nbetween C and Prolog.\r\nFor example, C structures can be mapped onto Prolog\r\ninteger arrays and mapping of C arrays is obvious.\r\nPassing whole arrays from Prolog to C is achieved specifying\r\nthe name and order of the array like for predicates, e.g.\r\n<blockquote> <PRE>process(ar/2)\r\n</PRE></blockquote>\r\ncalls the predicate <b> process/1</b> and its argument is the\r\ntwo-dimensional array <i> ar</i>.\r\nThe macro\r\n<blockquote> <PRE>Get_Array_Address(adid, address)\r\n</PRE></blockquote>\r\n<A NAME=3595>&#160;</A>\r\ncan be used to obtain the address of the global array beginning from its DID.\r\nIf the DID is that of an atom, the address of the global variable is returned.\r\nIf the array does not exist, an exception is raised.\r\n<tt> address</tt> must be of type <tt> pword *</tt>.\r\nThus the macro <tt> Get_Functor_Did</tt> in combination with\r\n<tt> Get_Array_Address</tt> can be used to process arrays specified as above\r\n<b> process(ar/2)</b>.\r\n<P>\r\nFor advanced array usage, the macro\r\n<blockquote> <PRE>Get_Array_Header(adid, address)\r\n</PRE></blockquote>\r\nreturns the address of the array header.\r\nThe array header is a <tt> pword</tt> whose tag specifies the type\r\nof the array and whose value points to further information.\r\nThe array type is specified as follows:\r\n<UL><LI> TCOMP - Prolog type\r\n<P>\r\n<LI> TINT - integer array\r\n<P>\r\n<LI> TFLOAT - real array\r\n<P>\r\n<LI> TSTRG - byte array\r\n</UL>\r\nThe value of the array header points to a block\r\nof (arity + 1) <tt> word32</tt>'s, the first one is the DID of the array functor\r\nand the following ones are its dimensions.\r\nAfter the dimensions the array itself is located.\r\nSince a global variable has no header, trying to apply this\r\nmacro on a global variable will issue an error.\r\n<P>\r\nAs described in chapter <A HREF=\"node129.html#chaparrays\"><IMG ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ecrc.de/eclipse/new_icons//cross_ref_motif.gif\"></A>, arrays and global variables are\r\nsensitive to the module system. The macros mentioned above always access\r\nthe non-local array or variable.\r\nTo access the visible array or variable in a given module, the module\r\nargument is needed. The corresponding macros are\r\n<blockquote> <PRE>Get_Visible_Array_Header(adid, mod_val, mod_tag, address)\r\nGet_Visible_Array_Address(adid, mod_val, mod_tag, address)\r\n</PRE></blockquote>\r\n<P>\r\nAs an example, here is the source of an external predicate that\r\nprints the contents of the specified Prolog (i.e. untyped) array which\r\nmust be visible in the given module:\r\n<blockquote> <PRE>int\r\np_print_array(varr, tarr, vmod, tmod)\r\nvalue   varr, vmod;\r\ntype    tarr, tmod;\r\n{\r\n        int        size = 1;  /* number of array elements */\r\n        pword      *p;\r\n        word32     *dim;\r\n        word32     wdid;\r\n        int        arity;\r\n\r\n        Error_If_Ref(tarr);\r\n        if (IsAtom(tarr))                      /* a global variable */\r\n                wdid = varr.did;\r\n        else                                   /* an array */\r\n        {\r\n                Get_Functor_Did(varr, tarr, wdid);\r\n                Get_Visible_Array_Header(wdid, vmod, tmod, p);\r\n                if (!IsStructure(p-&gt;tag))      /* error if not prolog */\r\n                {\r\n                        Error(TYPE_ERROR);\r\n                }\r\n                dim = (word32 *) p-&gt;val.ptr;\r\n                dim++;                        /* skip the did */\r\n                for (arity = DidArity(wdid); arity; arity--)\r\n                        size *= *dim++;       /* compute the size */\r\n        }\r\n        Get_Visible_Array_Address(wdid, vmod, tmod, p);\r\n        for (; size; size--, p++)\r\n        {\r\n                Write(p-&gt;val, p-&gt;tag, Current_Output);\r\n                Fprintf(Current_Output, &quot; &quot;);\r\n        }\r\n        Succeed;\r\n}\r\n</PRE>\r\n</blockquote>\r\n<P>\r\nNote the use of <tt> pword</tt> and <tt> word32</tt> pointers - the array header\r\nand array elements are <tt> pword</tt>'s, the dimensions are <tt> word32</tt>'s.\r\n<P>\r\nTo avoid the need of specifying a module argument on every call, it is\r\nconvenient to define a <i> tool interface</i> using the external predicate\r\nas the tool body:\r\n<blockquote> <PRE>:-  external(print_array/2, p_print_array),\r\n    tool(print_array/1, print_array/2).\r\n</PRE>\r\n</blockquote>\r\nThe resulting predicate <tt> print_array/1</tt> will print the array with the\r\nspecified name that is visible in the module from where <tt> print_array/1</tt>\r\nis called.\r\n<P>\r\n<BR> <HR><A NAME=tex2html5024 HREF=\"node232.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html5022 HREF=\"node222.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html5016 HREF=\"node230.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html5026 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html5025 HREF=\"node232.html\"> Memory Management</A>\r\n<B>Up:</B> <A NAME=tex2html5023 HREF=\"node222.html\"> Interface to Externals</A>\r\n<B> Previous:</B> <A NAME=tex2html5017 HREF=\"node230.html\"> I/O in External </A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "id": 30850.0}