{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 28 1 Normalization Reactions Up 28 Reactions Next 29 OEChem Class Hierarchy 28 2 Library Generation The OELibraryGen was designed to give programmers a high degree of control when applying chemical transformations It was also designed for efficiency Potentially costly preprocessing is performed a single time before transformations can be carried out The relative setup cost of a OELibraryGen instance may be high and the memory use large as preprocessed reactants are stored in memory Subsequent generation of products however is very efficient because setup costs are paid in advance The OELibraryGen class serves a dual purpose of managing sets of preprocessed starting materials and storing a list of chemical transform operations defined by a reaction molecule Chemical transform operations are carried out on starting materials Starting materials provide most of the virtual matter that goes into making virtual product molecules The OELibraryGen class provides an interface to associate starting materials with reactant patterns using the OELibraryGen SetStartingMaterial and OELibraryGen AddStartingMaterial methods These methods associate starting materials to reactant patterns using the index reactant number of the pattern Reactant patterns are numbered starting at zero for the lowest atom index and all atoms that are a members of the same connected component The next reactant pattern begins with the next lowest atom index that is not a member of the first component In a SMIRKS pattern the first reactant reactant number zero is the furthest reactant on the left Disconnected reactant patterns may be grouped into a single component using component level grouping in SMIRKS denoted by parentheses Once a reaction has been defined and starting materials have been associated with each of the reactant patterns chemical transformations can be applied to combinations of starting materials To achieve a chemically reasonable output attention should be given to the mode of valence or hydrogen count correction that matches the reaction The OELibraryGen class has three possible modes of valence correction explicit hydrogen implicit hydrogen and automatic The default mode for valence correction and SMIRKS interpretation is to emulate the Daylight Reaction Toolkit Hydrogen counts are adjusted using explicit hydrogens in SMIRKS patterns Reactions are carried out using explicit hydrogens and valence correction occurs when explicit hydrogens are added or deleted as defined by a reaction The following example demonstrates strict SMIRKS and explicit hydrogen handling usr bin env python ch28 2 py from openeye oechem import libgen OELibraryGen O 1 C 2 Cl 3 N 4 H 5 O 1 C 2 N 4 mol OEGraphMol OEParseSmiles mol CC O Cl libgen SetStartingMaterial mol mol Clear OEParseSmiles mol NCC libgen SetStartingMaterial mol 1 for product in libgen GetProducts smi OECreateCanSmiString product print smi Download as text In the amide bond forming reaction a hydrogen atom attached to the nitrogen in the amine pattern is explicitly deleted when forming the product When executed the example generates two products in total Each product corresponds to the equivalent protons attached to the amine If a unique set of products is desired canonical smiles strings may be stored for verification that products generated are indeed unique The following demonstrates how the same basic reaction given in the previous example can be carried out using the implicit hydrogen correction mode Notice that no explicit hydrogens appear in the reaction Instead the SMARTS implicit hydrogen count operator appears on the right hand side of the reaction and is used to assign the implicit hydrogen count of the product nitrogen usr bin env python ch28 3 py from openeye oechem import libgen OELibraryGen O 1 C 2 Cl 3 N 4 O 1 C 2 Nh1 4 libgen SetExplicitHydrogens False mol OEGraphMol OEParseSmiles mol CC O Cl libgen SetStartingMaterial mol mol Clear OEParseSmiles mol NCC libgen SetStartingMaterial mol 1 for product in libgen GetProducts smi OECreateCanSmiString product print smi Download as text The reaction is written to work with implicit hydrogens using the lowercase h primitive and the OELibraryGen instance is set to work in implicit hydrogen mode using the OELibraryGen SetExplicitHydrogens method The final example demonstrates automatic valence correction In implicit hydrogen mode set using the OELibraryGen SetExplicitHydrogens method automatic valence correction attempts to add or subtract implicit hydrogens in order to retain the valence state observed in the starting materials Before chemical transformations commence the valence state for each reacting atom is recorded After the transform operations are complete the implicit hydrogen count is adjusted to match the beginning state of the reacting atoms Changes in formal charge are taken into account during the valence correction usr bin env python ch28 4 py from openeye oechem import libgen OELibraryGen O 1 C 2 Cl 3 N 4 O 1 C 2 N 4 libgen SetExplicitHydrogens False libgen SetValenceCorrection True mol OEGraphMol OEParseSmiles mol CC O Cl libgen SetStartingMaterial mol mol Clear OEParseSmiles mol NCC libgen SetStartingMaterial mol 1 for product in libgen GetProducts smi OECreateCanSmiString product print smi Download as text In general automatic valence correction is a convenience that allows straightforward reactions to be written in simplified manner and reduces the onus of valence state bookkeeping Reactions that alter the preferred valence state of an atom oxidation for example may not be automatically correctable OEChem Python Theory Manual Version 1 3 1 Previous 28 1 Normalization Reactions Up 28 Reactions Next 29 OEChem Class Hierarchy Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node250.html", "title": "28.2 library generation", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>28.2 Library Generation</title>\n<META NAME=\"description\" CONTENT=\"28.2 Library Generation\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"previous\" HREF=\"node249.html\">\n<LINK REL=\"up\" HREF=\"node248.html\">\n<LINK REL=\"next\" HREF=\"node251.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node249.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node248.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node251.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node249.html\">28.1 Normalization Reactions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node248.html\">28. Reactions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node251.html\">29. OEChem Class Hierarchy:</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0030200000000000000000\">\n28.2 Library Generation</A>\n</H1>\n\n<P>\nThe <code>OELibraryGen</code> was designed to give programmers a high degree\nof control when applying chemical transformations.  It was also\ndesigned for efficiency. Potentially costly preprocessing is performed\na single time before transformations can be carried out.  The relative\nsetup cost of a <code>OELibraryGen</code> instance may be high, and the\nmemory use large as preprocessed reactants are stored in memory.\nSubsequent generation of products,however, is very efficient because\nsetup costs are paid in advance.  The <code>OELibraryGen</code> class serves\na dual purpose of managing sets of preprocessed starting materials,\nand storing a list of chemical transform operations defined by a\nreaction molecule.\n\n<P>\nChemical transform operations are carried out on starting materials.\nStarting materials provide most of the virtual matter that goes into\nmaking virtual product molecules.  The <code>OELibraryGen</code> class\nprovides an interface to associate starting materials with reactant\npatterns using the <code>OELibraryGen::SetStartingMaterial</code> and\n<code>OELibraryGen::AddStartingMaterial</code> methods.  These methods\nassociate starting materials to reactant patterns using the index\n(reactant number) of the pattern.  Reactant patterns are numbered\nstarting at zero for the lowest atom index and all atoms that are a\nmembers of the same connected component.  The next reactant pattern\nbegins with the next lowest atom index that is not a member of the\nfirst component.  In a SMIRKS pattern the first reactant (reactant\nnumber zero) is the furthest reactant on the left.  Disconnected\nreactant patterns may be grouped into a single component using\ncomponent level grouping in SMIRKS denoted by parentheses.\n\n<P>\nOnce a reaction has been defined, and starting materials have been\nassociated with each of the reactant patterns, chemical\ntransformations can be applied to combinations of starting materials.\nTo achieve a chemically reasonable output attention should be given to\nthe mode of valence (or hydrogen count) correction that matches the\nreaction.  The <code>OELibraryGen</code> class has three possible modes of\nvalence correction: explicit hydrogen, implicit hydrogen, and\nautomatic.  The default mode for valence correction and SMIRKS\ninterpretation is to emulate the Daylight Reaction Toolkit.  Hydrogen\ncounts are adjusted using explicit hydrogens in SMIRKS patterns.\nReactions are carried out using explicit hydrogens, and valence\ncorrection occurs when explicit hydrogens are added or deleted as\ndefined by a reaction.  The following example demonstrates strict\nSMIRKS and explicit hydrogen handling.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch28-2.py\n\nfrom openeye.oechem import *\n\nlibgen = OELibraryGen(\"[O:1]=[C:2][Cl:3].[N:4][H:5]&gt;&#62;[O:1]=[C:2][N:4]\")\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"CC(=O)Cl\")\nlibgen.SetStartingMaterial(mol, 0)\n\nmol.Clear()\nOEParseSmiles(mol, \"NCC\")\nlibgen.SetStartingMaterial(mol, 1)\n\nfor product in libgen.GetProducts():\n    smi = OECreateCanSmiString(product)\n    print smi\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch28-2.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nIn the amide bond forming reaction a hydrogen atom attached to the\nnitrogen in the amine pattern is explicitly deleted when forming the\nproduct.  When executed, the example generates two products in total.\nEach product corresponds to the equivalent protons attached to the\namine.  If a unique set of products is desired, canonical smiles\nstrings may be stored for verification that products generated are\nindeed unique.\n\n<P>\nThe following demonstrates how the same basic reaction given in the\nprevious example can be carried out using the implicit hydrogen\ncorrection mode.  Notice that no explicit hydrogens appear in the\nreaction.  Instead, the SMARTS implicit hydrogen count operator\nappears on the right hand side of the reaction and is used to assign\nthe implicit hydrogen count of the product nitrogen.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch28-3.py\n\nfrom openeye.oechem import *\n\nlibgen = OELibraryGen(\"[O:1]=[C:2][Cl:3].[N:4]&gt;&#62;[O:1]=[C:2][Nh1:4]\")\nlibgen.SetExplicitHydrogens(False)\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"CC(=O)Cl\")\nlibgen.SetStartingMaterial(mol, 0)\n\nmol.Clear()\nOEParseSmiles(mol, \"NCC\")\nlibgen.SetStartingMaterial(mol, 1)\n\nfor product in libgen.GetProducts():\n    smi = OECreateCanSmiString(product)\n    print smi\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch28-3.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nThe reaction is written to work with implicit hydrogens (using the\nlowercase 'h' primitive), and the <code>OELibraryGen</code> instance is set\nto work in implicit hydrogen mode using the\n<code>OELibraryGen::SetExplicitHydrogens</code> method.\n\n<P>\nThe final example demonstrates automatic valence correction.  In\nimplicit hydrogen mode (set using the\n<code>OELibraryGen::SetExplicitHydrogens</code> method) automatic valence\ncorrection attempts to add or subtract implicit hydrogens in order to\nretain the valence state observed in the starting materials.  Before\nchemical transformations commence, the valence state for each reacting\natom is recorded.  After the transform operations are complete the\nimplicit hydrogen count is adjusted to match the beginning state of\nthe reacting atoms.  Changes in formal charge are taken into account\nduring the valence correction.\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/env python\n# ch28-4.py\n\nfrom openeye.oechem import *\n\nlibgen = OELibraryGen(\"[O:1]=[C:2][Cl:3].[N:4]&gt;&#62;[O:1]=[C:2][N:4]\")\nlibgen.SetExplicitHydrogens(False)\nlibgen.SetValenceCorrection(True)\n\nmol = OEGraphMol()\nOEParseSmiles(mol, \"CC(=O)Cl\")\nlibgen.SetStartingMaterial(mol, 0)\n\nmol.Clear()\nOEParseSmiles(mol, \"NCC\")\nlibgen.SetStartingMaterial(mol, 1)\n\nfor product in libgen.GetProducts():\n    smi = OECreateCanSmiString(product)\n    print smi\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch28-4.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nIn general, automatic valence correction is a convenience that allows\nstraightforward reactions to be written in simplified manner and\nreduces the onus of valence state bookkeeping.  Reactions that alter\nthe preferred valence state of an atom, oxidation for example, may not\nbe automatically correctable.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node249.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node248.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node251.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node249.html\">28.1 Normalization Reactions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node248.html\">28. Reactions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node251.html\">29. OEChem Class Hierarchy:</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38173.0}