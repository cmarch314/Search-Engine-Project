{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 392D Alpha Shapes Tran Kai Frank Da Assume we are given a set S of points in 2D or 3D and we d like to have something like the shape formed by these points This is quite a vague notion and there are probably many possible interpretations the shape being one of them Alpha shapes can be used for shape reconstruction from a dense unorganized set of data points Indeed an shape is demarcated by a frontier which is a linear approximation of the original shape BB97 As mentionned in Edelsbrunner s and M cke s paper EM94 one can intuitively think of an shape as the following Imagine a huge mass of ice cream making up the space 3 and containing the points as hard chocolate pieces Using one of these sphere formed ice cream spoons we carve out all parts of the ice cream block we can reach without bumping into chocolate pieces thereby even carving out holes in the inside eg parts not reachable by simply moving the spoon from the outside We will eventually end up with a not necessarily convex object bounded by caps arcs and points If we now straighten all round faces to triangles and line segments we have an intuitive description of what is called the shape of S Here s an example for this process in 2D where our ice cream spoon is simply a circle And what is in the game is the squared radius of the carving spoon A very small value will allow us to eat up all of the ice cream except the chocolate points themselves Thus we already see that the shape degenerates to the point set S for On the other hand a huge value of will prevent us even from moving the spoon between two points since it s way too large So we will never spoon up ice cream lying in the inside of the convex hull of S and hence the shape for is the convex hull of S 1 39 1 Definitions We distinguish two versions of alpha shapes Basic alpha shapes are based on the Delaunay triangulation Weighted alpha shapes are based on its generalization the regular triangulation replacing the euclidean distance by the power to weighted points There is a close connection between alpha shapes and the underlying triangulations More precisely the complex of S is a subcomplex of this triangulation of S containing the exposed k simplices k d A simplex is exposed if there is an open disk resp ball of radius sqrt through the vertices of the simplex that does not contain any other point of S for the metric used in the computation of the underlying triangulation The corresponding shape is defined as the underlying interior space of the complex see EM94 In general an complex is a non connected and non pure polytope it means that one k simplex k d 1 is not necessary adjacent to a k 1 simplex The shapes of S form a discrete family even though they are defined for all real numbers with Thus we can represent the entire family of shapes of S by the underlying triangulation of S In this representation each k simplex of the underlying triangulation is associated with an interval that specifies for which values of the k simplex belongs to the shape Relying on this fact the family of shapes can be computed efficiently and relatively easily Furthermore we can select an appropriate shape from a finite number of different shapes and corresponding values 39 2 Functionality The class CGAL Alpha shape 2 Dt represents the family of shapes of points in a plane for all positive It maintains the underlying triangulation Dt which represents connectivity and order among squared radius of its faces Each k dimensional face of the Dt is associated with an interval that specifies for which values of the face belongs to the shape There are links between the intervals and the k dimensional faces of the triangulation The class CGAL Alpha shape 2 Dt provides functions to set and get the current value as well as an iterator that enumerates the values where the shape changes It provides iterators to enumerate the vertices and edges that are in the shape and functions that allow to classify vertices edges and faces with respect to the shape They can be in the interior of a face that belongs or does not belong to the shape They can be singular regular that is be on the boundary of the shape but not incident incident to a triangle of the complex Finally it provides a function to determine the value such that the shape satisfies the following two properties or at least the second one if there is no such that both are satisfied i The number of components equals a number of your choice and ii all data points are either on the boundary or in the interior of the regularized version of the shape no singular edges The current implementation is static that is after its construction points cannot be inserted or removed 39 3 Concepts and Models We currently do not specify concepts for the underlying triangulation type Models that work for a basic alpha shape are the classes CGAL Delaunay triangulation 2 and CGAL Triangulation hierarchy 2 templatized with a Delaunay triangulation A model that works for a weighted alpha shape is the class CGAL Regular triangulation 2 The triangulation needs a geometric traits class as argument The requirements of this class are described in the concept CGAL AlphaShapeTraits 2 for which the CGAL kernels and CGAL Weighted alpha shape euclidean traits 2 are models There are no requirements on the triangulation data structure However it must be parameterized with vertex and face classes which are model of the concepts AlphaShapeVertex 2 and AlphaShapeFace 2 by default the classes CGAL Alpha shape vertex base 2 Gt and CGAL Alpha shape face base 2 Tf 39 4 Examples 39 4 1 Example for Basic Alpha Shapes The basic alpha shape needs a Delaunay triangulation as underlying triangulation Dt The Delaunay triangulation class is parameterized with a geometric and a triangulation data structure traits For the geometric traits class we can use a CGAL kernel For the triangulation data structure traits we have to choose the vertex and face classes needed for alpha shapes namely CGAL Alpha shape vertex base 2 Gt Dv and CGAL Alpha shape face base 2 Gt Df As default vertex and face type they use CGAL Triangulation vertex base 2 Gt and CGAL Triangulation face base 2 Gt respectively The following code sniplet shows how to obtain a basic alpha shape type typedef CGAL Cartesian double K typedef CGAL Alpha shape vertex base 2 K Av typedef CGAL Triangulation face base 2 K Tf typedef CGAL Alpha shape face base 2 K Tf Af typedef CGAL Triangulation default data structure 2 K Av Af Tds typedef CGAL Delaunay triangulation 2 K Tds Dt typedef CGAL Alpha shape 2 Dt Alpha shape 2 39 4 2 Example for Basic Alpha Shapes with Many Points When the input data set is huge say more than 1 points it pays off to use a triangulation hierarchy It has the same API as the Delaunay triangulation and differs only in the types of the vertices and faces Therefore the only part that changes are the typedefs in the beginning typedef CGAL Cartesian double K typedef CGAL Alpha shape vertex base 2 K Avb typedef CGAL Triangulation hierarchy vertex base 2 Avb Av typedef CGAL Triangulation face base 2 K Tf typedef CGAL Alpha shape face base 2 K Tf Af typedef CGAL Triangulation default data structure 2 K Av Af Tds typedef CGAL Delaunay triangulation 2 K Tds Dt typedef CGAL Triangulation hierarchy 2 Dt Ht typedef CGAL Alpha shape 2 Ht Alpha shape 2 39 4 3 Example for Weighted Alpha Shapes A weighted alpha shape needs a regular triangulation as underlying triangulation Dt and it needs a particular face class namely CGAL Regular triangulation face base 2 Gt Note that there is no special weighted alpha shape class typedef CGAL Cartesian double K typedef CGAL Weighted alpha shape euclidean traits 2 K Gt typedef CGAL Alpha shape vertex base 2 Gt Av typedef CGAL Regular triangulation face base 2 Gt Rf typedef CGAL Alpha shape face base 2 Gt Rf Af typedef CGAL Triangulation default data structure 2 Gt Av Af Tds typedef CGAL Regular triangulation 2 Gt Tds Rt typedef CGAL Alpha shape 2 Rt Alpha shape 2 Footnotes 1 ice cream ice cream The wording of this introductory paragraphs is borrowed from Kaspar Fischer s Introduction to Alpha Shapes which can be found at http n ethz ch student fischerk alphashapes as index html The picture has been taken from Walter Luh s homepage at http www stanford edu wtilde luh cs448b alphashapes html Next chapter 2D Alpha Shapes Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Alpha_shapes_2/Chapter_main.html", "title": "2d alpha shapes", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Alpha_shapes_2/main.tex' -->\n<html> <head>  \n<title>2D Alpha Shapes</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_39\"></a>\n  \n<h1>Chapter 39<BR>2D Alpha Shapes</h1>\n <A NAME=\"I1_ChapterAlphashapes2D\"></A>\n<EM>Tran Kai Frank Da</EM><BR>\n\n\n<P>\n\n<img border=0 src=\"./alphashape.gif\"  align=center  alt=\"alphashape\">\n<P>\n\nAssume we are given a set <MATH><I>S</I></MATH> of points in 2D or 3D and we'd like to\nhave something like ``the shape formed by these points.'' This is\nquite a vague notion and there are probably many possible\ninterpretations, the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape being one of them. Alpha shapes\ncan be used for shape reconstruction from a dense unorganized set of\ndata points. Indeed, an <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape is demarcated by a frontier,\nwhich is a linear approximation of the original shape [<A HREF=\"../biblio.html#Biblio_bb-srmua-97t\">BB97</A>].\n<P>\n\nAs mentionned in Edelsbrunner's and M&uuml;cke's paper [<A HREF=\"../biblio.html#Biblio_em-tdas-94\">EM94</A>],\none can intuitively think of an <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape as the\nfollowing. Imagine a huge mass of ice-cream making up the space <MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_R.gif\"> <SUP>3</SUP></I></MATH>\nand containing the points as ``hard'' chocolate pieces. Using one of\nthese sphere-formed ice-cream spoons we carve out all parts of the\nice-cream block we can reach without bumping into chocolate pieces,\nthereby even carving out holes in the inside (eg. parts not reachable\nby simply moving the spoon from the outside). We will eventually end\nup with a (not necessarily convex) object bounded by caps, arcs and\npoints. If we now straighten all ``round'' faces to triangles and line\nsegments, we have an intuitive description of what is called the\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape of <MATH><I>S</I></MATH>. Here's an example for this process in 2D (where\nour ice-cream spoon is simply a circle):\n<P>\n\nAnd what is <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> in the game?  <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> is the squared radius of the\ncarving spoon. A very small value will allow us to eat up all of the\nice-cream except the chocolate points themselves. Thus we already see\nthat the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape degenerates to the point-set <MATH><I>S</I></MATH> for\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"> <IMG BORDER=0 WIDTH=15 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_rightarrow.gif\"> 0</I></MATH>. On the other hand, a huge value of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>\nwill prevent us even from moving the spoon between two points since\nit's way too large. So we will never spoon up ice-cream lying in the\ninside of the convex hull of <MATH><I>S</I></MATH>, and hence the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape for\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"> <IMG BORDER=0 WIDTH=15 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_rightarrow.gif\">  <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </I></MATH> is the convex hull of <MATH><I>S</I></MATH>.<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>39.1&nbsp;&nbsp;&nbsp;Definitions</h2>\n<P>\n\nWe distinguish two versions of alpha shapes.  <I>Basic alpha shapes</I>\nare based on the Delaunay triangulation.  <I>Weighted alpha shapes</I>\nare based on its generalization, the regular triangulation, replacing\nthe euclidean distance by the power to weighted points.\n<P>\n\nThere is a close connection between alpha shapes and the underlying\ntriangulations. More precisely, the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex of <MATH><I>S</I></MATH> is a\nsubcomplex of this triangulation of <MATH><I>S</I></MATH>, containing the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-exposed\n<MATH><I>k</I></MATH>-simplices, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> k  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> d</I></MATH>. A simplex is <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-exposed, if there is an\nopen disk (resp. ball) of radius <MATH><I><A HREF=\"../NumberTypeSupport_ref/Function_sqrt.html#Cross_link_anchor_1414\">sqrt</A>(<IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\">)</I></MATH> through the vertices of the\nsimplex that does not contain any other point of <MATH><I>S</I></MATH>, for the metric used in\nthe computation of the underlying triangulation.  The corresponding\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape is defined as the underlying interior space of the\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex (see [<A HREF=\"../biblio.html#Biblio_em-tdas-94\">EM94</A>]).\n<P>\n\nIn general, an <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex is a non-connected and non-pure polytope, it\nmeans, that one <MATH><I>k</I></MATH>-simplex, <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> k  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> d-1</I></MATH> is not necessary adjacent to\na <MATH><I>(k+1)</I></MATH>-simplex.\n<P>\n\nThe <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes of <MATH><I>S</I></MATH> form a discrete family, even though they\nare defined for all real numbers <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> with <MATH><I>0  <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\"> <IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"> <IMG BORDER=0 WIDTH=11 HEIGHT=25 ALIGN=MIDDLE SRC=\"cc_leq.gif\">  <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </I></MATH>. Thus, we can represent the entire family of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes\nof <MATH><I>S</I></MATH> by the underlying triangulation of <MATH><I>S</I></MATH>. In this representation\neach <MATH><I>k</I></MATH>-simplex of the underlying triangulation is associated with an\ninterval that specifies for which values of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> the <MATH><I>k</I></MATH>-simplex\nbelongs to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape. Relying on this fact, the family of\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes can be computed efficiently and relatively\neasily. Furthermore, we can select an appropriate <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape from a\nfinite number of different <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes and corresponding\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-values.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>39.2&nbsp;&nbsp;&nbsp;Functionality <A NAME=\"I1_SectAlpha_Shape_2\"></A></h2>\n<P>\n\nThe class <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1015\">CGAL::Alpha_shape_2</A>&lt;Dt&gt;</I> represents the family of\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shapes of points in a plane for <I>all</I> positive\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>. It maintains the underlying triangulation <I>Dt</I> which\nrepresents connectivity and order among squared radius of its faces. Each\n<MATH><I>k</I></MATH>-dimensional face of the <I>Dt</I> is associated with an interval\nthat specifies for which values of <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> the face belongs to the\n<MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape. There are links between the intervals and the\n<MATH><I>k</I></MATH>-dimensional faces of the triangulation.\n<P>\n\nThe class <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1015\">CGAL::Alpha_shape_2</A>&lt;Dt&gt;</I> provides functions to set and\nget the current <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value, as well as an iterator that enumerates\nthe <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-values where the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape changes.\n<P>\n\nIt provides iterators to enumerate the vertices and edges that are in\nthe <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape, and functions that allow to classify vertices,\nedges and faces with respect to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape. They can be in\nthe interior of a face that belongs or does not belong to the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape.\nThey can be singular/regular, that is be on the boundary of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape,\nbut not incident/incident to a triangle of the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-complex.\n<P>\n\nFinally, it provides a function to determine the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-value\nsuch that the <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape  satisfies the following two properties,\nor at least the second one if there is no such <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH> that both\nare satisfied:\n<P>\n\n(i) The number of components equals a number of your choice and<BR>\n\n(ii) all data points are either on the boundary or in the interior of the regularized version of \nthe <MATH><I><IMG BORDER=0 WIDTH=9 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_alpha.gif\"></I></MATH>-shape (no singular edges).\n<P>\n\n<BR>\n\nThe current implementation is static, that is after its construction\npoints cannot be inserted or removed.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>39.3&nbsp;&nbsp;&nbsp;Concepts and Models<A NAME=\"I1_SectDtClass2D\"></A></h2>\n<P>\n\nWe currently do not specify concepts for the underlying triangulation\ntype. Models that work for a basic alpha-shape are the classes\n<I><A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_919\">CGAL::Delaunay_triangulation_2</A></I> and \n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_hierarchy_2.html#Cross_link_anchor_950\">CGAL::Triangulation_hierarchy_2</A></I> templatized with a Delaunay\ntriangulation. A model that works for a weighted alpha-shape is \nthe class <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_926\">CGAL::Regular_triangulation_2</A></I>.\n<P>\n\nThe triangulation needs a geometric traits class as argument.\nThe requirements of this class are described in the \nconcept <I>CGAL::<A HREF=\"../Alpha_shapes_2_ref/Concept_AlphaShapeTraits_2.html#Cross_link_anchor_1020\">AlphaShapeTraits_2</A></I> for which\nthe C<SMALL>GAL</SMALL> kernels\nand <I><A HREF=\"../Alpha_shapes_2_ref/Class_Weighted_alpha_shape_euclidean_traits_2.html#Cross_link_anchor_1021\">CGAL::Weighted_alpha_shape_euclidean_traits_2</A></I> are models.\n<P>\n\nThere are no requirements on the triangulation data structure.\nHowever it must be parameterized with \nvertex and face classes, which are model of the concepts\n<I><A HREF=\"../Alpha_shapes_2_ref/Concept_AlphaShapeVertex_2.html#Cross_link_anchor_1023\">AlphaShapeVertex_2</A></I> and <I><A HREF=\"../Alpha_shapes_2_ref/Concept_AlphaShapeFace_2.html#Cross_link_anchor_1017\">AlphaShapeFace_2</A></I>,\nby default the classes <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_vertex_base_2.html#Cross_link_anchor_1024\">CGAL::Alpha_shape_vertex_base_2</A>&lt;Gt&gt;</I> \nand <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_face_base_2.html#Cross_link_anchor_1018\">CGAL::Alpha_shape_face_base_2</A>&lt;Tf&gt;</I>.\n<P>\n\n<a name=\"Section_4\"></a>\n        \n<h2>39.4&nbsp;&nbsp;&nbsp;Examples</h2>\n\n\n<h3>39.4.1&nbsp;&nbsp;&nbsp;Example for Basic Alpha-Shapes<A NAME=\"I1_SectClassicAS2D\"></A></h3>\n<P>\n\nThe basic alpha shape needs a Delaunay triangulation as\nunderlying triangulation <I>Dt</I>.  The Delaunay triangulation class is\nparameterized with a geometric and a triangulation data structure traits.\n<P>\n\nFor the geometric traits class we can use a C<SMALL>GAL</SMALL> kernel.\n<P>\n\nFor the triangulation data structure traits, we have to\nchoose the vertex and face classes needed for alpha shapes,\nnamely <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_vertex_base_2.html#Cross_link_anchor_1024\">CGAL::Alpha_shape_vertex_base_2</A>&lt;Gt, Dv&gt;</I> and <I><A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_face_base_2.html#Cross_link_anchor_1018\">CGAL::Alpha_shape_face_base_2</A>&lt;Gt,Df&gt;</I>.\nAs default vertex and face type they use <I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_vertex_base_2.html#Cross_link_anchor_954\">CGAL::Triangulation_vertex_base_2</A>&lt;Gt&gt;</I>\nand  <I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Gt&gt;</I> respectively.\n<P>\n\nThe following code sniplet shows how to obtain a basic\nalpha shape type.\n<P>\n\n<PRE>\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\n\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_vertex_base_2.html#Cross_link_anchor_1024\">CGAL::Alpha_shape_vertex_base_2</A>&lt;K&gt; Av;\n\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;K&gt; Tf;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_face_base_2.html#Cross_link_anchor_1018\">CGAL::Alpha_shape_face_base_2</A>&lt;K,Tf&gt; Af;\n\ntypedef CGAL::Triangulation_default_data_structure_2&lt;K,Av,Af&gt; Tds;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_919\">CGAL::Delaunay_triangulation_2</A>&lt;K,Tds&gt; Dt;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1015\">CGAL::Alpha_shape_2</A>&lt;Dt&gt; <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>;\n</PRE>\n<P>\n\n<h3>39.4.2&nbsp;&nbsp;&nbsp;Example for Basic Alpha-Shapes with Many Points\n         <A NAME=\"I1_SectClassicAS2DHier\"></A></h3>\n<P>\n\nWhen the input data set is huge, say more than 10.000 points, it pays\noff to use a triangulation hierarchy. It has the same A<SMALL>PI</SMALL> as the\nDelaunay triangulation and differs only in the types of the vertices\nand faces. Therefore, the only part that changes are the typedefs in the beginning.\n<P>\n\n<PRE>\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\n\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_vertex_base_2.html#Cross_link_anchor_1024\">CGAL::Alpha_shape_vertex_base_2</A>&lt;K&gt; Avb;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Triangulation_hierarchy_vertex_base_2.html#Cross_link_anchor_952\">CGAL::Triangulation_hierarchy_vertex_base_2</A>&lt;Avb&gt; Av \n\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;K&gt; Tf;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_face_base_2.html#Cross_link_anchor_1018\">CGAL::Alpha_shape_face_base_2</A>&lt;K,Tf&gt; Af;\n\ntypedef CGAL::Triangulation_default_data_structure_2&lt;K,Av,Af&gt; Tds;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_919\">CGAL::Delaunay_triangulation_2</A>&lt;K,Tds&gt; Dt;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Triangulation_hierarchy_2.html#Cross_link_anchor_950\">CGAL::Triangulation_hierarchy_2</A>&lt;Dt&gt; Ht;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1015\">CGAL::Alpha_shape_2</A>&lt;Ht&gt; <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>;\n</PRE>\n<P>\n\n<h3>39.4.3&nbsp;&nbsp;&nbsp;Example for Weighted Alpha-Shapes<A NAME=\"I1_SectWeightedAS2D\"></A></h3>\n<P>\n\nA weighted alpha shape\n<A NAME=\"Index_anchor_944\"></A> \n, needs a regular triangulation as\nunderlying triangulation <I>Dt</I>, and it needs a particular\nface class, namely <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_face_base_2.html#Cross_link_anchor_930\">CGAL::Regular_triangulation_face_base_2</A>&lt;Gt&gt;</I>.\nNote that there is no special weighted alpha shape class.\n<P>\n\n<PRE>\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Weighted_alpha_shape_euclidean_traits_2.html#Cross_link_anchor_1021\">CGAL::Weighted_alpha_shape_euclidean_traits_2</A>&lt;K&gt; Gt;\n\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_vertex_base_2.html#Cross_link_anchor_1024\">CGAL::Alpha_shape_vertex_base_2</A>&lt;Gt&gt; Av;\n\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_face_base_2.html#Cross_link_anchor_930\">CGAL::Regular_triangulation_face_base_2</A>&lt;Gt&gt; Rf;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_face_base_2.html#Cross_link_anchor_1018\">CGAL::Alpha_shape_face_base_2</A>&lt;Gt,Rf&gt;  Af;\n\ntypedef CGAL::Triangulation_default_data_structure_2&lt;Gt,Av,Af&gt; Tds;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_926\">CGAL::Regular_triangulation_2</A>&lt;Gt,Tds&gt; Rt;\ntypedef <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1015\">CGAL::Alpha_shape_2</A>&lt;Rt&gt; <A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2.html#Cross_link_anchor_1016\">Alpha_shape_2</A>;\n</PRE>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nice cream, ice cream!!!\nThe wording of this introductory paragraphs is borrowed from  Kaspar Fischer's\n`` Introduction to Alpha Shapes'' which can be found at \nhttp://n.ethz.ch/student/fischerk/alphashapes/as/index.html.\nThe picture has been taken from Walter Luh's homepage at\nhttp://www.stanford.edu/&wtilde;luh/cs448b/alphashapes.html.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Alpha_shapes_2_ref/Chapter_intro.html\">2D Alpha Shapes</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_39!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39022.0}