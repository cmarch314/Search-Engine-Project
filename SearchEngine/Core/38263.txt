{"text": "OEChem C Theory Manual Version 1 3 1 Previous 33 Design Decisions Up 33 Design Decisions Next 33 2 Objects and Free Functions 33 1 Atoms Bond Conformers and Molecules The most important data types in the OEChem library are OEMolBase OEAtomBase and OEBondBase These three classes describe the behaviors of molecules atoms and bonds respectively However these types are abstract classes describing the methods and semantics of molecules atoms and bonds but without defining an actual implementation Several implementations of OEMolBase are defined by the OEChem library including OESCMol Single Conformer Molecule for simple molecule processing OETMol Traversal Molecule for fast looping and OEDBMol Database Molecule for minimal memory usage Additional OEMolBase implementations may also be provided by the user which can then be used by many of the functions in the OEChem Library An OEMCMolBase is a multi conformer extension of an OEMolBase The OEMCMolBase inherits from a OEMolBase and also contains OEConfBases which are additional sets of coordinates to represent conformers or depictions There may soon be multiple implementations of an OEMCMolBase but currently the only implementation is the OEMCMol which holds a 3 dimensional Cartesian representation of the coordinates The underlying OEMCMolBaseT implementation is templatized on the coordinate representation and is currently implemented with both float and double coordinates although float coordinates are the default An OEMolBase representing a molecule can be thought of as containing a possibly empty set of atoms represented by OEAtomBases and a possibly empty set of bonds represented by OEBondBases Each OEAtomBase and OEBondBase belongs to a single OEMolBase its parent It is not possible for an OEAtomBase or an OEBondBase to be simultaneously part of two distinct molecules Similarly an OEMCMolBase which inherits from an OEMolBase may contain atoms and bonds In addition is can contain a possibly empty set of conformers represented by OEConfBases Each OEConfBase belongs to a single parent The OEAtomBases OEBondBases and OEConfBases currently implemented cannot be created outside of the context of a parent molecule An OEBondBase typically represents a covalent dative bond between two OEAtomBases OEMolBase OEAtomBase OEBondBase OEMCMolBases and OEConfBases are all themselves derived from a more primitive class OEBase The methods of the OEBase class allow arbitrary data to be associated with an object using a tag value pair mechanism Thus for simple extensions of molecules atoms or bonds one can simply use this arbitrary data method to associate additional data with the classes rather than needing to derive or wrap a new molecule atom or bond class Since all of the classes discussed so far are abstract e g they define only an interface they cannot be explicitly instantiated by a user rather they can only be associated with pointers or references to objects For users who desire detailed control of their own memory this is a convenience however for ease of use we have designed some concrete wrapper classes These classes are the OEGraphMol OEQMol and OEMol which correspond to the OEMolBase and OEMCMolBase respectively OEGraphMols and OEMols can be declared by users and should be the primary molecules used in most high level OEChem code Any OEChem function which is defined for OEMolBases is also defined for OEGraphMols and an OEGraphMol can be passed to any function which takes an OEMolBase argument Similarly OEMols have the same API as OEMCMolBases and can be passed to any function which takes and OEMCMolBase or OEMolBase Above we spoke of several different implementations of OEMolBases The different implementations of OEMolBases The different implementations can be obtained by using an unsigned int argument in the OEGraphMol OEQMol and OEMol constructors Finally these concrete classes act as smart pointers around the implementations of the abstract classes so there is no need for a user to clean up memory used by these versions of the molecules For efficiency function parameters should never specify the concrete classes Instead they should always be declared using the corresponding abstract base classes For instance rather than void fcn const OEGraphMol mol one should use void fcn const OEMolBase mol Either of these functions call be called with either an instance of an OEGraphMol or a reference to an OEMolBase however the latter may be more efficient Since OEAtomBases OEBondBases and OEConfBases can only be accessed through their parent molecules there is no need for concrete instances of these classes In OEChem these three classes are accessed via pointers to the respective base classes or through the iterator interface discussed elsewhere OEChem C Theory Manual Version 1 3 1 Previous 33 Design Decisions Up 33 Design Decisions Next 33 2 Objects and Free Functions Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node270.html", "title": "33.1 atoms, bond, conformers, and molecules", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>33.1 Atoms, Bond, Conformers, and Molecules</title>\n<META NAME=\"description\" CONTENT=\"33.1 Atoms, Bond, Conformers, and Molecules\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node271.html\">\n<LINK REL=\"previous\" HREF=\"node269.html\">\n<LINK REL=\"up\" HREF=\"node269.html\">\n<LINK REL=\"next\" HREF=\"node271.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node271.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node271.html\">33.2 Objects and Free-Functions</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0036100000000000000000\">\n33.1 Atoms, Bond, Conformers, and Molecules</A>\n</H1>\n\n<P>\nThe most important data types in the OEChem library are OEMolBase,\nOEAtomBase and OEBondBase. These three classes describe the behaviors of\nmolecules, atoms and bonds respectively.  However, these types are\n``abstract'' classes, describing the methods and semantics of molecules,\natoms and bonds, but without defining an actual implementation.  Several\nimplementations of OEMolBase are defined by the OEChem library including\nOESCMol (Single Conformer Molecule) for simple molecule processing, OETMol\n(Traversal Molecule) for fast looping, and OEDBMol (Database Molecule)\nfor minimal memory usage.\nAdditional OEMolBase implementations may also be provided by the user,\nwhich can then be used by many of the functions in the OEChem Library.\n\n<P>\nAn OEMCMolBase is a multi-conformer extension of an OEMolBase.  The\nOEMCMolBase inherits from a OEMolBase and also contains OEConfBases, which\nare additional sets of coordinates to represent conformers or depictions.\nThere may soon be multiple implementations of an OEMCMolBase, but\ncurrently the only implementation is the OEMCMol, which holds a\n3-dimensional Cartesian representation of the coordinates.  The underlying\nOEMCMolBaseT implementation is templatized on the coordinate representation,\nand is currently implemented with both float and double coordinates (although\nfloat coordinates are the default).\n\n<P>\nAn OEMolBase representing a molecule can be thought of as containing a\n(possibly empty) set of atoms represented by OEAtomBases, and a\n(possibly empty) set of bonds represented by OEBondBases.  Each\nOEAtomBase and OEBondBase belongs to a single OEMolBase, its parent.\nIt is not possible for an OEAtomBase or an OEBondBase to be\nsimultaneously part of two distinct molecules.  Similarly, an OEMCMolBase,\nwhich inherits from an OEMolBase may contain atoms and bonds.  In addition,\nis can contain a (possibly empty) set of conformers represented by\nOEConfBases.  Each OEConfBase belongs to a single parent.  The OEAtomBases,\nOEBondBases, and OEConfBases currently implemented cannot be created\noutside of the context of a parent molecule.\n\n<P>\nAn OEBondBase (typically) represents a covalent/dative bond between two\nOEAtomBases.\n\n<P>\nOEMolBase, OEAtomBase, OEBondBase, OEMCMolBases, and OEConfBases are all\nthemselves derived from a more primitive class OEBase.  The methods of the\nOEBase class allow arbitrary data to be associated with an object, using a\ntag- value pair mechanism.  Thus for simple extensions of molecules, atoms,\nor bonds, one can simply use this arbitrary data method to associate\nadditional data with the classes, rather than needing to derive or wrap a\nnew molecule, atom, or bond class.\n\n<P>\nSince all of the classes discussed so far are abstract (<I>e.g.</I> - they\ndefine\nonly an interface), they cannot be explicitly instantiated by a user, rather\nthey can only be associated with pointers or references to objects.  For\nusers who desire detailed control of their own memory, this is a\nconvenience, however for ease of use we have designed some concrete wrapper\nclasses.  These classes are the OEGraphMol,OEQMol and OEMol, which correspond to\nthe OEMolBase and OEMCMolBase respectively.  OEGraphMols and OEMols can be\ndeclared by users and should be the primary molecules used in most\nhigh-level OEChem code.  Any OEChem function which is defined for\nOEMolBases is also defined for OEGraphMols, and an OEGraphMol can be\npassed to any function which takes an OEMolBase argument.  Similarly OEMols\nhave the same API as OEMCMolBases and can be passed to any function which\ntakes and OEMCMolBase or OEMolBase.  Above we spoke of several different\nimplementations of OEMolBases.  The different implementations of\nOEMolBases.  The different implementations can be obtained by using an\nunsigned int argument in the OEGraphMol, OEQMol, and OEMol constructors.\nFinally, these concrete classes act as smart pointers around the\nimplementations of the abstract classes, so there is no need for a user to\nclean up memory used by these versions of the molecules.\n\n<P>\nFor efficiency, function parameters should never specify the concrete\nclasses.  Instead, they should always be declared using the corresponding\nabstract-base classes.  For instance, rather than:\n\n<P>\n<dl><dd><pre class=\"verbatim\">void fcn(const OEGraphMol &amp;mol)\n{\n  ...\n}\n</pre></dl>\n\n<P>\none should use:\n<dl><dd><pre class=\"verbatim\">void fcn(const OEMolBase &amp;mol)\n{\n ...\n}\n</pre></dl>\n\n<P>\nEither of these functions call be called with either an instance of an\nOEGraphMol or a reference to an OEMolBase, however, the latter may be more\nefficient.\n\n<P>\nSince OEAtomBases, OEBondBases, and OEConfBases can only be accessed\nthrough their parent molecules, there is no need for concrete instances of\nthese classes.  In OEChem, these three classes are accessed via pointers to\nthe respective base classes, or through the iterator interface discussed\nelsewhere.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node269.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node271.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node269.html\">33. Design Decisions</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node271.html\">33.2 Objects and Free-Functions</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38263.0}