{"text": " Home Trees Indices Help Package CHEM Package CombiCDB Module ReactionPredictor Class ReactionPredictor hide private frames no frames Class ReactionPredictor Given pairs of molecules try breaking a bond in each and reattaching them to the other molecule Report each possibility with the predicted change in enthalpy based on a respective FreeEnergy Score object Those with larger negative changes suggest energetically favorable exothermic reactions Any bond attached to a atom will be ignored This allows to represent arbitary R groups and thus allows for the testing of functional groups rather than whole molecules Higher order bonds double bonds triple bonds are also considered However rather than being completely broken only one of the bonds will be broken and reattached elsewhere which only reduces the bond order Known Limitations 1 Only handles binary two reactant reactions 2 Only handles simple bond break reform reactions Does not allow for consideration of resonance structure intermediates 3 Only considers predicted bond dissociation energy enthalpy no entropy terms Instance Methods hide private init self Default constructor predictReactionsStream self molstreamFactory1 molstreamFactory2 productStream Given two input molecule streams factories try the predictReactions method for every pair of molecules predictReactions self reactant1 reactant2 Primary method generateIntermediates self composite componentIndex Generate a list actually an iterator over a dynamic list of intermediate structures by taking the composite molecule and breaking bonds and rearranging electrons in the component specified by the componentIndex assembleIntermediates self intermediateComposite Given a composite molecule where the first 2 components have been broken down into some kind of intermediate structure bonds broken maybe electrons shifted with respective and formal charge somewhere to account for the broken bond reassemble the intermediates into a completed composite by matching opposite formal charges in the 1st and 2nd component molBondList self mol componentIndex Return a concrete list of all of the bonds in the molecule where atomsByComponentAndCharge self mol componentIndex charge Return an iterator over all of atoms in the composite molecule whose componentIndex matches that specified and whose FormalCharge property matches that given getAtomComponentIndexes self mol If the attribute is already on this instance just return it Static Methods hide private breakableBond bond Decide whether the given bond should be breakable in terms of predicting reactions breakBond bond Represent the bond having broken at least by one order reassembleBond bond Undo the affects of the breakBond method shiftElectrons mol startAtom visitedAtomIndexes None Given a starting atom from the molecule check if it has a negative formal charge Method Details hide private predictReactionsStream self molstreamFactory1 molstreamFactory2 productStream Given two input molecule streams factories try the predictReactions method for every pair of molecules Write the outputs as reaction molecules to the molecule output stream The title of the output molecules will be the change in enthaly predicted for the reaction predictReactions self reactant1 reactant2 Primary method Given two molecule objects return an iterator over composite molecule objects representing predicted reaction products from the 2 molecules These will have their energy property set to the predicted change in enthalpy for that reaction accessible with the GetEnergy method Note that this actually returns a dynamic iterator over the same molecule object just modifed atom bonds and properties If you need to modify or otherwise keep multiple instances of the products make your own copies by using the OEGraphMol copy constructor like copy OEGraphMol product generateIntermediates self composite componentIndex Generate a list actually an iterator over a dynamic list of intermediate structures by taking the composite molecule and breaking bonds and rearranging electrons in the component specified by the componentIndex The self atomComponentIndexes member should be a precomputed list of componentIndexes for each atom in the composite molecule as returned by the OEDetermineComponents method If that has not yet been filled in it will be In the interests of efficiency each item returned is actually the same molecule object returned over and over again just with different atom bond modifications This as opposed to generating a copy each time As a result it is the callers responsibility to keep or put the molecule back into it s original state before asking for the next item assembleIntermediates self intermediateComposite Given a composite molecule where the first 2 components have been broken down into some kind of intermediate structure bonds broken maybe electrons shifted with respective and formal charge somewhere to account for the broken bond reassemble the intermediates into a completed composite by matching opposite formal charges in the 1st and 2nd component Return the results as a list of copies molBondList self mol componentIndex Return a concrete list of all of the bonds in the molecule where 1 The bond is considered breakable for purposes of reaction simulation as defined in the breakableBond method 2 The bond is a part of the component of the composite molecule indexed by the componentIndex parameter self atomComponentIndexes should be a precomputed list of componentIndexes for each atom in the composite molecule as returned by the OEDetermineComponents method Must use this concrete list because the algorithm will be creating and deleting bonds making the use of a dynamic iterator unsafe breakableBond bond Static Method Decide whether the given bond should be breakable in terms of predicting reactions When breaking higher order bonds double or greater we are really only considered breaking one of the bond orders double down to single etc breakBond bond Static Method Represent the bond having broken at least by one order Do so by decrementing the bond order or delete the given bond altogether from the containing molecule object reassembleBond bond Static Method Undo the affects of the breakBond method Increment the bond order and if necessary recreate a new bond instance into the parent molecule Returns the bond object which may just be the same thing if the order was incremented but if the bond had to be recreated the new instance is returned shiftElectrons mol startAtom visitedAtomIndexes None Static Method Given a starting atom from the molecule check if it has a negative formal charge If so try shifting the negative charge into a new adjacent bond This should only be applied if the adjacent atom of the increasing bond has a pi orbital system that can accept the electrons Basically the adjacent atom must already have another bond of at least order 2 If so then shift the electrons to increase the order of the bond to the adjacent atom and decrease the order of the adjacent atom s other double triple bond to the last opposite atom e g C C O will become C C O This function will be called recursively for repeated shifts Uses the visitedAtomIndexes Set to keep track of atoms already visited to avoid backtracking For efficiency will keep yielding modifications of the same molecule object instead of copies This requires that the state of the molecule always be brought back to where it was getAtomComponentIndexes self mol If the attribute is already on this instance just return it Otherwise compute its value from the molecule object first Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 27 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html", "title": "chem.combicdb.reactionpredictor.reactionpredictor", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.CombiCDB.ReactionPredictor.ReactionPredictor</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.CombiCDB-module.html\">Package&nbsp;CombiCDB</a> ::\n        <a href=\"CHEM.CombiCDB.ReactionPredictor-module.html\">Module&nbsp;ReactionPredictor</a> ::\n        Class&nbsp;ReactionPredictor\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class ReactionPredictor</h1><br /><br />\n<pre class=\"literalblock\">\nGiven pairs of molecules, try breaking a bond in each, and reattaching\nthem to the other molecule.  Report each possibility with the predicted\nchange in enthalpy based on a respective (FreeEnergy) Score object.    \nThose with larger, negative changes suggest energetically favorable,\nexothermic reactions.\n\nAny bond attached to a &quot;*&quot; atom will be ignored.  This allows &quot;*&quot;\nto represent arbitary &quot;R&quot; groups, and thus allows for the testing\nof functional groups rather than whole molecules.\n\nHigher order bonds (double bonds, triple bonds) are also considered.\nHowever, rather than being completely broken, only &quot;one&quot; of the bonds\nwill be broken and reattached elsewhere which only reduces the bond order.\n\nKnown Limitations:\n(1) Only handles binary (two reactant) reactions\n(2) Only handles simple bond-break, reform reactions.\n    Does not allow for consideration of resonance structure intermediates.\n(3) Only considers predicted bond dissociation energy enthalpy,\n    no entropy terms.\n\n</pre><br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"__init__\"></a><span class=\"summary-sig-name\">__init__</span>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Default constructor.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#predictReactionsStream\" class=\"summary-sig-name\">predictReactionsStream</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">molstreamFactory1</span>,\n        <span class=\"summary-sig-arg\">molstreamFactory2</span>,\n        <span class=\"summary-sig-arg\">productStream</span>)</span><br />\n      Given two input molecule streams factories, try the \n      predictReactions method for every pair of molecules.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#predictReactions\" class=\"summary-sig-name\">predictReactions</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">reactant1</span>,\n        <span class=\"summary-sig-arg\">reactant2</span>)</span><br />\n      Primary method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__generateIntermediates\" class=\"summary-sig-name\">__generateIntermediates</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">composite</span>,\n        <span class=\"summary-sig-arg\">componentIndex</span>)</span><br />\n      Generate a list (actually an iterator over a dynamic list) of \n      intermediate structures by taking the composite molecule and breaking\n      bonds and rearranging electrons in the component specified by the \n      componentIndex.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__assembleIntermediates\" class=\"summary-sig-name\">__assembleIntermediates</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">intermediateComposite</span>)</span><br />\n      Given a composite molecule where the first 2 components have been \n      broken down into some kind of intermediate structure (bonds broken, \n      maybe electrons shifted, with respective + and - formal charge \n      somewhere to account for the broken bond), reassemble the \n      intermediates into a completed composite by matching opposite formal \n      charges in the 1st and 2nd component.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__molBondList\" class=\"summary-sig-name\">__molBondList</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">mol</span>,\n        <span class=\"summary-sig-arg\">componentIndex</span>)</span><br />\n      Return a concrete list of all of the bonds in the molecule where...</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"__atomsByComponentAndCharge\"></a><span class=\"summary-sig-name\">__atomsByComponentAndCharge</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">mol</span>,\n        <span class=\"summary-sig-arg\">componentIndex</span>,\n        <span class=\"summary-sig-arg\">charge</span>)</span><br />\n      Return an iterator over all of atoms in the composite molecule \n      whose componentIndex matches that specified and whose FormalCharge \n      property matches that given.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__getAtomComponentIndexes\" class=\"summary-sig-name\">__getAtomComponentIndexes</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">mol</span>)</span><br />\n      If the attribute is already on this instance, just return it.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== STATIC METHODS ==================== -->\n<a name=\"section-StaticMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Static Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-StaticMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__breakableBond\" class=\"summary-sig-name\">__breakableBond</a>(<span class=\"summary-sig-arg\">bond</span>)</span><br />\n      Decide whether the given bond should be breakable in terms of \n      predicting reactions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__breakBond\" class=\"summary-sig-name\">__breakBond</a>(<span class=\"summary-sig-arg\">bond</span>)</span><br />\n      Represent the bond having broken, at least by one order.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__reassembleBond\" class=\"summary-sig-name\">__reassembleBond</a>(<span class=\"summary-sig-arg\">bond</span>)</span><br />\n      Undo the affects of the __breakBond method.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.CombiCDB.ReactionPredictor.ReactionPredictor-class.html#__shiftElectrons\" class=\"summary-sig-name\">__shiftElectrons</a>(<span class=\"summary-sig-arg\">mol</span>,\n        <span class=\"summary-sig-arg\">startAtom</span>,\n        <span class=\"summary-sig-arg\">visitedAtomIndexes</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Given a starting atom from the molecule, check if it has a \n      negative formal charge.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"predictReactionsStream\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">predictReactionsStream</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">molstreamFactory1</span>,\n        <span class=\"sig-arg\">molstreamFactory2</span>,\n        <span class=\"sig-arg\">productStream</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given two input molecule streams factories, try the predictReactions \n  method for every pair of molecules.  Write the outputs as \n  &quot;reaction&quot; molecules to the molecule output stream.  The \n  &quot;title&quot; of the output molecules will be the change in enthaly \n  predicted for the reaction.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"predictReactions\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">predictReactions</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">reactant1</span>,\n        <span class=\"sig-arg\">reactant2</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Primary method.  Given two molecule objects, return an iterator over \n  composite molecule objects representing predicted reaction products from \n  the 2 molecules.  These will have their energy property set to the \n  predicted change in enthalpy for that reaction, accessible with the \n  GetEnergy method.</p>\n  Note that this actually returns a dynamic iterator over the same \n  molecule object (just modifed atom-bonds and properties).  If you need to\n  modify or otherwise keep multiple instances of the products, make your \n  own copies by using the OEGraphMol copy constructor like copy = \n  OEGraphMol(product);\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__generateIntermediates\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__generateIntermediates</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">composite</span>,\n        <span class=\"sig-arg\">componentIndex</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Generate a list (actually an iterator over a dynamic list) of \n  intermediate structures by taking the composite molecule and breaking \n  bonds and rearranging electrons in the component specified by the \n  componentIndex.</p>\n  <p>The self.__atomComponentIndexes member should be a precomputed list of\n  componentIndexes for each atom in the composite molecule, as returned by \n  the OEDetermineComponents method. If that has not yet been filled in, it \n  will be.</p>\n  In the interests of efficiency, each item returned is actually the \n  same molecule object returned over and over again, just with different \n  atom-bond modifications. This as opposed to generating a copy each time.\n  As a result, it is the callers responsibility to keep or put the molecule\n  back into it's original state before asking for the next item.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__assembleIntermediates\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__assembleIntermediates</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">intermediateComposite</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a composite molecule where the first 2 components have been \n  broken down into some kind of intermediate structure (bonds broken, maybe\n  electrons shifted, with respective + and - formal charge somewhere to \n  account for the broken bond), reassemble the intermediates into a \n  completed composite by matching opposite formal charges in the 1st and \n  2nd component.</p>\n  Return the results as a list of copies.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__molBondList\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__molBondList</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">mol</span>,\n        <span class=\"sig-arg\">componentIndex</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\nReturn a concrete list of all of the bonds in the molecule where...\n\n(1) The bond is considered &quot;breakable&quot; for purposes of reaction simulation\n    as defined in the __breakableBond method\n(2) The bond is a part of the component of the composite molecule\n    indexed by the componentIndex parameter.  self.__atomComponentIndexes\n    should be a precomputed list of componentIndexes for each atom in\n    the composite molecule, as returned by the OEDetermineComponents method.\n\nMust use this concrete list because the algorithm will be creating and \ndeleting bonds, making the use of a dynamic iterator unsafe\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__breakableBond\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__breakableBond</span>(<span class=\"sig-arg\">bond</span>)</span>\n    <br /><em class=\"fname\">Static Method</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Decide whether the given bond should be breakable in terms of \n  predicting reactions.  When breaking higher order bonds (double or \n  greater), we are really only considered breaking one of the bond orders \n  (double down to single, etc.)\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__breakBond\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__breakBond</span>(<span class=\"sig-arg\">bond</span>)</span>\n    <br /><em class=\"fname\">Static Method</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Represent the bond having broken, at least by one order. Do so by \n  decrementing the bond order or delete the given bond altogether from the \n  containing molecule object.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__reassembleBond\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__reassembleBond</span>(<span class=\"sig-arg\">bond</span>)</span>\n    <br /><em class=\"fname\">Static Method</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Undo the affects of the __breakBond method.  Increment the bond order \n  and, if necessary, recreate a new bond instance into the parent \n  molecule.</p>\n  Returns the bond object which may just be the same thing if the order \n  was incremented, but if the bond had to be recreated, the new instance is\n  returned.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__shiftElectrons\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__shiftElectrons</span>(<span class=\"sig-arg\">mol</span>,\n        <span class=\"sig-arg\">startAtom</span>,\n        <span class=\"sig-arg\">visitedAtomIndexes</span>=<span class=\"sig-default\">None</span>)</span>\n    <br /><em class=\"fname\">Static Method</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a starting atom from the molecule, check if it has a negative \n  formal charge. If so, try shifting the negative charge into a new \n  adjacent bond. This should only be applied if the adjacent atom of the \n  increasing bond has a pi orbital system that can accept the electrons.  \n  Basically, the adjacent atom must already have another bond of at least \n  order &gt;= 2.  If so, then shift the electrons to increase the order of \n  the bond to the adjacent atom and decrease the order of the adjacent \n  atom's other double / triple bond to the last opposite atom.</p>\n  <p>e.g. [C-]-C=O will become C=C-[O-]</p>\n  This function will be called recursively for repeated shifts. Uses the\n  visitedAtomIndexes Set to keep track of atoms already visited to avoid \n  backtracking.  For efficiency, will keep yielding modifications of the \n  same molecule object instead of copies.  This requires that the state of \n  the molecule always be brought back to where it was.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__getAtomComponentIndexes\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__getAtomComponentIndexes</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">mol</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  If the attribute is already on this instance, just return it. \n  Otherwise, compute its value from the molecule object first.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:27 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40784.0}