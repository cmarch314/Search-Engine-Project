{"text": " Home Trees Indices Help Package CHEM Package Common Module DBUtil hide private frames no frames Module DBUtil Utilities for accessing application databases Refer to http www python org topics database modules html for more information Note that besides the primary DB interface module you need to setup see the comments in the import sections below many of these also depend on the eGenix mx Extensions BASE package mxDateTime in particular This is available at http www egenix com files python If using different DB API modules this module should be edited in the following places module import statements SQL PLACEHOLDER in Env py file connection method including references to Env constants identityQuery method Functions hide private connection connParams None Return a connection to the application database identityQuery tableName Given a table name return the SQL query that will return the last auto generated primary key value i e execute query parameters None includeColumnNames False incTypeCodes False formatter None conn None Execute a single SQL query command against the database columnNamesFromCursor cursor Given a cursor that was just used to execute a query return the list of column names of the result set typeCodesFromCursor cursor Given a cursor that was just used to execute a query return the list numerical column type codes for the result set runDBScript scriptFile skipErrors False Given a DB script file object caller should handle the opening by filename or other method run each command as a SQL statement delimited by semicolons at the end of a line insertFile sourceFile tableName columnNames None delim None idFile None skipErrors False Insert the contents of a whitespace delimited text file into the database updateFromFile sourceFile tableName columnNames None nIdCols 1 delim None skipErrors False Update the database with the contents of a whitespace delimited text file findOrInsertItem tableName searchDict insertDict None retrieveCol None forceUpdate False conn None Adapted from Jocelyne s handy method to search the named table in database for a row whose attributes match the key value pairs specified in searchDict updateRow tableName rowDict idValue idCol None conn None Adapted from Jocelyne s function defaultIDColumn tableName Given a DB table s name return the default name for the primary key ID column defaultForeignKeyTable foreignKeyName Given the column name of a foreign key in a table assume it is named by convention and return the name of the table that it references buildUpdateQuery tableName colNames idColName None idValue None Given a table and a list of column names under that table including the primary key ID column construct a parameterized SQL update query buildInsertQuery tableName colNames Given a table and a list of column names under that table construct a parameterized SQL insert query parameterizeQueryString query params None Given a SQL query string and tuple of parameters replace all of the SQL PLACEHOLDER strings in the query with the respective representation of the parameters loadTableAsDict tableName Load the contents of the named table into a dictionary main argv Main method callable from command line Function Details hide private connection connParams None Return a connection to the application database Implementation of this method should change depending upon what database is being interfaced to identityQuery tableName Given a table name return the SQL query that will return the last auto generated primary key value i e sequences from that table Abstract this out as the implementation is DB specific execute query parameters None includeColumnNames False incTypeCodes False formatter None conn None Execute a single SQL query command against the database If the description attribute is not None this implies this was a select statement that produced a result set which will be returned by the fetchall method If the description is null then at least return the rowcount affected by the query This may be 1 or None still if it is a non row affecting command e g create drop If includeColumnNames is true and the query yields a result set then one row list will be added to the beginning which contains the names of each column as extracted from the cursor description If incTypeCodes is true and the query yields a result set a row list will be added to the beginning but after column names if those are included as well which contains the numerical type codes of each column as extracted from the cursor description This method is probably not terribly efficient and should only be used for prototype testing and short command line functions For retrieving data to send to stdout or some other stream add the formatter parameter as an instance of a ResultFormatter object to pipe the data through one fetch at a time In that case the full results which are presumably large will NOT be returned by the method If the query object is actually a SQLQuery object then will use the SQLQuery getParams as the params and str SQLQuery as the query string runDBScript scriptFile skipErrors False Given a DB script file object caller should handle the opening by filename or other method run each command as a SQL statement delimited by semicolons at the end of a line If there are any errors running a command in the file and the skipErrors parameter is True then this will continue to run the rest of the script just logging the error message Otherwise if skipErrors is False the exception will be raised out of this method insertFile sourceFile tableName columnNames None delim None idFile None skipErrors False Insert the contents of a whitespace delimited text file into the database Inserts the contents of the sourceFile into the database under the tableName One line is expected in the sourceFile per row in the database with each item delimited by the delim character These items will be inserted under the respective order of the given list of columnNames It is possible for a single parameter text in particular to span multiple lines by enclosing it in double quotes Otherwise a newline is always considered a delimiter If idFile is provided then will try to run SQL from identityQuery method after each insert and write out the contents one per line to the idFile Returns the total number of rows successfully inserted updateFromFile sourceFile tableName columnNames None nIdCols 1 delim None skipErrors False Update the database with the contents of a whitespace delimited text file Updates the contents of the tableName with the data from the sourceFile One line is expected in the sourceFile per row in the database with each item delimited by the delim character specify None for any whitespace These items will be inserted under the respective order of the given list of columnNames If the columnNames parameter is not provided assume the first line of the sourceFile contains the column names To know which rows to update assume the last column listed in columnNames is the ID column to identify rows by In that case the data value there from the sourceFile will not be used to update the row but will instead be used to identify the row to update the rest of the data by If more than one column is necessary to identify a row composite key indicate how many of the last columns in columnNames should be used with nIdCols Note that these key ID values must not be None null The query looks for rows where columnname value and the operator always returns false when the value is null Returns the total number of rows successfully updated findOrInsertItem tableName searchDict insertDict None retrieveCol None forceUpdate False conn None Adapted from Jocelyne s handy method to search the named table in database for a row whose attributes match the key value pairs specified in searchDict If one exists then return the column probably the primary key named by retrieveCol Otherwise insert a row into the table with the data specified in the insertDict key value pairs and try accessing the retrieveCol again presumably the one just inserted If forceUpdate is specified as True then even if the row already exists in the database update the row to match the contents of the insertDict The connection object to the database conn can be specified otherwise it will just default to that returned by the connection method If no insertDict is specified use the searchDict as necessary If no retrieveCol is specified then will attempt to find the default primary key column based on the table name Returns a tuple col isNew where col is the value of the retrieveCol and isNew is a boolean indicating if this came from a new row just inserted or if it was just taken from an existing record updateRow tableName rowDict idValue idCol None conn None Adapted from Jocelyne s function Given a dictionary object RowItemModel representing a row of a database table and identified by the key value s update the database to match the dictionary object idCol is the name of the key column s Will assume a default based on the table name if this not supplied Or supply a list of values if a composite key is used idValue has the value of the key columns used to identify the row we wish to update Again supply a list if a composite key is used defaultForeignKeyTable foreignKeyName Given the column name of a foreign key in a table assume it is named by convention and return the name of the table that it references If the provided name does not appear to be a default conventional foreign key name returns None buildUpdateQuery tableName colNames idColName None idValue None Given a table and a list of column names under that table including the primary key ID column construct a parameterized SQL update query May need to supply sample idValues even though they won t be a part of the query directly If any values are null will have to use a different comparison operator is instead of parameterizeQueryString query params None Given a SQL query string and tuple of parameters replace all of the SQL PLACEHOLDER strings in the query with the respective representation of the parameters For the most part this will just be the string representation of the parameter except in the case of str objects which should be enclosed in quote marks and have all such internal quote marks escaped to This is usually done internally by the DB API modules but this replicates the behavior externally for the purpose of generating query strings Instead of providing the query as a string and a parameter tuple you can instead just provide a SQLQuery object and this will use the string representation of that and the params contents in it loadTableAsDict tableName Load the contents of the named table into a dictionary Data are RowItemModels representing the contents and keys are the respective row item IDs Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 22 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.Common.DBUtil-module.html", "title": "chem.common.dbutil", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.Common.DBUtil</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.Common-module.html\">Package&nbsp;Common</a> ::\n        Module&nbsp;DBUtil\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.Common.DBUtil-module.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== MODULE DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Module DBUtil</h1><br /><br />\n<p>Utilities for accessing application databases. Refer to \n  http://www.python.org/topics/database/modules.html for more \n  information.</p>\n  <p>Note that besides the primary DB interface module you need to setup \n  (see the comments in the import sections below), many of these also \n  depend on the eGenix mx Extensions BASE package. mxDateTime in \n  particular.  This is available at... \n  http://www.egenix.com/files/python/</p>\n  If using different DB-API modules, this module should be edited in the\n  following places...\n  <ul>\n    <li>\n      module import statements\n    </li>\n    <li>\n      SQL_PLACEHOLDER (in Env.py file)\n    </li>\n    <li>\n      connection method (including references to Env constants)\n    </li>\n    <li>\n      identityQuery method\n    </li>\n  </ul><br /><br />\n\n<!-- ==================== FUNCTIONS ==================== -->\n<a name=\"section-Functions\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Functions</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-Functions\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#connection\" class=\"summary-sig-name\">connection</a>(<span class=\"summary-sig-arg\">connParams</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Return a connection to the application database.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#identityQuery\" class=\"summary-sig-name\">identityQuery</a>(<span class=\"summary-sig-arg\">tableName</span>)</span><br />\n      Given a table name, return the SQL query that will return the last\n      auto-generated primary key value (i.e.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#execute\" class=\"summary-sig-name\">execute</a>(<span class=\"summary-sig-arg\">query</span>,\n        <span class=\"summary-sig-arg\">parameters</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">includeColumnNames</span>=<span class=\"summary-sig-default\">False</span>,\n        <span class=\"summary-sig-arg\">incTypeCodes</span>=<span class=\"summary-sig-default\">False</span>,\n        <span class=\"summary-sig-arg\">formatter</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">conn</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Execute a single SQL query / command against the database.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"columnNamesFromCursor\"></a><span class=\"summary-sig-name\">columnNamesFromCursor</span>(<span class=\"summary-sig-arg\">cursor</span>)</span><br />\n      Given a cursor that was just used to execute a query, return the \n      list of column names of the result set.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"typeCodesFromCursor\"></a><span class=\"summary-sig-name\">typeCodesFromCursor</span>(<span class=\"summary-sig-arg\">cursor</span>)</span><br />\n      Given a cursor that was just used to execute a query, return the \n      list numerical column type codes for the result set.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#runDBScript\" class=\"summary-sig-name\">runDBScript</a>(<span class=\"summary-sig-arg\">scriptFile</span>,\n        <span class=\"summary-sig-arg\">skipErrors</span>=<span class=\"summary-sig-default\">False</span>)</span><br />\n      Given a DB script file object (caller should handle the opening by\n      filename or other method), run each command as a SQL statement, \n      delimited by semicolons (;) at the end of a line.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#insertFile\" class=\"summary-sig-name\">insertFile</a>(<span class=\"summary-sig-arg\">sourceFile</span>,\n        <span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">columnNames</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">delim</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">idFile</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">skipErrors</span>=<span class=\"summary-sig-default\">False</span>)</span><br />\n      Insert the contents of a whitespace-delimited text file into the \n      database.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#updateFromFile\" class=\"summary-sig-name\">updateFromFile</a>(<span class=\"summary-sig-arg\">sourceFile</span>,\n        <span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">columnNames</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">nIdCols</span>=<span class=\"summary-sig-default\">1</span>,\n        <span class=\"summary-sig-arg\">delim</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">skipErrors</span>=<span class=\"summary-sig-default\">False</span>)</span><br />\n      Update the database with the contents of a whitespace-delimited \n      text file.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#findOrInsertItem\" class=\"summary-sig-name\">findOrInsertItem</a>(<span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">searchDict</span>,\n        <span class=\"summary-sig-arg\">insertDict</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">retrieveCol</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">forceUpdate</span>=<span class=\"summary-sig-default\">False</span>,\n        <span class=\"summary-sig-arg\">conn</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Adapted from Jocelyne's handy method to search the named table in \n      database for a row whose attributes match the key-value pairs \n      specified in searchDict.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#updateRow\" class=\"summary-sig-name\">updateRow</a>(<span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">rowDict</span>,\n        <span class=\"summary-sig-arg\">idValue</span>,\n        <span class=\"summary-sig-arg\">idCol</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">conn</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Adapted from Jocelyne's function.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"defaultIDColumn\"></a><span class=\"summary-sig-name\">defaultIDColumn</span>(<span class=\"summary-sig-arg\">tableName</span>)</span><br />\n      Given a DB table's name, return the default name for the primary \n      key ID column.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#defaultForeignKeyTable\" class=\"summary-sig-name\">defaultForeignKeyTable</a>(<span class=\"summary-sig-arg\">foreignKeyName</span>)</span><br />\n      Given the column name of a foreign key in a table, assume it is \n      named by convention and return the name of the table that it \n      references.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#buildUpdateQuery\" class=\"summary-sig-name\">buildUpdateQuery</a>(<span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">colNames</span>,\n        <span class=\"summary-sig-arg\">idColName</span>=<span class=\"summary-sig-default\">None</span>,\n        <span class=\"summary-sig-arg\">idValue</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Given a table and a list of column names under that table, \n      including the primary key ID column, construct a parameterized SQL \n      update query.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"buildInsertQuery\"></a><span class=\"summary-sig-name\">buildInsertQuery</span>(<span class=\"summary-sig-arg\">tableName</span>,\n        <span class=\"summary-sig-arg\">colNames</span>)</span><br />\n      Given a table and a list of column names under that table, \n      construct a parameterized SQL insert query</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#parameterizeQueryString\" class=\"summary-sig-name\">parameterizeQueryString</a>(<span class=\"summary-sig-arg\">query</span>,\n        <span class=\"summary-sig-arg\">params</span>=<span class=\"summary-sig-default\">None</span>)</span><br />\n      Given a SQL query string and tuple of parameters, replace all of \n      the SQL_PLACEHOLDER strings in the query with the respective \n      representation of the parameters.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.Common.DBUtil-module.html#loadTableAsDict\" class=\"summary-sig-name\">loadTableAsDict</a>(<span class=\"summary-sig-arg\">tableName</span>)</span><br />\n      Load the contents of the named table into a dictionary.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"main\"></a><span class=\"summary-sig-name\">main</span>(<span class=\"summary-sig-arg\">argv</span>)</span><br />\n      Main method, callable from command line</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== FUNCTION DETAILS ==================== -->\n<a name=\"section-FunctionDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Function Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-FunctionDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"connection\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">connection</span>(<span class=\"sig-arg\">connParams</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Return a connection to the application database. Implementation of \n  this method should change depending upon what database is being \n  interfaced to.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"identityQuery\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">identityQuery</span>(<span class=\"sig-arg\">tableName</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given a table name, return the SQL query that will return the last \n  auto-generated primary key value (i.e. sequences) from that table. \n  Abstract this out as the implementation is DB specific.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"execute\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">execute</span>(<span class=\"sig-arg\">query</span>,\n        <span class=\"sig-arg\">parameters</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">includeColumnNames</span>=<span class=\"sig-default\">False</span>,\n        <span class=\"sig-arg\">incTypeCodes</span>=<span class=\"sig-default\">False</span>,\n        <span class=\"sig-arg\">formatter</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">conn</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Execute a single SQL query / command against the database. If the \n  description attribute is not None, this implies this was a select \n  statement that produced a result set which will be returned by the \n  fetchall() method.</p>\n  <p>If the description is null, then at least return the rowcount affected\n  by the query.  This may be -1 or None still if it is a non-row affecting \n  command (e.g. create / drop).</p>\n  <p>If includeColumnNames is true and the query yields a result set, then \n  one row (list) will be added to the beginning which contains the names of\n  each column as extracted from the cursor.description.</p>\n  <p>If incTypeCodes is true and the query yields a result set, a row \n  (list) will be added to the beginning (but after column names if those \n  are included as well), which contains the numerical type codes of each \n  column as extracted from the cursor.description.</p>\n  <p>This method is probably not terribly efficient and should only be used\n  for prototype testing and short command line functions. For retrieving \n  data to send to stdout or some other stream, add the formatter parameter \n  as an instance of a ResultFormatter object to pipe the data through one \n  fetch at a time.  In that case, the full results (which are presumably \n  large) will NOT be returned by the method.</p>\n  If the query object is actually a SQLQuery object, then will use the \n  SQLQuery.getParams() as the params, and str(SQLQuery) as the query \n  string.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"runDBScript\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">runDBScript</span>(<span class=\"sig-arg\">scriptFile</span>,\n        <span class=\"sig-arg\">skipErrors</span>=<span class=\"sig-default\">False</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a DB script file object (caller should handle the opening by \n  filename or other method), run each command as a SQL statement, delimited\n  by semicolons (;) at the end of a line.</p>\n  If there are any errors running a command in the file and the \n  skipErrors parameter is True, then this will continue to run the rest of \n  the script, just logging the error message. Otherwise, if skipErrors is \n  False, the exception will be raised out of this method.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"insertFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">insertFile</span>(<span class=\"sig-arg\">sourceFile</span>,\n        <span class=\"sig-arg\">tableName</span>,\n        <span class=\"sig-arg\">columnNames</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">delim</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">idFile</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">skipErrors</span>=<span class=\"sig-default\">False</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Insert the contents of a whitespace-delimited text file into the \n  database.</p>\n  <p>Inserts the contents of the &lt;sourceFile&gt; into the database under\n  the &lt;tableName&gt;.  One line is expected in the &lt;sourceFile&gt; \n  per row in the database, with each item delimited by the &lt;delim&gt; \n  character.  These items will be inserted under the respective order of \n  the given list of columnNames.</p>\n  <p>It is possible for a single parameter (text in particular) to span \n  multiple lines by enclosing it in double-quotes (&quot;).  Otherwise, a \n  newline is always considered a delimiter.</p>\n  <p>If idFile is provided, then will try to run SQL from identityQuery \n  method after each insert, and write out the contents, one per line to the\n  idFile.</p>\n  Returns the total number of rows successfully inserted.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"updateFromFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">updateFromFile</span>(<span class=\"sig-arg\">sourceFile</span>,\n        <span class=\"sig-arg\">tableName</span>,\n        <span class=\"sig-arg\">columnNames</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">nIdCols</span>=<span class=\"sig-default\">1</span>,\n        <span class=\"sig-arg\">delim</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">skipErrors</span>=<span class=\"sig-default\">False</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Update the database with the contents of a whitespace-delimited text \n  file.</p>\n  <p>Updates the contents of the &lt;tableName&gt; with the data from the \n  &lt;sourceFile&gt;. One line is expected in the &lt;sourceFile&gt; per \n  row in the database, with each item delimited by the &lt;delim&gt; \n  character (specify None for any whitespace). These items will be inserted\n  under the respective order of the given list of &lt;columnNames&gt;.  If \n  the columnNames parameter is not provided, assume the first line of the \n  &lt;sourceFile&gt; contains the column names.</p>\n  <p>To know which rows to update, assume the last column listed in \n  &lt;columnNames&gt; is the ID column to identify rows by.  In that case, \n  the data value there from the &lt;sourceFile&gt; will not be used to \n  update the row, but will instead be used to identify the row to update \n  the rest of the data by.  If more than one column is necessary to \n  identify a row (composite key), indicate how many of the last columns in \n  &lt;columnNames&gt; should be used with &lt;nIdCols&gt;.  Note that these\n  key ID values must not be None / null.  The query looks for rows where \n  columnname = value, and the = operator always returns false when the \n  value is null.</p>\n  Returns the total number of rows successfully updated.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"findOrInsertItem\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">findOrInsertItem</span>(<span class=\"sig-arg\">tableName</span>,\n        <span class=\"sig-arg\">searchDict</span>,\n        <span class=\"sig-arg\">insertDict</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">retrieveCol</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">forceUpdate</span>=<span class=\"sig-default\">False</span>,\n        <span class=\"sig-arg\">conn</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Adapted from Jocelyne's handy method to search the named table in \n  database for a row whose attributes match the key-value pairs specified \n  in searchDict.</p>\n  <p>If one exists, then return the column (probably the primary key) named\n  by retrieveCol. Otherwise, insert a row into the table with the data \n  specified in the insertDict key-value pairs and try accessing the \n  retrieveCol again (presumably the one just inserted).</p>\n  <p>If forceUpdate is specified as True, then, even if the row already \n  exists in the database, update the row to match the contents of the \n  insertDict.</p>\n  <p>The connection object to the database (conn) can be specified, \n  otherwise it will just default to that returned by the connection() \n  method.  If no insertDict is specified, use the searchDict as necessary.\n  If no retrieveCol is specified, then will attempt to find the default \n  primary key column based on the table name.</p>\n  Returns a tuple (col, isNew) where col is the value of the retrieveCol\n  and isNew is a boolean indicating if this came from a new row just \n  inserted or if it was just taken from an existing record.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"updateRow\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">updateRow</span>(<span class=\"sig-arg\">tableName</span>,\n        <span class=\"sig-arg\">rowDict</span>,\n        <span class=\"sig-arg\">idValue</span>,\n        <span class=\"sig-arg\">idCol</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">conn</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\nAdapted from Jocelyne's function.  Given a dictionary object (RowItemModel)\nrepresenting a row of a database table, and identified by the key value(s),\nupdate the database to match the dictionary object.\n\nidCol is the name of the key column(s).  Will assume a default based on the \n    table name if this not supplied.  Or, supply a list of values if a composite key is used.\nidValue has the value of the key columns used to identify the row we wish to update.  \n    Again, supply a list if a composite key is used.\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"defaultForeignKeyTable\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">defaultForeignKeyTable</span>(<span class=\"sig-arg\">foreignKeyName</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given the column name of a foreign key in a table, assume it is named \n  by convention and return the name of the table that it references.  If \n  the provided name does not appear to be a default / conventional foreign \n  key name, returns None.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"buildUpdateQuery\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">buildUpdateQuery</span>(<span class=\"sig-arg\">tableName</span>,\n        <span class=\"sig-arg\">colNames</span>,\n        <span class=\"sig-arg\">idColName</span>=<span class=\"sig-default\">None</span>,\n        <span class=\"sig-arg\">idValue</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a table and a list of column names under that table, including \n  the primary key ID column, construct a parameterized SQL update \n  query.</p>\n  May need to supply sample idValues even though they won't be a part of\n  the query directly. If any values are null, will have to use a different \n  comparison operator ('is' instead of '=').\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"parameterizeQueryString\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">parameterizeQueryString</span>(<span class=\"sig-arg\">query</span>,\n        <span class=\"sig-arg\">params</span>=<span class=\"sig-default\">None</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Given a SQL query string and tuple of parameters, replace all of the \n  SQL_PLACEHOLDER strings in the query with the respective representation \n  of the parameters. For the most part, this will just be the string \n  representation of the parameter except in the case of str objects which \n  should be enclosed in ' quote marks, and have all such internal quote \n  marks &quot;escaped&quot; to '</p>\n  <p>This is usually done internally by the DB-API modules, but this \n  replicates the behavior externally for the purpose of generating query \n  strings.</p>\n  Instead of providing the query as a string and a parameter tuple, you \n  can instead just provide a SQLQuery object and this will use the string \n  representation of that, and the params contents in it.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"loadTableAsDict\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">loadTableAsDict</span>(<span class=\"sig-arg\">tableName</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Load the contents of the named table into a dictionary.  Data are \n  RowItemModels representing the contents and keys are the respective row \n  item IDs.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:22 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40853.0}