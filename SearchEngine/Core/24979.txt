{"text": "Test of Closest Pair Data Structures Greedy Matching with Random Distances Brute ForceNeighborsQuadtreeConga LineMultiCongaFastPairn 25 2 73s 16s 19s 25s 12s 12s5 21 76s 65s 9 s1 29s 5 s 46s1 173 91s2 64s4 18s6 2 s2 3s1 89s2 14 2 6 s1 8 s 28 94s8 45s7 72s4 44 43s 167 86s34 87s31 97s8 179 94s 598 28s142 23s131 21s16 762 8 s 2818 9s6 74s556 67s32 313 31s 2485 36s2223 75s Greedy matching was performed on distance matrices constructed at random Distances were computed on the fly by using indices as seeds to a random number generator so the matrix did not need to be stored in core Times are averages over ten runs The quadtree data structure was only run on data sets of 1 or fewer points due to its high storage requirements Code was written in C compiled and optimized by Metrowerks Codewarrior 1 and run on a 2 MHz PowerPC 6 3e processor Apple Powerbook 34 c ", "_id": "http://www.ics.uci.edu/~eppstein/projects/pairs/Data/gr/", "title": "greedy matching with random distances", "html": "<HTML>\n<HEAD>\n<TITLE>Greedy Matching with Random Distances</TITLE>\n</HEAD>\n\n<BODY>\n<H1><A HREF=\"../\">Test of Closest Pair Data Structures</A></H1>\n<H2>Greedy Matching with Random Distances</H2>\n\n<TABLE BORDER=1>\n<TR ALIGN=RIGHT><TD></TD>\n    <TD>Brute&nbsp;Force</TD>\n    <TD>Neighbors</TD>\n    <TD>Quadtree</TD>\n    <TD>Conga&nbsp;Line</TD>\n    <TD>MultiConga</TD>\n    <TD>FastPair</TD></TR>\n<TR ALIGN=RIGHT><TD><I>n</I>&nbsp;=&nbsp;250</TD>\n    <TD><A HREF=\"b250\">2.73s</A></TD>\n    <TD><A HREF=\"n250\">0.16s</A></TD>\n    <TD><A HREF=\"q250\">0.19s</A></TD>\n    <TD><A HREF=\"c250\">0.25s</A></TD>\n    <TD><A HREF=\"m250\">0.12s</A></TD>\n    <TD><A HREF=\"f250\"><B>0.12s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>500</TD>\n    <TD><A HREF=\"b500\">21.76s</A></TD>\n    <TD><A HREF=\"n500\">0.65s</A></TD>\n    <TD><A HREF=\"q500\">0.90s</A></TD>\n    <TD><A HREF=\"c500\">1.29s</A></TD>\n    <TD><A HREF=\"m500\">0.50s</A></TD>\n    <TD><A HREF=\"f500\"><B>0.46s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>1000</TD>\n    <TD><A HREF=\"b1000\">173.91s</A></TD>\n    <TD><A HREF=\"n1000\">2.64s</A></TD>\n    <TD><A HREF=\"q1000\">4.18s</A></TD>\n    <TD><A HREF=\"c1000\">6.20s</A></TD>\n    <TD><A HREF=\"m1000\">2.03s</A></TD>\n    <TD><A HREF=\"f1000\"><B>1.89s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>2000</TD>\n    <TD><A HREF=\"b2000\">1402.60s</A></TD>\n    <TD><A HREF=\"n2000\">10.80s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c2000\">28.94s</A></TD>\n    <TD><A HREF=\"m2000\">8.45s</A></TD>\n    <TD><A HREF=\"f2000\"><B>7.72s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>4000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n4000\">44.43s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c4000\">167.86s</A></TD>\n    <TD><A HREF=\"m4000\">34.87s</A></TD>\n    <TD><A HREF=\"f4000\"><B>31.97s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>8000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n8000\">179.94s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c8000\">598.28s</A></TD>\n    <TD><A HREF=\"m8000\">142.23s</A></TD>\n    <TD><A HREF=\"f8000\"><B>131.21s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>16000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n16000\">762.80s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c16000\">2818.09s</A></TD>\n    <TD><A HREF=\"m16000\">600.74s</A></TD>\n    <TD><A HREF=\"f16000\"><B>556.67s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>32000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n32000\">3130.31s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"m32000\">2485.36s</A></TD>\n    <TD><A HREF=\"f32000\"><B>2223.75s</B></A></TD></TR>\n</TABLE>\n\n<P>Greedy matching was performed on distance matrices constructed at random.\nDistances were computed on the fly by using indices as seeds to a random \nnumber generator, so the matrix did not need to be stored in core.  Times \nare averages over ten runs.  The quadtree data structure was only run on \ndata sets of 1000 or fewer points due to its high storage requirements.  \nCode was written in C++, compiled and optimized by Metrowerks Codewarrior \n10, and run on a 200MHz PowerPC 603e processor (Apple Powerbook 3400c).\n\n</BODY>\n</HTML>", "id": 24979.0}