{"text": " Home Trees Indices Help Package CHEM Package ML Package Similarity Module BaseSimilarity Class BaseSimilarity hide private frames no frames Class BaseSimilarity Abstract base class for all similarity measure classes Similarity classes should take pairs of objects and calculate some similarity score between them for use in a support vector machine SVM style machine learning application Though this should be generalizable to any input object type as a genuine kernel function current practical purposes expect that data objects will have run through one of the kernel classes to be mapped into a feature vector More specifically they will have extracted features into a feature dictionary representing the sparse feature vector Once those are ready these similarity classes can then apply any of a variety of similarity measures to the dictionaries Ultimately the scores generated from these kernels will probably be used to build a Gram matrix of scores This abstract class provides a convenience methods for generating this matrix given a iterators over two lists to compare outputting the matrix as a tab delimited file Instance Methods hide private init self Default constructor loadOptions self options Given an options object derived from an optparse OptionParser load any options of interest into the state of this object loadArgs self args Similar to loadOptions handle the args that come out of optparse OptionParser main self argv Main method callable from command line call self obj1 obj2 Primary abstract method where given two objects should return an appropriate non negative similarity score between the two outputMatrix self inputIterFactory1 inputIterFactory2 outFile Utility method to calculate a similarity for every pair of objects that come out of the input iterator factories and output them to the outFile as a tab delimited matrix of values Class Variables hide private parser CHEM DB rdb search NameRxnPatternMatchingModel Searc inputIterFactory1 CHEM DB rdb search NameRxnPatternMatching inputIterFactory2 CHEM DB rdb search NameRxnPatternMatching outFile CHEM DB rdb search NameRxnPatternMatchingModel Sear Method Details hide private init self Constructor Default constructor Sets up expected command line options Sub classes can add their own options on top of these though should beware of overwriting an option letter loadOptions self options Given an options object derived from an optparse OptionParser load any options of interest into the state of this object Sub classes should have this handle any of the options it added to the command line parser via the constructor loadArgs self args Similar to loadOptions handle the args that come out of optparse OptionParser Subclass is responsible for translating the command line arguments into actual input iterators and an output file object Note that more than simple streaming file iterators are needed Iterator factories are needed so that fresh iterators over the same data can be accessed multiple times A default implementation is available here assuming the arguments should be interpreted as names of feature dictionary files parseable by FeatureDictReader If this is not the case the sub class should override this method For example using something like an oemolistream or simple file This implementation automatically takes into consideration the likely scenario that both input iterators will be over the same source file and can even accomodate both being the stdin character main self argv Main method callable from command line Setup several common options that all of the sub classes will share call self obj1 obj2 Call operator Primary abstract method where given two objects should return an appropriate non negative similarity score between the two Up to the implementing class to define what this is This uses the callable interface which means the object should be used like a function call For example from DotProduct import DotProduct similarity DotProduct featureDict1 a 1 b 2 c 3 featureDict2 z 3 b 2 c 1 print similarity featureDict1 featureDict2 Note that the object looks like a function call 7 outputMatrix self inputIterFactory1 inputIterFactory2 outFile Utility method to calculate a similarity for every pair of objects that come out of the input iterator factories and output them to the outFile as a tab delimited matrix of values Output will have n rows corresponding to the 1st input iterator and m columns corresponding to the 2nd input iterator Class Variable Details hide private parser Value None inputIterFactory1 Value None inputIterFactory2 Value None outFile Value None Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 31 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html", "title": "chem.ml.similarity.basesimilarity.basesimilarity", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.ML-module.html\">Package&nbsp;ML</a> ::\n        <a href=\"CHEM.ML.Similarity-module.html\">Package&nbsp;Similarity</a> ::\n        <a href=\"CHEM.ML.Similarity.BaseSimilarity-module.html\">Module&nbsp;BaseSimilarity</a> ::\n        Class&nbsp;BaseSimilarity\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Class BaseSimilarity</h1><br /><br />\n<p>Abstract base class for all similarity measure classes. Similarity \n  classes should take pairs of objects and calculate some similarity score \n  between them for use in a support vector machine (SVM) style \n  machine-learning application.</p>\n  <p>Though this should be generalizable to any input object type as a \n  genuine kernel function, current practical purposes expect that data \n  objects will have run through one of the &quot;kernel&quot; classes to be\n  mapped into a feature vector. More specifically, they will have extracted\n  features into a feature dictionary, representing the sparse feature \n  vector. Once those are ready, these similarity classes can then apply any\n  of a variety of similarity measures to the dictionaries.</p>\n  Ultimately, the scores generated from these kernels will probably be \n  used to build a &quot;Gram matrix&quot; of scores. This abstract class \n  provides a convenience methods for generating this matrix given a \n  iterators over two lists to compare, outputting the matrix as a \n  tab-delimited file.<br /><br />\n\n<!-- ==================== INSTANCE METHODS ==================== -->\n<a name=\"section-InstanceMethods\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Instance Methods</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-InstanceMethods\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#__init__\" class=\"summary-sig-name\">__init__</a>(<span class=\"summary-sig-arg\">self</span>)</span><br />\n      Default constructor.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#loadOptions\" class=\"summary-sig-name\">loadOptions</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">options</span>)</span><br />\n      Given an options object derived from an optparse.OptionParser, \n      load any options of interest into the state of this object.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#loadArgs\" class=\"summary-sig-name\">loadArgs</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">args</span>)</span><br />\n      Similar to loadOptions, handle the args that come out of \n      optparse.OptionParser.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#main\" class=\"summary-sig-name\">main</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">argv</span>)</span><br />\n      Main method, callable from command line.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#__call__\" class=\"summary-sig-name\">__call__</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">obj1</span>,\n        <span class=\"summary-sig-arg\">obj2</span>)</span><br />\n      Primary abstract method where, given two objects, should return an\n      appropriate, non-negative, similarity score between the two.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#outputMatrix\" class=\"summary-sig-name\">outputMatrix</a>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">inputIterFactory1</span>,\n        <span class=\"summary-sig-arg\">inputIterFactory2</span>,\n        <span class=\"summary-sig-arg\">outFile</span>)</span><br />\n      Utility method to calculate a similarity for every pair of objects\n      that come out of the input iterator factories and output them to the \n      outFile as a tab-delimited matrix of values.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== CLASS VARIABLES ==================== -->\n<a name=\"section-ClassVariables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#parser\" class=\"summary-name\">parser</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Searc<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#inputIterFactory1\" class=\"summary-name\">inputIterFactory1</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatching<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#inputIterFactory2\" class=\"summary-name\">inputIterFactory2</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatching<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.ML.Similarity.BaseSimilarity.BaseSimilarity-class.html#outFile\" class=\"summary-name\">outFile</a> = <code title=\"None\">&lt;CHEM.DB.rdb.search.NameRxnPatternMatchingModel.Sear<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== METHOD DETAILS ==================== -->\n<a name=\"section-MethodDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Method Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-MethodDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"__init__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__init__</span>(<span class=\"sig-arg\">self</span>)</span>\n    <br /><em class=\"fname\">(Constructor)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Default constructor.  Sets up expected command-line options. \n  Sub-classes can add their own options on top of these, though should \n  beware of overwriting an option letter.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"loadOptions\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">loadOptions</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">options</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Given an options object derived from an optparse.OptionParser, load \n  any options of interest into the state of this object.  Sub-classes \n  should have this handle any of the options it added to the command-line \n  parser via the constructor.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"loadArgs\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">loadArgs</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Similar to loadOptions, handle the args that come out of \n  optparse.OptionParser. Subclass is responsible for translating the \n  command-line arguments into actual input iterators and an output file \n  object.</p>\n  <p>Note that more than simple streaming file iterators are needed. \n  Iterator &quot;factories&quot; are needed so that fresh iterators over \n  the same data can be accessed multiple times.</p>\n  <p>A default implementation is available here, assuming the arguments \n  should be interpreted as names of feature dictionary files, parseable by \n  FeatureDictReader.  If this is not the case, the sub-class should \n  override this method. For example using something like an oemolistream or\n  simple file.</p>\n  This implementation automatically takes into consideration the likely \n  scenario that both input iterators will be over the same source file, and\n  can even accomodate both being the &quot;-&quot; stdin character.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"main\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">main</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">argv</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  Main method, callable from command line. Setup several common options \n  that all of the sub-classes will share.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"__call__\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">__call__</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">obj1</span>,\n        <span class=\"sig-arg\">obj2</span>)</span>\n    <br /><em class=\"fname\">(Call operator)</em>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Primary abstract method where, given two objects, should return an \n  appropriate, non-negative, similarity score between the two.  Up to the \n  implementing class to define what this is.</p>\n  This uses the &quot;callable&quot; interface, which means the object \n  should be used like a function call.  For example: &gt;&gt;&gt; from \n  DotProduct import DotProduct; &gt;&gt;&gt; similarity = DotProduct(); \n  &gt;&gt;&gt; featureDict1 = \n  {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3} &gt;&gt;&gt; \n  featureDict2 = {&quot;z&quot;:3,&quot;b&quot;:2,&quot;c&quot;:1} \n  &gt;&gt;&gt; print similarity( featureDict1, featureDict2 );     # Note \n  that the object looks like a function call 7\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"outputMatrix\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">outputMatrix</span>(<span class=\"sig-arg\">self</span>,\n        <span class=\"sig-arg\">inputIterFactory1</span>,\n        <span class=\"sig-arg\">inputIterFactory2</span>,\n        <span class=\"sig-arg\">outFile</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>Utility method to calculate a similarity for every pair of objects \n  that come out of the input iterator factories and output them to the \n  outFile as a tab-delimited matrix of values.</p>\n  Output will have n rows corresponding to the 1st input iterator and m \n  columns corresponding to the 2nd input iterator.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== CLASS VARIABLE DETAILS ==================== -->\n<a name=\"section-ClassVariableDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Class Variable Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-ClassVariableDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"parser\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">parser</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"inputIterFactory1\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">inputIterFactory1</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"inputIterFactory2\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">inputIterFactory2</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"outFile\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">outFile</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\nNone\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:31 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40248.0}