{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL regular neighbor coordinates 2 Definition The function regular neighbor coordinates 2 computes natural neighbor coordinates also called Sibson s coordinates for weighted 2D points provided a two dimensional regular triangulation and a weighted query point inside the convex hull of the vertices of the triangulation We call these coordinates regular neighbor coordinates include CGAL regular neighbor coordinates 2 h template class Rt class OutputIterator CGAL Triple OutputIterator typename Rt Geom traits FT bool regular neighbor coordinates 2 Rt rt typename Rt Weighted point p OutputIterator out typename Rt Face handle start typename Rt Face handle computes the regular neighbor coordinates for p with respect to the weighted points in the two dimensional regular triangulation rt The template class Rt should be of type Regular triangulation 2 Traits Tds The value type of the OutputIterator is a pair of Rt Weighted point and the coordinate value of type Rt Geom traits FT The sequence of point coordinate pairs that is computed by the function is placed starting at out The function returns a triple with an iterator that is placed past the end of the resulting sequence of point coordinate pairs the normalization factor of the coordinates and a boolean value which is set to true iff the coordinate computation was successful i e if p lies inside the convex hull of the points in rt template class Rt class OutputIterator class EdgeIterator class VertexIterator CGAL Triple OutputIterator typename Traits FT bool regular neighbor coordinates 2 Rt rt typename Traits Weighted point p OutputIterator out EdgeIterator hole begin EdgeIterator hole end VertexIterator hidden vertices begin VertexIterator hidden vertices end The same as above hole begin and hole end determines the iterator range over the boundary edges of the conflict zone of p in the triangulation rt hidden vertices begin and hidden vertices end determines the iterator range over the hidden vertices of the conflict zone of p inrt It is the result of the function T get boundary of conflicts p std back inserter hole std back inserter hidden vertices start see Regular triangulation 2 Traits Tds template class Rt class OutputIterator CGAL Triple OutputIterator typename Rt Geom traits FT bool regular neighbor coordinates 2 Rt rt typename Rt Vertex handle vh OutputIterator out This function computes the regular neighbor coordinates of the point vh point with respect to the vertices of rt excluding vh point The same as above for the remaining parameters Requirements Rt are equivalent to the class Regular triangulation 2 Traits Tds The traits class Traits of Rt is a model of the concept RegularTriangulationTraits 2 It provides the number type FT which is a model for FieldNumberType and it must meet the requirements for the traits class of the polygon area 2 function A model of this traits class is Regular triangulation euclidean traits 2 K Weight OutputIterator value type is equivalent to std pair Rt Weighted point Rt Geom traits FT i e a pair associating a point and its regular neighbor coordinate ImplementationThis function computes the areas stolen from the Voronoi cells of points in rt by the insertion of p The total area of the Voronoi cell of p is also computed and returned by the function If p lies outside the convex hull the coordinate values cannot be computed and the third value of the result triple is set to false See AlsoCGAL natural neighbor coordinates 2 Next sibson gradient fitting Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Interpolation_ref/Function_regular_neighbor_coordinates_2.html", "title": "regular_neighbor_coordinates_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Interpolation_ref/regular_neighbor_coordinates_2.tex' -->\n<html> <head>  \n<title>regular_neighbor_coordinates_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1125\"></A>\n\n<A NAME=\"Cross_link_anchor_1126\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1020\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::regular_neighbor_coordinates_2\"></A>\n<h2><I>CGAL::regular_neighbor_coordinates_2</I></h2>\n\n     \n     \n     \n<A NAME=\"Index_anchor_1021\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe function <I><A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A></I> computes natural neighbor coordinates, also\ncalled Sibson's coordinates, for weighted <MATH><I>2D</I></MATH> points provided a\ntwo-dimensional regular triangulation and a (weighted) query point\ninside the convex hull of the vertices of the triangulation. We call these \ncoordinates regular neighbor coordinates.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/regular_neighbor_coordinates_2.h\">CGAL/regular_neighbor_coordinates_2.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Rt, class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Rt::Geom_traits::FT+_bool_9_regular_neighbor_coordinates_26const_Rt__rt+_const_typename_Rt::Weighted_point__p+_OutputIterator_out+_typename_Rt::Face_handle_start_=_typename_Rt::Face_handle699;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename Rt::Geom_traits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Rt rt,<BR>\n\ntypename Rt::<A HREF=\"../Triangulation_2_ref/Class_Weighted_point.html#Cross_link_anchor_959\">Weighted_point</A> p,<BR>\n\nOutputIterator out,<BR>\n\ntypename Rt::Face_handle start = typename Rt::Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes the regular neighbor coordinates for <I>p</I> with respect\n  to the weighted points in the two-dimensional regular triangulation\n  <I>rt</I>.  The template class <I>Rt</I> should be of type\n  <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_927\">Regular_triangulation_2</A>&lt;Traits, Tds&gt;</I>.  The value type of the\n  <I>OutputIterator</I> is a pair of <I>Rt::<A HREF=\"../Triangulation_2_ref/Class_Weighted_point.html#Cross_link_anchor_959\">Weighted_point</A></I> and the\n  coordinate value of type <I>Rt::Geom_traits::FT</I>. The sequence of\n  point/coordinate pairs that is computed by the function is placed\n  starting at <I>out</I>. The function returns a triple with an\n  iterator that is placed past-the-end of the resulting sequence of\n  point/coordinate pairs, the normalization factor of the coordinates\n  and a boolean value which is set to true iff the coordinate\n  computation was successful, i.e. if <I>p</I> lies inside the\n  convex hull of the points in <I>rt</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class Rt, class OutputIterator, class EdgeIterator, class VertexIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Traits::FT+_bool_9_regular_neighbor_coordinates_26const_Rt__rt+_const_typename_Traits::Weighted_point__p+_OutputIterator_out+_EdgeIterator_hole_begin+_EdgeIterator_hole_end+_VertexIterator_hidden_vertices_begin+_VertexIterator_hidden_vertices_end9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename Traits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Rt rt,<BR>\n\ntypename Traits::<A HREF=\"../Triangulation_2_ref/Class_Weighted_point.html#Cross_link_anchor_959\">Weighted_point</A> p,<BR>\n\nOutputIterator out,<BR>\n\nEdgeIterator hole_begin,<BR>\n\nEdgeIterator hole_end,<BR>\n\nVertexIterator hidden_vertices_begin,<BR>\n\nVertexIterator hidden_vertices_end)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above.  <I>hole_begin</I> and\n  <I>hole_end</I> determines the iterator range over the boundary edges\n  of the conflict zone of <I>p</I> in the triangulation <I>rt</I>.\n  <I>hidden_vertices_begin</I> and <I>hidden_vertices_end</I> determines\n  the iterator range over the hidden vertices of the conflict zone of\n  <I>p</I> in<I>rt</I>. It is the result of the function\n  <I>T.get_boundary_of_conflicts(p,std::back_inserter(hole),     std::back_inserter(hidden_vertices),     start)</I>, see <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_927\">Regular_triangulation_2</A>&lt;Traits, Tds&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class Rt, class OutputIterator&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_CGAL::Triple6_OutputIterator+_typename_Rt::Geom_traits::FT+_bool_9_regular_neighbor_coordinates_26const_Rt__rt+_typename_Rt::Vertex_handle_vh+_OutputIterator_out9;\"></A>\n<A HREF=\"../STL_Extension_ref/Class_Triple.html#Cross_link_anchor_1583\">CGAL::Triple</A>&lt; OutputIterator, typename Rt::Geom_traits::FT, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_regular_neighbor_coordinates_2.html#Cross_link_anchor_1126\">regular_neighbor_coordinates_2</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Rt rt,<BR>\n\ntypename Rt::Vertex_handle vh,<BR>\n\nOutputIterator out)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    This function computes\n  the regular neighbor coordinates of the point <I>vh-&gt;point()</I> with respect to\n  the vertices of <I>rt</I> excluding <I>vh-&gt;point()</I>. The same as above for the\n  remaining parameters.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<OL>\n<LI><I>Rt</I> are equivalent to the class\n  <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_2.html#Cross_link_anchor_927\">Regular_triangulation_2</A>&lt;Traits, Tds&gt;</I>.\n<LI>The traits class <I>Traits</I> of <I>Rt</I> is a model of the\n  concept <I><A HREF=\"../Triangulation_2_ref/Concept_RegularTriangulationTraits_2.html#Cross_link_anchor_924\">RegularTriangulationTraits_2</A></I>. It provides the number\n  type <I>FT</I> which is a model for <I><A HREF=\"../Kernel_23_ref/Concept_FieldNumberType.html#Cross_link_anchor_2\">FieldNumberType</A></I> and it must\n  meet the requirements for the traits class of the\n  <I><A HREF=\"../Polygon_ref/Function_polygon_area_2.html#Cross_link_anchor_674\">polygon_area_2</A></I> function. A model of this traits class is\n  <I><A HREF=\"../Triangulation_2_ref/Class_Regular_triangulation_euclidean_traits_2.html#Cross_link_anchor_929\">Regular_triangulation_euclidean_traits_2</A>&lt;K, Weight&gt;</I>.\n<LI><I>OutputIterator::value_type</I> is equivalent to\n  <I>std::pair&lt;Rt::<A HREF=\"../Triangulation_2_ref/Class_Weighted_point.html#Cross_link_anchor_959\">Weighted_point</A>, Rt::Geom_traits::FT&gt;</I>, i.e. a pair\n  associating a point and its regular neighbor coordinate.\n</OL>\n<P>\n\n<H3>Implementation</H3>This function computes the areas stolen from the\nVoronoi cells of points in <I>rt</I> by the insertion of <I>p</I>. The\ntotal <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A> of the Voronoi cell of <I>p</I> is also computed and\nreturned by the function. If <I>p</I> lies outside the convex hull, the\ncoordinate values cannot be computed and the third value of the result\ntriple is set to <I>false</I>.\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Function_natural_neighbor_coordinates_2.html#Cross_link_anchor_1123\">CGAL::natural_neighbor_coordinates_2</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Function_sibson_gradient_fitting.html\"><I>sibson_gradient_fitting</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_50!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38708.0}