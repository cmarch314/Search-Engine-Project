{"text": "HW3 Seam Carving for Image Retargeting Due Nov 6 in EEE DropBox at 11 59 pm Seam Carving for Image Retargeting An image of a tree Vertical seam removal time map for the image of a tree Black early white late Animation of uniform scaling top row and seam removal bottom row Click to play In this assignment prepared by David Martin you implement the image retargeting algorithm of Avidan Shamir This is a very clever algorithm that was recently developed for resizing images in a manner that is adaptive to the image content Typical image resizing as is done in imresize for example scales the image uniformly The Avidan Shamir algorithm attempts to remove the boring bits of the image while retaining the important bits The queue that is used for determining what is important is very low level however and so the algorithm does not always produce good results It is surprising though how well it does work Apart from implementing the algorithm your job is also to evaluate its utility Downloads Programming 2 points Implement a function with the following prototype function M removalMap I This function should take a grayscale image as input not an image filename and return a horizontal seam removal time map as defined in the paper The pixels should be valued between 1 and H where H is the image height The seam removal time map tells you which pixels to remove if you want to remove N seams those pixels labeled 1 through N Here is a viewer program show m written by David Martin that takes an image and seam removal time map horizontal or vertical and lets you resize the image interctively by dragging the mouse or moving the mouse wheel To use this code you ll have to implement shrink and expand functions that shrink and expand an image by N horizontal seams given and image and a horizontal seam removal map Writeup 2 points Show and discuss one interesting successful result of shrinking an image hoizontally and one vertically Use two different images Show and discuss one interesting unsuccessful result of shrinking an image hoizontally and one vertically Use two different images Show side by side comparison of 5 and 15 resizing using uniform scaling vs seam removal insertion for the 4 images from the first two questions Show and discuss two interesting successful results of content amplification Matlab Tips You can t use transpose to transpose an RGB image Instead use the permute function to swap the first two dimensions I permute I 2 1 3 Do not implement any vertical seam algorithms The horizontal seam case is simpler to implement in matlab and you can use horizontal seam code to create and manipulate vertical seams by transposing arguments and results If you want to make movies of your results use the avifile addframe and close functions as follows making sure that each frame is the same size mov avifile movie avi frame colormap for i 1 nframes frame cdata someImage mov addframe mov frame end mov close mov Note that the movies that matlab creates are enormous uncompressed AVI files It is a good idea to transcode them into something like DivX or H 264 using something like Quicktime Pro or mencoder if you want to put them in your writeup or on the web Use the sprintf function to construct output filenames based on input filenames For example sprintf s avi inputFileName will create an AVI filename from some input file name Extra credit As detailed in the guidelines any project handed by 11 59 pm on the previous day Nov 5th will recieve 1 4 points extra credit ", "_id": "http://www.ics.uci.edu/~dramanan/teaching/cs116_winter15/hw/Project/Seam/", "title": "hw3: ", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>HW3: </title>\n  </head>\n  <body>\n    <h1>HW3: Seam Carving for Image Retargeting</h1>\n    <h3> Due Nov 6 in EEE DropBox at 11:59 pm </h3>\n    <hr>\n\n<h2>Seam Carving for Image Retargeting</h2>\n\n\n<a href=\"tree.jpg\"> <img width=275 src=\"tree.jpg\"> </a>\n<font size=\"-1\"><br>\nAn image of a tree.\n</font>\n<br>\n<br>\n\n<a href=\"tree_v.jpg\">\t <img width=275 src=\"tree_v.jpg\"></a>\n<font size=\"-1\"><br>\nVertical seam removal time map for the image of\na tree.  Black = early, white = late.\n</font>\n<br>\n<br>\n\n<a href=\"tree.jpg_v.mov\"> <img width=300 src=\"tree_v_preview.png\"></a>\n</a><br>\n<font size=\"-1\">\nAnimation of uniform scaling (top row) and seam removal (bottom row).\nClick to play.\n</font>\n<br>\n<br>\n\n<p>\nIn this assignment, prepared by <a href=\"http://vision.bc.edu/~dmartin/\"> David Martin<a/>, you implement the image retargeting algorithm of <a href=\"http://seamcarving.com/arik/imret.pdf\"> Avidan &amp Shamir </a>.\nThis is a very clever algorithm that\nwas recently developed for resizing images in a manner\nthat is adaptive to the image content.  Typical\nimage resizing, as is done in <tt>imresize</tt>,\nfor example, scales the image uniformly.  The Avidan\n&amp; Shamir algorithm attempts to remove the boring bits\nof the image while retaining the important bits.  The\nqueue that is used for determining what is important\nis very low-level, however, and so the algorithm does\nnot always produce good results.  It is surprising, \nthough, how well it does work.  Apart from implementing\nthe algorithm, your job is also to evaluate its \nutility.\n\n</p><ul>\n<li><a href=\"downloads\">Downloads</a>\n</li></ul>\n\n<h4>Programming [20 points]</h4>\n\n<p>\nImplement a function with the following prototype:\n\n</p><blockquote><tt><pre>function [M] = removalMap(I)\n</pre></tt></blockquote>\n\n<p>\nThis function should take a grayscale image as input (not an image\nfilename) and return a <i>horizontal seam removal time map</i>, as\ndefined in the paper.  The pixels should be valued between 1 and H,\nwhere H is the image height.  The seam removal time map tells you\nwhich pixels to remove if you want to remove N seams: those pixels\nlabeled 1 through N.\n\n</p><p>\nHere is a viewer program (<tt>show.m</tt>, written by David Martin) that takes an image\nand seam removal time map (horizontal or vertical), and lets you\nresize the image interctively by dragging the mouse or moving the\nmouse wheel.  To use this code, you'll have to\nimplement <tt>shrink</tt> and <tt>expand</tt> functions that shrink\nand expand an image by N horizontal seams given and image and a\nhorizontal seam removal map.\n\n</p><h4>Writeup [20 points]</h4>\n\n<ol>\n\n<p></p><li> Show and discuss one interesting successful result of\nshrinking an image hoizontally, and one vertically.  Use two different\nimages.\n\n<p></p></li><li> Show and discuss one interesting unsuccessful result of\nshrinking an image hoizontally, and one vertically.  Use two different\nimages.\n\n<p></p></li><li> Show side-by-side comparison of 50% and 150% resizing using\nuniform scaling vs. seam removal/insertion for the 4 images from the\nfirst two questions.\n\n<p></p></li><li> Show and discuss two interesting successful results of content\namplification.\n\n</li></ol>\n\n<h4>Matlab Tips</h4>\n\n<ol>\n\n<p></p><li> You can't use transpose to transpose an RGB image.  Instead,\nuse the <tt>permute</tt> function to swap the first two dimensions:\n<tt>I = permute(I,[2,1,3])</tt>.\n\n<p></p></li><li> Do not implement any vertical seam algorithms.  The horizontal\nseam case is simpler to implement in matlab, and you can use horizontal\nseam code to create and manipulate vertical seams by transposing arguments\nand results.\n\n<p></p></li><li> If you want to make movies of your results, use the\n<tt>avifile</tt>, <tt>addframe</tt>, and <tt>close</tt> functions as\nfollows, making sure that each frame is the same size:\n\n<blockquote><tt><pre>mov = avifile('movie.avi');\nframe.colormap = [];\nfor i = 1:nframes,\n    frame.cdata = someImage;\n    mov = addframe(mov,frame);\nend\nmov = close(mov);\n</pre></tt></blockquote>\n\n<p>\nNote that the movies that matlab creates are enormous uncompressed AVI\nfiles.  It is a good idea to transcode them into something like DivX\nor H.264 using something like Quicktime Pro or mencoder if you want to\nput them in your writeup or on the web.\n\n</p><p></p></li><li> Use the <tt>sprintf</tt> function to construct output filenames\nbased on input filenames.  For example, \n<tt>sprintf('%s.avi',inputFileName)</tt> will create an AVI filename\nfrom some input file name.\n\n</li></ol>\n\n<h4>Extra-credit</h4>\n    As detailed in the <a href=\"../../hw_guide.html\"> guidelines</a>, any project handed by 11:59 pm on the previous day (Nov 5th), will recieve 10% (4 points) extra credit.\n\n</p></div></center>\n</body></html>", "id": 30947.0}