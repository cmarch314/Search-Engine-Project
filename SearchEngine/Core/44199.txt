{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src twisted internet defer py View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 33 9 KB Line 1 test case name twisted test test defer 2 3 Copyright c 2 1 2 4 Twisted Matrix Laboratories 4 See LICENSE for details 567 Support for results that aren t immediately available 89API Stability stable1 11Maintainer U Glyph Lefkowitz mailto glyph twistedmatrix com 12 1314from future import nested scopes generators15import traceback16import warnings1718 Twisted imports19from twisted python import log failure2 from twisted python util import unsignedID mergeFunctionMetadata2122class AlreadyCalledError Exception 23 pass2425class TimeoutError Exception 26 pass2728def logError err 29 log err err 3 return err3132def succeed result 33 34 Return a Deferred that has already had callback result called 3536 This is useful when you re writing synchronous code to an37 asynchronous interface i e some code is calling you expecting a38 Deferred result but you don t actually need to do anything39 asynchronous Just return defer succeed theResult 4 41 See L fail for a version of this function that uses a failing42 Deferred rather than a successful one 4344 param result The result to give to the Deferred s callback 45 method 4647 rtype L Deferred 48 49 d Deferred 5 d callback result 51 return d5253class nothing pass5455def fail result nothing 56 57 Return a Deferred that has already had errback result called 5859 See L succeed s docstring for rationale 6 61 param result The same argument that L Deferred errback twisted internet defer Deferred errback takes 6263 rtype L Deferred 64 65 if result is nothing 66 result failure Failure 67 d Deferred 68 d errback result 69 return d7 71def execute callable args kw 72 Create a deferred from a callable and arguments 7374 Call the given function with the given arguments Return a deferred which75 has been fired with its callback as the result of that invocation or its76 errback with a Failure for the exception thrown 77 78 try 79 result callable args kw 8 except 81 return fail 82 else 83 return succeed result 8485def maybeDeferred f args kw 86 Invoke a function that may or may not return a deferred 8788 Call the given function with the given arguments If the returned89 object is a C Deferred return it If the returned object is a C Failure 9 wrap it with C fail and return it Otherwise wrap it in C succeed and91 return it If an exception is raised convert it to a C Failure wrap it92 in C fail and then return it 9394 type f Any callable95 param f The callable to invoke9697 param args The arguments to pass to C f 98 param kw The keyword arguments to pass to C f 991 rtype C Deferred 1 1 return The result of the function call wrapped in a C Deferred if1 2 necessary 1 3 1 4 deferred None1 51 6 try 1 7 result f args kw 1 8 except 1 9 return fail failure Failure 11 else 111 if isinstance result Deferred 112 return result113 elif isinstance result failure Failure 114 return fail result 115 else 116 return succeed result 117 return deferred118119def timeout deferred 12 deferred errback failure Failure TimeoutError Callback timed out 121122def passthru arg 123 return arg124125def setDebugging on 126 Enable or disable Deferred debugging 127128 When debugging is on the call stacks from creation and invocation are129 recorded and added to any AlreadyCalledErrors we raise 13 131 Deferred debug bool on 132133def getDebugging 134 Determine whether Deferred debugging is enabled 135 136 return Deferred debug137138class Deferred 139 This is a callback which will be put off until later 14 141 Why do we want this Well in cases where a function in a threaded142 program would block until it gets a result for Twisted it should143 not block Instead it should return a Deferred 144145 This can be implemented for protocols that run over the network by146 writing an asynchronous protocol for twisted internet For methods147 that come from outside packages that are not under our control we use148 threads see for example L twisted enterprise adbapi 14915 For more information about Deferreds see doc howto defer html or151 U http twistedmatrix com projects core documentation howto defer html 152 153 called 154 paused 155 timeoutCall None156 debugInfo None157158 Keep this class attribute for now for compatibility with code that159 sets it directly 16 debug False161162 def init self 163 self callbacks 164 if self debug 165 self debugInfo DebugInfo 166 self debugInfo creator traceback format stack 1 167168 def addCallbacks self callback errback None 169 callbackArgs None callbackKeywords None 17 errbackArgs None errbackKeywords None 171 Add a pair of callbacks success and error to this Deferred 172173 These will be executed when the master callback is run 174 175 assert callable callback 176 assert errback None or callable errback 177 cbs callback callbackArgs callbackKeywords 178 errback or passthru errbackArgs errbackKeywords 179 self callbacks append cbs 18 181 if self called 182 self runCallbacks 183 return self184185 def addCallback self callback args kw 186 Convenience method for adding just a callback 187188 See L addCallbacks 189 19 return self addCallbacks callback callbackArgs args 191 callbackKeywords kw 192193 def addErrback self errback args kw 194 Convenience method for adding just an errback 195196 See L addCallbacks 197 198 return self addCallbacks passthru errback 199 errbackArgs args 2 errbackKeywords kw 2 12 2 def addBoth self callback args kw 2 3 Convenience method for adding a single callable as both a callback2 4 and an errback 2 52 6 See L addCallbacks 2 7 2 8 return self addCallbacks callback callback 2 9 callbackArgs args errbackArgs args 21 callbackKeywords kw errbackKeywords kw 211212 def chainDeferred self d 213 Chain another Deferred to this Deferred 214215 This method adds callbacks to this Deferred to call d s callback or216 errback as appropriate It is merely a shorthand way of performing217 the following 218219 self addCallbacks d callback d errback 22 221 When you chain a deferred d2 to another deferred d1 with222 d1 chainDeferred d2 you are making d2 participate in the callback223 chain of d1 Thus any event that fires d1 will also fire d2 224 However the converse is B not true if d2 is fired d1 will not be225 affected 226 227 return self addCallbacks d callback d errback 228229 def callback self result 23 Run all success callbacks that have been added to this Deferred 231232 Each callback will have its result passed as the first233 argument to the next this way the callbacks act as a234 processing chain Also if the success callback returns a Failure235 or raises an Exception processing will continue on the error 236 callback chain 237 238 assert not isinstance result Deferred 239 self startRunCallbacks result 24 241242 def errback self fail None 243 Run all error callbacks that have been added to this Deferred 244245 Each callback will have its result passed as the first246 argument to the next this way the callbacks act as a247 processing chain Also if the error callback returns a non Failure248 or doesn t raise an Exception processing will continue on the249 success callback chain 25 251 If the argument that s passed to me is not a failure Failure instance 252 it will be embedded in one If no argument is passed a failure Failure253 instance will be created based on the current traceback stack 254255 Passing a string as fail is deprecated and will be punished with256 a warning message 257 258 if not isinstance fail failure Failure 259 fail failure Failure fail 26 261 self startRunCallbacks fail 262263264 def pause self 265 Stop processing on a Deferred until L unpause is called 266 267 self paused self paused 126826927 def unpause self 271 Process all callbacks made since L pause was called 272 273 self paused self paused 1274 if self paused 275 return276 if self called 277 self runCallbacks 278279 def continue self result 28 self result result281 self unpause 282283 def startRunCallbacks self result 284 if self called 285 if self debug 286 if self debugInfo is None 287 self debugInfo DebugInfo 288 extra n self debugInfo getDebugTracebacks 289 raise AlreadyCalledError extra 29 raise AlreadyCalledError291 if self debug 292 if self debugInfo is None 293 self debugInfo DebugInfo 294 self debugInfo invoker traceback format stack 2 295 self called True296 self result result297 if self timeoutCall 298 try 299 self timeoutCall cancel 3 except 3 1 pass3 23 3 del self timeoutCall3 4 self runCallbacks 3 53 6 def runCallbacks self 3 7 if not self paused 3 8 cb self callbacks3 9 self callbacks 31 while cb 311 item cb pop 312 callback args kw item 313 isinstance self result failure Failure 314 args args or 315 kw kw or 316 try 317 self result callback self result args kw 318 if isinstance self result Deferred 319 self callbacks cb32 321 note this will cause runCallbacks to be called322 recursively sometimes this shouldn t cause any323 problems since all the state has been set back to324 the way it s supposed to be but it is useful to know325 in case something goes wrong deferreds really ought326 not to return themselves from their callbacks 327 self pause 328 self result addBoth self continue 329 break33 except 331 self result failure Failure 332333 if isinstance self result failure Failure 334 self result cleanFailure 335 if self debugInfo is None 336 self debugInfo DebugInfo 337 self debugInfo failResult self result338 else 339 if self debugInfo is not None 34 self debugInfo failResult None341342 def setTimeout self seconds timeoutFunc timeout args kw 343 Set a timeout function to be triggered if I am not called 344345 param seconds How long to wait from now before firing the346 timeoutFunc 347348 param timeoutFunc will receive the Deferred and args kw as its349 arguments The default timeoutFunc will call the errback with a35 L TimeoutError 351 352 warnings warn 353 Deferred setTimeout is deprecated Look for timeout 354 support specific to the API you are using instead 355 DeprecationWarning stacklevel 2 356357 if self called 358 return359 assert not self timeoutCall Don t call setTimeout twice on the same Deferred 36 361 from twisted internet import reactor362 self timeoutCall reactor callLater 363 seconds 364 lambda self called or timeoutFunc self args kw 365 return self timeoutCall366367 def str self 368 cname self class name 369 if hasattr self result 37 return s at s current result r cname hex unsignedID self 371 self result 372 return s at s cname hex unsignedID self 373 repr str 374375class DebugInfo 376 Deferred debug helper 377 failResult None378379 def getDebugTracebacks self 38 info 381 if hasattr self creator 382 info C Deferred was created n C 383 info join self creator rstrip replace n n C 384 info n 385 if hasattr self invoker 386 info I First Invoker was n I 387 info join self invoker rstrip replace n n I 388 info n 389 return info39 391 def del self 392 Print tracebacks and die 393394 If the last and I do mean last callback leaves me in an error395 state print a traceback if said errback is a Failure 396 397 if self failResult is not None 398 log msg Unhandled error in Deferred isError True 399 debugInfo self getDebugTracebacks 4 if debugInfo 4 1 log msg debug debugInfo isError True 4 2 log err self failResult 4 34 4class FirstError Exception 4 5 First error to occur in a DeferredList if fireOnOneErrback is set 4 64 7 ivar subFailure the L Failure that occurred 4 8 ivar index the index of the Deferred in the DeferredList where it4 9 happened 41 411 def init self failure index 412 self subFailure failure413 self index index414415 def repr self 416 return FirstError r d self subFailure self index 417418 def str self 419 return repr self 42 421 def getitem self index 422 warnings warn FirstError getitem is deprecated 423 Use attributes instead 424 category DeprecationWarning stacklevel 2 425 return self subFailure self index index 426427 def getslice self start stop 428 warnings warn FirstError getslice is deprecated 429 Use attributes instead 43 category DeprecationWarning stacklevel 2 431 return self subFailure self index start stop 432433 def eq self other 434 if isinstance other tuple 435 return tuple self other436 elif isinstance other FirstError 437 return self subFailure other subFailure and438 self index other index 439 return False44 441class DeferredList Deferred 442 I combine a group of deferreds into one callback 443444 I track a list of L Deferred s for their callbacks and make a single445 callback when they have all completed a list of success result 446 tuples success being a boolean 447448 Note that you can still use a L Deferred after putting it in a449 DeferredList For example you can suppress Unhandled error in Deferred 45 messages by adding errbacks to the Deferreds after putting them in the451 DeferredList as a DeferredList won t swallow the errors Although a more452 convenient way to do this is simply to set the consumeErrors flag 453 454455 fireOnOneCallback 456 fireOnOneErrback 457458 def init self deferredList fireOnOneCallback fireOnOneErrback 459 consumeErrors 46 Initialize a DeferredList 461462 type deferredList C list of L Deferred s463 param deferredList The list of deferreds to track 464 param fireOnOneCallback keyword param a flag indicating that465 only one callback needs to be fired for me to call466 my callback467 param fireOnOneErrback keyword param a flag indicating that468 only one errback needs to be fired for me to call469 my errback47 param consumeErrors keyword param a flag indicating that any errors471 raised in the original deferreds should be472 consumed by this DeferredList This is useful to473 prevent spurious warnings being logged 474 475 self resultList None len deferredList 476 Deferred init self 477 if len deferredList and not fireOnOneCallback 478 self callback self resultList 47948 These flags need to be set before attaching callbacks to the481 deferreds because the callbacks use these flags and will run482 synchronously if any of the deferreds are already fired 483 self fireOnOneCallback fireOnOneCallback484 self fireOnOneErrback fireOnOneErrback485 self consumeErrors consumeErrors486 self finishedCount 487488 index 489 for deferred in deferredList 49 deferred addCallbacks self cbDeferred self cbDeferred 491 callbackArgs index SUCCESS 492 errbackArgs index FAILURE 493 index index 1494495 def cbDeferred self result index succeeded 496 internal Callback for when one of my deferreds fires 497 498 self resultList index succeeded result 4995 self finishedCount 15 1 if not self called 5 2 if succeeded SUCCESS and self fireOnOneCallback 5 3 self callback result index 5 4 elif succeeded FAILURE and self fireOnOneErrback 5 5 self errback failure Failure FirstError result index 5 6 elif self finishedCount len self resultList 5 7 self callback self resultList 5 85 9 if succeeded FAILURE and self consumeErrors 51 result None511512 return result513514515def parseDListResult l fireOnOneErrback 516 if debug 517 for success value in l 518 assert success519 return x 1 for x in l 52 521def gatherResults deferredList 522 Returns list with result of given Deferreds 523524 This builds on C DeferredList but is useful since you don t525 need to parse the result for success failure 526527 type deferredList C list of L Deferred s528 529 d DeferredList deferredList fireOnOneErrback 1 53 d addCallback parseDListResult 531 return d532533 Constants for use with DeferredList534535SUCCESS True536FAILURE False53753853954 deferredGenerator541542class waitForDeferred 543 544 See L deferredGenerator 545 546547 def init self d 548 if not isinstance d Deferred 549 raise TypeError You must give waitForDeferred a Deferred You gave it r d 55 self d d551552553 def getResult self 554 if isinstance self result failure Failure 555 self result raiseException 556 return self result55755855956 def deferGenerator g deferred 561 562 See L deferredGenerator 563 564 result None565566 This function is complicated by the need to prevent unbounded recursion567 arising from repeatedly yielding immediately ready deferreds This while568 loop and the waiting variable solve that by manually unfolding the569 recursion 57 571 waiting True defgen is waiting for result 572 None result573574 while 1 575 try 576 result g next 577 except StopIteration 578 deferred callback result 579 return deferred58 except 581 deferred errback 582 return deferred583584 Deferred callback Deferred raises an error we catch this case585 early here and give a nicer error message to the user in case586 they yield a Deferred 587 if isinstance result Deferred 588 return fail TypeError Yield waitForDeferred d not d 58959 if isinstance result waitForDeferred 591 a waitForDeferred was yielded get the result 592 Pass result in so it don t get changed going around the loop593 This isn t a problem for waiting as it s only reused if594 gotResult has already been executed 595 def gotResult r result result 596 result result r597 if waiting 598 waiting False599 waiting 1 r6 else 6 1 deferGenerator g deferred 6 2 result d addBoth gotResult 6 3 if waiting 6 4 Haven t called back yet set flag so that we get reinvoked6 5 and return from the loop6 6 waiting False6 7 return deferred6 8 Reset waiting to initial values for next loop6 9 waiting True61 waiting 1 None611612 result None613614615616def deferredGenerator f 617 618 API Stability stable61962 Maintainer U Christopher Armstrong mailto radix twistedmatrix com 621622 deferredGenerator and waitForDeferred help you write Deferred using code623 that looks like a regular sequential function If your code has a minimum624 requirement of Python 2 5 consider the use of L inlineCallbacks instead 625 which can accomplish the same thing in a more concise manner 626627 There are two important functions involved waitForDeferred and628 deferredGenerator They are used together like this 62963 def thingummy 631 thing waitForDeferred makeSomeRequestResultingInDeferred 632 yield thing633 thing thing getResult 634 print thing the result hoorj 635 thingummy deferredGenerator thingummy 636637 waitForDeferred returns something that you should immediately yield when638 your generator is resumed calling thing getResult will either give you639 the result of the Deferred if it was a success or raise an exception if it64 was a failure Calling C getResult is B absolutely mandatory If you do641 not call it I your program will not work 642643 deferredGenerator takes one of these waitForDeferred using generator644 functions and converts it into a function that returns a Deferred The645 result of the Deferred will be the last value that your generator yielded646 unless the last value is a waitForDeferred instance in which case the647 result will be C None If the function raises an unhandled exception the648 Deferred will errback instead Remember that return result won t work 649 use yield result return in place of that 65 651 Note that not yielding anything from your generator will make the Deferred652 result in None Yielding a Deferred from your generator is also an error653 condition always yield waitForDeferred d instead 654655 The Deferred returned from your deferred generator may also errback if your656 generator raised an exception For example 657658 def thingummy 659 thing waitForDeferred makeSomeRequestResultingInDeferred 66 yield thing661 thing thing getResult 662 if thing I love Twisted 663 will become the result of the Deferred664 yield TWISTED IS GREAT 665 return666 else 667 will trigger an errback668 raise Exception DESTROY ALL LIFE 669 thingummy deferredGenerator thingummy 67 671 Put succinctly these functions connect deferred using code with this fake672 blocking style in both directions waitForDeferred converts from a673 Deferred to the blocking style and deferredGenerator converts from the674 blocking style to a Deferred 675 676 def unwindGenerator args kwargs 677 return deferGenerator f args kwargs Deferred 678 return mergeFunctionMetadata f unwindGenerator 67968 681 inlineCallbacks682683 BaseException is only in Py 2 5 684try 685 BaseException686except NameError 687 BaseException Exception688689class DefGen Return BaseException 69 def init self value 691 self value value692693def returnValue val 694 695 Return val from a L inlineCallbacks generator 696697 Note this is currently implemented by raising an exception698 derived from BaseException You might want to change any699 except clauses to an except Exception clause so as not to7 catch this exception 7 17 2 Also while this function currently will work when called from7 3 within arbitrary functions called from within the generator do7 4 not rely upon this behavior 7 5 7 6 raise DefGen Return val 7 77 8def inlineCallbacks result g deferred 7 9 71 See L inlineCallbacks 711 712 This function is complicated by the need to prevent unbounded recursion713 arising from repeatedly yielding immediately ready deferreds This while714 loop and the waiting variable solve that by manually unfolding the715 recursion 716717 waiting True waiting for result 718 None result71972 while 1 721 try 722 Send the last result back as the result of the yield expression 723 if isinstance result failure Failure 724 result g throw result type result value result tb 725 else 726 result g send result 727 except StopIteration 728 fell off the end or return statement729 deferred callback None 73 return deferred731 except DefGen Return e 732 returnValue call733 deferred callback e value 734 return deferred735 except 736 deferred errback 737 return deferred738739 if isinstance result Deferred 74 a deferred was yielded get the result 741 def gotResult r 742 if waiting 743 waiting False744 waiting 1 r745 else 746 inlineCallbacks r g deferred 747748 result addBoth gotResult 749 if waiting 75 Haven t called back yet set flag so that we get reinvoked751 and return from the loop752 waiting False753 return deferred754755 result waiting 1 756 Reset waiting to initial values for next loop gotResult uses757 waiting but this isn t a problem because gotResult is only758 executed once and if it hasn t been executed yet the return759 branch above would have been taken 76 761762 waiting True763 waiting 1 None764765766 return deferred767768def inlineCallbacks f 769 77 API Stability semi stable771772 Maintainer U Christopher Armstrong mailto radix twistedmatrix com 773774 WARNING this function will not work in Python 2 4 and earlier 775776 inlineCallbacks helps you write Deferred using code that looks like a777 regular sequential function This function uses features of Python 2 5778 generators If you need to be compatible with Python 2 4 or before use779 the L deferredGenerator function instead which accomplishes the same78 thing but with somewhat more boilerplate 781782 def thingummy 783 thing yield makeSomeRequestResultingInDeferred 784 print thing the result hoorj 785 thingummy inlineCallbacks thingummy 786787 When you call anything that results in a Deferred you can simply yield it 788 your generator will automatically be resumed when the Deferred s result is789 available The generator will be sent the result of the Deferred with the79 send method on generators or if the result was a failure throw 791792 Your inlineCallbacks enabled generator will return a Deferred object which793 will result in the return value of the generator or will fail with a794 failure object if your generator raises an unhandled exception Note that795 you can t use return result to return a value use returnValue result 796 instead Falling off the end of the generator or simply using return 797 will cause the Deferred to have a result of None 798799 The Deferred returned from your deferred generator may errback if your8 generator raised an exception 8 18 2 def thingummy 8 3 thing yield makeSomeRequestResultingInDeferred 8 4 if thing I love Twisted 8 5 will become the result of the Deferred8 6 returnValue TWISTED IS GREAT 8 7 else 8 8 will trigger an errback8 9 raise Exception DESTROY ALL LIFE 81 thingummy inlineCallbacks thingummy 811 812 def unwindGenerator args kwargs 813 return inlineCallbacks None f args kwargs Deferred 814 return mergeFunctionMetadata f unwindGenerator 815816817 DeferredLock DeferredQueue818819class ConcurrencyPrimitive object 82 def init self 821 self waiting 822823 def releaseAndReturn self r 824 self release 825 return r826827 def run args kwargs 828 Acquire run release 82983 This function takes a callable as its first argument and any831 number of other positional and keyword arguments When the832 lock or semaphore is acquired the callable will be invoked833 with those arguments 834835 The callable may return a Deferred if it does the lock or836 semaphore won t be released until that Deferred fires 837838 return Deferred of function result 839 84 if len args 2 841 if not args 842 raise TypeError run takes at least 2 arguments none given 843 raise TypeError s run takes at least 2 arguments 1 given 844 args class name 845 self f args 2 846 args args 2 847848 def execute ignoredResult 849 d maybeDeferred f args kwargs 85 d addBoth self releaseAndReturn 851 return d852853 d self acquire 854 d addCallback execute 855 return d856857858class DeferredLock ConcurrencyPrimitive 859 A lock for event driven systems 86 861 API stability Unstable862863 ivar locked True when this Lock has been acquired false at all864 other times Do not change this value but it is useful to865 examine for the equivalent of a non blocking acquisition 866 867868 locked 86987 def acquire self 871 Attempt to acquire the lock 872873 return a Deferred which fires on lock acquisition 874 875 d Deferred 876 if self locked 877 self waiting append d 878 else 879 self locked 188 d callback self 881 return d882883 def release self 884 Release the lock 885886 Should be called by whomever did the acquire when the shared887 resource is free 888 889 assert self locked Tried to release an unlocked lock 89 self locked 891 if self waiting 892 someone is waiting to acquire lock893 self locked 1894 d self waiting pop 895 d callback self 896897class DeferredSemaphore ConcurrencyPrimitive 898 A semaphore for event driven systems 8999 API stability Unstable9 1 9 29 3 def init self tokens 9 4 ConcurrencyPrimitive init self 9 5 self tokens tokens9 6 self limit tokens9 79 8 def acquire self 9 9 Attempt to acquire the token 91 911 return a Deferred which fires on token acquisition 912 913 assert self tokens Internal inconsistency tokens should never be negative 914 d Deferred 915 if not self tokens 916 self waiting append d 917 else 918 self tokens self tokens 1919 d callback self 92 return d921922 def release self 923 Release the token 924925 Should be called by whoever did the acquire when the shared926 resource is free 927 928 assert self tokens self limit Someone released me too many times too many tokens 929 self tokens self tokens 193 if self waiting 931 someone is waiting to acquire token932 self tokens self tokens 1933 d self waiting pop 934 d callback self 935936class QueueOverflow Exception 937 pass938939class QueueUnderflow Exception 94 pass941942943class DeferredQueue object 944 An event driven queue 945946 API stability Unstable947948 Objects may be added as usual to this queue When an attempt is949 made to retrieve an object when the queue is empty a Deferred is95 returned which will fire when an object becomes available 951952 ivar size The maximum number of objects to allow into the queue953 at a time When an attempt to add a new object would exceed this954 limit QueueOverflow is raised synchronously None for no limit 955956 ivar backlog The maximum number of Deferred gets to allow at957 one time When an attempt is made to get an object which would958 exceed this limit QueueUnderflow is raised synchronously None959 for no limit 96 961962 def init self size None backlog None 963 self waiting 964 self pending 965 self size size966 self backlog backlog967968 def put self obj 969 Add an object to this queue 97 971 raise QueueOverflow Too many objects are in this queue 972 973 if self waiting 974 self waiting pop callback obj 975 elif self size is None or len self pending self size 976 self pending append obj 977 else 978 raise QueueOverflow 97998 def get self 981 Attempt to retrieve and remove an object from the queue 982983 return a Deferred which fires with the next object available in the queue 984985 raise QueueUnderflow Too many more than C backlog 986 Deferreds are already waiting for an object from this queue 987 988 if self pending 989 return succeed self pending pop 99 elif self backlog is None or len self waiting self backlog 991 d Deferred 992 self waiting append d 993 return d994 else 995 raise QueueUnderflow 996997998 all Deferred DeferredList succeed fail FAILURE SUCCESS 999 AlreadyCalledError TimeoutError gatherResults 1 maybeDeferred 1 1 waitForDeferred deferredGenerator inlineCallbacks 1 2 DeferredLock DeferredSemaphore DeferredQueue 1 3 Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py", "title": "\n      defer.py in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/twisted/internet\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      defer.py in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\" type=\"application/x-python; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/twisted/internet/defer.py?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted?order=name\" title=\"View twisted\">twisted</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet?order=name\" title=\"View internet\">internet</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py?order=name\" title=\"View defer.py\">defer.py</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/twisted/internet/defer.py\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"34694 bytes\">33.9 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td><span class=\"c\"># -*- test-case-name: twisted.test.test_defer -*-</span></td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td><span class=\"c\"># Copyright (c) 2001-2004 Twisted Matrix Laboratories.</span></td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td><span class=\"c\"># See LICENSE for details.</span></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td></td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td><span class=\"sd\">\"\"\"Support for results that aren't immediately available.</span></td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td><span class=\"sd\">API Stability: stable</span></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td><span class=\"sd\">Maintainer: U{Glyph Lefkowitz&lt;mailto:glyph@twistedmatrix.com&gt;}</span></td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">__future__</span>\u00a0<span class=\"kn\">import</span>\u00a0nested_scopes<span class=\"p\">,</span>\u00a0generators</td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">traceback</span></td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">warnings</span></td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td><span class=\"c\"># Twisted imports</span></td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python</span>\u00a0<span class=\"kn\">import</span>\u00a0log<span class=\"p\">,</span>\u00a0failure</td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.python.util</span>\u00a0<span class=\"kn\">import</span>\u00a0unsignedID<span class=\"p\">,</span>\u00a0mergeFunctionMetadata</td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td></td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">AlreadyCalledError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">TimeoutError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td></td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">logError</span><span class=\"p\">(</span>err<span class=\"p\">):</span></td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td>\u00a0 \u00a0 log<span class=\"o\">.</span>err<span class=\"p\">(</span>err<span class=\"p\">)</span></td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0err</td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">succeed</span><span class=\"p\">(</span>result<span class=\"p\">):</span></td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td><span class=\"sd\">\u00a0 \u00a0 Return a Deferred that has already had '.callback(result)' called.</span></td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td><span class=\"sd\">\u00a0 \u00a0 This is useful when you're writing synchronous code to an</span></td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td><span class=\"sd\">\u00a0 \u00a0 asynchronous interface: i.e., some code is calling you expecting a</span></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td><span class=\"sd\">\u00a0 \u00a0 Deferred result, but you don't actually need to do anything</span></td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td><span class=\"sd\">\u00a0 \u00a0 asynchronous. Just return defer.succeed(theResult).</span></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td><span class=\"sd\">\u00a0 \u00a0 See L{fail} for a version of this function that uses a failing</span></td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td><span class=\"sd\">\u00a0 \u00a0 Deferred rather than a successful one.</span></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param result: The result to give to the Deferred's 'callback'</span></td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0method.</span></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td><span class=\"sd\">\u00a0 \u00a0 @rtype: L{Deferred}</span></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td>\u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td>\u00a0 \u00a0 d<span class=\"o\">.</span>callback<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td></td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_nothing</span><span class=\"p\">:</span>\u00a0<span class=\"k\">pass</span></td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td></td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">fail</span><span class=\"p\">(</span>result<span class=\"o\">=</span>_nothing<span class=\"p\">):</span></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td><span class=\"sd\">\u00a0 \u00a0 Return a Deferred that has already had '.errback(result)' called.</span></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td><span class=\"sd\">\u00a0 \u00a0 See L{succeed}'s docstring for rationale.</span></td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param result: The same argument that L{Deferred.errback&lt;twisted.internet.defer.Deferred.errback&gt;} takes.</span></td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td><span class=\"sd\">\u00a0 \u00a0 @rtype: L{Deferred}</span></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td>\u00a0 \u00a0 <span class=\"k\">if</span>\u00a0result <span class=\"ow\">is</span>\u00a0_nothing<span class=\"p\">:</span></td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">()</span></td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td>\u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td>\u00a0 \u00a0 d<span class=\"o\">.</span>errback<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"nb\">callable</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Create a deferred from a callable and arguments.</span></td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td><span class=\"sd\">\u00a0 \u00a0 Call the given function with the given arguments.\u00a0 Return a deferred which</span></td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td><span class=\"sd\">\u00a0 \u00a0 has been fired with its callback as the result of that invocation or its</span></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td><span class=\"sd\">\u00a0 \u00a0 errback with a Failure for the exception thrown.</span></td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td>\u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td>\u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">()</span></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td>\u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0succeed<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">maybeDeferred</span><span class=\"p\">(</span>f<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Invoke a function that may or may not return a deferred.</span></td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td><span class=\"sd\">\u00a0 \u00a0 Call the given function with the given arguments.\u00a0 If the returned</span></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td><span class=\"sd\">\u00a0 \u00a0 object is a C{Deferred}, return it.\u00a0 If the returned object is a C{Failure},</span></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td><span class=\"sd\">\u00a0 \u00a0 wrap it with C{fail} and return it.\u00a0 Otherwise, wrap it in C{succeed} and</span></td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td><span class=\"sd\">\u00a0 \u00a0 return it.\u00a0 If an exception is raised, convert it to a C{Failure}, wrap it</span></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td><span class=\"sd\">\u00a0 \u00a0 in C{fail}, and then return it.</span></td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td><span class=\"sd\">\u00a0 \u00a0 @type f: Any callable</span></td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param f: The callable to invoke</span></td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param args: The arguments to pass to C{f}</span></td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td><span class=\"sd\">\u00a0 \u00a0 @param kw: The keyword arguments to pass to C{f}</span></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td><span class=\"sd\">\u00a0 \u00a0 @rtype: C{Deferred}</span></td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td><span class=\"sd\">\u00a0 \u00a0 @return: The result of the function call, wrapped in a C{Deferred} if</span></td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td><span class=\"sd\">\u00a0 \u00a0 necessary.</span></td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td>\u00a0 \u00a0 deferred <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td>\u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0f<span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td>\u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">(</span>failure<span class=\"o\">.</span>Failure<span class=\"p\">())</span></td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td>\u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0result</td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">):</span></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0succeed<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">timeout</span><span class=\"p\">(</span>deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td>\u00a0 \u00a0 deferred<span class=\"o\">.</span>errback<span class=\"p\">(</span>failure<span class=\"o\">.</span>Failure<span class=\"p\">(</span>TimeoutError<span class=\"p\">(</span><span class=\"s\">\"Callback timed out\"</span><span class=\"p\">)))</span></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">passthru</span><span class=\"p\">(</span>arg<span class=\"p\">):</span></td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0arg</td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">setDebugging</span><span class=\"p\">(</span>on<span class=\"p\">):</span></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Enable or disable Deferred debugging.</span></td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td><span class=\"sd\">\u00a0 \u00a0 When debugging is on, the call stacks from creation and invocation are</span></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td><span class=\"sd\">\u00a0 \u00a0 recorded, and added to any AlreadyCalledErrors we raise.</span></td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td>\u00a0 \u00a0 Deferred<span class=\"o\">.</span>debug<span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">(</span>on<span class=\"p\">)</span></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td></td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">getDebugging</span><span class=\"p\">():</span></td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Determine whether Deferred debugging is enabled.</span></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0Deferred<span class=\"o\">.</span>debug</td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">Deferred</span><span class=\"p\">:</span></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"This is a callback which will be put off until later.</span></td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td><span class=\"sd\">\u00a0 \u00a0 Why do we want this? Well, in cases where a function in a threaded</span></td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td><span class=\"sd\">\u00a0 \u00a0 program would block until it gets a result, for Twisted it should</span></td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td><span class=\"sd\">\u00a0 \u00a0 not block. Instead, it should return a Deferred.</span></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td><span class=\"sd\">\u00a0 \u00a0 This can be implemented for protocols that run over the network by</span></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td><span class=\"sd\">\u00a0 \u00a0 writing an asynchronous protocol for twisted.internet. For methods</span></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td><span class=\"sd\">\u00a0 \u00a0 that come from outside packages that are not under our control, we use</span></td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td><span class=\"sd\">\u00a0 \u00a0 threads (see for example L{twisted.enterprise.adbapi}).</span></td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td><span class=\"sd\">\u00a0 \u00a0 For more information about Deferreds, see doc/howto/defer.html or</span></td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td><span class=\"sd\">\u00a0 \u00a0 U{http://twistedmatrix.com/projects/core/documentation/howto/defer.html}</span></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td>\u00a0 \u00a0 called <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td>\u00a0 \u00a0 paused <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td>\u00a0 \u00a0 timeoutCall <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td>\u00a0 \u00a0 _debugInfo <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td>\u00a0 \u00a0 <span class=\"c\"># Keep this class attribute for now, for compatibility with code that</span></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td>\u00a0 \u00a0 <span class=\"c\"># sets it directly.</span></td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td>\u00a0 \u00a0 debug <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td></td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callbacks <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>debug<span class=\"p\">:</span></td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"o\">=</span>\u00a0DebugInfo<span class=\"p\">()</span></td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo<span class=\"o\">.</span>creator <span class=\"o\">=</span>\u00a0traceback<span class=\"o\">.</span>format_stack<span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td></td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">addCallbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0callback<span class=\"p\">,</span>\u00a0errback<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span></td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0callbackArgs<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0callbackKeywords<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span></td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0errbackArgs<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0errbackKeywords<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Add a pair of callbacks (success and error) to this Deferred.</span></td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 These will be executed when the 'master' callback is run.</span></td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"nb\">callable</span><span class=\"p\">(</span>callback<span class=\"p\">)</span></td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0errback <span class=\"o\">==</span>\u00a0<span class=\"bp\">None</span>\u00a0<span class=\"ow\">or</span>\u00a0<span class=\"nb\">callable</span><span class=\"p\">(</span>errback<span class=\"p\">)</span></td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 cbs <span class=\"o\">=</span>\u00a0<span class=\"p\">((</span>callback<span class=\"p\">,</span>\u00a0callbackArgs<span class=\"p\">,</span>\u00a0callbackKeywords<span class=\"p\">),</span></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"p\">(</span>errback <span class=\"ow\">or</span>\u00a0<span class=\"p\">(</span>passthru<span class=\"p\">),</span>\u00a0errbackArgs<span class=\"p\">,</span>\u00a0errbackKeywords<span class=\"p\">))</span></td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callbacks<span class=\"o\">.</span>append<span class=\"p\">(</span>cbs<span class=\"p\">)</span></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td></td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called<span class=\"p\">:</span></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_runCallbacks<span class=\"p\">()</span></td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span></td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td></td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">addCallback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0callback<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Convenience method for adding just a callback.</span></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 See L{addCallbacks}.</span></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span>callback<span class=\"p\">,</span>\u00a0callbackArgs<span class=\"o\">=</span>args<span class=\"p\">,</span></td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0callbackKeywords<span class=\"o\">=</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td></td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">addErrback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0errback<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Convenience method for adding just an errback.</span></td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 See L{addCallbacks}.</span></td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span>passthru<span class=\"p\">,</span>\u00a0errback<span class=\"p\">,</span></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0errbackArgs<span class=\"o\">=</span>args<span class=\"p\">,</span></td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0errbackKeywords<span class=\"o\">=</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td></td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">addBoth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0callback<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Convenience method for adding a single callable as both a callback</span></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 and an errback.</span></td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 See L{addCallbacks}.</span></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span>callback<span class=\"p\">,</span>\u00a0callback<span class=\"p\">,</span></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0callbackArgs<span class=\"o\">=</span>args<span class=\"p\">,</span>\u00a0errbackArgs<span class=\"o\">=</span>args<span class=\"p\">,</span></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0callbackKeywords<span class=\"o\">=</span>kw<span class=\"p\">,</span>\u00a0errbackKeywords<span class=\"o\">=</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td></td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">chainDeferred</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0d<span class=\"p\">):</span></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Chain another Deferred to this Deferred.</span></td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This method adds callbacks to this Deferred to call d's callback or</span></td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 errback, as appropriate. It is merely a shorthand way of performing</span></td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 the following::</span></td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.addCallbacks(d.callback, d.errback)</span></td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 When you chain a deferred d2 to another deferred d1 with</span></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 d1.chainDeferred(d2), you are making d2 participate in the callback</span></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 chain of d1. Thus any event that fires d1 will also fire d2.</span></td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 However, the converse is B{not} true; if d2 is fired d1 will not be</span></td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 affected.</span></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span>d<span class=\"o\">.</span>callback<span class=\"p\">,</span>\u00a0d<span class=\"o\">.</span>errback<span class=\"p\">)</span></td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td></td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0result<span class=\"p\">):</span></td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Run all success callbacks that have been added to this Deferred.</span></td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Each callback will have its result passed as the first</span></td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 argument to the next; this way, the callbacks act as a</span></td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 'processing chain'. Also, if the success-callback returns a Failure</span></td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 or raises an Exception, processing will continue on the *error*-</span></td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 callback chain.</span></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">)</span></td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_startRunCallbacks<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">errback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0fail<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Run all error callbacks that have been added to this Deferred.</span></td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Each callback will have its result passed as the first</span></td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 argument to the next; this way, the callbacks act as a</span></td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 'processing chain'. Also, if the error-callback returns a non-Failure</span></td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 or doesn't raise an Exception, processing will continue on the</span></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 *success*-callback chain.</span></td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the argument that's passed to me is not a failure.Failure instance,</span></td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 it will be embedded in one. If no argument is passed, a failure.Failure</span></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 instance will be created based on the current traceback stack.</span></td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Passing a string as `fail' is deprecated, and will be punished with</span></td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 a warning message.</span></td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>fail<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">):</span></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fail <span class=\"o\">=</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">(</span>fail<span class=\"p\">)</span></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td></td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_startRunCallbacks<span class=\"p\">(</span>fail<span class=\"p\">)</span></td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td></td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">pause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Stop processing on a Deferred until L{unpause}() is called.</span></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>paused <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>paused <span class=\"o\">+</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td></td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">unpause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Process all callbacks made since L{pause}() was called.</span></td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>paused <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>paused <span class=\"o\">-</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>paused<span class=\"p\">:</span></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called<span class=\"p\">:</span></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_runCallbacks<span class=\"p\">()</span></td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_continue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0result<span class=\"p\">):</span></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result <span class=\"o\">=</span>\u00a0result</td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>unpause<span class=\"p\">()</span></td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td></td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_startRunCallbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0result<span class=\"p\">):</span></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called<span class=\"p\">:</span></td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>debug<span class=\"p\">:</span></td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"o\">=</span>\u00a0DebugInfo<span class=\"p\">()</span></td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 extra <span class=\"o\">=</span>\u00a0<span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\u00a0<span class=\"o\">+</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo<span class=\"o\">.</span>_getDebugTracebacks<span class=\"p\">()</span></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0AlreadyCalledError<span class=\"p\">(</span>extra<span class=\"p\">)</span></td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0AlreadyCalledError</td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>debug<span class=\"p\">:</span></td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"o\">=</span>\u00a0DebugInfo<span class=\"p\">()</span></td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo<span class=\"o\">.</span>invoker <span class=\"o\">=</span>\u00a0traceback<span class=\"o\">.</span>format_stack<span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>called <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result <span class=\"o\">=</span>\u00a0result</td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall<span class=\"p\">:</span></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall<span class=\"o\">.</span>cancel<span class=\"p\">()</span></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td></td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">del</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall</td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_runCallbacks<span class=\"p\">()</span></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_runCallbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>paused<span class=\"p\">:</span></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cb <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>callbacks</td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callbacks <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">while</span>\u00a0cb<span class=\"p\">:</span></td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 item <span class=\"o\">=</span>\u00a0cb<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 callback<span class=\"p\">,</span>\u00a0args<span class=\"p\">,</span>\u00a0kw <span class=\"o\">=</span>\u00a0item<span class=\"p\">[</span></td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">)]</span></td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 args <span class=\"o\">=</span>\u00a0args <span class=\"ow\">or</span>\u00a0<span class=\"p\">()</span></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kw <span class=\"o\">=</span>\u00a0kw <span class=\"ow\">or</span>\u00a0<span class=\"p\">{}</span></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result <span class=\"o\">=</span>\u00a0callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">)</span></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callbacks <span class=\"o\">=</span>\u00a0cb</td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td></td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># note: this will cause _runCallbacks to be called</span></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># \"recursively\" sometimes... this shouldn't cause any</span></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># problems, since all the state has been set back to</span></td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># the way it's supposed to be, but it is useful to know</span></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># in case something goes wrong.\u00a0 deferreds really ought</span></td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># not to return themselves from their callbacks.</span></td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>pause<span class=\"p\">()</span></td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"o\">.</span>addBoth<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_continue<span class=\"p\">)</span></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">break</span></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result <span class=\"o\">=</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">()</span></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td></td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">):</span></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"o\">.</span>cleanFailure<span class=\"p\">()</span></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"o\">=</span>\u00a0DebugInfo<span class=\"p\">()</span></td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo<span class=\"o\">.</span>failResult <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>result</td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>_debugInfo<span class=\"o\">.</span>failResult <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td></td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">setTimeout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0seconds<span class=\"p\">,</span>\u00a0timeoutFunc<span class=\"o\">=</span>timeout<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">):</span></td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Set a timeout function to be triggered if I am not called.</span></td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param seconds: How long to wait (from now) before firing the</span></td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 timeoutFunc.</span></td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param timeoutFunc: will receive the Deferred and *args, **kw as its</span></td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 arguments.\u00a0 The default timeoutFunc will call the errback with a</span></td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 L{TimeoutError}.</span></td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 warnings<span class=\"o\">.</span>warn<span class=\"p\">(</span></td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Deferred.setTimeout is deprecated.\u00a0 Look for timeout \"</span></td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"support specific to the API you are using instead.\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\u00a0stacklevel<span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span></td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td></td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called<span class=\"p\">:</span></td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span></td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall<span class=\"p\">,</span>\u00a0<span class=\"s\">\"Don't call setTimeout twice on the same Deferred.\"</span></td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td></td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"kn\">from</span>\u00a0<span class=\"nn\">twisted.internet</span>\u00a0<span class=\"kn\">import</span>\u00a0reactor</td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall <span class=\"o\">=</span>\u00a0reactor<span class=\"o\">.</span>callLater<span class=\"p\">(</span></td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds<span class=\"p\">,</span></td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">lambda</span><span class=\"p\">:</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called <span class=\"ow\">or</span>\u00a0timeoutFunc<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kw<span class=\"p\">))</span></td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>timeoutCall</td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td></td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 cname <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>__class__<span class=\"o\">.</span>__name__</td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'result'</span><span class=\"p\">):</span></td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">\"&lt;</span><span class=\"si\">%s</span><span class=\"s\">\u00a0at </span><span class=\"si\">%s</span><span class=\"s\">\u00a0 current result: </span><span class=\"si\">%r</span><span class=\"s\">&gt;\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>cname<span class=\"p\">,</span>\u00a0<span class=\"nb\">hex</span><span class=\"p\">(</span>unsignedID<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)),</span></td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">\"&lt;</span><span class=\"si\">%s</span><span class=\"s\">\u00a0at </span><span class=\"si\">%s</span><span class=\"s\">&gt;\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>cname<span class=\"p\">,</span>\u00a0<span class=\"nb\">hex</span><span class=\"p\">(</span>unsignedID<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)))</span></td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td>\u00a0 \u00a0 __repr__ <span class=\"o\">=</span>\u00a0__str__</td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td></td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">DebugInfo</span><span class=\"p\">:</span></td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Deferred debug helper\"\"\"</span></td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td>\u00a0 \u00a0 failResult <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td></td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_getDebugTracebacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">=</span>\u00a0<span class=\"s\">''</span></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"creator\"</span><span class=\"p\">):</span></td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\" C: Deferred was created:</span><span class=\"se\">\\n</span><span class=\"s\">\u00a0C:\"</span></td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\"\"</span><span class=\"o\">.</span>join<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>creator<span class=\"p\">)</span><span class=\"o\">.</span>rstrip<span class=\"p\">()</span><span class=\"o\">.</span>replace<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\u00a0C:\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span></td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"invoker\"</span><span class=\"p\">):</span></td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\" I: First Invoker was:</span><span class=\"se\">\\n</span><span class=\"s\">\u00a0I:\"</span></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\"\"</span><span class=\"o\">.</span>join<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>invoker<span class=\"p\">)</span><span class=\"o\">.</span>rstrip<span class=\"p\">()</span><span class=\"o\">.</span>replace<span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\u00a0I:\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 info <span class=\"o\">+=</span>\u00a0<span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span></td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0info</td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td></td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__del__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Print tracebacks and die.</span></td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 If the *last* (and I do mean *last*) callback leaves me in an error</span></td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 state, print a traceback (if said errback is a Failure).</span></td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>failResult <span class=\"ow\">is</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">None</span><span class=\"p\">:</span></td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span><span class=\"s\">\"Unhandled error in Deferred:\"</span><span class=\"p\">,</span>\u00a0isError<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span></td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 debugInfo <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_getDebugTracebacks<span class=\"p\">()</span></td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0debugInfo <span class=\"o\">!=</span>\u00a0<span class=\"s\">''</span><span class=\"p\">:</span></td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>msg<span class=\"p\">(</span><span class=\"s\">\"(debug: \"</span>\u00a0<span class=\"o\">+</span>\u00a0debugInfo <span class=\"o\">+</span>\u00a0<span class=\"s\">\")\"</span><span class=\"p\">,</span>\u00a0isError<span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span></td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log<span class=\"o\">.</span>err<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>failResult<span class=\"p\">)</span></td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td></td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">FirstError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"First error to occur in a DeferredList if fireOnOneErrback is set.</span></td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar subFailure: the L{Failure} that occurred.</span></td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar index: the index of the Deferred in the DeferredList where it</span></td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td><span class=\"sd\">\u00a0 \u00a0 happened.</span></td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0failure<span class=\"p\">,</span>\u00a0index<span class=\"p\">):</span></td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>subFailure <span class=\"o\">=</span>\u00a0failure</td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>index <span class=\"o\">=</span>\u00a0index</td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td></td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"s\">'FirstError(</span><span class=\"si\">%r</span><span class=\"s\">, </span><span class=\"si\">%d</span><span class=\"s\">)'</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>subFailure<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>index<span class=\"p\">)</span></td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td></td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td></td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0index<span class=\"p\">):</span></td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 warnings<span class=\"o\">.</span>warn<span class=\"p\">(</span><span class=\"s\">\"FirstError.__getitem__ is deprecated.\u00a0 \"</span></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Use attributes instead.\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 category<span class=\"o\">=</span><span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\u00a0stacklevel<span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span>subFailure<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>index<span class=\"p\">][</span>index<span class=\"p\">]</span></td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td></td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__getslice__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0start<span class=\"p\">,</span>\u00a0stop<span class=\"p\">):</span></td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 warnings<span class=\"o\">.</span>warn<span class=\"p\">(</span><span class=\"s\">\"FirstError.__getslice__ is deprecated.\u00a0 \"</span></td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"s\">\"Use attributes instead.\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 category<span class=\"o\">=</span><span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\u00a0stacklevel<span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span></td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span>subFailure<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>index<span class=\"p\">][</span>start<span class=\"p\">:</span>stop<span class=\"p\">]</span></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td></td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0other<span class=\"p\">):</span></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>other<span class=\"p\">,</span>\u00a0<span class=\"nb\">tuple</span><span class=\"p\">):</span></td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\u00a0<span class=\"o\">==</span>\u00a0other</td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>other<span class=\"p\">,</span>\u00a0FirstError<span class=\"p\">):</span></td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>subFailure <span class=\"o\">==</span>\u00a0other<span class=\"o\">.</span>subFailure <span class=\"ow\">and</span></td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>index <span class=\"o\">==</span>\u00a0other<span class=\"o\">.</span>index<span class=\"p\">)</span></td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td></td></tr><tr><th id=\"L441\"><a href=\"#L441\">441</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">DeferredList</span><span class=\"p\">(</span>Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L442\"><a href=\"#L442\">442</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"I combine a group of deferreds into one callback.</span></td></tr><tr><th id=\"L443\"><a href=\"#L443\">443</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L444\"><a href=\"#L444\">444</a></th><td><span class=\"sd\">\u00a0 \u00a0 I track a list of L{Deferred}s for their callbacks, and make a single</span></td></tr><tr><th id=\"L445\"><a href=\"#L445\">445</a></th><td><span class=\"sd\">\u00a0 \u00a0 callback when they have all completed, a list of (success, result)</span></td></tr><tr><th id=\"L446\"><a href=\"#L446\">446</a></th><td><span class=\"sd\">\u00a0 \u00a0 tuples, 'success' being a boolean.</span></td></tr><tr><th id=\"L447\"><a href=\"#L447\">447</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L448\"><a href=\"#L448\">448</a></th><td><span class=\"sd\">\u00a0 \u00a0 Note that you can still use a L{Deferred} after putting it in a</span></td></tr><tr><th id=\"L449\"><a href=\"#L449\">449</a></th><td><span class=\"sd\">\u00a0 \u00a0 DeferredList.\u00a0 For example, you can suppress 'Unhandled error in Deferred'</span></td></tr><tr><th id=\"L450\"><a href=\"#L450\">450</a></th><td><span class=\"sd\">\u00a0 \u00a0 messages by adding errbacks to the Deferreds *after* putting them in the</span></td></tr><tr><th id=\"L451\"><a href=\"#L451\">451</a></th><td><span class=\"sd\">\u00a0 \u00a0 DeferredList, as a DeferredList won't swallow the errors.\u00a0 (Although a more</span></td></tr><tr><th id=\"L452\"><a href=\"#L452\">452</a></th><td><span class=\"sd\">\u00a0 \u00a0 convenient way to do this is simply to set the consumeErrors flag)</span></td></tr><tr><th id=\"L453\"><a href=\"#L453\">453</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L454\"><a href=\"#L454\">454</a></th><td></td></tr><tr><th id=\"L455\"><a href=\"#L455\">455</a></th><td>\u00a0 \u00a0 fireOnOneCallback <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L456\"><a href=\"#L456\">456</a></th><td>\u00a0 \u00a0 fireOnOneErrback <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L457\"><a href=\"#L457\">457</a></th><td></td></tr><tr><th id=\"L458\"><a href=\"#L458\">458</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0deferredList<span class=\"p\">,</span>\u00a0fireOnOneCallback<span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\u00a0fireOnOneErrback<span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span></td></tr><tr><th id=\"L459\"><a href=\"#L459\">459</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0consumeErrors<span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span></td></tr><tr><th id=\"L460\"><a href=\"#L460\">460</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Initialize a DeferredList.</span></td></tr><tr><th id=\"L461\"><a href=\"#L461\">461</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L462\"><a href=\"#L462\">462</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @type deferredList:\u00a0 C{list} of L{Deferred}s</span></td></tr><tr><th id=\"L463\"><a href=\"#L463\">463</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param deferredList: The list of deferreds to track.</span></td></tr><tr><th id=\"L464\"><a href=\"#L464\">464</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param fireOnOneCallback: (keyword param) a flag indicating that</span></td></tr><tr><th id=\"L465\"><a href=\"#L465\">465</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0only one callback needs to be fired for me to call</span></td></tr><tr><th id=\"L466\"><a href=\"#L466\">466</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0my callback</span></td></tr><tr><th id=\"L467\"><a href=\"#L467\">467</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param fireOnOneErrback: (keyword param) a flag indicating that</span></td></tr><tr><th id=\"L468\"><a href=\"#L468\">468</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 only one errback needs to be fired for me to call</span></td></tr><tr><th id=\"L469\"><a href=\"#L469\">469</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 my errback</span></td></tr><tr><th id=\"L470\"><a href=\"#L470\">470</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @param consumeErrors: (keyword param) a flag indicating that any errors</span></td></tr><tr><th id=\"L471\"><a href=\"#L471\">471</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raised in the original deferreds should be</span></td></tr><tr><th id=\"L472\"><a href=\"#L472\">472</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 consumed by this DeferredList.\u00a0 This is useful to</span></td></tr><tr><th id=\"L473\"><a href=\"#L473\">473</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prevent spurious warnings being logged.</span></td></tr><tr><th id=\"L474\"><a href=\"#L474\">474</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L475\"><a href=\"#L475\">475</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>resultList <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">]</span>\u00a0<span class=\"o\">*</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>deferredList<span class=\"p\">)</span></td></tr><tr><th id=\"L476\"><a href=\"#L476\">476</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 Deferred<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L477\"><a href=\"#L477\">477</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>deferredList<span class=\"p\">)</span>\u00a0<span class=\"o\">==</span>\u00a0<span class=\"mi\">0</span>\u00a0<span class=\"ow\">and</span>\u00a0<span class=\"ow\">not</span>\u00a0fireOnOneCallback<span class=\"p\">:</span></td></tr><tr><th id=\"L478\"><a href=\"#L478\">478</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>resultList<span class=\"p\">)</span></td></tr><tr><th id=\"L479\"><a href=\"#L479\">479</a></th><td></td></tr><tr><th id=\"L480\"><a href=\"#L480\">480</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># These flags need to be set *before* attaching callbacks to the</span></td></tr><tr><th id=\"L481\"><a href=\"#L481\">481</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># deferreds, because the callbacks use these flags, and will run</span></td></tr><tr><th id=\"L482\"><a href=\"#L482\">482</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># synchronously if any of the deferreds are already fired.</span></td></tr><tr><th id=\"L483\"><a href=\"#L483\">483</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>fireOnOneCallback <span class=\"o\">=</span>\u00a0fireOnOneCallback</td></tr><tr><th id=\"L484\"><a href=\"#L484\">484</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>fireOnOneErrback <span class=\"o\">=</span>\u00a0fireOnOneErrback</td></tr><tr><th id=\"L485\"><a href=\"#L485\">485</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>consumeErrors <span class=\"o\">=</span>\u00a0consumeErrors</td></tr><tr><th id=\"L486\"><a href=\"#L486\">486</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>finishedCount <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L487\"><a href=\"#L487\">487</a></th><td></td></tr><tr><th id=\"L488\"><a href=\"#L488\">488</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 index <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L489\"><a href=\"#L489\">489</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0deferred <span class=\"ow\">in</span>\u00a0deferredList<span class=\"p\">:</span></td></tr><tr><th id=\"L490\"><a href=\"#L490\">490</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>addCallbacks<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_cbDeferred<span class=\"p\">,</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>_cbDeferred<span class=\"p\">,</span></td></tr><tr><th id=\"L491\"><a href=\"#L491\">491</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 callbackArgs<span class=\"o\">=</span><span class=\"p\">(</span>index<span class=\"p\">,</span>SUCCESS<span class=\"p\">),</span></td></tr><tr><th id=\"L492\"><a href=\"#L492\">492</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 errbackArgs<span class=\"o\">=</span><span class=\"p\">(</span>index<span class=\"p\">,</span>FAILURE<span class=\"p\">))</span></td></tr><tr><th id=\"L493\"><a href=\"#L493\">493</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 index <span class=\"o\">=</span>\u00a0index <span class=\"o\">+</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L494\"><a href=\"#L494\">494</a></th><td></td></tr><tr><th id=\"L495\"><a href=\"#L495\">495</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_cbDeferred</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0result<span class=\"p\">,</span>\u00a0index<span class=\"p\">,</span>\u00a0succeeded<span class=\"p\">):</span></td></tr><tr><th id=\"L496\"><a href=\"#L496\">496</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"(internal) Callback for when one of my deferreds fires.</span></td></tr><tr><th id=\"L497\"><a href=\"#L497\">497</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L498\"><a href=\"#L498\">498</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>resultList<span class=\"p\">[</span>index<span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"p\">(</span>succeeded<span class=\"p\">,</span>\u00a0result<span class=\"p\">)</span></td></tr><tr><th id=\"L499\"><a href=\"#L499\">499</a></th><td></td></tr><tr><th id=\"L500\"><a href=\"#L500\">500</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>finishedCount <span class=\"o\">+=</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L501\"><a href=\"#L501\">501</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>called<span class=\"p\">:</span></td></tr><tr><th id=\"L502\"><a href=\"#L502\">502</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0succeeded <span class=\"o\">==</span>\u00a0SUCCESS <span class=\"ow\">and</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>fireOnOneCallback<span class=\"p\">:</span></td></tr><tr><th id=\"L503\"><a href=\"#L503\">503</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callback<span class=\"p\">((</span>result<span class=\"p\">,</span>\u00a0index<span class=\"p\">))</span></td></tr><tr><th id=\"L504\"><a href=\"#L504\">504</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0succeeded <span class=\"o\">==</span>\u00a0FAILURE <span class=\"ow\">and</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>fireOnOneErrback<span class=\"p\">:</span></td></tr><tr><th id=\"L505\"><a href=\"#L505\">505</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>errback<span class=\"p\">(</span>failure<span class=\"o\">.</span>Failure<span class=\"p\">(</span>FirstError<span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0index<span class=\"p\">)))</span></td></tr><tr><th id=\"L506\"><a href=\"#L506\">506</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>finishedCount <span class=\"o\">==</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>resultList<span class=\"p\">):</span></td></tr><tr><th id=\"L507\"><a href=\"#L507\">507</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>resultList<span class=\"p\">)</span></td></tr><tr><th id=\"L508\"><a href=\"#L508\">508</a></th><td></td></tr><tr><th id=\"L509\"><a href=\"#L509\">509</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0succeeded <span class=\"o\">==</span>\u00a0FAILURE <span class=\"ow\">and</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>consumeErrors<span class=\"p\">:</span></td></tr><tr><th id=\"L510\"><a href=\"#L510\">510</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L511\"><a href=\"#L511\">511</a></th><td></td></tr><tr><th id=\"L512\"><a href=\"#L512\">512</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0result</td></tr><tr><th id=\"L513\"><a href=\"#L513\">513</a></th><td></td></tr><tr><th id=\"L514\"><a href=\"#L514\">514</a></th><td></td></tr><tr><th id=\"L515\"><a href=\"#L515\">515</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_parseDListResult</span><span class=\"p\">(</span>l<span class=\"p\">,</span>\u00a0fireOnOneErrback<span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span></td></tr><tr><th id=\"L516\"><a href=\"#L516\">516</a></th><td>\u00a0 \u00a0 <span class=\"k\">if</span>\u00a0__debug__<span class=\"p\">:</span></td></tr><tr><th id=\"L517\"><a href=\"#L517\">517</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">for</span>\u00a0success<span class=\"p\">,</span>\u00a0value <span class=\"ow\">in</span>\u00a0l<span class=\"p\">:</span></td></tr><tr><th id=\"L518\"><a href=\"#L518\">518</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0success</td></tr><tr><th id=\"L519\"><a href=\"#L519\">519</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"p\">[</span>x<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"k\">for</span>\u00a0x <span class=\"ow\">in</span>\u00a0l<span class=\"p\">]</span></td></tr><tr><th id=\"L520\"><a href=\"#L520\">520</a></th><td></td></tr><tr><th id=\"L521\"><a href=\"#L521\">521</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">gatherResults</span><span class=\"p\">(</span>deferredList<span class=\"p\">):</span></td></tr><tr><th id=\"L522\"><a href=\"#L522\">522</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Returns list with result of given Deferreds.</span></td></tr><tr><th id=\"L523\"><a href=\"#L523\">523</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L524\"><a href=\"#L524\">524</a></th><td><span class=\"sd\">\u00a0 \u00a0 This builds on C{DeferredList} but is useful since you don't</span></td></tr><tr><th id=\"L525\"><a href=\"#L525\">525</a></th><td><span class=\"sd\">\u00a0 \u00a0 need to parse the result for success/failure.</span></td></tr><tr><th id=\"L526\"><a href=\"#L526\">526</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L527\"><a href=\"#L527\">527</a></th><td><span class=\"sd\">\u00a0 \u00a0 @type deferredList:\u00a0 C{list} of L{Deferred}s</span></td></tr><tr><th id=\"L528\"><a href=\"#L528\">528</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L529\"><a href=\"#L529\">529</a></th><td>\u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0DeferredList<span class=\"p\">(</span>deferredList<span class=\"p\">,</span>\u00a0fireOnOneErrback<span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span></td></tr><tr><th id=\"L530\"><a href=\"#L530\">530</a></th><td>\u00a0 \u00a0 d<span class=\"o\">.</span>addCallback<span class=\"p\">(</span>_parseDListResult<span class=\"p\">)</span></td></tr><tr><th id=\"L531\"><a href=\"#L531\">531</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L532\"><a href=\"#L532\">532</a></th><td></td></tr><tr><th id=\"L533\"><a href=\"#L533\">533</a></th><td><span class=\"c\"># Constants for use with DeferredList</span></td></tr><tr><th id=\"L534\"><a href=\"#L534\">534</a></th><td></td></tr><tr><th id=\"L535\"><a href=\"#L535\">535</a></th><td>SUCCESS <span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L536\"><a href=\"#L536\">536</a></th><td>FAILURE <span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L537\"><a href=\"#L537\">537</a></th><td></td></tr><tr><th id=\"L538\"><a href=\"#L538\">538</a></th><td></td></tr><tr><th id=\"L539\"><a href=\"#L539\">539</a></th><td></td></tr><tr><th id=\"L540\"><a href=\"#L540\">540</a></th><td><span class=\"c\">## deferredGenerator</span></td></tr><tr><th id=\"L541\"><a href=\"#L541\">541</a></th><td></td></tr><tr><th id=\"L542\"><a href=\"#L542\">542</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">waitForDeferred</span><span class=\"p\">:</span></td></tr><tr><th id=\"L543\"><a href=\"#L543\">543</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L544\"><a href=\"#L544\">544</a></th><td><span class=\"sd\">\u00a0 \u00a0 See L{deferredGenerator}.</span></td></tr><tr><th id=\"L545\"><a href=\"#L545\">545</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L546\"><a href=\"#L546\">546</a></th><td></td></tr><tr><th id=\"L547\"><a href=\"#L547\">547</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0d<span class=\"p\">):</span></td></tr><tr><th id=\"L548\"><a href=\"#L548\">548</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>d<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L549\"><a href=\"#L549\">549</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\"You must give waitForDeferred a Deferred. You gave it </span><span class=\"si\">%r</span><span class=\"s\">.\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span>d<span class=\"p\">,))</span></td></tr><tr><th id=\"L550\"><a href=\"#L550\">550</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>d <span class=\"o\">=</span>\u00a0d</td></tr><tr><th id=\"L551\"><a href=\"#L551\">551</a></th><td></td></tr><tr><th id=\"L552\"><a href=\"#L552\">552</a></th><td></td></tr><tr><th id=\"L553\"><a href=\"#L553\">553</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">getResult</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L554\"><a href=\"#L554\">554</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">):</span></td></tr><tr><th id=\"L555\"><a href=\"#L555\">555</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>result<span class=\"o\">.</span>raiseException<span class=\"p\">()</span></td></tr><tr><th id=\"L556\"><a href=\"#L556\">556</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>result</td></tr><tr><th id=\"L557\"><a href=\"#L557\">557</a></th><td></td></tr><tr><th id=\"L558\"><a href=\"#L558\">558</a></th><td></td></tr><tr><th id=\"L559\"><a href=\"#L559\">559</a></th><td></td></tr><tr><th id=\"L560\"><a href=\"#L560\">560</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_deferGenerator</span><span class=\"p\">(</span>g<span class=\"p\">,</span>\u00a0deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L561\"><a href=\"#L561\">561</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L562\"><a href=\"#L562\">562</a></th><td><span class=\"sd\">\u00a0 \u00a0 See L{deferredGenerator}.</span></td></tr><tr><th id=\"L563\"><a href=\"#L563\">563</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L564\"><a href=\"#L564\">564</a></th><td>\u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L565\"><a href=\"#L565\">565</a></th><td></td></tr><tr><th id=\"L566\"><a href=\"#L566\">566</a></th><td>\u00a0 \u00a0 <span class=\"c\"># This function is complicated by the need to prevent unbounded recursion</span></td></tr><tr><th id=\"L567\"><a href=\"#L567\">567</a></th><td>\u00a0 \u00a0 <span class=\"c\"># arising from repeatedly yielding immediately ready deferreds.\u00a0 This while</span></td></tr><tr><th id=\"L568\"><a href=\"#L568\">568</a></th><td>\u00a0 \u00a0 <span class=\"c\"># loop and the waiting variable solve that by manually unfolding the</span></td></tr><tr><th id=\"L569\"><a href=\"#L569\">569</a></th><td>\u00a0 \u00a0 <span class=\"c\"># recursion.</span></td></tr><tr><th id=\"L570\"><a href=\"#L570\">570</a></th><td></td></tr><tr><th id=\"L571\"><a href=\"#L571\">571</a></th><td>\u00a0 \u00a0 waiting <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0<span class=\"c\"># defgen is waiting for result?</span></td></tr><tr><th id=\"L572\"><a href=\"#L572\">572</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"bp\">None</span><span class=\"p\">]</span>\u00a0<span class=\"c\"># result</span></td></tr><tr><th id=\"L573\"><a href=\"#L573\">573</a></th><td></td></tr><tr><th id=\"L574\"><a href=\"#L574\">574</a></th><td>\u00a0 \u00a0 <span class=\"k\">while</span>\u00a0<span class=\"mi\">1</span><span class=\"p\">:</span></td></tr><tr><th id=\"L575\"><a href=\"#L575\">575</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L576\"><a href=\"#L576\">576</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0g<span class=\"o\">.</span>next<span class=\"p\">()</span></td></tr><tr><th id=\"L577\"><a href=\"#L577\">577</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0<span class=\"ne\">StopIteration</span><span class=\"p\">:</span></td></tr><tr><th id=\"L578\"><a href=\"#L578\">578</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>callback<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L579\"><a href=\"#L579\">579</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L580\"><a href=\"#L580\">580</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L581\"><a href=\"#L581\">581</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>errback<span class=\"p\">()</span></td></tr><tr><th id=\"L582\"><a href=\"#L582\">582</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L583\"><a href=\"#L583\">583</a></th><td></td></tr><tr><th id=\"L584\"><a href=\"#L584\">584</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Deferred.callback(Deferred) raises an error; we catch this case</span></td></tr><tr><th id=\"L585\"><a href=\"#L585\">585</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># early here and give a nicer error message to the user in case</span></td></tr><tr><th id=\"L586\"><a href=\"#L586\">586</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># they yield a Deferred.</span></td></tr><tr><th id=\"L587\"><a href=\"#L587\">587</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L588\"><a href=\"#L588\">588</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0fail<span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\"Yield waitForDeferred(d), not d!\"</span><span class=\"p\">))</span></td></tr><tr><th id=\"L589\"><a href=\"#L589\">589</a></th><td></td></tr><tr><th id=\"L590\"><a href=\"#L590\">590</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0waitForDeferred<span class=\"p\">):</span></td></tr><tr><th id=\"L591\"><a href=\"#L591\">591</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># a waitForDeferred was yielded, get the result.</span></td></tr><tr><th id=\"L592\"><a href=\"#L592\">592</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Pass result in so it don't get changed going around the loop</span></td></tr><tr><th id=\"L593\"><a href=\"#L593\">593</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># This isn't a problem for waiting, as it's only reused if</span></td></tr><tr><th id=\"L594\"><a href=\"#L594\">594</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># gotResult has already been executed.</span></td></tr><tr><th id=\"L595\"><a href=\"#L595\">595</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">gotResult</span><span class=\"p\">(</span>r<span class=\"p\">,</span>\u00a0result<span class=\"o\">=</span>result<span class=\"p\">):</span></td></tr><tr><th id=\"L596\"><a href=\"#L596\">596</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result<span class=\"o\">.</span>result <span class=\"o\">=</span>\u00a0r</td></tr><tr><th id=\"L597\"><a href=\"#L597\">597</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span></td></tr><tr><th id=\"L598\"><a href=\"#L598\">598</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L599\"><a href=\"#L599\">599</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0r</td></tr><tr><th id=\"L600\"><a href=\"#L600\">600</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L601\"><a href=\"#L601\">601</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _deferGenerator<span class=\"p\">(</span>g<span class=\"p\">,</span>\u00a0deferred<span class=\"p\">)</span></td></tr><tr><th id=\"L602\"><a href=\"#L602\">602</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result<span class=\"o\">.</span>d<span class=\"o\">.</span>addBoth<span class=\"p\">(</span>gotResult<span class=\"p\">)</span></td></tr><tr><th id=\"L603\"><a href=\"#L603\">603</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span></td></tr><tr><th id=\"L604\"><a href=\"#L604\">604</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Haven't called back yet, set flag so that we get reinvoked</span></td></tr><tr><th id=\"L605\"><a href=\"#L605\">605</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># and return from the loop</span></td></tr><tr><th id=\"L606\"><a href=\"#L606\">606</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L607\"><a href=\"#L607\">607</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L608\"><a href=\"#L608\">608</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Reset waiting to initial values for next loop</span></td></tr><tr><th id=\"L609\"><a href=\"#L609\">609</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L610\"><a href=\"#L610\">610</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L611\"><a href=\"#L611\">611</a></th><td></td></tr><tr><th id=\"L612\"><a href=\"#L612\">612</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L613\"><a href=\"#L613\">613</a></th><td></td></tr><tr><th id=\"L614\"><a href=\"#L614\">614</a></th><td></td></tr><tr><th id=\"L615\"><a href=\"#L615\">615</a></th><td></td></tr><tr><th id=\"L616\"><a href=\"#L616\">616</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">deferredGenerator</span><span class=\"p\">(</span>f<span class=\"p\">):</span></td></tr><tr><th id=\"L617\"><a href=\"#L617\">617</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L618\"><a href=\"#L618\">618</a></th><td><span class=\"sd\">\u00a0 \u00a0 API Stability: stable</span></td></tr><tr><th id=\"L619\"><a href=\"#L619\">619</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L620\"><a href=\"#L620\">620</a></th><td><span class=\"sd\">\u00a0 \u00a0 Maintainer: U{Christopher Armstrong&lt;mailto:radix@twistedmatrix.com&gt;}</span></td></tr><tr><th id=\"L621\"><a href=\"#L621\">621</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L622\"><a href=\"#L622\">622</a></th><td><span class=\"sd\">\u00a0 \u00a0 deferredGenerator and waitForDeferred help you write Deferred-using code</span></td></tr><tr><th id=\"L623\"><a href=\"#L623\">623</a></th><td><span class=\"sd\">\u00a0 \u00a0 that looks like a regular sequential function. If your code has a minimum</span></td></tr><tr><th id=\"L624\"><a href=\"#L624\">624</a></th><td><span class=\"sd\">\u00a0 \u00a0 requirement of Python 2.5, consider the use of L{inlineCallbacks} instead,</span></td></tr><tr><th id=\"L625\"><a href=\"#L625\">625</a></th><td><span class=\"sd\">\u00a0 \u00a0 which can accomplish the same thing in a more concise manner.</span></td></tr><tr><th id=\"L626\"><a href=\"#L626\">626</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L627\"><a href=\"#L627\">627</a></th><td><span class=\"sd\">\u00a0 \u00a0 There are two important functions involved: waitForDeferred, and</span></td></tr><tr><th id=\"L628\"><a href=\"#L628\">628</a></th><td><span class=\"sd\">\u00a0 \u00a0 deferredGenerator.\u00a0 They are used together, like this::</span></td></tr><tr><th id=\"L629\"><a href=\"#L629\">629</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L630\"><a href=\"#L630\">630</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def thingummy():</span></td></tr><tr><th id=\"L631\"><a href=\"#L631\">631</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = waitForDeferred(makeSomeRequestResultingInDeferred())</span></td></tr><tr><th id=\"L632\"><a href=\"#L632\">632</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield thing</span></td></tr><tr><th id=\"L633\"><a href=\"#L633\">633</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = thing.getResult()</span></td></tr><tr><th id=\"L634\"><a href=\"#L634\">634</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print thing #the result! hoorj!</span></td></tr><tr><th id=\"L635\"><a href=\"#L635\">635</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 thingummy = deferredGenerator(thingummy)</span></td></tr><tr><th id=\"L636\"><a href=\"#L636\">636</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L637\"><a href=\"#L637\">637</a></th><td><span class=\"sd\">\u00a0 \u00a0 waitForDeferred returns something that you should immediately yield; when</span></td></tr><tr><th id=\"L638\"><a href=\"#L638\">638</a></th><td><span class=\"sd\">\u00a0 \u00a0 your generator is resumed, calling thing.getResult() will either give you</span></td></tr><tr><th id=\"L639\"><a href=\"#L639\">639</a></th><td><span class=\"sd\">\u00a0 \u00a0 the result of the Deferred if it was a success, or raise an exception if it</span></td></tr><tr><th id=\"L640\"><a href=\"#L640\">640</a></th><td><span class=\"sd\">\u00a0 \u00a0 was a failure.\u00a0 Calling C{getResult} is B{absolutely mandatory}.\u00a0 If you do</span></td></tr><tr><th id=\"L641\"><a href=\"#L641\">641</a></th><td><span class=\"sd\">\u00a0 \u00a0 not call it, I{your program will not work}.</span></td></tr><tr><th id=\"L642\"><a href=\"#L642\">642</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L643\"><a href=\"#L643\">643</a></th><td><span class=\"sd\">\u00a0 \u00a0 deferredGenerator takes one of these waitForDeferred-using generator</span></td></tr><tr><th id=\"L644\"><a href=\"#L644\">644</a></th><td><span class=\"sd\">\u00a0 \u00a0 functions and converts it into a function that returns a Deferred. The</span></td></tr><tr><th id=\"L645\"><a href=\"#L645\">645</a></th><td><span class=\"sd\">\u00a0 \u00a0 result of the Deferred will be the last value that your generator yielded</span></td></tr><tr><th id=\"L646\"><a href=\"#L646\">646</a></th><td><span class=\"sd\">\u00a0 \u00a0 unless the last value is a waitForDeferred instance, in which case the</span></td></tr><tr><th id=\"L647\"><a href=\"#L647\">647</a></th><td><span class=\"sd\">\u00a0 \u00a0 result will be C{None}.\u00a0 If the function raises an unhandled exception, the</span></td></tr><tr><th id=\"L648\"><a href=\"#L648\">648</a></th><td><span class=\"sd\">\u00a0 \u00a0 Deferred will errback instead.\u00a0 Remember that 'return result' won't work;</span></td></tr><tr><th id=\"L649\"><a href=\"#L649\">649</a></th><td><span class=\"sd\">\u00a0 \u00a0 use 'yield result; return' in place of that.</span></td></tr><tr><th id=\"L650\"><a href=\"#L650\">650</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L651\"><a href=\"#L651\">651</a></th><td><span class=\"sd\">\u00a0 \u00a0 Note that not yielding anything from your generator will make the Deferred</span></td></tr><tr><th id=\"L652\"><a href=\"#L652\">652</a></th><td><span class=\"sd\">\u00a0 \u00a0 result in None. Yielding a Deferred from your generator is also an error</span></td></tr><tr><th id=\"L653\"><a href=\"#L653\">653</a></th><td><span class=\"sd\">\u00a0 \u00a0 condition; always yield waitForDeferred(d) instead.</span></td></tr><tr><th id=\"L654\"><a href=\"#L654\">654</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L655\"><a href=\"#L655\">655</a></th><td><span class=\"sd\">\u00a0 \u00a0 The Deferred returned from your deferred generator may also errback if your</span></td></tr><tr><th id=\"L656\"><a href=\"#L656\">656</a></th><td><span class=\"sd\">\u00a0 \u00a0 generator raised an exception.\u00a0 For example::</span></td></tr><tr><th id=\"L657\"><a href=\"#L657\">657</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L658\"><a href=\"#L658\">658</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def thingummy():</span></td></tr><tr><th id=\"L659\"><a href=\"#L659\">659</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = waitForDeferred(makeSomeRequestResultingInDeferred())</span></td></tr><tr><th id=\"L660\"><a href=\"#L660\">660</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield thing</span></td></tr><tr><th id=\"L661\"><a href=\"#L661\">661</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = thing.getResult()</span></td></tr><tr><th id=\"L662\"><a href=\"#L662\">662</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if thing == 'I love Twisted':</span></td></tr><tr><th id=\"L663\"><a href=\"#L663\">663</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # will become the result of the Deferred</span></td></tr><tr><th id=\"L664\"><a href=\"#L664\">664</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield 'TWISTED IS GREAT!'</span></td></tr><tr><th id=\"L665\"><a href=\"#L665\">665</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return</span></td></tr><tr><th id=\"L666\"><a href=\"#L666\">666</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:</span></td></tr><tr><th id=\"L667\"><a href=\"#L667\">667</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # will trigger an errback</span></td></tr><tr><th id=\"L668\"><a href=\"#L668\">668</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise Exception('DESTROY ALL LIFE')</span></td></tr><tr><th id=\"L669\"><a href=\"#L669\">669</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 thingummy = deferredGenerator(thingummy)</span></td></tr><tr><th id=\"L670\"><a href=\"#L670\">670</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L671\"><a href=\"#L671\">671</a></th><td><span class=\"sd\">\u00a0 \u00a0 Put succinctly, these functions connect deferred-using code with this 'fake</span></td></tr><tr><th id=\"L672\"><a href=\"#L672\">672</a></th><td><span class=\"sd\">\u00a0 \u00a0 blocking' style in both directions: waitForDeferred converts from a</span></td></tr><tr><th id=\"L673\"><a href=\"#L673\">673</a></th><td><span class=\"sd\">\u00a0 \u00a0 Deferred to the 'blocking' style, and deferredGenerator converts from the</span></td></tr><tr><th id=\"L674\"><a href=\"#L674\">674</a></th><td><span class=\"sd\">\u00a0 \u00a0 'blocking' style to a Deferred.</span></td></tr><tr><th id=\"L675\"><a href=\"#L675\">675</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L676\"><a href=\"#L676\">676</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">unwindGenerator</span><span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">):</span></td></tr><tr><th id=\"L677\"><a href=\"#L677\">677</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0_deferGenerator<span class=\"p\">(</span>f<span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">),</span>\u00a0Deferred<span class=\"p\">())</span></td></tr><tr><th id=\"L678\"><a href=\"#L678\">678</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0mergeFunctionMetadata<span class=\"p\">(</span>f<span class=\"p\">,</span>\u00a0unwindGenerator<span class=\"p\">)</span></td></tr><tr><th id=\"L679\"><a href=\"#L679\">679</a></th><td></td></tr><tr><th id=\"L680\"><a href=\"#L680\">680</a></th><td></td></tr><tr><th id=\"L681\"><a href=\"#L681\">681</a></th><td><span class=\"c\">## inlineCallbacks</span></td></tr><tr><th id=\"L682\"><a href=\"#L682\">682</a></th><td></td></tr><tr><th id=\"L683\"><a href=\"#L683\">683</a></th><td><span class=\"c\"># BaseException is only in Py 2.5.</span></td></tr><tr><th id=\"L684\"><a href=\"#L684\">684</a></th><td><span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L685\"><a href=\"#L685\">685</a></th><td>\u00a0 \u00a0 <span class=\"ne\">BaseException</span></td></tr><tr><th id=\"L686\"><a href=\"#L686\">686</a></th><td><span class=\"k\">except</span>\u00a0<span class=\"ne\">NameError</span><span class=\"p\">:</span></td></tr><tr><th id=\"L687\"><a href=\"#L687\">687</a></th><td>\u00a0 \u00a0 <span class=\"ne\">BaseException</span><span class=\"o\">=</span><span class=\"ne\">Exception</span></td></tr><tr><th id=\"L688\"><a href=\"#L688\">688</a></th><td></td></tr><tr><th id=\"L689\"><a href=\"#L689\">689</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_DefGen_Return</span><span class=\"p\">(</span><span class=\"ne\">BaseException</span><span class=\"p\">):</span></td></tr><tr><th id=\"L690\"><a href=\"#L690\">690</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0value<span class=\"p\">):</span></td></tr><tr><th id=\"L691\"><a href=\"#L691\">691</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>value <span class=\"o\">=</span>\u00a0value</td></tr><tr><th id=\"L692\"><a href=\"#L692\">692</a></th><td></td></tr><tr><th id=\"L693\"><a href=\"#L693\">693</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">returnValue</span><span class=\"p\">(</span>val<span class=\"p\">):</span></td></tr><tr><th id=\"L694\"><a href=\"#L694\">694</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L695\"><a href=\"#L695\">695</a></th><td><span class=\"sd\">\u00a0 \u00a0 Return val from a L{inlineCallbacks} generator.</span></td></tr><tr><th id=\"L696\"><a href=\"#L696\">696</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L697\"><a href=\"#L697\">697</a></th><td><span class=\"sd\">\u00a0 \u00a0 Note: this is currently implemented by raising an exception</span></td></tr><tr><th id=\"L698\"><a href=\"#L698\">698</a></th><td><span class=\"sd\">\u00a0 \u00a0 derived from BaseException.\u00a0 You might want to change any</span></td></tr><tr><th id=\"L699\"><a href=\"#L699\">699</a></th><td><span class=\"sd\">\u00a0 \u00a0 'except:' clauses to an 'except Exception:' clause so as not to</span></td></tr><tr><th id=\"L700\"><a href=\"#L700\">700</a></th><td><span class=\"sd\">\u00a0 \u00a0 catch this exception.</span></td></tr><tr><th id=\"L701\"><a href=\"#L701\">701</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L702\"><a href=\"#L702\">702</a></th><td><span class=\"sd\">\u00a0 \u00a0 Also: while this function currently will work when called from</span></td></tr><tr><th id=\"L703\"><a href=\"#L703\">703</a></th><td><span class=\"sd\">\u00a0 \u00a0 within arbitrary functions called from within the generator, do</span></td></tr><tr><th id=\"L704\"><a href=\"#L704\">704</a></th><td><span class=\"sd\">\u00a0 \u00a0 not rely upon this behavior.</span></td></tr><tr><th id=\"L705\"><a href=\"#L705\">705</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L706\"><a href=\"#L706\">706</a></th><td>\u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0_DefGen_Return<span class=\"p\">(</span>val<span class=\"p\">)</span></td></tr><tr><th id=\"L707\"><a href=\"#L707\">707</a></th><td></td></tr><tr><th id=\"L708\"><a href=\"#L708\">708</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">_inlineCallbacks</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0g<span class=\"p\">,</span>\u00a0deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L709\"><a href=\"#L709\">709</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L710\"><a href=\"#L710\">710</a></th><td><span class=\"sd\">\u00a0 \u00a0 See L{inlineCallbacks}.</span></td></tr><tr><th id=\"L711\"><a href=\"#L711\">711</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L712\"><a href=\"#L712\">712</a></th><td>\u00a0 \u00a0 <span class=\"c\"># This function is complicated by the need to prevent unbounded recursion</span></td></tr><tr><th id=\"L713\"><a href=\"#L713\">713</a></th><td>\u00a0 \u00a0 <span class=\"c\"># arising from repeatedly yielding immediately ready deferreds.\u00a0 This while</span></td></tr><tr><th id=\"L714\"><a href=\"#L714\">714</a></th><td>\u00a0 \u00a0 <span class=\"c\"># loop and the waiting variable solve that by manually unfolding the</span></td></tr><tr><th id=\"L715\"><a href=\"#L715\">715</a></th><td>\u00a0 \u00a0 <span class=\"c\"># recursion.</span></td></tr><tr><th id=\"L716\"><a href=\"#L716\">716</a></th><td></td></tr><tr><th id=\"L717\"><a href=\"#L717\">717</a></th><td>\u00a0 \u00a0 waiting <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">,</span>\u00a0<span class=\"c\"># waiting for result?</span></td></tr><tr><th id=\"L718\"><a href=\"#L718\">718</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"bp\">None</span><span class=\"p\">]</span>\u00a0<span class=\"c\"># result</span></td></tr><tr><th id=\"L719\"><a href=\"#L719\">719</a></th><td></td></tr><tr><th id=\"L720\"><a href=\"#L720\">720</a></th><td>\u00a0 \u00a0 <span class=\"k\">while</span>\u00a0<span class=\"mi\">1</span><span class=\"p\">:</span></td></tr><tr><th id=\"L721\"><a href=\"#L721\">721</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">try</span><span class=\"p\">:</span></td></tr><tr><th id=\"L722\"><a href=\"#L722\">722</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Send the last result back as the result of the yield expression.</span></td></tr><tr><th id=\"L723\"><a href=\"#L723\">723</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0failure<span class=\"o\">.</span>Failure<span class=\"p\">):</span></td></tr><tr><th id=\"L724\"><a href=\"#L724\">724</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0g<span class=\"o\">.</span>throw<span class=\"p\">(</span>result<span class=\"o\">.</span>type<span class=\"p\">,</span>\u00a0result<span class=\"o\">.</span>value<span class=\"p\">,</span>\u00a0result<span class=\"o\">.</span>tb<span class=\"p\">)</span></td></tr><tr><th id=\"L725\"><a href=\"#L725\">725</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L726\"><a href=\"#L726\">726</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0g<span class=\"o\">.</span>send<span class=\"p\">(</span>result<span class=\"p\">)</span></td></tr><tr><th id=\"L727\"><a href=\"#L727\">727</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0<span class=\"ne\">StopIteration</span><span class=\"p\">:</span></td></tr><tr><th id=\"L728\"><a href=\"#L728\">728</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># fell off the end, or \"return\" statement</span></td></tr><tr><th id=\"L729\"><a href=\"#L729\">729</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span></td></tr><tr><th id=\"L730\"><a href=\"#L730\">730</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L731\"><a href=\"#L731\">731</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span>\u00a0_DefGen_Return<span class=\"p\">,</span>\u00a0e<span class=\"p\">:</span></td></tr><tr><th id=\"L732\"><a href=\"#L732\">732</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># returnValue call</span></td></tr><tr><th id=\"L733\"><a href=\"#L733\">733</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>callback<span class=\"p\">(</span>e<span class=\"o\">.</span>value<span class=\"p\">)</span></td></tr><tr><th id=\"L734\"><a href=\"#L734\">734</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L735\"><a href=\"#L735\">735</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">except</span><span class=\"p\">:</span></td></tr><tr><th id=\"L736\"><a href=\"#L736\">736</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deferred<span class=\"o\">.</span>errback<span class=\"p\">()</span></td></tr><tr><th id=\"L737\"><a href=\"#L737\">737</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L738\"><a href=\"#L738\">738</a></th><td></td></tr><tr><th id=\"L739\"><a href=\"#L739\">739</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">isinstance</span><span class=\"p\">(</span>result<span class=\"p\">,</span>\u00a0Deferred<span class=\"p\">):</span></td></tr><tr><th id=\"L740\"><a href=\"#L740\">740</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># a deferred was yielded, get the result.</span></td></tr><tr><th id=\"L741\"><a href=\"#L741\">741</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">gotResult</span><span class=\"p\">(</span>r<span class=\"p\">):</span></td></tr><tr><th id=\"L742\"><a href=\"#L742\">742</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span></td></tr><tr><th id=\"L743\"><a href=\"#L743\">743</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L744\"><a href=\"#L744\">744</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0r</td></tr><tr><th id=\"L745\"><a href=\"#L745\">745</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L746\"><a href=\"#L746\">746</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _inlineCallbacks<span class=\"p\">(</span>r<span class=\"p\">,</span>\u00a0g<span class=\"p\">,</span>\u00a0deferred<span class=\"p\">)</span></td></tr><tr><th id=\"L747\"><a href=\"#L747\">747</a></th><td></td></tr><tr><th id=\"L748\"><a href=\"#L748\">748</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result<span class=\"o\">.</span>addBoth<span class=\"p\">(</span>gotResult<span class=\"p\">)</span></td></tr><tr><th id=\"L749\"><a href=\"#L749\">749</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span></td></tr><tr><th id=\"L750\"><a href=\"#L750\">750</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Haven't called back yet, set flag so that we get reinvoked</span></td></tr><tr><th id=\"L751\"><a href=\"#L751\">751</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># and return from the loop</span></td></tr><tr><th id=\"L752\"><a href=\"#L752\">752</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">False</span></td></tr><tr><th id=\"L753\"><a href=\"#L753\">753</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L754\"><a href=\"#L754\">754</a></th><td></td></tr><tr><th id=\"L755\"><a href=\"#L755\">755</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result <span class=\"o\">=</span>\u00a0waiting<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span></td></tr><tr><th id=\"L756\"><a href=\"#L756\">756</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># Reset waiting to initial values for next loop.\u00a0 gotResult uses</span></td></tr><tr><th id=\"L757\"><a href=\"#L757\">757</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># waiting, but this isn't a problem because gotResult is only</span></td></tr><tr><th id=\"L758\"><a href=\"#L758\">758</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># executed once, and if it hasn't been executed yet, the return</span></td></tr><tr><th id=\"L759\"><a href=\"#L759\">759</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># branch above would have been taken.</span></td></tr><tr><th id=\"L760\"><a href=\"#L760\">760</a></th><td></td></tr><tr><th id=\"L761\"><a href=\"#L761\">761</a></th><td></td></tr><tr><th id=\"L762\"><a href=\"#L762\">762</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">True</span></td></tr><tr><th id=\"L763\"><a href=\"#L763\">763</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 waiting<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\u00a0<span class=\"o\">=</span>\u00a0<span class=\"bp\">None</span></td></tr><tr><th id=\"L764\"><a href=\"#L764\">764</a></th><td></td></tr><tr><th id=\"L765\"><a href=\"#L765\">765</a></th><td></td></tr><tr><th id=\"L766\"><a href=\"#L766\">766</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0deferred</td></tr><tr><th id=\"L767\"><a href=\"#L767\">767</a></th><td></td></tr><tr><th id=\"L768\"><a href=\"#L768\">768</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">inlineCallbacks</span><span class=\"p\">(</span>f<span class=\"p\">):</span></td></tr><tr><th id=\"L769\"><a href=\"#L769\">769</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L770\"><a href=\"#L770\">770</a></th><td><span class=\"sd\">\u00a0 \u00a0 API Stability: semi-stable</span></td></tr><tr><th id=\"L771\"><a href=\"#L771\">771</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L772\"><a href=\"#L772\">772</a></th><td><span class=\"sd\">\u00a0 \u00a0 Maintainer: U{Christopher Armstrong&lt;mailto:radix@twistedmatrix.com&gt;}</span></td></tr><tr><th id=\"L773\"><a href=\"#L773\">773</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L774\"><a href=\"#L774\">774</a></th><td><span class=\"sd\">\u00a0 \u00a0 WARNING: this function will not work in Python 2.4 and earlier!</span></td></tr><tr><th id=\"L775\"><a href=\"#L775\">775</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L776\"><a href=\"#L776\">776</a></th><td><span class=\"sd\">\u00a0 \u00a0 inlineCallbacks helps you write Deferred-using code that looks like a</span></td></tr><tr><th id=\"L777\"><a href=\"#L777\">777</a></th><td><span class=\"sd\">\u00a0 \u00a0 regular sequential function. This function uses features of Python 2.5</span></td></tr><tr><th id=\"L778\"><a href=\"#L778\">778</a></th><td><span class=\"sd\">\u00a0 \u00a0 generators.\u00a0 If you need to be compatible with Python 2.4 or before, use</span></td></tr><tr><th id=\"L779\"><a href=\"#L779\">779</a></th><td><span class=\"sd\">\u00a0 \u00a0 the L{deferredGenerator} function instead, which accomplishes the same</span></td></tr><tr><th id=\"L780\"><a href=\"#L780\">780</a></th><td><span class=\"sd\">\u00a0 \u00a0 thing, but with somewhat more boilerplate.</span></td></tr><tr><th id=\"L781\"><a href=\"#L781\">781</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L782\"><a href=\"#L782\">782</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def thingummy():</span></td></tr><tr><th id=\"L783\"><a href=\"#L783\">783</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = yield makeSomeRequestResultingInDeferred()</span></td></tr><tr><th id=\"L784\"><a href=\"#L784\">784</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print thing #the result! hoorj!</span></td></tr><tr><th id=\"L785\"><a href=\"#L785\">785</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 thingummy = inlineCallbacks(thingummy)</span></td></tr><tr><th id=\"L786\"><a href=\"#L786\">786</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L787\"><a href=\"#L787\">787</a></th><td><span class=\"sd\">\u00a0 \u00a0 When you call anything that results in a Deferred, you can simply yield it;</span></td></tr><tr><th id=\"L788\"><a href=\"#L788\">788</a></th><td><span class=\"sd\">\u00a0 \u00a0 your generator will automatically be resumed when the Deferred's result is</span></td></tr><tr><th id=\"L789\"><a href=\"#L789\">789</a></th><td><span class=\"sd\">\u00a0 \u00a0 available. The generator will be sent the result of the Deferred with the</span></td></tr><tr><th id=\"L790\"><a href=\"#L790\">790</a></th><td><span class=\"sd\">\u00a0 \u00a0 'send' method on generators, or if the result was a failure, 'throw'.</span></td></tr><tr><th id=\"L791\"><a href=\"#L791\">791</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L792\"><a href=\"#L792\">792</a></th><td><span class=\"sd\">\u00a0 \u00a0 Your inlineCallbacks-enabled generator will return a Deferred object, which</span></td></tr><tr><th id=\"L793\"><a href=\"#L793\">793</a></th><td><span class=\"sd\">\u00a0 \u00a0 will result in the return value of the generator (or will fail with a</span></td></tr><tr><th id=\"L794\"><a href=\"#L794\">794</a></th><td><span class=\"sd\">\u00a0 \u00a0 failure object if your generator raises an unhandled exception). Note that</span></td></tr><tr><th id=\"L795\"><a href=\"#L795\">795</a></th><td><span class=\"sd\">\u00a0 \u00a0 you can't use 'return result' to return a value; use 'returnValue(result)'</span></td></tr><tr><th id=\"L796\"><a href=\"#L796\">796</a></th><td><span class=\"sd\">\u00a0 \u00a0 instead. Falling off the end of the generator, or simply using 'return'</span></td></tr><tr><th id=\"L797\"><a href=\"#L797\">797</a></th><td><span class=\"sd\">\u00a0 \u00a0 will cause the Deferred to have a result of None.</span></td></tr><tr><th id=\"L798\"><a href=\"#L798\">798</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L799\"><a href=\"#L799\">799</a></th><td><span class=\"sd\">\u00a0 \u00a0 The Deferred returned from your deferred generator may errback if your</span></td></tr><tr><th id=\"L800\"><a href=\"#L800\">800</a></th><td><span class=\"sd\">\u00a0 \u00a0 generator raised an exception.</span></td></tr><tr><th id=\"L801\"><a href=\"#L801\">801</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L802\"><a href=\"#L802\">802</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 def thingummy():</span></td></tr><tr><th id=\"L803\"><a href=\"#L803\">803</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 thing = yield makeSomeRequestResultingInDeferred()</span></td></tr><tr><th id=\"L804\"><a href=\"#L804\">804</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if thing == 'I love Twisted':</span></td></tr><tr><th id=\"L805\"><a href=\"#L805\">805</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # will become the result of the Deferred</span></td></tr><tr><th id=\"L806\"><a href=\"#L806\">806</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 returnValue('TWISTED IS GREAT!')</span></td></tr><tr><th id=\"L807\"><a href=\"#L807\">807</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else:</span></td></tr><tr><th id=\"L808\"><a href=\"#L808\">808</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # will trigger an errback</span></td></tr><tr><th id=\"L809\"><a href=\"#L809\">809</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise Exception('DESTROY ALL LIFE')</span></td></tr><tr><th id=\"L810\"><a href=\"#L810\">810</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 thingummy = inlineCallbacks(thingummy)</span></td></tr><tr><th id=\"L811\"><a href=\"#L811\">811</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L812\"><a href=\"#L812\">812</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">unwindGenerator</span><span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">):</span></td></tr><tr><th id=\"L813\"><a href=\"#L813\">813</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0_inlineCallbacks<span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0f<span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">),</span>\u00a0Deferred<span class=\"p\">())</span></td></tr><tr><th id=\"L814\"><a href=\"#L814\">814</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0mergeFunctionMetadata<span class=\"p\">(</span>f<span class=\"p\">,</span>\u00a0unwindGenerator<span class=\"p\">)</span></td></tr><tr><th id=\"L815\"><a href=\"#L815\">815</a></th><td></td></tr><tr><th id=\"L816\"><a href=\"#L816\">816</a></th><td></td></tr><tr><th id=\"L817\"><a href=\"#L817\">817</a></th><td><span class=\"c\">## DeferredLock/DeferredQueue</span></td></tr><tr><th id=\"L818\"><a href=\"#L818\">818</a></th><td></td></tr><tr><th id=\"L819\"><a href=\"#L819\">819</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">_ConcurrencyPrimitive</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span></td></tr><tr><th id=\"L820\"><a href=\"#L820\">820</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L821\"><a href=\"#L821\">821</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L822\"><a href=\"#L822\">822</a></th><td></td></tr><tr><th id=\"L823\"><a href=\"#L823\">823</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">_releaseAndReturn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0r<span class=\"p\">):</span></td></tr><tr><th id=\"L824\"><a href=\"#L824\">824</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>release<span class=\"p\">()</span></td></tr><tr><th id=\"L825\"><a href=\"#L825\">825</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0r</td></tr><tr><th id=\"L826\"><a href=\"#L826\">826</a></th><td></td></tr><tr><th id=\"L827\"><a href=\"#L827\">827</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">):</span></td></tr><tr><th id=\"L828\"><a href=\"#L828\">828</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Acquire, run, release.</span></td></tr><tr><th id=\"L829\"><a href=\"#L829\">829</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L830\"><a href=\"#L830\">830</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 This function takes a callable as its first argument and any</span></td></tr><tr><th id=\"L831\"><a href=\"#L831\">831</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 number of other positional and keyword arguments.\u00a0 When the</span></td></tr><tr><th id=\"L832\"><a href=\"#L832\">832</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 lock or semaphore is acquired, the callable will be invoked</span></td></tr><tr><th id=\"L833\"><a href=\"#L833\">833</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 with those arguments.</span></td></tr><tr><th id=\"L834\"><a href=\"#L834\">834</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L835\"><a href=\"#L835\">835</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 The callable may return a Deferred; if it does, the lock or</span></td></tr><tr><th id=\"L836\"><a href=\"#L836\">836</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 semaphore won't be released until that Deferred fires.</span></td></tr><tr><th id=\"L837\"><a href=\"#L837\">837</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L838\"><a href=\"#L838\">838</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: Deferred of function result.</span></td></tr><tr><th id=\"L839\"><a href=\"#L839\">839</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L840\"><a href=\"#L840\">840</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span>args<span class=\"p\">)</span>\u00a0<span class=\"o\">&lt;</span>\u00a0<span class=\"mi\">2</span><span class=\"p\">:</span></td></tr><tr><th id=\"L841\"><a href=\"#L841\">841</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0args<span class=\"p\">:</span></td></tr><tr><th id=\"L842\"><a href=\"#L842\">842</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\"run() takes at least 2 arguments, none given.\"</span><span class=\"p\">)</span></td></tr><tr><th id=\"L843\"><a href=\"#L843\">843</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0<span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">%s</span><span class=\"s\">.run() takes at least 2 arguments, 1 given\"</span>\u00a0<span class=\"o\">%</span>\u00a0<span class=\"p\">(</span></td></tr><tr><th id=\"L844\"><a href=\"#L844\">844</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 args<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span>__class__<span class=\"o\">.</span>__name__<span class=\"p\">,))</span></td></tr><tr><th id=\"L845\"><a href=\"#L845\">845</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0f <span class=\"o\">=</span>\u00a0args<span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span></td></tr><tr><th id=\"L846\"><a href=\"#L846\">846</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 args <span class=\"o\">=</span>\u00a0args<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span></td></tr><tr><th id=\"L847\"><a href=\"#L847\">847</a></th><td></td></tr><tr><th id=\"L848\"><a href=\"#L848\">848</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">execute</span><span class=\"p\">(</span>ignoredResult<span class=\"p\">):</span></td></tr><tr><th id=\"L849\"><a href=\"#L849\">849</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0maybeDeferred<span class=\"p\">(</span>f<span class=\"p\">,</span>\u00a0<span class=\"o\">*</span>args<span class=\"p\">,</span>\u00a0<span class=\"o\">**</span>kwargs<span class=\"p\">)</span></td></tr><tr><th id=\"L850\"><a href=\"#L850\">850</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>addBoth<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>_releaseAndReturn<span class=\"p\">)</span></td></tr><tr><th id=\"L851\"><a href=\"#L851\">851</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L852\"><a href=\"#L852\">852</a></th><td></td></tr><tr><th id=\"L853\"><a href=\"#L853\">853</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>acquire<span class=\"p\">()</span></td></tr><tr><th id=\"L854\"><a href=\"#L854\">854</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>addCallback<span class=\"p\">(</span>execute<span class=\"p\">)</span></td></tr><tr><th id=\"L855\"><a href=\"#L855\">855</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L856\"><a href=\"#L856\">856</a></th><td></td></tr><tr><th id=\"L857\"><a href=\"#L857\">857</a></th><td></td></tr><tr><th id=\"L858\"><a href=\"#L858\">858</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">DeferredLock</span><span class=\"p\">(</span>_ConcurrencyPrimitive<span class=\"p\">):</span></td></tr><tr><th id=\"L859\"><a href=\"#L859\">859</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"A lock for event driven systems.</span></td></tr><tr><th id=\"L860\"><a href=\"#L860\">860</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L861\"><a href=\"#L861\">861</a></th><td><span class=\"sd\">\u00a0 \u00a0 API stability: Unstable</span></td></tr><tr><th id=\"L862\"><a href=\"#L862\">862</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L863\"><a href=\"#L863\">863</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar locked: True when this Lock has been acquired, false at all</span></td></tr><tr><th id=\"L864\"><a href=\"#L864\">864</a></th><td><span class=\"sd\">\u00a0 \u00a0 other times.\u00a0 Do not change this value, but it is useful to</span></td></tr><tr><th id=\"L865\"><a href=\"#L865\">865</a></th><td><span class=\"sd\">\u00a0 \u00a0 examine for the equivalent of a \\\"non-blocking\\\" acquisition.</span></td></tr><tr><th id=\"L866\"><a href=\"#L866\">866</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L867\"><a href=\"#L867\">867</a></th><td></td></tr><tr><th id=\"L868\"><a href=\"#L868\">868</a></th><td>\u00a0 \u00a0 locked <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L869\"><a href=\"#L869\">869</a></th><td></td></tr><tr><th id=\"L870\"><a href=\"#L870\">870</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">acquire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L871\"><a href=\"#L871\">871</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Attempt to acquire the lock.</span></td></tr><tr><th id=\"L872\"><a href=\"#L872\">872</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L873\"><a href=\"#L873\">873</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which fires on lock acquisition.</span></td></tr><tr><th id=\"L874\"><a href=\"#L874\">874</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L875\"><a href=\"#L875\">875</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L876\"><a href=\"#L876\">876</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>locked<span class=\"p\">:</span></td></tr><tr><th id=\"L877\"><a href=\"#L877\">877</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>append<span class=\"p\">(</span>d<span class=\"p\">)</span></td></tr><tr><th id=\"L878\"><a href=\"#L878\">878</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L879\"><a href=\"#L879\">879</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>locked <span class=\"o\">=</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L880\"><a href=\"#L880\">880</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L881\"><a href=\"#L881\">881</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L882\"><a href=\"#L882\">882</a></th><td></td></tr><tr><th id=\"L883\"><a href=\"#L883\">883</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">release</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L884\"><a href=\"#L884\">884</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Release the lock.</span></td></tr><tr><th id=\"L885\"><a href=\"#L885\">885</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L886\"><a href=\"#L886\">886</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Should be called by whomever did the acquire() when the shared</span></td></tr><tr><th id=\"L887\"><a href=\"#L887\">887</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 resource is free.</span></td></tr><tr><th id=\"L888\"><a href=\"#L888\">888</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L889\"><a href=\"#L889\">889</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>locked<span class=\"p\">,</span>\u00a0<span class=\"s\">\"Tried to release an unlocked lock\"</span></td></tr><tr><th id=\"L890\"><a href=\"#L890\">890</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>locked <span class=\"o\">=</span>\u00a0<span class=\"mi\">0</span></td></tr><tr><th id=\"L891\"><a href=\"#L891\">891</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"p\">:</span></td></tr><tr><th id=\"L892\"><a href=\"#L892\">892</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># someone is waiting to acquire lock</span></td></tr><tr><th id=\"L893\"><a href=\"#L893\">893</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>locked <span class=\"o\">=</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L894\"><a href=\"#L894\">894</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span></td></tr><tr><th id=\"L895\"><a href=\"#L895\">895</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L896\"><a href=\"#L896\">896</a></th><td></td></tr><tr><th id=\"L897\"><a href=\"#L897\">897</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">DeferredSemaphore</span><span class=\"p\">(</span>_ConcurrencyPrimitive<span class=\"p\">):</span></td></tr><tr><th id=\"L898\"><a href=\"#L898\">898</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"A semaphore for event driven systems.</span></td></tr><tr><th id=\"L899\"><a href=\"#L899\">899</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L900\"><a href=\"#L900\">900</a></th><td><span class=\"sd\">\u00a0 \u00a0 API stability: Unstable</span></td></tr><tr><th id=\"L901\"><a href=\"#L901\">901</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L902\"><a href=\"#L902\">902</a></th><td></td></tr><tr><th id=\"L903\"><a href=\"#L903\">903</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0tokens<span class=\"p\">):</span></td></tr><tr><th id=\"L904\"><a href=\"#L904\">904</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 _ConcurrencyPrimitive<span class=\"o\">.</span>__init__<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L905\"><a href=\"#L905\">905</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">=</span>\u00a0tokens</td></tr><tr><th id=\"L906\"><a href=\"#L906\">906</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>limit <span class=\"o\">=</span>\u00a0tokens</td></tr><tr><th id=\"L907\"><a href=\"#L907\">907</a></th><td></td></tr><tr><th id=\"L908\"><a href=\"#L908\">908</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">acquire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L909\"><a href=\"#L909\">909</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Attempt to acquire the token.</span></td></tr><tr><th id=\"L910\"><a href=\"#L910\">910</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L911\"><a href=\"#L911\">911</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which fires on token acquisition.</span></td></tr><tr><th id=\"L912\"><a href=\"#L912\">912</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L913\"><a href=\"#L913\">913</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">&gt;=</span>\u00a0<span class=\"mi\">0</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"Internal inconsistency??\u00a0 tokens should never be negative\"</span></td></tr><tr><th id=\"L914\"><a href=\"#L914\">914</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L915\"><a href=\"#L915\">915</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"ow\">not</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens<span class=\"p\">:</span></td></tr><tr><th id=\"L916\"><a href=\"#L916\">916</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>append<span class=\"p\">(</span>d<span class=\"p\">)</span></td></tr><tr><th id=\"L917\"><a href=\"#L917\">917</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L918\"><a href=\"#L918\">918</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">-</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L919\"><a href=\"#L919\">919</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L920\"><a href=\"#L920\">920</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L921\"><a href=\"#L921\">921</a></th><td></td></tr><tr><th id=\"L922\"><a href=\"#L922\">922</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">release</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L923\"><a href=\"#L923\">923</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Release the token.</span></td></tr><tr><th id=\"L924\"><a href=\"#L924\">924</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L925\"><a href=\"#L925\">925</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Should be called by whoever did the acquire() when the shared</span></td></tr><tr><th id=\"L926\"><a href=\"#L926\">926</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 resource is free.</span></td></tr><tr><th id=\"L927\"><a href=\"#L927\">927</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L928\"><a href=\"#L928\">928</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">assert</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">&lt;</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>limit<span class=\"p\">,</span>\u00a0<span class=\"s\">\"Someone released me too many times: too many tokens!\"</span></td></tr><tr><th id=\"L929\"><a href=\"#L929\">929</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">+</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L930\"><a href=\"#L930\">930</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"p\">:</span></td></tr><tr><th id=\"L931\"><a href=\"#L931\">931</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"c\"># someone is waiting to acquire token</span></td></tr><tr><th id=\"L932\"><a href=\"#L932\">932</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>tokens <span class=\"o\">-</span>\u00a0<span class=\"mi\">1</span></td></tr><tr><th id=\"L933\"><a href=\"#L933\">933</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span></td></tr><tr><th id=\"L934\"><a href=\"#L934\">934</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d<span class=\"o\">.</span>callback<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></td></tr><tr><th id=\"L935\"><a href=\"#L935\">935</a></th><td></td></tr><tr><th id=\"L936\"><a href=\"#L936\">936</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">QueueOverflow</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L937\"><a href=\"#L937\">937</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L938\"><a href=\"#L938\">938</a></th><td></td></tr><tr><th id=\"L939\"><a href=\"#L939\">939</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">QueueUnderflow</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span></td></tr><tr><th id=\"L940\"><a href=\"#L940\">940</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L941\"><a href=\"#L941\">941</a></th><td></td></tr><tr><th id=\"L942\"><a href=\"#L942\">942</a></th><td></td></tr><tr><th id=\"L943\"><a href=\"#L943\">943</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">DeferredQueue</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span></td></tr><tr><th id=\"L944\"><a href=\"#L944\">944</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"An event driven queue.</span></td></tr><tr><th id=\"L945\"><a href=\"#L945\">945</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L946\"><a href=\"#L946\">946</a></th><td><span class=\"sd\">\u00a0 \u00a0 API stability: Unstable</span></td></tr><tr><th id=\"L947\"><a href=\"#L947\">947</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L948\"><a href=\"#L948\">948</a></th><td><span class=\"sd\">\u00a0 \u00a0 Objects may be added as usual to this queue.\u00a0 When an attempt is</span></td></tr><tr><th id=\"L949\"><a href=\"#L949\">949</a></th><td><span class=\"sd\">\u00a0 \u00a0 made to retrieve an object when the queue is empty, a Deferred is</span></td></tr><tr><th id=\"L950\"><a href=\"#L950\">950</a></th><td><span class=\"sd\">\u00a0 \u00a0 returned which will fire when an object becomes available.</span></td></tr><tr><th id=\"L951\"><a href=\"#L951\">951</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L952\"><a href=\"#L952\">952</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar size: The maximum number of objects to allow into the queue</span></td></tr><tr><th id=\"L953\"><a href=\"#L953\">953</a></th><td><span class=\"sd\">\u00a0 \u00a0 at a time.\u00a0 When an attempt to add a new object would exceed this</span></td></tr><tr><th id=\"L954\"><a href=\"#L954\">954</a></th><td><span class=\"sd\">\u00a0 \u00a0 limit, QueueOverflow is raised synchronously.\u00a0 None for no limit.</span></td></tr><tr><th id=\"L955\"><a href=\"#L955\">955</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L956\"><a href=\"#L956\">956</a></th><td><span class=\"sd\">\u00a0 \u00a0 @ivar backlog: The maximum number of Deferred gets to allow at</span></td></tr><tr><th id=\"L957\"><a href=\"#L957\">957</a></th><td><span class=\"sd\">\u00a0 \u00a0 one time.\u00a0 When an attempt is made to get an object which would</span></td></tr><tr><th id=\"L958\"><a href=\"#L958\">958</a></th><td><span class=\"sd\">\u00a0 \u00a0 exceed this limit, QueueUnderflow is raised synchronously.\u00a0 None</span></td></tr><tr><th id=\"L959\"><a href=\"#L959\">959</a></th><td><span class=\"sd\">\u00a0 \u00a0 for no limit.</span></td></tr><tr><th id=\"L960\"><a href=\"#L960\">960</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L961\"><a href=\"#L961\">961</a></th><td></td></tr><tr><th id=\"L962\"><a href=\"#L962\">962</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0size<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\u00a0backlog<span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span></td></tr><tr><th id=\"L963\"><a href=\"#L963\">963</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L964\"><a href=\"#L964\">964</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>pending <span class=\"o\">=</span>\u00a0<span class=\"p\">[]</span></td></tr><tr><th id=\"L965\"><a href=\"#L965\">965</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>size <span class=\"o\">=</span>\u00a0size</td></tr><tr><th id=\"L966\"><a href=\"#L966\">966</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>backlog <span class=\"o\">=</span>\u00a0backlog</td></tr><tr><th id=\"L967\"><a href=\"#L967\">967</a></th><td></td></tr><tr><th id=\"L968\"><a href=\"#L968\">968</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\u00a0obj<span class=\"p\">):</span></td></tr><tr><th id=\"L969\"><a href=\"#L969\">969</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Add an object to this queue.</span></td></tr><tr><th id=\"L970\"><a href=\"#L970\">970</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L971\"><a href=\"#L971\">971</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @raise QueueOverflow: Too many objects are in this queue.</span></td></tr><tr><th id=\"L972\"><a href=\"#L972\">972</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L973\"><a href=\"#L973\">973</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"p\">:</span></td></tr><tr><th id=\"L974\"><a href=\"#L974\">974</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span>callback<span class=\"p\">(</span>obj<span class=\"p\">)</span></td></tr><tr><th id=\"L975\"><a href=\"#L975\">975</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>size <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span>\u00a0<span class=\"ow\">or</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>pending<span class=\"p\">)</span>\u00a0<span class=\"o\">&lt;</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>size<span class=\"p\">:</span></td></tr><tr><th id=\"L976\"><a href=\"#L976\">976</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>pending<span class=\"o\">.</span>append<span class=\"p\">(</span>obj<span class=\"p\">)</span></td></tr><tr><th id=\"L977\"><a href=\"#L977\">977</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L978\"><a href=\"#L978\">978</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0QueueOverflow<span class=\"p\">()</span></td></tr><tr><th id=\"L979\"><a href=\"#L979\">979</a></th><td></td></tr><tr><th id=\"L980\"><a href=\"#L980\">980</a></th><td>\u00a0 \u00a0 <span class=\"k\">def</span>\u00a0<span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span></td></tr><tr><th id=\"L981\"><a href=\"#L981\">981</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"sd\">\"\"\"Attempt to retrieve and remove an object from the queue.</span></td></tr><tr><th id=\"L982\"><a href=\"#L982\">982</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L983\"><a href=\"#L983\">983</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @return: a Deferred which fires with the next object available in the queue.</span></td></tr><tr><th id=\"L984\"><a href=\"#L984\">984</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L985\"><a href=\"#L985\">985</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 @raise QueueUnderflow: Too many (more than C{backlog})</span></td></tr><tr><th id=\"L986\"><a href=\"#L986\">986</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 Deferreds are already waiting for an object from this queue.</span></td></tr><tr><th id=\"L987\"><a href=\"#L987\">987</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L988\"><a href=\"#L988\">988</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">if</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>pending<span class=\"p\">:</span></td></tr><tr><th id=\"L989\"><a href=\"#L989\">989</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0succeed<span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>pending<span class=\"o\">.</span>pop<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span></td></tr><tr><th id=\"L990\"><a href=\"#L990\">990</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">elif</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>backlog <span class=\"ow\">is</span>\u00a0<span class=\"bp\">None</span>\u00a0<span class=\"ow\">or</span>\u00a0<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"p\">)</span>\u00a0<span class=\"o\">&lt;</span>\u00a0<span class=\"bp\">self</span><span class=\"o\">.</span>backlog<span class=\"p\">:</span></td></tr><tr><th id=\"L991\"><a href=\"#L991\">991</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 d <span class=\"o\">=</span>\u00a0Deferred<span class=\"p\">()</span></td></tr><tr><th id=\"L992\"><a href=\"#L992\">992</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"bp\">self</span><span class=\"o\">.</span>waiting<span class=\"o\">.</span>append<span class=\"p\">(</span>d<span class=\"p\">)</span></td></tr><tr><th id=\"L993\"><a href=\"#L993\">993</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">return</span>\u00a0d</td></tr><tr><th id=\"L994\"><a href=\"#L994\">994</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">else</span><span class=\"p\">:</span></td></tr><tr><th id=\"L995\"><a href=\"#L995\">995</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"k\">raise</span>\u00a0QueueUnderflow<span class=\"p\">()</span></td></tr><tr><th id=\"L996\"><a href=\"#L996\">996</a></th><td></td></tr><tr><th id=\"L997\"><a href=\"#L997\">997</a></th><td></td></tr><tr><th id=\"L998\"><a href=\"#L998\">998</a></th><td>__all__ <span class=\"o\">=</span>\u00a0<span class=\"p\">[</span><span class=\"s\">\"Deferred\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"DeferredList\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"succeed\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"fail\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"FAILURE\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"SUCCESS\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L999\"><a href=\"#L999\">999</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"s\">\"AlreadyCalledError\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"TimeoutError\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"gatherResults\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1000\"><a href=\"#L1000\">1000</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"s\">\"maybeDeferred\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1001\"><a href=\"#L1001\">1001</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"s\">\"waitForDeferred\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"deferredGenerator\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"inlineCallbacks\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1002\"><a href=\"#L1002\">1002</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"s\">\"DeferredLock\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"DeferredSemaphore\"</span><span class=\"p\">,</span>\u00a0<span class=\"s\">\"DeferredQueue\"</span><span class=\"p\">,</span></td></tr><tr><th id=\"L1003\"><a href=\"#L1003\">1003</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">]</span></td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/twisted/internet/defer.py\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44199.0}