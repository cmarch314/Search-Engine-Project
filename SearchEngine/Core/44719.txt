{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 buddy bots src zope interface tests test adapter py View diff against View revision Visit trunk Last change on this file was 712 checked in by cbaker 7 years ago First draft of nomatic buddy bots oscar bot is functional if you give it good authentication credentials jabber bot is just an example from the web File size 8 9 KB Line 1 2 3 Copyright c 2 3 Zope Corporation and Contributors 4 All Rights Reserved 5 6 This software is subject to the provisions of the Zope Public License 7 Version 2 1 ZPL A copy of the ZPL should accompany this distribution 8 THIS SOFTWARE IS PROVIDED AS IS AND ANY AND ALL EXPRESS OR IMPLIED9 WARRANTIES ARE DISCLAIMED INCLUDING BUT NOT LIMITED TO THE IMPLIED1 WARRANTIES OF TITLE MERCHANTABILITY AGAINST INFRINGEMENT AND FITNESS11 FOR A PARTICULAR PURPOSE 12 13 14 Adapter registry tests1516 Id test adapter py 67795 2 6 5 1 13 55 42Z jim 17 18import unittest19import zope interface2 from zope interface adapter import AdapterRegistry21import zope interface222324class IF zope interface Interface 25 pass26class IF1 IF 27 pass2829class IB zope interface Interface 3 pass31class IB1 IB 32 pass3334class IR zope interface Interface 35 pass36class IR1 IR 37 pass3839def test multi adapter get best match 4 41 registry AdapterRegistry 4243 class IB2 IB 44 pass45 class IB3 IB2 IB1 46 pass47 class IB4 IB1 IB2 48 pass495 registry register None IB1 IR A1 51 registry register None IB IR A 52 registry register None IB2 IR A2 5354 registry lookup IF1 IB1 IR 55 A1 56 registry lookup IF1 IB2 IR 57 A2 58 registry lookup IF1 IB IR 59 A 6 registry lookup IF1 IB3 IR 61 A2 62 registry lookup IF1 IB4 IR 63 A1 64 6566def test multi adapter lookupAll get best matches 67 68 registry AdapterRegistry 697 class IB2 IB 71 pass72 class IB3 IB2 IB1 73 pass74 class IB4 IB1 IB2 75 pass7677 registry register None IB1 IR A1 78 registry register None IB IR A 79 registry register None IB2 IR A2 8 81 tuple registry lookupAll IF1 IB1 IR 1 82 A1 83 tuple registry lookupAll IF1 IB2 IR 1 84 A2 85 tuple registry lookupAll IF1 IB IR 1 86 A 87 tuple registry lookupAll IF1 IB3 IR 1 88 A2 89 tuple registry lookupAll IF1 IB4 IR 1 9 A1 91 929394def test multi adapter w default 95 96 registry AdapterRegistry 97 98 registry register None None IB1 bob A 991 registry lookup IF1 IR1 IB bob 1 1 A 1 2 1 3 registry register None IR IB1 bob A1 1 41 5 registry lookup IF1 IR1 IB bob 1 6 A1 1 7 1 8 registry lookup IF1 IR1 IB bruce 1 911 registry register None IR1 IB1 bob A2 111 registry lookup IF1 IR1 IB bob 112 A2 113 114115def test multi adapter w inherited and multiple registrations 116 117 registry AdapterRegistry 118119 class IX zope interface Interface 12 pass121122 registry register IF IR IB1 bob A1 123 registry register IF1 IX IB1 bob AX 124125 registry lookup IF1 IR1 IB bob 126 A1 127 128129def test named adapter with default 13 Query a named simple adapter131132 registry AdapterRegistry 133134 If we ask for a named adapter we won t get a result unless there135 is a named adapter even if the object implements the interface 136137 registry lookup IF1 IF bob 138139 registry register None IB1 bob A1 14 registry lookup IF1 IB bob 141 A1 142143 registry lookup IF1 IB bruce 144145 registry register None IB bob A2 146 registry lookup IF1 IB bob 147 A2 148 14915 def test multi adapter gets closest provided 151 152 registry AdapterRegistry 153 registry register IF1 IR IB bob A1 154 registry register IF1 IR IB1 bob A2 155 registry lookup IF1 IR1 IB bob 156 A1 157158 registry AdapterRegistry 159 registry register IF1 IR IB1 bob A2 16 registry register IF1 IR IB bob A1 161 registry lookup IF1 IR IB bob 162 A1 163164 registry AdapterRegistry 165 registry register IF1 IR IB bob A1 166 registry register IF1 IR1 IB1 bob A2 167 registry lookup IF1 IR1 IB bob 168 A2 16917 registry AdapterRegistry 171 registry register IF1 IR1 IB1 bob 2 172 registry register IF1 IR IB bob 1 173 registry lookup IF1 IR1 IB bob 174 2175 176177def test multi adapter check non default dont hide default 178 179 registry AdapterRegistry 18 181 class IX zope interface Interface 182 pass183184185 registry register None IR IB bob 1 186 registry register IF1 IX IB bob 2 187 registry lookup IF1 IR1 IB bob 188 1189 19 191def test adapter hook with factory producing None 192 193 registry AdapterRegistry 194 default object 195 196 class Object1 object 197 zope interface implements IF 198 class Object2 object 199 zope interface implements IF 2 2 1 def factory context 2 2 if isinstance context Object1 2 3 return adapter 2 4 return None2 52 6 registry register IF IB factory 2 72 8 registry adapter hook IB Object1 2 9 adapter 21 registry adapter hook IB Object2 is None211 True212 registry adapter hook IB Object2 default default is default213 True214 215216def test adapter registry update upon interface bases change 217 218 Let s first create a adapter registry and a simple adaptation hook 21922 globalRegistry AdapterRegistry 221222 def hook iface ob lookup globalRegistry lookup1 223 factory lookup zope interface providedBy ob iface 224 if factory is None 225 return None226 else 227 return factory ob 228229 zope interface interface adapter hooks append hook 23 231 Now we create some interfaces and an implementation 232233 class IX zope interface Interface 234 pass235236 class IY zope interface Interface 237 pass238239 class X object 24 pass241242 class Y object 243 zope interface implements IY 244 def init self original 245 self original original246247 and register an adapter 248249 globalRegistry register IX IY Y 25 251 at first we still expect the adapter lookup from X to IY to fail 252253 IY X doctest NORMALIZE WHITESPACE ELLIPSIS254 Traceback most recent call last 255 256 TypeError Could not adapt 257 zope interface tests test adapter X object at 258 InterfaceClass zope interface tests test adapter IY 25926 But after we declare an interface on the class X it should pass 261262 zope interface classImplementsOnly X IX 263264 IY X doctest ELLIPSIS265 zope interface tests test adapter Y object at 266267 hook zope interface interface adapter hooks pop 268 26927 271def test changing declarations 272 273274 If we change declarations for a class those adapter lookup should275 eflect the changes 276277 class I1 zope interface Interface 278 pass279 class I2 zope interface Interface 28 pass281282 registry AdapterRegistry 283 registry register I1 I2 42 284285 class C 286 pass287288 registry lookup zope interface implementedBy C I2 28929 zope interface classImplements C I1 291292 registry lookup zope interface implementedBy C I2 293 42294 295296def test correct multi adapter lookup 297 298 registry AdapterRegistry 299 registry register IF IB1 IR A 1 3 registry register IF1 IB IR A1 3 1 registry lookup IF1 IB1 IR 3 2 A1 3 3 3 43 5def test duplicate bases 3 6 3 7There was a bug that caused problems if a spec had multiple bases 3 83 9 class I zope interface Interface 31 pass311 class I2 I I 312 pass313 registry AdapterRegistry 314 registry register I2 IR x X 315 registry lookup I2 IR x 316 X 317 registry register I2 IR y Y 318 registry lookup I2 IR x 319 X 32 registry lookup I2 IR y 321 Y 322 323324325def test suite 326 from zope testing import doctest doctestunit327 return unittest TestSuite 328 doctestunit DocFileSuite adapter txt human txt 329 human ru txt foodforthought txt 33 globs name main 331 doctest DocTestSuite 332 333334if name main 335 unittest main defaultTest test suite Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py", "title": "\n      test_adapter.py in nomatic/tags/nomaticim-0.0.5/buddy_bots/src/zope/interface/tests\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      test_adapter.py in nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\" type=\"application/x-python; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/buddy_bots/zope/interface/tests/test_adapter.py?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots?order=name\" title=\"View buddy_bots\">buddy_bots</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src?order=name\" title=\"View src\">src</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope?order=name\" title=\"View zope\">zope</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface?order=name\" title=\"View interface\">interface</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests?order=name\" title=\"View tests\">tests</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py?order=name\" title=\"View test_adapter.py\">test_adapter.py</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/nomatic/trunk/buddy_bots/zope/interface/tests/test_adapter.py\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/712/\" title=\"View changeset 712\">712</a>,\n                  checked in by cbaker, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2008-02-16T08%3A16%3A53-08%3A00&amp;precision=second\" title=\"See timeline at Feb 16, 2008, 8:16:53 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst draft of nomatic buddy bots. oscar_bot is functional if you give it good authentication credentials, jabber_bot is just an example from the web <br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"9089 bytes\">8.9 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td><span class=\"c\">##############################################################################</span></td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td><span class=\"c\"># Copyright (c) 2003 Zope Corporation and Contributors.</span></td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td><span class=\"c\"># All Rights Reserved.</span></td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td><span class=\"c\"># This software is subject to the provisions of the Zope Public License,</span></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td><span class=\"c\"># Version 2.1 (ZPL).\u00a0 A copy of the ZPL should accompany this distribution.</span></td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td><span class=\"c\"># THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED</span></td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td><span class=\"c\"># WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span></td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td><span class=\"c\"># WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS</span></td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td><span class=\"c\"># FOR A PARTICULAR PURPOSE.</span></td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td><span class=\"c\">#</span></td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td><span class=\"c\">##############################################################################</span></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td><span class=\"sd\">\"\"\"Adapter registry tests</span></td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td><span class=\"sd\">$Id: test_adapter.py 67795 2006-05-01 13:55:42Z jim $</span></td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">unittest</span></td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">zope.interface</span></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td><span class=\"kn\">from</span>\u00a0<span class=\"nn\">zope.interface.adapter</span>\u00a0<span class=\"kn\">import</span>\u00a0AdapterRegistry</td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td><span class=\"kn\">import</span>\u00a0<span class=\"nn\">zope.interface</span></td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td></td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td></td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IF0</span><span class=\"p\">(</span>zope<span class=\"o\">.</span>interface<span class=\"o\">.</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IF1</span><span class=\"p\">(</span>IF0<span class=\"p\">):</span></td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td></td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IB0</span><span class=\"p\">(</span>zope<span class=\"o\">.</span>interface<span class=\"o\">.</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IB1</span><span class=\"p\">(</span>IB0<span class=\"p\">):</span></td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td></td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IR0</span><span class=\"p\">(</span>zope<span class=\"o\">.</span>interface<span class=\"o\">.</span>Interface<span class=\"p\">):</span></td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td><span class=\"k\">class</span>\u00a0<span class=\"nc\">IR1</span><span class=\"p\">(</span>IR0<span class=\"p\">):</span></td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td>\u00a0 \u00a0 <span class=\"k\">pass</span></td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td></td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_get_best_match</span><span class=\"p\">():</span></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB2(IB0):</span></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB3(IB2, IB1):</span></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB4(IB1, IB2):</span></td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB1], IR0, '', 'A1')</span></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB0], IR0, '', 'A0')</span></td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB2], IR0, '', 'A2')</span></td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB1), IR0, '')</span></td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB2), IR0, '')</span></td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB0), IR0, '')</span></td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A0'</span></td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB3), IR0, '')</span></td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB4), IR0, '')</span></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td></td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_lookupAll_get_best_matches</span><span class=\"p\">():</span></td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB2(IB0):</span></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB3(IB2, IB1):</span></td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IB4(IB1, IB2):</span></td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB1], IR0, '', 'A1')</span></td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB0], IR0, '', 'A0')</span></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IB2], IR0, '', 'A2')</span></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; tuple(registry.lookupAll((IF1, IB1), IR0))[0][1]</span></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; tuple(registry.lookupAll((IF1, IB2), IR0))[0][1]</span></td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; tuple(registry.lookupAll((IF1, IB0), IR0))[0][1]</span></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A0'</span></td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; tuple(registry.lookupAll((IF1, IB3), IR0))[0][1]</span></td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; tuple(registry.lookupAll((IF1, IB4), IR0))[0][1]</span></td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td></td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td></td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_w_default</span><span class=\"p\">():</span></td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td><span class=\"sd\">\u00a0 \u00a0 </span></td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, None], IB1, 'bob', 'A0')</span></td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bob')</span></td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A0'</span></td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td><span class=\"sd\">\u00a0 \u00a0 </span></td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IR0], IB1, 'bob', 'A1')</span></td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bob')</span></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td><span class=\"sd\">\u00a0 \u00a0 </span></td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bruce')</span></td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IR1], IB1, 'bob', 'A2')</span></td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bob')</span></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td></td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_w_inherited_and_multiple_registrations</span><span class=\"p\">():</span></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IX(zope.interface.Interface):</span></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 pass</span></td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF0, IR0], IB1, 'bob', 'A1')</span></td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IX], IB1, 'bob', 'AX')</span></td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bob')</span></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_named_adapter_with_default</span><span class=\"p\">():</span></td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"Query a named simple adapter</span></td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td><span class=\"sd\">\u00a0 \u00a0 If we ask for a named adapter, we won't get a result unless there</span></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td><span class=\"sd\">\u00a0 \u00a0 is a named adapter, even if the object implements the interface:</span></td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1], IF0, 'bob')</span></td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None], IB1, 'bob', 'A1')</span></td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1], IB0, 'bob')</span></td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1], IB0, 'bruce')</span></td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None], IB0, 'bob', 'A2')</span></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1], IB0, 'bob')</span></td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td></td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_gets_closest_provided</span><span class=\"p\">():</span></td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR0], IB0, 'bob', 'A1')</span></td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register((IF1, IR0), IB1, 'bob', 'A2')</span></td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IR1), IB0, 'bob')</span></td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR0], IB1, 'bob', 'A2')</span></td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR0], IB0, 'bob', 'A1')</span></td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1, IR0], IB0, 'bob')</span></td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A1'</span></td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR0], IB0, 'bob', 'A1')</span></td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR1], IB1, 'bob', 'A2')</span></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1, IR1], IB0, 'bob')</span></td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A2'</span></td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR1], IB1, 'bob', 2)</span></td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IR0], IB0, 'bob', 1)</span></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1, IR1], IB0, 'bob')</span></td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td><span class=\"sd\">\u00a0 \u00a0 2</span></td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td></td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_multi_adapter_check_non_default_dont_hide_default</span><span class=\"p\">():</span></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IX(zope.interface.Interface):</span></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([None, IR0], IB0, 'bob', 1)</span></td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1,\u00a0 \u00a0IX], IB0, 'bob', 2)</span></td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([IF1, IR1], IB0, 'bob')</span></td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td><span class=\"sd\">\u00a0 \u00a0 1</span></td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td></td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_adapter_hook_with_factory_producing_None</span><span class=\"p\">():</span></td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; default = object()</span></td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td><span class=\"sd\">\u00a0 \u00a0 </span></td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class Object1(object):</span></td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IF0)</span></td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class Object2(object):</span></td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0zope.interface.implements(IF0)</span></td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; def factory(context):</span></td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0if isinstance(context, Object1):</span></td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0return 'adapter'</span></td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0return None</span></td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF0], IB0, '', factory)</span></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.adapter_hook(IB0, Object1())</span></td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td><span class=\"sd\">\u00a0 \u00a0 'adapter'</span></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.adapter_hook(IB0, Object2()) is None</span></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td><span class=\"sd\">\u00a0 \u00a0 True</span></td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.adapter_hook(IB0, Object2(), default=default) is default</span></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td><span class=\"sd\">\u00a0 \u00a0 True</span></td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td></td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_adapter_registry_update_upon_interface_bases_change</span><span class=\"p\">():</span></td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td><span class=\"sd\">\u00a0 \u00a0 Let's first create a adapter registry and a simple adaptation hook:</span></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; globalRegistry = AdapterRegistry()</span></td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; def _hook(iface, ob, lookup=globalRegistry.lookup1):</span></td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0factory = lookup(zope.interface.providedBy(ob), iface)</span></td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0if factory is None:</span></td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0return None</span></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0else:</span></td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0return factory(ob)</span></td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; zope.interface.interface.adapter_hooks.append(_hook)</span></td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td><span class=\"sd\">\u00a0 \u00a0 Now we create some interfaces and an implementation:</span></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IX(zope.interface.Interface):</span></td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0pass</span></td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class IY(zope.interface.Interface):</span></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0pass</span></td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class X(object):</span></td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 pass</span></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class Y(object):</span></td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 zope.interface.implements(IY)</span></td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 def __init__(self, original):</span></td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0self.original=original</span></td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td><span class=\"sd\">\u00a0 \u00a0 and register an adapter:</span></td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; globalRegistry.register((IX,), IY, '', Y)</span></td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td><span class=\"sd\">\u00a0 \u00a0 at first, we still expect the adapter lookup from `X` to `IY` to fail:</span></td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; IY(X()) #doctest: +NORMALIZE_WHITESPACE +ELLIPSIS</span></td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td><span class=\"sd\">\u00a0 \u00a0 Traceback (most recent call last):</span></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...</span></td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td><span class=\"sd\">\u00a0 \u00a0 TypeError: ('Could not adapt',</span></td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;zope.interface.tests.test_adapter.X object at ...&gt;,</span></td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td><span class=\"sd\">\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 &lt;InterfaceClass zope.interface.tests.test_adapter.IY&gt;)</span></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td><span class=\"sd\">\u00a0 \u00a0 But after we declare an interface on the class `X`, it should pass:</span></td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; zope.interface.classImplementsOnly(X, IX)</span></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; IY(X()) #doctest: +ELLIPSIS</span></td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td><span class=\"sd\">\u00a0 \u00a0 &lt;zope.interface.tests.test_adapter.Y object at ...&gt;</span></td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; hook = zope.interface.interface.adapter_hooks.pop()</span></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td></td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td></td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_changing_declarations</span><span class=\"p\">():</span></td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td><span class=\"sd\">\u00a0 \u00a0 If we change declarations for a class, those adapter lookup should</span></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td><span class=\"sd\">\u00a0 \u00a0 eflect the changes:</span></td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class I1(zope.interface.Interface):</span></td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class I2(zope.interface.Interface):</span></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([I1], I2, '', 42)</span></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class C:</span></td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.implementedBy(C)], I2, '')</span></td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; zope.interface.classImplements(C, I1)</span></td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup([zope.interface.implementedBy(C)], I2, '')</span></td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td><span class=\"sd\">\u00a0 \u00a0 42</span></td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_correct_multi_adapter_lookup</span><span class=\"p\">():</span></td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF0, IB1], IR0, '', 'A01')</span></td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([IF1, IB0], IR0, '', 'A10')</span></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((IF1, IB1), IR0, '')</span></td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td><span class=\"sd\">\u00a0 \u00a0 'A10'</span></td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td><span class=\"sd\">\u00a0 \u00a0 \"\"\"</span></td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_duplicate_bases</span><span class=\"p\">():</span></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>\u00a0 \u00a0 <span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td><span class=\"sd\">There was a bug that caused problems if a spec had multiple bases:</span></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td><span class=\"sd\"></span></td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class I(zope.interface.Interface):</span></td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; class I2(I, I):</span></td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td><span class=\"sd\">\u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0pass</span></td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry = AdapterRegistry()</span></td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([I2], IR0, 'x', 'X')</span></td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((I2, ), IR0, 'x')</span></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td><span class=\"sd\">\u00a0 \u00a0 'X'</span></td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.register([I2], IR0, 'y', 'Y')</span></td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((I2, ), IR0, 'x')</span></td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td><span class=\"sd\">\u00a0 \u00a0 'X'</span></td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td><span class=\"sd\">\u00a0 \u00a0 &gt;&gt;&gt; registry.lookup((I2, ), IR0, 'y')</span></td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td><span class=\"sd\">\u00a0 \u00a0 'Y'</span></td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td><span class=\"sd\">\"\"\"</span></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td></td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td></td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td><span class=\"k\">def</span>\u00a0<span class=\"nf\">test_suite</span><span class=\"p\">():</span></td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td>\u00a0 \u00a0 <span class=\"kn\">from</span>\u00a0<span class=\"nn\">zope.testing</span>\u00a0<span class=\"kn\">import</span>\u00a0doctest<span class=\"p\">,</span>\u00a0doctestunit</td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td>\u00a0 \u00a0 <span class=\"k\">return</span>\u00a0unittest<span class=\"o\">.</span>TestSuite<span class=\"p\">((</span></td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 doctestunit<span class=\"o\">.</span>DocFileSuite<span class=\"p\">(</span><span class=\"s\">'../adapter.txt'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'../human.txt'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<span class=\"s\">'../human.ru.txt'</span><span class=\"p\">,</span>\u00a0<span class=\"s\">'foodforthought.txt'</span><span class=\"p\">,</span></td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0globs<span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">'__name__'</span><span class=\"p\">:</span>\u00a0<span class=\"s\">'__main__'</span><span class=\"p\">}),</span></td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 doctest<span class=\"o\">.</span>DocTestSuite<span class=\"p\">(),</span></td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 <span class=\"p\">))</span></td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td><span class=\"k\">if</span>\u00a0__name__ <span class=\"o\">==</span>\u00a0<span class=\"s\">'__main__'</span><span class=\"p\">:</span></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td>\u00a0 \u00a0 unittest<span class=\"o\">.</span>main<span class=\"p\">(</span>defaultTest<span class=\"o\">=</span><span class=\"s\">'test_suite'</span><span class=\"p\">)</span></td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/buddy_bots/src/zope/interface/tests/test_adapter.py\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 44719.0}