{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 55Interval Skip List Andreas Fabri 55 1 Definition An interval skip list is a data strucure for finding all intervals that contain a point and for stabbing queries that is for answering the question whether a given point is contained in an interval or not The implementation we provide is dynamic that is the user can freely mix calls to the methods insert remove find intervals and is contained The interval skip list class is parameterized with an interval class The data structure was introduced by Hanson Han91 and it is called interval skip list because it is an extension of the randomized list structure known as skip list Pug9 55 2 Example Programs We give two examples The first one uses a basic interval class In the second example we create an interval skip list for the z ranges of the faces of a terrain allowing to answer level queries 55 2 1 First Example with Simple Interval The first example reads two numbers n and d from std cin It creates n intervals of length d with the left endpoint at n It then reads out the intervals for the 1 dimensional points with coordinates n d The interval skip list class has as template argument an interval class In this example we use the class Interval skip list interval file examples Interval skip list intervals C include CGAL Interval skip list h include CGAL Interval skip list interval h include vector include list include iostream typedef CGAL Interval skip list interval double Interval typedef CGAL Interval skip list Interval Interval skip list int main Interval skip list isl int i n d n 1 d 3 std cin n d std vector Interval intervals n for i i n i intervals i Interval i i d std random shuffle intervals begin intervals end isl insert intervals begin intervals end for i i n d i std list Interval L isl find intervals i std back inserter L for std list Interval iterator it L begin it L end it std cout it std cout std endl for i i n i isl remove intervals i return 55 2 2 Example with Faces of a Triangulated Terrain The second example creates an interval skip list that allows to find all the faces of a terrain intersected by an horizontal plane at a given height The data points for the terrain are read from a file As model for the interval concept we use a class that is a wrapper around a face handle of a triangulated terrain Lower and upper bound of the interval are smallest and largest z coordinate of the face file examples Interval skip list terrain C include CGAL Simple cartesian h include CGAL Delaunay triangulation 2 h include CGAL Triangulation euclidean traits xy 3 h include CGAL Interval skip list h include CGAL Level interval h include iostream include fstream typedef CGAL Simple cartesian double SC typedef SC Point 3 Point 3 typedef CGAL Triangulation euclidean traits xy 3 SC K typedef CGAL Delaunay triangulation 2 K Delaunay typedef Delaunay Face handle Face handle typedef Delaunay Finite faces iterator Finite faces iterator typedef CGAL Level interval Face handle Interval typedef CGAL Interval skip list Interval Interval skip list int main std ifstream fin terrain pts elevation ranges from to 1 Delaunay dt dt insert std istream iterator Point 3 fin std istream iterator Point 3 Interval skip list isl for Finite faces iterator fh dt finite faces begin fh dt finite faces end fh isl insert Interval fh std list Interval level isl find intervals 5 std back inserter level for std list Interval iterator it level begin it level end it std cout dt triangle it face handle std endl return Next chapter Interval Skip List Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Interval_skip_list/Chapter_main.html", "title": "interval skip list", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Interval_skip_list/main.tex' -->\n<html> <head>  \n<title>Interval Skip List</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_55\"></a>\n  \n<h1>Chapter 55<BR>Interval Skip List</h1>\n\r\n<A NAME=\"chapter_Interval_skip_list\"></A>\r\n\r\n<EM>Andreas Fabri</EM><BR>\n\n<a name=\"Section_1\"></a>\n        \n<h2>55.1&nbsp;&nbsp;&nbsp;Definition</h2>\n\r\n\r\nAn interval skip list is a data strucure for finding all intervals \r\nthat contain a point, and for stabbing queries, that is for answering \r\nthe question whether a given point is contained in an interval or not. \r\nThe implementation we provide is dynamic, that is the user can freely\r\nmix calls  to the methods <I>insert(..)</I>, <I>remove(..)</I>, \r\n<I>find_intervals(..)</I>, and <I>is_contained(..)</I>\r\n\r\nThe interval skip list class is parameterized with an interval class.\r\n\r\nThe data structure was introduced by Hanson&nbsp;[<A HREF=\"../biblio.html#Biblio_h-islds-91\">Han91</A>], and it is called\r\ninterval skip list, because it is an extension of the randomized list\r\nstructure known as skip list&nbsp;[<A HREF=\"../biblio.html#Biblio_p-slpab-90\">Pug90</A>].\r\n \r\n<a name=\"Section_2\"></a>\n        \n<h2>55.2&nbsp;&nbsp;&nbsp;Example Programs</h2>\n\r\n<A NAME=\"sectionIntervalskiplistExamples\"></A>\r\n\r\nWe give two examples. The first one uses a basic interval class.  In\r\nthe second example we create an interval skip list for the <MATH><I>z</I></MATH>-ranges\r\nof the faces of a terrain, allowing to answer level queries.\r\n\r\n\n<h3>55.2.1&nbsp;&nbsp;&nbsp;First Example with Simple Interval</h3>\n\r\n\r\nThe first example reads two numbers <I>n</I> and <I>d</I> from <I>std::cin</I>.\r\nIt creates <I>n</I> intervals of length <I>d</I> with the left endpoint at <I>n</I>.\r\nIt then reads out the intervals for the 1-dimensional points with\r\ncoordinates <MATH><I>0 ... n+d</I></MATH>. \r\n\r\nThe interval skip list class has as template argument an interval\r\nclass. In this example we use the class <I><A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list_interval.html#Cross_link_anchor_1230\">Interval_skip_list_interval</A></I>.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>/intervals.C\n\n#include &lt;CGAL/<A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list_interval.html#Cross_link_anchor_1230\">Interval_skip_list_interval</A>.h&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;iostream&gt;\n\ntypedef <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list_interval.html#Cross_link_anchor_1229\">CGAL::Interval_skip_list_interval</A>&lt;double&gt; <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\ntypedef <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1226\">CGAL::Interval_skip_list</A>&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt; <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>;\n\nint main()\n{\n  <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A> isl;\n  int i, n, d;\n\n  n = 10;\n  d = 3;\n  //std::cin &gt;&gt; n &gt;&gt; d;\n  std::vector&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt; intervals(n);\n  for(i = 0; i &lt; n; i++) {\n    intervals[i] = <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(i, i+d);\n  }\n  std::random_shuffle(intervals.begin(), intervals.end());\n\n  isl.insert(intervals.begin(), intervals.end());\n\n  for(i = 0; i &lt; n+d; i++) {\n    std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt; L;\n    isl.find_intervals(i, std::back_inserter(L));\n    for(std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt;::iterator it = L.begin(); it != L.end(); it++){\n      std::cout &lt;&lt; *it;\n    }  \n    std::cout &lt;&lt; std::endl;\n  }\n\n  for(i = 0; i &lt; n; i++) {\n    isl.remove(intervals[i]);\n  }\n  return 0;\n\n}\n\n\n</pre>\r\n\r\n\n<h3>55.2.2&nbsp;&nbsp;&nbsp;Example with Faces of a Triangulated Terrain</h3>\n\r\n\r\n\r\n\r\nThe second example creates an interval skip list that allows to find all the faces\r\nof a terrain intersected by an horizontal plane at a given height.\r\nThe data points for the terrain are  read from a file. \r\n\r\nAs model for the interval concept, we use a class that is a wrapper\r\naround a face handle of a triangulated terrain. Lower and upper bound\r\nof the interval are smallest and largest <MATH><I>z</I></MATH>-coordinate of the face.\r\n\r\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>/terrain.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Simple_cartesian.html#Cross_link_anchor_30\">Simple_cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_920\">Delaunay_triangulation_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Triangulation_2_ref/Class_Triangulation_euclidean_traits_xy_3.html#Cross_link_anchor_945\">Triangulation_euclidean_traits_xy_3</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Interval_skip_list_ref/Class_Level_interval.html#Cross_link_anchor_1232\">Level_interval</A>.h&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Simple_cartesian.html#Cross_link_anchor_29\">CGAL::Simple_cartesian</A>&lt;double&gt;                SC;\ntypedef SC::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>                                   <A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Triangulation_euclidean_traits_xy_3.html#Cross_link_anchor_944\">CGAL::Triangulation_euclidean_traits_xy_3</A>&lt;SC&gt; K;\ntypedef <A HREF=\"../Triangulation_2_ref/Class_Delaunay_triangulation_2.html#Cross_link_anchor_919\">CGAL::Delaunay_triangulation_2</A>&lt;K&gt;             Delaunay;\ntypedef Delaunay::Face_handle                         Face_handle;\ntypedef Delaunay::Finite_faces_iterator               Finite_faces_iterator;\ntypedef <A HREF=\"../Interval_skip_list_ref/Class_Level_interval.html#Cross_link_anchor_1231\">CGAL::Level_interval</A>&lt;Face_handle&gt;             <A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>;\ntypedef <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1226\">CGAL::Interval_skip_list</A>&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt;            <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A>;\n\nint main()\n{\n  std::ifstream fin(&quot;terrain.pts&quot;); // elevation ranges from 0 to 100\n  Delaunay dt;\n\n  dt.insert(std::istream_iterator&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;(fin), \n\t    std::istream_iterator&lt;<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&gt;());\n\n  <A HREF=\"../Interval_skip_list_ref/Class_Interval_skip_list.html#Cross_link_anchor_1227\">Interval_skip_list</A> isl;\n  for(Finite_faces_iterator fh = dt.finite_faces_begin();\n      fh != dt.finite_faces_end();\n      ++fh){\n    isl.insert(<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>(fh));\n  }\n  std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt; level;\n  isl.find_intervals(50, std::back_inserter(level));\n  for(std::list&lt;<A HREF=\"../Interval_skip_list_ref/Concept_Interval.html#Cross_link_anchor_1228\">Interval</A>&gt;::iterator it = level.begin();\n      it != level.end();\n      ++it){\n    std::cout &lt;&lt; dt.triangle(it-&gt;face_handle()) &lt;&lt; std::endl;\n  }\n  return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Interval_skip_list_ref/Chapter_intro.html\">Interval Skip List</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_55!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38521.0}