{"text": "Last Published 2 14 7 14Version 8 6 Documentation Home Documentation Installing and Managing AsterixDB using Managix AsterixDB 1 1 An ADM and AQL Primer AsterixDB Javascript SDK Asterix Data Model ADM Asterix Query Language AQL AQL Functions AQL Allen s Relations Functions AQL Support of Similarity Queries Accessing External Data REST API to AsterixDB Asterix Using Functions Table of Contents Numeric FunctionsString FunctionsAggregate FunctionsSpatial FunctionsSimilarity FunctionsTokenizing FunctionsTemporal FunctionsOther Functions Asterix provides various classes of functions to support operations on numeric string spatial and temporal data This document explains how to use these functions Numeric Functions Back to TOC numeric abs Syntax numeric abs numeric expression Computes the absolute value of the argument Arguments numeric expression A int8 int16 int32 int64 float double value Return Value The absolute value of the argument with the same type as the input argument or null if the argument is a null value Example let v1 numeric abs 2 13 let v2 numeric abs 4 36 let v3 numeric abs let v4 numeric abs float 2 13 5 let v5 numeric abs double 2 13 593823748327284 return v1 v1 v2 v2 v3 v3 v4 v4 v5 v5 The expected result is v1 2 13 v2 4 36 v3 v4 2 13 5f v5 2 13 5938237483274d numeric ceiling Syntax numeric ceiling numeric expression Computes the smallest closest to negative infinity number with no fractional part that is not less than the value of the argument If the argument is already equal to mathematical integer then the result is the same as the argument Arguments numeric expression A int8 int16 int32 int64 float double value Return Value The ceiling value for the given number in the same type as the input argument or null if the input is null Example let v1 numeric ceiling 2 13 let v2 numeric ceiling 4 36 let v3 numeric ceiling 3 let v4 numeric ceiling float 2 13 2 let v5 numeric ceiling double 2 13 893823748327284 return v1 v1 v2 v2 v3 v3 v4 v4 v5 v5 The expected result is v1 2 13 v2 4 36 v3 1 d v4 2 13 f v5 2 13 d numeric floor Syntax numeric floor numeric expression Computes the largest closest to positive infinity number with no fractional part that is not greater than the value If the argument is already equal to mathematical integer then the result is the same as the argument Arguments numeric expression A int8 int16 int32 int64 float double value Return Value The floor value for the given number in the same type as the input argument or null if the input is null Example let v1 numeric floor 2 13 let v2 numeric floor 4 36 let v3 numeric floor 8 let v4 numeric floor float 2 13 2 let v5 numeric floor double 2 13 893823748327284 return v1 v1 v2 v2 v3 v3 v4 v4 v5 v5 The expected result is v1 2 13 v2 4 36 v3 d v4 2 14 f v5 2 14 d numeric round Syntax numeric round numeric expression Computes the number with no fractional part that is closest and also closest to positive infinity to the argument Arguments numeric expression A int8 int16 int32 int64 float double value Return Value The rounded value for the given number in the same type as the input argument or null if the input is null Example let v1 numeric round 2 13 let v2 numeric round 4 36 let v3 numeric round 8 let v4 numeric round float 2 13 256 let v5 numeric round double 2 13 893823748327284 return v1 v1 v2 v2 v3 v3 v4 v4 v5 v5 The expected result is v1 2 13 v2 4 36 v3 1 d v4 2 13 f v5 2 14 d numeric round half to even Syntax numeric round half to even numeric expression precision Computes the closest numeric value to numeric expression that is a multiple of ten to the power of minus precision precision is optional and by default value is used Arguments numeric expression A int8 int16 int32 int64 float double value precision An optional integer field representing the number of digits in the fraction of the the resultReturn Value The rounded value for the given number in the same type as the input argument or null if the input is null Example let v1 numeric round half to even 2 13 let v2 numeric round half to even 4 36 let v3 numeric round half to even 8 let v4 numeric round half to even float 2 13 256 let v5 numeric round half to even double 2 13 893823748327284 let v6 numeric round half to even double 2 13 893823748327284 2 let v7 numeric round half to even 2 13 4 let v8 numeric round half to even float 2 13 256 5 return v1 v1 v2 v2 v3 v3 v4 v4 v5 v5 v6 v6 v7 v7 v8 v8 The expected result is v1 2 13 v2 4 36 v3 1 d v4 2 13 f v5 2 14 d v6 2 13 89d v7 2 13 v8 2 13 256f String Functions Back to TOC string to codepoint Syntax string to codepoint string expression Converts the string string expression to its code based representation Arguments string expression A string that will be converted Return Value An OrderedList of the code points for the string string expression codepoint to string Syntax codepoint to string list expression Converts the ordered code based representation list expression to the corresponding string Arguments list expression An OrderedList of code points Return Value A string representation of list expression Example use dataverse TinySocial let s Hello ASTERIX let l string to codepoint s let ss codepoint to string l return codes l string ss The expected result is codes 72 1 1 1 8 1 8 111 32 65 83 84 69 82 73 88 33 string Hello ASTERIX contains Syntax contains string expression substring to contain Checks whether the string string expression contains the string substring to containArguments string expression A string that might contain the given substring substring to contain A target string that might be contained Return Value A boolean value true if string expression contains substring to contain and false otherwise Example use dataverse TinySocial for i in dataset FacebookMessages where contains i message phone return mid i message id message i message The expected result is mid 2 message dislike iphone its touch screen is horrible mid 13 message dislike iphone the voice command is bad mid 15 message like iphone the voicemail service is awesome like Syntax like string expression string pattern Checks whether the string string expression contains the string pattern string pattern Compared to the contains function the like function also supports regular expressions Arguments string expression A string that might contain the pattern or null string pattern A pattern string that might be contained or null Return Value A boolean value true if string expression contains the pattern string pattern and false otherwise Example use dataverse TinySocial for i in dataset FacebookMessages where like i message at t return i message The expected result is can t stand at t the network is horrible can t stand at t its plan is terrible love at t its 3G is good starts with Syntax starts with string expression substring to start with Checks whether the string string expression starts with the string substring to start with Arguments string expression A string that might start with the given string substring to start with A string that might be contained as the starting substring Return Value A boolean returns true if string expression starts with the string substring to start with and false otherwise Example use dataverse TinySocial for i in dataset FacebookMessages where starts with i message like return i message The expected result is like samsung the plan is amazing like t mobile its platform is mind blowing like verizon the 3G is awesome like iphone the voicemail service is awesome ends with Syntax ends with string expression substring to end with Checks whether the string string expression ends with the string substring to end with Arguments string expression A string that might end with the given string substring to end with A string that might be contained as the ending substring Return Value A boolean returns true if string expression ends with the string substring to end with and false otherwise Example use dataverse TinySocial for i in dataset FacebookMessages where ends with i message return i message The expected result is love sprint its shortcut menu is awesome like verizon the 3G is awesome love at t its 3G is good string concat Syntax string concat list expression Concatenates a list of strings list expression into a single string Arguments list expression An OrderedList or UnorderedList of strings could be null to be concatenated Return Value Returns the concatenated string value Example let i ASTERIX let j let k ROCKS return string concat i j k The expected result is ASTERIX ROCKS string join Syntax string join list expression string expression Joins a list of strings list expression with the given separator string expression into a single string Arguments list expression An OrderedList or UnorderedList of strings could be null to be joined string expression A string as the separator Return Value Returns the joined String Example use dataverse TinySocial let i ASTERIX ROCKS return string join i The expected result is ASTERIX ROCKS lowercase Syntax lowercase string expression Converts a given string string expression to its lowercase form Arguments string expression A string to be converted Return Value Returns a string as the lowercase form of the given string expression Example use dataverse TinySocial let i ASTERIX return lowercase i The expected result is asterix matches Syntax matches string expression string pattern Checks whether the strings string expression matches the given pattern string pattern Arguments string expression A string that might contain the pattern string pattern A pattern string to be matched Return Value A boolean returns true if string expression matches the pattern string pattern and false otherwise Example use dataverse TinySocial for i in dataset FacebookMessages where matches i message dislike iphone return i message The expected result is dislike iphone its touch screen is horrible dislike iphone the voice command is bad replace Syntax replace string expression string pattern string replacement Checks whether the string string expression matches the given pattern string pattern and replace the matched pattern string pattern with the new pattern string replacement Arguments string expression A string that might contain the pattern string pattern A pattern string to be matched string replacement A pattern string to be used as the replacement Return Value Returns a string that is obtained after the replacements Example use dataverse TinySocial for i in dataset FacebookMessages where matches i message like iphone return replace i message like iphone like android The expected result is like android the voicemail service is awesome string length Syntax string length string expression Returns the length of the string string expression Arguments string expression A string or null that represents the string to be checked Return Value An int32 that represents the length of string expression Example use dataverse TinySocial for i in dataset FacebookMessages return mid i message id message len string length i message The expected result is mid 1 message len 43 mid 2 message len 44 mid 3 message len 33 mid 4 message len 43 mid 5 message len 46 mid 6 message len 43 mid 7 message len 37 mid 8 message len 33 mid 9 message len 34 mid 1 message len 5 mid 11 message len 38 mid 12 message len 52 mid 13 message len 42 mid 14 message len 27 mid 15 message len 45 substring Syntax substring string expression offset length Returns the substring from the given string string expression based on the given start offset offset with the optional length Arguments string expression A string to be extracted offset An int32 as the starting offset of the substring in string expression length Optional An int32 as the length of the substring Return Value A string that represents the substring Example use dataverse TinySocial for i in dataset FacebookMessages where string length i message 5 return substring i message 5 The expected result is G substring before Syntax substring before string expression string pattern Returns the substring from the given string string expression before the given pattern string pattern Arguments string expression A string to be extracted string pattern A string pattern to be searched Return Value A string that represents the substring Example use dataverse TinySocial for i in dataset FacebookMessages where contains i message iphone return substring before i message iphone The expected result is dislike dislike like substring after Syntax substring after string expression string pattern Returns the substring from the given string string expression after the given pattern string pattern Arguments string expression A string to be extracted string pattern A string pattern to be searched Return Value A string that represents the substring Example use dataverse TinySocial for i in dataset FacebookMessages where contains i message iphone return substring after i message iphone The expected result is its touch screen is horrible the voice command is bad the voicemail service is awesome Aggregate Functions Back to TOC count Syntax count list Gets the number of items in the given list Arguments list An orderedList or unorderedList containing the items to be counted or a null value Return Value An int64 value representing the number of items in the given list i64 is returned if the input is null Example use dataverse TinySocial let l1 hello world 1 2 3 let l2 for i in dataset TwitterUsers return i return count1 count l1 count2 count l2 The expected result is count1 5i64 count2 4i64 avg Syntax avg num list Gets the average value of the items in the given list Arguments num list An orderedList or unorderedList containing numeric or null values or a null value Return Value An double value representing the average of the numbers in the given list null is returned if the input is null or the input list contains null Non numeric types in the input list will cause an error Example use dataverse TinySocial let l for i in dataset TwitterUsers return i friends count return avg friend count avg l The expected result is avg friend count 191 5d sum Syntax sum num list Gets the sum of the items in the given list Arguments num list An orderedList or unorderedList containing numeric or null values or a null value Return Value The sum of the numbers in the given list The returning type is decided by the item type with the highest order in the numeric type promotion order int8 int16 int32 float double int32 int64 double among items null is returned if the input is null or the input list contains null Non numeric types in the input list will cause an error Example use dataverse TinySocial let l for i in dataset TwitterUsers return i friends count return sum friend count sum l The expected result is sum friend count 766 min max Syntax min num list max num list Gets the min max value of numeric items in the given list Arguments num list An orderedList or unorderedList containing the items to be compared or a null value Return Value The min max value of the given list The returning type is decided by the item type with the highest order in the numeric type promotion order int8 int16 int32 float double int32 int64 double among items null is returned if the input is null or the input list contains null Non numeric types in the input list will cause an error Example use dataverse TinySocial let l for i in dataset TwitterUsers return i friends count return min friend count min l max friend count max l The expected result is min friend count 18 max friend count 445 sql count Syntax sql count list Gets the number of non null items in the given list Arguments list An orderedList or unorderedList containing the items to be counted or a null value Return Value An int64 value representing the number of non null items in the given list The value i64 is returned if the input is null Example let l1 hello world 1 2 3 null return count sql count l1 The expected result is count 5i64 sql avg Syntax sql avg num list Gets the average value of the non null items in the given list Arguments num list An orderedList or unorderedList containing numeric or null values or a null value Return Value A double value representing the average of the non null numbers in the given list The null value is returned if the input is null Non numeric types in the input list will cause an error Example let l 1 2 2 3 3 4 null return avg sql avg l The expected result is avg 1 725d sql sum Syntax sql sum num list Gets the sum of the non null items in the given list Arguments num list An orderedList or unorderedList containing numeric or null values or a null value Return Value The sum of the non null numbers in the given list The returning type is decided by the item type with the highest order in the numeric type promotion order int8 int16 int32 float double int32 int64 double among items The value null is returned if the input is null Non numeric types in the input list will cause an error Example let l 1 2 2 3 3 4 null return sum sql sum l The expected result is sum 6 9d sql min max Syntax sql min num list sql max num list Gets the min max value of the non null numeric items in the given list Arguments num list An orderedList or unorderedList containing the items to be compared or a null value Return Value The min max value of the given list The returning type is decided by the item type with the highest order in the numeric type promotion order int8 int16 int32 float double int32 int64 double among items The value null is returned if the input is null Non numeric types in the input list will cause an error Example let l 1 2 2 3 3 4 null return min sql min l max sql max l The expected result is min d max 3 4d Spatial Functions Back to TOC create point Syntax create point x y Creates the primitive type point using an x and y value Arguments x A double that represents the x coordinate y A double that represents the y coordinate Return Value A point representing the ordered pair x y Example use dataverse TinySocial let c create point 3 7 return point c The expected result is point point 3 7 create line Syntax create line point expression1 point expression2 Creates the primitive type line using point expression1 and point expression2 Arguments point expression1 A point that represents the start point of the line point expression2 A point that represents the end point of the line Return Value A spatial line created using the points provided in point expression1 and point expression2 Example use dataverse TinySocial let c create line create point 3 7 create point 5 9 return line c The expected result is line line 3 7 5 9 create rectangle Syntax create rectangle point expression1 point expression2 Creates the primitive type rectangle using point expression1 and point expression2 Arguments point expression1 A point that represents the lower left point of the rectangle point expression2 A point that represents the upper right point of the rectangle Return Value A spatial rectangle created using the points provided in point expression1 and point expression2 Example use dataverse TinySocial let c create rectangle create point 3 7 create point 5 9 return rectangle c The expected result is rectangle rectangle 3 7 5 9 create circle Syntax create circle point expression radius Creates the primitive type circle using point expression and radius Arguments point expression A point that represents the center of the circle radius A double that represents the radius of the circle Return Value A spatial circle created using the center point and the radius provided in point expression and radius Example use dataverse TinySocial let c create circle create point 3 7 5 return circle c The expected result is circle circle 3 7 5 create polygon Syntax create polygon list expression Creates the primitive type polygon using the double values provided in the argument list expression Each two consecutive double values represent a point starting from the first double value in the list Note that at least six double values should be specified meaning a total of three points Arguments list expression An OrderedList of doubles representing the points of the polygon Return Value A polygon represents a spatial simple polygon created using the points provided in list expression Example use dataverse TinySocial let c create polygon 1 1 2 2 3 3 4 4 return polygon c The expected result is polygon polygon 1 1 2 2 3 3 4 4 point Syntax point string expression Constructor function for the point type by parsing a point string string expressionArguments string expression The string value representing a point value Return Value A point value represented by the given string Example use dataverse TinySocial let c point 55 5 138 4 return point c The expected result is point point 55 5 138 4 line Syntax line string expression Constructor function for line type by parsing a line string string expressionArguments string expression The string value representing a line value Return Value A line value represented by the given string Example use dataverse TinySocial let c line 55 5 138 4 13 54 138 4 return line c The expected result is line line 55 5 138 4 13 54 138 4 rectangle Syntax rectangle string expression Constructor function for rectangle type by parsing a rectangle string string expressionArguments string expression The string value representing a rectangle value Return Value A rectangle value represented by the given string Example use dataverse TinySocial let c rectangle 2 5 125 4 67 1 87 return rectangle c The expected result is rectangle rectangle 2 5 125 4 67 1 87 circle Syntax circle string expression Constructor function for circle type by parsing a circle string string expressionArguments string expression The string value representing a circle value Return Value A circle value represented by the given string Example use dataverse TinySocial let c circle 55 5 138 4 1 return circle c The expected result is circle circle 55 5 138 4 1 polygon Syntax polygon string expression Constructor function for polygon type by parsing a polygon string string expressionArguments string expression The string value representing a polygon value Return Value A polygon value represented by the given string Example use dataverse TinySocial let c polygon 55 5 138 4 13 54 138 4 13 54 53 31 55 5 53 31 return polygon c The expected result is polygon polygon 55 5 138 4 13 54 138 4 13 54 53 31 55 5 53 31 get x get y Syntax get x point expression or get y point expression Returns the x or y coordinates of a point point expression Arguments point expression A point Return Value A double representing the x or y coordinates of the point point expression Example use dataverse TinySocial let point create point 2 3 5 return x coordinate get x point y coordinate get y point The expected result is x coordinate 2 3d y coordinate 5 d get points Syntax get points spatial expression Returns an ordered list of the points forming the spatial object spatial expression Arguments spatial expression A point line rectangle circle or polygon Return Value An OrderedList of the points forming the spatial object spatial expression Example use dataverse TinySocial let line create line create point 1 6 99 4 create point 72 76 9 let rectangle create rectangle create point 9 2 49 create point 77 8 111 1 let polygon create polygon 1 1 2 2 3 3 4 4 let line list get points line let rectangle list get points rectangle let polygon list get points polygon return line first point line list line second point line list 1 rectangle left bottom point rectangle list rectangle top upper point rectangle list 1 polygon first point polygon list polygon second point polygon list 1 polygon third point polygon list 2 polygon forth point polygon list 3 The expected result is line first point point 1 6 99 4 line second point point 72 76 9 rectangle left bottom point point 9 2 49 rectangle top upper point point 77 8 111 1 polygon first point point 1 1 polygon second point point 2 2 polygon third point point 3 3 polygon forth point point 4 4 get center get radius Syntax get center circle expression or get radius circle expression Returns the center and the radius of a circle circle expression respectively Arguments circle expression A circle Return Value A point or double represent the center or radius of the circle circle expression Example use dataverse TinySocial let circle create circle create point 6 3 1 return circle radius get radius circle circle center get center circle The expected result is circle radius 1 d circle center point 6 3 spatial distance Syntax spatial distance point expression1 point expression2 Returns the Euclidean distance between point expression1 and point expression2 Arguments point expression1 A point point expression2 A point Return Value A double as the Euclidean distance between point expression1 and point expression2 Example use dataverse TinySocial for t in dataset TweetMessages let d spatial distance t sender location create point 3 7 return point t sender location distance d The expected result is point point 47 44 8 65 distance 2 434678857275934d point point 29 15 76 53 distance 6 585 89217315132d point point 37 59 68 42 distance 7 7527 92 3884797d point point 24 82 94 63 distance 25 168816 23 7512d point point 32 84 67 14 distance 4 3 533463451212d point point 29 72 75 8 distance 5 8 675468743 835d point point 39 28 7 48 distance 9 2924 55 1268227d point point 4 9 92 69 distance 24 832321679617472d point point 47 51 83 99 distance 22 4125 976 1782d point point 36 21 72 6 distance 6 73231758 15 24d point point 46 5 93 34 distance 28 3259262867 7734d point point 36 86 74 62 distance 8 27 671 73135482d spatial area Syntax spatial area spatial 2d expression Returns the spatial area of spatial 2d expression Arguments spatial 2d expression A rectangle circle or polygon Return Value A double representing the area of spatial 2d expression Example use dataverse TinySocial let circleArea spatial area create circle create point 5 return Area circleArea The expected result is Area 78 53981625d spatial intersect Syntax spatial intersect spatial expression1 spatial expression2 Checks whether arg1 and arg2 spatially intersect each other Arguments spatial expression1 A point line rectangle circle or polygon spatial expression2 A point line rectangle circle or polygon Return Value A boolean representing whether spatial expression1 and spatial expression2 spatially overlap with each other Example use dataverse TinySocial for t in dataset TweetMessages where spatial intersect t sender location create rectangle create point 3 7 create point 4 8 return t The expected result is tweetid 4 user screen name NathanGiesen 211 lang en friends count 39339 statuses count 473 name Nathan Giesen followers count 49416 sender location point 39 28 7 48 send time datetime 2 11 12 26T1 1 Z referred topics sprint voice command message text like sprint the voice command is mind blowing tweetid 7 user screen name ChangEwing 573 lang en friends count 182 statuses count 394 name Chang Ewing followers count 32136 sender location point 36 21 72 6 send time datetime 2 11 8 25T1 1 Z referred topics samsung platform message text like samsung the platform is good tweetid 9 user screen name NathanGiesen 211 lang en friends count 39339 statuses count 473 name Nathan Giesen followers count 49416 sender location point 36 86 74 62 send time datetime 2 12 7 21T1 1 Z referred topics verizon voicemail service message text love verizon its voicemail service is awesome spatial cell Syntax spatial cell point expression1 point expression2 x increment y increment Returns the grid cell that point expression1 belongs to Arguments point expression1 A point representing the point of interest that its grid cell will be returned point expression2 A point representing the origin of the grid x increment A double represents X increments y increment A double represents Y increments Return Value A rectangle representing the grid cell that point expression1 belongs to Example use dataverse TinySocial for t in dataset TweetMessages group by c spatial cell t sender location create point 2 5 5 5 6 with t let num count t return cell c count num The expected result is cell rectangle 2 92 25 5 98 count 1i64 cell rectangle 25 5 74 31 8 count 2i64 cell rectangle 31 62 36 5 68 count 1i64 cell rectangle 31 68 36 5 74 count 1i64 cell rectangle 36 5 68 42 74 count 2i64 cell rectangle 36 5 74 42 8 count 1i64 cell rectangle 36 5 92 42 98 count 1i64 cell rectangle 42 8 47 5 86 count 1i64 cell rectangle 42 92 47 5 98 count 1i64 cell rectangle 47 5 8 53 86 count 1i64 Similarity Functions Back to TOC AsterixDB supports queries with different similarity functions including edit distance and Jaccard edit distance Syntax edit distance expression1 expression2 Returns the edit distance of expression1 and expression2 Arguments expression1 A string or a homogeneous OrderedList of a comparable item type expression2 The same type as expression1 Return Value An int32 that represents the edit distance between expression1 and expression2 Example use dataverse TinySocial for user in dataset FacebookUsers let ed edit distance user name Suzanna Tilson where ed 2 return user The expected result is id 7 alias Suzanna name SuzannaTillson user since datetime 2 12 8 7T1 1 Z friend ids 6 employment organization name Labzatron start date date 2 11 4 19 end date null edit distance check Syntax edit distance check expression1 expression2 threshold Checks whether expression1 and expression2 have an edit distance within a given threshold The check version of edit distance is faster than the non check version because the former can detect whether two items satisfy a given threshold using early termination techniques as opposed to computing their real distance Although possible it is not necessary for the user to write queries using the check versions explicitly since a rewrite rule can perform an appropriate transformation from a non check version to a check version Arguments expression1 A string or a homogeneous OrderedList of a comparable item type expression2 The same type as expression1 threshold An int32 that represents the distance threshold Return Value An OrderedList with two items The first item contains a boolean value representing whether expression1 and expression2 are similar The second item contains an int32 that represents the edit distance of expression1 and expression2 if it is within the threshold or otherwise Example use dataverse TinySocial for user in dataset FacebookUsers let ed edit distance check user name Suzanna Tilson 2 where ed return ed 1 The expected result is 2 similarity jaccard Syntax similarity jaccard list expression1 list expression2 Returns the Jaccard similarity of list expression1 and list expression2 Arguments list expression1 An UnorderedList or OrderedList list expression2 An UnorderedList or OrderedList Return Value A float that represents the Jaccard similarity of list expression1 and list expression2 Example use dataverse TinySocial for user in dataset FacebookUsers let sim similarity jaccard user friend ids 1 5 9 where sim 6f return user The expected result is id 3 alias Emory name EmoryUnk user since datetime 2 12 7 1 T1 1 Z friend ids 1 5 8 9 employment organization name geomedia start date date 2 1 6 17 end date date 2 1 1 26 id 1 alias Bram name BramHatch user since datetime 2 1 1 16T1 1 Z friend ids 1 5 9 employment organization name physcane start date date 2 7 6 5 end date date 2 11 11 5 similarity jaccard check Syntax similarity jaccard check list expression1 list expression2 threshold Checks whether list expression1 and list expression2 have a Jaccard similarity greater than or equal to threshold Again the check version of Jaccard is faster than the non check version Arguments list expression1 An UnorderedList or OrderedList list expression2 An UnorderedList or OrderedList threshold A float that represents the similarity threshold Return Value An OrderedList with two items The first item contains a boolean value representing whether list expression1 and list expression2 are similar The second item contains a float that represents the Jaccard similarity of list expression1 and list expression2 if it is greater than or equal to the threshold or otherwise Example use dataverse TinySocial for user in dataset FacebookUsers let sim similarity jaccard check user friend ids 1 5 9 6f where sim return sim 1 The expected result is 75f 1 f Similarity Operator is syntactic sugar for expressing a similarity condition with a given similarity threshold The similarity function and threshold for are controlled via set directives The operator returns a boolean value that represents whether the operands are similar Example for Jaccard similarity use dataverse TinySocial set simfunction jaccard set simthreshold 6f for user in dataset FacebookUsers where user friend ids 1 5 9 return user The expected result is id 3 alias Emory name EmoryUnk user since datetime 2 12 7 1 T1 1 Z friend ids 1 5 8 9 employment organization name geomedia start date date 2 1 6 17 end date date 2 1 1 26 id 1 alias Bram name BramHatch user since datetime 2 1 1 16T1 1 Z friend ids 1 5 9 employment organization name physcane start date date 2 7 6 5 end date date 2 11 11 5 Example for edit distance similarity use dataverse TinySocial set simfunction edit distance set simthreshold 2 for user in dataset FacebookUsers where user name Suzanna Tilson return user The expected output is id 7 alias Suzanna name SuzannaTillson user since datetime 2 12 8 7T1 1 Z friend ids 6 employment organization name Labzatron start date date 2 11 4 19 end date null Tokenizing Functions Back to TOC word tokens Syntax word tokens string expression Returns a list of word tokens of string expression Arguments string expression A string that will be tokenized Return Value An OrderedList of string word tokens Example use dataverse TinySocial for t in dataset TweetMessages let tokens word tokens t message text where t send time datetime 2 12 1 1T return tweetid t tweetid word tokens tokens The expected result is tweetid 9 word tokens love verizon its voicemail service is awesome Temporal Functions Back to TOC date Syntax date string expression Constructor function for date type by parsing a date string string expression Arguments string expression The string value representing a date value Return Value A date value represented by the given string Example date extended date 2 13 4 1 date basic date 2 13 4 1 The expected result is date extended date 2 13 4 1 date basic date 2 13 4 1 time Syntax time string expression Constructor function for time type by parsing a time string string expression Arguments string expression The string value representing a time value Return Value A time value represented by the given string Example time extended time 12 3 45 678 8 time basic time 123 45678 8 The expected result is time extended time 4 3 45 678Z time basic time 4 3 45 678Z datetime Syntax datetime string expression Constructor function for the datetime type by parsing a datetime string string expression Arguments string expression The string value representing a datetime value Return Value A datetime value represented by the given string Example datetime extended datetime 2 13 4 1T12 3 45 678 8 datetime basic datetime 2 13 4 1T123 45678 8 The expected result is datetime extended datetime 2 13 4 1T 4 3 45 678Z datetime basic datetime 2 13 4 1T 4 3 45 678Z interval from date Syntax interval from date string expression1 string expression2 Constructor function for the interval type by parsing two date strings Arguments string expression1 The string value representing the starting date string expression2 The string value representing the ending date Return Value An interval value between the two dates Example date interval interval from date 2 12 1 1 2 13 4 1 The expected result is date interval interval date 2 12 1 1 2 13 4 1 interval from time Syntax interval from time string expression1 string expression2 Constructor function for the interval type by parsing two time strings Arguments string expression1 The string value representing the starting time string expression2 The string value representing the ending time Return Value An interval value between the two times Example time interval interval from time 12 23 34 456Z 233445567 8 The expected result is time interval interval time 12 23 34 456Z 15 34 45 567Z interval from datetime Syntax interval from datetime string expression1 string expression2 Constructor function for interval type by parsing two datetime strings Arguments string expression1 The string value representing the starting datetime string expression2 The string value representing the ending datetime Return Value An interval value between the two datetimes Example datetime interval interval from datetime 2 12 1 1T12 23 34 456 8 2 13 4 1T153445567Z The expected result is datetime interval interval datetime 2 12 1 1T 4 23 34 456Z 2 13 4 1T15 34 45 567Z year month day hour minute second millisecond Syntax year month day hour minute second millisecond temporal expression Accessors for accessing fields in a temporal valueArguments temporal expression a temporal value represented as one of the following types date datetime time and duration Return Value An int32 value representing the field to be extracted Example let c1 date 2 1 1 3 let c2 datetime 1987 11 19T23 49 23 938 let c3 time 12 23 34 93 7 let c4 duration P3Y73M632DT49H743M3948 94S return year year c1 month month c2 day day c1 hour hour c3 min minute c4 second second c2 ms millisecond c4 The expected result is year 2 1 month 11 day 3 hour 5 min 28 second 23 ms 94 adjust datetime for timezone Syntax adjust datetime for timezone datetime expression string expression Adjusts the given datetime datetime expression by applying the timezone information string expression Arguments datetime expression A datetime value to be adjusted string expression A string representing the timezone information Return Value A string value representing the new datetime after being adjusted by the timezone information Example use dataverse TinySocial for i in dataset TweetMessages return adjusted send time adjust datetime for timezone i send time 8 message i message text The expected result is adjusted send time 2 8 4 26T18 1 8 message love t mobile its customization is good adjusted send time 2 1 5 13T18 1 8 message like verizon its shortcut menu is awesome adjusted send time 2 6 11 4T18 1 8 message like motorola the speed is good adjusted send time 2 11 12 26T18 1 8 message like sprint the voice command is mind blowing adjusted send time 2 6 8 4T18 1 8 message can t stand motorola its speed is terrible adjusted send time 2 1 5 7T18 1 8 message like iphone the voice clarity is good adjusted send time 2 11 8 25T18 1 8 message like samsung the platform is good adjusted send time 2 5 1 14T18 1 8 message like t mobile the shortcut menu is awesome adjusted send time 2 12 7 21T18 1 8 message love verizon its voicemail service is awesome adjusted send time 2 8 1 26T18 1 8 message hate verizon its voice clarity is OMG adjusted send time 2 8 3 9T18 1 8 message can t stand iphone its platform is terrible adjusted send time 2 1 2 13T18 1 8 message like samsung the voice command is amazing adjust time for timezone Syntax adjust time for timezone time expression string expression Adjusts the given time time expression by applying the timezone information string expression Arguments time expression A time value to be adjusted string expression A string representing the timezone information Return Value A string value representing the new time after being adjusted by the timezone information Example use dataverse TinySocial for i in dataset TweetMessages return adjusted send time adjust time for timezone time from datetime i send time 8 message i message text The expected result is adjusted send time 18 1 8 message love t mobile its customization is good adjusted send time 18 1 8 message like verizon its shortcut menu is awesome adjusted send time 18 1 8 message like motorola the speed is good adjusted send time 18 1 8 message like sprint the voice command is mind blowing adjusted send time 18 1 8 message can t stand motorola its speed is terrible adjusted send time 18 1 8 message like iphone the voice clarity is good adjusted send time 18 1 8 message like samsung the platform is good adjusted send time 18 1 8 message like t mobile the shortcut menu is awesome adjusted send time 18 1 8 message love verizon its voicemail service is awesome adjusted send time 18 1 8 message hate verizon its voice clarity is OMG adjusted send time 18 1 8 message can t stand iphone its platform is terrible adjusted send time 18 1 8 message like samsung the voice command is amazing calendar duration from datetime Syntax calendar duration from datetime datetime expression duration expression Gets a user friendly representation of the duration duration expression based on the given datetime datetime expression Arguments datetime expression A datetime value to be used as the reference time point duration expression A duration value to be converted Return Value A duration value with the duration as duration expression but with a user friendly representation Example use dataverse TinySocial for i in dataset TweetMessages where i send time datetime 2 11 1 1T return since 2 11 subtract datetime i send time datetime 2 11 1 1T since 2 11 user friendly calendar duration from datetime i send time subtract datetime i send time datetime 2 11 1 1T The expected result is since 2 11 duration P359DT1 H1 M since 2 11 user friendly duration P11M23DT1 H1 M since 2 11 duration P236DT1 H1 M since 2 11 user friendly duration P7M23DT1 H1 M since 2 11 duration P567DT1 H1 M since 2 11 user friendly duration P1Y6M18DT1 H1 M calendar duration from date Syntax calendar duration from date date expression duration expression Gets a user friendly representation of the duration duration expression based on the given date date expression Arguments date expression A date value to be used as the reference time point duration expression A duration value to be converted Return Value A duration value with the duration as duration expression but with a user friendly representation Example use dataverse TinySocial for i in dataset TweetMessages where i send time datetime 2 11 1 1T return since 2 11 subtract datetime i send time datetime 2 11 1 1T since 2 11 user friendly calendar duration from date date from datetime i send time subtract datetime i send time datetime 2 11 1 1T The expected result is since 2 11 duration P359DT1 H1 M since 2 11 user friendly duration P11M23DT1 H1 M since 2 11 duration P236DT1 H1 M since 2 11 user friendly duration P7M23DT1 H1 M since 2 11 duration P567DT1 H1 M since 2 11 user friendly duration P1Y6M18DT1 H1 M current date Syntax current date Gets the current date Arguments NoneReturn Value A date value of the date when the function is called current time Syntax current time Get the current timeArguments NoneReturn Value A time value of the time when the function is called current datetime Syntax current datetime Get the current datetimeArguments NoneReturn Value A datetime value of the datetime when the function is called Example use dataverse TinySocial current date current date current time current time current datetime current datetime The expected result is current date date 2 13 4 6 current time time 48 44 93Z current datetime datetime 2 13 4 6T 48 44 93Z date from datetime Syntax date from datetime datetime expression Gets the date value from the given datetime value datetime expression Arguments datetime expression A datetime value to be extracted from Return Value A date value from the datetime time from datetime Syntax time from datetime datetime expression Get the time value from the given datetime value datetime expressionArguments datetime expression A datetime value to be extracted fromReturn Value A time value from the datetime Example use dataverse TinySocial for i in dataset TweetMessages where i send time datetime 2 11 1 1T return send date date from datetime i send time send time time from datetime i send time The expected result is send date date 2 11 12 26 send time time 1 1 Z send date date 2 11 8 25 send time time 1 1 Z send date date 2 12 7 21 send time time 1 1 Z date from unix time in days Syntax date from unix time in days numeric expression Gets a date representing the time after numeric expression days since 197 1 1 Arguments numeric expression A int8 int16 int32 value representing the number of days Return Value A date value as the time after numeric expression days since 197 1 1 datetime from unix time in ms Syntax datetime from unix time in ms numeric expression Gets a datetime representing the time after numeric expression milliseconds since 197 1 1T Z Arguments numeric expression A int8 int16 int32 int64 value representing the number of milliseconds Return Value A datetime value as the time after numeric expression milliseconds since 197 1 1T Z time from unix time in ms Syntax time from unix time in ms numeric expression Gets a time representing the time after numeric expression milliseconds since Z Arguments numeric expression A int8 int16 int32 value representing the number of milliseconds Return Value A time value as the time after numeric expression milliseconds since Z Example use dataverse TinySocial let d date from unix time in days 158 let dt datetime from unix time in ms 13651397 let t time from unix time in ms 3748 return date d datetime dt time t The expected result is date date 2 13 4 5 datetime datetime 2 13 4 5T 5 28 2 Z time time 3 748Z subtract date Syntax subtract date date start date end Get the duration between two dates date start and date endArguments date start the starting datedate end the ending dateReturn Value A duration value between date start and date end Example use dataverse TinySocial for i in dataset FacebookUser for j in dataset FacebookUser where i user since j user since and i user since datetime 2 12 1 1T return id1 i id id2 j id diff subtract date date from datetime j user since date from datetime i user since The expected result is id1 3 id2 1 diff duration P41D id1 3 id2 7 diff duration P28D id1 7 id2 1 diff duration P13D subtract time Syntax subtract time time start time end Get the duration between two times time start and time endArguments time start the starting timetime end the ending timeReturn Value A duration value between time start and time end Example use dataverse TinySocial for i in dataset FacebookUser for j in dataset FacebookUser where i user since j user since and i user since datetime 2 12 1 1T return id1 i id id2 j id diff subtract time time from datetime j user since time 2 5 48 938 The expected result is id1 3 id2 1 diff duration PT7H19M11 62S id1 3 id2 7 diff duration PT7H19M11 62S id1 7 id2 1 diff duration PT7H19M11 62S subtract datetime Syntax subtract datetime datetime start datetime end Get the duration between two datetimes datetime start and datetime endArguments datetime start the starting datetimedatetime end the ending datetimeReturn Value A duration value between datetime start and datetime end Example use dataverse TinySocial for i in dataset FacebookUser for j in dataset FacebookUser where i user since j user since and i user since datetime 2 11 1 1T return id1 i id id2 j id diff subtract datetime j user since i user since The expected result is id1 2 id2 1 diff duration P576D id1 2 id2 3 diff duration P535D id1 2 id2 7 diff duration P563D id1 3 id2 1 diff duration P41D id1 3 id2 7 diff duration P28D id1 7 id2 1 diff duration P13D interval start from date time datetime Syntax interval start from date time datetime date time datetime duration Construct an interval value by the given starting date time datetime and the duration that the interval lasts Arguments date time datetime a string representing a date time or datetime or a date time datetime value representing the starting time point duration a string or duration value representing the duration of the interval Note that duration cannot be negative value Return Value An interval value representing the interval starting from the given time point with the length of duration Example let itv1 interval start from date 1984 1 1 P1Y let itv2 interval start from time time 2 23 28 394 PT3H24M let itv3 interval start from datetime 1999 9 9T 9 9 9 999 duration P2M3 D return interval1 itv1 interval2 itv2 interval3 itv3 The expectecd result is interval1 interval date 1984 1 1 1985 1 1 interval2 interval time 2 23 28 394Z 5 47 28 394Z interval3 interval datetime 1999 9 9T 9 9 9 999Z 1999 12 9T 9 9 9 999Z get interval start get interval end Syntax get interval start get interval end interval Gets the start end of the given interval Arguments interval the interval to be accessed Return Value A time date or datetime depending on the time instances of the interval representing the starting or ending time Example let itv interval start from date 1984 1 1 P1Y return start get interval start itv end get interval end itv The expected result is start date 1984 1 1 end date 1985 1 1 interval bin Syntax interval bin time to bin time bin anchor duration bin size Return the interval value representing the bin containing the time to bin value Arguments time to bin a date time datetime value representing the time to be binned time bin anchor a date time datetime value representing an anchor of a bin starts The type of this argument should be the same as the first time to bin argument duration bin size the duration value representing the size of the bin in the type of year month duration or day time duration The type of this duration should be compatible with the type of time to bin so that the arithmetic operation between time to bin and duration bin size is well defined Currently AsterixDB supports the following arithmetic operations datetime year month durationdatetime day time durationdate year month durationdate day time durationtime day time durationReturn Value A interval value representing the bin containing the time to bin value Note that the internal type of this interval value should be the same as the time to bin type Example let c1 date 2 1 1 3 let c2 datetime 1987 11 19T23 49 23 938 let c3 time 12 23 34 93 7 return bin1 interval bin c1 date 199 1 1 year month duration P1Y bin2 interval bin c2 datetime 199 1 1T Z year month duration P6M bin3 interval bin c3 time day time duration PD1M bin4 interval bin c2 datetime 2 13 1 1T day time duration PT24H The expected result is bin1 interval date 2 1 1 1 2 11 1 1 bin2 interval datetime 1987 7 1T Z 1986 1 1T Z bin3 interval time 5 23 Z 5 24 Z bin4 interval datetime 1987 11 19T Z 1987 11 2 T Z Other Functions Back to TOC is null Syntax is null var Checks whether the given variable is a null value Arguments var A variable any type is allowed Return Value A boolean on whether the variable is a null or not Example for m in hello world null where not is null m return m The expected result is hello world switch case Syntax switch case condition case1 case1 result case2 case2 result default default result Switches amongst a sequence of cases and returns the result of the first matching case If no match is found the result of the default case is returned Arguments condition A variable any type is allowed caseI default A variable any type is allowed caseI default result A variable any type is allowed Return Value Returns caseI result if condition matches caseI otherwise default result Example 1 switch case a a x 1 y 2 z 3 The expected result is Example 2 switch case a x 1 y 2 z 3 The expected result is 3 Copyright 2 14 All Rights Reserved ", "_id": "http://asterix.ics.uci.edu/documentation/aql/functions.html", "title": "asterixdb - ", "html": "<!DOCTYPE html>\n<!--\n | Generated by Apache Maven Doxia at 2014-07-14\n | Rendered using Apache Maven Fluido Skin 1.3.0\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"Date-Revision-yyyymmdd\" content=\"20140714\" />\n    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>AsterixDB - </title>\n    <link rel=\"stylesheet\" href=\"../css/apache-maven-fluido-1.3.0.min.css\" />\n    <link rel=\"stylesheet\" href=\"../css/site.css\" />\n    <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\" />\n\n      \n    <script type=\"text/javascript\" src=\"../js/apache-maven-fluido-1.3.0.min.js\"></script>\n\n                          \n        \n<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-41536543-1', 'uci.edu');\n        ga('send', 'pageview');</script>\n          \n            </head>\n        <body class=\"topBarDisabled\">\n          \n                \n                    \n    \n        <div class=\"container-fluid\">\n          <div id=\"banner\">\n        <div class=\"pull-left\">\n                                    <a href=\"http://asterixdb.ics.uci.edu/\" id=\"bannerLeft\">\n                                                                                                <img src=\"../images/asterixlogo.png\"  alt=\"AsterixDB\"/>\n                </a>\n                      </div>\n        <div class=\"pull-right\">  </div>\n        <div class=\"clear\"><hr/></div>\n      </div>\n\n      <div id=\"breadcrumbs\">\n        <ul class=\"breadcrumb\">\n                \n                    \n                  <li id=\"publishDate\">Last Published: 2014-07-14</li>\n                      \n                \n                    \n                 <li id=\"projectVersion\" class=\"pull-right\">Version: 0.8.6</li>\n      \n                                            <li class=\"divider pull-right\">|</li>\n                        \n    <li class=\"pull-right\">              <a href=\"../index.html\" title=\"Documentation Home\">\n        Documentation Home</a>\n  </li>\n\n                        </ul>\n      </div>\n\n            \n      <div class=\"row-fluid\">\n        <div id=\"leftColumn\" class=\"span3\">\n          <div class=\"well sidebar-nav\">\n                \n                    \n                <ul class=\"nav nav-list\">\n                    <li class=\"nav-header\">Documentation</li>\n                                \n      <li>\n    \n                          <a href=\"../install.html\" title=\"Installing and Managing AsterixDB using Managix\">\n          <i class=\"none\"></i>\n        Installing and Managing AsterixDB using Managix</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/primer.html\" title=\"AsterixDB 101: An ADM and AQL Primer\">\n          <i class=\"none\"></i>\n        AsterixDB 101: An ADM and AQL Primer</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/js-sdk.html\" title=\"AsterixDB Javascript SDK\">\n          <i class=\"none\"></i>\n        AsterixDB Javascript SDK</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/datamodel.html\" title=\"Asterix Data Model (ADM)\">\n          <i class=\"none\"></i>\n        Asterix Data Model (ADM)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/manual.html\" title=\"Asterix Query Language (AQL)\">\n          <i class=\"none\"></i>\n        Asterix Query Language (AQL)</a>\n            </li>\n                  \n      <li class=\"active\">\n    \n            <a href=\"#\"><i class=\"none\"></i>AQL Functions</a>\n          </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/allens.html\" title=\"AQL Allen's Relations Functions\">\n          <i class=\"none\"></i>\n        AQL Allen's Relations Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/similarity.html\" title=\"AQL Support of Similarity Queries\">\n          <i class=\"none\"></i>\n        AQL Support of Similarity Queries</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../aql/externaldata.html\" title=\"Accessing External Data\">\n          <i class=\"none\"></i>\n        Accessing External Data</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"../api.html\" title=\"REST API to AsterixDB\">\n          <i class=\"none\"></i>\n        REST API to AsterixDB</a>\n            </li>\n            </ul>\n                \n                    \n                \n          <hr class=\"divider\" />\n\n           <div id=\"poweredBy\">\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                                                                                                                         <a href=\"https://code.google.com/p/hyracks/\" title=\"Hyracks\" class=\"builtBy\">\n        <img class=\"builtBy\"  alt=\"Hyracks\" src=\"../images/hyrax_ts.png\"    />\n      </a>\n                      </div>\n          </div>\n        </div>\n        \n                \n        <div id=\"bodyColumn\"  class=\"span9\" >\n                                  \n            <h1>Asterix: Using Functions</h1>\n<div class=\"section\">\n<h2><a name=\"toc\" id=\"toc\">Table of Contents</a><a name=\"Table_of_Contents\"></a></h2>\n\n<ul>\n  \n<li><a href=\"#NumericFunctions\">Numeric Functions</a></li>\n  \n<li><a href=\"#StringFunctions\">String Functions</a></li>\n  \n<li><a href=\"#AggregateFunctions\">Aggregate Functions</a></li>\n  \n<li><a href=\"#SpatialFunctions\">Spatial Functions</a></li>\n  \n<li><a href=\"#SimilarityFunctions\">Similarity Functions</a></li>\n  \n<li><a href=\"#TokenizingFunctions\">Tokenizing Functions</a></li>\n  \n<li><a href=\"#TemporalFunctions\">Temporal Functions</a></li>\n  \n<li><a href=\"#OtherFunctions\">Other Functions</a></li>\n</ul>\n<p>Asterix provides various classes of functions to support operations on numeric, string, spatial, and temporal data. This document explains how to use these functions.</p></div>\n<div class=\"section\">\n<h2><a name=\"NumericFunctions\" id=\"NumericFunctions\">Numeric Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Numeric_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>numeric-abs<a name=\"numeric-abs\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>numeric-abs(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Computes the absolute value of the argument.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt>/<tt>float</tt>/<tt>double</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The absolute value of the argument with the same type as the input argument, or <tt>null</tt> if the argument is a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := numeric-abs(2013)\nlet $v2 := numeric-abs(-4036)\nlet $v3 := numeric-abs(0)\nlet $v4 := numeric-abs(float(&quot;-2013.5&quot;))\nlet $v5 := numeric-abs(double(&quot;-2013.593823748327284&quot;))\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4, &quot;v5&quot;: $v5 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: 2013, &quot;v2&quot;: 4036, &quot;v3&quot;: 0, &quot;v4&quot;: 2013.5f, &quot;v5&quot;: 2013.5938237483274d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>numeric-ceiling<a name=\"numeric-ceiling\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>numeric-ceiling(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Computes the smallest (closest to negative infinity) number with no fractional part that is not less than the value of the argument. If the argument is already equal to mathematical integer, then the result is the same as the argument.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt>/<tt>float</tt>/<tt>double</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The ceiling value for the given number in the same type as the input argument, or <tt>null</tt> if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := numeric-ceiling(2013)\nlet $v2 := numeric-ceiling(-4036)\nlet $v3 := numeric-ceiling(0.3)\nlet $v4 := numeric-ceiling(float(&quot;-2013.2&quot;))\nlet $v5 := numeric-ceiling(double(&quot;-2013.893823748327284&quot;))\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4, &quot;v5&quot;: $v5 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: 2013, &quot;v2&quot;: -4036, &quot;v3&quot;: 1.0d, &quot;v4&quot;: -2013.0f, &quot;v5&quot;: -2013.0d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>numeric-floor<a name=\"numeric-floor\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>numeric-floor(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Computes the largest (closest to positive infinity) number with no fractional part that is not greater than the value. If the argument is already equal to mathematical integer, then the result is the same as the argument.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt>/<tt>float</tt>/<tt>double</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The floor value for the given number in the same type as the input argument, or <tt>null</tt> if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := numeric-floor(2013)\nlet $v2 := numeric-floor(-4036)\nlet $v3 := numeric-floor(0.8)\nlet $v4 := numeric-floor(float(&quot;-2013.2&quot;))\nlet $v5 := numeric-floor(double(&quot;-2013.893823748327284&quot;))\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4, &quot;v5&quot;: $v5 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: 2013, &quot;v2&quot;: -4036, &quot;v3&quot;: 0.0d, &quot;v4&quot;: -2014.0f, &quot;v5&quot;: -2014.0d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>numeric-round<a name=\"numeric-round\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>numeric-round(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Computes the number with no fractional part that is closest (and also closest to positive infinity) to the argument.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt>/<tt>float</tt>/<tt>double</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The rounded value for the given number in the same type as the input argument, or <tt>null</tt> if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := numeric-round(2013)\nlet $v2 := numeric-round(-4036)\nlet $v3 := numeric-round(0.8)\nlet $v4 := numeric-round(float(&quot;-2013.256&quot;))\nlet $v5 := numeric-round(double(&quot;-2013.893823748327284&quot;))\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4, &quot;v5&quot;: $v5 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: 2013, &quot;v2&quot;: -4036, &quot;v3&quot;: 1.0d, &quot;v4&quot;: -2013.0f, &quot;v5&quot;: -2014.0d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>numeric-round-half-to-even<a name=\"numeric-round-half-to-even\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>numeric-round-half-to-even(numeric_expression, [precision])\n</pre></div></li>\n  \n<li>\n<p>Computes the closest numeric value to <tt>numeric_expression</tt> that is a multiple of ten to the power of minus <tt>precision</tt>. <tt>precision</tt> is optional and by default value <tt>0</tt> is used.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt>/<tt>float</tt>/<tt>double</tt> value.</li>\n    \n<li><tt>precision</tt>: An optional integer field representing the number of digits in the fraction of the the result</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The rounded value for the given number in the same type as the input argument, or <tt>null</tt> if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $v1 := numeric-round-half-to-even(2013)\nlet $v2 := numeric-round-half-to-even(-4036)\nlet $v3 := numeric-round-half-to-even(0.8)\nlet $v4 := numeric-round-half-to-even(float(&quot;-2013.256&quot;))\nlet $v5 := numeric-round-half-to-even(double(&quot;-2013.893823748327284&quot;))\nlet $v6 := numeric-round-half-to-even(double(&quot;-2013.893823748327284&quot;), 2)\nlet $v7 := numeric-round-half-to-even(2013, 4)\nlet $v8 := numeric-round-half-to-even(float(&quot;-2013.256&quot;), 5)\nreturn { &quot;v1&quot;: $v1, &quot;v2&quot;: $v2, &quot;v3&quot;: $v3, &quot;v4&quot;: $v4, &quot;v5&quot;: $v5, &quot;v6&quot;: $v6, &quot;v7&quot;: $v7, &quot;v8&quot;: $v8 }\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;v1&quot;: 2013, &quot;v2&quot;: -4036, &quot;v3&quot;: 1.0d, &quot;v4&quot;: -2013.0f, &quot;v5&quot;: -2014.0d, &quot;v6&quot;: -2013.89d, &quot;v7&quot;: 2013, &quot;v8&quot;: -2013.256f }\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"StringFunctions\" id=\"StringFunctions\">String Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"String_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>string-to-codepoint<a name=\"string-to-codepoint\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>string-to-codepoint(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Converts the string <tt>string_expression</tt> to its code-based representation.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that will be converted.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>OrderedList</tt> of the code points for the string <tt>string_expression</tt>.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>codepoint-to-string<a name=\"codepoint-to-string\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>codepoint-to-string(list_expression)\n</pre></div></li>\n  \n<li>\n<p>Converts the ordered code-based representation <tt>list_expression</tt> to the corresponding string.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list_expression</tt> : An <tt>OrderedList</tt> of code-points.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> representation of <tt>list_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $s := &quot;Hello ASTERIX!&quot;\nlet $l := string-to-codepoint($s)\nlet $ss := codepoint-to-string($l)\nreturn {&quot;codes&quot;: $l, &quot;string&quot;: $ss}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;codes&quot;: [ 72, 101, 108, 108, 111, 32, 65, 83, 84, 69, 82, 73, 88, 33 ], &quot;string&quot;: &quot;Hello ASTERIX!&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>contains<a name=\"contains\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>contains(string_expression, substring_to_contain)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the string <tt>string_expression</tt> contains the string <tt>substring_to_contain</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might contain the given substring.</li>\n    \n<li><tt>substring_to_contain</tt> : A target <tt>string</tt> that might be contained.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt> value, <tt>true</tt> if <tt>string_expression</tt> contains <tt>substring_to_contain</tt>, and <tt>false</tt> otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere contains($i.message, &quot;phone&quot;)\nreturn {&quot;mid&quot;: $i.message-id, &quot;message&quot;: $i.message}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;mid&quot;: 2, &quot;message&quot;: &quot; dislike iphone its touch-screen is horrible&quot; }\n{ &quot;mid&quot;: 13, &quot;message&quot;: &quot; dislike iphone the voice-command is bad:(&quot; }\n{ &quot;mid&quot;: 15, &quot;message&quot;: &quot; like iphone the voicemail-service is awesome&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>like<a name=\"like\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>like(string_expression, string_pattern)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the string <tt>string_expression</tt> contains the string pattern <tt>string_pattern</tt>. Compared to the <tt>contains</tt> function, the <tt>like</tt> function also supports regular expressions.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might contain the pattern or <tt>null</tt>.</li>\n    \n<li><tt>string_pattern</tt> : A pattern <tt>string</tt> that might be contained or <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt> value, <tt>true</tt> if <tt>string_expression</tt> contains the pattern <tt>string_pattern</tt>, and <tt>false</tt> otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere like($i.message, &quot;%at&amp;t%&quot;)\nreturn $i.message\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; can't stand at&amp;t the network is horrible:(&quot;\n&quot; can't stand at&amp;t its plan is terrible&quot;\n&quot; love at&amp;t its 3G is good:)&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>starts-with<a name=\"starts-with\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>starts-with(string_expression, substring_to_start_with)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the string <tt>string_expression</tt> starts with the string <tt>substring_to_start_with</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might start with the given string.</li>\n    \n<li><tt>substring_to_start_with</tt> : A <tt>string</tt> that might be contained as the starting substring.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt>, returns <tt>true</tt> if <tt>string_expression</tt> starts with the string <tt>substring_to_start_with</tt>, and <tt>false</tt> otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere starts-with($i.message, &quot; like&quot;)\nreturn $i.message\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; like samsung the plan is amazing&quot;\n&quot; like t-mobile its platform is mind-blowing&quot;\n&quot; like verizon the 3G is awesome:)&quot;\n&quot; like iphone the voicemail-service is awesome&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>ends-with<a name=\"ends-with\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>ends-with(string_expression, substring_to_end_with)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the string <tt>string_expression</tt> ends with the string <tt>substring_to_end_with</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might end with the given string.</li>\n    \n<li><tt>substring_to_end_with</tt> : A <tt>string</tt> that might be contained as the ending substring.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt>, returns <tt>true</tt> if <tt>string_expression</tt> ends with the string <tt>substring_to_end_with</tt>, and <tt>false</tt> otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere ends-with($i.message, &quot;:)&quot;)\nreturn $i.message\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; love sprint its shortcut-menu is awesome:)&quot;\n&quot; like verizon the 3G is awesome:)&quot;\n&quot; love at&amp;t its 3G is good:)&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>string-concat<a name=\"string-concat\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>string-concat(list_expression)\n</pre></div></li>\n  \n<li>\n<p>Concatenates a list of strings <tt>list_expression</tt> into a single string.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list_expression</tt> : An <tt>OrderedList</tt> or <tt>UnorderedList</tt> of <tt>string</tt>s (could be <tt>null</tt>) to be concatenated.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>Returns the concatenated <tt>string</tt> value.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $i := &quot;ASTERIX&quot;\nlet $j := &quot; &quot;\nlet $k := &quot;ROCKS!&quot;\nreturn string-concat([$i, $j, $k])\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot;ASTERIX ROCKS!&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>string-join<a name=\"string-join\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>string-join(list_expression, string_expression)\n</pre></div></li>\n  \n<li>\n<p>Joins a list of strings <tt>list_expression</tt> with the given separator <tt>string_expression</tt> into a single string.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list_expression</tt> : An <tt>OrderedList</tt> or <tt>UnorderedList</tt> of strings (could be <tt>null</tt>) to be joined.</li>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> as the separator.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>Returns the joined <tt>String</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $i := [&quot;ASTERIX&quot;, &quot;ROCKS~&quot;]\nreturn string-join($i, &quot;!! &quot;)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot;ASTERIX!! ROCKS~&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>lowercase<a name=\"lowercase\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>lowercase(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Converts a given string <tt>string_expression</tt> to its lowercase form.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> to be converted.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>Returns a <tt>string</tt> as the lowercase form of the given <tt>string_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $i := &quot;ASTERIX&quot;\nreturn lowercase($i)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>asterix\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>matches<a name=\"matches\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>matches(string_expression, string_pattern)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the strings <tt>string_expression</tt> matches the given pattern <tt>string_pattern</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might contain the pattern.</li>\n    \n<li><tt>string_pattern</tt> : A pattern <tt>string</tt> to be matched.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt>, returns <tt>true</tt> if <tt>string_expression</tt> matches the pattern <tt>string_pattern</tt>, and <tt>false</tt> otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere matches($i.message, &quot;dislike iphone&quot;)\nreturn $i.message\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; dislike iphone its touch-screen is horrible&quot;\n&quot; dislike iphone the voice-command is bad:(&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>replace<a name=\"replace\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>replace(string_expression, string_pattern, string_replacement)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the string <tt>string_expression</tt> matches the given pattern <tt>string_pattern</tt>, and replace the matched pattern <tt>string_pattern</tt> with the new pattern <tt>string_replacement</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that might contain the pattern.</li>\n    \n<li><tt>string_pattern</tt> : A pattern <tt>string</tt> to be matched.</li>\n    \n<li><tt>string_replacement</tt> : A pattern <tt>string</tt> to be used as the replacement.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>Returns a <tt>string</tt> that is obtained after the replacements.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere matches($i.message, &quot; like iphone&quot;)\nreturn replace($i.message, &quot; like iphone&quot;, &quot;like android&quot;)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot;like android the voicemail-service is awesome&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>string-length<a name=\"string-length\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>string-length(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns the length of the string <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> or <tt>null</tt> that represents the string to be checked.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>int32</tt> that represents the length of <tt>string_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nreturn {&quot;mid&quot;: $i.message-id, &quot;message-len&quot;: string-length($i.message)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;mid&quot;: 1, &quot;message-len&quot;: 43 }\n{ &quot;mid&quot;: 2, &quot;message-len&quot;: 44 }\n{ &quot;mid&quot;: 3, &quot;message-len&quot;: 33 }\n{ &quot;mid&quot;: 4, &quot;message-len&quot;: 43 }\n{ &quot;mid&quot;: 5, &quot;message-len&quot;: 46 }\n{ &quot;mid&quot;: 6, &quot;message-len&quot;: 43 }\n{ &quot;mid&quot;: 7, &quot;message-len&quot;: 37 }\n{ &quot;mid&quot;: 8, &quot;message-len&quot;: 33 }\n{ &quot;mid&quot;: 9, &quot;message-len&quot;: 34 }\n{ &quot;mid&quot;: 10, &quot;message-len&quot;: 50 }\n{ &quot;mid&quot;: 11, &quot;message-len&quot;: 38 }\n{ &quot;mid&quot;: 12, &quot;message-len&quot;: 52 }\n{ &quot;mid&quot;: 13, &quot;message-len&quot;: 42 }\n{ &quot;mid&quot;: 14, &quot;message-len&quot;: 27 }\n{ &quot;mid&quot;: 15, &quot;message-len&quot;: 45 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>substring<a name=\"substring\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>substring(string_expression, offset[, length])\n</pre></div></li>\n  \n<li>\n<p>Returns the substring from the given string <tt>string_expression</tt> based on the given start offset <tt>offset</tt> with the optional <tt>length</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> to be extracted.</li>\n    \n<li><tt>offset</tt> : An <tt>int32</tt> as the starting offset of the substring in <tt>string_expression</tt>.</li>\n    \n<li><tt>length</tt> : (Optional) An <tt>int32</tt> as the length of the substring.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> that represents the substring.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere string-length($i.message) &gt; 50\nreturn substring($i.message, 50)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot;G:(&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>substring-before<a name=\"substring-before\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>substring-before(string_expression, string_pattern)\n</pre></div></li>\n  \n<li>\n<p>Returns the substring from the given string <tt>string_expression</tt> before the given pattern <tt>string_pattern</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> to be extracted.</li>\n    \n<li><tt>string_pattern</tt> : A <tt>string</tt> pattern to be searched.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> that represents the substring.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere contains($i.message, &quot;iphone&quot;)\nreturn substring-before($i.message, &quot;iphone&quot;)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; dislike &quot;\n&quot; dislike &quot;\n&quot; like &quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>substring-after<a name=\"substring-after\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>substring-after(string_expression, string_pattern)\n</pre></div></li>\n  \n<li>\n<p>Returns the substring from the given string <tt>string_expression</tt> after the given pattern <tt>string_pattern</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> to be extracted.</li>\n    \n<li><tt>string_pattern</tt> : A <tt>string</tt> pattern to be searched.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> that represents the substring.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookMessages')\nwhere contains($i.message, &quot;iphone&quot;)\nreturn substring-after($i.message, &quot;iphone&quot;)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot; its touch-screen is horrible&quot;\n&quot; the voice-command is bad:(&quot;\n&quot; the voicemail-service is awesome&quot;\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"AggregateFunctions\" id=\"AggregateFunctions\">Aggregate Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Aggregate_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>count<a name=\"count\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>count(list)\n</pre></div></li>\n  \n<li>\n<p>Gets the number of items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing the items to be counted, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>int64</tt> value representing the number of items in the given list. <tt>0i64</tt> is returned if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $l1 := ['hello', 'world', 1, 2, 3]\nlet $l2 := for $i in dataset TwitterUsers return $i\nreturn {&quot;count1&quot;: count($l1), &quot;count2&quot;: count($l2)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;count1&quot;: 5i64, &quot;count2&quot;: 4i64 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>avg<a name=\"avg\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>avg(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the average value of the items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing numeric or null values, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>double</tt> value representing the average of the numbers in the given list. <tt>null</tt> is returned if the input is <tt>null</tt>, or the input list contains <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $l := for $i in dataset TwitterUsers return $i.friends_count\nreturn {&quot;avg_friend_count&quot;: avg($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;avg_friend_count&quot;: 191.5d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>sum<a name=\"sum\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>sum(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the sum of the items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing numeric or null values, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The sum of the numbers in the given list. The returning type is decided by the item type with the highest order in the numeric type promotion order (<tt>int8</tt>-&gt; <tt>int16</tt>-&gt;<tt>int32</tt>-&gt;<tt>float</tt>-&gt;<tt>double</tt>, <tt>int32</tt>-&gt;<tt>int64</tt>-&gt;<tt>double</tt>) among items. <tt>null</tt> is returned if the input is <tt>null</tt>, or the input list contains <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $l := for $i in dataset TwitterUsers return $i.friends_count\nreturn {&quot;sum_friend_count&quot;: sum($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;sum_friend_count&quot;: 766 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>min/max<a name=\"minmax\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>min(num_list), max(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the min/max value of numeric items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing the items to be compared, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The min/max value of the given list. The returning type is decided by the item type with the highest order in the numeric type promotion order (<tt>int8</tt>-&gt; <tt>int16</tt>-&gt;<tt>int32</tt>-&gt;<tt>float</tt>-&gt;<tt>double</tt>, <tt>int32</tt>-&gt;<tt>int64</tt>-&gt;<tt>double</tt>) among items. <tt>null</tt> is returned if the input is <tt>null</tt>, or the input list contains <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $l := for $i in dataset TwitterUsers return $i. friends_count\nreturn {&quot;min_friend_count&quot;: min($l), &quot;max_friend_count&quot;: max($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;min_friend_count&quot;: 18, &quot;max_friend_count&quot;: 445 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>sql-count<a name=\"sql-count\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>sql-count(list)\n</pre></div></li>\n  \n<li>\n<p>Gets the number of non-null items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing the items to be counted, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>int64</tt> value representing the number of non-null items in the given list. The value <tt>0i64</tt> is returned if the input is <tt>null</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p></li>\n</ul>\n\n<div class=\"source\">\n<pre>    let $l1 := ['hello', 'world', 1, 2, 3, null]\n    return {&quot;count&quot;: sql-count($l1)}\n</pre></div>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;count&quot;: 5i64 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>sql-avg<a name=\"sql-avg\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>sql-avg(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the average value of the non-null items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing numeric or null values, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>double</tt> value representing the average of the non-null numbers in the given list. The <tt>null</tt> value is returned if the input is <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $l := [1.2, 2.3, 3.4, 0, null]\nreturn {&quot;avg&quot;: sql-avg($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;avg&quot;: 1.725d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>sql-sum<a name=\"sql-sum\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>sql-sum(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the sum of the non-null items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing numeric or null values, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The sum of the non-null numbers in the given list. The returning type is decided by the item type with the highest order in the numeric type promotion order (<tt>int8</tt>-&gt; <tt>int16</tt>-&gt;<tt>int32</tt>-&gt;<tt>float</tt>-&gt;<tt>double</tt>, <tt>int32</tt>-&gt;<tt>int64</tt>-&gt;<tt>double</tt>) among items. The value <tt>null</tt> is returned if the input is <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $l := [1.2, 2.3, 3.4, 0, null]\nreturn {&quot;sum&quot;: sql-sum($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;sum&quot;: 6.9d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>sql-min/max<a name=\"sql-minmax\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>sql-min(num_list), sql-max(num_list)\n</pre></div></li>\n  \n<li>\n<p>Gets the min/max value of the non-null numeric items in the given list.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>num_list</tt>: An <tt>orderedList</tt> or <tt>unorderedList</tt> containing the items to be compared, or a <tt>null</tt> value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>The min/max value of the given list. The returning type is decided by the item type with the highest order in the numeric type promotion order (<tt>int8</tt>-&gt; <tt>int16</tt>-&gt;<tt>int32</tt>-&gt;<tt>float</tt>-&gt;<tt>double</tt>, <tt>int32</tt>-&gt;<tt>int64</tt>-&gt;<tt>double</tt>) among items. The value <tt>null</tt> is returned if the input is <tt>null</tt>. Non-numeric types in the input list will cause an error.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $l := [1.2, 2.3, 3.4, 0, null]\nreturn {&quot;min&quot;: sql-min($l), &quot;max&quot;: sql-max($l)}\n</pre></div></li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;min&quot;: 0.0d, &quot;max&quot;: 3.4d }\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"SpatialFunctions\" id=\"SpatialFunctions\">Spatial Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Spatial_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>create-point<a name=\"create-point\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>create-point(x, y)\n</pre></div></li>\n  \n<li>\n<p>Creates the primitive type <tt>point</tt> using an <tt>x</tt> and <tt>y</tt> value.</p></li>\n  \n<li>Arguments:</li>\n  \n<li><tt>x</tt> : A <tt>double</tt> that represents the x-coordinate.</li>\n  \n<li><tt>y</tt> : A <tt>double</tt> that represents the y-coordinate.</li>\n  \n<li>Return Value:</li>\n  \n<li>A <tt>point</tt> representing the ordered pair (<tt>x</tt>, <tt>y</tt>).</li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c :=  create-point(30.0,70.0)\nreturn {&quot;point&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;point&quot;: point(&quot;30.0,70.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>create-line<a name=\"create-line\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>create-line(point_expression1, point_expression2)\n</pre></div></li>\n  \n<li>\n<p>Creates the primitive type <tt>line</tt> using <tt>point_expression1</tt> and <tt>point_expression2</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression1</tt> : A <tt>point</tt> that represents the start point of the line.</li>\n    \n<li><tt>point_expression2</tt> : A <tt>point</tt> that represents the end point of the line.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A spatial <tt>line</tt> created using the points provided in <tt>point_expression1</tt> and <tt>point_expression2</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c :=  create-line(create-point(30.0,70.0), create-point(50.0,90.0))\nreturn {&quot;line&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;line&quot;: line(&quot;30.0,70.0 50.0,90.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>create-rectangle<a name=\"create-rectangle\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>create-rectangle(point_expression1, point_expression2)\n</pre></div></li>\n  \n<li>\n<p>Creates the primitive type <tt>rectangle</tt> using <tt>point_expression1</tt> and <tt>point_expression2</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression1</tt> : A <tt>point</tt> that represents the lower-left point of the rectangle.</li>\n    \n<li><tt>point_expression2</tt> : A <tt>point</tt> that represents the upper-right point of the rectangle.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A spatial <tt>rectangle</tt> created using the points provided in <tt>point_expression1</tt> and <tt>point_expression2</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c :=  create-rectangle(create-point(30.0,70.0), create-point(50.0,90.0))\nreturn {&quot;rectangle&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;rectangle&quot;: rectangle(&quot;30.0,70.0 50.0,90.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>create-circle<a name=\"create-circle\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>create-circle(point_expression, radius)\n</pre></div></li>\n  \n<li>\n<p>Creates the primitive type <tt>circle</tt> using <tt>point_expression</tt> and <tt>radius</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression</tt> : A <tt>point</tt> that represents the center of the circle.</li>\n    \n<li><tt>radius</tt> : A <tt>double</tt> that represents the radius of the circle.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A spatial <tt>circle</tt> created using the center point and the radius provided in <tt>point_expression</tt> and <tt>radius</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c :=  create-circle(create-point(30.0,70.0), 5.0)\nreturn {&quot;circle&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;circle&quot;: circle(&quot;30.0,70.0 5.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>create-polygon<a name=\"create-polygon\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>create-polygon(list_expression)\n</pre></div></li>\n  \n<li>\n<p>Creates the primitive type <tt>polygon</tt> using the double values provided in the argument <tt>list_expression</tt>. Each two consecutive double values represent a point starting from the first double value in the list. Note that at least six double values should be specified, meaning a total of three points.</p></li>\n  \n<li>Arguments:</li>\n  \n<li><tt>list_expression</tt> : An OrderedList of doubles representing the points of the polygon.</li>\n  \n<li>Return Value:</li>\n  \n<li>A <tt>polygon</tt>, represents a spatial simple polygon created using the points provided in <tt>list_expression</tt>.</li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c :=  create-polygon([1.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0])\nreturn {&quot;polygon&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;polygon&quot;: polygon(&quot;1.0,1.0 2.0,2.0 3.0,3.0 4.0,4.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>point<a name=\"point\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>point(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for the <tt>point</tt> type by parsing a point string <tt>string_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a point value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>point</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c := point(&quot;55.05,-138.04&quot;)\nreturn {&quot;point&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;point&quot;: point(&quot;55.05,-138.04&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>line<a name=\"line\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>line(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>line</tt> type by parsing a line string <tt>string_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a line value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>line</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c := line(&quot;55.05,-138.04 13.54,-138.04&quot;)\nreturn {&quot;line&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;line&quot;: line(&quot;55.05,-138.04 13.54,-138.04&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>rectangle<a name=\"rectangle\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>rectangle(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>rectangle</tt> type by parsing a rectangle string <tt>string_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a rectangle value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>rectangle</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c := rectangle(&quot;20.05,-125.0 40.67,-100.87&quot;)\nreturn {&quot;rectangle&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;rectangle&quot;: rectangle(&quot;20.05,-125.0 40.67,-100.87&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>circle<a name=\"circle\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>circle(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>circle</tt> type by parsing a circle string <tt>string_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a circle value.</li>\n  </ul></li>\n  \n<li>Return Value:</li>\n  \n<li>A <tt>circle</tt> value represented by the given string.</li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c := circle(&quot;55.05,-138.04 10.0&quot;)\nreturn {&quot;circle&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;circle&quot;: circle(&quot;55.05,-138.04 10.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>polygon<a name=\"polygon\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>polygon(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>polygon</tt> type by parsing a polygon string <tt>string_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a polygon value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>polygon</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $c := polygon(&quot;55.05,-138.04 13.54,-138.04 13.54,-53.31 55.05,-53.31&quot;)\nreturn {&quot;polygon&quot;: $c}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;polygon&quot;: polygon(&quot;55.05,-138.04 13.54,-138.04 13.54,-53.31 55.05,-53.31&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>get-x/get-y<a name=\"get-xget-y\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>get-x(point_expression) or get-y(point_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns the x or y coordinates of a point <tt>point_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression</tt> : A <tt>point</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>double</tt> representing the x or y coordinates of the point <tt>point_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $point := create-point(2.3,5.0)\nreturn {&quot;x-coordinate&quot;: get-x($point), &quot;y-coordinate&quot;: get-y($point)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;x-coordinate&quot;: 2.3d, &quot;y-coordinate&quot;: 5.0d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>get-points<a name=\"get-points\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>get-points(spatial_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns an ordered list of the points forming the spatial object <tt>spatial_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>spatial_expression</tt> : A <tt>point</tt>, <tt>line</tt>, <tt>rectangle</tt>, <tt>circle</tt>, or <tt>polygon</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>OrderedList</tt> of the points forming the spatial object <tt>spatial_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $line := create-line(create-point(100.6,99.4), create-point(-72.0,-76.9))\nlet $rectangle := create-rectangle(create-point(9.2,49.0), create-point(77.8,111.1))\nlet $polygon := create-polygon([1.0,1.0,2.0,2.0,3.0,3.0,4.0,4.0])\nlet $line_list := get-points($line)\nlet $rectangle_list := get-points($rectangle)\nlet $polygon_list := get-points($polygon)\nreturn {&quot;line-first-point&quot;: $line_list[0], &quot;line-second-point&quot;: $line_list[1], &quot;rectangle-left-bottom-point&quot;: $rectangle_list[0], &quot;rectangle-top-upper-point&quot;: $rectangle_list[1], &quot;polygon-first-point&quot;: $polygon_list[0], &quot;polygon-second-point&quot;: $polygon_list[1], &quot;polygon-third-point&quot;: $polygon_list[2], &quot;polygon-forth-point&quot;: $polygon_list[3]}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;line-first-point&quot;: point(&quot;100.6,99.4&quot;), &quot;line-second-point&quot;: point(&quot;-72.0,-76.9&quot;), &quot;rectangle-left-bottom-point&quot;: point(&quot;9.2,49.0&quot;), &quot;rectangle-top-upper-point&quot;: point(&quot;77.8,111.1&quot;), &quot;polygon-first-point&quot;: point(&quot;1.0,1.0&quot;), &quot;polygon-second-point&quot;: point(&quot;2.0,2.0&quot;), &quot;polygon-third-point&quot;: point(&quot;3.0,3.0&quot;), &quot;polygon-forth-point&quot;: point(&quot;4.0,4.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>get-center/get-radius<a name=\"get-centerget-radius\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>get-center(circle_expression) or get-radius(circle_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns the center and the radius of a circle <tt>circle_expression</tt>, respectively.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>circle_expression</tt> : A <tt>circle</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>point</tt> or <tt>double</tt>, represent the center or radius of the circle <tt>circle_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $circle := create-circle(create-point(6.0,3.0), 1.0)\nreturn {&quot;circle-radius&quot;: get-radius($circle), &quot;circle-center&quot;: get-center($circle)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;circle-radius&quot;: 1.0d, &quot;circle-center&quot;: point(&quot;6.0,3.0&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>spatial-distance<a name=\"spatial-distance\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>spatial-distance(point_expression1, point_expression2)\n</pre></div></li>\n  \n<li>\n<p>Returns the Euclidean distance between <tt>point_expression1</tt> and <tt>point_expression2</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression1</tt> : A <tt>point</tt>.</li>\n    \n<li><tt>point_expression2</tt> : A <tt>point</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>double</tt> as the Euclidean distance between <tt>point_expression1</tt> and <tt>point_expression2</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $t in dataset('TweetMessages')\nlet $d :=  spatial-distance($t.sender-location, create-point(30.0,70.0))\nreturn {&quot;point&quot;: $t.sender-location, &quot;distance&quot;: $d}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;point&quot;: point(&quot;47.44,80.65&quot;), &quot;distance&quot;: 20.434678857275934d }\n{ &quot;point&quot;: point(&quot;29.15,76.53&quot;), &quot;distance&quot;: 6.585089217315132d }\n{ &quot;point&quot;: point(&quot;37.59,68.42&quot;), &quot;distance&quot;: 7.752709203884797d }\n{ &quot;point&quot;: point(&quot;24.82,94.63&quot;), &quot;distance&quot;: 25.168816023007512d }\n{ &quot;point&quot;: point(&quot;32.84,67.14&quot;), &quot;distance&quot;: 4.030533463451212d }\n{ &quot;point&quot;: point(&quot;29.72,75.8&quot;), &quot;distance&quot;: 5.806754687430835d }\n{ &quot;point&quot;: point(&quot;39.28,70.48&quot;), &quot;distance&quot;: 9.292405501268227d }\n{ &quot;point&quot;: point(&quot;40.09,92.69&quot;), &quot;distance&quot;: 24.832321679617472d }\n{ &quot;point&quot;: point(&quot;47.51,83.99&quot;), &quot;distance&quot;: 22.41250097601782d }\n{ &quot;point&quot;: point(&quot;36.21,72.6&quot;), &quot;distance&quot;: 6.73231758015024d }\n{ &quot;point&quot;: point(&quot;46.05,93.34&quot;), &quot;distance&quot;: 28.325926286707734d }\n{ &quot;point&quot;: point(&quot;36.86,74.62&quot;), &quot;distance&quot;: 8.270671073135482d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>spatial-area<a name=\"spatial-area\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>spatial-area(spatial_2d_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns the spatial area of <tt>spatial_2d_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>spatial_2d_expression</tt> : A <tt>rectangle</tt>, <tt>circle</tt>, or <tt>polygon</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>double</tt> representing the area of <tt>spatial_2d_expression</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $circleArea := spatial-area(create-circle(create-point(0.0,0.0), 5.0))\nreturn {&quot;Area&quot;:$circleArea}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;Area&quot;: 78.53981625d }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>spatial-intersect<a name=\"spatial-intersect\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>spatial-intersect(spatial_expression1, spatial_expression2)\n</pre></div></li>\n  \n<li>\n<p>Checks whether <tt>@arg1</tt> and <tt>@arg2</tt> spatially intersect each other.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>spatial_expression1</tt> : A <tt>point</tt>, <tt>line</tt>, <tt>rectangle</tt>, <tt>circle</tt>, or <tt>polygon</tt>.</li>\n    \n<li><tt>spatial_expression2</tt> : A <tt>point</tt>, <tt>line</tt>, <tt>rectangle</tt>, <tt>circle</tt>, or <tt>polygon</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt> representing whether <tt>spatial_expression1</tt> and <tt>spatial_expression2</tt> spatially overlap with each other.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $t in dataset('TweetMessages')\nwhere spatial-intersect($t.sender-location, create-rectangle(create-point(30.0,70.0), create-point(40.0,80.0)))\nreturn $t\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;tweetid&quot;: &quot;4&quot;, &quot;user&quot;: { &quot;screen-name&quot;: &quot;NathanGiesen@211&quot;, &quot;lang&quot;: &quot;en&quot;, &quot;friends_count&quot;: 39339, &quot;statuses_count&quot;: 473, &quot;name&quot;: &quot;Nathan Giesen&quot;, &quot;followers_count&quot;: 49416 }, &quot;sender-location&quot;: point(&quot;39.28,70.48&quot;), &quot;send-time&quot;: datetime(&quot;2011-12-26T10:10:00.000Z&quot;), &quot;referred-topics&quot;: {{ &quot;sprint&quot;, &quot;voice-command&quot; }}, &quot;message-text&quot;: &quot; like sprint the voice-command is mind-blowing:)&quot; }\n{ &quot;tweetid&quot;: &quot;7&quot;, &quot;user&quot;: { &quot;screen-name&quot;: &quot;ChangEwing_573&quot;, &quot;lang&quot;: &quot;en&quot;, &quot;friends_count&quot;: 182, &quot;statuses_count&quot;: 394, &quot;name&quot;: &quot;Chang Ewing&quot;, &quot;followers_count&quot;: 32136 }, &quot;sender-location&quot;: point(&quot;36.21,72.6&quot;), &quot;send-time&quot;: datetime(&quot;2011-08-25T10:10:00.000Z&quot;), &quot;referred-topics&quot;: {{ &quot;samsung&quot;, &quot;platform&quot; }}, &quot;message-text&quot;: &quot; like samsung the platform is good&quot; }\n{ &quot;tweetid&quot;: &quot;9&quot;, &quot;user&quot;: { &quot;screen-name&quot;: &quot;NathanGiesen@211&quot;, &quot;lang&quot;: &quot;en&quot;, &quot;friends_count&quot;: 39339, &quot;statuses_count&quot;: 473, &quot;name&quot;: &quot;Nathan Giesen&quot;, &quot;followers_count&quot;: 49416 }, &quot;sender-location&quot;: point(&quot;36.86,74.62&quot;), &quot;send-time&quot;: datetime(&quot;2012-07-21T10:10:00.000Z&quot;), &quot;referred-topics&quot;: {{ &quot;verizon&quot;, &quot;voicemail-service&quot; }}, &quot;message-text&quot;: &quot; love verizon its voicemail-service is awesome&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>spatial-cell<a name=\"spatial-cell\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>spatial-cell(point_expression1, point_expression2, x_increment, y_increment)\n</pre></div></li>\n  \n<li>\n<p>Returns the grid cell that <tt>point_expression1</tt> belongs to.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>point_expression1</tt> : A <tt>point</tt> representing the point of interest that its grid cell will be returned.</li>\n    \n<li><tt>point_expression2</tt> : A <tt>point</tt> representing the origin of the grid.</li>\n    \n<li><tt>x_increment</tt> : A <tt>double</tt>, represents X increments.</li>\n    \n<li><tt>y_increment</tt> : A <tt>double</tt>, represents Y increments.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>rectangle</tt> representing the grid cell that <tt>point_expression1</tt> belongs to.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $t in dataset('TweetMessages')\ngroup by $c :=  spatial-cell($t.sender-location, create-point(20.0,50.0), 5.5, 6.0) with $t\nlet $num :=  count($t)\nreturn { &quot;cell&quot;: $c, &quot;count&quot;: $num}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;cell&quot;: rectangle(&quot;20.0,92.0 25.5,98.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;25.5,74.0 31.0,80.0&quot;), &quot;count&quot;: 2i64 }\n{ &quot;cell&quot;: rectangle(&quot;31.0,62.0 36.5,68.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;31.0,68.0 36.5,74.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;36.5,68.0 42.0,74.0&quot;), &quot;count&quot;: 2i64 }\n{ &quot;cell&quot;: rectangle(&quot;36.5,74.0 42.0,80.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;36.5,92.0 42.0,98.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;42.0,80.0 47.5,86.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;42.0,92.0 47.5,98.0&quot;), &quot;count&quot;: 1i64 }\n{ &quot;cell&quot;: rectangle(&quot;47.5,80.0 53.0,86.0&quot;), &quot;count&quot;: 1i64 }\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"SimilarityFunctions\" id=\"SimilarityFunctions\">Similarity Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Similarity_Functions_Back_to_TOC\"></a></h2>\n<p>AsterixDB supports queries with different similarity functions, including edit distance and Jaccard.</p>\n<div class=\"section\">\n<h3>edit-distance<a name=\"edit-distance\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>edit-distance(expression1, expression2)\n</pre></div></li>\n  \n<li>\n<p>Returns the <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">edit distance</a> of <tt>expression1</tt> and <tt>expression2</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>expression1</tt> : A <tt>string</tt> or a homogeneous <tt>OrderedList</tt> of a comparable item type.</li>\n    \n<li><tt>expression2</tt> : The same type as <tt>expression1</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>int32</tt> that represents the edit distance between <tt>expression1</tt> and <tt>expression2</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $user in dataset('FacebookUsers')\nlet $ed := edit-distance($user.name, &quot;Suzanna Tilson&quot;)\nwhere $ed &lt;= 2\nreturn $user\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;id&quot;: 7, &quot;alias&quot;: &quot;Suzanna&quot;, &quot;name&quot;: &quot;SuzannaTillson&quot;, &quot;user-since&quot;: datetime(&quot;2012-08-07T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 6 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;Labzatron&quot;, &quot;start-date&quot;: date(&quot;2011-04-19&quot;), &quot;end-date&quot;: null } ]\n}\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>edit-distance-check<a name=\"edit-distance-check\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>edit-distance-check(expression1, expression2, threshold)\n</pre></div></li>\n  \n<li>\n<p>Checks whether <tt>expression1</tt> and <tt>expression2</tt> have an <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">edit distance</a> within a given threshold. The &#x201c;check&#x201d; version of edit distance is faster than the &#x201c;non-check&#x201d; version because the former can detect whether two items satisfy a given threshold using early-termination techniques, as opposed to computing their real distance. Although possible, it is not necessary for the user to write queries using the &#x201c;check&#x201d; versions explicitly, since a rewrite rule can perform an appropriate transformation from a &#x201c;non-check&#x201d; version to a &#x201c;check&#x201d; version.</p></li>\n  \n<li>\n<p>Arguments:</p>\n  \n<ul>\n    \n<li><tt>expression1</tt> : A <tt>string</tt> or a homogeneous <tt>OrderedList</tt> of a comparable item type.</li>\n    \n<li><tt>expression2</tt> : The same type as <tt>expression1</tt>.</li>\n    \n<li><tt>threshold</tt> : An <tt>int32</tt> that represents the distance threshold.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>OrderedList</tt> with two items:\n    \n<ul>\n      \n<li>The first item contains a <tt>boolean</tt> value representing whether <tt>expression1</tt> and <tt>expression2</tt> are similar.</li>\n      \n<li>The second item contains an <tt>int32</tt> that represents the edit distance of <tt>expression1</tt> and <tt>expression2</tt> if it is within the threshold, or 0 otherwise.</li>\n    </ul></li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $user in dataset('FacebookUsers')\nlet $ed := edit-distance-check($user.name, &quot;Suzanna Tilson&quot;, 2)\nwhere $ed[0]\nreturn $ed[1]\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>2\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>similarity-jaccard<a name=\"similarity-jaccard\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>similarity-jaccard(list_expression1, list_expression2)\n</pre></div></li>\n  \n<li>\n<p>Returns the <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Jaccard_index\">Jaccard similarity</a> of <tt>list_expression1</tt> and <tt>list_expression2</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>list_expression1</tt> : An <tt>UnorderedList</tt> or <tt>OrderedList</tt>.</li>\n    \n<li><tt>list_expression2</tt> : An <tt>UnorderedList</tt> or <tt>OrderedList</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>float</tt> that represents the Jaccard similarity of <tt>list_expression1</tt> and <tt>list_expression2</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $user in dataset('FacebookUsers')\nlet $sim := similarity-jaccard($user.friend-ids, [1,5,9])\nwhere $sim &gt;= 0.6f\nreturn $user\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;id&quot;: 3, &quot;alias&quot;: &quot;Emory&quot;, &quot;name&quot;: &quot;EmoryUnk&quot;, &quot;user-since&quot;: datetime(&quot;2012-07-10T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 1, 5, 8, 9 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;geomedia&quot;, &quot;start-date&quot;: date(&quot;2010-06-17&quot;), &quot;end-date&quot;: date(&quot;2010-01-26&quot;) } ]\n}\n{\n&quot;id&quot;: 10, &quot;alias&quot;: &quot;Bram&quot;, &quot;name&quot;: &quot;BramHatch&quot;, &quot;user-since&quot;: datetime(&quot;2010-10-16T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 1, 5, 9 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;physcane&quot;, &quot;start-date&quot;: date(&quot;2007-06-05&quot;), &quot;end-date&quot;: date(&quot;2011-11-05&quot;) } ]\n}\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>similarity-jaccard-check<a name=\"similarity-jaccard-check\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>similarity-jaccard-check(list_expression1, list_expression2, threshold)\n</pre></div></li>\n  \n<li>\n<p>Checks whether <tt>list_expression1</tt> and <tt>list_expression2</tt> have a <a class=\"externalLink\" href=\"http://en.wikipedia.org/wiki/Jaccard_index\">Jaccard similarity</a> greater than or equal to threshold. Again, the &#x201c;check&#x201d; version of Jaccard is faster than the &#x201c;non-check&#x201d; version.</p></li>\n  \n<li>\n<p>Arguments:</p>\n  \n<ul>\n    \n<li><tt>list_expression1</tt> : An <tt>UnorderedList</tt> or <tt>OrderedList</tt>.</li>\n    \n<li><tt>list_expression2</tt> : An <tt>UnorderedList</tt> or <tt>OrderedList</tt>.</li>\n    \n<li><tt>threshold</tt> : A <tt>float</tt> that represents the similarity threshold.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>OrderedList</tt> with two items:</li>\n    \n<li>The first item contains a <tt>boolean</tt> value representing whether <tt>list_expression1</tt> and <tt>list_expression2</tt> are similar.</li>\n    \n<li>The second item contains a <tt>float</tt> that represents the Jaccard similarity of <tt>list_expression1</tt> and <tt>list_expression2</tt> if it is greater than or equal to the threshold, or 0 otherwise.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $user in dataset('FacebookUsers')\nlet $sim := similarity-jaccard-check($user.friend-ids, [1,5,9], 0.6f)\nwhere $sim[0]\nreturn $sim[1]\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>0.75f\n1.0f\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>Similarity Operator ~#<a name=\"Similarity_Operator_\"></a></h3>\n\n<ul>\n  \n<li>&#x201c;<tt>~=</tt>&#x201d; is syntactic sugar for expressing a similarity condition with a given similarity threshold.</li>\n  \n<li>The similarity function and threshold for &#x201c;<tt>~=</tt>&#x201d; are controlled via &#x201c;set&#x201d; directives.</li>\n  \n<li>The &#x201c;<tt>~=</tt>&#x201d; operator returns a <tt>boolean</tt> value that represents whether the operands are similar.</li>\n  \n<li>\n<p>Example for Jaccard similarity:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nset simfunction &quot;jaccard&quot;;\nset simthreshold &quot;0.6f&quot;;\n\nfor $user in dataset('FacebookUsers')\nwhere $user.friend-ids ~= [1,5,9]\nreturn $user\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;id&quot;: 3, &quot;alias&quot;: &quot;Emory&quot;, &quot;name&quot;: &quot;EmoryUnk&quot;, &quot;user-since&quot;: datetime(&quot;2012-07-10T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 1, 5, 8, 9 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;geomedia&quot;, &quot;start-date&quot;: date(&quot;2010-06-17&quot;), &quot;end-date&quot;: date(&quot;2010-01-26&quot;) } ]\n}\n{\n&quot;id&quot;: 10, &quot;alias&quot;: &quot;Bram&quot;, &quot;name&quot;: &quot;BramHatch&quot;, &quot;user-since&quot;: datetime(&quot;2010-10-16T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 1, 5, 9 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;physcane&quot;, &quot;start-date&quot;: date(&quot;2007-06-05&quot;), &quot;end-date&quot;: date(&quot;2011-11-05&quot;) } ]\n}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>Example for edit-distance similarity:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nset simfunction &quot;edit-distance&quot;;\nset simthreshold &quot;2&quot;;\n\nfor $user in dataset('FacebookUsers')\nwhere $user.name ~= &quot;Suzanna Tilson&quot;\nreturn $user\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected output is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;id&quot;: 7, &quot;alias&quot;: &quot;Suzanna&quot;, &quot;name&quot;: &quot;SuzannaTillson&quot;, &quot;user-since&quot;: datetime(&quot;2012-08-07T10:10:00.000Z&quot;), &quot;friend-ids&quot;: {{ 6 }},\n&quot;employment&quot;: [ { &quot;organization-name&quot;: &quot;Labzatron&quot;, &quot;start-date&quot;: date(&quot;2011-04-19&quot;), &quot;end-date&quot;: null } ]\n}\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"TokenizingFunctions\" id=\"TokenizingFunctions\">Tokenizing Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Tokenizing_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>word-tokens<a name=\"word-tokens\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>word-tokens(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Returns a list of word tokens of <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> that will be tokenized.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>OrderedList</tt> of <tt>string</tt> word tokens.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $t in dataset('TweetMessages')\nlet $tokens := word-tokens($t.message-text)\nwhere $t.send-time &gt;= datetime('2012-01-01T00:00:00')\nreturn {\n&quot;tweetid&quot;: $t.tweetid,\n&quot;word-tokens&quot;: $tokens\n}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;tweetid&quot;: &quot;9&quot;, &quot;word-tokens&quot;: [ &quot;love&quot;, &quot;verizon&quot;, &quot;its&quot;, &quot;voicemail&quot;, &quot;service&quot;, &quot;is&quot;, &quot;awesome&quot; ] }\n</pre></div></li>\n</ul>\n<!-- ### hashed-word-tokens ###\n * Syntax:\n\n        hashed-word-tokens(string_expression)\n\n * Returns a list of hashed word tokens of `string_expression`.\n * Arguments:\n    * `string_expression` : A `string` that will be tokenized.\n * Return Value:\n   * An `OrderedList` of `int32` hashed tokens.\n\n * Example:\n\n        use dataverse TinySocial;\n\n        for $t in dataset('TweetMessages')\n        let $tokens := hashed-word-tokens($t.message-text)\n        where $t.send-time >= datetime('2012-01-01T00:00:00')\n        return {\n        \"tweetid\": $t.tweetid,\n        \"hashed-word-tokens\": $tokens\n        }\n\n\n * The expected result is:\n\n        { \"tweetid\": \"9\", \"hashed-word-tokens\": [ -1217719622, -447857469, -1884722688, -325178649, 210976949, 285049676, 1916743959 ] }\n\n\n### counthashed-word-tokens ###\n * Syntax:\n\n        counthashed-word-tokens(string_expression)\n\n * Returns a list of hashed word tokens of `string_expression`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n * Arguments:\n    * `string_expression` : A `String` that will be tokenized.\n * Return Value:\n    * An `OrderedList` of `Int32` hashed tokens.\n * Example:\n\n        use dataverse TinySocial;\n\n        for $t in dataset('TweetMessages')\n        let $tokens := counthashed-word-tokens($t.message-text)\n        where $t.send-time >= datetime('2012-01-01T00:00:00')\n        return {\n        \"tweetid\": $t.tweetid,\n        \"counthashed-word-tokens\": $tokens\n        }\n\n\n * The expected result is:\n\n        { \"tweetid\": \"9\", \"counthashed-word-tokens\": [ -1217719622, -447857469, -1884722688, -325178649, 210976949, 285049676, 1916743959 ] }\n\n\n### gram-tokens ###\n * Syntax:\n\n        gram-tokens(string_expression, gram_length, boolean_expression)\n\n * Returns a list of gram tokens of `string_expression`, which can be obtained by scanning the characters using a sliding window of a fixed length.\n * Arguments:\n    * `string_expression` : A `String` that will be tokenized.\n    * `gram_length` : An `Int32` as the length of grams.\n   * `boolean_expression` : A `Boolean` value to indicate whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n * Return Value:\n    * An `OrderedList` of String gram tokens.\n\n * Example:\n\n        use dataverse TinySocial;\n\n        for $t in dataset('TweetMessages')\n        let $tokens := gram-tokens($t.message-text, 3, true)\n        where $t.send-time >= datetime('2012-01-01T00:00:00')\n        return {\n        \"tweetid\": $t.tweetid,\n        \"gram-tokens\": $tokens\n        }\n\n\n * The expected result is:\n\n        {\n        \"tweetid\": \"9\",\n        \"gram-tokens\": [ \"## \", \"# l\", \" lo\", \"lov\", \"ove\", \"ve \", \"e v\", \" ve\", \"ver\", \"eri\", \"riz\", \"izo\", \"zon\", \"on \", \"n i\", \" it\", \"its\", \"ts \", \"s v\", \" vo\", \"voi\", \"oic\", \"ice\",\n        \"cem\", \"ema\", \"mai\", \"ail\", \"il-\", \"l-s\", \"-se\", \"ser\", \"erv\", \"rvi\", \"vic\", \"ice\", \"ce \", \"e i\", \" is\", \"is \", \"s a\", \" aw\", \"awe\", \"wes\", \"eso\", \"som\", \"ome\", \"me$\", \"e$$\" ]\n        }\n\n\n### hashed-gram-tokens ###\n * Syntax:\n\n        hashed-gram-tokens(string_expression, gram_length, boolean_expression)\n\n * Returns a list of hashed gram tokens of `string_expression`.\n * Arguments:\n    * `string_expression` : A `String` that will be tokenized.\n    * `gram_length` : An `Int32` as the length of grams.\n    * `boolean_expression` : A `Boolean` to indicate whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n * Return Value:\n    * An `OrderedList` of `Int32` hashed gram tokens.\n\n * Example:\n\n        use dataverse TinySocial;\n\n        for $t in dataset('TweetMessages')\n        let $tokens := hashed-gram-tokens($t.message-text, 3, true)\n        where $t.send-time >= datetime('2012-01-01T00:00:00')\n        return {\n        \"tweetid\": $t.tweetid,\n        \"hashed-gram-tokens\": $tokens\n        }\n\n\n * The expected result is:\n\n        {\n        \"tweetid\": \"9\",\n        \"hashed-gram-tokens\": [ 40557178, -2002241593, 161665899, -856104603, -500544946, 693410611, 395674299, -1015235909, 1115608337, 1187999872, -31006095, -219180466, -1676061637,\n        1040194153, -1339307841, -1527110163, -1884722688, -179148713, -431014627, -1789789823, -1209719926, 684519765, -486734513, 1734740619, -1971673751, -932421915, -2064668066,\n        -937135958, -790946468, -69070309, 1561601454, 26169001, -160734571, 1330043462, -486734513, -18796768, -470303314, 113421364, 1615760212, 1688217556, 1223719184, 536568131,\n        1682609873, 2935161, -414769471, -1027490137, 1602276102, 1050490461 ]\n        }\n\n\n### counthashed-gram-tokens ###\n * Syntax:\n\n        counthashed-gram-tokens(string_expression, gram_length, boolean_expression)\n\n * Returns a list of hashed gram tokens of `string_expression`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n * Arguments:\n    * `string_expression` : A `String` that will be tokenized.\n    * `gram_length` : An `Int32`, length of grams to generate.\n    * `boolean_expression` : A `Boolean`, whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n * Return Value:\n    * An `OrderedList` of `Int32` hashed gram tokens.\n\n * Example:\n\n        use dataverse TinySocial;\n\n        for $t in dataset('TweetMessages')\n        let $tokens := counthashed-gram-tokens($t.message-text, 3, true)\n        where $t.send-time >= datetime('2012-01-01T00:00:00')\n        return {\n        \"tweetid\": $t.tweetid,\n        \"counthashed-gram-tokens\": $tokens\n        }\n\n\n * The expected result is:\n\n        {\n        \"tweetid\": \"9\",\n        \"counthashed-gram-tokens\": [ 40557178, -2002241593, 161665899, -856104603, -500544946, 693410611, 395674299, -1015235909, 1115608337, 1187999872, -31006095, -219180466, -1676061637,\n        1040194153, -1339307841, -1527110163, -1884722688, -179148713, -431014627, -1789789823, -1209719926, 684519765, -486734513, 1734740619, -1971673751, -932421915, -2064668066, -937135958,\n        -790946468, -69070309, 1561601454, 26169001, -160734571, 1330043462, -486734512, -18796768, -470303314, 113421364, 1615760212, 1688217556, 1223719184, 536568131, 1682609873, 2935161,\n        -414769471, -1027490137, 1602276102, 1050490461 ]\n        } --></div></div>\n<div class=\"section\">\n<h2><a name=\"TemporalFunctions\" id=\"TemporalFunctions\">Temporal Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Temporal_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>date<a name=\"date\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>date(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>date</tt> type by parsing a date string <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a date value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>date</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;date-extended&quot;: date(&quot;2013-04-01&quot;),\n&quot;date-basic&quot;: date(&quot;20130401&quot;)\n}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;date-extended&quot;: date(&quot;2013-04-01&quot;),\n&quot;date-basic&quot;: date(&quot;2013-04-01&quot;)\n}\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>time<a name=\"time\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>time(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>time</tt> type by parsing a time string <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a time value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>time</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;time-extended&quot;: time(&quot;12:30:45.678+08:00&quot;),\n&quot;time-basic&quot;: time(&quot;123045678+0800&quot;)\n}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;time-extended&quot;: time(&quot;04:30:45.678Z&quot;),\n&quot;time-basic&quot;: time(&quot;04:30:45.678Z&quot;)\n}\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>datetime<a name=\"datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>datetime(string_expression)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for the <tt>datetime</tt> type by parsing a datetime string <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression</tt> : The <tt>string</tt> value representing a datetime value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>datetime</tt> value represented by the given string.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;datetime-extended&quot;: datetime(&quot;2013-04-01T12:30:45.678+08:00&quot;),\n&quot;datetime-basic&quot;: datetime(&quot;20130401T123045678+0800&quot;)\n}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{\n&quot;datetime-extended&quot;: datetime(&quot;2013-04-01T04:30:45.678Z&quot;),\n&quot;datetime-basic&quot;: datetime(&quot;2013-04-01T04:30:45.678Z&quot;)\n}\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>interval-from-date<a name=\"interval-from-date\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>interval-from-date(string_expression1, string_expression2)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for the <tt>interval</tt> type by parsing two date strings.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression1</tt> : The <tt>string</tt> value representing the starting date.</li>\n    \n<li><tt>string_expression2</tt> : The <tt>string</tt> value representing the ending date.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>interval</tt> value between the two dates.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{&quot;date-interval&quot;: interval-from-date(&quot;2012-01-01&quot;, &quot;2013-04-01&quot;)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;date-interval&quot;: interval-date(&quot;2012-01-01, 2013-04-01&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>interval-from-time<a name=\"interval-from-time\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>interval-from-time(string_expression1, string_expression2)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for the <tt>interval</tt> type by parsing two time strings.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression1</tt> : The <tt>string</tt> value representing the starting time.</li>\n    \n<li><tt>string_expression2</tt> : The <tt>string</tt> value representing the ending time.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>interval</tt> value between the two times.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{&quot;time-interval&quot;: interval-from-time(&quot;12:23:34.456Z&quot;, &quot;233445567+0800&quot;)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;time-interval&quot;: interval-time(&quot;12:23:34.456Z, 15:34:45.567Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>interval-from-datetime<a name=\"interval-from-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>interval-from-datetime(string_expression1, string_expression2)\n</pre></div></li>\n  \n<li>\n<p>Constructor function for <tt>interval</tt> type by parsing two datetime strings.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>string_expression1</tt> : The <tt>string</tt> value representing the starting datetime.</li>\n    \n<li><tt>string_expression2</tt> : The <tt>string</tt> value representing the ending datetime.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>interval</tt> value between the two datetimes.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>{&quot;datetime-interval&quot;: interval-from-datetime(&quot;2012-01-01T12:23:34.456+08:00&quot;, &quot;20130401T153445567Z&quot;)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;datetime-interval&quot;: interval-datetime(&quot;2012-01-01T04:23:34.456Z, 2013-04-01T15:34:45.567Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>year/month/day/hour/minute/second/millisecond<a name=\"yearmonthdayhourminutesecondmillisecond\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>year/month/day/hour/minute/second/millisecond(temporal_expression)\n</pre></div></li>\n  \n<li>\n<p>Accessors for accessing fields in a temporal value</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>temporal_expression</tt> : a temporal value represented as one of the following types: <tt>date</tt>, <tt>datetime</tt>, <tt>time</tt>, and <tt>duration</tt>.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>int32</tt> value representing the field to be extracted.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $c1 := date(&quot;2010-10-30&quot;)\nlet $c2 := datetime(&quot;1987-11-19T23:49:23.938&quot;)\nlet $c3 := time(&quot;12:23:34.930+07:00&quot;)\nlet $c4 := duration(&quot;P3Y73M632DT49H743M3948.94S&quot;)\n\nreturn {&quot;year&quot;: year($c1), &quot;month&quot;: month($c2), &quot;day&quot;: day($c1), &quot;hour&quot;: hour($c3), &quot;min&quot;: minute($c4), &quot;second&quot;: second($c2), &quot;ms&quot;: millisecond($c4)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;year&quot;: 2010, &quot;month&quot;: 11, &quot;day&quot;: 30, &quot;hour&quot;: 5, &quot;min&quot;: 28, &quot;second&quot;: 23, &quot;ms&quot;: 94 }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>adjust-datetime-for-timezone<a name=\"adjust-datetime-for-timezone\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>adjust-datetime-for-timezone(datetime_expression, string_expression)\n</pre></div></li>\n  \n<li>\n<p>Adjusts the given datetime <tt>datetime_expression</tt> by applying the timezone information <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>datetime_expression</tt> : A <tt>datetime</tt> value to be adjusted.</li>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> representing the timezone information.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> value representing the new datetime after being adjusted by the timezone information.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('TweetMessages')\nreturn {&quot;adjusted-send-time&quot;: adjust-datetime-for-timezone($i.send-time, &quot;+08:00&quot;), &quot;message&quot;: $i.message-text}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;adjusted-send-time&quot;: &quot;2008-04-26T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; love t-mobile its customization is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2010-05-13T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like verizon its shortcut-menu is awesome:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2006-11-04T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like motorola the speed is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2011-12-26T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like sprint the voice-command is mind-blowing:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2006-08-04T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; can't stand motorola its speed is terrible:(&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2010-05-07T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like iphone the voice-clarity is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2011-08-25T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like samsung the platform is good&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2005-10-14T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like t-mobile the shortcut-menu is awesome:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2012-07-21T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; love verizon its voicemail-service is awesome&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2008-01-26T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; hate verizon its voice-clarity is OMG:(&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2008-03-09T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; can't stand iphone its platform is terrible&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;2010-02-13T18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like samsung the voice-command is amazing:)&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>adjust-time-for-timezone<a name=\"adjust-time-for-timezone\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>adjust-time-for-timezone(time_expression, string_expression)\n</pre></div></li>\n  \n<li>\n<p>Adjusts the given time <tt>time_expression</tt> by applying the timezone information <tt>string_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>time_expression</tt> : A <tt>time</tt> value to be adjusted.</li>\n    \n<li><tt>string_expression</tt> : A <tt>string</tt> representing the timezone information.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>string</tt> value representing the new time after being adjusted by the timezone information.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('TweetMessages')\nreturn {&quot;adjusted-send-time&quot;: adjust-time-for-timezone(time-from-datetime($i.send-time), &quot;+08:00&quot;), &quot;message&quot;: $i.message-text}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; love t-mobile its customization is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like verizon its shortcut-menu is awesome:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like motorola the speed is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like sprint the voice-command is mind-blowing:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; can't stand motorola its speed is terrible:(&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like iphone the voice-clarity is good:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like samsung the platform is good&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like t-mobile the shortcut-menu is awesome:)&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; love verizon its voicemail-service is awesome&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; hate verizon its voice-clarity is OMG:(&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; can't stand iphone its platform is terrible&quot; }\n{ &quot;adjusted-send-time&quot;: &quot;18:10:00.000+08:00&quot;, &quot;message&quot;: &quot; like samsung the voice-command is amazing:)&quot; }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>calendar-duration-from-datetime<a name=\"calendar-duration-from-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>calendar-duration-from-datetime(datetime_expression, duration_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets a user-friendly representation of the duration <tt>duration_expression</tt> based on the given datetime <tt>datetime_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>datetime_expression</tt> : A <tt>datetime</tt> value to be used as the reference time point.</li>\n    \n<li><tt>duration_expression</tt> : A <tt>duration</tt> value to be converted.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>duration</tt> value with the duration as <tt>duration_expression</tt> but with a user-friendly representation.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('TweetMessages')\nwhere $i.send-time &gt; datetime(&quot;2011-01-01T00:00:00&quot;)\nreturn {&quot;since-2011&quot;: subtract-datetime($i.send-time, datetime(&quot;2011-01-01T00:00:00&quot;)), &quot;since-2011-user-friendly&quot;: calendar-duration-from-datetime($i.send-time, subtract-datetime($i.send-time, datetime(&quot;2011-01-01T00:00:00&quot;)))}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;since-2011&quot;: duration(&quot;P359DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P11M23DT10H10M&quot;) }\n{ &quot;since-2011&quot;: duration(&quot;P236DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P7M23DT10H10M&quot;) }\n{ &quot;since-2011&quot;: duration(&quot;P567DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P1Y6M18DT10H10M&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>calendar-duration-from-date<a name=\"calendar-duration-from-date\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>calendar-duration-from-date(date_expression, duration_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets a user-friendly representation of the duration <tt>duration_expression</tt> based on the given date <tt>date_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>date_expression</tt> : A <tt>date</tt> value to be used as the reference time point.</li>\n    \n<li><tt>duration_expression</tt> : A <tt>duration</tt> value to be converted.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>duration</tt> value with the duration as <tt>duration_expression</tt> but with a user-friendly representation.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('TweetMessages')\nwhere $i.send-time &gt; datetime(&quot;2011-01-01T00:00:00&quot;)\nreturn {&quot;since-2011&quot;: subtract-datetime($i.send-time, datetime(&quot;2011-01-01T00:00:00&quot;)),\n&quot;since-2011-user-friendly&quot;: calendar-duration-from-date(date-from-datetime($i.send-time), subtract-datetime($i.send-time, datetime(&quot;2011-01-01T00:00:00&quot;)))}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;since-2011&quot;: duration(&quot;P359DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P11M23DT10H10M&quot;) }\n{ &quot;since-2011&quot;: duration(&quot;P236DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P7M23DT10H10M&quot;) }\n{ &quot;since-2011&quot;: duration(&quot;P567DT10H10M&quot;), &quot;since-2011-user-friendly&quot;: duration(&quot;P1Y6M18DT10H10M&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>current-date<a name=\"current-date\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>current-date()\n</pre></div></li>\n  \n<li>\n<p>Gets the current date.</p></li>\n  \n<li>Arguments: None</li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>date</tt> value of the date when the function is called.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>current-time<a name=\"current-time\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>current-time()\n</pre></div></li>\n  \n<li>\n<p>Get the current time</p></li>\n  \n<li>Arguments: None</li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>time</tt> value of the time when the function is called.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>current-datetime<a name=\"current-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>current-datetime()\n</pre></div></li>\n  \n<li>\n<p>Get the current datetime</p></li>\n  \n<li>Arguments: None</li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>datetime</tt> value of the datetime when the function is called.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\n{&quot;current-date&quot;: current-date(),\n&quot;current-time&quot;: current-time(),\n&quot;current-datetime&quot;: current-datetime()}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;current-date&quot;: date(&quot;2013-04-06&quot;),\n&quot;current-time&quot;: time(&quot;00:48:44.093Z&quot;),\n&quot;current-datetime&quot;: datetime(&quot;2013-04-06T00:48:44.093Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>date-from-datetime<a name=\"date-from-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>date-from-datetime(datetime_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets the date value from the given datetime value <tt>datetime_expression</tt>.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>datetime_expression</tt>: A <tt>datetime</tt> value to be extracted from.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>date</tt> value from the datetime.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>time-from-datetime<a name=\"time-from-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>time-from-datetime(datetime_expression)\n</pre></div></li>\n  \n<li>\n<p>Get the time value from the given datetime value <tt>datetime_expression</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>datetime_expression</tt>: A <tt>datetime</tt> value to be extracted from</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>time</tt> value from the datetime.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('TweetMessages')\nwhere $i.send-time &gt; datetime(&quot;2011-01-01T00:00:00&quot;)\nreturn {&quot;send-date&quot;: date-from-datetime($i.send-time), &quot;send-time&quot;: time-from-datetime($i.send-time)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;send-date&quot;: date(&quot;2011-12-26&quot;), &quot;send-time&quot;: time(&quot;10:10:00.000Z&quot;) }\n{ &quot;send-date&quot;: date(&quot;2011-08-25&quot;), &quot;send-time&quot;: time(&quot;10:10:00.000Z&quot;) }\n{ &quot;send-date&quot;: date(&quot;2012-07-21&quot;), &quot;send-time&quot;: time(&quot;10:10:00.000Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>date-from-unix-time-in-days<a name=\"date-from-unix-time-in-days\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>date-from-unix-time-in-days(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets a date representing the time after <tt>numeric_expression</tt> days since 1970-01-01.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt> value representing the number of days.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>date</tt> value as the time after <tt>numeric_expression</tt> days since 1970-01-01.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>datetime-from-unix-time-in-ms<a name=\"datetime-from-unix-time-in-ms\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>datetime-from-unix-time-in-ms(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets a datetime representing the time after <tt>numeric_expression</tt> milliseconds since 1970-01-01T00:00:00Z.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt>/<tt>int64</tt> value representing the number of milliseconds.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>datetime</tt> value as the time after <tt>numeric_expression</tt> milliseconds since 1970-01-01T00:00:00Z.</li>\n  </ul></li>\n</ul></div>\n<div class=\"section\">\n<h3>time-from-unix-time-in-ms<a name=\"time-from-unix-time-in-ms\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>time-from-unix-time-in-ms(numeric_expression)\n</pre></div></li>\n  \n<li>\n<p>Gets a time representing the time after <tt>numeric_expression</tt> milliseconds since 00:00:00.000Z.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>numeric_expression</tt>: A <tt>int8</tt>/<tt>int16</tt>/<tt>int32</tt> value representing the number of milliseconds.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>time</tt> value as the time after <tt>numeric_expression</tt> milliseconds since 00:00:00.000Z.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nlet $d := date-from-unix-time-in-days(15800)\nlet $dt := datetime-from-unix-time-in-ms(1365139700000)\nlet $t := time-from-unix-time-in-ms(3748)\nreturn {&quot;date&quot;: $d, &quot;datetime&quot;: $dt, &quot;time&quot;: $t}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;date&quot;: date(&quot;2013-04-05&quot;), &quot;datetime&quot;: datetime(&quot;2013-04-05T05:28:20.000Z&quot;), &quot;time&quot;: time(&quot;00:00:03.748Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>subtract-date<a name=\"subtract-date\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>subtract-date(date_start, date_end)\n</pre></div></li>\n  \n<li>\n<p>Get the duration between two dates <tt>date_start</tt> and <tt>date_end</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>date_start</tt>: the starting <tt>date</tt></li>\n    \n<li><tt>date_end</tt>: the ending <tt>date</tt></li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>duration</tt> value between <tt>date_start</tt> and <tt>date_end</tt></li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookUser')\nfor $j in dataset('FacebookUser')\nwhere $i.user-since &lt; $j.user-since and $i.user-since &gt; datetime(&quot;2012-01-01T00:00:00&quot;)\nreturn {&quot;id1&quot;: $i.id, &quot;id2&quot;: $j.id, &quot;diff&quot;: subtract-date(date-from-datetime($j.user-since), date-from-datetime($i.user-since))}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;id1&quot;: 3, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;P41D&quot;) }\n{ &quot;id1&quot;: 3, &quot;id2&quot;: 7, &quot;diff&quot;: duration(&quot;P28D&quot;) }\n{ &quot;id1&quot;: 7, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;P13D&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>subtract-time<a name=\"subtract-time\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>subtract-time(time_start, time_end)\n</pre></div></li>\n  \n<li>\n<p>Get the duration between two times <tt>time_start</tt> and <tt>time_end</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>time_start</tt>: the starting <tt>time</tt></li>\n    \n<li><tt>time_end</tt>: the ending <tt>time</tt></li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>duration</tt> value between <tt>time_start</tt> and <tt>time_end</tt></li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookUser')\nfor $j in dataset('FacebookUser')\nwhere $i.user-since &lt; $j.user-since and $i.user-since &gt; datetime(&quot;2012-01-01T00:00:00&quot;)\nreturn {&quot;id1&quot;: $i.id, &quot;id2&quot;: $j.id, &quot;diff&quot;: subtract-time(time-from-datetime($j.user-since), time(&quot;02:50:48.938&quot;))}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;id1&quot;: 3, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;PT7H19M11.62S&quot;) }\n{ &quot;id1&quot;: 3, &quot;id2&quot;: 7, &quot;diff&quot;: duration(&quot;PT7H19M11.62S&quot;) }\n{ &quot;id1&quot;: 7, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;PT7H19M11.62S&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>subtract-datetime<a name=\"subtract-datetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>subtract-datetime(datetime_start, datetime_end)\n</pre></div></li>\n  \n<li>\n<p>Get the duration between two datetimes <tt>datetime_start</tt> and <tt>datetime_end</tt></p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>datetime_start</tt>: the starting <tt>datetime</tt></li>\n    \n<li><tt>datetime_end</tt>: the ending <tt>datetime</tt></li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>duration</tt> value between <tt>datetime_start</tt> and <tt>datetime_end</tt></li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>use dataverse TinySocial;\n\nfor $i in dataset('FacebookUser')\nfor $j in dataset('FacebookUser')\nwhere $i.user-since &lt; $j.user-since and $i.user-since &gt; datetime(&quot;2011-01-01T00:00:00&quot;)\nreturn {&quot;id1&quot;: $i.id, &quot;id2&quot;: $j.id, &quot;diff&quot;: subtract-datetime($j.user-since, $i.user-since)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;id1&quot;: 2, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;P576D&quot;) }\n{ &quot;id1&quot;: 2, &quot;id2&quot;: 3, &quot;diff&quot;: duration(&quot;P535D&quot;) }\n{ &quot;id1&quot;: 2, &quot;id2&quot;: 7, &quot;diff&quot;: duration(&quot;P563D&quot;) }\n{ &quot;id1&quot;: 3, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;P41D&quot;) }\n{ &quot;id1&quot;: 3, &quot;id2&quot;: 7, &quot;diff&quot;: duration(&quot;P28D&quot;) }\n{ &quot;id1&quot;: 7, &quot;id2&quot;: 1, &quot;diff&quot;: duration(&quot;P13D&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>interval-start-from-date/time/datetime<a name=\"interval-start-from-datetimedatetime\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>interval-start-from-date/time/datetime(date/time/datetime, duration)\n</pre></div></li>\n  \n<li>\n<p>Construct an <tt>interval</tt> value by the given starting <tt>date</tt>/<tt>time</tt>/<tt>datetime</tt> and the <tt>duration</tt> that the interval lasts.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>date/time/datetime</tt>: a <tt>string</tt> representing a <tt>date</tt>, <tt>time</tt> or <tt>datetime</tt>, or a <tt>date</tt>/<tt>time</tt>/<tt>datetime</tt> value, representing the starting time point.</li>\n    \n<li><tt>duration</tt>: a <tt>string</tt> or <tt>duration</tt> value representing the duration of the interval. Note that duration cannot be negative value.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>An <tt>interval</tt> value representing the interval starting from the given time point with the length of duration.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $itv1 := interval-start-from-date(&quot;1984-01-01&quot;, &quot;P1Y&quot;)\nlet $itv2 := interval-start-from-time(time(&quot;02:23:28.394&quot;), &quot;PT3H24M&quot;)\nlet $itv3 := interval-start-from-datetime(&quot;1999-09-09T09:09:09.999&quot;, duration(&quot;P2M30D&quot;))\nreturn {&quot;interval1&quot;: $itv1, &quot;interval2&quot;: $itv2, &quot;interval3&quot;: $itv3}\n</pre></div></li>\n  \n<li>\n<p>The expectecd result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;interval1&quot;: interval-date(&quot;1984-01-01, 1985-01-01&quot;), &quot;interval2&quot;: interval-time(&quot;02:23:28.394Z, 05:47:28.394Z&quot;), &quot;interval3&quot;: interval-datetime(&quot;1999-09-09T09:09:09.999Z, 1999-12-09T09:09:09.999Z&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>get-interval-start, get-interval-end<a name=\"get-interval-start_get-interval-end\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>get-interval-start/get-interval-end(interval)\n</pre></div></li>\n  \n<li>\n<p>Gets the start/end of the given interval.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>interval</tt>: the interval to be accessed.</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>time</tt>, <tt>date</tt>, or <tt>datetime</tt> (depending on the time instances of the interval) representing the starting or ending time.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $itv := interval-start-from-date(&quot;1984-01-01&quot;, &quot;P1Y&quot;)\nreturn {&quot;start&quot;: get-interval-start($itv), &quot;end&quot;: get-interval-end($itv)}\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;start&quot;: date(&quot;1984-01-01&quot;), &quot;end&quot;: date(&quot;1985-01-01&quot;) }\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>interval-bin<a name=\"interval-bin\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>interval-bin(time-to-bin, time-bin-anchor, duration-bin-size)\n</pre></div></li>\n  \n<li>\n<p>Return the <tt>interval</tt> value representing the bin containing the <tt>time-to-bin</tt> value.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>time-to-bin</tt>: a date/time/datetime value representing the time to be binned.</li>\n    \n<li><tt>time-bin-anchor</tt>: a date/time/datetime value representing an anchor of a bin starts. The type of this argument should be the same as the first <tt>time-to-bin</tt> argument.</li>\n    \n<li><tt>duration-bin-size</tt>: the duration value representing the size of the bin, in the type of year-month-duration or day-time-duration. The type of this duration should be compatible with the type of <tt>time-to-bin</tt>, so that the arithmetic operation between <tt>time-to-bin</tt> and <tt>duration-bin-size</tt> is well-defined. Currently AsterixDB supports the following arithmetic operations:\n    \n<ul>\n      \n<li>datetime +|- year-month-duration</li>\n      \n<li>datetime +|- day-time-duration</li>\n      \n<li>date +|- year-month-duration</li>\n      \n<li>date +|- day-time-duration</li>\n      \n<li>time +|- day-time-duration</li>\n    </ul></li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>interval</tt> value representing the bin containing the <tt>time-to-bin</tt> value. Note that the internal type of this interval value should be the same as the <tt>time-to-bin</tt> type.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>let $c1 := date(&quot;2010-10-30&quot;)\nlet $c2 := datetime(&quot;-1987-11-19T23:49:23.938&quot;)\nlet $c3 := time(&quot;12:23:34.930+07:00&quot;)\n\nreturn { &quot;bin1&quot;: interval-bin($c1, date(&quot;1990-01-01&quot;), year-month-duration(&quot;P1Y&quot;)),\n &quot;bin2&quot;: interval-bin($c2, datetime(&quot;1990-01-01T00:00:00.000Z&quot;), year-month-duration(&quot;P6M&quot;)),\n &quot;bin3&quot;: interval-bin($c3, time(&quot;00:00:00&quot;), day-time-duration(&quot;PD1M&quot;)),\n &quot;bin4&quot;: interval-bin($c2, datetime(&quot;2013-01-01T00:00:00.000&quot;), day-time-duration(&quot;PT24H&quot;))\n</pre></div> }</li>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>{ &quot;bin1&quot;: interval-date(&quot;2010-01-01, 2011-01-01&quot;),\n  &quot;bin2&quot;: interval-datetime(&quot;-1987-07-01T00:00:00.000Z, -1986-01-01T00:00:00.000Z&quot;),\n  &quot;bin3&quot;: interval-time(&quot;05:23:00.000Z, 05:24:00.000Z&quot;),\n  &quot;bin4&quot;: interval-datetime(&quot;-1987-11-19T00:00:00.000Z, -1987-11-20T00:00:00.000Z&quot;)}\n</pre></div></li>\n</ul></div></div>\n<div class=\"section\">\n<h2><a name=\"OtherFunctions\" id=\"OtherFunctions\">Other Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Other_Functions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<h3>is-null<a name=\"is-null\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>is-null(var)\n</pre></div></li>\n  \n<li>\n<p>Checks whether the given variable is a <tt>null</tt> value.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>var</tt> : A variable (any type is allowed).</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>A <tt>boolean</tt> on whether the variable is a <tt>null</tt> or not.</li>\n  </ul></li>\n  \n<li>\n<p>Example:</p>\n  \n<div class=\"source\">\n<pre>for $m in ['hello', 'world', null]\nwhere not(is-null($m))\nreturn $m\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>&quot;hello&quot;\n&quot;world&quot;\n</pre></div></li>\n</ul></div>\n<div class=\"section\">\n<h3>switch-case<a name=\"switch-case\"></a></h3>\n\n<ul>\n  \n<li>\n<p>Syntax:</p>\n  \n<div class=\"source\">\n<pre>switch-case(condition,\n    case1, case1-result,\n    case2, case2-result,\n    ...,\n    default, default-result\n)\n</pre></div></li>\n  \n<li>\n<p>Switches amongst a sequence of cases and returns the result of the first matching case. If no match is found, the result of the default case is returned.</p></li>\n  \n<li>Arguments:\n  \n<ul>\n    \n<li><tt>condition</tt>: A variable (any type is allowed).</li>\n    \n<li><tt>caseI/default</tt>: A variable (any type is allowed).</li>\n    \n<li><tt>caseI/default-result</tt>: A variable (any type is allowed).</li>\n  </ul></li>\n  \n<li>Return Value:\n  \n<ul>\n    \n<li>Returns <tt>caseI-result</tt> if <tt>condition</tt> matches <tt>caseI</tt>, otherwise <tt>default-result</tt>.</li>\n  </ul></li>\n  \n<li>\n<p>Example 1:</p>\n  \n<div class=\"source\">\n<pre>switch-case(&quot;a&quot;,\n    &quot;a&quot;, 0,\n    &quot;x&quot;, 1,\n    &quot;y&quot;, 2,\n    &quot;z&quot;, 3\n)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>0\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>Example 2:</p>\n  \n<div class=\"source\">\n<pre>switch-case(&quot;a&quot;,\n    &quot;x&quot;, 1,\n    &quot;y&quot;, 2,\n    &quot;z&quot;, 3\n)\n</pre></div></li>\n</ul>\n\n<ul>\n  \n<li>\n<p>The expected result is:</p>\n  \n<div class=\"source\">\n<pre>3\n</pre></div></li>\n</ul></div></div>\n                  </div>\n            </div>\n          </div>\n\n    <hr/>\n\n    <footer>\n            <div class=\"container-fluid\">\n              <div class=\"row span12\">Copyright &copy;                   2014.\n          All Rights Reserved.      \n                    \n      </div>\n\n                          \n        \n                </div>\n    </footer>\n  </body>\n</html>\n", "id": 16535.0}