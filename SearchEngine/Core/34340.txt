{"text": "View Javadoc 1 2 Created on Mar 12 2 5 3 4 5 package edu uci isr impromptu pie 6 7 import java awt Point 8 9 import edu uci isr impromptu security SecurityConstants 1 11 12 Coordinate for a dot Copied from Kari s code 13 The center of the pie is 14 The radius and theta is just like normal polar system 15 X increases rightwards Y increases downwards 16 17 author Jie Ren 18 19 public class Coordinate 2 21 The radius of this point 22 23 private double radius 24 25 The relative angle of this point within the peer between to 1 26 27 private double relativeAngle 1 28 29 The number of peers present When a peer joins or leaves the point changes 3 31 private int peers 32 33 The relative position of this peer From 1 to peers 34 35 private int cardinal range 1 peers 36 37 The point that maintains the x and y coordiante 38 39 private Point absolute null 4 41 42 Create a coordinate Convert absolute position to relative position 43 param point The absolute coordiante 44 param peers The number of present peers 45 param cardinal The relative position 46 47 public Coordinate Point point int peers int cardinal 48 absolute Point point clone 49 this peers peers 5 this cardinal cardinal 51 52 this radius calculateRadius point 53 double theta calculateTheta point 54 this relativeAngle calculateRelativeAngle theta peers cardinal 55 56 57 58 Create a coordiante From relative position 59 6 param radius the radius of this point 61 param relativeAngle the relative angle of this point 62 param peers the number of present peers 63 param cardinal the relative position of this peer 64 65 public Coordinate double radius double relativeAngle int peers int cardinal 66 this radius radius 67 this relativeAngle relativeAngle 68 this peers peers 69 this cardinal cardinal 7 71 double theta calculateTheta 72 this absolute calculatePoint radius theta 73 74 75 76 Update with a new point 77 param point the new point 78 79 public void updateCoordinate Point point 8 absolute Point point clone 81 radius calculateRadius point 82 double theta calculateTheta point 83 relativeAngle this calculateRelativeAngle theta peers cardinal 84 85 86 87 Update with a new relative coordiante 88 param radius the new radius 89 param relativeAngle the new relative angle 9 91 public void updateCoordinate double radius double relativeAngle 92 this radius radius 93 this relativeAngle relativeAngle 94 double theta calculateTheta 95 this absolute calculatePoint radius theta 96 97 98 99 Update with a new relative position among the peers 1 param peers the new number of present peers 1 1 param cardinal the new relative position 1 2 1 3 public void updateCardinal int peers int cardinal 1 4 this peers peers 1 5 this cardinal cardinal 1 6 double theta calculateTheta 1 7 this absolute calculatePoint radius theta 1 8 1 9 11 111 Calculate the angle for a point between and 359 112 param point the point 113 return its theta angle 114 115 public static double calculateTheta Point point 116 double x point getX 117 double y point getY since in svg Y is from up to down we need 118 to change the direction 119 double theta Math toDegrees Math atan2 y x 12 if theta 121 theta theta Configuration CIRCLE 122 123 return theta 124 125 126 127 Calculate the theta angle of this point 128 129 return the theta angle accounting for the present peers If the point 13 is within the private or persistent spaces then calculate as if there 131 is only one peer 132 133 private double calculateTheta 134 This must be called after relativeAngle has been calculated from a Point 135 double result relativeAngle Configuration CIRCLE 136 if isPrivateOrPersistent radius 137 Normal result 138 double peerArc Configuration CIRCLE peers 139 result peerArc cardinal 1 peerArc relativeAngle 14 141 return result 142 143 144 145 Calculate the relative angle of an absolute angle against a peer 146 param theta the absolute angle 147 param peers the number of present peers 148 param cardinal the relative position of this peer 149 return 15 151 private double calculateRelativeAngle double theta int peers int cardinal 152 int n peers 153 int idx cardinal 154 155 if isPrivateOrPersistent radius 156 n 1 157 idx 1 158 159 16 double result 161 double peerArc Configuration CIRCLE n 162 double modAngle theta peerArc 163 if modAngle 164 it s or 1 depending on the user index 165 if peerArc idx 1 theta 166 result 167 168 else 169 result 1 17 171 172 else 173 double relativeAngle modAngle peerArc 174 round to three places 175 double tmp1 relativeAngle 1 176 double tmp2 Math round tmp1 177 double relativeRounded tmp2 1 178 result relativeRounded 179 18 return result 181 182 183 184 Calculate the radius for a relative point 185 param point the relative point 186 return its radius 187 188 public static double calculateRadius Point point 189 double x point getX 19 double y point getY 191 return Math sqrt x x y y 192 193 194 195 Calculate a relative piont given a polar radius and theta 196 param radius the radius of the point 197 param theta the angle of the point 198 return a Point with its x and y set 199 2 public static Point calculatePoint double radius double theta 2 1 double x Math cos Math toRadians theta radius 2 2 since in svg Y is from up to down we need to change the direction 2 3 double y Math sin Math toRadians theta radius 2 4 Point point new Point 2 5 point setLocation x y 2 6 return point 2 7 2 8 2 9 21 Get radius 211 return the radius 212 213 public double getRadius 214 return radius 215 216 217 218 Get relative angle 219 return relative angle 22 221 public double getRelativeAngle 222 return relativeAngle 223 224 225 226 Get the theta value for this point 227 return the theta 228 229 public double getTheta 23 return calculateTheta 231 232 233 234 Get a relative point based on its relative angle and radius 235 return a Point with its x and y set 236 237 private Point getPoint 238 double theta calculateTheta 239 Point point calculatePoint this radius theta 24 return point 241 242 243 244 Whether the radius is within the private space or the persistent space 245 param radius the radius to test 246 return true if the radius is within the private space or the persistent 247 space false otherwise 248 249 private static boolean isPrivateOrPersistent double radius 25 boolean result false 251 int level PieUtils getSharingLevel radius 252 if level SecurityConstants LEVEL PERSISTENT 253 level SecurityConstants LEVEL PRIVATE 254 result true 255 256 return result 257 258 259 26 Get the point 261 return a Point with its x and y set 262 263 public Point getAbsolutePoint 264 if absolute null 265 absolute getPoint 266 267 return absolute 268 269 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.30/xref/edu/uci/isr/impromptu/pie/Coordinate.html", "title": "coordinate xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>Coordinate xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../../../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../../../../apidocs/edu/uci/isr/impromptu/pie/Coordinate.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <em class=\"comment\">/*</em>\n<a name=\"2\" href=\"#2\">2</a>   <em class=\"comment\"> * Created on Mar 12, 2005</em>\n<a name=\"3\" href=\"#3\">3</a>   <em class=\"comment\"> *</em>\n<a name=\"4\" href=\"#4\">4</a>   <em class=\"comment\"> */</em>\n<a name=\"5\" href=\"#5\">5</a>   <strong>package</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/package-summary.html\">edu.uci.isr.impromptu.pie</a>;\n<a name=\"6\" href=\"#6\">6</a>   \n<a name=\"7\" href=\"#7\">7</a>   <strong>import</strong> java.awt.Point;\n<a name=\"8\" href=\"#8\">8</a>   \n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> edu.uci.isr.impromptu.security.SecurityConstants;\n<a name=\"10\" href=\"#10\">10</a>  \n<a name=\"11\" href=\"#11\">11</a>  <em>/**<em>*</em></em>\n<a name=\"12\" href=\"#12\">12</a>  <em> * Coordinate for a dot. Copied from Kari's code.</em>\n<a name=\"13\" href=\"#13\">13</a>  <em> * The center of the pie is (0,0). </em>\n<a name=\"14\" href=\"#14\">14</a>  <em> * The radius and theta is just like normal polar system.</em>\n<a name=\"15\" href=\"#15\">15</a>  <em> * X increases rightwards. Y increases downwards.</em>\n<a name=\"16\" href=\"#16\">16</a>  <em> * </em>\n<a name=\"17\" href=\"#17\">17</a>  <em> * @author Jie Ren</em>\n<a name=\"18\" href=\"#18\">18</a>  <em> */</em>\n<a name=\"19\" href=\"#19\">19</a>  <strong>public</strong> <strong>class</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a> {\n<a name=\"20\" href=\"#20\">20</a>      <em>/**<em>*</em></em>\n<a name=\"21\" href=\"#21\">21</a>  <em>     * The radius of this point</em>\n<a name=\"22\" href=\"#22\">22</a>  <em>     */</em> \n<a name=\"23\" href=\"#23\">23</a>      <strong>private</strong> <strong>double</strong> \t\tradius;\n<a name=\"24\" href=\"#24\">24</a>      <em>/**<em>*</em></em>\n<a name=\"25\" href=\"#25\">25</a>  <em>     * The relative angle of this point, within the peer, between 0.000 to 1.000</em>\n<a name=\"26\" href=\"#26\">26</a>  <em>     */</em>\n<a name=\"27\" href=\"#27\">27</a>      <strong>private</strong> <strong>double</strong> \t\trelativeAngle; <em class=\"comment\">// 0.000 - 1.000</em>\n<a name=\"28\" href=\"#28\">28</a>      <em>/**<em>*</em></em>\n<a name=\"29\" href=\"#29\">29</a>  <em>     * The number of peers present. When a peer joins or leaves, the point changes </em>\n<a name=\"30\" href=\"#30\">30</a>  <em>     */</em>\n<a name=\"31\" href=\"#31\">31</a>      <strong>private</strong> <strong>int</strong> \t\tpeers;\n<a name=\"32\" href=\"#32\">32</a>      <em>/**<em>*</em></em>\n<a name=\"33\" href=\"#33\">33</a>  <em>     * The relative position of this peer. From 1 to peers </em>\n<a name=\"34\" href=\"#34\">34</a>  <em>     */</em>\n<a name=\"35\" href=\"#35\">35</a>      <strong>private</strong> <strong>int</strong> \t\tcardinal; <em class=\"comment\">// range 1..peers;</em>\n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>*</em></em>\n<a name=\"37\" href=\"#37\">37</a>  <em>     * The point that maintains the x and y coordiante  </em>\n<a name=\"38\" href=\"#38\">38</a>  <em>     */</em>\n<a name=\"39\" href=\"#39\">39</a>      <strong>private</strong> Point \t\tabsolute = <strong>null</strong>; \n<a name=\"40\" href=\"#40\">40</a>  \n<a name=\"41\" href=\"#41\">41</a>      <em>/**<em>*</em></em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     * Create a coordinate. Convert absolute position to relative position. </em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * @param point\t\t\tThe absolute coordiante</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     * @param _peers\t\tThe number of present peers</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     * @param _cardinal\t\tThe relative position</em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     */</em>\n<a name=\"47\" href=\"#47\">47</a>      <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a>(Po<strong>int</strong> po<strong>int</strong>, <strong>int</strong> _peers, <strong>int</strong> _cardinal) {\n<a name=\"48\" href=\"#48\">48</a>          absolute = (Point)point.clone();\n<a name=\"49\" href=\"#49\">49</a>          <strong>this</strong>.peers = _peers;\n<a name=\"50\" href=\"#50\">50</a>          <strong>this</strong>.cardinal = _cardinal;\n<a name=\"51\" href=\"#51\">51</a>  \n<a name=\"52\" href=\"#52\">52</a>          <strong>this</strong>.radius = calculateRadius(point);\n<a name=\"53\" href=\"#53\">53</a>          <strong>double</strong> theta = calculateTheta(point);\n<a name=\"54\" href=\"#54\">54</a>          <strong>this</strong>.relativeAngle = calculateRelativeAngle(theta, peers, cardinal);\n<a name=\"55\" href=\"#55\">55</a>      }\n<a name=\"56\" href=\"#56\">56</a>  \n<a name=\"57\" href=\"#57\">57</a>      <em>/**<em>*</em></em>\n<a name=\"58\" href=\"#58\">58</a>  <em>     * Create a coordiante. From relative position </em>\n<a name=\"59\" href=\"#59\">59</a>  <em>     *  </em>\n<a name=\"60\" href=\"#60\">60</a>  <em>     * @param _radius\t\t\tthe radius of this point</em>\n<a name=\"61\" href=\"#61\">61</a>  <em>     * @param _relativeAngle\tthe relative angle of this point</em>\n<a name=\"62\" href=\"#62\">62</a>  <em>     * @param _peers\t\t\tthe number of present peers</em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     * @param _cardinal\t\t\tthe relative position of this peer</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     */</em>\n<a name=\"65\" href=\"#65\">65</a>      <strong>public</strong> <a href=\"../../../../../edu/uci/isr/impromptu/pie/Coordinate.html\">Coordinate</a>(<strong>double</strong> _radius, <strong>double</strong> _relativeAngle, <strong>int</strong> _peers, <strong>int</strong> _cardinal) {\n<a name=\"66\" href=\"#66\">66</a>          <strong>this</strong>.radius = _radius;\n<a name=\"67\" href=\"#67\">67</a>          <strong>this</strong>.relativeAngle = _relativeAngle;\n<a name=\"68\" href=\"#68\">68</a>          <strong>this</strong>.peers = _peers;\n<a name=\"69\" href=\"#69\">69</a>          <strong>this</strong>.cardinal = _cardinal;\n<a name=\"70\" href=\"#70\">70</a>  \n<a name=\"71\" href=\"#71\">71</a>          <strong>double</strong> theta = calculateTheta();\n<a name=\"72\" href=\"#72\">72</a>          <strong>this</strong>.absolute = calculatePoint(radius, theta);\n<a name=\"73\" href=\"#73\">73</a>      }\n<a name=\"74\" href=\"#74\">74</a>  \n<a name=\"75\" href=\"#75\">75</a>      <em>/**<em>*</em></em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     * Update with a new point</em>\n<a name=\"77\" href=\"#77\">77</a>  <em>     * @param point the new point</em>\n<a name=\"78\" href=\"#78\">78</a>  <em>     */</em>\n<a name=\"79\" href=\"#79\">79</a>      <strong>public</strong> <strong>void</strong> updateCoordinate(Point point) {\n<a name=\"80\" href=\"#80\">80</a>          absolute = (Point)point.clone();\n<a name=\"81\" href=\"#81\">81</a>          radius = calculateRadius(point);\n<a name=\"82\" href=\"#82\">82</a>          <strong>double</strong> theta = calculateTheta(point);\n<a name=\"83\" href=\"#83\">83</a>          relativeAngle = <strong>this</strong>.calculateRelativeAngle(theta, peers, cardinal);\n<a name=\"84\" href=\"#84\">84</a>      }\n<a name=\"85\" href=\"#85\">85</a>  \n<a name=\"86\" href=\"#86\">86</a>      <em>/**<em>*</em></em>\n<a name=\"87\" href=\"#87\">87</a>  <em>     * Update with a new relative coordiante</em>\n<a name=\"88\" href=\"#88\">88</a>  <em>     * @param radius\t\t\tthe new radius</em>\n<a name=\"89\" href=\"#89\">89</a>  <em>     * @param relativeAngle\t\tthe new relative angle</em>\n<a name=\"90\" href=\"#90\">90</a>  <em>     */</em>\n<a name=\"91\" href=\"#91\">91</a>      <strong>public</strong> <strong>void</strong> updateCoordinate(<strong>double</strong> radius, <strong>double</strong> relativeAngle) {\n<a name=\"92\" href=\"#92\">92</a>          <strong>this</strong>.radius = radius;\n<a name=\"93\" href=\"#93\">93</a>          <strong>this</strong>.relativeAngle = relativeAngle;\n<a name=\"94\" href=\"#94\">94</a>          <strong>double</strong> theta = calculateTheta();\n<a name=\"95\" href=\"#95\">95</a>          <strong>this</strong>.absolute = calculatePoint(radius, theta);\n<a name=\"96\" href=\"#96\">96</a>      }\n<a name=\"97\" href=\"#97\">97</a>  \n<a name=\"98\" href=\"#98\">98</a>      <em>/**<em>*</em></em>\n<a name=\"99\" href=\"#99\">99</a>  <em>     * Update with a new relative position among the peers</em>\n<a name=\"100\" href=\"#100\">100</a> <em>     * @param _peers\t\tthe new number of present peers </em>\n<a name=\"101\" href=\"#101\">101</a> <em>     * @param _cardinal\t\tthe new relative position</em>\n<a name=\"102\" href=\"#102\">102</a> <em>     */</em>\n<a name=\"103\" href=\"#103\">103</a>     <strong>public</strong> <strong>void</strong> updateCardinal(<strong>int</strong> _peers, <strong>int</strong> _cardinal) {\n<a name=\"104\" href=\"#104\">104</a>         <strong>this</strong>.peers = _peers;\n<a name=\"105\" href=\"#105\">105</a>         <strong>this</strong>.cardinal = _cardinal;\n<a name=\"106\" href=\"#106\">106</a>         <strong>double</strong> theta = calculateTheta();\n<a name=\"107\" href=\"#107\">107</a>         <strong>this</strong>.absolute = calculatePoint(radius, theta);\n<a name=\"108\" href=\"#108\">108</a>     }\n<a name=\"109\" href=\"#109\">109</a> \n<a name=\"110\" href=\"#110\">110</a>     <em>/**<em>*</em></em>\n<a name=\"111\" href=\"#111\">111</a> <em>     * Calculate the angle for a point, between 0 and 359</em>\n<a name=\"112\" href=\"#112\">112</a> <em>     * @param point the point</em>\n<a name=\"113\" href=\"#113\">113</a> <em>     * @return its theta angle</em>\n<a name=\"114\" href=\"#114\">114</a> <em>     */</em>\n<a name=\"115\" href=\"#115\">115</a>     <strong>public</strong> <strong>static</strong> <strong>double</strong> calculateTheta(Point point) {\n<a name=\"116\" href=\"#116\">116</a>         <strong>double</strong> x = point.getX();\n<a name=\"117\" href=\"#117\">117</a>         <strong>double</strong> y = -point.getY();<em class=\"comment\">//since in svg, Y is from up to down, we need</em>\n<a name=\"118\" href=\"#118\">118</a>                                  <em class=\"comment\">// to change the direction</em>\n<a name=\"119\" href=\"#119\">119</a>         <strong>double</strong> theta = Math.toDegrees(Math.atan2(y, x));\n<a name=\"120\" href=\"#120\">120</a>         <strong>if</strong> (theta &lt; 0) {\n<a name=\"121\" href=\"#121\">121</a>             theta = theta + Configuration.CIRCLE;\n<a name=\"122\" href=\"#122\">122</a>         }\n<a name=\"123\" href=\"#123\">123</a>         <strong>return</strong> theta;\n<a name=\"124\" href=\"#124\">124</a>     }\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>     <em>/**<em>*</em></em>\n<a name=\"127\" href=\"#127\">127</a> <em>     * Calculate the theta angle of this point.</em>\n<a name=\"128\" href=\"#128\">128</a> <em>     * </em>\n<a name=\"129\" href=\"#129\">129</a> <em>     * @return the theta angle, accounting for the present peers. If the point </em>\n<a name=\"130\" href=\"#130\">130</a> <em>     * is within the private or persistent spaces, then calculate as if there </em>\n<a name=\"131\" href=\"#131\">131</a> <em>     * is only one peer.  </em>\n<a name=\"132\" href=\"#132\">132</a> <em>     */</em>\n<a name=\"133\" href=\"#133\">133</a>     <strong>private</strong> <strong>double</strong> calculateTheta() {\n<a name=\"134\" href=\"#134\">134</a>         <em class=\"comment\">// This must be called after relativeAngle has been calculated from a Point</em>\n<a name=\"135\" href=\"#135\">135</a>         <strong>double</strong>\tresult = relativeAngle * Configuration.CIRCLE;\n<a name=\"136\" href=\"#136\">136</a>         <strong>if</strong> (!isPrivateOrPersistent(radius)) {\n<a name=\"137\" href=\"#137\">137</a> \t        <em class=\"comment\">// Normal result</em>\n<a name=\"138\" href=\"#138\">138</a> \t        <strong>double</strong> peerArc = Configuration.CIRCLE / peers;\n<a name=\"139\" href=\"#139\">139</a> \t        result = (peerArc * (cardinal - 1)) + (peerArc * relativeAngle);\n<a name=\"140\" href=\"#140\">140</a>         }\n<a name=\"141\" href=\"#141\">141</a>         <strong>return</strong> result;\n<a name=\"142\" href=\"#142\">142</a>     }\n<a name=\"143\" href=\"#143\">143</a> \n<a name=\"144\" href=\"#144\">144</a>     <em>/**<em>*</em></em>\n<a name=\"145\" href=\"#145\">145</a> <em>     * Calculate the relative angle of an absolute angle against a peer</em>\n<a name=\"146\" href=\"#146\">146</a> <em>     * @param theta\t\t\tthe absolute angle</em>\n<a name=\"147\" href=\"#147\">147</a> <em>     * @param _peers\t\tthe number of present peers</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     * @param _cardinal\t\tthe relative position of this peer</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     * @return</em>\n<a name=\"150\" href=\"#150\">150</a> <em>     */</em>\n<a name=\"151\" href=\"#151\">151</a>     <strong>private</strong> <strong>double</strong> calculateRelativeAngle(<strong>double</strong> theta, <strong>int</strong> _peers, <strong>int</strong> _cardinal) {\n<a name=\"152\" href=\"#152\">152</a>         <strong>int</strong> n = _peers;\n<a name=\"153\" href=\"#153\">153</a>         <strong>int</strong> idx = _cardinal;\n<a name=\"154\" href=\"#154\">154</a> \n<a name=\"155\" href=\"#155\">155</a>         <strong>if</strong> (isPrivateOrPersistent(radius)) {\n<a name=\"156\" href=\"#156\">156</a>             n = 1;\n<a name=\"157\" href=\"#157\">157</a>             idx = 1;\n<a name=\"158\" href=\"#158\">158</a>         }\n<a name=\"159\" href=\"#159\">159</a> \n<a name=\"160\" href=\"#160\">160</a>         <strong>double</strong> result;\n<a name=\"161\" href=\"#161\">161</a>         <strong>double</strong> peerArc = Configuration.CIRCLE / n;\n<a name=\"162\" href=\"#162\">162</a>         <strong>double</strong> modAngle = theta % peerArc;\n<a name=\"163\" href=\"#163\">163</a>         <strong>if</strong> (modAngle == 0) {\n<a name=\"164\" href=\"#164\">164</a>             <em class=\"comment\">// it's 0 or 100 depending on the user index</em>\n<a name=\"165\" href=\"#165\">165</a>             <strong>if</strong> ((peerArc * (idx - 1)) == theta) {\n<a name=\"166\" href=\"#166\">166</a>                 result = 0.0;\n<a name=\"167\" href=\"#167\">167</a>             } \n<a name=\"168\" href=\"#168\">168</a>             <strong>else</strong> {\n<a name=\"169\" href=\"#169\">169</a>                 result = 1.0;\n<a name=\"170\" href=\"#170\">170</a>             }\n<a name=\"171\" href=\"#171\">171</a>         }\n<a name=\"172\" href=\"#172\">172</a>         <strong>else</strong> {\n<a name=\"173\" href=\"#173\">173</a> \t        <strong>double</strong> relativeAngle = (modAngle) / peerArc;\n<a name=\"174\" href=\"#174\">174</a> \t        <em class=\"comment\">// round to three places</em>\n<a name=\"175\" href=\"#175\">175</a> \t        <strong>double</strong> tmp1 = relativeAngle * 1000;\n<a name=\"176\" href=\"#176\">176</a> \t        <strong>double</strong> tmp2 = Math.round(tmp1);\n<a name=\"177\" href=\"#177\">177</a> \t        <strong>double</strong> relativeRounded = tmp2 / 1000;\n<a name=\"178\" href=\"#178\">178</a> \t        result = relativeRounded;\n<a name=\"179\" href=\"#179\">179</a>         }\n<a name=\"180\" href=\"#180\">180</a>         <strong>return</strong> result;\n<a name=\"181\" href=\"#181\">181</a>     }\n<a name=\"182\" href=\"#182\">182</a> \n<a name=\"183\" href=\"#183\">183</a>     <em>/**<em>*</em></em>\n<a name=\"184\" href=\"#184\">184</a> <em>     * Calculate the radius for a relative point</em>\n<a name=\"185\" href=\"#185\">185</a> <em>     * @param point the relative point</em>\n<a name=\"186\" href=\"#186\">186</a> <em>     * @return its radius</em>\n<a name=\"187\" href=\"#187\">187</a> <em>     */</em>\n<a name=\"188\" href=\"#188\">188</a>     <strong>public</strong> <strong>static</strong> <strong>double</strong> calculateRadius(Point point) {\n<a name=\"189\" href=\"#189\">189</a>         <strong>double</strong> x = point.getX();\n<a name=\"190\" href=\"#190\">190</a>         <strong>double</strong> y = point.getY();\n<a name=\"191\" href=\"#191\">191</a>         <strong>return</strong> Math.sqrt(x * x + y * y);\n<a name=\"192\" href=\"#192\">192</a>     }\n<a name=\"193\" href=\"#193\">193</a> \n<a name=\"194\" href=\"#194\">194</a>     <em>/**<em>*</em></em>\n<a name=\"195\" href=\"#195\">195</a> <em>     * Calculate a relative piont given a polar radius and theta </em>\n<a name=\"196\" href=\"#196\">196</a> <em>     * @param radius the radius of the point</em>\n<a name=\"197\" href=\"#197\">197</a> <em>     * @param theta the angle of the point</em>\n<a name=\"198\" href=\"#198\">198</a> <em>     * @return a Point with its x and y set</em>\n<a name=\"199\" href=\"#199\">199</a> <em>     */</em>\n<a name=\"200\" href=\"#200\">200</a>     <strong>public</strong> <strong>static</strong> Point calculatePoint(<strong>double</strong> radius, <strong>double</strong> theta) {\n<a name=\"201\" href=\"#201\">201</a>         <strong>double</strong> x = Math.cos(Math.toRadians(theta)) * radius;\n<a name=\"202\" href=\"#202\">202</a>         <em class=\"comment\">//since in svg, Y is from up to down, we need to change the direction</em>\n<a name=\"203\" href=\"#203\">203</a>         <strong>double</strong> y = -Math.sin(Math.toRadians(theta)) * radius;\n<a name=\"204\" href=\"#204\">204</a>         Point point = <strong>new</strong> Point();\n<a name=\"205\" href=\"#205\">205</a>         point.setLocation(x, y);\n<a name=\"206\" href=\"#206\">206</a>         <strong>return</strong> point;\n<a name=\"207\" href=\"#207\">207</a>     }\n<a name=\"208\" href=\"#208\">208</a> \n<a name=\"209\" href=\"#209\">209</a>     <em>/**<em>*</em></em>\n<a name=\"210\" href=\"#210\">210</a> <em>     * Get radius</em>\n<a name=\"211\" href=\"#211\">211</a> <em>     * @return the radius</em>\n<a name=\"212\" href=\"#212\">212</a> <em>     */</em>\n<a name=\"213\" href=\"#213\">213</a>     <strong>public</strong> <strong>double</strong> getRadius() {\n<a name=\"214\" href=\"#214\">214</a>         <strong>return</strong> radius;\n<a name=\"215\" href=\"#215\">215</a>     }\n<a name=\"216\" href=\"#216\">216</a> \n<a name=\"217\" href=\"#217\">217</a>     <em>/**<em>*</em></em>\n<a name=\"218\" href=\"#218\">218</a> <em>     * Get relative angle</em>\n<a name=\"219\" href=\"#219\">219</a> <em>     * @return relative angle</em>\n<a name=\"220\" href=\"#220\">220</a> <em>     */</em>\n<a name=\"221\" href=\"#221\">221</a>     <strong>public</strong> <strong>double</strong> getRelativeAngle() {\n<a name=\"222\" href=\"#222\">222</a>         <strong>return</strong> relativeAngle;\n<a name=\"223\" href=\"#223\">223</a>     }\n<a name=\"224\" href=\"#224\">224</a> \n<a name=\"225\" href=\"#225\">225</a>     <em>/**<em>*</em></em>\n<a name=\"226\" href=\"#226\">226</a> <em>     * Get the theta value for this point</em>\n<a name=\"227\" href=\"#227\">227</a> <em>     * @return the theta</em>\n<a name=\"228\" href=\"#228\">228</a> <em>     */</em>\n<a name=\"229\" href=\"#229\">229</a>     <strong>public</strong> <strong>double</strong> getTheta() {\n<a name=\"230\" href=\"#230\">230</a>         <strong>return</strong> calculateTheta();\n<a name=\"231\" href=\"#231\">231</a>     }\n<a name=\"232\" href=\"#232\">232</a> \n<a name=\"233\" href=\"#233\">233</a>     <em>/**<em>*</em></em>\n<a name=\"234\" href=\"#234\">234</a> <em>     * Get a relative point based on its relative angle and radius</em>\n<a name=\"235\" href=\"#235\">235</a> <em>     * @return a Point with its x and y set</em>\n<a name=\"236\" href=\"#236\">236</a> <em>     */</em>\n<a name=\"237\" href=\"#237\">237</a>     <strong>private</strong> Point getPoint() {\n<a name=\"238\" href=\"#238\">238</a>         <strong>double</strong> theta = calculateTheta();\n<a name=\"239\" href=\"#239\">239</a>         Point point = calculatePoint(<strong>this</strong>.radius, theta);\n<a name=\"240\" href=\"#240\">240</a>         <strong>return</strong> point;\n<a name=\"241\" href=\"#241\">241</a>     }\n<a name=\"242\" href=\"#242\">242</a> \n<a name=\"243\" href=\"#243\">243</a>     <em>/**<em>*</em></em>\n<a name=\"244\" href=\"#244\">244</a> <em>     * Whether the radius is within the private space or the persistent space</em>\n<a name=\"245\" href=\"#245\">245</a> <em>     * @param radius the radius to test</em>\n<a name=\"246\" href=\"#246\">246</a> <em>     * @return true if the radius is within the private space or the persistent </em>\n<a name=\"247\" href=\"#247\">247</a> <em>     * space, false otherwise</em>\n<a name=\"248\" href=\"#248\">248</a> <em>     */</em>\n<a name=\"249\" href=\"#249\">249</a>     <strong>private</strong> <strong>static</strong> <strong>boolean</strong> isPrivateOrPersistent(<strong>double</strong> radius) {\n<a name=\"250\" href=\"#250\">250</a>         <strong>boolean</strong>\t\tresult = false;\n<a name=\"251\" href=\"#251\">251</a>         <strong>int</strong> level = PieUtils.getSharingLevel(radius);\n<a name=\"252\" href=\"#252\">252</a>         <strong>if</strong> (level == SecurityConstants.LEVEL_PERSISTENT || \n<a name=\"253\" href=\"#253\">253</a>             level == SecurityConstants.LEVEL_PRIVATE) {\n<a name=\"254\" href=\"#254\">254</a>             result = <strong>true</strong>;\n<a name=\"255\" href=\"#255\">255</a>         }\n<a name=\"256\" href=\"#256\">256</a>         <strong>return</strong> result;\n<a name=\"257\" href=\"#257\">257</a>     }\n<a name=\"258\" href=\"#258\">258</a> \n<a name=\"259\" href=\"#259\">259</a>     <em>/**<em>*</em></em>\n<a name=\"260\" href=\"#260\">260</a> <em>     * Get the point </em>\n<a name=\"261\" href=\"#261\">261</a> <em>     * @return a Point with its x and y set</em>\n<a name=\"262\" href=\"#262\">262</a> <em>     */</em>\n<a name=\"263\" href=\"#263\">263</a>     <strong>public</strong> Point getAbsolutePoint() {\n<a name=\"264\" href=\"#264\">264</a>         <strong>if</strong> (absolute == <strong>null</strong>) {\n<a name=\"265\" href=\"#265\">265</a>             absolute = getPoint();\n<a name=\"266\" href=\"#266\">266</a>         }\n<a name=\"267\" href=\"#267\">267</a>         <strong>return</strong> absolute;\n<a name=\"268\" href=\"#268\">268</a>     }\n<a name=\"269\" href=\"#269\">269</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 34340.0}