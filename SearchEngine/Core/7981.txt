{"text": "Ian G Harris Associate Professor Department of Computer Science University of California Irvine Home Publications Courses Projects Contact Short descriptions of some of our current projects Hardware Assisted Host based Intrusion Detection We are investigating a technique to implement host based intrusion detection HIDS in hardware so that attacks can be detected as soon as their behavior deviates from correct system behavior Our system is anomaly based a model of the correct system behavior is generated at compile time and any deviations from the correct behavior must indicate an attack We characterize correct system behavior as a finite state machine which accepts all legal system call sequences The execution of system calls is detected in hardware Syscall Detector by examining the instruction at each clock cycle and the contents of specific internal registers The legal system call sequences are captured in as a finite state machine which is implemented in hardware Syscall Sequence Recognizer In this way the execution of an illegal call sequence can be detected a single clock cycle after it occurs Directed Random Security Testing of Network Applications We propose a new directed random fuzzing system which applies static analysis of the target source code to generate fuzzing constraints to rapidly expose vulnerabilities Constraints are identified which will increase the execution frequency of potential vulnerabilities Networked applications which receive network messages as input and respond to those messages are the most common source of software security vulnerabilities because they are directly exposed to attack via the internet Networked applications have the property that a large part of their code execution depends directly on the values of fields of the network messages received as input For example the behavior of an HTTP server will depend on the request method and header fields and a TFTP server will depend on the opcode and mode fields We analyze the source code of the networked application to identify these dependencies and use them to constrain test generation Specification based Hardware Verification Misunderanding the specification is a significant source of design errors Detection of these errors requires that tests be generated directly from the specification in order to identify differences between the specification and the implementation Transaction Level Models TLMs are used to abstractly describe system behavior as a set of functions which encapsulate details of function and communication TLMs are the most abstract formal description of the specification which we use to generate specification based test sequences Transactions describe sequences of input events which trigger a behavior in the correct system The behavior of a design with a specification based error would match that of a mutated transaction We generate tests by mutating existing transactions to create tests which will differentiate teh behavior of correct and erroneous designs ", "_id": "http://www.ics.uci.edu/~harris/projects.html", "title": "\nian g. harris, projects\n", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n\n<link href=\"global.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n<head>\n<title>\nIan G. Harris, Projects\n</title>\n</head>\n\n<body>\n\n<div class=\"topbanner\">\n  <p>\n     <h1> Ian G. Harris </h1>\n     <h2> Associate Professor, Department of Computer Science </h2>\n     <h2> University of California Irvine </h2>\n  </p>\n  \n</div>\n\n\n<!-- bgwrapper wraps the sidemenu and the main divs -->\n<div id=\"bgwrapper\">\n\n<div class=\"sidemenu\">\n  <ul class=\"navigate\">\n    <li> <a href=\"index.html\"> Home </a> </li>\n    <li> <a href=\"publications.html\"> Publications </a> </li>\n    <li> <a href=\"courses.html\"> Courses </a> </li>\n    <li> <a href=\"projects.html\"> Projects </a> </li>\n    <li> <a href=\"contact.html\"> Contact </a> </li>\n</div>\n\n<div class=\"main\">\n\n<br class=\"littlebr\" />\n\n  <h4>\nShort descriptions of some of our current projects.\n  </h4>\n  \n<div class=\"htitle\">\nHardware Assisted Host-based Intrusion Detection\n</div>\n\n<p>\nWe are investigating a technique to implement host-based intrusion\ndetection (HIDS) in hardware so that attacks can be detected as soon\nas their behavior deviates from correct system behavior. Our system\nis anomaly-based; a model of the correct system behavior is generated\nat compile-time and any deviations from the correct behavior must\nindicate an attack. We characterize correct system behavior as a finite state machine which accepts all legal system call sequences.\n</p>\n\n<p class=\"imagep\">\n<img src=\"./images/hids2.jpg\" />\n</p>\n\n<p>\nThe execution of system calls is detected in hardware (<strong>Syscall\nDetector</strong>) by examining the instruction at each clock cycle,\nand the contents of specific internal registers. The legal system call\nsequences are captured in as a finite state machine which is\nimplemented in hardware (<strong>Syscall Sequence Recognizer</strong>).\n</p>\n\n<p class=\"imagep\">\n<img src=\"./images/hids1.jpg\" />\n</p>\n\n<p>\nIn this way, the execution of an illegal call sequence can be detected\na single clock cycle after it occurs.\n</p>\n\n<!------------------------------------------------------------------>\n<!------------------------------------------------------------------>\n\n<div class=\"htitle\">\nDirected-Random Security Testing of Network Applications\n</div>\n\n<p>\nWe propose a new directed-random fuzzing system which applies static\nanalysis of the target source code to generate fuzzing constraints to\nrapidly expose vulnerabilities. Constraints are identified which will increase the execution frequency of potential vulnerabilities. \n</p>\n\n<p class=\"imagep\">\n<img src=\"./images/drand1.jpg\" />\n</p>\n\n<p>\nNetworked applications, which receive network messages as input and respond to those messages, are the most common source of software security vulnerabilities because they are directly exposed to attack via the internet. Networked applications have the property that a large part of their code execution depends directly on the values of fields of the network messages received as input. For example, the behavior of an HTTP server will depend on the request method and header fields, and a TFTP server will depend on the opcode and mode fields. We analyze the source code of the networked application to identify these dependencies and use them to constrain test generation.\n</p>\n\n\n<!------------------------------------------------------------------>\n<!------------------------------------------------------------------>\n\n<div class=\"htitle\">\nSpecification-based Hardware Verification\n</div>\n\n<p>\nMisunderanding the specification is a significant source of design errors. Detection of these errors requires that tests be generated directly from the specification, in order to identify differences between the specification and the implementation. Transaction Level Models (TLMs) are used to abstractly describe system behavior as a set of functions which encapsulate details of function and communication. TLMs are the most abstract formal description of the specification which we use to generate specification-based test sequences.\n</p>\n\n<p class=\"imagep\">\n<img src=\"./images/spec.jpg\" />\n</p>\n\n<p>\nTransactions describe sequences of input events which trigger a behavior in the correct system. The behavior of a design with a specification-based error would match that of a mutated transaction. We generate tests by mutating existing transactions to create tests which will differentiate teh behavior of correct and erroneous designs.\n</p>\n\n<br>\n\n</div> <!-- close main div -->\n\n</div> <!--  close bgwrapper -->\n\n<hr class=\"bottombar\" />\n\n</body>\n</html>\n", "id": 7981.0}