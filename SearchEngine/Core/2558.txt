{"text": "Last Published 2 14 7 14Version 8 6 Documentation Home Documentation Installing and Managing AsterixDB using Managix AsterixDB 1 1 An ADM and AQL Primer AsterixDB Javascript SDK Asterix Data Model ADM Asterix Query Language AQL AQL Functions AQL Allen s Relations Functions AQL Support of Similarity Queries Accessing External Data REST API to AsterixDB Introduction Table of Contents Prerequisites for Installing AsterixDBSection 1 Single Machine AsterixDB installationSection 2 Single Machine AsterixDB installation Advanced Section 3 Installing AsterixDB on a Cluster of Multiple MachinesSection 4 Managing the Lifecycle of an AsterixDB InstanceSection 5 Frequently Asked Questions This is a quickstart guide for getting AsterixDB running in a distributed environment This guide also introduces the AsterixDB installer nicknamed Managix and describes how it can be used to create and manage an AsterixDB instance By following the simple steps described in this guide you will get a running instance of AsterixDB You shall be able to use AsterixDB from its Web interface and manage its lifecycle using Managix This document assumes that you are running some version of Linux or MacOS X Prerequisites for Installing AsterixDB Back to TOC Prerequisite JDK7 Otherwise known as JDK 1 7 To know the version of Java installed on your system execute the following java version If you have version as 1 7 x similar to the output shown below you are good to proceed java version 1 7 13 Java TM SE Runtime Environment build 1 7 13 b2 Java HotSpot TM 64 Bit Server VM build 23 7 b 1 mixed mode If you need to upgrade or install java please follow the instructions below For Linux JDK 7 Linux Install JDK would be installed at a path under usr lib jvm jdk version For Mac JDK 7 Mac Install JDK would be installed at Library Java JavaVirtualMachines jdk version Contents Home The java installation directory is referred as JAVA HOME Since we upgraded installed Java we need to ensure JAVA HOME points to the installation directory of JDK 7 Modify your bash profile or bashrc and define JAVA HOME accordingly After the modification execute the following java version If the version information you obtain does not show 1 7 you need to update the PATH variable To do so execute the following echo PATH JAVA HOME bin PATH bash profile or bashrc source bash profile or bashrc Section 1 Single Machine AsterixDB installation Back to TOC We assume a user called Joe with a home directory as home joe On a Mac the home directory for user Joe would be Users joe Configuring Environment Ensure that JAVA HOME variable is defined and points to the the java installation directory on your machine To verify execute the following echo JAVA HOME If you do not see any output JAVA HOME is not defined We need to add the following line to your profile located at home joe bash profile or home joe bashrc whichever you are using If you do not have any of these files create a bash profile file export JAVA HOME Path to Java installation directory After you have edited bash profile or bashrc execute the following to make the changes effective in current shell source home joe bash profile or home joe bashrc Before proceeding verify that JAVA HOME is defined by executing the following echo JAVA HOME Configuring SSH If SSH is not enabled on your system please follow the instruction below to enable install it or else skip to the section Configuring Password less SSH Enabling SSH on Mac The Apple Mac OS X operating system has SSH installed by default but the SSH daemon is not enabled This means you can t login remotely or do remote copies until you enable it To enable it go to System Preferences Under Internet Networking there is a Sharing icon Run that In the list that appears check the Remote Login option Also check the All users radio button for Allow access for This starts the SSH daemon immediately and you can remotely login using your username The Sharing window shows at the bottom the name and IP address to use You can also find this out using whoami and ifconfig from the Terminal application Enabling SSH on Linux sudo apt get install openssh server Assumming that you have enabled SSH on your system let us proceed Configuring Password less SSH For our single machine setup of AsterixDB we need to configure password less SSH access to localhost We assume that you are on the machine where you want to install AsterixDB To verify if you already have password less SSH configured execute the following ssh 127 1 If you get an output similar to one shown below type yes and press enter The authenticity of host 127 1 127 1 can t be established RSA key fingerprint is aa 7b 51 9 74 39 c4 f6 28 a2 9d 47 c2 8d 33 31 Are you sure you want to continue connecting yes no If you are not prompted for a password that is if you get an output similar to one shown below it signifies that you already have password less SSH configured ssh 127 1 Last login Sat Mar 23 22 52 49 2 13 Important Password less SSH requires the use of a public private key pair The key pair is located as a pair of files under HOME ssh directory It is required that the public private key pair files have default names id rsa pub id rsa respectively If you are using different names please rename the files to use the default names Skip to the next section Configuring Managix You are here because you were prompted for a password You need to configure password less SSH We shall generate a public private key pair as id rsa pub and id rsa respectively If HOME ssh already contains a public private key pair please ensure the files are renamed before proceeding Follow the instructions below ssh keygen t rsa P Generating public private rsa key pair Enter file in which to save the key home joe ssh id rsa Important Please ensure that we use the default value so simply press enter If a key already exists you should get an output similar to what is shown below Press y to overwrite the existing key It is required to use the default name If you wish to not overwrite a pre existing key ensure that the pre existing key is saved with a different name home joe ssh id rsa already exists Overwrite y n You should see an output similar to one shown below The key fingerprint is 4d b 3 14 45 cc 99 86 15 48 17 b 39 a 5 ca joe joe machine The key s randomart image is RSA 2 48 o B O o E oo o S Note for Linux users you may not get an image representation of the key but this is not an error Next execute the following cat HOME ssh id rsa pub HOME ssh authorized keys chmod 7 HOME ssh authorized keys We shall now retry SSH without password ssh 127 1 You may see an output similar to one shown below The authenticity of host 127 1 127 1 can t be established RSA key fingerprint is aa 7b 51 9 74 39 c4 f6 28 a2 9d 47 c2 8d 33 31 Are you sure you want to continue connecting yes no Type yes and press the enter key You should see an output similar to one shown below Warning Permanently added 127 1 RSA to the list of known hosts Last login Thu Mar 28 12 27 1 2 13 You should now be able to log in without being prompted for a password or a response ssh 127 1 Last login Sat Mar 23 22 54 4 2 13 Execute exit to close the session exit logout Connection to 127 1 closed Configuring Managix You will need the AsterixDB installer a k a Managix Download Managix from here this includes the bits for Managix as well as AsterixDB Unzip the Managix zip bundle to an appropriate location You may create a sub directory called asterix mgmt short for asterix management under your home directory We shall refer to this location as MANAGIX HOME cd home joe mkdir asterix mgmt home joe cd asterix mgmt home joe asterix mgmt unzip path to the Managix zip bundle home joe asterix mgmt export MANAGIX HOME pwd home joe asterix mgmt export PATH PATH MANAGIX HOME bin It is recommended that you add MANAGIX HOME bin to your PATH variable in your bash profile This step can be done by executing the following currentDir pwd echo export MANAGIX HOME currentDir bash profile echo export PATH PATH MANAGIX HOME bin bash profile Above use bashrc instead of bash profile if you are using bashrc To be able to create an AsterixDB instance and manage its lifecycle the Managix requires you to configure a set of configuration files namely conf managix conf xml A configuration XML file that contains configuration settings for Managix A configuration XML file that describes the nodes in the cluster e g MANAGIX HOME clusters local local xml Since we intend to run AsterixDB on a single node Managix can auto configure itself and populate the above configuration files To auto configure Managix execute the following in the MANAGIX HOME directory home joe asterix mgmt managix configure Let us do a sample run to validate the set of configuration files auto generated by Managix home joe asterix mgmt managix validate INFO Environment OK INFO Managix Configuration OK home joe asterix mgmt managix validate c MANAGIX HOME clusters local local xml INFO Environment OK INFO Cluster configuration OK Creating an AsterixDB instance Now that we have configured Managix we shall next create an AsterixDB instance An AsterixDB instance is identified by a unique name and is created using the create command The usage description for the create command can be obtained by executing the following managix help cmd create Creates an AsterixDB instance with a specified name Post creation the instance is in ACTIVE state indicating its availability for executing statements queries Usage arguments options n Name of the AsterixDB instance c Path to the cluster configuration file We shall now use the create command to create an AsterixDB instance by the name my asterix In doing so we shall use the cluster configuration file that was auto generated by Managix managix create n my asterix c MANAGIX HOME clusters local local xml A sample output of the above command is shown below INFO Name my asterix Created Thu Mar 7 11 14 13 PST 2 13 Web Url http 127 1 19 1 State ACTIVE The third line above shows the web url http 127 1 19 1 for an AsterixDB s web interface The AsterixDB instance is in the ACTIVE state indicating that you may access the web interface by navigating to the web url Type in the following Hello World query in the box let message Hello World return message Press the Run button If the query result shows on the output box then Congratulations You have successfully created an AsterixDB instance Section 2 Single Machine AsterixDB installation Advanced Back to TOC We assume that you have successfully completed the single machine AsterixDB installation by following the instructions above in section AsterixDB installation In this section we shall cover advanced topics related to AsterixDB configuration Before we proceed it is imperative to go through some preliminary concepts related to AsterixDB runtime AsterixDB Runtime An AsterixDB runtime comprises of a master node and a set of worker nodes each identified by a unique id The master node runs a Cluster Controller service a k a CC while each worker node runs a Node Controller service a k a NC Please note that a node in an AsterixDB cluster is a logical concept in the sense that multiple nodes may map to a single physical machine which is the case for a single machine AsterixDB installation This association or mapping between an AsterixDB node and a physical machine is captured in a cluster configuration XML file In addition the XML file contains properties and parameters associated with each node AsterixDB Runtime Configuration As observed earlier Managix can auto configure itself for a single machine setup As part of auto configuration Managix generated the cluster XML file Let us understand the components of the generated cluster XML file If you have configured Managix via the configure command you can find a similar cluster XML file as MANAGIX HOME clusters local local xml The following is a sample XML file generated on a Ubuntu Linux setup xml version 1 encoding UTF 8 standalone yes cluster xmlns cluster name local name java home usr lib jvm jdk1 7 java home log dir home joe asterix mgmt clusters local working dir logs log dir txn log dir home joe asterix mgmt clusters local working dir logs txn log dir iodevices home joe asterix mgmt clusters local working dir iodevices store storage store working dir dir home joe asterix mgmt clusters local working dir dir NFS true NFS working dir master node id master id client ip 127 1 client ip cluster ip 127 1 cluster ip client port 1 98 client port cluster port 1 99 cluster port http port 8888 http port master node node id node1 id cluster ip 127 1 cluster ip node cluster We shall next explain the components of the cluster configuration XML file 1 Defining nodes in AsterixDB runtime The single machine AsterixDB instance configuration that is auto generated by Managix using the configure command involves a master node CC and a worker node NC Each node is assigned a unique id and provided with an ip address called cluster ip that maps a node to a physical machine The following snippet from the above XML file captures the master worker nodes in our AsterixDB installation master node id master id client ip 127 1 client ip cluster ip 127 1 cluster ip client port 1 98 client port cluster port 1 99 cluster port http port 8888 http port master node node id node1 id cluster ip 127 1 cluster ip node The following is a description of the different elements in the cluster configuration xml file PropertyDescriptionidA unique id for a node cluster ipIP address of the machine to which a node maps to This address is used for all internal communication between the nodes client ipProvided for the master node This IP should be reachable from clients that want to connect with AsterixDB via its web interface client portProvided for the master node This is the port at which the Cluster Controller CC service listens for connections from clients cluster portProvided for the master node This is the port used by the Cluster Controller CC service to listen for connections from Node Controllers NCs http portProvided for the master node This is the http port used by the Cluster Controller CC service 2 Properties associated with a worker node NC in AsterixDB The following is a list of properties associated with each worker node in an AsterixDB configuration PropertyDescriptionjava homeJava installation directory at each node log dirA directory where the worker node JVM may write logs txn log dirA directory where the worker node writes transaction logs iodevicesComma separated list of IO Device mount points storeA data directory under each iodevice that AsterixDB uses to store data belonging to dataset s All the above properties can be defined at the global level or a local level In the former case these properties apply to all the nodes in an AsterixDB configuration In the latter case these properties apply only to the node s under which they are defined A property defined at the local level overrides the definition at the global level 3 Working directory of an AsterixDB instance Next we explain the following setting in the file MANAGIX HOME clusters local local xml working dir dir Users joe asterix mgmt clusters local working dir dir NFS true NFS working dir Managix associates a working directory with an AsterixDB instance and uses this directory for transferring binaries to each node If there is a directory that is readable by each node Managix can use it to place binaries that can be accessed and used by all the nodes in the AsterixDB set up A network file system NFS provides such a functionality for a cluster of physical machines so that a path on NFS is accessible from each machine in the cluster In the single machine set up described above all nodes correspond to a single physical machine Each path on the local file system is accessible to all the nodes in the AsterixDB setup and the boolean value for NFS above is thus set to true Managix Configuration Managix allows creation and management of multiple AsterixDB instances and uses Zookeeper as its back end database to keep track of information related to each instance We need to provide a set of one or more hosts that Managix can use to run a Zookeeper instance Zookeeper runs as a daemon process on each of the specified hosts At each host Zookeeper stores data under the Zookeeper home directory specified as part of the configuration The following is an example configuration MANAGIX HOME conf managix conf xml that has Zookeeper running on the localhost 127 1 xml version 1 encoding UTF 8 standalone yes configuration xmlns installer zookeeper homeDir home joe asterix installer zookeeper homeDir clientPort 29 clientPort servers server 127 1 server servers zookeeper configuration It is possible to have a single host for Zookeeper A larger number of hosts would use Zookeeper s replication and fault tolerance feature such that a failure of a host running Zookeeper would not result in loss of information about existing AsterixDB instances Section 3 Installing AsterixDB on a Cluster of Multiple Machines Back to TOC We assume that you have read the two sections above on single machine AsterixDB setup Next we explain how to install AsterixDB in a cluster of multiple machines As an example we assume we want to setup AsterixDB on a cluster of three machines in which we use one machine called machine A as the master node and two other machines called machine B and machine C as the worker nodes as shown in the following diagram Notice that each machine has a cluster ip address which is used by these machines for their intra cluster communication Meanwhile the master machine also has a client ip address using which an end user outside the cluster can communicate with this machine The reason we differentiate between these two types of IP addresses is that we can have a cluster of machines using a private network In this case they have internal ip addresses that cannot be used outside the network In the case all the machines are on a public network the client ip and cluster ip of the master machine can share the same address Next we describe how to set up AsterixDB in this cluster assuming no Managix has been installed on these machines Step 1 Define the AsterixDB cluster We first log into the master machine as the user joe On this machine download Managix from here save as above then do the following steps similar to the single machine case described above machineA cd machineA mkdir asterix mgmt machineA cd asterix mgmt machineA unzip path to the Managix zip bundle machineA export MANAGIX HOME pwd machineA export PATH PATH MANAGIX HOME bin Note that it is recommended that MANAGIX HOME is not located on a network file system NFS Managix creates artifacts logs that are not required to be shared Any overhead associated with creating artifacts logs on the NFS should be avoided We also need an AsterixDB configuration XML file for the cluster We give the name to the cluster say rainbow We create a folder for the configuration of this cluster machineA mkdir MANAGIX HOME rainbow cluster For this cluster we create a configuration file MANAGIX HOME rainbow cluster rainbow xml The following is a sample file with explanation of the properties cluster xmlns cluster Name of the cluster name rainbow name username which should be valid for all the three machines username joe username The working directory of Managix It is recommended for the working directory to be on a network file system NFS that can accessed by all machines Managix creates the directory if it it doesn t exist working dir dir home joe managix workingDir dir NFS true NFS working dir Directory for Asterix to store log information for each machine Needs to be on the local file system of each machine Managix creates the directory if it doesn t exist This property can be overriden for a node by redefining at the node level logdir mnt joe logs logdir Mount point of an iodevice Use a comma separated list for a machine that has multiple iodevices disks This property can be overriden for a node by redefining at the node level iodevices mnt joe iodevices Path on each iodevice where Asterix will store its data store storage store Java home for each machine java home usr lib jvm jdk1 7 java home IP addresses of the master machine A master node id master id client ip 128 195 52 177 client ip cluster ip 192 168 1 cluster ip client port 1 98 client port cluster port 1 99 cluster port http port 8888 http port master node IP address es of machine B node id nodeB id cluster ip 192 168 1 1 cluster ip node IP address es of machine C node id nodeC id cluster ip 192 168 1 2 cluster ip node cluster As stated before each of the above properties can be defined at the cluster level in which case it applies to all the nodes in the system Each property can also be defined at a node level Once we have formed the cluster XML file we can validate the configuration by doing the following managix validate c MANAGIX HOME rainbow cluster rainbow xml If the return message says OK it means that the XML configuration file is set properly Step 2 Configure SSH The next steps of setting up SSH are similar to those in the single machine setup case We assume we have a common user account called joe on each machine in the cluster On the master machine do the following machineA ssh 127 1 If you get an output similar to one shown below type yes and press enter The authenticity of host 127 1 127 1 can t be established RSA key fingerprint is aa 7b 51 9 74 39 c4 f6 28 a2 9d 47 c2 8d 33 31 Are you sure you want to continue connecting yes no If you are not prompted for a password that is if you get an output similar to one shown below it signifies that you already have password less SSH configured ssh 127 1 Last login Sat Mar 23 22 52 49 2 13 Important Password less SSH requires the use of a public private key pair The key pair is located as a pair of files under HOME ssh directory It is required that the public private key pair files have default names id rsa pub id rsa respectively If you are using different names please rename the files to use the default names If you are prompted for a password execute the following machineA ssh keygen t rsa P machineA cat HOME ssh id rsa pub HOME ssh authorized keys machineA chmod 7 HOME ssh authorized keys If HOME is not on the NFS copy the id rsa pub to the directory ssh login with the same account on each machine and then do the following on each machine Notice that this step is not needed if the folder ssh is on the NFS and can be accessed by all the nodes cd ssh cat id rsa pub authorized keys chmod 7 HOME ssh authorized keys Then run the following step again and type yes if prompted machineA ssh 127 1 Step 3 Configuring Managix Managix uses a configuration XML file at MANAGIX HOME conf managix conf xml to configure its own properties such as its Zookeeper service We can use the configure command to auto generate this configuration file machineA managix configure We use the validate command to validate the Managix configuration To do so execute the following machineA managix validate INFO Environment OK INFO Managix Configuration OK Note that the configure command also generates a cluster configuration XML file at MANAGIX HOME conf clusters local xml This file is not needed in the case of a cluster of machines Step 4 Creating an AsterixDB instance Now that we have configured Managix we shall next create an AsterixDB instance which is identified by a unique name and is created using the create command The usage description for the create command can be obtained by executing the following machineA managix help cmd create Creates an AsterixDB instance with a specified name Post creation the instance is in ACTIVE state indicating its availability for executing statements queries Usage arguments options n Name of the AsterixDB instance c Path to the cluster configuration file We shall now use the create command to create an AsterixDB instance called rainbow asterix In doing so we shall use the cluster configuration file that was auto generated by Managix machineA managix create n rainbow asterix c MANAGIX HOME clusters rainbow xml If the response message does not have warning then Congratulations You have successfully installed AsterixDB on this cluster of machines Please refer to the section Managing the Lifecycle of an AsterixDB Instance for a detailed description on the set of available commands operations that let you manage the lifecycle of an AsterixDB instance Note that the output of the commands varies with the cluster definition and may not apply to the cluster specification you built above Section 4 Managing the Lifecycle of an AsterixDB Instance Back to TOC Now that we have an AsterixDB instance running let us use Managix to manage the instance s lifecycle Managix provides the following set of commands operations Managix Commands CommandDescriptioncreateCreates a new asterix instance describeDescribes an existing asterix instance stopStops an asterix instance that is in the ACTIVE state startStarts an AsterixDB instance backupCreates a backup for an existing AsterixDB instance restoreRestores an AsterixDB instance deleteDeletes an AsterixDB instance validateValidates the installer cluster configuration configureAuto generates a configuration for an AsterixDB instance logProduces a zip archive containing log files from each node in an AsterixDB instance shutdownShuts down the installer service You may obtain the above listing by simply executing managix managix We already talked about create and validate commands We shall next explain the rest of the commands listed above We also provide sample output messages of these commands assuming we are running an AsterixDB instance on a single machine Describe Command The describe command provides information about an AsterixDB instance The usage can be looked up by executing the following managix help cmd describe Provides information about an AsterixDB instance The following options are available n Name of the AsterixDB instance admin Provides a detailed description The brackets indicate optional flags The output of the describe command when used without the admin flag contains minimal information and is similar to the output of the create command Let us try running the describe command in admin mode managix describe n my asterix admin INFO Name my asterix Created Thu Mar 7 19 7 PST 2 13 Web Url http 127 1 19 1 State ACTIVE Master node master 127 1 node1 127 1 Asterix version 5 Asterix Configuration output dir tmp asterix output Metadata Node node1 Processes NC at 127 1 22195 CC at 127 1 22161 Asterix Configuration nc java opts Xmx1 24m cc java opts Xmx1 24m storage buffercache pagesize 32768 storage buffercache size 33554432 storage buffercache maxopenfiles 214748364 storage memorycomponent pagesize 32768 storage memorycomponent numpages 1 24 storage memorycomponent globalbudget 53687 192 storage lsm mergethreshold 3 storage lsm bloomfilter falsepositiverate 1 txn log buffer numpages 8 txn log buffer pagesize 131 72 txn log partitionsize 2147483648 txn log disksectorsize 4 96 txn log groupcommitinterval 1 txn log checkpoint lsnthreshold 671 8864 txn log checkpoint pollfrequency 12 txn log checkpoint history txn lock escalationthreshold 1 txn lock shrinktimer 5 txn lock timeout waitthreshold 6 txn lock timeout sweepthreshold 1 compiler sortmemory 33554432 compiler joinmemory 33554432 compiler framesize 32768 web port 19 1 api port 19 2 log level INFO As seen above the instance my asterix is configured such that all processes running at the localhost 127 1 The process id for each process JVM is shown next to it Stop Command The stop command can be used for shutting down an AsterixDB instance After that the instance is unavailable for executing queries The usage can be looked up by executing the following managix help cmd stop Shuts an AsterixDB instance that is in ACTIVE state After executing the stop command the AsterixDB instance transits to the INACTIVE state indicating that it is no longer available for executing queries Available arguments options n name of the AsterixDB instance To stop the AsterixDB instance managix stop n my asterix INFO Stopped AsterixDB instance my asterix managix describe n my asterix INFO Name my asterix Created Thu Mar 7 19 7 PST 2 13 Web Url http 127 1 19 1 State INACTIVE Fri Mar 8 9 49 PST 2 13 Start Command The start command starts an AsterixDB instance that is in the INACTIVE state The usage can be looked up by executing the following managix help cmd start Starts an AsterixDB instance that is in INACTIVE state After executing the start command the AsterixDB instance transits to the ACTIVE state indicating that it is now available for executing statements queries Available arguments options n name of the AsterixDB instance Let us now start the AsterixDB instance managix start n my asterix INFO Name my asterix Created Thu Mar 7 19 7 PST 2 13 Web Url http 127 1 19 1 State ACTIVE Fri Mar 8 9 49 PST 2 13 Backup Command The backup command allows you to take a backup of the data stored with an AsterixDB instance The backup can be taken on the local file system or on an HDFS instance In either case the snapshots are stored under a backup directory You need to make sure the backup directory has appropriate read write permissions Configuring settings for backup can be found inside the Managix s configuration file located at MANAGIX HOME conf managix conf xml Configuring backup on the local file system We need to provide a path to a backup directory on the local file system The backup directory can be configured be editing the Managix configuration XML found at MANAGIX HOME conf managix conf xml backup backupDir Provide path to the backup directory here backupDir backup Prior to taking a backup of an AsterixDB instance it is required for the instance to be in the INACTIVE state We do so by using the stop command as shown below managix stop n my asterix INFO Stopped AsterixDB instance my asterix We can now take the backup by executing the following managix backup n my asterix INFO my asterix backed up Fri Mar 8 16 16 34 PST 2 13 LOCAL Configuring backup on an HDFS instance To configure a backup to be taken on an HDFS instance we need to provide required information about the running HDFS instance This information includes the HDFS version and the HDFS url Simply edit the Managix configuration file and provide the required information backup backupDir Provide path to the backup directory here backupDir hdfs version 2 2 version url url hdfs backup A sample output when a backup is taken on an HDFS is shown below managix backup n my asterix INFO my asterix backed up 1 Fri Mar 8 17 1 38 PST 2 13 HDFS Each time we take a backup we are provided with a unique id a monotonically increasing value starting with This id is required when we need to restore from a previously taken backup Information about all available backup snapshots can be obtained by using the describe command in the admin mode as shown below managix describe n my asterix admin INFO Name my asterix Created Fri Mar 8 15 11 12 PST 2 13 Web Url http 127 1 19 1 State INACTIVE Fri Mar 8 16 14 2 PST 2 13 Master node master 127 1 node1 127 1 Backup created at Fri Mar 8 16 16 34 PST 2 13 LOCAL Backup 1 created at Fri Mar 8 17 1 38 PST 2 13 HDFS Asterix version 5 Asterix Configuration Metadata Node node1 Processes The above output shows the available backup identified by it s id We shall next describe the method for restoring an AsterixDB instance from a backup snapshot Restore Command The restore command allows you to restore an AsterixDB instance s data from a previously taken backup The usage description can be obtained as follows managix help cmd restore Restores an AsterixDB instance s data from a previously taken backup Available arguments options n name of the AsterixDB instance b id of the backup snapshot The following command restores our AsterixDB instance from the backup snapshot identified by the id Prior to restoring an instance from a backup it is required that the instance is in the INACTIVE state managix restore n my asterix b INFO AsterixDB instance my asterix has been restored from backup You can start the AsterixDB instance by using the start command Log Command The log command allows you to collect the log files coresponding to each node of an AsterixDB instance into a zip archive The zip archive is produced on the local file system of the machine running managix managix help cmd log Creates a zip archive containing log files corresponding to each worker node NC and the master CC for an AsterixDB instance Available arguments options n name of the AsterixDB instance d destination directory for producing the zip archive Defaults to MANAGIX HOME logdump The following is an example showing the use of the log command managix log n my asterix d Users joe logdump INFO Log zip archive created at Users joe logdump log Thu Jun 6 53 51 PDT 2 13 zip Delete Command As the name suggests the delete command permanently removes an AsterixDB instance by cleaning up all associated data artifacts The usage can be looked up by executing the following managix help cmd delete Permanently deletes an AsterixDB instance The instance must be in the INACTIVE state Available arguments options n name of the AsterixDB instance managix delete n my asterix INFO AsterixDB instance my asterix deleted Shutdown Command Managix uses Zookeeper service for storing all information about created AsterixDB instances The Zookeeper service runs in the background and can be shut down using the shutdown command managix shutdown Help Command The help command provides a usage description of a Managix command managix help cmd command name As an example for looking up the help for the configure command execute the following managix help cmd configure Auto generates the AsterixDB installer configruation settings and AsterixDB cluster configuration settings for a single node setup Section 5 Frequently Asked Questions Back to TOC Question What happens if a machine acting as a node in the Asterix cluster becomes unreachable for some reason network partition machine failure Answer When a node leaves the Asterix cluster the AsterixDB instance transits to an UNUSABLE state indicating that it is no longer available for serving queries To know which set of node s left the cluster run the describe command with admin flag MANAGIX HOME bin managix describe n name of the AsterixDB instance admin Above command will show the state of AsterixDB instance and list the set of nodes that have left the cluster The failed node must be brought back to re join the cluster Once done you may bring back the instance to an ACTIVE state by executing the following sequence 1 Get rid of the Asterix processes running on the nodes in the cluster MANAGIX HOME bin managix stop n my asterix The processes associated with the instance are terminated and the instance moves to the INACTIVE state 2 Start the AsterixDB instance using the start command MANAGIX HOME bin managix start n name of your AsterixDB instance Question Do I need to create all the directories paths I put into the cluster configuration XML Answer Managix will create a path if it is not existing It does so using the user account mentioned in the cluster configuration xml Please ensure that the user account has appropriate permissions for creating the missing paths Question Should MANAGIX HOME be on the network file system NFS Answer It is recommended that MANAGIX HOME is not on the NFS Managix produces artifacts logs on disk which are not required to be shared As such an overhead in creating the artifacts logs on the NFS should be avoided Question How do we change the underlying code apply a code patch for an active asterix instance Answer At times end user particularly asterix developer may run into the need to altering the underlying code that is being run by an asterix instance In the current version of managix this can be achieved as follows Assume that you have an active instance by the name a1 that is running version v1 of asterix You have a revised version of asterix v2 that fixes some bug s To upgrade asterix from v1 to v2 step 1 managix stop n a1 step 2 managix shutdown step 3 copy asterix server zip version v2 to MANAGIX HOME asterix step 4 managix start n a1 a1 now is running on version v2 Limitations a Obviously this wont work in a situation where v2 has made a change that is incompatible with earlier version such altering schema b A change in asterix zip applies to all existing instances after a restart and subsequent instances that user creates Copyright 2 14 All Rights Reserved ", "_id": "http://asterixdb.ics.uci.edu/documentation/install.html", "title": "asterixdb - ", "html": "<!DOCTYPE html>\n<!--\n | Generated by Apache Maven Doxia at 2014-07-14\n | Rendered using Apache Maven Fluido Skin 1.3.0\n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"Date-Revision-yyyymmdd\" content=\"20140714\" />\n    <meta http-equiv=\"Content-Language\" content=\"en\" />\n    <title>AsterixDB - </title>\n    <link rel=\"stylesheet\" href=\"./css/apache-maven-fluido-1.3.0.min.css\" />\n    <link rel=\"stylesheet\" href=\"./css/site.css\" />\n    <link rel=\"stylesheet\" href=\"./css/print.css\" media=\"print\" />\n\n      \n    <script type=\"text/javascript\" src=\"./js/apache-maven-fluido-1.3.0.min.js\"></script>\n\n                          \n        \n<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n        ga('create', 'UA-41536543-1', 'uci.edu');\n        ga('send', 'pageview');</script>\n          \n            </head>\n        <body class=\"topBarDisabled\">\n          \n                \n                    \n    \n        <div class=\"container-fluid\">\n          <div id=\"banner\">\n        <div class=\"pull-left\">\n                                    <a href=\"http://asterixdb.ics.uci.edu/\" id=\"bannerLeft\">\n                                                                                                <img src=\"images/asterixlogo.png\"  alt=\"AsterixDB\"/>\n                </a>\n                      </div>\n        <div class=\"pull-right\">  </div>\n        <div class=\"clear\"><hr/></div>\n      </div>\n\n      <div id=\"breadcrumbs\">\n        <ul class=\"breadcrumb\">\n                \n                    \n                  <li id=\"publishDate\">Last Published: 2014-07-14</li>\n                      \n                \n                    \n                 <li id=\"projectVersion\" class=\"pull-right\">Version: 0.8.6</li>\n      \n                                            <li class=\"divider pull-right\">|</li>\n                        \n    <li class=\"pull-right\">              <a href=\"index.html\" title=\"Documentation Home\">\n        Documentation Home</a>\n  </li>\n\n                        </ul>\n      </div>\n\n            \n      <div class=\"row-fluid\">\n        <div id=\"leftColumn\" class=\"span3\">\n          <div class=\"well sidebar-nav\">\n                \n                    \n                <ul class=\"nav nav-list\">\n                    <li class=\"nav-header\">Documentation</li>\n                                \n      <li class=\"active\">\n    \n            <a href=\"#\"><i class=\"none\"></i>Installing and Managing AsterixDB using Managix</a>\n          </li>\n                  \n      <li>\n    \n                          <a href=\"aql/primer.html\" title=\"AsterixDB 101: An ADM and AQL Primer\">\n          <i class=\"none\"></i>\n        AsterixDB 101: An ADM and AQL Primer</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/js-sdk.html\" title=\"AsterixDB Javascript SDK\">\n          <i class=\"none\"></i>\n        AsterixDB Javascript SDK</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/datamodel.html\" title=\"Asterix Data Model (ADM)\">\n          <i class=\"none\"></i>\n        Asterix Data Model (ADM)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/manual.html\" title=\"Asterix Query Language (AQL)\">\n          <i class=\"none\"></i>\n        Asterix Query Language (AQL)</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/functions.html\" title=\"AQL Functions\">\n          <i class=\"none\"></i>\n        AQL Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/allens.html\" title=\"AQL Allen's Relations Functions\">\n          <i class=\"none\"></i>\n        AQL Allen's Relations Functions</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/similarity.html\" title=\"AQL Support of Similarity Queries\">\n          <i class=\"none\"></i>\n        AQL Support of Similarity Queries</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"aql/externaldata.html\" title=\"Accessing External Data\">\n          <i class=\"none\"></i>\n        Accessing External Data</a>\n            </li>\n                  \n      <li>\n    \n                          <a href=\"api.html\" title=\"REST API to AsterixDB\">\n          <i class=\"none\"></i>\n        REST API to AsterixDB</a>\n            </li>\n            </ul>\n                \n                    \n                \n          <hr class=\"divider\" />\n\n           <div id=\"poweredBy\">\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                            <div class=\"clear\"></div>\n                                                                                                                         <a href=\"https://code.google.com/p/hyracks/\" title=\"Hyracks\" class=\"builtBy\">\n        <img class=\"builtBy\"  alt=\"Hyracks\" src=\"images/hyrax_ts.png\"    />\n      </a>\n                      </div>\n          </div>\n        </div>\n        \n                \n        <div id=\"bodyColumn\"  class=\"span9\" >\n                                  \n            <h1>Introduction</h1>\n<div class=\"section\">\n<h2><a name=\"toc\" id=\"toc\">Table of Contents</a><a name=\"Table_of_Contents\"></a></h2>\n\n<ul>\n  \n<li><a href=\"#PrerequisitesForInstallingAsterixDB\">Prerequisites for Installing AsterixDB</a></li>\n  \n<li><a href=\"#Section1SingleMachineAsterixDBInstallation\">Section 1: Single-Machine AsterixDB installation</a></li>\n  \n<li><a href=\"#Section2SingleMachineAsterixDBInstallationAdvanced\">Section 2: Single-Machine AsterixDB installation (Advanced)</a></li>\n  \n<li><a href=\"#Section3InstallingAsterixDBOnAClusterOfMultipleMachines\">Section 3: Installing AsterixDB on a Cluster of Multiple Machines</a></li>\n  \n<li><a href=\"#Section4ManagingTheLifecycleOfAnAsterixDBInstance\">Section 4: Managing the Lifecycle of an AsterixDB Instance</a></li>\n  \n<li><a href=\"#Section5FAQ\">Section 5: Frequently Asked Questions</a></li>\n</ul>\n<p>This is a quickstart guide for getting AsterixDB running in a distributed environment. This guide also introduces the AsterixDB installer (nicknamed <i><i>Managix</i></i>) and describes how it can be used to create and manage an AsterixDB instance. By following the simple steps described in this guide, you will get a running instance of AsterixDB. You shall be able to use AsterixDB from its Web interface and manage its lifecycle using Managix. This document assumes that you are running some version of <i><i>Linux</i></i> or <i><i>MacOS X</i></i>.</p></div>\n<div class=\"section\">\n<h2><a name=\"PrerequisitesForInstallingAsterixDB\" id=\"PrerequisitesForInstallingAsterixDB\">Prerequisites for Installing AsterixDB</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Prerequisites_for_Installing_AsterixDB_Back_to_TOC\"></a></h2>\n<p>Prerequisite:</p>\n\n<ul>\n  \n<li><a class=\"externalLink\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK7</a> (Otherwise known as JDK 1.7).</li>\n</ul>\n<p>To know the version of Java installed on your system, execute the following:</p>\n\n<div class=\"source\">\n<pre>    $ java -version\n</pre></div>\n<p>If you have version as 1.7.0_x, similar to the output shown below, you are good to proceed.</p>\n\n<div class=\"source\">\n<pre>    java version &quot;1.7.0_13&quot;\n    Java(TM) SE Runtime Environment (build 1.7.0_13-b20)\n    Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)\n</pre></div>\n<p>If you need to upgrade or install java, please follow the instructions below.</p>\n\n<ul>\n  \n<li>\n<p>For Linux: <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/7/docs/webnotes/install/linux/linux-jdk.html\">JDK 7 Linux Install</a> JDK would be installed at a path under /usr/lib/jvm/jdk-version .</p></li>\n  \n<li>\n<p>For Mac: <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html\">JDK 7 Mac Install</a> JDK would be installed at /Library/Java/JavaVirtualMachines/jdk-version/Contents/Home .</p></li>\n</ul>\n<p>The java installation directory is referred as JAVA_HOME. Since we upgraded/installed Java, we need to ensure JAVA_HOME points to the installation directory of JDK 7. Modify your ~/.bash_profile (or ~/.bashrc) and define JAVA_HOME accordingly. After the modification, execute the following:</p>\n\n<div class=\"source\">\n<pre>    $ java -version\n</pre></div>\n<p>If the version information you obtain does not show 1.7, you need to update the PATH variable. To do so, execute the following:</p>\n\n<div class=\"source\">\n<pre>    $ echo &quot;PATH=$JAVA_HOME/bin:$PATH&quot; &gt;&gt; ~/.bash_profile (or ~/.bashrc)\n    $ source ~/.bash_profile (or ~/.bashrc)\n</pre></div></div>\n<div class=\"section\">\n<h2><a name=\"Section1SingleMachineAsterixDBInstallation\" id=\"Section1SingleMachineAsterixDBInstallation\">Section 1: Single-Machine AsterixDB installation</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Section_1:_Single-Machine_AsterixDB_installation_Back_to_TOC\"></a></h2>\n<p>We assume a user called &#x201c;Joe&#x201d; with a home directory as /home/joe. On a Mac, the home directory for user Joe would be /Users/joe.</p>\n<div class=\"section\">\n<h3>Configuring Environment<a name=\"Configuring_Environment\"></a></h3>\n<p>Ensure that JAVA_HOME variable is defined and points to the the java installation directory on your machine. To verify, execute the following:</p>\n\n<div class=\"source\">\n<pre>    $ echo $JAVA_HOME\n</pre></div>\n<p>If you do not see any output, JAVA_HOME is not defined. We need to add the following line to your profile located at /home/joe/.bash_profile or /home/joe/.bashrc, whichever you are using. If you do not have any of these files, create a ~/.bash_profile file.</p>\n\n<div class=\"source\">\n<pre>    export JAVA_HOME=&lt;Path to Java installation directory&gt;\n</pre></div>\n<p>After you have edited ~/.bash_profile (or ~/.bashrc), execute the following to make the changes effective in current shell:</p>\n\n<div class=\"source\">\n<pre>    $ source /home/joe/.bash_profile (or /home/joe/.bashrc)\n</pre></div>\n<p>Before proceeding, verify that JAVA_HOME is defined by executing the following:</p>\n\n<div class=\"source\">\n<pre>    $ echo $JAVA_HOME\n</pre></div></div>\n<div class=\"section\">\n<h3>Configuring SSH<a name=\"Configuring_SSH\"></a></h3>\n<p>If SSH is not enabled on your system, please follow the instruction below to enable/install it or else skip to the section <a href=\"#Configuring_Password-less_SSH\">Configuring Password-less SSH</a>.</p>\n<div class=\"section\">\n<h4>Enabling SSH on Mac<a name=\"Enabling_SSH_on_Mac\"></a></h4>\n<p>The Apple Mac OS X operating system has SSH installed by default but the SSH daemon is not enabled. This means you can&#x2019;t login remotely or do remote copies until you enable it. To enable it, go to &#x2018;System Preferences&#x2019;. Under &#x2018;Internet &amp; Networking&#x2019; there is a &#x2018;Sharing&#x2019; icon. Run that. In the list that appears, check the &#x2018;Remote Login&#x2019; option. Also check the &#x201c;All users&#x201d; radio button for &#x201c;Allow access for&#x201d;. This starts the SSH daemon immediately and you can remotely login using your username. The &#x2018;Sharing&#x2019; window shows at the bottom the name and IP address to use. You can also find this out using &#x2018;whoami&#x2019; and &#x2018;ifconfig&#x2019; from the Terminal application.</p></div>\n<div class=\"section\">\n<h4>Enabling SSH on Linux<a name=\"Enabling_SSH_on_Linux\"></a></h4>\n\n<div class=\"source\">\n<pre>    sudo apt-get install openssh-server\n</pre></div>\n<p>Assumming that you have enabled SSH on your system, let us proceed.</p></div>\n<div class=\"section\">\n<h4>Configuring Password-less SSH<a name=\"Configuring_Password-less_SSH\"></a></h4>\n<p>For our single-machine setup of AsterixDB, we need to configure password-less SSH access to localhost. We assume that you are on the machine where you want to install AsterixDB. To verify if you already have password-less SSH configured, execute the following:</p>\n\n<div class=\"source\">\n<pre>     $ ssh 127.0.0.1\n</pre></div>\n<p>If you get an output similar to one shown below, type &#x201c;yes&#x201d; and press enter.</p>\n\n<div class=\"source\">\n<pre>    The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.\n    RSA key fingerprint is aa:7b:51:90:74:39:c4:f6:28:a2:9d:47:c2:8d:33:31.\n    Are you sure you want to continue connecting (yes/no)?\n</pre></div>\n<p>If you are not prompted for a password, that is if you get an output similar to one shown below, it signifies that you already have password-less SSH configured. </p>\n\n<div class=\"source\">\n<pre>    $ ssh 127.0.0.1\n    Last login: Sat Mar 23 22:52:49 2013\n</pre></div>\n<p>[Important: Password-less SSH requires the use of a (public,private) key-pair. The key-pair is located as a pair of files under  $HOME/.ssh directory. It is required that the (public,private) key-pair files have default names (id_rsa.pub, id_rsa) respectively.  If you are using different names, please rename the files to use the default names]</p>\n<p>Skip to the next section <a href=\"#Configuring_Managix\">Configuring Managix</a>.</p>\n<p>You are here because you were prompted for a password. You need to configure password-less SSH.<br />We shall generate a (public,private) key-pair as id_rsa.pub and id_rsa respectively. If $HOME/.ssh already contains a (public,private) key-pair, please ensure the files are renamed before proceeding. Follow the instructions below.</p>\n\n<div class=\"source\">\n<pre>     $ ssh-keygen -t rsa -P &quot;&quot;\n    Generating public/private rsa key pair.\n    Enter file in which to save the key (/home/joe/.ssh/id_rsa):   \n    [Important: Please ensure that we use the default value, so simply press enter]\n</pre></div>\n<p>If a key already exists, you should get an output similar to what is shown below. Press &#x2018;y&#x2019; to overwrite the existing key. It is required to use the default name. If you wish to not overwrite a pre-existing key, ensure that the pre-existing key is saved with a different name.</p>\n\n<div class=\"source\">\n<pre>    /home/joe/.ssh/id_rsa already exists.\n    Overwrite (y/n)?\n</pre></div>\n<p>You should see an output similar to one shown below:</p>\n\n<div class=\"source\">\n<pre>    The key fingerprint is:\n    4d:b0:30:14:45:cc:99:86:15:48:17:0b:39:a0:05:ca joe@joe-machine\n    The key's randomart image is:\n    +--[ RSA 2048]----+\n    |  ..o+B@O=       |\n    |.. o  ==*+       |\n    |.E.    oo .      |\n    |         o       |\n    |        S .      |\n    |                 |\n    |                 |\n    |                 |\n    |                 |\n    +-----------------+\n</pre></div>\n<p>Note: for Linux users, you may not get an image representation of the key, but this is not an error. Next, execute the following:</p>\n\n<div class=\"source\">\n<pre>      $ cat $HOME/.ssh/id_rsa.pub &gt;&gt; $HOME/.ssh/authorized_keys\n      $ chmod 700  $HOME/.ssh/authorized_keys\n</pre></div>\n<p>We shall now retry SSH without password.</p>\n\n<div class=\"source\">\n<pre>    $ ssh 127.0.0.1\n</pre></div>\n<p>You may see an output similar to one shown below:</p>\n\n<div class=\"source\">\n<pre>    The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.\n    RSA key fingerprint is aa:7b:51:90:74:39:c4:f6:28:a2:9d:47:c2:8d:33:31.\n    Are you sure you want to continue connecting (yes/no)?\n</pre></div>\n<p>Type &#x2018;yes&#x2019; and press the enter key. You should see an output similar to one shown below:</p>\n\n<div class=\"source\">\n<pre>    Warning: Permanently added '127.0.0.1' (RSA) to the list of known hosts.\n    Last login: Thu Mar 28 12:27:10 2013\n</pre></div>\n<p>You should now be able to log in without being prompted for a password or a response.</p>\n\n<div class=\"source\">\n<pre>    ssh 127.0.0.1\n    Last login: Sat Mar 23 22:54:40 2013\n</pre></div>\n<p>Execute &#x2018;exit&#x2019; to close the session.</p>\n\n<div class=\"source\">\n<pre>    $ exit\n    logout\n    Connection to 127.0.0.1 closed.\n</pre></div></div></div>\n<div class=\"section\">\n<h3>Configuring Managix<a name=\"Configuring_Managix\"></a></h3>\n<p>You will need the AsterixDB installer (a.k.a. Managix). Download Managix from <a class=\"externalLink\" href=\"http://asterixdb.ics.uci.edu/download.html\">here</a>; this includes the bits for Managix as well as AsterixDB.</p>\n<p>Unzip the Managix zip bundle to an appropriate location. You may create a sub-directory called &#x201c;asterix-mgmt&#x201d; (short for asterix-management) under your home directory. We shall refer to this location as MANAGIX_HOME.</p>\n\n<div class=\"source\">\n<pre>      $ cd ~\n      /home/joe&gt; $ mkdir asterix-mgmt\n      /home/joe&gt; $ cd asterix-mgmt\n      /home/joe/asterix-mgmt&gt; $ unzip  &lt;path to the Managix zip bundle&gt;\n      /home/joe/asterix-mgmt&gt; $ export MANAGIX_HOME=`pwd`\n      /home/joe/asterix-mgmt&gt; $ export PATH=$PATH:$MANAGIX_HOME/bin\n</pre></div>\n<p>It is recommended that you add $MANAGIX_HOME/bin to your PATH variable in your bash profile . This step can be done by executing the following.</p>\n\n<div class=\"source\">\n<pre>    currentDir=`pwd`\n    echo &quot;export MANAGIX_HOME=$currentDir&quot; &gt;&gt; ~/.bash_profile\n    echo &quot;export PATH=$PATH:$MANAGIX_HOME/bin&quot; &gt;&gt; ~/.bash_profile\n</pre></div>\n<p>Above, use ~/.bashrc instead of ~/.bash_profile if you are using ~/.bashrc .</p>\n<p>To be able to create an AsterixDB instance and manage its lifecycle, the Managix requires you to configure a set of configuration files namely:</p>\n\n<ul>\n  \n<li><tt>conf/managix-conf.xml</tt>: A configuration XML file that contains configuration settings for Managix.</li>\n  \n<li>A configuration XML file that describes the nodes in the cluster, e.g., <tt>$MANAGIX_HOME/clusters/local/local.xml</tt>.</li>\n</ul>\n<p>Since we intend to run AsterixDB on a single node, Managix can auto-configure itself and populate the above configuration files. To auto-configure Managix, execute the following in the MANAGIX_HOME directory:</p>\n\n<div class=\"source\">\n<pre>     /home/joe/asterix-mgmt&gt; $ managix configure\n</pre></div>\n<p>Let us do a sample run to validate the set of configuration files auto-generated by Managix.</p>\n\n<div class=\"source\">\n<pre>    /home/joe/asterix-mgmt&gt; $ managix validate\n      INFO: Environment [OK]\n      INFO: Managix Configuration [OK]\n\n\n    /home/joe/asterix-mgmt&gt; $ managix validate -c $MANAGIX_HOME/clusters/local/local.xml\n      INFO: Environment [OK]\n      INFO: Cluster configuration [OK]\n</pre></div></div>\n<div class=\"section\">\n<h3>Creating an AsterixDB instance<a name=\"Creating_an_AsterixDB_instance\"></a></h3>\n<p>Now that we have configured Managix, we shall next create an AsterixDB instance. An AsterixDB instance is identified by a unique name and is created using the <tt>create</tt> command. The usage description for the <tt>create</tt> command can be obtained by executing the following:</p>\n\n<div class=\"source\">\n<pre>     $ managix help -cmd create\n     Creates an AsterixDB instance with a specified name. Post creation, the instance is in ACTIVE state,\n     indicating its availability for executing statements/queries.\n     Usage arguments/options:\n     -n Name of the AsterixDB instance.\n     -c Path to the cluster configuration file\n</pre></div>\n<p>We shall now use the <tt>create</tt> command to create an AsterixDB instance by the name &#x201c;my_asterix&#x201d;. In doing so, we shall use the cluster configuration file that was auto-generated by Managix.</p>\n\n<div class=\"source\">\n<pre>     $ managix create -n my_asterix -c $MANAGIX_HOME/clusters/local/local.xml\n</pre></div>\n<p>A sample output of the above command is shown below:</p>\n\n<div class=\"source\">\n<pre>    INFO: Name:my_asterix\n    Created:Thu Mar 07 11:14:13 PST 2013\n    Web-Url:http://127.0.0.1:19001\n    State:ACTIVE\n</pre></div>\n<p>The third line above shows the web-url <a class=\"externalLink\" href=\"http://127.0.0.1:19001\">http://127.0.0.1:19001</a> for an AsterixDB&#x2019;s web interface. The AsterixDB instance is in the &#x2018;ACTIVE&#x2019; state, indicating that you may access the web interface by navigating to the web url.</p>\n<p>Type in the following &#x201c;Hello World&#x201d; query in the box:</p>\n\n<div class=\"source\">\n<pre>    let $message := 'Hello World!'\n    return $message\n</pre></div>\n<p>Press the &#x201c;Run&#x201d; button. If the query result shows on the output box, then Congratulations! You have successfully created an AsterixDB instance!</p></div></div>\n<div class=\"section\">\n<h2><a name=\"Section2SingleMachineAsterixDBInstallationAdvanced\" id=\"Section2SingleMachineAsterixDBInstallationAdvanced\">Section 2: Single-Machine AsterixDB installation (Advanced)</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Section_2:_Single-Machine_AsterixDB_installation_Advanced_Back_to_TOC\"></a></h2>\n<p>We assume that you have successfully completed the single-machine AsterixDB installation by following the instructions above in section <a href=\"#Section_1:_Single-Machine_AsterixDB_installation\">AsterixDB installation</a>. In this section, we shall cover advanced topics related to AsterixDB configuration. Before we proceed, it is imperative to go through some preliminary concepts related to AsterixDB runtime.</p>\n<div class=\"section\">\n<h3>AsterixDB Runtime<a name=\"AsterixDB_Runtime\"></a></h3>\n<p>An AsterixDB runtime comprises of a &#x2018;&#x2018;master node&#x2019;&#x2019; and a set of &#x2018;&#x2018;worker nodes&#x2019;&#x2019;, each identified by a unique id. The master node runs a &#x2018;&#x2018;Cluster Controller&#x2019;&#x2019; service (a.k.a. &#x2018;&#x2018;CC&#x2019;&#x2019;), while each worker node runs a &#x2018;&#x2018;Node Controller&#x2019;&#x2019; service (a.k.a. &#x2018;&#x2018;NC&#x2019;&#x2019;). Please note that a node in an AsterixDB cluster is a logical concept in the sense that multiple nodes may map to a single physical machine, which is the case for a single-machine AsterixDB installation. This association or mapping between an AsterixDB node and a physical machine is captured in a cluster configuration XML file. In addition, the XML file contains properties and parameters associated with each node.</p>\n<div class=\"section\">\n<h4>AsterixDB Runtime Configuration<a name=\"AsterixDB_Runtime_Configuration\"></a></h4>\n<p>As observed earlier, Managix can auto-configure itself for a single-machine setup. As part of auto-configuration, Managix generated the cluster XML file. Let us understand the components of the generated cluster XML file. If you have configured Managix (via the <tt>configure</tt> command), you can find a similar cluster XML file as $MANAGIX_HOME/clusters/local/local.xml. The following is a sample XML file generated on a Ubuntu (Linux) setup:</p>\n\n<div class=\"source\">\n<pre>    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;\n    &lt;cluster xmlns=&quot;cluster&quot;&gt;\n        &lt;name&gt;local&lt;/name&gt;\n        &lt;java_home&gt;/usr/lib/jvm/jdk1.7.0&lt;/java_home&gt;\n        &lt;log_dir&gt;/home/joe/asterix-mgmt/clusters/local/working_dir/logs&lt;/log_dir&gt;\n        &lt;txn_log_dir&gt;/home/joe/asterix-mgmt/clusters/local/working_dir/logs&lt;/txn_log_dir&gt;\n        &lt;iodevices&gt;/home/joe/asterix-mgmt/clusters/local/working_dir&lt;/iodevices&gt;\n        &lt;store&gt;storage&lt;/store&gt;\n        &lt;working_dir&gt;\n            &lt;dir&gt;/home/joe/asterix-mgmt/clusters/local/working_dir&lt;/dir&gt;\n            &lt;NFS&gt;true&lt;/NFS&gt;\n        &lt;/working_dir&gt;\n        &lt;master_node&gt;\n            &lt;id&gt;master&lt;/id&gt;\n            &lt;client-ip&gt;127.0.0.1&lt;/client-ip&gt;\n            &lt;cluster-ip&gt;127.0.0.1&lt;/cluster-ip&gt;\n            &lt;client_port&gt;1098&lt;/client_port&gt;\n            &lt;cluster_port&gt;1099&lt;/cluster_port&gt;\n            &lt;http_port&gt;8888&lt;/http_port&gt;\n        &lt;/master_node&gt;\n        &lt;node&gt;\n            &lt;id&gt;node1&lt;/id&gt;\n            &lt;cluster_ip&gt;127.0.0.1&lt;/cluster_ip&gt;\n        &lt;/node&gt;\n    &lt;/cluster&gt;\n</pre></div>\n<p>We shall next explain the components of the cluster configuration XML file.</p></div>\n<div class=\"section\">\n<h4>(1) Defining nodes in AsterixDB runtime<a name=\"a1_Defining_nodes_in_AsterixDB_runtime\"></a></h4>\n<p>The single-machine AsterixDB instance configuration that is auto-generated by Managix (using the <tt>configure</tt> command) involves a master node (CC) and a worker node (NC). Each node is assigned a unique id and provided with an ip address (called &#x2018;&#x2018;cluster-ip&#x2019;&#x2019;) that maps a node to a physical machine. The following snippet from the above XML file captures the master/worker nodes in our AsterixDB installation.</p>\n\n<div class=\"source\">\n<pre>        &lt;master_node&gt;\n            &lt;id&gt;master&lt;/id&gt;\n            &lt;client-ip&gt;127.0.0.1&lt;/client-ip&gt;\n            &lt;cluster-ip&gt;127.0.0.1&lt;/cluster-ip&gt;\n            &lt;client_port&gt;1098&lt;/client_port&gt;\n            &lt;cluster_port&gt;1099&lt;/cluster_port&gt;\n            &lt;http_port&gt;8888&lt;/http_port&gt;\n        &lt;/master_node&gt;\n        &lt;node&gt;\n            &lt;id&gt;node1&lt;/id&gt;\n            &lt;cluster_ip&gt;127.0.0.1&lt;/cluster_ip&gt;\n        &lt;/node&gt;\n</pre></div>\n<p>The following is a description of the different elements in the cluster configuration xml file.</p>\n\n<table border=\"0\" class=\"table table-striped\">\n\n<tr class=\"a\">\n  \n<td>Property</td>\n  \n<td>Description</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>id</td>\n  \n<td>A unique id for a node.</td>\n</tr>\n\n<tr class=\"a\">\n  \n<td>cluster_ip</td>\n  \n<td>IP address of the machine to which a node maps to. This address is used for all internal communication between the nodes.</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>client-ip</td>\n  \n<td>Provided for the master node. This IP should be reachable from clients that want to connect with AsterixDB via its web interface.</td>\n</tr>\n\n<tr class=\"a\">\n  \n<td>client-port</td>\n  \n<td>Provided for the master node. This is the port at which the Cluster Controller (CC) service listens for connections from clients.</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>cluster-port</td>\n  \n<td>Provided for the master node. This is the port used by the Cluster Controller (CC) service to listen for connections from Node Controllers (NCs). </td>\n</tr>\n\n<tr class=\"a\">\n  \n<td>http-port</td>\n  \n<td>Provided for the master node. This is the http port used by the Cluster Controller (CC) service. </td>\n</tr>\n\n</table></div>\n<div class=\"section\">\n<h4>(2) Properties associated with a worker node (NC) in AsterixDB<a name=\"a2_Properties_associated_with_a_worker_node_NC_in_AsterixDB\"></a></h4>\n<p>The following is a list of properties associated with each worker node in an AsterixDB configuration.</p>\n\n<table border=\"0\" class=\"table table-striped\">\n\n<tr class=\"a\">\n  \n<td>Property</td>\n  \n<td>Description</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>java_home</td>\n  \n<td>Java installation directory at each node.</td>\n</tr>\n\n<tr class=\"a\">\n  \n<td>log_dir</td>\n  \n<td>A directory where the worker node JVM may write logs.</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>txn_log_dir</td>\n  \n<td>A directory where the worker node writes transaction logs.</td>\n</tr>\n\n<tr class=\"a\">\n  \n<td>iodevices</td>\n  \n<td>Comma separated list of IO Device mount points.</td>\n</tr>\n\n<tr class=\"b\">\n  \n<td>store</td>\n  \n<td>A data directory (under each iodevice) that AsterixDB uses to store data belonging to dataset(s).</td>\n</tr>\n</table>\n<p>All the above properties can be defined at the global level or a local level. In the former case, these properties apply to all the nodes in an AsterixDB configuration. In the latter case, these properties apply only to the node(s) under which they are defined. A property defined at the local level overrides the definition at the global level.</p></div>\n<div class=\"section\">\n<h4>(3) Working directory of an AsterixDB instance<a name=\"a3_Working_directory_of_an_AsterixDB_instance\"></a></h4>\n<p>Next we explain the following setting in the file $MANAGIX_HOME/clusters/local/local.xml.</p>\n\n<div class=\"source\">\n<pre>        &lt;working_dir&gt;\n            &lt;dir&gt;/Users/joe/asterix-mgmt/clusters/local/working_dir&lt;/dir&gt;\n            &lt;NFS&gt;true&lt;/NFS&gt;\n        &lt;/working_dir&gt;\n</pre></div>\n<p>Managix associates a working directory with an AsterixDB instance and uses this directory for transferring binaries to each node. If there is a directory that is readable by each node, Managix can use it to place binaries that can be accessed and used by all the nodes in the AsterixDB set up. A network file system (NFS) provides such a functionality for a cluster of physical machines so that a path on NFS is accessible from each machine in the cluster. In the single-machine set up described above, all nodes correspond to a single physical machine. Each path on the local file system is accessible to all the nodes in the AsterixDB setup and the boolean value for NFS above is thus set to <tt>true</tt>.</p></div></div>\n<div class=\"section\">\n<h3>Managix Configuration<a name=\"Managix_Configuration\"></a></h3>\n<p>Managix allows creation and management of multiple AsterixDB instances and uses Zookeeper as its back-end database to keep track of information related to each instance. We need to provide a set of one or more hosts that Managix can use to run a Zookeeper instance. Zookeeper runs as a daemon process on each of the specified hosts. At each host, Zookeeper stores data under the Zookeeper home directory specified as part of the configuration. The following is an example configuration <tt>$MANAGIX_HOME/conf/managix-conf.xml</tt> that has Zookeeper running on the localhost (127.0.0.1) :</p>\n\n<div class=\"source\">\n<pre>    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;\n    &lt;configuration xmlns=&quot;installer&quot;&gt;\n        &lt;zookeeper&gt;\n            &lt;homeDir&gt;/home/joe/asterix/.installer/zookeeper&lt;/homeDir&gt;\n            &lt;clientPort&gt;2900&lt;/clientPort&gt;\n            &lt;servers&gt;\n                &lt;server&gt;127.0.0.1&lt;/server&gt;\n            &lt;/servers&gt;\n        &lt;/zookeeper&gt;\n    &lt;/configuration&gt;\n</pre></div>\n<p>It is possible to have a single host for Zookeeper. A larger number of hosts would use Zookeeper&#x2019;s replication and fault-tolerance feature such that a failure of a host running Zookeeper would not result in loss of information about existing AsterixDB instances.</p></div></div>\n<div class=\"section\">\n<h2><a name=\"Section3InstallingAsterixDBOnAClusterOfMultipleMachines\" id=\"Section3InstallingAsterixDBOnAClusterOfMultipleMachines\">Section 3: Installing AsterixDB on a Cluster of Multiple Machines</a><font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Section_3:_Installing_AsterixDB_on_a_Cluster_of_Multiple_MachinesBack_to_TOC\"></a></h2>\n<p>We assume that you have read the two sections above on single-machine AsterixDB setup. Next we explain how to install AsterixDB in a cluster of multiple machines. As an example, we assume we want to setup AsterixDB on a cluster of three machines, in which we use one machine (called machine A) as the master node and two other machines (called machine B and machine C) as the worker nodes, as shown in the following diagram:</p>\n<p><img src=\"https://asterixdb.googlecode.com/files/AsterixCluster.png\" alt=\"AsterixCluster\" /></p>\n<p>Notice that each machine has a &#x2018;&#x2018;cluster_ip&#x2019;&#x2019; address, which is used by these machines for their intra-cluster communication. Meanwhile, the master machine also has a &#x2018;&#x2018;client_ip&#x2019;&#x2019; address, using which an end-user outside the cluster can communicate with this machine. The reason we differentiate between these two types of IP addresses is that we can have a cluster of machines using a private network. In this case they have internal ip addresses that cannot be used outside the network. In the case all the machines are on a public network, the &#x201c;client_ip&#x201d; and &#x201c;cluster_ip&#x201d; of the master machine can share the same address.</p>\n<p>Next we describe how to set up AsterixDB in this cluster, assuming no Managix has been installed on these machines.</p>\n<div class=\"section\">\n<h3>Step (1): Define the AsterixDB cluster<a name=\"Step_1:_Define_the_AsterixDB_cluster\"></a></h3>\n<p>We first log into the master machine as the user &#x201c;joe&#x201d;. On this machine, download Managix from <a class=\"externalLink\" href=\"http://asterixdb.ics.uci.edu/download.html\">here</a> (save as above), then do the following steps similar to the single-machine case described above:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; cd ~\n    machineA&gt; mkdir asterix-mgmt\n    machineA&gt; cd asterix-mgmt\n    machineA&gt; unzip  &lt;path to the Managix zip bundle&gt;\n    machineA&gt; export MANAGIX_HOME=`pwd`\n    machineA&gt; export PATH=$PATH:$MANAGIX_HOME/bin\n</pre></div>\n<p>Note that it is recommended that MANAGIX_HOME is not located on a network file system (NFS). Managix creates artifacts/logs that are not required to be shared. Any overhead associated with creating artifacts/logs on the NFS should be avoided. </p>\n<p>We also need an AsterixDB configuration XML file for the cluster. We give the name to the cluster, say, &#x201c;rainbow&#x201d;. We create a folder for the configuration of this cluster:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; mkdir $MANAGIX_HOME/rainbow_cluster\n</pre></div>\n<p>For this cluster we create a configuration file <tt>$MANAGIX_HOME/rainbow_cluster/rainbow.xml</tt>. The following is a sample file with explanation of the properties:</p>\n\n<div class=\"source\">\n<pre>    &lt;cluster xmlns=&quot;cluster&quot;&gt;\n\n      &lt;!-- Name of the cluster --&gt;\n      &lt;name&gt;rainbow&lt;/name&gt;\n\n      &lt;!-- username, which should be valid for all the three machines --&gt;\n      &lt;username&gt;joe&lt;/username&gt;\n\n      &lt;!-- The working directory of Managix. It is recommended for the working\n           directory to be on a network file system (NFS) that can accessed by\n           all machines. \n           Managix creates the directory if it it doesn't exist. --&gt;\n      &lt;working_dir&gt;\n        &lt;dir&gt;/home/joe/managix-workingDir&lt;/dir&gt;\n        &lt;NFS&gt;true&lt;/NFS&gt;\n      &lt;/working_dir&gt;\n\n      &lt;!-- Directory for Asterix to store log information for each machine.\n           Needs to be on the local file system of each machine.\n           Managix creates the directory if it doesn't exist. \n           This property can be overriden for a node by redefining at the node level. --&gt;\n      &lt;logdir&gt;/mnt/joe/logs&lt;/logdir&gt;\n\n      &lt;!-- Mount point of an iodevice. Use a comma separated list for a machine that\n           has multiple iodevices (disks).\n           This property can be overriden for a node by redefining at the node level. --&gt;\n      &lt;iodevices&gt;/mnt/joe&lt;/iodevices&gt;\n\n      &lt;!-- Path on each iodevice where Asterix will store its data --&gt;\n      &lt;store&gt;storage&lt;/store&gt;\n\n      &lt;!-- Java home for each machine --&gt;\n      &lt;java_home&gt;/usr/lib/jvm/jdk1.7.0&lt;/java_home&gt;\n\n       &lt;!-- IP addresses of the master machine A --&gt;\n      &lt;master_node&gt;\n        &lt;id&gt;master&lt;/id&gt;\n        &lt;client_ip&gt;128.195.52.177&lt;/client_ip&gt;\n        &lt;cluster_ip&gt;192.168.100.0&lt;/cluster_ip&gt;\n        &lt;client_port&gt;1098&lt;/client_port&gt;\n        &lt;cluster_port&gt;1099&lt;/cluster_port&gt;\n        &lt;http_port&gt;8888&lt;/http_port&gt;\n      &lt;/master_node&gt;\n\n       &lt;!-- IP address(es) of machine B --&gt;\n      &lt;node&gt;\n        &lt;id&gt;nodeB&lt;/id&gt;\n        &lt;cluster_ip&gt;192.168.100.1&lt;/cluster_ip&gt;\n      &lt;/node&gt;\n\n       &lt;!-- IP address(es) of machine C --&gt;\n      &lt;node&gt;\n        &lt;id&gt;nodeC&lt;/id&gt;\n        &lt;cluster_ip&gt;192.168.100.2&lt;/cluster_ip&gt;\n      &lt;/node&gt;\n    &lt;/cluster&gt;\n</pre></div>\n<p>As stated before, each of the above properties can be defined at the cluster level, in which case it applies to all the nodes in the system. Each property can also be defined at a node level.</p>\n<p>Once we have formed the cluster XML file, we can validate the configuration by doing the following:</p>\n\n<div class=\"source\">\n<pre>    managix validate -c $MANAGIX_HOME/rainbow_cluster/rainbow.xml\n</pre></div>\n<p>If the return message says &#x201c;OK&#x201d;, it means that the XML configuration file is set properly.</p></div>\n<div class=\"section\">\n<h3>Step (2): Configure SSH<a name=\"Step_2:_Configure_SSH\"></a></h3>\n<p>The next steps of setting up SSH are similar to those in the single-machine setup case. We assume we have a common user account called &#x201c;joe&#x201d; on each machine in the cluster.</p>\n<p>On the master machine, do the following:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; ssh 127.0.0.1\n</pre></div>\n<p>If you get an output similar to one shown below, type &#x201c;yes&#x201d; and press enter.</p>\n\n<div class=\"source\">\n<pre>    The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.\n    RSA key fingerprint is aa:7b:51:90:74:39:c4:f6:28:a2:9d:47:c2:8d:33:31.\n    Are you sure you want to continue connecting (yes/no)?\n</pre></div>\n<p>If you are not prompted for a password, that is if you get an output similar to one shown below, it signifies that you already have password-less SSH configured. </p>\n\n<div class=\"source\">\n<pre>    $ ssh 127.0.0.1\n    Last login: Sat Mar 23 22:52:49 2013\n</pre></div>\n<p>[Important: Password-less SSH requires the use of a (public,private) key-pair. The key-pair is located as a pair of files under  $HOME/.ssh directory. It is required that the (public,private) key-pair files have default names (id_rsa.pub, id_rsa) respectively.  If you are using different names, please rename the files to use the default names]</p>\n<p>If you are prompted for a password, execute the following</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; ssh-keygen -t rsa -P &quot;&quot;\n    machineA&gt; cat $HOME/.ssh/id_rsa.pub &gt;&gt; $HOME/.ssh/authorized_keys\n    machineA&gt; chmod 700  $HOME/.ssh/authorized_keys\n</pre></div>\n<p>If $HOME is not on the NFS, copy the id_rsa.pub to the directory ~/.ssh (login with the same account) on each machine, and then do the following on each machine. (Notice that this step is not needed if the folder &#x201c;.ssh&#x201d; is on the NFS and can be accessed by all the nodes.)</p>\n\n<div class=\"source\">\n<pre>    cd ~/.ssh\n    cat id_rsa.pub &gt;&gt; authorized_keys\n    chmod 700  $HOME/.ssh/authorized_keys\n</pre></div>\n<p>Then run the following step again and type &#x201c;yes&#x201d; if prompted:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; ssh 127.0.0.1\n</pre></div></div>\n<div class=\"section\">\n<h3>Step (3): Configuring Managix<a name=\"Step_3:_Configuring_Managix\"></a></h3>\n<p>Managix uses a configuration XML file at <tt>$MANAGIX_HOME/conf/managix-conf.xml</tt> to configure its own properties, such as its Zookeeper service. We can use the <tt>configure</tt> command to auto-generate this configuration file:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; managix configure\n</pre></div>\n<p>We use the <tt>validate</tt> command to validate the Managix configuration. To do so, execute the following.</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; managix validate\n    INFO: Environment [OK]\n    INFO: Managix Configuration [OK]\n</pre></div>\n<p>Note that the <tt>configure</tt> command also generates a cluster configuration XML file at $MANAGIX_HOME/conf/clusters/local.xml. This file is not needed in the case of a cluster of machines.</p></div>\n<div class=\"section\">\n<h3>Step (4): Creating an AsterixDB instance<a name=\"Step_4:_Creating_an_AsterixDB_instance\"></a></h3>\n<p>Now that we have configured Managix, we shall next create an AsterixDB instance, which is identified by a unique name and is created using the <tt>create</tt> command. The usage description for the <tt>create</tt> command can be obtained by executing the following:</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; managix help -cmd create\n\n     Creates an AsterixDB instance with a specified name. Post creation, the instance is in ACTIVE state,\n     indicating its availability for executing statements/queries.\n     Usage arguments/options:\n     -n Name of the AsterixDB instance.\n     -c Path to the cluster configuration file\n</pre></div>\n<p>We shall now use the <tt>create</tt> command to create an AsterixDB instance called &#x201c;rainbow_asterix&#x201d;. In doing so, we shall use the cluster configuration file that was auto-generated by Managix.</p>\n\n<div class=\"source\">\n<pre>    machineA&gt; managix create -n rainbow_asterix -c $MANAGIX_HOME/clusters/rainbow.xml\n</pre></div>\n<p>If the response message does not have warning, then Congratulations! You have successfully installed AsterixDB on this cluster of machines!</p>\n<p>Please refer to the section <a href=\"#Section_4:_Managing_the_Lifecycle_of_an_AsterixDB_Instance\">Managing the Lifecycle of an AsterixDB Instance</a> for a detailed description on the set of available commands/operations that let you manage the lifecycle of an AsterixDB instance. Note that the output of the commands varies with the cluster definition and may not apply to the cluster specification you built above.</p></div></div>\n<div class=\"section\">\n<h2><a name=\"Section4ManagingTheLifecycleOfAnAsterixDBInstance\" id=\"Section4ManagingTheLifecycleOfAnAsterixDBInstance\">Section 4: Managing the Lifecycle of an AsterixDB Instance</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Section_4:_Managing_the_Lifecycle_of_an_AsterixDB_Instance_Back_to_TOC\"></a></h2>\n<p>Now that we have an AsterixDB instance running, let us use Managix to manage the instance&#x2019;s lifecycle. Managix provides the following set of commands/operations:</p>\n<div class=\"section\">\n<div class=\"section\">\n<h4>Managix Commands<a name=\"Managix_Commands\"></a></h4>\n\n<table border=\"0\" class=\"table table-striped\">\n\n<tr class=\"a\">\n<td>Command</td>  \n<td>Description</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Creating_an_AsterixDB_instance\">create</a></td>   \n<td>Creates a new asterix instance.</td></tr>\n\n<tr class=\"a\">\n<td><a href=\"#Describe_Command\">describe</a></td> \n<td>Describes an existing asterix instance.</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Stop_Command\">stop</a></td>     \n<td>Stops an asterix instance that is in the ACTIVE state.</td></tr>\n\n<tr class=\"a\">\n<td><a href=\"#Start_Command\">start</a></td>    \n<td>Starts an AsterixDB instance.</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Backup_Command\">backup</a></td>   \n<td>Creates a backup for an existing AsterixDB instance.</td></tr>\n\n<tr class=\"a\">\n<td><a href=\"#Restore_Command\">restore</a></td>  \n<td>Restores an AsterixDB instance.</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Delete_Command\">delete</a></td>   \n<td>Deletes an AsterixDB instance.</td></tr>\n\n<tr class=\"a\">\n<td><a href=\"#Configuring_Managix\">validate</a></td> \n<td>Validates the installer/cluster configuration.</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Configuring_Managix\">configure</a></td>\n<td>Auto generates a configuration for an AsterixDB instance.</td></tr>\n\n<tr class=\"a\">\n<td><a href=\"#Log_Command\">log</a></td>\n<td>Produces a zip archive containing log files from each node in an AsterixDB instance.</td></tr>\n\n<tr class=\"b\">\n<td><a href=\"#Shutdown_Command\">shutdown</a></td> \n<td>Shuts down the installer service.</td></tr>\n</table>\n<p>You may obtain the above listing by simply executing &#x2018;managix&#x2019; :</p>\n\n<div class=\"source\">\n<pre>    $ managix\n</pre></div>\n<p>We already talked about <tt>create</tt> and <tt>validate</tt> commands. We shall next explain the rest of the commands listed above. We also provide sample output messages of these commands assuming we are running an AsterixDB instance on a single machine.</p>\n<div class=\"section\">\n<h5>Describe Command<a name=\"Describe_Command\"></a></h5>\n<p>The <tt>describe</tt> command provides information about an AsterixDB instance. The usage can be looked up by executing the following:</p>\n\n<div class=\"source\">\n<pre>     $ managix help -cmd describe\n\n        Provides information about an AsterixDB instance.\n        The following options are available:\n        [-n]      Name of the AsterixDB instance.\n        [-admin]  Provides a detailed description\n</pre></div>\n<p>The brackets indicate optional flags.</p>\n<p>The output of the <tt>describe</tt> command when used without the <tt>admin</tt> flag contains minimal information and is similar to the output of the <tt>create</tt> command. Let us try running the describe command in &#x201c;admin&#x201d; mode.</p>\n\n<div class=\"source\">\n<pre>     $ managix describe -n my_asterix -admin\n     INFO: Name:my_asterix\n     Created:Thu Mar 07 19:07:00 PST 2013\n     Web-Url:http://127.0.0.1:19001\n     State:ACTIVE\n     Master node:master:127.0.0.1\n     node1:127.0.0.1\n\n     Asterix version:0.0.5\n     Asterix Configuration\n     output_dir = /tmp/asterix_output/\n     Metadata Node:node1\n     Processes\n     NC at 127.0.0.1 [ 22195 ]\n     CC at 127.0.0.1 [ 22161 ]\n\n     Asterix Configuration\n       nc.java.opts                             :-Xmx1024m\n       cc.java.opts                             :-Xmx1024m\n       storage.buffercache.pagesize             :32768\n       storage.buffercache.size                 :33554432\n       storage.buffercache.maxopenfiles         :214748364\n       storage.memorycomponent.pagesize         :32768\n       storage.memorycomponent.numpages         :1024\n       storage.memorycomponent.globalbudget     :536870192\n       storage.lsm.mergethreshold               :3\n       storage.lsm.bloomfilter.falsepositiverate:0.01\n       txn.log.buffer.numpages                  :8\n       txn.log.buffer.pagesize                  :131072\n       txn.log.partitionsize                    :2147483648\n       txn.log.disksectorsize                   :4096\n       txn.log.groupcommitinterval              :1\n       txn.log.checkpoint.lsnthreshold          :67108864\n       txn.log.checkpoint.pollfrequency         :120\n       txn.log.checkpoint.history               :0\n       txn.lock.escalationthreshold             :1000\n       txn.lock.shrinktimer                     :5000\n       txn.lock.timeout.waitthreshold           :60000\n       txn.lock.timeout.sweepthreshold          :10000\n       compiler.sortmemory                      :33554432\n       compiler.joinmemory                      :33554432\n       compiler.framesize                       :32768\n       web.port                                 :19001\n       api.port                                 :19002\n       log.level                                :INFO\n</pre></div>\n<p>As seen above, the instance &#x2018;my_asterix&#x2019; is configured such that all processes running at the localhost (127.0.0.1). The process id for each process (JVM) is shown next to it.</p></div>\n<div class=\"section\">\n<h5>Stop Command<a name=\"Stop_Command\"></a></h5>\n<p>The <tt>stop</tt> command can be used for shutting down an AsterixDB instance. After that, the instance is unavailable for executing queries. The usage can be looked up by executing the following.</p>\n\n<div class=\"source\">\n<pre>     $ managix help -cmd stop\n\n     Shuts an AsterixDB instance that is in ACTIVE state. After executing the stop command, the AsterixDB instance transits\n     to the INACTIVE state, indicating that it is no longer available for executing queries.\n\n     Available arguments/options\n     -n name of the AsterixDB instance.\n</pre></div>\n<p>To stop the AsterixDB instance.</p>\n\n<div class=\"source\">\n<pre>     $ managix stop -n my_asterix\n       INFO: Stopped AsterixDB instance: my_asterix\n\n\n     $ managix describe -n my_asterix\n       INFO: Name: my_asterix\n       Created:Thu Mar 07 19:07:00 PST 2013\n       Web-Url:http://127.0.0.1:19001\n       State:INACTIVE (Fri Mar 08 09:49:00 PST 2013)\n</pre></div></div>\n<div class=\"section\">\n<h5>Start Command<a name=\"Start_Command\"></a></h5>\n<p>The <tt>start</tt> command starts an AsterixDB instance that is in the INACTIVE state. The usage can be looked up by executing the following:</p>\n\n<div class=\"source\">\n<pre>     $ managix help -cmd start\n\n     Starts an AsterixDB instance that is in INACTIVE state. After executing the start command, the AsterixDB instance transits to the ACTIVE state,  indicating that it is now available for executing statements/queries.\n\n     Available arguments/options\n     -n name of the AsterixDB instance.\n</pre></div>\n<p>Let us now start the AsterixDB instance.</p>\n\n<div class=\"source\">\n<pre>     $ managix start -n my_asterix\n       INFO: Name:my_asterix\n       Created:Thu Mar 07 19:07:00 PST 2013\n       Web-Url:http://127.0.0.1:19001\n       State:ACTIVE (Fri Mar 08 09:49:00 PST 2013)\n</pre></div></div>\n<div class=\"section\">\n<h5>Backup Command<a name=\"Backup_Command\"></a></h5>\n<p>The backup command allows you to take a backup of the data stored with an AsterixDB instance. The backup can be taken on the local file system or on an HDFS instance. In either case, the snapshots are stored under a backup directory. You need to make sure the backup directory has appropriate read/write permissions. Configuring settings for backup can be found inside the Managix&#x2019;s configuration file located at <tt>$MANAGIX_HOME/conf/managix-conf.xml</tt>.</p>\n<p><i>Configuring backup on the local file system</i></p>\n<p>We need to provide a path to a backup directory on the local file system. The backup directory can be configured be editing the Managix configuration XML, found at <tt>$MANAGIX_HOME/conf/managix-conf.xml</tt>.</p>\n\n<div class=\"source\">\n<pre>    &lt;backup&gt;\n      &lt;backupDir&gt;Provide path to the backup directory here&lt;/backupDir&gt;\n    &lt;/backup&gt;\n</pre></div>\n<p>Prior to taking a backup of an AsterixDB instance, it is required for the instance to be in the INACTIVE state. We do so by using the <tt>stop</tt> command, as shown below:</p>\n\n<div class=\"source\">\n<pre>    $ managix stop -n my_asterix\n      INFO: Stopped AsterixDB instance: my_asterix\n</pre></div>\n<p>We can now take the backup by executing the following:</p>\n\n<div class=\"source\">\n<pre>    $ managix backup -n my_asterix\n      INFO: my_asterix backed up 0_Fri Mar 08 16:16:34 PST 2013 (LOCAL)\n</pre></div>\n<p><i>Configuring backup on an HDFS instance</i></p>\n<p>To configure a backup to be taken on an HDFS instance, we need to provide required information about the running HDFS instance. This information includes the HDFS version and the HDFS url. Simply edit the Managix configuration file and provide the required information.</p>\n\n<div class=\"source\">\n<pre>    &lt;backup&gt;\n       &lt;backupDir&gt;Provide path to the backup directory here&lt;/backupDir&gt;\n       &lt;hdfs&gt;\n           &lt;version&gt;0.20.2&lt;/version&gt;\n           &lt;url&gt;&lt;/url&gt;\n       &lt;/hdfs&gt;\n    &lt;/backup&gt;\n</pre></div>\n<p>A sample output when a backup is taken on an HDFS is shown below:</p>\n\n<div class=\"source\">\n<pre>    $ managix backup -n my_asterix\n      INFO: my_asterix backed up 1_Fri Mar 08 17:10:38 PST 2013 (HDFS)\n</pre></div>\n<p>Each time we take a backup, we are provided with a unique id (a monotonically increasing value starting with 0). This id is required when we need to restore from a previously taken backup. Information about all available backup snapshots can be obtained by using the <tt>describe</tt> command in the admin mode, as shown below:</p>\n\n<div class=\"source\">\n<pre>     $ managix describe -n my_asterix -admin\n     INFO: Name:my_asterix\n     Created:Fri Mar 08 15:11:12 PST 2013\n     Web-Url:http://127.0.0.1:19001\n     State:INACTIVE (Fri Mar 08 16:14:20 PST 2013)\n     Master node:master:127.0.0.1\n     node1:127.0.0.1\n\n     Backup:0 created at Fri Mar 08 16:16:34 PST 2013 (LOCAL)\n     Backup:1 created at Fri Mar 08 17:10:38 PST 2013 (HDFS)\n\n     Asterix version:0.0.5\n     Asterix Configuration\n     Metadata Node:node1\n     Processes\n</pre></div>\n<p>The above output shows the available backup identified by it&#x2019;s id (0). We shall next describe the method for restoring an AsterixDB instance from a backup snapshot.</p></div>\n<div class=\"section\">\n<h5>Restore Command<a name=\"Restore_Command\"></a></h5>\n<p>The <tt>restore</tt> command allows you to restore an AsterixDB instance&#x2019;s data from a previously taken backup. The usage description can be obtained as follows:</p>\n\n<div class=\"source\">\n<pre>      $ managix help -cmd restore\n\n      Restores an AsterixDB instance's data from a previously taken backup.\n      Available arguments/options\n\n      -n name of the AsterixDB instance\n      -b id of the backup snapshot\n</pre></div>\n<p>The following command restores our AsterixDB instance from the backup snapshot identified by the id (0). Prior to restoring an instance from a backup, it is required that the instance is in the INACTIVE state.</p>\n\n<div class=\"source\">\n<pre>     $ managix restore -n my_asterix -b 0\n     INFO: AsterixDB instance: my_asterix has been restored from backup\n</pre></div>\n<p>You can start the AsterixDB instance by using the start command.</p></div>\n<div class=\"section\">\n<h5>Log Command<a name=\"Log_Command\"></a></h5>\n<p>The <tt>log</tt> command allows you to collect the log files coresponding to each node of an AsterixDB instance into a zip archive. The zip archive is produced on the local file system of the machine running managix. </p>\n\n<div class=\"source\">\n<pre>      $ managix help -cmd log\n\n      Creates a zip archive containing log files corresponding to each worker node (NC) and the master (CC)  for an AsterixDB instance\n\n      Available arguments/options\n      -n name of the AsterixDB instance. \n      -d destination directory for producing the zip archive. Defaults to $MANAGIX_HOME/logdump.\n</pre></div>\n<p>The following is an example showing the use of the log command. </p>\n\n<div class=\"source\">\n<pre>     $ managix log -n my_asterix -d  /Users/joe/logdump\n     INFO: Log zip archive created at /Users/joe/logdump/log_Thu_Jun_06_00:53:51_PDT_2013.zip\n</pre></div></div>\n<div class=\"section\">\n<h5>Delete Command<a name=\"Delete_Command\"></a></h5>\n<p>As the name suggests, the <tt>delete</tt> command permanently removes an AsterixDB instance by cleaning up all associated data/artifacts. The usage can be looked up by executing the following:</p>\n\n<div class=\"source\">\n<pre>      $ managix help -cmd delete\n      Permanently deletes an AsterixDB instance. The instance must be in the INACTIVE state.\n\n      Available arguments/options\n      -n name of the AsterixDB instance.\n\n\n      $ managix delete -n my_asterix\n       INFO: AsterixDB instance my_asterix deleted.\n</pre></div></div>\n<div class=\"section\">\n<h5>Shutdown Command<a name=\"Shutdown_Command\"></a></h5>\n<p>Managix uses Zookeeper service for storing all information about created AsterixDB instances. The Zookeeper service runs in the background and can be shut down using the <tt>shutdown</tt> command.</p>\n\n<div class=\"source\">\n<pre>      $ managix shutdown\n</pre></div></div>\n<div class=\"section\">\n<h5>Help Command<a name=\"Help_Command\"></a></h5>\n<p>The <tt>help</tt> command provides a usage description of a Managix command.</p>\n\n<div class=\"source\">\n<pre>    $ managix help -cmd &lt;command name&gt;\n</pre></div>\n<p>As an example, for looking up the help for the <tt>configure</tt> command, execute the following</p>\n\n<div class=\"source\">\n<pre>    $ managix help -cmd configure\n\n    Auto-generates the AsterixDB installer configruation settings and AsterixDB cluster\n    configuration settings for a single node setup.\n</pre></div></div></div></div></div>\n<div class=\"section\">\n<h2><a name=\"Section5FAQ\" id=\"Section5FAQ\">Section 5: Frequently Asked Questions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font><a name=\"Section_5:_Frequently_Asked_Questions_Back_to_TOC\"></a></h2>\n<div class=\"section\">\n<div class=\"section\">\n<div class=\"section\">\n<h5>Question<a name=\"Question\"></a></h5>\n<p>What happens if a machine acting as a node in the Asterix cluster becomes unreachable for some reason (network partition/machine failure) ?</p></div>\n<div class=\"section\">\n<h5>Answer<a name=\"Answer\"></a></h5>\n<p>When a node leaves the Asterix cluster, the AsterixDB instance transits to an &#x2018;UNUSABLE&#x2019; state, indicating that it is no longer available for serving queries. To know which set of node(s) left the cluster, run the describe command with -admin flag. </p>\n\n<div class=\"source\">\n<pre>    $ $MANAGIX_HOME/bin/managix describe -n &lt;name of the AsterixDB instance&gt;-admin\n</pre></div>\n<p>Above command will show the state of AsterixDB instance and list the set of nodes that have left the cluster. </p>\n<p>The failed node must be brought back to re-join the cluster. Once done, you may bring back the instance to an &#x2018;ACTIVE&#x2019; state by executing the following sequence. </p>\n<p>1) Get rid of the Asterix processes running on the nodes in the cluster:-</p>\n\n<div class=\"source\">\n<pre>    $MANAGIX_HOME/bin/managix stop -n my_asterix\n</pre></div>\n<p>The processes associated with the instance are terminated and the instance moves to the INACTIVE state.</p>\n<p>2) Start the AsterixDB instance using the start command.</p>\n\n<div class=\"source\">\n<pre>    $MANAGIX_HOME/bin/managix start -n &lt;name of your AsterixDB instance&gt;\n</pre></div></div>\n<div class=\"section\">\n<h5>Question<a name=\"Question\"></a></h5>\n<p>Do I need to create all the directories/paths I put into the cluster configuration XML ?</p></div>\n<div class=\"section\">\n<h5>Answer<a name=\"Answer\"></a></h5>\n<p>Managix will create a path if it is not existing. It does so using the user account mentioned in the cluster configuration xml. Please ensure that the user account has appropriate permissions for creating the missing paths. </p></div>\n<div class=\"section\">\n<h5>Question<a name=\"Question\"></a></h5>\n<p>Should MANAGIX_HOME be on the network file system (NFS) ?</p></div>\n<div class=\"section\">\n<h5>Answer<a name=\"Answer\"></a></h5>\n<p>It is recommended that MANAGIX_HOME is not on the NFS. Managix produces artifacts/logs on disk which are not required to be shared. As such an overhead in creating the artifacts/logs on the NFS should be avoided.</p></div>\n<div class=\"section\">\n<h5>Question<a name=\"Question\"></a></h5>\n<p>How do we change the underlying code (apply a code patch) for an &#x2018;active&#x2019; asterix instance?</p></div>\n<div class=\"section\">\n<h5>Answer<a name=\"Answer\"></a></h5>\n<p>At times, end-user (particularly asterix developer) may run into the need to altering the underlying code that is being run by an asterix instance. In the current version of managix, this can be achieved as follows:-</p>\n<p>Assume that you have an &#x2018;active&#x2019; instance by the name a1 that is running version v1 of asterix. You have a revised version of asterix - v2 that fixes some bug(s).</p>\n<p>To upgrade asterix from v1 to v2:-</p>\n<p>step 1) managix stop -n a1</p>\n<p>step 2) managix shutdown</p>\n<p>step 3) copy asterix-server zip (version v2) to $MANAGIX_HOME/asterix/</p>\n<p>step 4) managix start -n a1</p>\n<p>a1 now is running on version v2.</p>\n<p>Limitations:-</p>\n<p>a) Obviously this wont work in a situation where v2 has made a change that is incompatible with earlier version, such altering schema.</p>\n<p>b) A change in asterix zip applies to all existing instances (after a restart) and subsequent instances that user creates.</p></div></div></div></div>\n                  </div>\n            </div>\n          </div>\n\n    <hr/>\n\n    <footer>\n            <div class=\"container-fluid\">\n              <div class=\"row span12\">Copyright &copy;                   2014.\n          All Rights Reserved.      \n                    \n      </div>\n\n                          \n        \n                </div>\n    </footer>\n  </body>\n</html>\n", "id": 2558.0}