{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 1 IO Streams Andreas Fabri Geert Jan Giezeman and Lutz Kettner All classes in the CGAL kernel provide input and output operators for IO streams The basic task of such an operator is to produce a representation of an object that can be written as a sequence of characters on devices as a console a file or a pipe In CGAL we distinguish between a raw ascii a raw binary and a pretty printing format Mode ASCII BINARY PRETTY In ASCII mode objects are written as a set of numbers e g the coordinates of a point or the coefficients of a line in a machine independent format In BINARY mode data are written in a binary format e g a double is represented as a sequence of four byte The format depends on the machine The mode PRETTY serves mainly for debugging as the type of the geometric object is written as well as the data defining the object For example for a point at the origin with Cartesian double coordinates the output would be PointC2 At the moment CGAL does not provide input operations for pretty printed data By default a stream is in ASCII mode CGAL provides the following functions to modify the mode of an IO stream IO Mode set mode std ios s IO Mode m IO Mode set ascii mode std ios s IO Mode set binary mode std ios s IO Mode set pretty mode std ios s The following functions allow to test whether a stream is in a certain mode IO Mode get mode std ios s bool is ascii std ios s bool is binary std ios s bool is pretty std ios s 1 1 Output Operator CGAL defines output operators for classes that are derived from the class ostream This allows to write to ostreams as cout or cerr as well as to strstreams and fstreams The output operator is defined for all classes in the CGAL kernel and for the class Color as well Let os be an output stream ostream ostream os Class c Inserts object c in the stream os Returns os Example include CGAL basic h include iostream include fstream include CGAL Cartesian h include CGAL Segment 2 h typedef CGAL Point 2 CGAL Cartesian double Point typedef CGAL Segment 2 CGAL Cartesian double Segment int main Point p 1 q 2 2 Segment s p q CGAL set pretty mode std cout std cout p std endl q std endl std ofstream f data txt CGAL set binary mode f f s p return 1 1 2 Input Operator CGAL defines input operators for classes that are derived from the class istream This allows to read from istreams as cin as well as from strstreams and fstreams The input operator is defined for all classes in the CGAL kernel Let is be an input stream istream istream is Class c Extracts object c from the stream is Returns is Example include CGAL basic h include iostream include fstream include CGAL Cartesian h include CGAL Segment 2 h typedef CGAL Point 2 CGAL Cartesian double Point typedef CGAL Segment 2 CGAL Cartesian double Segment int main Point p q Segment s CGAL set ascii mode std cin std cin p q std ifstream f data txt CGAL set binary mode f f s p return 1 1 3 Stream Support Three classes are provided by CGAL as adaptors to input and output stream iterators The class Istream iterator is an input iterator adaptor and is particularly useful for classes that are similar but not compatible to std istream Similarly the class Ostream iterator is an output iterator adaptor The class Verbose ostream can be used as an output stream The stream output operator is defined for any type The class stores in an internal state a stream and whether the output is active or not If the state is active the stream output operator uses the internal stream to output its argument If the state is inactive nothing happens Next chapter IO Streams Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/IOstream/Chapter_main.html", "title": "io streams", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './IOstream/main.tex' -->\n<html> <head>  \n<title>IO Streams</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_10\"></a>\n  \n<h1>Chapter 10<BR>IO Streams</h1>\n\n<A NAME=\"Chapter_operator_for_IO_streams\"></A>\n<EM>Andreas Fabri, Geert-Jan Giezeman, and Lutz Kettner</EM><BR>\n\n\n<P>\n\nAll classes in the C<SMALL>GAL</SMALL> kernel provide input and output operators for\nIO streams.  The basic task of such an operator is to produce a\nrepresentation of an object that can be written as a sequence of\ncharacters on devices as a console, a file, or a pipe. In C<SMALL>GAL</SMALL> \nwe distinguish between  a raw ascii, a raw binary and a \npretty printing format.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Mode_=\"></A>\n<A NAME=\"Enum_Mode_=\"></A>\n<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A> = { <A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">ASCII</A> = 0<A NAME=\"Function_Mode_=\"></A>\n, <A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">BINARY</A><A NAME=\"Function_Mode_=\"></A>\n, <A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">PRETTY</A><A NAME=\"Function_Mode_=\"></A>\n};\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\nIn <I><A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">ASCII</A></I> mode, objects are written as\na set of  numbers, e.g. the coordinates of a point or\nthe coefficients of a line, in a machine independent format. \nIn <I><A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">BINARY</A></I> mode,\ndata are written in a binary format, e.g. a double is represented\nas a sequence of four byte. The format depends on the machine. \nThe mode  <I><A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">PRETTY</A></I>\nserves mainly for debugging as the type of the geometric\nobject is written, as well as the data defining the object. For example\nfor a point at the origin with <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> double coordinates, the output\nwould be <I>PointC2(0.0, 0.0)</I>.  At the moment C<SMALL>GAL</SMALL> does not\nprovide input operations for pretty printed data. By default a stream\nis in <SMALL><A HREF=\"../IOstream_ref/Enum_Mode#Enum_Mode\">ASCII</A></SMALL> mode.\n<P>\n\nC<SMALL>GAL</SMALL> provides the following functions to modify the mode of an IO stream.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_IO::Mode_set_mode6std::ios__s+_IO::Mode_m9;\"></A>\nIO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_set_mode.html#Cross_link_anchor_1748\">set_mode</A> ( std::ios&amp; s,  IO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A> m)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_IO::Mode_set_ascii_mode6std::ios__s9;\"></A>\nIO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_set_ascii_mode.html#Cross_link_anchor_1744\">set_ascii_mode</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_IO::Mode_set_binary_mode6std::ios__s9;\"></A>\nIO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_set_binary_mode.html#Cross_link_anchor_1746\">set_binary_mode</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_IO::Mode_set_pretty_mode6std::ios__s9;\"></A>\nIO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_set_pretty_mode.html#Cross_link_anchor_1750\">set_pretty_mode</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nThe following functions allow to test whether a stream is in a certain mode.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_IO::Mode_get_mode6std::ios__s9;\"></A>\nIO::<A HREF=\"../Alpha_shapes_2_ref/Class_Alpha_shape_2#Enum_Mode\">Mode</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_get_mode.html#Cross_link_anchor_1727\">get_mode</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_ascii6std::ios__s9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_is_ascii.html#Cross_link_anchor_1729\">is_ascii</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_binary6std::ios__s9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_is_binary.html#Cross_link_anchor_1731\">is_binary</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_pretty6std::ios__s9;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"../IOstream_ref/Function_is_pretty.html#Cross_link_anchor_1733\">is_pretty</A> ( std::ios&amp; s)\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>10.1&nbsp;&nbsp;&nbsp;Output Operator</h2>\n<P>\n\nC<SMALL>GAL</SMALL>  defines output operators for classes that are derived\nfrom the class <I>ostream</I>. This allows to write to ostreams\nas <I>cout</I> or <I>cerr</I>, as well as to strstreams\nand fstreams. \nThe output operator is defined for all classes in the C<SMALL>GAL</SMALL> kernel and for the class <I><A HREF=\"../Colors_and_windows_ref/Class_Color.html#Cross_link_anchor_1754\">Color</A></I> as well.\nLet <I>os</I>  be an output stream.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    ostream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     ostream&amp; os &lt;&lt;  Class c<A NAME=\"Function_ostream__operator666ostream__os+_Class_c9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts object <I>c</I> in the stream <I>os</I>. Returns <I>os</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\n<PRE>\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;     Point;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_55\">CGAL::Segment_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;   Segment;\n\nint main()\n{\n    Point p(0,1), q(2,2);\n    Segment s(p,q);\n\n    <A HREF=\"../IOstream_ref/Function_set_pretty_mode.html#Cross_link_anchor_1749\">CGAL::set_pretty_mode</A>(std::cout);\n    std::cout &lt;&lt; p &lt;&lt; std::endl &lt;&lt; q  &lt;&lt; std::endl;\n\n    std::ofstream f(&quot;data.txt&quot;);\n    <A HREF=\"../IOstream_ref/Function_set_binary_mode.html#Cross_link_anchor_1745\">CGAL::set_binary_mode</A>(f);\n    f &lt;&lt; s &lt;&lt; p ;\n\n    return 1;\n}\n</PRE>\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>10.2&nbsp;&nbsp;&nbsp;Input Operator</h2>\n<P>\n\nC<SMALL>GAL</SMALL>  defines input operators for classes that are derived\nfrom the class <I>istream</I>. This allows to read from istreams\nas <I>cin</I>, as well as from strstreams and fstreams.\nThe input operator is defined for all classes in the C<SMALL>GAL</SMALL> kernel.\nLet <I>is</I> be an input stream.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    istream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n     istream&amp; is &gt;&gt;  Class c<A NAME=\"Function_istream__operator996istream__is+_Class_c9;\"></A>\n\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Extracts object <I>c</I> from the stream <I>is</I>. Returns <I>is</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Example</H3>\n<P>\n\n<PRE>\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>.h&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_51\">CGAL::Point_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;     Point;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_55\">CGAL::Segment_2</A>&lt; <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; &gt;   Segment;\n\nint\nmain()\n{\n    Point p, q;\n    Segment s;\n\n    <A HREF=\"../IOstream_ref/Function_set_ascii_mode.html#Cross_link_anchor_1743\">CGAL::set_ascii_mode</A>(std::cin);\n    std::cin &gt;&gt; p &gt;&gt; q;\n\n    std::ifstream f(&quot;data.txt&quot;);\n    <A HREF=\"../IOstream_ref/Function_set_binary_mode.html#Cross_link_anchor_1745\">CGAL::set_binary_mode</A>(f);\n    f &gt;&gt; s &gt;&gt; p;\n\n    return 1;\n}\n</PRE>\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>10.3&nbsp;&nbsp;&nbsp;Stream Support</h2>\n<P>\n\nThree classes are provided by C<SMALL>GAL</SMALL> as adaptors to input and output stream\niterators.  The class <I><A HREF=\"../IOstream_ref/Class_Istream_iterator.html#Cross_link_anchor_1735\">Istream_iterator</A></I> is an input iterator adaptor and \nis particularly useful for classes that are similar but not compatible to \n<I>std::istream</I>.  Similarly, the class <I><A HREF=\"../IOstream_ref/Class_Ostream_iterator.html#Cross_link_anchor_1742\">Ostream_iterator</A></I> is an output \niterator adaptor.  The class <I><A HREF=\"../IOstream_ref/Class_Verbose_ostream.html#Cross_link_anchor_1752\">Verbose_ostream</A></I> can be used as an output \nstream. The stream\noutput operator <I>&lt;&lt;</I> is defined for any type. The class\nstores in an internal state a stream and whether the\noutput is active or not. If the state is active, the stream output\noperator <I>&lt;&lt;</I> uses the internal stream to output its argument. If\nthe state is inactive, nothing happens.\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../IOstream_ref/Chapter_intro.html\">IO Streams</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_10!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38820.0}