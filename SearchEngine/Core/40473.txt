{"text": " Home Trees Indices Help Package CHEM Package datatype Module finger hide private frames no frames Module finger Classes hide private object ABC In this module there are a large number of functions abcd In this module there are a large number of functions Finger This class encapsulates most fingerprint operations PARALLEL SIM ARGS In this module there are a large number of functions PARALLEL ABC ARGS In this module there are a large number of functions ImmutableFinger Functions hide private swig setattr nondynamic self class type name value static 1 swig setattr self class type name value swig getattr self class type name swig repr self FP A args FP A Finger f float tanimoto args tanimoto Finger b1 Finger b2 double tversky args tversky Finger b1 Finger b2 double alpha double beta double tversky ABC args tversky ABC Finger f1 Finger f2 double alpha 1 double beta 1 double FPG to FPS args FPG to FPS Finger in Finger FPP to FPS args FPP to FPS Finger in Finger FPM to FPS args FPM to FPS Finger in Finger FPS A args FPS A Finger f unsigned int FPS A MM args FPS A MM Finger f unsigned int FPP A args FPP A Finger f unsigned int FPP A MM args FPP A MM Finger f unsigned int FPM A args FPM A Finger f unsigned int FPM A MM args FPM A MM Finger f unsigned int FPG A args FPG A Finger f unsigned int FPG A MM args FPG A MM Finger f unsigned int FPS C args FPS C Finger f1 Finger f2 int FPS C MM args FPS C MM Finger f1 Finger f2 int FPP C args FPP C Finger f1 Finger f2 int FPP C MM args FPP C MM Finger f1 Finger f2 int FPM C args FPM C Finger f1 Finger f2 int FPM C MM args FPM C MM Finger f1 Finger f2 int FPG C args FPG C Finger f1 Finger f2 int FPG C MM args FPG C MM Finger f1 Finger f2 int FPStversky args FPStversky Finger f1 Finger f2 double alpha double beta double FPStversky MM args FPStversky MM Finger f1 Finger f2 double alpha double beta double FPSStversky args FPSStversky Finger f1 Finger f2 double alpha double beta double FPSStversky MM args FPSStversky MM Finger f1 Finger f2 double alpha double beta double FPPtversky args FPPtversky Finger f1 Finger f2 double alpha double beta double FPPtversky MM args FPPtversky MM Finger f1 Finger f2 double alpha double beta double FPSPtversky args FPSPtversky Finger f1 Finger f2 double alpha double beta double FPSPtversky MM args FPSPtversky MM Finger f1 Finger f2 double alpha double beta double FPMtversky args FPMtversky Finger f1 Finger f2 double alpha double beta double FPMtversky MM args FPMtversky MM Finger f1 Finger f2 double alpha double beta double FPSMtversky args FPSMtversky Finger f1 Finger f2 double alpha double beta double FPSMtversky MM args FPSMtversky MM Finger f1 Finger f2 double alpha double beta double FPGtversky args FPGtversky Finger f1 Finger f2 double alpha double beta double FPGtversky MM args FPGtversky MM Finger f1 Finger f2 double alpha double beta double FPSGtversky args FPSGtversky Finger f1 Finger f2 double alpha double beta double FPSGtversky MM args FPSGtversky MM Finger f1 Finger f2 double alpha double beta double parallel sim args parallel sim Finger q PyObject fingers int nproc 2 double alpha 1 double beta 1 int mode 1 PyObject In this module there are a large number of functions parallel abc args parallel abc Finger q PyObject fingers int nprocs int mode PyObject parallel sim helper args parallel sim helper void args void parallel abc helper args parallel abc helper void args void finger test unPickleFinger s d isimmut Variables hide private new instancemethod new instancemethod newclass ABC swigregister finger ABC swigregister abcd swigregister finger abcd swigregister Finger swigregister finger Finger swigregister SMP CHUNK finger SMP CHUNK PARALLEL SIM ARGS swigregister finger PARALLEL SIM ARGS s PARALLEL ABC ARGS swigregister finger PARALLEL ABC ARGS s Function Details hide private FP A args FP A Finger f float In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py tanimoto args tanimoto Finger b1 Finger b2 double Tanimoto is a basic symetric measure of similarity that can be called on fingerprinst tanimoto Finger 128 Finger 128 5 it is symetric so f1 Finger 128 5 f2 Finger 128 4 tanimoto f1 f2 tanimoto f2 f1 1 More details can be found at http www daylight com dayhtml doc theory theory finger html tversky args tversky Finger b1 Finger b2 double alpha double beta double Tversky similarity is based on the tanimoto similarity but can be used for fuzzy substructure searching Tversky can be called on fingerprints tversky Finger 128 Finger 128 1 1 5 tversky Finger 128 Finger 128 1 1 tversky Finger 128 Finger 128 1 5 More details can be found at http www daylight com dayhtml doc theory theory finger html tversky ABC args tversky ABC Finger f1 Finger f2 double alpha 1 double beta 1 double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPG to FPS args FPG to FPS Finger in Finger In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPP to FPS args FPP to FPS Finger in Finger In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPM to FPS args FPM to FPS Finger in Finger In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPS A args FPS A Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPS A MM args FPS A MM Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPP A args FPP A Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPP A MM args FPP A MM Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPM A args FPM A Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPM A MM args FPM A MM Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPG A args FPG A Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPG A MM args FPG A MM Finger f unsigned int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPS C args FPS C Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPS C MM args FPS C MM Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPP C args FPP C Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPP C MM args FPP C MM Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPM C args FPM C Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPM C MM args FPM C MM Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPG C args FPG C Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPG C MM args FPG C MM Finger f1 Finger f2 int In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPStversky args FPStversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPStversky MM args FPStversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSStversky args FPSStversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSStversky MM args FPSStversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPPtversky args FPPtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPPtversky MM args FPPtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSPtversky args FPSPtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSPtversky MM args FPSPtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPMtversky args FPMtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPMtversky MM args FPMtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSMtversky args FPSMtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSMtversky MM args FPSMtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPGtversky args FPGtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPGtversky MM args FPGtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSGtversky args FPSGtversky Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py FPSGtversky MM args FPSGtversky MM Finger f1 Finger f2 double alpha double beta double In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py parallel sim args parallel sim Finger q PyObject fingers int nproc 2 double alpha 1 double beta 1 int mode 1 PyObject In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py parallel abc args parallel abc Finger q PyObject fingers int nprocs int mode PyObject In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py parallel sim helper args parallel sim helper void args void In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py parallel abc helper args parallel abc helper void args void In this module there are a large number of functions They are partially organized by different prefixes FP General purpose functions and functions for operating on standard folded fingerprints FPD Bit Decoders used to read fingerprints as binary data This set of functions is used to by the more complex compression schemes to decode fingerprints encoded by golomb py And a few definitions of different compressed types of fingerprints Each of these types has a special digit G S P or M used at times to signal there usage in arguements For example a FPSG FINGER f1 FINGER f2 would take a Sparse fingerprint for f1 and a Golomb fingerprint for f2 FPG Golomb Fingerprints encoded as described in golomb py FPS Sparse fingerprints storing 32 bit integers in system format FPP Modified Elias Gamma MEG I fingerprints as described in golomb py FPM Modified Elias Gamma MEG R fingerprints as described in golomb py Some of these names may seem cryptic Many of them are renamed much prettier names in prettyfinger py Variables Details hide private PARALLEL SIM ARGS swigregister Value finger PARALLEL SIM ARGS swigregister PARALLEL ABC ARGS swigregister Value finger PARALLEL ABC ARGS swigregister Home Trees Indices Help Generated by Epydoc 3 beta1 on Thu Nov 8 17 49 25 2 7 http epydoc sourceforge net", "_id": "http://www.ics.uci.edu/~dock/CHEM_docs/CHEM.datatype.finger-module.html", "title": "chem.datatype.finger", "html": "<?xml version=\"1.0\" encoding=\"ascii\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n  <title>CHEM.datatype.finger</title>\n  <link rel=\"stylesheet\" href=\"epydoc.css\" type=\"text/css\" />\n  <script type=\"text/javascript\" src=\"epydoc.js\"></script>\n</head>\n\n<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"#204080\"\n      alink=\"#204080\">\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n  <tr valign=\"top\">\n    <td width=\"100%\">\n      <span class=\"breadcrumbs\">\n        <a href=\"CHEM-module.html\">Package&nbsp;CHEM</a> ::\n        <a href=\"CHEM.datatype-module.html\">Package&nbsp;datatype</a> ::\n        Module&nbsp;finger\n      </span>\n    </td>\n    <td>\n      <table cellpadding=\"0\" cellspacing=\"0\">\n        <!-- hide/show private -->\n        <tr><td align=\"right\"><span class=\"options\">[<a href=\"javascript:void(0);\" class=\"privatelink\"\n    onclick=\"toggle_private();\">hide&nbsp;private</a>]</span></td></tr>\n        <tr><td align=\"right\"><span class=\"options\"\n            >[<a href=\"frames.html\" target=\"_top\">frames</a\n            >]&nbsp;|&nbsp;<a href=\"CHEM.datatype.finger-module.html\"\n            target=\"_top\">no&nbsp;frames</a>]</span></td></tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<!-- ==================== MODULE DESCRIPTION ==================== -->\n<h1 class=\"epydoc\">Module finger</h1><br /><br />\n<!-- ==================== CLASSES ==================== -->\n<a name=\"section-Classes\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Classes</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-Classes\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger._object-class.html\" class=\"summary-name\">_object</a>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger.ABC-class.html\" class=\"summary-name\">ABC</a><br />\n      * In this module there are a large number of functions.\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger.abcd-class.html\" class=\"summary-name\">abcd</a><br />\n      * In this module there are a large number of functions.\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger.Finger-class.html\" class=\"summary-name\">Finger</a><br />\n      This class encapsulates most fingerprint operations.\n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger._PARALLEL_SIM_ARGS-class.html\" class=\"summary-name\">_PARALLEL_SIM_ARGS</a><br />\n      * In this module there are a large number of functions.\n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger._PARALLEL_ABC_ARGS-class.html\" class=\"summary-name\">_PARALLEL_ABC_ARGS</a><br />\n      * In this module there are a large number of functions.\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger.ImmutableFinger-class.html\" class=\"summary-name\">ImmutableFinger</a>\n    </td>\n  </tr>\n</table>\n<!-- ==================== FUNCTIONS ==================== -->\n<a name=\"section-Functions\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Functions</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-Functions\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"_swig_setattr_nondynamic\"></a><span class=\"summary-sig-name\">_swig_setattr_nondynamic</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">class_type</span>,\n        <span class=\"summary-sig-arg\">name</span>,\n        <span class=\"summary-sig-arg\">value</span>,\n        <span class=\"summary-sig-arg\">static</span>=<span class=\"summary-sig-default\">1</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"_swig_setattr\"></a><span class=\"summary-sig-name\">_swig_setattr</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">class_type</span>,\n        <span class=\"summary-sig-arg\">name</span>,\n        <span class=\"summary-sig-arg\">value</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"_swig_getattr\"></a><span class=\"summary-sig-name\">_swig_getattr</span>(<span class=\"summary-sig-arg\">self</span>,\n        <span class=\"summary-sig-arg\">class_type</span>,\n        <span class=\"summary-sig-arg\">name</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"_swig_repr\"></a><span class=\"summary-sig-name\">_swig_repr</span>(<span class=\"summary-sig-arg\">self</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FP_A\" class=\"summary-sig-name\">FP_A</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FP_A(Finger f) -&gt; float</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#tanimoto\" class=\"summary-sig-name\">tanimoto</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      tanimoto(Finger b1, Finger b2) -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#tversky\" class=\"summary-sig-name\">tversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      tversky(Finger b1, Finger b2, double alpha, double beta) -&gt; \n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#tversky_ABC\" class=\"summary-sig-name\">tversky_ABC</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      tversky_ABC(Finger f1, Finger f2, double alpha=1, double beta=1) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPG_to_FPS\" class=\"summary-sig-name\">FPG_to_FPS</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPG_to_FPS(Finger in) -&gt; Finger</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPP_to_FPS\" class=\"summary-sig-name\">FPP_to_FPS</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPP_to_FPS(Finger in) -&gt; Finger</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPM_to_FPS\" class=\"summary-sig-name\">FPM_to_FPS</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPM_to_FPS(Finger in) -&gt; Finger</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPS_A\" class=\"summary-sig-name\">FPS_A</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPS_A(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPS_A_MM\" class=\"summary-sig-name\">FPS_A_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPS_A_MM(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPP_A\" class=\"summary-sig-name\">FPP_A</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPP_A(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPP_A_MM\" class=\"summary-sig-name\">FPP_A_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPP_A_MM(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPM_A\" class=\"summary-sig-name\">FPM_A</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPM_A(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPM_A_MM\" class=\"summary-sig-name\">FPM_A_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPM_A_MM(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPG_A\" class=\"summary-sig-name\">FPG_A</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPG_A(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPG_A_MM\" class=\"summary-sig-name\">FPG_A_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPG_A_MM(Finger f) -&gt; unsigned int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPS_C\" class=\"summary-sig-name\">FPS_C</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPS_C(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPS_C_MM\" class=\"summary-sig-name\">FPS_C_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPS_C_MM(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPP_C\" class=\"summary-sig-name\">FPP_C</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPP_C(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPP_C_MM\" class=\"summary-sig-name\">FPP_C_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPP_C_MM(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPM_C\" class=\"summary-sig-name\">FPM_C</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPM_C(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPM_C_MM\" class=\"summary-sig-name\">FPM_C_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPM_C_MM(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPG_C\" class=\"summary-sig-name\">FPG_C</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPG_C(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPG_C_MM\" class=\"summary-sig-name\">FPG_C_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPG_C_MM(Finger f1, Finger f2) -&gt; int</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPStversky\" class=\"summary-sig-name\">FPStversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPStversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPStversky_MM\" class=\"summary-sig-name\">FPStversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPStversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSStversky\" class=\"summary-sig-name\">FPSStversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSStversky(Finger f1, Finger f2, double alpha, double beta) -&gt;\n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSStversky_MM\" class=\"summary-sig-name\">FPSStversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSStversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPPtversky\" class=\"summary-sig-name\">FPPtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPPtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPPtversky_MM\" class=\"summary-sig-name\">FPPtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPPtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSPtversky\" class=\"summary-sig-name\">FPSPtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSPtversky(Finger f1, Finger f2, double alpha, double beta) -&gt;\n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSPtversky_MM\" class=\"summary-sig-name\">FPSPtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSPtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPMtversky\" class=\"summary-sig-name\">FPMtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPMtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPMtversky_MM\" class=\"summary-sig-name\">FPMtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPMtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSMtversky\" class=\"summary-sig-name\">FPSMtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSMtversky(Finger f1, Finger f2, double alpha, double beta) -&gt;\n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSMtversky_MM\" class=\"summary-sig-name\">FPSMtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSMtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPGtversky\" class=\"summary-sig-name\">FPGtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPGtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPGtversky_MM\" class=\"summary-sig-name\">FPGtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPGtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSGtversky\" class=\"summary-sig-name\">FPSGtversky</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSGtversky(Finger f1, Finger f2, double alpha, double beta) -&gt;\n      double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#FPSGtversky_MM\" class=\"summary-sig-name\">FPSGtversky_MM</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      FPSGtversky_MM(Finger f1, Finger f2, double alpha, double beta) \n      -&gt; double</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#parallel_sim\" class=\"summary-sig-name\">parallel_sim</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      parallel_sim(Finger q, PyObject fingers, int nproc=2, double alpha=1, \n    double beta=1, int mode=1) -&gt; PyObject\n\n* In this module there are a large number of functions.</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#parallel_abc\" class=\"summary-sig-name\">parallel_abc</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      parallel_abc(Finger q, PyObject fingers, int nprocs, int mode) \n      -&gt; PyObject</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#_parallel_sim_helper\" class=\"summary-sig-name\">_parallel_sim_helper</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      _parallel_sim_helper(void args) -&gt; void</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a href=\"CHEM.datatype.finger-module.html#_parallel_abc_helper\" class=\"summary-sig-name\">_parallel_abc_helper</a>(<span class=\"summary-sig-arg\">*args</span>)</span><br />\n      _parallel_abc_helper(void args) -&gt; void</td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"finger_test\"></a><span class=\"summary-sig-name\">finger_test</span>()</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n      <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n        <tr>\n          <td><span class=\"summary-sig\"><a name=\"_unPickleFinger\"></a><span class=\"summary-sig-name\">_unPickleFinger</span>(<span class=\"summary-sig-arg\">s</span>,\n        <span class=\"summary-sig-arg\">d</span>,\n        <span class=\"summary-sig-arg\">isimmut</span>)</span></td>\n          <td align=\"right\" valign=\"top\">\n            \n            \n          </td>\n        </tr>\n      </table>\n      \n    </td>\n  </tr>\n</table>\n<!-- ==================== VARIABLES ==================== -->\n<a name=\"section-Variables\"></a>\n<table class=\"summary\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Variables</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-Variables\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"new_instancemethod\"></a><span class=\"summary-name\">new_instancemethod</span> = <code title=\"new.instancemethod\">new.instancemethod</code>\n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"_newclass\"></a><span class=\"summary-name\">_newclass</span> = <code title=\"0\">0</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"ABC_swigregister\"></a><span class=\"summary-name\">ABC_swigregister</span> = <code title=\"_finger.ABC_swigregister\">_finger.ABC_swigregister</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"abcd_swigregister\"></a><span class=\"summary-name\">abcd_swigregister</span> = <code title=\"_finger.abcd_swigregister\">_finger.abcd_swigregister</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"Finger_swigregister\"></a><span class=\"summary-name\">Finger_swigregister</span> = <code title=\"_finger.Finger_swigregister\">_finger.Finger_swigregister</code>\n    </td>\n  </tr>\n<tr>\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a name=\"SMP_CHUNK\"></a><span class=\"summary-name\">SMP_CHUNK</span> = <code title=\"_finger.SMP_CHUNK\">_finger.SMP_CHUNK</code>\n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger-module.html#_PARALLEL_SIM_ARGS_swigregister\" class=\"summary-name\">_PARALLEL_SIM_ARGS_swigregister</a> = <code title=\"_finger._PARALLEL_SIM_ARGS_swigregister\">_finger._PARALLEL_SIM_ARGS_s<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n<tr class=\"private\">\n    <td width=\"15%\" align=\"right\" valign=\"top\" class=\"summary\">\n      <span class=\"summary-type\">&nbsp;</span>\n    </td><td class=\"summary\">\n        <a href=\"CHEM.datatype.finger-module.html#_PARALLEL_ABC_ARGS_swigregister\" class=\"summary-name\">_PARALLEL_ABC_ARGS_swigregister</a> = <code title=\"_finger._PARALLEL_ABC_ARGS_swigregister\">_finger._PARALLEL_ABC_ARGS_s<code class=\"variable-ellipsis\">...</code></code>\n    </td>\n  </tr>\n</table>\n<!-- ==================== FUNCTION DETAILS ==================== -->\n<a name=\"section-FunctionDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Function Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-FunctionDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"FP_A\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FP_A</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FP_A(Finger f) -&gt; float</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"tanimoto\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">tanimoto</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>tanimoto(Finger b1, Finger b2) -&gt; double</p>\n  Tanimoto is a basic, symetric measure of similarity that can be called\n  on fingerprinst:\n<pre class=\"py-doctest\">\n<span class=\"py-prompt\">&gt;&gt;&gt; </span>tanimoto(Finger(<span class=\"py-string\">'128.**-'</span>), Finger(<span class=\"py-string\">'128.*'</span>))\n<span class=\"py-output\">0.5</span></pre>\n  <p>it is symetric, so: &gt;&gt;&gt; f1=Finger(128,.5) &gt;&gt;&gt; \n  f2=Finger(128,.4) &gt;&gt;&gt; tanimoto(f1,f2)==tanimoto(f2,f1) 1</p>\n  More details can be found at: \n  http://www.daylight.com/dayhtml/doc/theory/theory.finger.html\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"tversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">tversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>tversky(Finger b1, Finger b2, double alpha, double beta) -&gt; \n  double</p>\n  <p>Tversky similarity is based on the tanimoto similarity but can be used\n  for fuzzy substructure searching.</p>\n  <p>Tversky can be called on fingerprints: &gt;&gt;&gt; \n  tversky(Finger('128.**-'), Finger('128.*'), 1, 1) 0.5 &gt;&gt;&gt; \n  tversky(Finger('128.**-'), Finger('128.*'), 0, 1) 1.0 &gt;&gt;&gt; \n  tversky(Finger('128.**-'), Finger('128.*'), 1, 0) 0.5</p>\n  More details can be found at: \n  http://www.daylight.com/dayhtml/doc/theory/theory.finger.html\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"tversky_ABC\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">tversky_ABC</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>tversky_ABC(Finger f1, Finger f2, double alpha=1, double beta=1) -&gt;\n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPG_to_FPS\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPG_to_FPS</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPG_to_FPS(Finger in) -&gt; Finger</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPP_to_FPS\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPP_to_FPS</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPP_to_FPS(Finger in) -&gt; Finger</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPM_to_FPS\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPM_to_FPS</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPM_to_FPS(Finger in) -&gt; Finger</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPS_A\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPS_A</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPS_A(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPS_A_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPS_A_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPS_A_MM(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPP_A\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPP_A</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPP_A(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPP_A_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPP_A_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPP_A_MM(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPM_A\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPM_A</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPM_A(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPM_A_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPM_A_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPM_A_MM(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPG_A\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPG_A</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPG_A(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPG_A_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPG_A_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPG_A_MM(Finger f) -&gt; unsigned int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPS_C\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPS_C</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPS_C(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPS_C_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPS_C_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPS_C_MM(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPP_C\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPP_C</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPP_C(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPP_C_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPP_C_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPP_C_MM(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPM_C\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPM_C</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPM_C(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPM_C_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPM_C_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPM_C_MM(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPG_C\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPG_C</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPG_C(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPG_C_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPG_C_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPG_C_MM(Finger f1, Finger f2) -&gt; int</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPStversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPStversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPStversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPStversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPStversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPStversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSStversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSStversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSStversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSStversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSStversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSStversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPPtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPPtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPPtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPPtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPPtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPPtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSPtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSPtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSPtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSPtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSPtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSPtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPMtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPMtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPMtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPMtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPMtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPMtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSMtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSMtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSMtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSMtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSMtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSMtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPGtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPGtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPGtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPGtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPGtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPGtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSGtversky\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSGtversky</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSGtversky(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"FPSGtversky_MM\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">FPSGtversky_MM</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>FPSGtversky_MM(Finger f1, Finger f2, double alpha, double beta) -&gt; \n  double</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"parallel_sim\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">parallel_sim</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <pre class=\"literalblock\">\n\nparallel_sim(Finger q, PyObject fingers, int nproc=2, double alpha=1, \n    double beta=1, int mode=1) -&gt; PyObject\n\n* In this module there are a large number of functions. They are partially organized by different \n* prefixes.\n*\n* FP = General purpose functions and functions for operating on standard folded fingerprints.\n* \n* FPD = Bit Decoders used to read fingerprints as binary data. This set of functions is used to\n* by the more complex compression schemes to decode fingerprints encoded by golomb.py.\n*\n* And a few definitions of different compressed types of fingerprints. Each of these types has a\n* special digit (G,S,P, or M) used at times to signal there usage in arguements. For example,\n* a FPSG???(FINGER *f1, FINGER *f2) would take a Sparse fingerprint for f1 and a Golomb fingerprint\n* for f2.\n*\n* FPG = Golomb Fingerprints encoded as described in golomb.py\n* FPS = Sparse fingerprints, storing 32-bit integers in system format.\n* FPP = Modified Elias Gamma MEG-I fingerprints as described in golomb.py.\n* FPM = Modified Elias Gamma MEG-R fingerprints as described in golomb.py.\n\nSome of these names may seem cryptic. Many of them are renamed much prettier names in prettyfinger.py.\n\n</pre>\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"parallel_abc\"></a>\n<div>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">parallel_abc</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>parallel_abc(Finger q, PyObject fingers, int nprocs, int mode) -&gt; \n  PyObject</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"_parallel_sim_helper\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">_parallel_sim_helper</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>_parallel_sim_helper(void args) -&gt; void</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"_parallel_abc_helper\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <tr valign=\"top\"><td>\n  <h3 class=\"epydoc\"><span class=\"sig\"><span class=\"sig-name\">_parallel_abc_helper</span>(<span class=\"sig-arg\">*args</span>)</span>\n  </h3>\n  </td><td align=\"right\" valign=\"top\"\n    >&nbsp;\n    </td>\n  </table>\n  \n  <p>_parallel_abc_helper(void args) -&gt; void</p>\n  <p>* In this module there are a large number of functions. They are \n  partially organized by different * prefixes. * * FP = General purpose \n  functions and functions for operating on standard folded fingerprints. * \n  * FPD = Bit Decoders used to read fingerprints as binary data. This set \n  of functions is used to * by the more complex compression schemes to \n  decode fingerprints encoded by golomb.py. * * And a few definitions of \n  different compressed types of fingerprints. Each of these types has a * \n  special digit (G,S,P, or M) used at times to signal there usage in \n  arguements. For example, * a FPSG???(FINGER *f1, FINGER *f2) would take a\n  Sparse fingerprint for f1 and a Golomb fingerprint * for f2. * * FPG = \n  Golomb Fingerprints encoded as described in golomb.py * FPS = Sparse \n  fingerprints, storing 32-bit integers in system format. * FPP = Modified \n  Elias Gamma MEG-I fingerprints as described in golomb.py. * FPM = \n  Modified Elias Gamma MEG-R fingerprints as described in golomb.py.</p>\n  Some of these names may seem cryptic. Many of them are renamed much \n  prettier names in prettyfinger.py.\n  <dl class=\"fields\">\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== VARIABLES DETAILS ==================== -->\n<a name=\"section-VariablesDetails\"></a>\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr bgcolor=\"#70b0f0\" class=\"table-header\">\n  <td colspan=\"2\" class=\"table-header\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr valign=\"top\">\n        <td align=\"left\"><span class=\"table-header\">Variables Details</span></td>\n        <td align=\"right\" valign=\"top\"\n         ><span class=\"options\">[<a href=\"#section-VariablesDetails\"\n         class=\"privatelink\" onclick=\"toggle_private();\"\n         >hide private</a>]</span></td>\n      </tr>\n    </table>\n  </td>\n</tr>\n</table>\n<a name=\"_PARALLEL_SIM_ARGS_swigregister\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">_PARALLEL_SIM_ARGS_swigregister</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\n_finger._PARALLEL_SIM_ARGS_swigregister\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<a name=\"_PARALLEL_ABC_ARGS_swigregister\"></a>\n<div class=\"private\">\n<table class=\"details\" border=\"1\" cellpadding=\"3\"\n       cellspacing=\"0\" width=\"100%\" bgcolor=\"white\">\n<tr><td>\n  <h3 class=\"epydoc\">_PARALLEL_ABC_ARGS_swigregister</h3>\n  \n  <dl class=\"fields\">\n  </dl>\n  <dl class=\"fields\">\n    <dt>Value:</dt>\n      <dd><table><tr><td><pre class=\"variable\">\n_finger._PARALLEL_ABC_ARGS_swigregister\n</pre></td></tr></table>\n</dd>\n  </dl>\n</td></tr></table>\n</div>\n<br />\n<!-- ==================== NAVIGATION BAR ==================== -->\n<table class=\"navbar\" border=\"0\" width=\"100%\" cellpadding=\"0\"\n       bgcolor=\"#a0c0ff\" cellspacing=\"0\">\n  <tr valign=\"middle\">\n  <!-- Home link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"CHEM-module.html\">Home</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Tree link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"module-tree.html\">Trees</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Index link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"identifier-index.html\">Indices</a>&nbsp;&nbsp;&nbsp;</th>\n\n  <!-- Help link -->\n      <th>&nbsp;&nbsp;&nbsp;<a\n        href=\"help.html\">Help</a>&nbsp;&nbsp;&nbsp;</th>\n\n      <th class=\"navbar\" width=\"100%\"></th>\n  </tr>\n</table>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%%\">\n  <tr>\n    <td align=\"left\" class=\"footer\">\n    Generated by Epydoc 3.0beta1 on Thu Nov  8 17:49:25 2007\n    </td>\n    <td align=\"right\" class=\"footer\">\n      <a href=\"http://epydoc.sourceforge.net\">http://epydoc.sourceforge.net</a>\n    </td>\n  </tr>\n</table>\n\n<script type=\"text/javascript\">\n  <!--\n  // Private objects are initially displayed (because if\n  // javascript is turned off then we want them to be\n  // visible); but by default, we want to hide them.  So hide\n  // them unless we have a cookie that says to show them.\n  checkCookie()\n  // -->\n</script>\n  \n</body>\n</html>\n", "id": 40473.0}