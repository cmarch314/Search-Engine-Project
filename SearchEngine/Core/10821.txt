{"text": "Program 1 Iteration and Major Data Types List Tuple Set and Dict and Open for files ICS 33 Intermediate Programming Introduction This programming assignment is designed to ensure that you know how to use combinations of Python s most important data types to model and compactly write code that solves a wide variety of different programming problems The kind of abstract thinking that goes into modeling solutions to these programming problems with these data types and iteration over them is critical to your development as computer scientists There are five parts to this assignment In each you will be asked to write a module that contains a few functions and a script at the bottom which ties these functions together to solve the problem You should download the program1 project folder and use it to create an Eclipse project The project folder contains files for all the modules in which to write your functions and scripts it also contains all the data files that you need to test debug your modules finally it contains all the batch self check files I will use when grading your programs In your modules you may import additional standard courselib modules and you may write additional helper functions You should work on this assignment in pairs with someone in your lab section Try to find someone who lives near you with similar programming skills and work habits schedule e g talk about whether you prefer to work mornings nights or weekends what kind of commitment you will make to submit program early If you believe that it is impossible for you to work with someone because of some special reason s you should send me email stating them and asking for special permission to work alone which I do grant but not frequently Only one student should submit all parts of the the assignment but both students UCInetID and name should appear in a comment at the top of each submitted py file A special grading program reads this information The format is a comment starting with Submitter and Partner when working with a partner followed by a colon followed by the student s UCInetID in all lower case followed by the student s name in parentheses last name comma first name capitalized appropriately If you omit this information or do not follow this exact form it will require extra work for us to grade your program so we will deduct points For example if Romeo Montague whose UCInetID is romeo1 submitted a program that he worked on with his partner Juliet Capulet whose UCInetID is jcapulet the comment at the top of each py file would appear as Submitter romeo1 Montague Romeo Partner jcapulet Capulet Juliet We certify that we worked cooperatively on this programming assignment according to the rules for pair programming If you do not know what the terms cooperatively and or rules for pair programming mean please read about Pair Programming before starting this assignment Please turn in each program as you finish it so that I can more accurately assess the progress of the class as a whole during this assignment Print this document and carefully read it marking any parts that contain important detailed information that you find for review before you turn in the files The code you write should be as elegant and compact as possible using appropriate Python idioms You should familiarize yourselves with the safe open function in the goody module and all the functions in the prompt module both of which you should have installed in your courselib folder as part of the Eclipse Python installation Recall how to use the sep and end parameters in the print function This assignment has 5 parts pairs should work on each part together not split them up and do them separately Parts 1 3 are going to be worth 12 points each parts 4 5 are to be worth 7 points each This skewing of points towards the simpler parts means students finishing the first 3 parts correctly will yield a 72 average those finishing the first 4 parts correctly will have an 86 average but to get an A on this assignment requires solving all parts correctly Remember that I m going to be running MOSS on all the parts of this assignment Finally reread the section on Time Management from Programming Assignment before starting this assignment IMPORTANT I will grade all these programs automatically using the batch self check files provided in the download Use the driver program explored in Programming Assignment to run the batch self check files in this assignment debug any errors that they produce But test your code first to match the Sample Interactions shown for each problem when those results are correct use the batch self check files Finally if a submitted Python module contains even one syntax error it will fail all its batch self checks so ensure that you submit modules with no syntax errors Python sometimes adds strange imports at the top of your file ensure that all your imports are reasonable IMPORTANT Before starting this assignment download the xref project folder which contains a small Python script xref py that produces a cross reference of all the words converted to lower case in a file where words appear with spaces between them see xrefin txt for an example the words are listed in alphabetic order followed by a set i e no duplicates of the line numbers it appears on listed in increasing numeric order Before solving the problems in this programming assignment ensure you understand all the details of how this program works look at features and functions like safe open defaultdict and how it is used enumerate rstrip and lower split and join sorted for loops with two unpacked indexes the two comprehensions in the call to max and join and format These are the building blocks for many parts of this assignment explore and experiment with this code to understand how all the parts work together to achieve the desired result Run this code on more complicated data files Problem 1 Reachability Problem Summary Write the required functions and script that prompts the user for the name of a file representing a graph reads the file storing the graph in a dictionary prints the graph dictionary in a special form repeatedly prompts the user for a starting node name rejecting those not in the graph computes and prints all the node names that are reachable from it by following edges in the graph Input and Output Read a file of pairs of node names representing edges in a directed graph building a dictionary use a dict or better yet a defaultdict whose key is a str source node name and whose associated value is a set of str destination node names that are each reachable directly from the source node name key We annotate this dictionary as str str In the file two nodes names appear on each line first the source node name then the destination node name with these node names which may be entire words not just single characters separated by one semicolon character For example the input file graph1 txt contains the following lines which could appear in this order or any other order c f b d a c c e d g a b e d f g f d which represent the graph Print the graph one source node name per line followed by the set of all the destination node names that the source can immediately reach The graph above would print as Graph source destination edges a b c b d c e f d g e d f d g Note that the source node namess are sorted alphabetically the set of desintation node names associated with each source appear in a list whose values are also sorted alphabetically it makes no sense to talk about sorted sets Note that because node g is not a source node it is only a destination node it does not appear first on any line and appears only in the sets for source nodes d and f There are multiple data files for this program graph1 txt shown above graph2 txt and graph3 txt test debug your program on the first file when you are done test it on the remaining files Draw the graph represented by each file to ensure that your code correctly prints it and computes the node names reachable from any source node which you can do by eyeballing the graphs they are small Repeatedly prompt the user for a starting node name in the graph until the user enters quit and compute and print all the node names that are reachable from it by following edges in the graph Reject any node name that is not present in the graph An example interaction processing the graph above might be Enter starting node name e From e the reachable node names are g e d Enter starting node x Entry Error x Illegal not a source node Please enter a legal String Enter starting node a From a the reachable nodes are g f e d c b a Enter starting node quit Functions and Script Write the following functions and script I am providing line counts not as requirements but to indicate the lengths of well written Pythonic code read graph has an open file parameter it returns the dictionary representing the graph body is 5 lines graph as str has a dictionary parameter representing the graph it returns a multi line string each line is ended by n which when printed shows the contents of the graph in the appropriate textual form body is 4 lines can you do it in 1 reachable has a dictionary parameter representing the graph and a str start node in the graph technically a key in the dictionary it returns a set of all the nodes reachable from it by following edges in the graph Hint I used the get dictionary function which allows a second argument that specifies what to do if the first argument key is not in the dictionary because this function should not mutate the dictionary body is 9 lines Write a script at the bottom of this module in if name main that prompts the user for the file storing the graph and start node rejecting any string that is not a source node in the graph or the word quit calls these functions to solve the problem and print the appropriate information the graph and the set containing all the node labels body is 9 lines Here is the basic algorithm for computing reachability it is simple to explain and not very complicated to implement But you have to understand these instructions and carefully translate them into Python You should hand simulate this algorithm using the graph above and verify that it produces the results you expect before coding the algorithm in Python You might be tempted to use recursion but please don t unless recursion is done very carefully reachable will run forever on graphs that contain cycles one of the input files is a graph that contains cycles To compute all the reachable nodes in a graph create a set initially empty of reached nodes and a list initially containing the parameter start node of nodes that we are going to explore to find nodes they can reach While the exploring list still has nodes remove the first one recall the pop method for lists and put it into the reached set for all its associated destination nodes that are not already in the reached set put them in the exploring list When the exploring list becomes empty can you argue that this always will happen there is no infinite looping return the reached set When debugging this algorithm print the reachable set and exploring list after every interesting change or use the debugger to observe these changes Sample Interaction The program as specified will have the following interaction user typed information appears in italics Your output should match this one sets will match if they have the same contents independent of their order You should also check that it works for other starting nodes and a variety of starting nodes in the other graphs Enter file with graph graph1 txt Graph source destination edges a b c b d c e f d g e d f d g Enter starting node e From e the reachable nodes are g e d Enter starting node x Entry Error x Illegal not a source node Please enter a legal String Enter starting node a From a the reachable nodes are g f e d c b a Enter starting node quit Problem 2 Instant Runoff Voting Problem Summary Write the required functions and script that prompts the user for the name of a a file representing the preferences of a sequence of voters reads the file storing its information in a dictionary prints the voter preferences dictionary in a special form repeatedly displays the vote count for ballots sorted both by candidate name and numerically eliminating from the election the candidate s receiving the fewest votes until one candidate the winner or no candidates remain This form of election is known as instant runoff voting Every voter submits preferences that rank all the candidates in the election from highest preference candidate most favorite to lowest preference candidate least favorite we will use a list for this purpose where earlier in the list means higher preference All the candidates appear on the first ballot so each voter votes for his highest preference candidate Then the candidate s with the fewest number of votes are removed from the election if more than one candidate receives the least number of votes all with that number are removed from the election During the second ballot votes are allowed only for the remaining candidates there is at least 1 fewer candidate If a voter s highest preference candidate has been removed from the election then his her second ranked candidate should receive the vote likewise if his her second ranked candidate has been removed from the election then his her third ranked candidate should receive the vote this process continues until a voter voters for his her highest preference candidate who is still in the election The number of votes cast in each ballot should always be the same as the number of voters each voter votes for his her most preferred candidate who is still in election This ballot process continues until either 1 candidate remains or candidates remain meaning that all the remaining candidates tallied the same number of votes and all were removed Do not attempt to write Python code to solve this problem until you understand this voting algorithm and can apply it to the data specified below Input and Output Read a file of voters and their ranking of the candidates highest to lowest preference separated by semicolons building a dictionary whose key is each voter and whose associated value is a list of candidates ranked by that voter they appear in the file in order from highest to lowest preference We annotate this dictionary as str str In the file the voter s name appears first followed by the names of all the candidates in the election in highest to lowest preference names may be entire words not just single characters separated by one semicolon character For example the input file votepref1 txt contains the following lines which could appear in this order or any other A X Y Z B Y Z X C Y Z X D Z X Y E Z X Y The first line means voter A ranks candidate X first candidate Y second and candidate Z third The second line means voter B ranks candidate Y first candidate Z second and candidate X third Each line will have a unique voter and a permutation of all the candidates in the election Print each voter on a separate line followed by his her preferences That is each line contains the voter and his her complete ranking of the candidates For example the file above would print as Voter Preferences A X Y Z B Y Z X C Y Z X D Z X Y E Z X Y Note that the voter names are sorted alphabetically the list of preferences appears in the same order they appeared in the file There are multiple data files for this program votepref1 txt votepref2 txt votepref3 txt and votepref4 txt test debug your program on the first file when you are done test it on the remaining files Algorithm Start with a set of all the candidates Evaluate the ballot to determine how many votes each candidate received Print this vote count two ways sorted alphabetically and sorted numerically in decreasing order Remove the candidate s receiving the fewest votes and repeat this process until only one or no candidates remain Finally print the outcome of the election a single candidate winner or a tie An example interaction processing the preferences above might be Vote count on ballot 1 with candidates alphabetically X Y Z X 1 Y 2 Z 2 Vote count on ballot 1 with candidates numerical Y X Z Y 2 Z 2 X 1 Vote count on ballot 2 with candidates alphabetically Y Z Y 3 Z 2 Vote count on ballot 2 with candidates numerical Y Z Y 3 Z 2 Winner is Y The first ballot consisted of all three candidates X Y and Z For this ballot the votes were counted and printed candidate X received the fewest number of votes so he she is eliminated from the next ballot The second ballot consisted of two candidates Y and Z For this ballot A votes for Y who is his her second highest preference because X his first highest preference was removed from the election B through E vote for their highest preference candidate who all remain in the election These votes are counted and printed candidate Z received the fewest number of votes so is eliminated from the next ballot There is only one candidate remaining so Y is declared the winner An alternative outcome might be No winner election is a tie among the candidates remaining on the last ballot Functions and Script Write the following functions and script I am providing line counts not as requirements but to indicate the lengths of well written Pythonic code read voter preferences has an open file parameter it returns the dictionary representing each voter and his her preferences body is 5 lines dict as str has a dictionary key function default None and bool default False as parameters it returns a multi line string each line is ended by n which when which when printed shows the contents of the dictionary in the appropriate textual form The function determines the ordering and the bool determines whether to reverse it like the key and reverse parameters used to sort sorted in Python This function is used to print both the voter preference dictionary and the vote count dictionary for each ballot body is 4 lines can you do it in 1 evaluate ballot has a dictionary of voter preferences see read voter preferences and a set of the remaining candidates as parameters it returns a dictionary whose keys are these candidates and whose values are the number of votes they received on this ballot based on the description of the instant runnoff voting algorithm Remember to count only one vote per voter for his her highest ranked candidate who is still in the election hint I used a break statement in one loop body is 7 lines remaining candidates has a dictionary as a parameter whose keys are candidates and whose values are the number of votes they received see evaluate ballot it returns a set containing all those candidates remaining in the election the one s receiving the fewest number of votes are absent Note that if all the candidates receive the same number of votes then this function returns an empty set body is 2 lines run election has an open file parameter it returns a set that is empty signifying no winner for this election or contains one value the winner of the election In the process of computing its result to return it calls the functions above and prints all the required information see the Sample Interaction below body is 13 lines Write a script at the bottom of this module in if name main that prompts the user for the file storing the voter preferences and calls run election to do this task Sample Interaction The program as specified will have the following interaction user typed information appears in italics Your output should match this one Enter file with voter preferences votepref1 txt Voter Preferences A X Y Z B Y Z X C Y Z X D Z Y X E Z Y X Vote count on ballot 1 with candidates alphabetically Z Y X X 1 Y 2 Z 2 Vote count on ballot 1 with candidates numerical Y X Z Y 2 Z 2 X 1 Vote count on ballot 2 with candidates alphabetically Y Z Y 3 Z 2 Vote count on ballot 2 with candidates numerical Y Z Y 3 Z 2 Winner is Y You can also try processing the votepref2 txt file which leads to a No winner result votepref3 txt and votepref4 txt Problem 3 Finite Automata Problem Summary Write the required functions and script that prompts the user for the name of a file representing a finite automaton indicating its states and input state transitions reads the information in the file storing the finite automaton in a dictionary prints the finite automaton dictionary in a special form prompts the user for the name of a file storing the start state and inputs to process each line in the file contains this combination repeatedly processes these lines computing the results of the finite automaton on each input and then prints the results Note that a finite automaton is really a program in this problem we are reading a program from a file and then executing it running the finite automaton on various inputs So we are really writing a compiler interpreter for a small programming language A finite automaton FA is an machine that is sometimes called a Deterministic Finite Automaton DFA see the next problem for an NDFA a non deterministic finite automaton An FA is described by its states and its transitions each transition for a state specifies an input and what state in the FA that input leads to We can illustrate an FA as a graph with state labels in circles and edge labels for transitions see below Input and Output Read a file that describes a FA each line contains a state and an arbitrary number of input state transitions Build a dictionary such that each key is a str state and whose associated value is another dictionary specifying all the transitions from that state this second dictionary has keys that are str inputs and associated values are str states The first token on each line is the str state and the remaining tokens always coming in pairs are str inputs and their resulting states All tokens which can comprise any number of characters are separated by one semicolon character We annotate this dictionary as str str str For example the input file faparity txt contains the following lines which could appear in this order or any other and still specify the same FA even even 1 odd odd odd 1 even Here is a picture of the parity FA It graphically illustrates the two states even and odd and their transitions using inputs and 1 that always lead back to one of these two states Here the state even meaning it has seen an even number of 1 inputs so far is a key in the main dictionary It s value is a dictionary with two key value pairs even and 1 odd It means that in the even state if the input is a the FA stays in the even state if the input is a 1 the FA goes to the odd state And similarly the next line means that for the odd state if the input is a the FA stays in the odd state if the input is a 1 the FA goes back to the even state So seeing an input of keeps the FA in the same state seeing an input of 1 flips the FA into the other state Print the finite automaton one state and its transitions per line the states are printed alphabetically and the transition dictionary for each state is printed as a list of input state items tuples such that these are printed alphabetically by the inputs For example the file above would print as Finite Automaton Description even transitions even 1 odd odd transitions odd 1 even Note that there are multiple data files for this program faparity txt and fadivisibleby3 txt test debug your program on the first file when you are done test it on the last file Draw the FA represented by each for to ensure that your code correctly prints and computes with it Important This task is not to write a Python code that simulates the Parity FA it is to write code that simulates any FA whose description it reads from a file Next repeatedly read and process lines from a second input file computing the results of the finite automaton running on the specified start state and its inputs then print out the results in a special form Each line in the file contains a start state followed by a sequence of inputs all separated by semicolons The start state will be a state in the FA it is a key in the outer dictionary the inputs may specify legal or illegal transitions may or may not be keys in some inner dictonary For example the input file fainputparity txt contains the following three lines even 1 1 1 1 even 1 1 1 x odd 1 1 1 1 The first line means the start state is even and the inputs are 1 1 1 and 1 The result of processing each line is to print the start state and then each input and the new state it transitions to and finally print the stop state For the parity FA and the first line in this file it should print Start state even input 1 new state odd input new state odd input 1 new state even input 1 new state odd input new state odd input 1 new state even Stop state even Note that the second line contains an input x which is not a legal input allowed in any state any such input should stop the simulation for that line only continuing to start a new simulation for all following lines as illustrated in the Sample Interaction Functions and Script Write the following functions and script I am providing line counts not as requirements but to indicate the lengths of well written Pythonic code read fa has an open file parameter it returns the dictionary representing the finite automaton hint I used splicing and the zip function to build the inner dictionaries body is 6 lines fa as str has a dictionary parameter representing the FA it returns a multi line string each line is ended by n which when printed shows the contents of the FA in the appropriate textual form body is 4 lines can you do it in 1 process has a dictionary parameter representing the FA a str parameter representing the start state and a list parameter representing a list of str inputs it returns a list that contains the start state followed by tuples that show the input and resulting state after each transition For the example shown above process returns the following list even 1 odd odd 1 even 1 odd odd 1 even Finally if an input is illegal is not the key in some transition for the current state say x for the parity FA then process should terminate with the last tuple in the list indicating a problem x None body is 9 lines interpret has a list parameter the list result produced by process it returns a multi line string each line is ended by n which when printed illustrates the results of processing an FA on an input in the appropriate textual form See how it prints the example list argument shown above in the output further above Also see the Sample Interaction below to see how it prints input errors see the middle example body is 9 lines Write a script at the bottom of this module in if name main that prompts the user for the file describing the FA prints it prompts the user for the file containing lines of start states and input simulates the FA on each line printing the results in the appropriate textual form body is 7 lines Sample Interaction The program as specified will have the following interaction user typed information appears in italics Your output should match this one Enter file with finite automaton faparity txt Finite Automaton even transitions even 1 odd odd transitions odd 1 even Enter file with start state and input fainputparity txt Starting new simulation Start state even Input 1 new state odd Input new state odd Input 1 new state even Input 1 new state odd Input new state odd Input 1 new state even Stop state even Starting new simulation Start state even Input 1 new state odd Input new state odd Input 1 new state even Input 1 new state odd Input new state odd Input x illegal input simulation terminated Stop state None Starting new simulation Start state odd Input 1 new state even Input new state even Input 1 new state odd Input 1 new state even Input new state even Input 1 new state odd Stop state odd You can also try the fadivisibleby3 txt finite automaton file which determines whether an integer sequence of digits is divisible by 3 it is divisible if the finite automaton stops in state rem Its input file fainputdivisibleby3 txt tries the number 12 435 711 which is divisible by 3 and number 823 which is not divisible by 3 dividing 823 by 3 leaves a remainder of 1 Problem 4 Non Deterministic FA Problem Summary Write the required functions and script that solve for a Non Deterministic Finite Automaton the same problem that was solved for a Deterministic Finite Automaton in Problem 3 above Read about the differences between these two automata below Hint Adapt your code for the FA problem to solve the more general NDFA problem A non deterministic finite automaton NDFA is machine described by its states and its transitions each transition for a state specifies an input and a set of states more than one is allowed that input can lead to sets with more than one states is what makes it non deterministic We can illustrate a NDFA as a graph with state labels in circles and edge labels for transitions see below The critical difference between an FA and an NDFA is that an NDFA can have multiple edges with the same label going to different states we ll see how to represent and simulate such transitions below Input and Output Read a file that describes a NDFA each line contains a state and an arbitrary number of input state transitions Build a dictionary such that each key is a str state and whose associated value is another dictionary specifying all the transitions from that state this second dictionary has keys that are str inputs and associated values that are sets of str states all the states a particular input can lead to The first token on each line is the str state and the remaining tokens always coming in pairs are str inputs and states All tokens which can comprise any number of characters are separated by one semicolon character We annotate this dictionary as str str str For example the input file ndfaendin 1 txt contains the following lines which could appear in this order or any other and still specify the same NDFA start start 1 start near near 1 end end Here is a picture of the endin 1 NDFA It graphically illustrates the three states start near and end and their transitions using inputs and 1 Here the state start is a key in the main dictionary It s value is a dictionary with two key value pairs mapping to the set containing start and near and 1 mapping to the set containing just start It means that in the start state if the input is a the NDFA can stay in the start state or it can go to the near state if the input is a 1 the NDFA must stay in the start state And similarly the next line means that in the near state if the input is a 1 the NDFA must go into the end state The last line means that the end state has no transitions out of it Print the NDFA one state and its transitions per line the states are printed alphabetically and the transition dictionary for each state is printed as a list of input set of state items tuples such that these are printed alphabetically by the inputs Note that the state end is a key in the main dictionary whose associated transitions are an empty dictionary For example the file above would produce Non Deterministic Finite Automaton end transitions near transitions 1 end start transitions near start 1 start Note that there are multiple data files for this program ndfaendin 1 txt and ndfatrain txt and ndfare txt test debug your program on the first file when you are done test it on the last file Draw the FA represented by each for to ensure that your code correctly prints and computes with it Next repeatedly read and process lines from a second input file computing the results of the non determinisitc finite automaton on the specified start state and its inputs then print out the results in a special form Each line in the file contains a start state followed by a sequence of inputs all separated by semicolons The start state will be a state in the FA it is a key in the outer dictionary the inputs may specify legal or illegal transitions may or may not be keys in some inner dictionary For example the input file ndfainputendin 1 txt contains the following two lines start 1 1 1 1 start 1 1 1 For example the first line means the start state is start and the inputs 1 1 1 and 1 The result of processing each line is to print the start state and then each input and the new states plural it could transition to the could is what makes it non deterministic and finally print the stop states For the ndfaendin 1 NDFA and the first line in this file it should print Start state start Input 1 new possible states start Input new possible states near start Input 1 new possible states end start Input 1 new possible states start Input new possible states near start Input 1 new possible states end start Stop state s end start Note that the set of states it might be in are printed as a alphabetized list Also note especially that in the start state if the input is a then the NDFA can either remain in the start state or go into the near state For this program we keep track of all states that the NDFA can be in using a set of new possible states For the next input 1 we can be either in the start state from the start state an input of 1 allows us to stay in the start state or the end state from the near state an input of 1 allows us to transition to the end state Thus we keep track of the set of states the NDFA can be in and the new set of states the NDFA can be in after processing the next input In this example because end is included in the stop states this input does end in 1 For any state that does not have a transition specifying the current input ignore that input for that state For example if near is one of the possible states and is the input ignore the for the near state Functions and Script Write the following functions and script I am providing line counts not as requirements but to indicate the lengths of well written Pythonic code read ndfa has an open file parameter it returns the dictionary representing the non deterministic finite automaton hint I used splicing and the zip function to build the inner dinctionaries and I called the setdefault function for the inner dict alternatively I could have built it as defaultdicts from the standard collections module body is 9 lines ndfa as str has a dictionary parameter representing the FA it returns a multi line string each line is ended by n which when printed shows the contents of the NDFA in the appropriate textual form body is 4 lines can you do it in 1 process has a dictionary parameter representing the NDFA a str parameter representing the start state and a list parameter representing a list of str inputs it returns a list that contains the start state followed by tuples that show the input and resulting set of states after each transition For the example shown above process returns the following list start 1 start near start 1 end start 1 start near start near start Finally remember that if an input is illegal for the current state is not the key in some transition for the current state just ignore it But if the input leads to no possible states the empty set of states terminate processing there body is 12 lines interpret has a list parameter the list result produced by process it returns a multi line string each line is ended by n which when printed illustrates the results of processing an NDFA on an input in the appropriate textual form Note that in this output the sets computed in process appear as lists sorted alphabetically by state See how it prints the example list argument shown above in the Sample Interaction below body is 5 lines Write a script at the bottom of this module in if name main that prompts the user for the file describing the DNFA prints it prompts the user for the file containing lines of start states and input and simulates the NDFA on each line printing the results in the appropriate textual form body is 7 lines Sample Interaction The program as specified will have the following interaction user typed information appears in italics Your output should match this one Enter file with non deterministic finite automaton ndfaendin 1 txt Non Deterministic Finite Automaton end transitions near transitions 1 end start transitions near start 1 start Enter file with start state and input ndfainputendin 1 txt Starting new simulation Start state start Input 1 new possible states start Input new possible states near start Input 1 new possible states end start Input 1 new possible states start Input new possible states near start Input 1 new possible states end start Stop state s end start Starting new simulation Start state start Input 1 new possible states start Input new possible states near start Input 1 new possible states end start Input 1 new possible states start Input new possible states near start Input new possible states near start Stop state s near start In Week 2 of this course we will cover EBNF and regular expressions which relate to the files below You can run these files on your code to ensure they produce the correct results The ndfatrain txt file is a non deterministic finite automaton that determines whether or not a train a sequence of characters representing different kinds of cars is a legal train according to Chapter Exercise 7 in the ENBF lecture Its input file is ndfainputtrain txt which starts with a legal train one that ends with the state done as one possible state followed by an illegal train one that does not end with the state done as one possible state The ndfare txt file is a non deterministic finite automaton translation of the regular expression a b cd Its input file is ndfainputre txt which starts with a match one that ends with the state last as one possible state followed by a non match one that does not end with the state last as one possible state Problem 5 Word Generator Problem Summary Write the required functions and script that prompts the user to enter the order statistic a positive number and the name of a file of text reads the file of text storing it in a special corpus dictionary prints the dictionary in a special form prompt the user to enter the order statistic number of words and the number of words to generate then print a list of that many words randomly generated from the corpus Your program will learn the word pattern of an author based on some order statistic and reading a large sample of the author s writing and then generate random text following the author s word patterns Input and Output After prompting for the order statistic read a file of words building a corpus dictionary storing data annotated as str str Here the dictionary s keys are tuples of n words where n is the order statistic and each key s assocaited value is a list of all the words in the text that somewhere follow these words e g if n were 2 the dictionary would contain a key for every pair of words appearing next to each other in the text and each would have an associated value that is a list of all the words following these two no matter where the pair occurs with NO DUPLICATES allowed in the values list An easy way to read the words one at a time is to use the result returned by the function goody read file values which is passed an open file to read from we can a call next on the result or b iterate over the result with a for loop For example if a file named f txt contained a b c d e then the code i goody read file values open f txt print next i next i print next two values in the file for c in i iterate over all remaining values in the file print c and print them would print a b c d e We will learn when we examine iterators in depth that the for loop implicitly calls next on the object here i that it is iterating over We can build the dictionary by prereading n words by calling next explicitly into a list assume that this is always possible how might it not be then repeatedly read the next word and put it in as a value associated with the list of pre read words then drop the oldest word at the beginning of the list and add this next word as the youngest at the end of the list always keeping the list length at n repeating this process until all the words have been read Remember to convert this list of words to a tuple of words before using it as a key in the dictionary For a simple example the file wginput1 txt contains the following lines it could have all this information on one line or more lines a b c b a d c b a d c a a b a a d Print all the associations in the corpus dictionary one per line in standard lexical order after printing all associations print the length of the smallest and largest list that is a value in the dictionary Each line contains an n word tuple followed by the list of unique words no duplicates that follow them anywhere in the text In standard lexical order the keys appear in order relative to the first word in the tuple for all first words that are the same they appear in order relative to the second word in the tuple for all first and second words that are the same they appear in order relative to the thrid word in the tuple etc see the example below For example the file above would produce Corpus a a can be followed by any of b d a b can be followed by any of c a a d can be followed by any of c b a can be followed by any of d a b c can be followed by any of b c a can be followed by any of a c b can be followed by any of a d c can be followed by any of b a min max value lengths 1 2 For example a d appears three times in the text above twice followed by c and once followed by nothing at the end of the file a b appears twice in the file above first followed by c and second followed by a Prompt the user for the words to start with there are order statistic number of them and the number of random words after that to generate Produce such a list of words and print it A random 1 word list after the words a and d might print as Random text a d c a a d c a a d c b In the result we start with a d 2 words specified by the user we know only c can come next then using d c we know that either b or a must come next it randomly chooses a Functions and Script Write the following functions and script I am providing line counts not as requirements but to indicate the lengths of well written Pythonic code read corpus has an order statistic int parameter and and open file parameter it returns the dictionary representing the corpus of words in a file body is 8 lines corpus as str has a dictionary parameter representing the corpus it returns a multi line string each line is ended by n which when printed shows the contents of the corpus followed by the min max list lengths in the appropriate textual form body is 7 lines can you do it in 4 produce text has a dictionary parameter representing the corpus a list parameter representing the starting words and an int parameter representing the number of additional words to generate it returns a list that contains the the starting words followed by the generated words Hints Let n be the order statistic of the dictionary Construct two lists str each initially storing these same n starting words The first will always contain only the most recent n words to be coverted to a tuple and used as a key in the dictionary the second will grow to contain all the generated words Generate a random next word from the dictionary by using the choice function in the random module e g choice a b c will return a random value in the list either a b or b add it to both lists then drop the first word from the first list so it remains a list of length n repeat until you have generated the required number of words Warning you might have to stop prematurely if you generate the last n words in the text and if these words occur nowhere else That is because in this case there is no random word to generate following them in this case append a None to the end of the list of words and immediately return that list A slightly more elegant solution in Python uses only one list copying the last order statistic values of it into a tuple when needed for a key to the dictionary Ensure that you do not mutate any of the parameters body is 8 lines Write a script at the bottom of this module in if name main that prompts the user for a the order statistic rejecting non positive values b the file storing the text c order statistic words from the text and d the number of random words to generate reject any negative values it calls these functions to solve the problem and print the appropriate information 7 lines Sample Interaction The program as specified will have the following interaction user typed information appears in italics Your output should match the form of this one the actual random text my vary Enter order statistic 2 Enter file to process wginput1 txt Corpus a a can be followed by any of b d a b can be followed by any of c a a d can be followed by any of c b a can be followed by any of d a b c can be followed by any of b c a can be followed by any of a c b can be followed by any of a d c can be followed by any of b a min max value lengths 1 2 Enter 2 words to start with Enter word 1 a Enter word 2 d Enter of words to generate 1 Random text a d c a a d c a a d c b You can also try reading a much larger file included in this project folder wghuck txt Mark Twain s The Adventures of Huckleberry Finn I tried it with an order statistic of 3 The corpus has over 9 entries the biggest key triple had an associated value with 46 unique words in it The key was out of the and its associated value was the list window face woods fourth front jacket hole canoe middle ferryboat s cottonwood captain s river fog range presbyterian tree nest wagon troughs reach store way wigwam ark room corner grave nonesuch trouble kitchen old first hardest nigger patch sugar bowl window hole brass spoon house tooleries bag office post office cabin path chains With the appropriate modification we can use this same program to read generate music or DNA sequences or any other data made of symbols ", "_id": "http://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/program.html", "title": "program 1", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 1</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 1</h1>\r\n<h1>\r\nIteration and Major Data Types:<br>\r\nList, Tuple, Set, and Dict (and Open for files)\r\n</h1>\r\n<p>\r\n<h2>ICS-33: Intermediate Programming<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\nThis programming assignment is designed to ensure that you know how to use\r\n  combinations of Python's most important data types to model and\r\n  compactly write code that solves a wide variety of different programming \r\n  problems.\r\nThe kind of abstract thinking that goes into modeling solutions to these\r\n  programming problems with these data types (and iteration over them) is\r\n  critical to your development as computer scientists.\r\n<p>\r\nThere are five parts to this assignment.\r\n<!--- (and and extra credit part at the end). --->\r\nIn each you will be asked to write a module that contains a few functions\r\n  and a script at the bottom, which ties these functions together to solve\r\n  the problem.\r\n<p>\r\nYou should download the \r\n  <a href=\"program1.zip\">program1</a> project folder and use it to create an\r\n  Eclipse project.\r\nThe project folder contains files for all the modules in which to write your\r\n  functions and scripts; it also contains all the data files that you need to\r\n  test/debug your modules; finally, it contains all the batch self-check files\r\n  I will use when grading your programs.\r\nIn your modules, you may import additional standard/courselib modules and you\r\n  may write additional helper functions.\r\n<p>\r\nYou should work on this assignment in pairs, with someone in your lab section.\r\nTry to find someone who lives near you, with similar programming skills,\r\n  and work habits/schedule: e.g., talk about whether you prefer to work\r\n  mornings, nights, or weekends; what kind of commitment you will make to submit\r\n  program early.\r\nIf you believe that it is impossible for you to work with someone, because of\r\n  some special reason(s), you should send me email stating them and asking for\r\n  special permission to work alone (which I do grant, but not frequently).\r\n<p>\r\n<b>Only one student should submit all parts of the the assignment</b>, but both\r\n  students' UCInetID and name should appear in a comment at the <b>top</b> of\r\n  <b>each submitted .py file</b>.\r\nA special grading program reads this information.\r\nThe format is a comment starting with <b>Submitter</b> and <b>Partner</b> (when\r\n  working with a partner), followed by a <b>colon</b>, followed by the student's <b>UCInetID</b> (in all lower-case), followed by the student's <b>name in\r\n  parentheses</b> (last name, comma, first name -capitalized appropriately).\r\nIf you omit this information, or do not follow this exact form, it will require\r\n  extra work for us to grade your program, so we will deduct points.\r\n<p>\r\nFor example if Romeo Montague (whose UCInetID is romeo1) submitted a program\r\n  that he worked on with his partner Juliet Capulet (whose UCInetID is jcapulet)\r\n  the comment at the top of each .py file would appear as:\r\n<pre><b># Submitter: romeo1(Montague, Romeo)\r\n# Partner  : jcapulet(Capulet, Juliet)\r\n# We certify that we worked cooperatively on this programming\r\n#   assignment, according to the rules for pair programming</b></pre>\r\nIf you do not know what the terms <b>cooperatively</b> and/or\r\n  <b>rules for pair programming</b> mean, please read about\r\n  <a href=\"../../../common/handouts/pairprogramming.html\">Pair Programming</a> \r\n  <b>before</b> starting this assignment.\r\nPlease turn in each program <b>as you finish it</b>, so that I can more\r\n  accurately assess the progress of the class as a whole during this assignment.\r\n<p>\r\nPrint this document and carefully read it, marking any parts that contain\r\n  important detailed information that you find (for review before you turn in\r\n  the files).\r\nThe code you write should be as elegant and compact as possible, using \r\n  appropriate Python idioms.\r\nYou should familiarize yourselves with the <b>safe_open</b> function in the\r\n  <b>goody</b> module and all the functions in the <b>prompt</b> module, both\r\n  of which you should have installed in your <b>courselib</b> folder as part\r\n  of the Eclipse/Python installation.\r\nRecall how to use the <b>sep</b> and <b>end</b> parameters in the <b>print</b>\r\n  function.\r\n<p>\r\n<p>\r\nThis assignment has 5 parts: pairs should work on each part together, not split\r\n  them up and do them separately.\r\nParts 1-3 are going to be worth 12 points each; parts 4-5 are to be worth 7\r\n  points each.\r\nThis skewing of points towards the simpler parts means students finishing the\r\n  first 3 parts correctly will yield a 72% average; those finishing the first 4 \r\n  parts correctly will have an 86% average; but to get an A on this  assignment\r\n  requires solving all parts correctly.\r\nRemember that I'm going to be running MOSS on all the parts of this assignment.\r\n<p>\r\nFinally, reread the section on <b>Time Management</b> from Programming\r\n  Assignment 0 before starting this assignment.\r\n<p>\r\n<b>IMPORTANT</b>:\r\nI will grade all these programs automatically, using the batch self-check files\r\n  provided in the download.\r\nUse the <b>driver</b> program (explored in Programming Assignment #0) to run\r\n  the batch-self check files in this assignment; debug any errors that they\r\n  produce.\r\nBut...test your code first to match the <b>Sample Interactions</b> shown for\r\n  each problem; when those results are correct, use the batch self-check files.\r\nFinally, if a submitted Python module contains even one syntax error, it will\r\n  <b>fail all</b> its batch self-checks; so ensure that you\r\n  <b>submit modules with no syntax errors</b> (Python sometimes adds strange\r\n  imports at the top of your file; ensure that all your imports are reasonable).\r\n<p>\r\n<b>IMPORTANT</b>:\r\nBefore starting this assignment, download the\r\n  <a href=\"xref.zip\">xref</a> project folder which contains a small Python\r\n  script <b>xref.py</b> that produces a cross-reference of all the words\r\n  (converted to lower case) in a file (where words appear with spaces between\r\n  them: see <b>xrefin.txt</b> for an example): the words are listed in\r\n  alphabetic order followed by a set (i.e., no duplicates) of the line numbers\r\n  it appears on (listed in increasing numeric order).\r\nBefore solving the problems in this programming assignment, ensure you\r\n  understand all the details of how this program works: look at features and\r\n  functions like <b>safe_open</b>, <b>defaultdict</b> (and how it is used),\r\n  <b>enumerate</b>, <b>rstrip</b> and <b>lower</b>, <b>split</b> and\r\n  <b>join</b>, <b>sorted</b>, <b>for</b> loops with two (unpacked) indexes, the\r\n  two comprehensions (in the call to <b>max</b> and <b>join</b>), and\r\n  <b>format</b>.\r\nThese are the building blocks for many parts of this assignment; explore\r\n  and experiment with this code to understand how all the parts work together\r\n  to achieve the desired result.\r\nRun this code on more complicated data files.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Problem 1 -->\r\n\r\n<a name=\"problem1\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem #1: Reachability</b></td>\r\n<td width =\"80%\">\r\n<h3>Problem Summary:</h3>\r\nWrite the required functions and script that prompts the user for the name of a\r\n    file representing a graph;\r\n  reads the file (storing the graph in a dictionary);\r\n  prints the graph/dictionary in a special form;\r\n  repeatedly prompts the user for a starting node name (rejecting those not in\r\n    the graph);\r\n  computes and prints all the node names that are reachable from it by\r\n    following edges in the graph.\r\n\r\n<h3>Input and Output:</h3>\r\nRead a file of pairs of node names (representing edges) in a directed\r\n  graph, building a dictionary (use a <b>dict</b>, or better yet a\r\n  <b>defaultdict</b>) whose key is a <b>str</b> source node name and whose\r\n  associated value is a <b>set</b> of <b>str</b> destination node names that\r\n  are each reachable directly from the source node name key.\r\nWe annotate this dictionary as <b>{str:{str}}</b>.\r\n<p>\r\nIn the file, two nodes names appear on each line: first the source node name,\r\n  then the destination node name, with these node names (which may be entire\r\n  words, not just single characters) separated by one semicolon character.\r\nFor example, the input file <b>graph1.txt</b> contains the following\r\n  lines (which could appear in this order, or any other order):\r\n<b><pre>  c;f\r\n  b;d\r\n  a;c\r\n  c;e\r\n  d;g\r\n  a;b\r\n  e;d\r\n  f;g\r\n  f;d</pre></b>\r\nwhich represent the graph\r\n<p>\r\n<image src=\"images/graph.gif\">\r\n<p>\r\nPrint the graph, one source node name per line followed by the set of all the\r\n  destination node names that the source can immediately reach.\r\nThe graph above would print as\r\n<b><pre>  Graph: source -> {destination} edges\r\n    a -> ['b', 'c']\r\n    b -> ['d']\r\n    c -> ['e', 'f']\r\n    d -> ['g']\r\n    e -> ['d']\r\n    f -> ['d', 'g']</pre></b>\r\n<p>\r\nNote that the source node namess are <b>sorted</b> alphabetically; the\r\n  <b>set</b> of desintation node names associated with each source appear in a\r\n  <b>list</b> whose values are also <b>sorted</b> alphabetically: it makes no\r\n  sense to talk about sorted <b>sets</b>.\r\nNote that because node <b>g</b> is not a source node (it is only a\r\n  destination node), it does not appear first on any line (and appears only\r\n  in the <b>sets</b> for source nodes <b>d</b> and <b>f</b>).\r\n<p>\r\nThere are multiple data files for this program: <b>graph1.txt</b> (shown\r\n  above), <b>graph2.txt</b> and <b>graph3.txt</b>; test/debug your program on\r\n  the first file; when you are done, test it on the remaining files.\r\nDraw the graph represented by each file to ensure that your code correctly\r\n  prints it and computes the node names reachable from any source node (which\r\n  you can do by eyeballing the graphs: they are small).\r\n<p>\r\nRepeatedly prompt the user for a starting node name in the graph (until the user\r\n  enters <b>quit</b>) and compute and print all the node names that are\r\n  reachable from it by following edges in the graph.\r\nReject any node name that is not present in the graph.\r\nAn example interaction (processing the graph above) might be\r\n<b><pre>  Enter starting node name: e\r\n  From e the reachable node names are {'g', 'e', 'd'}\r\n\r\n  Enter starting node: x\r\n    Entry Error: 'x';  Illegal: not a source node\r\n    Please enter a legal String\r\n\r\n  Enter starting node: a\r\n  From a the reachable nodes are {'g', 'f', 'e', 'd', 'c', 'b', 'a'}\r\n\r\n  Enter starting node: quit</pre></b>\r\n<h3>Functions and Script:</h3>\r\nWrite the following functions and script.\r\nI am providing line counts not as requirements, but to indicate the lengths of\r\n  well-written Pythonic code.\r\n<ul>\r\n<li><b>read_graph</b> has an open (file) parameter; it returns the dictionary\r\n     representing the graph\r\n     (body is 5 lines).\r\n<p>\r\n<li><b>graph_as_str</b> has a dictionary parameter (representing the graph); it\r\n    returns a multi-line string (each line is ended by <b>'\\n'</b>), which when\r\n    printed shows the contents of the graph in the appropriate textual form\r\n    (body is 4 lines; can you do it in 1?).\r\n<p>\r\n<li><b>reachable</b> has a dictionary parameter (representing the graph) and\r\n    a <b>str</b> start node in the graph (technically a key in the dictionary);\r\n    it returns a <b>set</b> of all the nodes reachable from it by following\r\n    edges in the graph. Hint: I used the <b>get</b> dictionary function, which \r\n    allows a second argument that specifies what to do if the first argument\r\n    (key) is not in the dictionary, because this function should not mutate\r\n    the dictionary\r\n    (body is 9 lines).\r\n<p>\r\n<li>Write a script at the bottom of this module\r\n   (in <b>if __name__ == '__main__':</b>) that prompts the user for the\r\n   file storing the graph and start node (rejecting any string that is not a\r\n   source node in the graph or the word <b>quit</b>), calls these functions\r\n   to solve the problem, and print the appropriate information: the graph\r\n   and the set containing all the node labels\r\n   (body is 9 lines).\r\n</ul>\r\nHere is the basic algorithm for computing reachability; it is simple to explain\r\n  and not (very) complicated to implement.\r\nBut, you have to understand these instructions and carefully translate them into\r\n  Python.\r\nYou should hand-simulate this algorithm using the graph above, and verify that\r\n  it produces the results you expect, before coding the algorithm in Python.\r\nYou might be tempted to use recursion, but please don't: unless recursion is\r\n  done very carefully, <b>reachable</b> will run forever on graphs that contain\r\n  cycles: one of the input files is a graph that contains cycles.\r\n<ol>\r\n<li>To compute all the reachable nodes in a graph, create a <b>set</b>\r\n   (initially empty) of reached nodes and a <b>list</b> (initially containing\r\n   the  parameter start node) of nodes that we are going to explore (to find\r\n   nodes they can reach).\r\n<p>\r\n<li>While the <b>exploring list</b> still has nodes, remove the first one\r\n    (recall the <b>pop</b> method for <b>lists</b>) and put it into the\r\n    <b>reached set</b>; for all its associated destination nodes that are not\r\n    already in the <b>reached set</b>, put them in the <b>exploring list</b>.\r\n<p>\r\n<li>When the <b>exploring list</b> becomes empty (can you argue that this always\r\n    will happen -there is no infinite looping), return the <b>reached set</b>.\r\n</ol>\r\n<p>\r\nWhen debugging this algorithm, print the <b>reachable set</b> and\r\n  <b>exploring list</b> after every interesting change, or use the debugger to\r\n  observe these changes.\r\n<h3>Sample Interaction:</h3>\r\nThe program, as specified, will have the following interaction:\r\n  user-typed information appears in <i>italics</i>.\r\nYour output should \"match\" this one (sets will match if they have the same\r\n  contents, independent of their order).\r\nYou should also check that it works for other starting nodes, and\r\n  a variety of starting nodes in the other graphs.\r\n\r\n<b><pre>  Enter file with graph: <i>graph1.txt</i>\r\n\r\n  Graph: source -> {destination} edges\r\n    a -> ['b', 'c']\r\n    b -> ['d']\r\n    c -> ['e', 'f']\r\n    d -> ['g']\r\n    e -> ['d']\r\n    f -> ['d', 'g']\r\n\r\n\r\n  Enter starting node: <i>e</i>\r\n  From e the reachable nodes are {'g', 'e', 'd'}\r\n\r\n  Enter starting node: <i>x</i>\r\n    Entry Error: 'x';  Illegal: not a source node\r\n    Please enter a legal String\r\n\r\n  Enter starting node: <i>a</i>\r\n  From a the reachable nodes are {'g', 'f', 'e', 'd', 'c', 'b', 'a'}\r\n\r\n  Enter starting node: quit</pre></b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Problem #2 -->\r\n\r\n<a name=\"problem6\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem #2: Instant Runoff Voting</b></td>\r\n<td width =\"80%\">\r\n<h3>Problem Summary:</h3>\r\nWrite the required functions and script that prompts the user for the name of a\r\n  a file representing the preferences of a sequence of voters;\r\n  reads the file (storing its information in a dictionary);\r\n  prints the voter preferences/dictionary in a special form;\r\n  repeatedly displays the vote count for ballots (sorted both by candidate name\r\n  and numerically), eliminating from the election the candidate(s) receiving\r\n  the fewest votes, until one candidate (the winner) or no candidates\r\n  remain.\r\n<p>\r\nThis form of election is known as <b>instant runoff voting</b>.\r\nEvery voter submits preferences that rank all the candidates in the election,\r\n  from highest preference candidate (most favorite) to lowest preference\r\n  candidate (least favorite): we will use a <b>list</b> for this purpose</b>,\r\n  where \"earlier in the <b>list</b>\" means \"higher preference\".\r\nAll the candidates appear on the first ballot, so each voter votes for his\r\n  highest preference candidate.\r\nThen the candidate(s) with the fewest number of votes are removed from the\r\n  election: if more than one candidate receives the least number of votes, all\r\n  with that number are removed from the election.\r\n<p>\r\nDuring the second ballot, votes are allowed only for the\r\n  <b>remaining candidates</b>: there is at least 1 fewer candidate.\r\nIf a  voter's highest preference candidate has been removed from the election,\r\n  then his/her second ranked candidate should receive the vote; likewise, if\r\n  his/her second ranked candidate has been removed from the election, then\r\n  his/her third ranked candidate should receive the vote .... this process\r\n  continues until a voter voters for his/her highest preference candidate who\r\n  is still in the election.\r\n<p>\r\nThe number of votes cast in each ballot should always be the same as the number\r\n  of voters: each voter votes for his/her most preferred candidate who is still\r\n  in election.\r\nThis ballot process continues until either 1 candidate remains, or 0 candidates\r\n  remain (meaning that all the remaining candidates tallied the same number\r\n  of votes, and all were removed).\r\nDo not attempt to write Python code to solve this problem until you understand\r\n  this voting algorithm and can apply it to the data specified below.\r\n\r\n<h3>Input and Output:</h3>\r\nRead a file of voters and their ranking of the candidates (highest to lowest\r\n  preference), separated by semicolons, building a dictionary whose key is each\r\n  voter and whose associated value is a <b>list</b> of candidates ranked by\r\n  that voter (they appear in the file in order, from highest to lowest\r\n  preference).\r\nWe annotate this dictionary as <b>{str:[str]}</b>.\r\n<p>\r\nIn the file, the voter's name appears first, followed by the names of all the\r\n  candidates in the election in highest to lowest preference (names may be\r\n  entire words, not just single characters) separated by one semicolon\r\n  character.\r\nFor example, the input file <b>votepref1.txt</b> contains the following\r\n  lines (which could appear in this order, or any other):\r\n<b><pre>  A;X;Y;Z\r\n  B;Y;Z;X\r\n  C;Y;Z;X\r\n  D;Z;X;Y\r\n  E;Z;X;Y</pre></b>\r\nThe first line means, voter <b>A</b> ranks candidate <b>X</b> first,\r\n  candidate <b>Y</b> second, and candidate <b>Z</b> third.\r\nThe second line means, voter <b>B</b> ranks candidate <b>Y</b> first,\r\n  candidate <b>Z</b> second, and candidate <b>X</b> third.\r\nEach line will have a unique voter and a permutation of all the \r\n  candidates in the election.\r\n<p>\r\nPrint each voter on a separate line, followed by his/her preferences.\r\nThat is, each line contains the voter and his/her complete ranking of the\r\n  candidates.\r\nFor example, the file above would print as:\r\n<b><pre>  Voter Preferences\r\n     A  ->  ['X', 'Y', 'Z']\r\n     B  ->  ['Y', 'Z', 'X']\r\n     C  ->  ['Y', 'Z', 'X']\r\n     D  ->  ['Z', 'X', 'Y']\r\n     E  ->  ['Z', 'X', 'Y']</pre></b>\r\n<p>\r\nNote that the voter names are <b>sorted</b> alphabetically; the <b>list</b>\r\n  of preferences appears in the same order they appeared in the file.\r\nThere are multiple data files for this program: <b>votepref1.txt</b>, \r\n  <b>votepref2.txt</b>, <b>votepref3.txt</b> and <b>votepref4.txt</b>;\r\n  test/debug your program on the first file; when you are done, test it on the\r\n  remaining files.\r\n<p>\r\n<b>Algorithm:</b>\r\nStart with a <b>set</b> of all the candidates.\r\nEvaluate the ballot to determine how many votes each candidate received.\r\nPrint this vote count two ways: sorted alphabetically and sorted numerically\r\n  (in decreasing order).\r\nRemove the candidate(s) receiving the fewest votes, and repeat this process\r\n  until only one or no candidates remain.\r\nFinally, print the outcome of the election: a single candidate winner or a tie.\r\nAn example interaction (processing the preferences above) might be\r\n<b><pre>  Vote count on ballot #1 with candidates (alphabetically) = {'X', 'Y', 'Z'}\r\n    X  ->  1\r\n    Y  ->  2\r\n    Z  ->  2\r\n\r\n  Vote count on ballot #1 with candidates (numerical) = {'Y', 'X', 'Z'}\r\n    Y  ->  2\r\n    Z  ->  2\r\n    X  ->  1\r\n\r\n  Vote count on ballot #2 with candidates (alphabetically) = {'Y', 'Z'}\r\n    Y  ->  3\r\n    Z  ->  2\r\n\r\n  Vote count on ballot #2 with candidates (numerical) = {'Y', 'Z'}\r\n    Y  ->  3\r\n    Z  ->  2\r\n\r\n  Winner is  {'Y'}</pre></b>\r\nThe first ballot consisted of all three candidates, <b>X</b>, <b>Y</b>, \r\n  and <b>Z</b>.\r\nFor this ballot, the votes were counted and printed; candidate <b>X</b>\r\n  received the fewest number of votes so he/she is eliminated from the next\r\n  ballot.\r\nThe second ballot consisted of two candidates, <b>Y</b> and <b>Z</b>.\r\nFor this ballot: <b>A</b> votes for <b>Y</b>, who is his/her second highest\r\n  preference because <b>X</b>, his first highest preference, was removed from\r\n  the election; <b>B</b> through <b>E</b> vote for their highest preference\r\n  candidate, who all remain in the election.\r\nThese votes are counted and printed; candidate <b>Z</b> received the fewest\r\n  number of votes so is eliminated from the next ballot.\r\nThere is only one candidate remaining so <b>Y</b> is declared the winner.\r\nAn alternative outcome might be\r\n<b>No winner: election is a tie among the candidates remaining on the last\r\n     ballot</b>\r\n<h3>Functions and Script:</h3>\r\nWrite the following functions and script.\r\nI am providing line counts not as requirements, but to indicate the lengths of\r\n  well-written Pythonic code.\r\n<ul>\r\n<li><b>read_voter_preferences</b> has an open (file) parameter; it returns the\r\n       dictionary representing each voter and his/her preferences\r\n      (body is 5 lines).\r\n<p>\r\n<li><b>dict_as_str</b> has a dictionary, key <b>function</b>\r\n      (default <b>None</b>) and <b>bool</b> (default <b>False</b>) as\r\n       parameters; it returns a multi-line string (each line is ended by\r\n       <b>'\\n'</b>), which when, which when printed shows the contents of the\r\n       dictionary in the appropriate textual form.\r\n    The function determines the ordering and the <b>bool</b> determines whether\r\n      to reverse it: like the <b>key</b> and <b>reverse</b> parameters used to\r\n      <b>sort</b>/<b>sorted</b> in Python.\r\n    This function is used to print both the voter preference dictionary and\r\n      the vote count dictionary for each ballot.\r\n     (body is 4 lines; can you do it in 1?).\r\n<p>\r\n<li><b>evaluate_ballot</b> has a dictionary of voter preferences\r\n         (see <b>read_voter_preferences</b>) and a <b>set</b> of the remaining\r\n         candidates as parameters; it returns a dictionary whose keys are these\r\n         candidates and whose values are the number of votes they received on\r\n         this ballot, based on the description of the\r\n         <b>instant runnoff voting</b> algorithm.\r\n       Remember to count only one vote per voter, for his/her highest ranked\r\n         candidate who is still in the election; hint: I used a <b>break</b>\r\n         statement in one loop\r\n       (body is 7 lines).\r\n<p>\r\n<li><b>remaining_candidates</b> has a dictionary as a parameter whose keys are\r\n          candidates and whose values are the number of votes they received\r\n          (see <b>evaluate_ballot</b>); it returns a set containing all those\r\n          candidates remaining in the election (the one(s) receiving the\r\n          fewest number of votes are absent).\r\n       Note that if all the candidates receive the same number of votes, then\r\n         this function returns an empty <b>set</b>.\r\n       (body is 2 lines).\r\n<p>\r\n<li><b>run_election</b>  has an open (file) parameter; it returns a <b>set</b>\r\n        that is empty (signifying no winner for this election) or contains one\r\n        value (the winner of the election).\r\n      In the process of computing its result to return, it calls the functions\r\n        above and prints all the required information: see the\r\n        <b>Sample Interaction</b> below\r\n      (body is 13 lines).\r\n<p>\r\n<li>Write a script at the bottom of this module\r\n    (in <b>if __name__ == '__main__':</b>) that prompts the user for the\r\n    file storing the voter preferences and calls <b>run_election</b> to\r\n    do this task.\r\n</ul>\r\n<h3>Sample Interaction:</h3>\r\nThe program, as specified, will have the following interaction:\r\n  user-typed information appears in <i>italics</i>.\r\nYour output should match this one.\r\n<pre><b>  Enter file with voter preferences: <i>votepref1.txt</i>\r\n\r\n  Voter Preferences\r\n    A  ->  ['X', 'Y', 'Z']\r\n    B  ->  ['Y', 'Z', 'X']\r\n    C  ->  ['Y', 'Z', 'X']\r\n    D  ->  ['Z', 'Y', 'X']\r\n    E  ->  ['Z', 'Y', 'X']\r\n  \r\n  Vote count on ballot #1 with candidates (alphabetically) = {'Z', 'Y', 'X'}\r\n    X  ->  1\r\n    Y  ->  2\r\n    Z  ->  2\r\n\r\n  Vote count on ballot #1 with candidates (numerical) = {'Y', 'X', 'Z'}\r\n    Y  ->  2\r\n    Z  ->  2\r\n    X  ->  1\r\n\r\n  Vote count on ballot #2 with candidates (alphabetically) = {'Y', 'Z'}\r\n    Y  ->  3\r\n    Z  ->  2\r\n\r\n  Vote count on ballot #2 with candidates (numerical) = {'Y', 'Z'}\r\n    Y  ->  3\r\n    Z  ->  2\r\n\r\n  Winner is  {'Y'}</b></pre>\r\n<p>\r\nYou can also try processing the <b>votepref2.txt</b> file (which leads to\r\n  a <b>No winner</b> result),  <b>votepref3.txt</b>, and <b>votepref4.txt</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Problem 3 -->\r\n\r\n<a name=\"problem3\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem #3: Finite Automata</b></td>\r\n<td width =\"80%\">\r\n<h3>Problem Summary:</h3>\r\nWrite the required functions and script that prompts the user for the name of a\r\n   file representing a finite automaton: indicating its <b>states</b> and\r\n       input-&gt;state <b>transitions</b>;\r\n   reads the information in the file (storing the finite automaton in a\r\n     dictionary);\r\n   prints the finite-automaton/dictionary in a special form;\r\n   prompts the user for the name of a file storing the start-state\r\n      and inputs to process (each line in the file contains this combination);\r\n   repeatedly processes these lines, computing the results of the finite\r\n      automaton on each input, and then prints the results.\r\nNote that a finite automaton is really a <b>program</b>; in this problem we are\r\n  reading a program from a file and then executing it (running the finite\r\n  automaton) on various inputs.\r\nSo, we are really writing a compiler/interpreter for a small programming\r\n  language.\r\n<p>\r\nA <b>finite  automaton</b> (FA) is an machine that is sometimes called a\r\n  Deterministic Finite Automaton (DFA; see the next problem for an NDFA: a\r\n  non-deterministic finite automaton).\r\nAn FA is described by its <b>states</b> and its <b>transitions</b>:\r\n  each <b>transition</b> for a <b>state</b> specifies an <b>input</b> and what\r\n  <b>state</b> in the FA that input leads to.\r\nWe can illustrate an FA as a graph with state labels in circles and edge labels\r\n  for transitions (see below).\r\n<p>\r\n\r\n<h3>Input and Output:</h3>\r\nRead a file that describes a FA: each line contains a state and an\r\n  arbitrary number of input-&gt;state <b>transitions</b>.\r\nBuild a dictionary such that each key is a <b>str</b> state and whose associated\r\n  value is another dictionary specifying all the transitions from that state:\r\n  this second dictionary has keys that are <b>str</b> inputs and associated\r\n  values are <b>str</b> states.\r\nThe first token on each line is the <b>str</b> state and the remaining tokens\r\n  (always coming in pairs) are <b>str</b> inputs and their resulting states.\r\nAll tokens (which can comprise any number of characters) are separated by one\r\n  semicolon character.\r\nWe annotate this dictionary as <b>{str:{str:str}}</b>.\r\n<p>\r\n\r\nFor example, the input file <b>faparity.txt</b> contains the following lines\r\n  (which could appear in this order, or any other and still specify the same\r\n  FA):\r\n<b><pre>  even;0;even;1;odd\r\n  odd;0;odd;1;even</pre></b>\r\nHere is a picture of the <b>parity</b> FA.\r\nIt graphically illustrates the two <b>states</b> (<b>even</b> and <b>odd</b>)\r\n  and their <b>transitions</b>, using <b>inputs</b> (<b>0</b> and <b>1</b>)\r\n  that always lead back to one of these two states.\r\n<p>\r\n\r\n<img src=\"images/parity.jpg\"></img>\r\n<p>\r\n\r\nHere, the state <b>even</b> (meaning it has seen an even number of <b>1</b>\r\n  inputs so far) is a key in the main dictionary.\r\nIt's value is a dictionary with two key/value pairs <b>0</b>-><b>even</b>\r\n  and <b>1</b>-><b>odd</b>.\r\nIt means that in the <b>even</b> state, if the input is a <b>0</b> the\r\n  FA stays in the <b>even</b> state; if the input is a <b>1</b> the\r\n  FA goes to the <b>odd</b> state.\r\nAnd similarly (the next line) means that for the <b>odd</b> state, if the input\r\n  is a <b>0</b> the FA stays in the <b>odd</b> state; if the input is a\r\n  <b>1</b> the FA goes back to the <b>even</b> state.\r\nSo, seeing an input of <b>0</b> keeps the FA in the same state;\r\n  seeing an input of <b>1</b> flips the FA into the other state.\r\n<p>\r\n\r\nPrint the finite automaton, one state (and its transitions) per line;\r\n  the states are printed alphabetically and the transition dictionary\r\n  for each state is printed as a <b>list</b> of input/state items (tuples)\r\n  such that these are printed alphabetically by the inputs.\r\n<p>\r\nFor example, the file above would print as:\r\n<b><pre>  Finite Automaton Description\r\n    even transitions: [('0', 'even'), ('1', 'odd')]\r\n    odd transitions: [('0', 'odd'), ('1', 'even')]</pre></b>\r\n<p>\r\nNote that there are multiple data files for this program: <b>faparity.txt</b>\r\n  and <b>fadivisibleby3.txt</b>; test/debug your program on \r\n  the first file; when you are done, test it on the last file.\r\nDraw the FA represented by each for to ensure that your code correctly\r\n  prints and computes with it.\r\n<b>Important:</b> This task is <b>not</b> to write a Python code that simulates\r\n  the Parity FA; it is to write code that simulates <b>any</b> FA, whose\r\n  description it reads from a file.\r\n<p>\r\nNext, repeatedly read and process lines from a second input file, computing the\r\n  results of the finite automaton running on the specified start-state and its\r\n  inputs; then print out the results in a special form.\r\nEach line in the file contains a start-state followed by a sequence of inputs\r\n  (all separated by semicolons).\r\nThe start-state will be a state in the FA (it is a key in the outer dictionary)\r\n  the inputs may specify legal or illegal transitions (may or may not be keys\r\n  in some inner dictonary).\r\n<p>\r\nFor example, the input file <b>fainputparity.txt</b> contains the following\r\n  three lines:\r\n<b><pre>  even;1;0;1;1;0;1\r\n  even;1;0;1;1;0;x\r\n  odd;1;0;1;1;0;1</pre></b>\r\nThe first line means, the start-state is <b>even</b> and the\r\n  inputs are <b>1</b>, <b>0</b>, <b>1</b>, <b>1</b>, <b>0</b>, and <b>1</b>.\r\n<p>\r\nThe result of processing each line is to print the start-state, and then each\r\n  input and the new state it transitions to, and finally print the stop-state.\r\nFor the <b>parity</b> FA and the first line in this file, it should print\r\n<b><pre>Start state = even\r\n  input = 1; new state = odd\r\n  input = 0; new state = odd\r\n  input = 1; new state = even\r\n  input = 1; new state = odd\r\n  input = 0; new state = odd\r\n  input = 1; new state = even\r\nStop state = even</pre></b>\r\n<p>\r\nNote that the second line contains an input <b>x</b> which is not a legal input\r\n  allowed in any state; any such input should stop the simulation for that line\r\n  only, continuing to start a new simulation for all following lines (as\r\n  illustrated in the <b>Sample Interaction</b>).\r\n<h3>Functions and Script:</h3>\r\nWrite the following functions and script.\r\nI am providing line counts not as requirements, but to indicate the lengths of\r\n  well-written Pythonic code.\r\n<ul>\r\n<li><b>read_fa</b> has an open (file) parameter; it returns the dictionary\r\n     representing the finite automaton; <b>hint</b>: I used splicing and the\r\n     <b>zip</b> function to build the inner dictionaries.\r\n     (body is 6 lines).\r\n<p>\r\n<li><b>fa_as_str</b> has a dictionary parameter (representing the FA); it\r\n    returns a multi-line string (each line is ended by <b>'\\n'</b>), which when\r\n    printed shows the contents of the FA in the appropriate textual form\r\n    (body is 4 lines; can you do it in 1?).\r\n<p>\r\n<li><b>process</b> has a dictionary parameter (representing the FA),\r\n    a <b>str</b> parameter (representing the start-state), and a <b>list</b>\r\n    parameter (representing a <b>list</b> of <b>str</b> inputs); it returns a\r\n    <b>list</b> that contains the start-state followed by <b>tuples</b> that\r\n    show the input and resulting state after each transition.\r\n    For the example shown above, <b>process</b> returns the following\r\n    <b>list</b>.\r\n<b><pre>['even', ('1', 'odd'), ('0', 'odd'), ('1', 'even'), ('1', 'odd'), ('0', 'odd'), ('1', 'even')]</pre></b>\r\n    Finally, if an input is illegal (is not the key in some transition for the\r\n    current state), say\r\n    <b>'x'</b>, for the parity FA, then <b>process</b> should terminate with\r\n    the last <b>tuple</b> in the <b>list</b> indicating a problem:\r\n     <b>('x', None)</b>\r\n   (body  is 9 lines).\r\n<p>\r\n<li><b>interpret</b> has a <b>list</b> parameter (the <b>list</b> result\r\n    produced by  <b>process</b>); it returns a multi-line string (each line is\r\n    ended by <b>'\\n'</b>), which when printed illustrates the results of\r\n    processing an FA on an input in the appropriate textual form.\r\n    See how it prints the example <b>list</b> argument shown above in the\r\n      output further above.\r\n    Also see the <b>Sample Interaction</b> below to see how it prints\r\n    <i>input errors</i>: see the middle example\r\n   (body is 9 lines).\r\n<p>\r\n<li>Write a script at the bottom of this module\r\n    (in <b>if __name__ == '__main__':</b>) that prompts the user for the\r\n    file describing the FA, prints it, prompts the user for the file containing\r\n    lines of start-states and input, simulates the FA on each line, printing\r\n    the results in the appropriate textual form\r\n    (body is 7 lines).\r\n</ul>\r\n<p>\r\n\r\n<h3>Sample Interaction:</h3>\r\nThe program, as specified, will have the following interaction:\r\n  user-typed information appears in <i>italics</i>.\r\nYour output should match this one.\r\n<b><pre>  Enter file with finite automaton: <i>faparity.txt</i>\r\n\r\n  Finite Automaton\r\n    even transitions: [('0', 'even'), ('1', 'odd')]\r\n    odd transitions: [('0', 'odd'), ('1', 'even')]\r\n\r\n  Enter file with start-state and input: <i>fainputparity.txt</i>\r\n  \r\n  Starting new simulation\r\n  Start state = even\r\n    Input = 1; new state = odd\r\n    Input = 0; new state = odd\r\n    Input = 1; new state = even\r\n    Input = 1; new state = odd\r\n    Input = 0; new state = odd\r\n    Input = 1; new state = even\r\n  Stop state = even\r\n  \r\n  Starting new simulation\r\n  Start state = even\r\n    Input = 1; new state = odd\r\n    Input = 0; new state = odd\r\n    Input = 1; new state = even\r\n    Input = 1; new state = odd\r\n    Input = 0; new state = odd\r\n    Input = x; illegal input: simulation terminated\r\n  Stop state = None\r\n\r\n  Starting new simulation\r\n  Start state = odd\r\n    Input = 1; new state = even\r\n    Input = 0; new state = even\r\n    Input = 1; new state = odd\r\n    Input = 1; new state = even\r\n    Input = 0; new state = even\r\n    Input = 1; new state = odd\r\n  Stop state = odd</b></pre>\r\n<p>\r\nYou can also try the <b>fadivisibleby3.txt</b> finite automaton file, which\r\n  determines whether an integer (sequence of digits) is divisible by <b>3</b>:\r\n   it is divisible if the  finite automaton stops in state <b>rem0</b>.\r\nIts input file <b>fainputdivisibleby3.txt</b> tries the number\r\n  <b>12,435,711</b>, which is divisible by <b>3</b> and number <b>823</b>,\r\n  which is not divisible by <b>3</b>: dividing <b>823</b> by <b>3</b> leaves a\r\n  remainder of <b>1</b>.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Problem 4 -->\r\n\r\n<a name=\"problem4\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem #4: Non-Deterministic FA</b></td>\r\n<td width =\"80%\">\r\n<h3>Problem Summary:</h3>\r\nWrite the required functions and script that solve, for a Non-Deterministic\r\n   Finite Automaton, the same problem that was solved for a Deterministic Finite\r\n   Automaton in Problem #3 (above).\r\nRead about the differences between these two automata (below).\r\nHint: Adapt your code for the FA problem to solve the more general NDFA problem.\r\n<p>\r\nA non-deterministic finite automaton (NDFA) is machine described by its\r\n  <b>states</b> and its <b>transitions</b>:\r\n  each <b>transition</b> for a <b>state</b> specifies an <b>input</b> and a\r\n  <b>set</b> of <b>states</b> (more than one is allowed) that input can lead\r\n  to: <b>sets</b> with <b>more than one states</b> is what makes it\r\n  non-deterministic.\r\nWe can illustrate a NDFA as a graph with state labels in circles and edge\r\n  labels for transitions (see below).\r\nThe critical difference between an FA and an NDFA is that an NDFA can have\r\n  multiple edges with the same label going to different states (we'll see how\r\n  to represent and simulate such transitions below).\r\n<p>\r\n\r\n<h3>Input and Output:</h3>\r\nRead a file that describes a NDFA: each line contains a state and an\r\n  arbitrary number of input-&gt;state <b>transitions</b>.\r\nBuild a dictionary such that each key is a <b>str</b> state and whose associated\r\n   value is another dictionary specifying all the transitions from that state:\r\n   this second dictionary has keys that are <b>str</b> inputs and associated\r\n   values that are <b>sets</b> of <b>str</b> states: all the states a particular\r\n   input can lead to.\r\nThe first token on each line is the <b>str</b> state and the remaining tokens\r\n  (always coming in pairs) are <b>str</b> inputs and states.\r\nAll tokens (which can comprise any number of characters) are separated by one\r\n  semicolon character.\r\nWe annotate this dictionary as <b>{str:{str:{str}}}</b>.\r\n<p>\r\n\r\nFor example, the input file <b>ndfaendin01.txt</b> contains the following lines\r\n  (which could appear in this order, or any other and still specify the same\r\n  NDFA):\r\n<b><pre>  start;0;start;1;start;0;near\r\n  near;1;end\r\n  end</pre></b>\r\nHere is a picture of the <b>endin01</b> NDFA.\r\nIt graphically illustrates the three <b>states</b> (<b>start</b>, <b>near</b>,\r\n  and <b>end</b>) and their <b>transitions</b>, using <b>inputs</b> (<b>0</b>\r\n  and <b>1</b>).\r\n<p>\r\n\r\n<img src=\"images/endin01.jpg\"></img>\r\n<p>\r\n\r\nHere, the state <b>start</b> is a key in the main dictionary.\r\nIt's value is a dictionary with two key/value pairs: <b>0</b> mapping to the\r\n  <b>set</b> containing <b>start</b> and <b>near</b>, and <b>1</b> mapping to\r\n  the <b>set</b> containing just <b>start</b>.\r\nIt means that in the <b>start</b> state, if the input is a <b>0</b> the\r\n  NDFA can stay in the <b>start</b> state or it can go to the <b>near</b>\r\n  state; if the input is a <b>1</b> the NDFA must stay in the <b>start</b>\r\n  state.\r\nAnd similarly the next line means that in the <b>near</b> state, if the\r\n  input is a <b>1</b> the NDFA must go into the <b>end</b> state.\r\nThe last line means that the <b>end</b> state has no transitions out of it.\r\n<p>\r\n\r\nPrint the NDFA, one state (and its transitions) per line;\r\n  the states are printed alphabetically and the transition dictionary\r\n  for each state is printed as a <b>list</b> of input/set of state items\r\n  (tuples) such that these are printed alphabetically by the inputs.\r\nNote that the state <b>end</b> is a key in the main dictionary, whose\r\n  associated transitions are an empty dictionary.\r\n<p>\r\n\r\nFor example, the file above would produce:\r\n<b><pre>  Non-Deterministic Finite Automaton\r\n    end transitions: []\r\n    near transitions: [('1', ['end'])]\r\n    start transitions: [('0', ['near', 'start']), ('1', ['start'])]</pre></b>\r\n<p>\r\nNote that there are multiple data files for this program: <b>ndfaendin01.txt</b>\r\n  and <b>ndfatrain.txt</b> and <b>ndfare.txt</b>;; test/debug your program on \r\n  the first file; when you are done, test it on the last file.\r\nDraw the FA represented by each for to ensure that your code correctly\r\n  prints and computes with it.\r\n<p>\r\nNext, repeatedly read and process lines from a second input file, computing the\r\n  results of the non-determinisitc finite automaton on the specified\r\n  start-state and its inputs ; then print out the results in a special form.\r\nEach line in the file contains a start-state followed by a sequence of inputs\r\n  (all separated by semicolons).\r\nThe start-state will be a state in the FA (it is a key in the outer dictionary)\r\n  the inputs may specify legal or illegal transitions (may or may not be keys\r\n  in some inner dictionary).\r\n<p>\r\nFor example, the input file <b>ndfainputendin01.txt</b> contains the following\r\n  two lines:\r\n<b><pre>  start;1;0;1;1;0;1\r\n  start;1;0;1;1;0;0</pre></b>\r\nFor example, the first line means, the start-state is <b>start</b> and the\r\n  inputs <b>1</b>, <b>0</b>, <b>1</b>, <b>1</b>, <b>0</b>, and <b>1</b>.\r\n<p>\r\nThe result of processing each line is to print the start-state, and then each\r\n  input and the new states (plural) it could transition to (the <b>could</b>\r\n  is what makes it non-deterministic), and finally print the stop-states.\r\nFor the <b>ndfaendin01</b> NDFA and the first line in this file, it should print\r\n<b><pre>  Start state = start\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 1; new possible states = ['end', 'start']\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 1; new possible states = ['end', 'start']\r\n    Stop state(s) = ['end', 'start']</pre></b>\r\n<p>\r\nNote that the <b>set</b> of states it might be in are printed as a alphabetized\r\n  <b>list</b>.\r\nAlso note especially that in the <b>start</b> state, if the input is a <b>0</b>,\r\n  then the NDFA can either remain in the <b>start</b> state or go into the\r\n  <b>near</b> state.\r\nFor this program, we keep track of all states that the NDFA <b>can</b> be in,\r\n  using a <b>set</b> of <b>new possible states</b>.\r\nFor the next input, <b>1</b>, we can be either in the <b>start</b> state\r\n  (from the <b>start</b> state; an input of <b>1</b> allows us to stay in the\r\n  <b>start</b> state) or the <b>end</b> state (from the <b>near</b> state; an\r\n  input of <b>1</b> allows us to transition to the <b>end</b> state).\r\nThus, we keep track of the <b>set</b> of states the NDFA can be in, and the\r\n  new <b>set</b> of states the NDFA can be in after processing the next input.\r\nIn this example, because <b>'end'</b> is included in the stop-states, this\r\n  input does end in <b>01</b>.\r\n<p>\r\nFor any state that does not have a transition specifying the current input,\r\n  ignore that input for that state.\r\nFor example, if <b>near</b> is one of the possible states and <b>0</b> is the\r\n  input, ignore the <b>0</b> for the <b>near</b> state.\r\n<p>\r\n<h3>Functions and Script:</h3>\r\nWrite the following functions and script.\r\nI am providing line counts not as requirements, but to indicate the lengths of\r\n  well-written Pythonic code.\r\n<ul>\r\n<li><b>read_ndfa</b> has an open (file) parameter; it returns the dictionary\r\n     representing the non-deterministic finite automaton; <b>hint</b>: I used\r\n     splicing and the <b>zip</b> function to build the inner dinctionaries, and\r\n     I called the <b>setdefault</b> function for the inner <b>dict</b>:\r\n     alternatively I could have built it as <b>defaultdict</b>s from the\r\n     standard  <b>collections</b> module\r\n     (body is 9 lines).\r\n<p>\r\n<li><b>ndfa_as_str</b> has a dictionary parameter (representing the FA); it\r\n    returns a multi-line string (each line is ended by <b>'\\n'</b>), which when\r\n    printed shows the contents of the NDFA in the appropriate textual form\r\n    (body is 4 lines; can you do it in 1?).\r\n<p>\r\n<li><b>process</b> has a dictionary parameter (representing the NDFA),\r\n    a <b>str</b> parameter (representing the start-state), and a <b>list</b>\r\n    parameter (representing a <b>list</b> of <b>str</b> inputs); it returns a\r\n    <b>list</b> that contains the start-state followed by <b>tuples</b> that\r\n    show the input and resulting <b>set</b> of  states after each transition.\r\n    For the example shown above, <b>process</b> returns the following\r\n    <b>list</b>.\r\n<p>\r\n<b><pre>  ['start', ('1', {'start'}), ('0', {'near', 'start'}), ('1', {'end', 'start'}), ('1', {'start'}),\r\n    ('0', {'near', 'start'}), ('0', {'near', 'start'})]</pre></b>\r\n    Finally, remember that if an input is illegal for the current state (is not\r\n      the key  in some transition for the current state), just ignore it.\r\n    But if the input leads to no possible states (the empty set of states)\r\n      terminate processing there\r\n    (body is 12 lines).\r\n<p>\r\n<li><b>interpret</b> has a <b>list</b> parameter (the <b>list</b> result \r\n    produced by <b>process</b>);  it returns a multi-line string (each line is\r\n    ended by <b>'\\n'</b>), which when printed illustrates the results of\r\n    processing an NDFA on an input in the appropriate textual form.\r\n    Note that in this output the <b>sets</b> computed in <b>process</b> appear\r\n      as <b>lists</b> sorted alphabetically by state.\r\n    See how it prints the example <b>list</b> argument shown above in the\r\n       <b>Sample Interaction</b> below\r\n    (body is 5 lines).\r\n<p>    \r\n<li>Write a script at the bottom of this module\r\n    (in <b>if __name__ == '__main__':</b>) that prompts the user for the\r\n    file describing the DNFA, prints it, prompts the user for the file\r\n    containing lines of start-states and input, and simulates the NDFA on each \r\n    line, printing  the results in the appropriate textual form\r\n    (body is 7 lines).\r\n</ul>\r\n<p>\r\n\r\n<h3>Sample Interaction:</h3>\r\nThe program, as specified, will have the following interaction:\r\n  user-typed information appears in <i>italics</i>.\r\nYour output should \"match\" this one.\r\n<b><pre>  Enter file with non-deterministic finite automaton: <i>ndfaendin01.txt</i>\r\n\r\n  Non-Deterministic Finite Automaton\r\n    end transitions: []\r\n    near transitions: [('1', ['end'])]\r\n    start transitions: [('0', ['near', 'start']), ('1', ['start'])]\r\n\r\n  Enter file with start-state and input: ndfainputendin01.txt\r\n\r\n  Starting new simulation\r\n  Start state = start\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 1; new possible states = ['end', 'start']\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 1; new possible states = ['end', 'start']\r\n  Stop state(s) = ['end', 'start']\r\n  \r\n  Starting new simulation\r\n  Start state = start\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 1; new possible states = ['end', 'start']\r\n    Input = 1; new possible states = ['start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n    Input = 0; new possible states = ['near', 'start']\r\n  Stop state(s) = ['near', 'start']</pre></b>\r\n<p>\r\nIn Week #2 of this course we will cover EBNF and regular expressions, which\r\n  relate to the files below.\r\nYou can run these files on your code to ensure they produce the correct results.\r\n<p>\r\nThe <b>ndfatrain.txt</b> file is a non-deterministic finite automaton\r\n  that determines whether or not a train (a sequence of characters representing\r\n  different kinds of cars) is a legal train according to Chapter Exercise #7\r\n  in the ENBF lecture.\r\nIts input file is <b>ndfainputtrain.txt</b>, which starts with a legal train\r\n  (one that ends with the state <b>done</b> as one possible state) followed by\r\n  an illegal train (one that does not end with the state <b>done</b> as one\r\n  possible state).\r\n<p>\r\nThe <b>ndfare.txt</b> file is a non-deterministic finite automaton translation\r\n  of the regular expression <b>((a*|b)cd)+</b>. \r\nIts input file is <b>ndfainputre.txt</b>, which starts with a match (one that\r\n  ends with the state <b>last</b> as one possible state) followed by a non-match\r\n   (one that does not end with the state <b>last</b> as one possible state).\r\n</td>\r\n</tbody>\r\n</table>\r\n  \r\n\r\n\r\n<!-- Problem #5 -->\r\n\r\n<a name=\"problem5\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Problem #5: Word Generator</b></td>\r\n<td width =\"80%\">\r\n<h3>Problem Summary:</h3>\r\nWrite the required functions and script that prompts the user to enter the\r\n    <b>order statistic</b> (a positive number) and the name of a file of text;\r\n  reads the file of text (storing it in a special <b>corpus</b> dictionary);\r\n  prints the dictionary in a special form;\r\n  prompt the user to enter the <b>order statistic</b> number of words, and the\r\n    number of words to generate, then print a <b>list</b> of that many words\r\n    randomly generated from the corpus.\r\n</ul>\r\nYour program will \"learn\" the word pattern of an author (based on some\r\n  \"order statistic\" and reading a large sample of the author's writing) and\r\n  then generate random text following the author's word patterns.\r\n<p>\r\n<h3>Input and Output:</h3>\r\nAfter prompting for the <b>order statistic</b>, read a file of words, building a\r\n  corpus dictionary storing data annotated as <b>{(str):[str]}</b>.\r\nHere the dictionary's keys are <b>tuple</b>s of <b>n</b> words (where <b>n</b>\r\n  is the <b>order statistic</b>) and each key's assocaited value is a\r\n  <b>list</b> of all the words in the text that somewhere follow these words:\r\n  e.g., if <b>n</b> were <b>2</b>, the dictionary would contain a key for every\r\n  pair of words appearing next to each other in the text, and each would have\r\n  an associated value that is a <b>list</b> of all the words following these two\r\n  (no matter where the pair occurs, with NO DUPLICATES allowed in the values\r\n  <b>list</b>).\r\n<p>\r\nAn easy way to read the words one at a time is to use the result returned by\r\n  the function <b>goody.read_file_values</b>, which is\r\n  passed an <b>open</b> file to read from: we can (a) call <b>next</b> on the\r\n  result or (b) iterate over the result with a <b>for</b> loop.\r\nFor example, if a file named <b>f.txt</b> contained\r\n<b><pre>  a b c d e</pre></b>\r\nthen the code\r\n<b><pre>  i = goody.read_file_values(open('f.txt'))\r\n  print(next(i), next(i))  # print next two values in the file\r\n  for c in i:              # iterate over all remaining values in the file\r\n      print(c)</pre></b>   #   and print them\r\nwould print\r\n<b><pre>  a b\r\n  c\r\n  d\r\n  e</pre></b>\r\n<p>\r\nWe will learn when we examine iterators in depth that the <b>for</b> loop\r\n  implicitly calls <b>next</b> on the object (here <b>i</b>) that it is\r\n  iterating over.\r\n<p>\r\nWe can build the dictionary by \"prereading\" <b>n</b> words (by calling\r\n  <b>next</b> explicitly) into a <b>list</b> (assume that this is always\r\n  possible;\r\n  how might it not be?); then repeatedly read the next word and put it in as a\r\n  value associated with the <b>list</b> of pre-read words; then, drop the\r\n  \"oldest\" word at the beginning of the <b>list</b>, and add this next word\r\n  as the \"youngest\" at the end of the <b>list</b> (always keeping the list\r\n  length at <b>n</b>); repeating this process until all the words have been\r\n  read.\r\nRemember to convert this <b>list</b> of words to a <b>tuple</b> of words,\r\n  before using it as a key in the dictionary.\r\n<p>\r\nFor a simple example, the file <b>wginput1.txt</b> contains the following\r\n  lines (it could have all this information on one line or more lines):\r\n<b><pre>  a b c b a d c b a d\r\n  c a a b a a d</pre></b>\r\n  \r\n<p>\r\nPrint all the associations in the corpus dictionary, one per line in standard\r\n  lexical order; after printing all associations, print the length of the\r\n  smallest and largest <b>list</b> that is a value in the dictionary.\r\nEach line contains an <b>n</b> word <b>tuple</b>, followed by the <b>list</b>\r\n   of unique words (no duplicates) that follow them anywhere in the text.\r\nIn standard lexical order, the keys appear in order relative to the first word \r\n  in the <b>tuple</b>; for all first words that are the same, they appear in\r\n  order relative to the second word in the <b>tuple</b>; for all first and\r\n  second words that are the same, they appear in order relative to the thrid\r\n  word in the <b>tuple</b>; etc. (see the example below).\r\n<p>\r\nFor example, the file above would produce:\r\n<b><pre>  Corpus\r\n    ('a', 'a') can be followed by any of ['b', 'd']\r\n    ('a', 'b') can be followed by any of ['c', 'a']\r\n    ('a', 'd') can be followed by any of ['c']\r\n    ('b', 'a') can be followed by any of ['d', 'a']\r\n    ('b', 'c') can be followed by any of ['b']\r\n    ('c', 'a') can be followed by any of ['a']\r\n    ('c', 'b') can be followed by any of ['a']\r\n    ('d', 'c') can be followed by any of ['b', 'a']\r\n  min/max value lengths = 1/2</pre></b>\r\n<p>\r\nFor example, <b>('a','d')</b> appears three times in the text above, twice\r\n  followed by <b>'c'</b> and once followed by nothing (at the end of the file);\r\n  <b>('a','b')</b> appears twice in the file above, first followed by\r\n  <b>'c'</b> and second followed by <b>'a'</b>.\r\n<p>\r\n\r\nPrompt the user for the words to start with (there are <b>order statistic</b>\r\n  number of them) and the number of random words after that to generate.\r\nProduce such a <b>list</b> of words and print it. \r\n<p>\r\nA random 10 word <b>list</b>, after the words <b>a</b> and <b>d</b> might\r\n  print as\r\n<pre><b>    Random text = ['a', 'd', 'c', 'a', 'a', 'd', 'c', 'a', 'a', 'd', 'c', 'b']</b></pre>\r\nIn the result we start with <b>a d</b> (2 words specified by the user), we\r\n  know only <b>c</b> can come next; then using <b>d c</b> we know that\r\n  either <b>b</b> or <b>a</b> must come next; it randomly chooses <b>a</b>...\r\n<p>\r\n\r\n<h3>Functions and Script:</h3>\r\nWrite the following functions and script.\r\nI am providing line counts not as requirements, but to indicate the lengths of\r\n  well-written Pythonic code.\r\n<ul>\r\n<li><b>read_corpus</b> has an <b>order statistic</b> (<b>int</b>) parameter and\r\n     and open (file) parameter; it returns the dictionary representing the\r\n     corpus of words in a file\r\n    (body is 8 lines).\r\n<p>\r\n<li><b>corpus_as_str</b> has a dictionary parameter (representing the corpus);\r\n     it returns a multi-line string (each line is ended by <b>'\\n'</b>), which\r\n     when printed shows the contents of the corpus followed by the min/max\r\n     <b>list</b> lengths in the appropriate textual form\r\n     (body is 7 lines; can you do it in 4?).\r\n<p>\r\n<li><b>produce_text</b> has a dictionary parameter (representing the corpus),\r\n    a <b>list</b> parameter (representing the starting words), and an <b>int</b>\r\n    parameter (representing the number of additional words to generate);\r\n    it returns a <b>list</b> that contains the the starting words followed by\r\n    the generated words.\r\n    <p>\r\n    <b>Hints</b>: Let <b>n</b> be the <b>order statistic</b> of the dictionary.\r\n    Construct two <b>lists</b> (<b>[str]</b>), each initially storing these same\r\n      <b>n</b> starting words.\r\n    The first will always contain only the most recent <b>n</b> words (to be\r\n      coverted to a <b>tuple</b> and used as a key in the dictionary); the \r\n      second will  grow to contain all the generated words.\r\n    Generate a random next word from the dictionary by using the <b>choice</b>\r\n      function in the <b>random</b> module: e.g., <b>choice(['a','b','c'])</b>\r\n      will return a random value in the <b>list</b>, either <b>'a'</b>,\r\n      <b>'b'</b>, or <b>'b'</b>); add it to both <b>lists</b>; then, drop the\r\n      first word from the first <b>list</b>, so it remains a <b>list</b> of\r\n      length <b>n</b>; repeat until you have generated the required number of\r\n      words.\r\n    <p>\r\n    <b>Warning</b>: you might have to stop prematurely if you generate the last\r\n      <b>n</b> words in the text, and if these words occur nowhere else.\r\n    That is because in this case, there is no random word to generate following\r\n      them; in this case append a <b>None</b> to the end of the list of words\r\n      and  immediately return that list.\r\n    <p>\r\n    A slightly more elegant solution in Python uses only one list, copying the\r\n      last <b>order statistic</b> values of it into a tuple when needed for a\r\n      key to the dictionary.\r\n    Ensure that you do not mutate any of the parameters\r\n      (body is 8 lines).\r\n<p>     \r\n<li>Write a script at the bottom of this module\r\n    (in <b>if __name__ == '__main__':</b>) that prompts the user for (a) the\r\n    <b>order statistic</b> (rejecting non-positive values), (b) the file storing\r\n    the text, (c) <b>order statistic</b> words from the text, and (d) the\r\n    number of random words to generate (reject any negative values); it\r\n    calls these functions to solve the problem, and print the appropriate\r\n    information\r\n   (7 lines).\r\n</ul>\r\n<h3>Sample Interaction:</h3>\r\nThe program, as specified, will have the following interaction:\r\n  user-typed information appears in <i>italics</i>.\r\nYour output should match the form of this one (the actual random text my vary).\r\n<pre><b>  Enter order statistic: <i>2</i>\r\n  Enter file to process: <i>wginput1.txt</i>\r\n  Corpus\r\n    ('a', 'a') can be followed by any of ['b', 'd']\r\n    ('a', 'b') can be followed by any of ['c', 'a']\r\n    ('a', 'd') can be followed by any of ['c']\r\n    ('b', 'a') can be followed by any of ['d', 'a']\r\n    ('b', 'c') can be followed by any of ['b']\r\n    ('c', 'a') can be followed by any of ['a']\r\n    ('c', 'b') can be followed by any of ['a']\r\n    ('d', 'c') can be followed by any of ['b', 'a']\r\n  min/max value lengths = 1/2\r\n  \r\n  Enter 2 words to start with\r\n  Enter word 1: <i>a</i>\r\n  Enter word 2: <i>d</i>\r\n  Enter # of words to generate: <i>10</i>\r\n  Random text = ['a', 'd', 'c', 'a', 'a', 'd', 'c', 'a', 'a', 'd', 'c', 'b']</b></pre>\r\n<p>\r\nYou can also try reading a much larger file included in this project\r\n  folder <b>wghuck.txt</b>, Mark Twain's, \"The Adventures of Huckleberry Finn\".\r\nI tried it with an order statistic of 3.\r\nThe corpus has over 90,000 entries; the biggest key triple had an\r\nassociated value with 46 unique words in it.\r\nThe key was <b>('out', 'of', 'the')</b> and its associated value was the list\r\n<pre><b>  ['window', 'face', 'woods', 'fourth', 'front', 'jacket', 'hole', 'canoe', 'middle',\r\n   \"ferryboat's\", 'cottonwood', \"captain's\", 'river', 'fog', 'range', 'presbyterian', 'tree',\r\n   'nest', 'wagon-troughs', 'reach', 'store', 'way', 'wigwam', 'ark', 'room', 'corner', 'grave',\r\n   'nonesuch', 'trouble', 'kitchen', 'old', 'first', 'hardest', 'nigger-patch', 'sugar-bowl',\r\n   'window-hole', 'brass', 'spoon', 'house', 'tooleries', 'bag', 'office', 'post-office', 'cabin',\r\n   'path', 'chains']</b></pre>\r\n<p>\r\nWith the appropriate modification, we can use this same program to\r\n  read/generate music or DNA sequences or any other data made of symbols.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Extra Credit\r\n\r\n<a name=\"problem5\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Extra Credit</b></td>\r\n<td width =\"80%\">\r\nWrite up all three answers in the file <b>extracredit.txt</b> and drop them off\r\n  on checkmate.\r\n<ol>\r\n<li>Specify a fa that is equivalent to the ndfa that finds inputs that end\r\n      in <b>01</b>.\r\n    It must identify some state that is stopped in only for input ending in 01\r\n    (the <b>end</b> state in the ndfa).\r\n<li>What is interesting about the results of the election using the\r\n      <b>votepref3.txt</b> input file?\r\n    How could we add another voter, such that his/her preferences allow X to\r\n      win on the first ballot?\r\n<li>In the word generator program we used a <b>dict</b> value that was a\r\n      <b>list</b> of words that was to contain no duplicates?\r\n    Why can't we just use a <b>set</b> (what would break in our code)?\r\n    If we wanted to use a set how could we modify the code to work correctly\r\n      (what is the smallest and/or fastest modification)?\r\n</td>\r\n</tbody>\r\n</table>\r\n--->\r\n</html>\r\n", "id": 10821.0}