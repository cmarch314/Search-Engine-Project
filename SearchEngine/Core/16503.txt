{"text": "The Sourcerer Project Sourcerer Web Services These services are in the process of being updated to the latest version of the Sourcerer infrastructure Please check back soon All the artifacts managed and stored in Sourcerer are accessible through a set of Web services Currently three services are open to public Code Search This service implements a query processing facility Client applications such as CodeGenie can send queries as combination of terms and fields and the service returns a result set with detailed information on the entities that matched the queries The query language is based on Lucene s implementation and our extended query parser supports different query forms that allow the clients to express more structural information in the queries Repository Access This service provides access to the code stored in the Managed Repository in Sourcerer Every entity that is stored in the Sourcerer repository has a unique identifier and this service provides access to the source of the entity given the unique id Dependency Slicing This service provide access to extract dependency slices of entities stored in the repository Clients can request the slice by specifying an entry point in the program For example if the entry point is a method request for a dependency slice for that method will return a zip file The zip contains newly fabricated compilation units with much unnecessary code stripped off as well as include some meta data detailing any unresolved external references These Web Services have simple REST style APIs Given a reuest via a valid URL the client will get a response back of appropriate format All requests should be sent via a HTTP GET request with parameters encoded in urls Given below are the instructions for how to construct valid requests to the three Sourcerer Web Services Code Search API Description Search requests can be made by sending a valid URL to the Sourcerer server Such requests send back XML data that represents the results for the requested query Search requests have the following form http sourcerer ics uci edu sourcerer ws search search qry VALID QUERY epp INT VALUE pid INT VALUE client CLIENTID The text inside the brackets above indicate parameters that need to be filled in The list below summarizes the parameters in the above URL qry A valid lucene query expression Refer to a list below to see available fields By default a conjunction logical and of all terms is considered epp Number of entries to display results per page pid Page index of the search result client Client type For example codegenie or webapp This is for tracking purposes only and does not affect search result Here is how a valid url looks like http sourcerer ics uci edu sourcerer ws search search qry sort epp 1 pid 1 client webclient Search Results You can copy and paste the above url in a browser to see the result returned by the search sevice The XML represenation of the search results returned by the service follows the following schema as shown below Index Fields Please refer to these available index fields to see what index field names you can use while constructing a query Please refer this link to learn how to construct a valid lucene query Dependency Program Slicing API Description The URL request for dependency slicing has the following form http sourcerer ics uci edu sourcerer slicer slice eid ENTITY ID client CLIENT ID Values in the brackets above indicates required parameters Here is how a valid url looks like http sourcerer ics uci edu sourcerer slicer slice eid 3148295 client webapp This service works well after retrieving search results from the code query service Each result entry has a field that provides the entity id of the entity that the entry represents Using that value in the slice request sends back a zip with sliced dependencies for that entity File Server API Description The File Server or the repository access service provides access to all the source code in the Sourcerer repository The URL has the following form http sourcerer ics uci edu sourcerer repodata resource rp RELATVE RESOURCE PATH client CLIENT ID The parameter rp denotes the relative path of the resource in the Sourcerer repository For any entity this information is available in the search result entry Parameter client has the same purpose and as described in previous services Here is how a valid url looks like http sourcerer ics uci edu sourcerer repodata resource rp 8 454 src delivery java org stringtree util sort Sorter java client webapp Java Library We have implemented a Java library that makes it easy to program the Sourcerer search service Using this library will take away the overhead of unmarshalling the XML data returned by the search service Here is how you could import it in an IDE Eclipse and start programming with the Sourcerer search service Please email the contact below if you want to obtain this library Programming It is quite simple to program the search service using the library mentioned above You open a HTTP input stream with a valid URL and give it to the SearchResultUnMarshaller class that will give you a SearchResult instance holding SearchResultEntry instances This is how it could look like Make sure you have all the HTTP parameters correct while creating the URL if you do not get the results you expect Contact Please contact Joel Ossher if you intend to use Sourcerer Web Services Thank You Overview Core Infrastructure Repository SourcererDB Services Code Search Engine Tutorial People Publications", "_id": "http://sourcerer.ics.uci.edu/services.html", "title": "sourcerer project: services", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n\n<head>\n<title>Sourcerer Project: Services</title>\n<link rel=\"stylesheet\" href=\"css/sourcerer.css\" type=\"text/css\" />\n</head>\n\n<body>\n<div id=\"container\">\n<div id=\"header\">\n<div id=\"a1\"></div>\n<div id=\"a2\"></div>\n<div id=\"a3\"></div>\n<div id=\"a4\"></div>\n<div id=\"a5\"></div>\nThe Sourcerer Project\n</div>\n<div id=\"content\">\n<div id=\"main\">\n<h1>Sourcerer Web-Services</h1>\n<p style=\"font-weight:bold;\">These services are in the process of being updated to the latest version of the Sourcerer infrastructure. Please check back soon.</p>\n<p>All the artifacts managed and stored in Sourcerer are \naccessible through a set of Web-services. Currently three \nservices are open to public.</p>\n\n<h3>Code Search</h3>\n<div class=\"sub\">\n<p>This service implements a query processing facility. Client\napplications (such as CodeGenie) can send queries as combination of\nterms and fields and the service returns a result set with detailed\ninformation on the entities that matched the queries. The query language\nis based on Lucene's implementation and our extended query parser\nsupports different query forms that allow the clients to express more\nstructural information in the queries.</p>\n</div>\n<h3>Repository Access</h3>\n<div class=\"sub\">\n<p>This service provides access to the code stored in the Managed\nRepository in Sourcerer. Every entity that is stored in the Sourcerer\nrepository has a unique identifier and this service provides access to\nthe source of the entity given the unique id.</p>\n</div>\n<h3>Dependency Slicing</h3>\n<div class=\"sub\">\n<p>This service provide access to extract dependency slices of\nentities stored in the repository. Clients can request the slice by\nspecifying an entry point in the program. For example, if the entry\npoint is a method, request for a dependency slice for that method will\nreturn a zip file. The zip contains newly fabricated compilation units\nwith much unnecessary code stripped off, as well as include some\nmeta-data detailing any unresolved external references.</p>\n</div>\n\n<p>These Web-Services have simple REST style\nAPIs. Given a reuest (via a valid URL) the client will get a response\nback of appropriate format. All requests should be sent via a HTTP GET request with\nparameters encoded in urls.</p>\n\n<p> \nGiven below are the instructions for how to construct valid requests\nto the three Sourcerer Web-Services.\n</p> \n\n<h2>Code Search API Description</h2>\n<div class=\"sub\">\n\n<p>Search requests can be made by sending a valid URL to the Sourcerer\nserver. Such requests send back XML data that represents the results\nfor the requested query. Search requests have the following form:</p> \n \n<p><span class=\"fixed\">\nhttp://sourcerer.ics.uci.edu/sourcerer/ws-search/search?qry=[VALID_QUERY]&amp;epp=[INT_VALUE]&amp;pid=[INT_VALUE]&amp;client=[CLIENTID]\n</span></p> \n \n<p>The text inside the brackets above indicate parameters that need to\nbe filled in. The list below summarizes the parameters in the above URL</p>\n\n<ul>\n\t<li><span class=\"emph\">qry:</span> A valid lucene query\n\texpression. (Refer to a list below to see available fields). By default\n\ta conjunction (logical and) of all terms is considered.</li>\n\t<li><span class=\"emph\">epp:</span> Number of entries to display\n\t(results) per page.</li>\n\t<li><span class=\"emph\">pid:</span> Page index of the search result.</li>\n\t<li><span class=\"emph\">client:</span> Client type. For example:\n\t\"codegenie\" or \"webapp\". This is for tracking purposes only, and does\n\tnot affect search result.</li>\n</ul>\n<br>\n<p>Here is how a valid url looks like:<span class=\"fixed\"> \nhttp://sourcerer.ics.uci.edu/sourcerer/ws-search/search?qry=sort&amp;epp=10&amp;pid=1&amp;client=webclient\n</span></p> \n \n<h3>Search Results</h3> \n<div class=\"sub\">\n<p>You can copy and paste the above url in a browser to see the result\nreturned by the search sevice. The XML represenation of the search\nresults returned by the service follows the following schema as shown\nbelow.</p> \n \n<img style=\"width: 100%\" src=\"images/services/search-results.png\"> \n </div>\n<h3>Index Fields</h3> \n<div class=\"sub\">\n<p> \nPlease refer to these available index fields to see what index field names\nyou can use while constructing a query. Please refer this <a\n\thref=\"http://lucene.apache.org/java/2_3_2/queryparsersyntax.html\">link</a> to\nlearn how to construct a valid lucene query.</p> \n \n<img style=\"width: 100%\" src=\"images/services/indexfields.png\"/> \n</div>\n<h2>Dependency (Program) Slicing API Description</h2>\n<div class=\"sub\"> \n<p> \nThe URL request for dependency slicing has the following form:\n</p> \n \n<p><span class=\"fixed\"> \nhttp://sourcerer.ics.uci.edu/sourcerer/slicer/slice?eid=[ENTITY_ID]&amp;client=[CLIENT_ID]\n</span></p> \n \n<p> \nValues in the brackets above indicates required parameters.\nHere is how a valid url looks like: \n</p> \n \n<p><span class=\"fixed\">http://sourcerer.ics.uci.edu/sourcerer/slicer/slice?eid=3148295&amp;client=webapp</span></p> \n \n<p>This service works well after retrieving search results from the\ncode query service. Each result entry has a field that provides the\nentity id of the entity that the entry represents. Using that value in\nthe slice request sends back a zip with sliced dependencies for that\nentity.</p> \n</div>\n<h2>File Server API Description</h2>\n<div class=\"sub\"> \n<p> \nThe File Server or the repository access service provides access to\nall the source code in the Sourcerer repository. The URL has the\nfollowing form:\n</p> \n \n<p><span class=\"fixed\"> \nhttp://sourcerer.ics.uci.edu/sourcerer/repodata/resource?rp=[RELATVE_RESOURCE_PATH]&amp;client=[CLIENT_ID]\n</span></p> \n \n<p> \nThe parameter 'rp' denotes the relative path of the resource in the\nSourcerer repository. For any entity this information is available in\nthe search result entry. Parameter 'client' has the same purpose and\nas described in previous services. Here is how a valid url looks like: \n</p> \n \n<p><span class=\"fixed\"> \nhttp://sourcerer.ics.uci.edu/sourcerer/repodata/resource?rp=8/454/src/delivery/java/org/stringtree/util/sort/Sorter.java&amp;client=webapp\n</span></p> \n</div>\n\n<h2>Java Library</h2> \n<div class=\"sub\"> \n<p> \nWe have implemented a Java library that makes it easy to program the\nSourcerer search service. Using this library will take away the\noverhead of unmarshalling the XML data returned by the search service.\nHere is how you could import it in an IDE (Eclipse) and start\nprogramming with the Sourcerer search service.\n</p> \n \n<img style=\"width: 100%\" src=\"./images/services/msjar.png\"/> \n \n<p>Please <a href=\"#contact\">email the contact</a> below if you want\nto obtain this library.</p> \n </div>\n<h3>Programming</h3> \n<div class=\"sub\">\n<p>It is quite simple to program the search service using the library\nmentioned above. You open a HTTP input stream with a valid URL, and, give it to the\n<i>SearchResultUnMarshaller</i> class; that will give you a\n<i>SearchResult</i> instance holding <i>SearchResultEntry</i> \n\tinstances. This is how it could look like:</p> \n \n<img style=\"width: 100%\" src=\"./images/services/code.png\"/>\t\n \n<p>Make sure you have all the HTTP parameters correct while creating\nthe URL if you do not get the results you expect.</p> \n \n</div>\n<h2><a name=\"contact\">Contact</a></h2> \n<div class=\"sub\"> \n<p> \nPlease contact Joel Ossher \n(<script>document.write(String.fromCharCode(60, 97, 32, 104, 114, 101,\n\t102, 61, 39, 109, 97, 105, 108, 116, 111, 58, 115, 98, 97,\n\t106, 114, 97, 99, 104, 64, 117, 99, 105, 46, 101, 100, 117,\n\t39, 62, 106, 111, 115, 115, 104, 101, 114, 64, 117, 99, 105, 46, 101, 100, 117, 60, 47, 97, 62))</script>) if you\nintend to use Sourcerer Web-Services. Thank You!\n</p>\n</div>\n</div> \n</div>\n</div>\n<div id=\"navbar\">\n  <div><a href=\"index.html\">Overview</a></div>\n  <div><a href=\"infrastructure.html\">Core Infrastructure</a></div>\n  <div><a href=\"repository.html\">Repository</a></div>\n  <div><a href=\"sourcerer-db.html\">SourcererDB</a></div>\n  <div><a class=\"sel\" href=\"services.html\">Services</a></div>\n  <div><a href=\"code-search-engine.html\">Code Search Engine</a></div>\n  <!--<div><a href=\"code-genie.html\">CodeGenie</a></div> -->\n  <div><a href=\"tutorial.html\">Tutorial</a></div>\n  <div><a href=\"people.html\">People</a></div>\n  <div><a href=\"publications.html\">Publications</a></div>\n</div>\n</div>\n</body>\n</html>\n", "id": 16503.0}