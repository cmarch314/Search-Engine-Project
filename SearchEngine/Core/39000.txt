{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 7Polygons and Polygon Operations Geert Jan Giezeman and Wieger Wesselink 7 1 Introduction A polygon is a closed chain of edges Several algorithms are available for polygons For some of those algorithms it is necessary that the polygon is simple A polygon is simple if edges don t intersect except consecutive edges which intersect in their common vertex The following algorithms are available find the leftmost rightmost topmost and bottommost vertex compute the signed area check if a polygon is simple check if a polygon is convex find the orientation clockwise or counterclockwise check if a point lies inside a polygon All those operations take two forward iterators as parameters in order to describe the polygon These parameters have a point type as value type The type Polygon 2 can be used to represent polygons Polygons are dynamic Vertices can be modified inserted and erased They provide the algorithms described above as member functions Moreover they provide ways of iterating over the vertices and edges Currently the Polygon 2 class is a nice wrapper around the algorithms but little more Especially computed values are not cached That is when the is simple member function is called twice or more the result is computed each time anew It is possible to set a preprocessor flag to alter this behaviour In the future caching will become the default 7 2 Example The following code fragment creates a polygon and does some checks file examples Polygon Polygon C include CGAL Cartesian h include CGAL Polygon 2 h include iostream typedef CGAL Cartesian double K typedef K Point 2 Point typedef CGAL Polygon 2 K Polygon using std cout using std endl int main Point points Point Point 5 1 Point 1 1 Point 5 6 Polygon pgn points points 4 check if the polygon is simple cout The polygon is pgn is simple not simple endl check if the polygon is convex cout The polygon is pgn is convex not convex endl return Figure A polygon and some points file examples Polygon polygon algorithms C include CGAL Cartesian h include CGAL Polygon 2 algorithms h include iostream typedef CGAL Cartesian double K typedef K Point 2 Point using std cout using std endl void check inside Point pt Point pgn begin Point pgn end K traits cout The point pt switch CGAL bounded side 2 pgn begin pgn end pt traits case CGAL ON BOUNDED SIDE cout is inside the polygon n break case CGAL ON BOUNDARY cout is on the polygon boundary n break case CGAL ON UNBOUNDED SIDE cout is outside the polygon n break int main Point points Point Point 5 1 Point 1 1 Point 5 6 check if the polygon is simple cout The polygon is CGAL is simple 2 points points 4 K not simple endl check inside Point 5 5 points points 4 K check inside Point 1 5 2 5 points points 4 K check inside Point 2 5 points points 4 K return Next chapter Polygons and Polygon Operations Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Polygon/Chapter_main.html", "title": "polygons and polygon operations", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Polygon/main.tex' -->\n<html> <head>  \n<title>Polygons and Polygon Operations</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_7\"></a>\n  \n<h1>Chapter 7<BR>Polygons and Polygon Operations</h1>\n\n<A NAME=\"Polygon\"></A>\n<EM>Geert-Jan Giezeman  and Wieger Wesselink</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>7.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nA polygon is a closed chain of edges. Several algorithms are available for\npolygons. For some of those algorithms, it is necessary that the polygon is\nsimple. A polygon is simple if edges don't intersect, except consecutive edges,\nwhich intersect in their common vertex.\n<P>\n\nThe following algorithms are available:\n<UL>\n<LI>find the leftmost, rightmost, topmost and bottommost vertex.\n<LI>compute the (signed) <A HREF=\"../Kernel_23_ref/Function_area.html#Cross_link_anchor_159\">area</A>.\n<LI>check if a polygon is simple.\n<LI>check if a polygon is convex.\n<LI>find the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> (clockwise or counterclockwise)\n<LI>check if a point lies inside a polygon.\n</UL>\nAll those operations take two forward iterators as parameters in order to\ndescribe the polygon. These parameters have a point type as value type.\n<P>\n\nThe type <I><A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A></I> can be used to represent polygons.\nPolygons are dynamic. Vertices can be modified, inserted and erased.\nThey provide the algorithms described above as member functions.\nMoreover, they provide ways of iterating over the vertices and edges.\n<P>\n\nCurrently, the <I><A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A></I> class is a nice wrapper around the algorithms,\nbut little more. Especially, computed values are not cached.\nThat is, when the <I>is_simple()</I> member function is called twice or more,\nthe result is computed each time anew. It is possible to set a preprocessor flag\nto alter this behaviour. In the future, caching will become the default.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>7.2&nbsp;&nbsp;&nbsp;Example</h2>\n<P>\n\nThe following code fragment creates a polygon and does some checks.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Polygon/Polygon.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>.h&gt;\n#include &lt;iostream&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\ntypedef K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> Point;\ntypedef <A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_671\">CGAL::Polygon_2</A>&lt;K&gt; Polygon;\nusing std::cout; using std::endl;\n\n\nint main()\n{\n  Point points[] = { Point(0,0), Point(5.1,0), Point(1,1), Point(0.5,6)};\n  Polygon pgn(points, points+4);\n\n  // check if the polygon is simple.\n  cout &lt;&lt; &quot;The polygon is &quot; &lt;&lt; \n    (pgn.is_simple() ? &quot;&quot; : &quot;not &quot;) &lt;&lt; &quot;simple.&quot; &lt;&lt; endl;\n\n  // check if the polygon is convex\n  cout &lt;&lt; &quot;The polygon is &quot; &lt;&lt; \n    (pgn.is_convex() ? &quot;&quot; : &quot;not &quot;) &lt;&lt; &quot;convex.&quot; &lt;&lt; endl;\n\n  return 0;\n}\n\n</pre>\n<P>\n\n<B>Figure:&nbsp;&nbsp;</B>A polygon and some points\n<A NAME=\"I1_Fig_a_polygon\"></A>\n\n<CENTER>\n<img border=0 src=\"./pgn_algos.gif\" align=center alt=\"Example polygon\">\n</CENTER>\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Polygon/polygon_algorithms.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/Polygon_2_algorithms.h&gt;\n#include &lt;iostream&gt;\n\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;double&gt; K;\ntypedef K::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> Point;\nusing std::cout; using std::endl;\n\nvoid check_inside(Point pt, Point *pgn_begin, Point *pgn_end, K traits)\n{\n  cout &lt;&lt; &quot;The point &quot; &lt;&lt; pt;\n  switch(<A HREF=\"../Polygon_ref/Function_bounded_side_2.html#Cross_link_anchor_658\">CGAL::bounded_side_2</A>(pgn_begin, pgn_end,pt, traits)) {\n    case CGAL::<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDED_SIDE</A> :\n      cout &lt;&lt; &quot; is inside the polygon.\\n&quot;;\n      break;\n    case CGAL::<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_BOUNDARY</A>:\n      cout &lt;&lt; &quot; is on the polygon boundary.\\n&quot;;\n      break;\n    case CGAL::<A HREF=\"../Kernel_23_ref/Enum_Bounded_side#Enum_Bounded_side\">ON_UNBOUNDED_SIDE</A>:\n      cout &lt;&lt; &quot; is outside the polygon.\\n&quot;;\n      break;\n  }\n}\n\nint main()\n{\n  Point points[] = { Point(0,0), Point(5.1,0), Point(1,1), Point(0.5,6)};\n\n  // check if the polygon is simple.\n  cout &lt;&lt; &quot;The polygon is &quot;\n    &lt;&lt; (<A HREF=\"../Polygon_ref/Function_is_simple_2.html#Cross_link_anchor_662\">CGAL::is_simple_2</A>(points, points+4, K()) ? &quot;&quot; : &quot;not &quot;) \n    &lt;&lt; &quot;simple.&quot; &lt;&lt; endl;\n\n  check_inside(Point(0.5, 0.5), points, points+4, K());\n  check_inside(Point(1.5, 2.5), points, points+4, K());\n  check_inside(Point(2.5, 0), points, points+4, K());\n\n  return 0;\n}\n\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Polygon_ref/Chapter_intro.html\">Polygons and Polygon Operations</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39000.0}