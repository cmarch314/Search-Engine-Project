{"text": "Software Quality Assurance and Organizational Processes Overview Project Memo UIUC 2 3 9 18 March 2 3 Prof Les Gasser Graduate School of Library and Information Science University of Illinois at Urbana Champaign gasser uiuc edu Errors like straws upon the surface flow He who would search for pearls must dive below John Dryden All for Love Prologue Description Mistakes errors and problems are a common element of working life and a part of all settings at one time or another In software production the work of identifying and resolving errors bugs and mistakes plays a large part Operating system idiosyncrasies or seemingly random glitches in program runs keep designers from refining programs which are almost perfect In the worst cases buggy software can present major threats to security economic health and even lives In the best case it is annoying and time consuming People who work with software tools often need to rationalize difficulties to others repeat work and invent ways to circumvent problems they face as a result of computing errors Developers themselves need to define and negotiate what are significant versus insignificant issues how to allocate limited resources and how to please multiple clients in many overlapping balancing processes These efforts sap time energy and resources and often even positive sentiment both in provider client relationships and internally in software development teams As complex software artifacts proliferate and become more central to even ubiquitous in peoples lives the social cost of software errors and bugs may increase Since errors and bugs reduce the effectiveness with which we can build and use software systems we re interested in understanding how bugs come about how they can best be managed and how people who build and use advanced software systems can organize their work to prevent overcome deal with and accommodate problems Most accounts of software problems focus on flaws in technical design and usability Surely better design prototyping and needs analyses can help But there s clearly much more to the issue specifically the reliability of a software artifact is related to the structure of the technical and organization processes that produce it and to the technical and organizational infrastructures and constraints under which it is built and maintained This research is probing several aspects of this mix We re examining questions such as What is the detailed character of the practice of quality assurance in software teams What kind of activities occur For example our previous research has identified activities such as defining redefining negotiating the meaning of bugs and their importance replicating the causes and effects of bugs attributing causes and responsibilities etc and begun to explore the relationships of these activities to social organization and project infrastructure Is there a normal practice of software construction and software use What is the normal role of errors mistakes problems insecurity and unreliability How prevalent are problems Can problems be eliminated in principle Why do some software problems persist indefinitely in some contexts while others get resolved quickly How do specific software design methods and techniques help or hinder in managing reliability When and how do people creatively redefine and work around problems errors mistakes reliability security etc as strategies of management control and social integration How do people in teams decide what are critical problems what problems should and should not be resolved and how to allocate limited software quality assurance resources How do quality assurance processes decisions requirements and constraints evolve through the lifecycle of projects How can we capture measure visualize assess etc the relationships between multiple problems multiple constraints and multiple actors in a software artifact and its supporting organizational infrastructure What do people do when problems can t be resolved How do social and technical systems adapt in the face of endemic problems How are reliability problems arenas for social integration and cohesion How do varying degrees of social integration and cohesion impact quality assurance processes and software reliability How can bug tracking and support tools best support the organizational and team processes of software quality assurance Where do they fail How can those tools be viewed analyzed and optimized as critical information infrastructures for software development teams and organizations How are these issues conditioned by the special features of the distributed work and organizational contexts specific to open source software projects Role of Open Source Bug Repository Data Our preliminary work on these issues has been done with small to moderate sized datasets of qualitative data in the form of structured interviews with software developers and users These have helped refine our idea of some of the critical problems and have helped build some preliminary insights But it s difficult to analyze issues such as the ones above without comprehensive time and project specific data from large projects With over severl hundred thousand problem reports from a variety of open source projects widely accessible open source bug repositories provides an extremely large and diverse dataset for analyzing issues like those above We ve reviewed a number of reported bugs via individual searches and downloads from repositories including Gnome Debian Gnu Linux OpenOffice org and others These repositories appear to have the following characteristics that make them ideally suited as datasets for investigating such issues Significant number of bug reports There is enough opportunity for triangulating preliminary hypotheses for searching for patterns over time and type and so on There is likely to be significant variance in bug types report types and responses to learn something interesting Longitudinal life cycle data Data has been captured over a relatively long period several years allowing for analysis of processes and their evolution over time Both qualitative and quantitative data These repositories can be analyzed quantitatively in terms of numbers of events event types response types dates timelines etc It can also be analyzed qualitatively by comparatively examining the texts of bug reports responses analyses etc Structured data The data in these repositories is already captured in structured form that allows for more systematic analysis and for more automated quantitative analysis using e g data mining statistical analysis and network analysis techniques ", "_id": "http://www.ics.uci.edu/~wscacchi/Papers/UIUC/sqa-overview.html", "title": "(overview) software problems and organizational processes", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\r\n<HTML>\r\n<HEAD>\r\n   <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=iso-8859-1\">\r\n   <TITLE>(Overview) Software Problems and Organizational Processes</TITLE>\r\n</HEAD>\r\n<BODY  LINK=\"#0000FF\" VLINK=\"#800080\">\r\n\r\n<CENTER>\r\n<H2>Software Quality Assurance and Organizational Processes</H2>\r\n<h2>(Overview)</h2>\r\n\r\n<h3>Project Memo UIUC-2003-09, 18 March 2003</h3>\r\n\r\n<h3>Prof. Les Gasser<BR>\r\nGraduate School of Library and Information Science<BR>\r\nUniversity of Illinois at Urbana-Champaign<BR>\r\ngasser@uiuc.edu<BR>\r\n</h3>\r\n\r\n</CENTER>\r\n<BR>\r\n<BR>\r\n\r\n<BLOCKQUOTE>\r\n<I>Errors, like straws, upon the surface flow;<BR>\r\nHe who would search for pearls must dive below.</I>\r\n<BR><BR>\r\n-- John Dryden [All for Love, Prologue.]\r\n</BLOCKQUOTE>\r\n\r\n<P>\r\n<B>Description:</B>\r\n</P>\r\n\r\n<P>Mistakes, errors, and problems are a common element of working\r\nlife, and a part of all settings at one time or another. In software\r\nproduction, the work of identifying and resolving errors, bugs and\r\nmistakes plays a large part.  Operating system idiosyncrasies or\r\nseemingly random \"glitches\" in program runs keep designers from\r\nrefining programs which are \"almost perfect\". In the worst cases,\r\nbuggy software can present major threats to security, economic health,\r\nand even lives. In the best case, it is annoying, and\r\ntime-consuming. People who work with software tools often need to\r\nrationalize difficulties to others, repeat work, and invent ways to\r\ncircumvent problems they face as a result of computing\r\nerrors. Developers themselves need to define and negotiate what are\r\nsignificant versus insignificant issues, how to allocate limited\r\nresources, and how to please multiple clients in many overlapping\r\nbalancing processes. These efforts sap time, energy, and resources and\r\noften even positive sentiment, both in provider-client relationships\r\nand internally, in software development teams. As complex software\r\nartifacts proliferate and become more central to---even ubiquitous\r\nin---peoples' lives, the social cost of software errors and bugs may\r\nincrease.  Since errors and bugs reduce the effectiveness with which\r\nwe can build and use software systems, we're interested in\r\nunderstanding how bugs come about, how they can best be managed, and\r\nhow people who build and use advanced software systems can organize\r\ntheir work to prevent, overcome, deal with, and accommodate problems.\r\n</P>\r\n\r\n<P>\r\nMost accounts of software problems focus on flaws in technical design\r\nand usability. Surely better design, prototyping, and needs analyses\r\ncan help.  But there's clearly much more to the issue---specifically,\r\nthe reliability of a software artifact is related to the structure of\r\nthe technical and organization processes that produce it and to the\r\ntechnical and organizational infrastructures and constraints under\r\nwhich it is built and maintained. This research is probing several\r\naspects of this mix.  We're examining questions such as:\r\n</P>\r\n\r\n<UL>\r\n\r\n<LI>What is the detailed character of the practice of quality\r\nassurance in software teams? What kind of activities occur?  (For\r\nexample, our previous research has identified activities such as\r\ndefining/redefining/negotiating the meaning of bugs and their\r\nimportance; replicating the causes and effects of bugs, attributing\r\ncauses and responsibilities, etc., and begun to explore the\r\nrelationships of these activities to social organization and project\r\ninfrastructure.) </LI><BR>\r\n\r\n<LI>Is there a \"normal practice\" of software construction and software\r\nuse? What is the 'normal' role of errors, mistakes, problems,\r\ninsecurity, and unreliability? How prevalent are problems? Can\r\nproblems be eliminated in principle?  </LI><BR>\r\n  \r\n<LI>Why do some software problems persist indefinitely in some\r\ncontexts, while others get resolved quickly?  </LI><BR>\r\n  \r\n<LI>How do specific software design methods and techniques help or\r\nhinder in managing reliability?  </LI><BR>\r\n  \r\n<LI>When and how do people creatively redefine and work around\r\nproblems, errors, mistakes, reliability, security, etc. as strategies\r\nof management, control, and social integration?  </LI><BR>\r\n  \r\n<LI>How do people in teams decide what are critical problems, what\r\nproblems should and should not be resolved, and how to allocate\r\nlimited software quality assurance resources? </LI><BR>\r\n\r\n<LI>How do quality assurance processes, decisions, requirements, and\r\nconstraints evolve through the lifecycle of projects?  </LI><BR>\r\n\r\n<LI>How can we capture, measure, visualize, assess (etc.) the\r\nrelationships between multiple problems, multiple constraints, and\r\nmultiple actors in a software artifact and its supporting\r\norganizational infrastructure?  </LI><BR>\r\n\r\n<LI>What do people do when problems can't be resolved? How do social\r\nand technical systems adapt in the face of endemic problems? \r\n</LI><BR>\r\n\r\n<LI>How are reliability problems arenas for social integration and\r\ncohesion? How do varying degrees of social integration and cohesion\r\nimpact quality assurance processes and software reliability?</LI><BR>\r\n\r\n<LI>How can bug-tracking and support tools best support the\r\norganizational and team processes of software quality assurance? Where\r\ndo they fail? How can those tools be viewed, analyzed, and optimized\r\nas critical information infrastructures for software development teams\r\nand organizations?</LI><BR>\r\n\r\n<LI>How are these issues conditioned by the special features of the\r\ndistributed work and organizational contexts specific to open source\r\nsoftware projects? </LI><BR>\r\n\r\n</UL>\r\n\r\n<P><B>Role of Open Source Bug Repository Data</B>\r\n</P>\r\n\r\n<P>Our preliminary work on these issues has been done with small to\r\nmoderate-sized datasets of qualitative data in the form of structured\r\ninterviews with software developers and users. These have helped\r\nrefine our idea of some of the critical problems, and have helped\r\nbuild some preliminary insights. But it's difficult to analyze issues\r\nsuch as the ones above, without comprehensive, time- and\r\nproject-specific data from large projects. With over severl hundred\r\nthousand problem reports from a variety of open-source projects,\r\nwidely-accessible open source bug repositories provides an extremely\r\nlarge and diverse dataset for analyzing issues like those above. We've\r\nreviewed a number of reported bugs via individual searches and\r\ndownloads, from repositories including Gnome, Debian Gnu/Linux,\r\nOpenOffice.org, and others. These repositories appear to have the\r\nfollowing characteristics that make them ideally suited as datasets\r\nfor investigating such issues:\r\n<UL>\r\n<LI><B>Significant number of bug reports:</B> There is enough\r\nopportunity for triangulating preliminary hypotheses, for searching\r\nfor patterns over time and type and so on. There is likely to be\r\nsignificant variance in bug types, report types, and responses to\r\nlearn something interesting.  </LI><BR>\r\n\r\n<LI><B>Longitudinal, life-cycle data:</B> Data has been captured over a\r\nrelatively long period--several years, allowing for analysis of\r\nprocesses and their evolution over time.</LI><BR>\r\n\r\n<LI><B>Both qualitative and quantitative data:</B> These repositories\r\ncan be analyzed quantitatively (in terms of numbers of events, event\r\ntypes, response types, dates, timelines, etc.) It can also be analyzed\r\nqualitatively, by comparatively examining the texts of bug reports,\r\nresponses, analyses, etc.</LI><BR>\r\n\r\n<LI><B>Structured data:</B> The data in these repositories is already\r\ncaptured in structured form, that allows for more systematic analysis\r\nand for more automated, quantitative analysis, using e.g. data mining,\r\nstatistical analysis, and network analysis techniques. </LI><BR>\r\n</UL>\r\n</P>\r\n\r\n<BR>\r\n<BR>\r\n<BR>\r\n\r\n</BODY>\r\n</HTML>\r\n\r\n", "id": 25925.0}