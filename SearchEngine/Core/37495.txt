{"text": "OEChem Python Theory Manual Version 1 3 1 Previous 25 1 2 Set Theory to Up 25 1 Ontology and Schema Next 25 1 4 Data Modeling Bibliography 25 1 3 OEChem Examples The above explanation should go some way to explaining OEChem s decision to attach biopolymer information to each atom rather than have container classes for residues and chains and presumably connected components NMR models etc The OEResidue class is therefore an additional set of fields that may be associated with an atom It does not denote or prescribe an amino or nucleic acid but instead stores atom specific data such as atom serial number b factor and occupancy in addition to residue information chain information fragment information NMR model information etc The residue information associated with an atom can be set with the OEAtomSetResidue function and is retrieved with the OEAtomGetResidue function The PDB and Macromodel file format readers parse this information from the input file format Additionally OEChem allows residue information to be perceived directly from the connection table using the OEPerceiveResidues function For many algorithms processing biomolecules it is convenient to maintain the atoms of the OEMolBase in sorted order to group atoms in the same residue next to one another and residues in the same chain sequentially This can be done conveniently in OEChem using the OEPDBOrderAtoms function Note that OEPercieveResidues calls OEPDBOrderAtoms automatically A common idiom is therefore the following code snippet def MyPrepareProtein mol if OEHasResidues mol OEPDBOrderAtoms mol else OEPerceiveResidues mol As a teaching example the following code demonstrates one way of reporting the number of different chains in an OEMolBase def MyCountChains mol result first True prev None for atom in mol GetAtoms res OEAtomGetResidue atom chain res GetChainID if first or chain prev result 1 first False prev chain return result A slightly improved version would be to use OEChem s OESameChain function def MyCountChains2 mol result prev None for atom in mol GetAtoms res OEAtomGetResidue atom if prev and OESameChain res prev continue prev res result 1 return result Clearly a MyCountResidues function would look almost identical but use the OESameResidue function instead of OESameChain The slightly more complicated example below reports the number of residues in each chain def MyReportResidues1 mol prevchain None for chain in mol GetAtoms chainres OEAtomGetResidue chain if not prevchain or not OESameChain chainres prevchain prevres None count for residue in mol GetAtoms resres OEAtomGetResidue residue if OESameChain resres chainres if not prevres or not OESameChain resres prevres prevres resres count 1 print count residues in chain chainres GetChainID prevchain chainres Whilst the above example contains the doubly nested loops that some structural biologists like to see the same output can be generated even more efficiently by def MyReportResidues2 mol count residue None chain None for atom in mol GetAtoms res OEAtomGetResidue atom if not chain chain res elif not OESameChain res chain print count residues in chain chain GetChainID count if not residue or not OESameResidue res residue residue res count 1 if count print count residues in chain chain GetChainID Of course just because OEChem uses an extremely advanced representation of biopolymers there s absolutely nothing to prevent a user slurping this information into a FORTRAN common block or whichever representation best suits their way of thinking about the problem OEChem Python Theory Manual Version 1 3 1 Previous 25 1 2 Set Theory to Up 25 1 Ontology and Schema Next 25 1 4 Data Modeling Bibliography Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/pyprog/node223.html", "title": "25.1.3 oechem examples", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>25.1.3 OEChem Examples</title>\n<META NAME=\"description\" CONTENT=\"25.1.3 OEChem Examples\">\n<META NAME=\"keywords\" CONTENT=\"pyprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"pyprog.css\">\n<link rel=\"first\" href=\"pyprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node224.html\">\n<LINK REL=\"previous\" HREF=\"node222.html\">\n<LINK REL=\"up\" HREF=\"node220.html\">\n<LINK REL=\"next\" HREF=\"node224.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node222.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node220.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node224.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node222.html\">25.1.2 Set Theory to</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node220.html\">25.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node224.html\">25.1.4 Data Modeling Bibliography</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H2><A NAME=\"SECTION0027130000000000000000\">\n25.1.3 OEChem Examples</A>\n</H2>\n\n<P>\nThe above explanation should go some way to explaining OEChem's\ndecision to attach biopolymer information to each atom, rather than\nhave container classes for residues and chains (and presumably\nconnected components, NMR models, etc...).  The OEResidue class is\ntherefore an additional set of fields that may be associated with\nan atom.  It does not denote or prescribe an amino or nucleic acid\nbut instead stores atom-specific data such as atom serial number,\nb-factor and occupancy, in addition to residue information, chain\ninformation, fragment information, NMR model information, etc...\n\n<P>\nThe residue information associated with an atom can be set with the\nOEAtomSetResidue function, and is retrieved with the OEAtomGetResidue\nfunction.  The PDB and Macromodel file format readers parse this\ninformation from the input file format.  Additionally, OEChem allows\nresidue information to be perceived directly from the connection\ntable using the OEPerceiveResidues function.\n\n<P>\nFor many algorithms processing biomolecules, it is convenient to\nmaintain the atoms of the OEMolBase in sorted order to group atoms\nin the same residue next to one another, and residues in the same\nchain sequentially.  This can be done conveniently in OEChem using\nthe OEPDBOrderAtoms function.  Note, that OEPercieveResidues calls\nOEPDBOrderAtoms automatically.\n\n<P>\nA common idiom is therefore the following code snippet:\n\n<P>\n<dl><dd><pre class=\"verbatim\">def MyPrepareProtein(mol):\n    if OEHasResidues(mol):\n        OEPDBOrderAtoms(mol)\n    else:\n        OEPerceiveResidues(mol)\n</pre></dl>\n\n<P>\nAs a teaching example, the following code demonstrates one way\nof reporting the number of different chains in an OEMolBase.\n\n<P>\n<dl><dd><pre class=\"verbatim\">def MyCountChains(mol):\n    result = 0\n    first = True\n    prev = None\n    for atom in mol.GetAtoms():\n        res = OEAtomGetResidue(atom)\n        chain = res.GetChainID()\n        if first or chain != prev:\n            result += 1\n        first = False\n        prev = chain\n    return result\n</pre></dl>\n\n<P>\nA slightly improved version would be to use OEChem's OESameChain function.\n\n<P>\n<dl><dd><pre class=\"verbatim\">def MyCountChains2(mol):\n    result = 0\n    prev = None\n    for atom in mol.GetAtoms():\n        res = OEAtomGetResidue(atom)\n        if prev and OESameChain(res,prev):\n            continue\n        prev = res\n        result += 1\n    return result\n</pre></dl>\n\n<P>\nClearly, a MyCountResidues function would look almost identical but\nuse the OESameResidue function instead of OESameChain.  The slightly\nmore complicated example below, reports the number of residues in\neach chain.\n\n<P>\n<dl><dd><pre class=\"verbatim\">def MyReportResidues1(mol):\n    prevchain = None\n    for chain in mol.GetAtoms():\n        chainres = OEAtomGetResidue(chain)\n        if not prevchain or not OESameChain(chainres, prevchain):\n            prevres = None\n            count = 0\n            for residue in mol.GetAtoms():\n                resres = OEAtomGetResidue(residue)\n                if OESameChain(resres, chainres):\n                    if not prevres or not OESameChain(resres,prevres):\n                        prevres = resres\n                        count += 1\n            print count,\"residues in chain\",chainres.GetChainID()\n            prevchain = chainres\n</pre></dl>\n\n<P>\nWhilst the above example contains the doubly nested loops that some\nstructural biologists like to see, the same output can be generated\neven more efficiently by:\n\n<P>\n<dl><dd><pre class=\"verbatim\">def MyReportResidues2(mol):\n    count = 0\n    residue = None\n    chain = None\n\n    for atom in mol.GetAtoms():\n        res = OEAtomGetResidue(atom)\n        if not chain:\n            chain = res\n        elif not OESameChain(res,chain):\n            print count,\"residues in chain\",chain.GetChainID()\n            count = 0\n\n        if not residue or not OESameResidue(res, residue):\n            residue = res\n            count += 1\n\n    if count&gt;0:\n        print count,\"residues in chain\",chain.GetChainID()\n</pre></dl>\n\n<P>\nOf course, just because OEChem uses an extremely advanced representation\nof biopolymers, there's absolutely nothing to prevent a user slurping\nthis information into a FORTRAN common block or whichever representation\nbest suits their way of thinking about the problem.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node222.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node220.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node224.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - Python Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"genindex.html\"><img src=\"../icons/index.gif\"\n  border=\"0\" alt=\"Index\"></A></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node222.html\">25.1.2 Set Theory to</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node220.html\">25.1 Ontology and Schema</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node224.html\">25.1.4 Data Modeling Bibliography</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 37495.0}