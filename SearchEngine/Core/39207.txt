{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL sorted matrix search advanced DefinitionThe function sorted matrix search selects the smallest entry in a set of sorted matrices that fulfills a certain feasibility criterion More exactly a matrix over a totally ordered set S is sorted iff Now let be a set of n sorted matrices over S and f be a monotone predicate on S i e If we assume there is any feasible element in one of the matrices in there certainly is a smallest such element This is the one we are searching for The feasibility test as well as some other parameters can and have to be customized through a traits class include CGAL sorted matrix search h template class RandomAccessIterator class Traits Traits Value sorted matrix search RandomAccessIterator f RandomAccessIterator l Traits t returns the element x in one of the sorted matrices from the range f l for which t is feasible x is true and t compare x y is true for all other y values from any matrix for which t is feasible y is true Precondition All matrices in f l are sorted according to Traits compare non strictly There is at least one entry x in a matrix M f l for which Traits is feasible x is true Requirement Traits is a model for SortedMatrixSearchTraits Value type of RandomAccessIterator is Traits Matrix See AlsoSortedMatrixSearchTraits ImplementationThe implementation uses an algorithm by Frederickson and Johnson FJ83 FJ84 and runs in n k f log n k where n is the number of input matrices k denotes the maximal dimension of any input matrix and f the time needed for one feasibility test ExampleIn the following program we build a random vector a ai i 1 5 elements drawn uniformly from 99 and construct a Cartesian matrix M containing as elements all sums ai aj i j 1 5 If a is sorted M is sorted as well So we can apply sorted matrix search to compute the upper bound for the maximal entry of a in M include CGAL Random h include CGAL Cartesian matrix h include CGAL sorted matrix search h include CGAL functional h include vector include algorithm include iterator typedef int Value typedef std vector Value Vector typedef Vector iterator Value iterator typedef std vector Vector Vector cont typedef CGAL Cartesian matrix std plus int Value iterator Value iterator Matrix int main set of vectors the matrices are build from Vector cont vectors generate a random vector and sort it Vector a const int n 5 for int i i n i a push back CGAL default random 1 std sort a begin a end std cout a std copy a begin a end std ostream iterator int std cout std cout n build a Cartesian matrix from a Matrix M a begin a end a begin a end search for an upper bound for max a Value bound a n 1 Value upper bound CGAL sorted matrix search M M 1 CGAL sorted matrix search traits adaptor CGAL bind 2 std greater equal Value bound M std cout Upper bound for bound is upper bound std endl return advanced Next Sorted matrix search traits adaptor F M Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Optimisation_ref/Function_sorted_matrix_search.html", "title": "sorted_matrix_search", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Optimisation_ref/spec_sorted_matrix_search.tex' -->\n<html> <head>  \n<title>sorted_matrix_search</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1212\"></A>\n\n<A NAME=\"Cross_link_anchor_1213\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1288\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::sorted_matrix_search\"></A>\n<h2><I>CGAL::sorted_matrix_search</I></h2>\n\n\n  \n<A NAME=\"Index_anchor_1289\"></A> \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1290\"></A> \n\n   \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1291\"></A> \n\n   \n\n  \n   \n     \n     \n<A NAME=\"Index_anchor_1292\"></A> \n\n   \n\n  \n<A NAME=\"Index_anchor_1293\"></A>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n    <H3>Definition</H3>The function <I><A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1213\">sorted_matrix_search</A></I> selects the smallest entry\n    in a set of sorted matrices that fulfills a certain feasibility\n    criterion.\n<P>\n\nMore exactly, a matrix <IMG WIDTH=124 HEIGHT=30 ALIGN=MIDDLE\n      ALT=\"tex2html_wrap_inline18\" SRC=\"./MatrixSearch_sorted1.gif\" >\n      (over a totally ordered set <I>S</I>) is sorted, iff\n<P>\n\n<IMG\n      WIDTH=500 HEIGHT=41 ALIGN=BOTTOM ALT=\"eqnarray5\"\n      SRC=\"./MatrixSearch_sorted2.gif\" >\n<P>\n\nNow let <IMG WIDTH=18\n      HEIGHT=13 ALIGN=BOTTOM ALT=\"tex2html_wrap_inline22\"\n      SRC=\"./MatrixSearch_sorted3.gif\" > be a set of <I>n</I> sorted\n      matrices over <I>S</I> and <I>f</I> be a monotone predicate on\n      <I>S</I>, i.e.\n<P>\n\n<IMG WIDTH=445 HEIGHT=16 ALIGN=BOTTOM\n      ALT=\"displaymath32\" SRC=\"./MatrixSearch_sorted4.gif\" >\n<P>\n\n<BR>\n\n\n<P>\n\nIf we assume there is any feasible element in one of the matrices\n    in <IMG WIDTH=18 HEIGHT=13 ALIGN=BOTTOM\n      ALT=\"tex2html_wrap_inline21\" SRC=\"./MatrixSearch_sorted3.gif\"\n      >, there certainly is a smallest such element. This is the one\n    we are searching for.\n<P>\n\nThe feasibility test as well as some other parameters can (and\n    have to) be customized through a traits class.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/sorted_matrix_search.h\">CGAL/sorted_matrix_search.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class RandomAccessIterator, class Traits &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Traits::Value_sorted_matrix_search6_RandomAccessIterator_f+_RandomAccessIterator_l+_const_Traits__t9;\"></A>\nTraits::Value\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP COLSPAN=2><I>\n    <A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1213\">sorted_matrix_search</A> ( </I></TD></TR><TR><TD WIDTH=50 NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    RandomAccessIterator f,<BR>\n\nRandomAccessIterator l,<BR>\n\nTraits t)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\nreturns the element <I>x</I> in one of the sorted matrices from the\n    range <MATH><I>[ f, l )</I></MATH>, for which <I>t.is_feasible( x)</I>\n    is true and <I>t.<A HREF=\"../NumberTypeSupport_ref/Function_compare.html#Cross_link_anchor_1339\">compare</A>( x, y)</I> is true for all other\n    <I>y</I> values from any matrix for which <I>t.is_feasible(       y)</I> is true.\n<P>\n\n<BR>\n\n<EM>Precondition: </EM><OL>\n    <LI>All matrices in <MATH><I>[f, l)</I></MATH> are sorted according\n      to <I>Traits::compare_non_strictly</I>.\n    <LI>There is at least one entry <MATH><I>x</I></MATH> in a matrix <MATH><I>M  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> [f, l)</I></MATH> for which <I>Traits::is_feasible(x)</I> is\n      true.\n    </OL>\n<P>\n\n<BR>\n\n<EM>Requirement: </EM><OL>\n    <LI><I>Traits</I> is a model for\n      <I><A HREF=\"Concept_SortedMatrixSearchTraits.html#Cross_link_anchor_1216\">SortedMatrixSearchTraits</A></I>.\n    <LI>Value type of <I>RandomAccessIterator</I> is\n      <I>Traits::<A HREF=\"../Kernel_d_ref/Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A></I>.\n    </OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_SortedMatrixSearchTraits.html#Cross_link_anchor_1216\">SortedMatrixSearchTraits</A></I>\n<P>\n\n<H3>Implementation</H3>The implementation uses an algorithm by\n    Frederickson and Johnson[<A HREF=\"../biblio.html#Biblio_fj-fkppc-83\">FJ83</A>, <A HREF=\"../biblio.html#Biblio_fj-gsrsm-84\">FJ84</A>] and runs in\n    <MATH><I><IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_O.gif\">(n  &middot; k + f  &middot; </I></MATH>log<MATH><I>(n  &middot; k))</I></MATH>, where <MATH><I>n</I></MATH> is\n    the number of input matrices, <MATH><I>k</I></MATH> denotes the maximal dimension of\n    any input matrix and <MATH><I>f</I></MATH> the time needed for one feasibility test.\n<P>\n\n<H3>Example</H3>In the following program we build a random vector <MATH><I>a =\n    (a<SUB>i</SUB>)<SUB>i = 1,...,5</SUB></I></MATH> (elements drawn uniformly from <MATH><I>{\n    0,...,99 }</I></MATH>) and construct a <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> matrix <MATH><I>M</I></MATH>\n    containing as elements all sums <MATH><I>a<SUB>i</SUB> + a<SUB>j</SUB>, i,j  <IMG BORDER=0 WIDTH=9 HEIGHT=21 ALIGN=MIDDLE SRC=\"cc_in.gif\"> {1,...,5}</I></MATH>. If <MATH><I>a</I></MATH> is sorted, <MATH><I>M</I></MATH> is sorted as well. So\n    we can apply <I><A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1213\">sorted_matrix_search</A></I> to compute the upper bound\n    for the maximal entry of <MATH><I>a</I></MATH> in <MATH><I>M</I></MATH>.\n<P>\n\n<pre class=\"ExampleCode\">#include &lt;CGAL/Random.h&gt;\n#include &lt;CGAL/Cartesian_matrix.h&gt;\n#include &lt;CGAL/<A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1213\">sorted_matrix_search</A>.h&gt;\n#include &lt;CGAL/functional.h&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;iterator&gt;\n\ntypedef int                                     Value;\ntypedef std::vector&lt;Value&gt;                      <A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A>;\ntypedef <A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A>::iterator                        Value_iterator;\ntypedef std::vector&lt;<A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A>&gt;                     Vector_cont;\ntypedef CGAL::Cartesian_matrix&lt;std::plus&lt;int&gt;,\n                               Value_iterator,\n                               Value_iterator&gt;  <A HREF=\"../Kernel_d_ref/Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A>;\n\nint main()\n{\n  // set of vectors the matrices are build from:\n  Vector_cont vectors;\n\n  // generate a random vector and sort it:\n  <A HREF=\"../Kernel_d_ref/Concept_Vector.html#Cross_link_anchor_480\">Vector</A> a;\n  const int n = 5;\n  for (int i = 0; i &lt; n; ++i)\n    a.push_back(CGAL::default_random(100));\n  std::sort(a.begin(), a.end());\n  std::cout &lt;&lt; &quot;a = ( &quot;;\n  std::copy(a.begin(), a.end(), std::ostream_iterator&lt;int&gt;(std::cout,&quot; &quot;));\n  std::cout &lt;&lt; &quot;)\\n&quot;;\n\n  // build a <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> matrix from a:\n  <A HREF=\"../Kernel_d_ref/Concept_Matrix.html#Cross_link_anchor_481\">Matrix</A> M(a.begin(), a.end(), a.begin(), a.end());\n\n  // search for an upper bound for <A HREF=\"../NumberTypeSupport_ref/Function_max.html#Cross_link_anchor_1392\">max</A>(a):\n  Value bound = a[n-1];\n  Value upper_bound =\n  <A HREF=\"Function_sorted_matrix_search.html#Cross_link_anchor_1212\">CGAL::sorted_matrix_search</A>(\n    &amp;M, &amp;M + 1,\n    CGAL::sorted_matrix_search_traits_adaptor(\n      <A HREF=\"../STL_Extension_ref/Function_bind_2.html#Cross_link_anchor_1483\">CGAL::bind_2</A>(std::greater_equal&lt;Value&gt;(), bound), M));\n  std::cout &lt;&lt; &quot;Upper bound for &quot; &lt;&lt; bound &lt;&lt; &quot; is &quot;\n            &lt;&lt; upper_bound &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;\n\n  return 0;\n} \n</pre>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Sorted_matrix_search_traits_adaptor.html\"><I>Sorted_matrix_search_traits_adaptor&lt;F,M&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_52!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39207.0}