{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL HalfedgeDS items decorator HDS Definition The classes CGAL HalfedgeDS items decorator HDS CGAL HalfedgeDS decorator HDS and CGAL HalfedgeDS const decorator HDS provide additional functions to examine and to modify a halfedge data structure HDS The class CGAL HalfedgeDS items decorator HDS provides additional functions for vertices halfedges and faces of a halfedge data structure without knowing the containing halfedge data structure The class CGAL HalfedgeDS decorator HDS stores a reference to the halfedge data structure and provides functions that modify the halfedge data structure for example Euler operators The class CGAL HalfedgeDS const decorator HDS stores a const reference to the halfedge data structure It contains non modifying functions for example the test for validness of the data structure All these additional functions take care of the different capabilities a halfedge data structure may have or may not have The functions evaluate the type tags of the halfedge data structure to decide on the actions If a particular feature is not supported nothing is done Note that for example the creation of new halfedges is mandatory for all halfedge data structures and will not appear here again include CGAL HalfedgeDS items decorator h Types HalfedgeDS items decorator HDS HalfedgeDS halfedge data structure HalfedgeDS items decorator HDS Traits traits class HalfedgeDS items decorator HDS Vertex vertex type of HalfedgeDS HalfedgeDS items decorator HDS Halfedge halfedge type of HalfedgeDS HalfedgeDS items decorator HDS Face face type of HalfedgeDS HalfedgeDS items decorator HDS Vertex handle HalfedgeDS items decorator HDS Halfedge handle HalfedgeDS items decorator HDS Face handle HalfedgeDS items decorator HDS Vertex iterator HalfedgeDS items decorator HDS Halfedge iterator HalfedgeDS items decorator HDS Face iterator The respective const handle s and const iterator s are available as well HalfedgeDS items decorator HDS size type HalfedgeDS items decorator HDS difference type HalfedgeDS items decorator HDS iterator category HalfedgeDS items decorator HDS Supports vertex halfedge HalfedgeDS items decorator HDS Supports halfedge prev HalfedgeDS items decorator HDS Supports halfedge vertex HalfedgeDS items decorator HDS Supports halfedge face HalfedgeDS items decorator HDS Supports face halfedge HalfedgeDS items decorator HDS Supports removal Creation HalfedgeDS items decorator HDS D default constructor Access Functions Halfedge handle D get vertex halfedge Vertex handle v returns the incident halfedge of v if supported Halfedge handle otherwise Vertex handle D get vertex Halfedge handle h returns the incident vertex of h if supported Vertex handle otherwise Halfedge handle D get prev Halfedge handle h returns the previous halfedge of h if supported Halfedge handle otherwise Halfedge handle D find prev Halfedge handle h returns the previous halfedge of h Uses the prev method if supported or performs a search around the face using next Halfedge handle D find prev around vertex Halfedge handle h returns the previous halfedge of h Uses the prev method if supported or performs a search around the vertex using next Face handle D get face Halfedge handle h returns the incident face of h if supported Face handle otherwise Halfedge handle D get face halfedge Face handle f returns the incident halfedge of f if supported Halfedge handle otherwise Corresponding member functions for const handle s are provided as well Modifying Functions Composed void D close tip Halfedge handle h makes h opposite the successor of h void D close tip Halfedge handle h Vertex handle v makes h opposite the successor of h and sets the incident vertex of h to v void D insert tip Halfedge handle h Halfedge handle v inserts the tip of the edge h into the halfedges around the vertex pointed to by v Halfedge h opposite is the new successor of v and h next will be set to v next The vertex of h will be set to the vertex v refers to if vertices are supported void D remove tip Halfedge handle h removes the edge h next opposite from the halfedge circle around the vertex referred to by h The new successor halfedge of h will be h next opposite next void D insert halfedge Halfedge handle h Halfedge handle f inserts the halfedge h between f and f next The face of h will be the one f refers to if faces are supported void D remove halfedge Halfedge handle h removes edge h next from the halfedge circle around the face referred to by h The new successor of h will be h next next void D set vertex in vertex loop Halfedge handle h Vertex handle v loops around the vertex incident to h and sets all vertex pointers to v Precondition h Halfedge handle void D set face in face loop Halfedge handle h Face handle f loops around the face incident to h and sets all face pointers to f Precondition h Halfedge handle Halfedge handle D flip edge Halfedge handle h performs an edge flip It returns h after rotating the edge h one vertex in the direction of the face orientation Precondition h Halfedge handle and both incident faces of h are triangles Modifying Functions Primitives void D set vertex halfedge Vertex handle v Halfedge handle g sets the incident halfedge of v to g void D set vertex halfedge Halfedge handle h sets the incident halfedge of the vertex incident to h to h void D set vertex Halfedge handle h Vertex handle v sets the incident vertex of h to v void D set prev Halfedge handle h Halfedge handle g sets the previous link of h to g void D set face Halfedge handle h Face handle f sets the incident face of h to f void D set face halfedge Face handle f Halfedge handle g sets the incident halfedge of f to g void D set face halfedge Halfedge handle h sets the incident halfedge of the face incident to h to h See Also CGAL HalfedgeDS decorator HDS CGAL HalfedgeDS const decorator HDS Example The following program fragment illustrates how a refined halfedge class for a polyhedron can make use of the find prev member function to implement a prev member function that works regardless of whether the halfedge data structure HDS provides a prev member function for its halfedges or not In the case that not the implementation given here runs in time proportional to the size of the incident face For const correctness a second implementation with signature Halfedge const handle prev const is needed Note also the use of the static member function halfedge handle of the halfedge data structure It converts a pointer to the halfedge into a halfedge handle This conversion encapsulates possible adjustments for hidden data members in the true halfedge type such as linked list pointers struct Polyhedron halfedge Halfedge handle prev CGAL HalfedgeDS items decorator HDS decorator return decorator find prev HDS halfedge handle this Next HalfedgeDS min items Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/HalfedgeDS_ref/Class_HalfedgeDS_items_decorator.html", "title": "halfedgeds_items_decorator&lt;hds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './HalfedgeDS_ref/HalfedgeDS_items_decorator.tex' -->\n<html> <head>  \n<title>HalfedgeDS_items_decorator&lt;HDS&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_895\"></A>\n\n<A NAME=\"Cross_link_anchor_896\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_865\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::HalfedgeDS_items_decorator<HDS>\"></A>\n<h2><I>CGAL::HalfedgeDS_items_decorator&lt;HDS&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe classes <I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I>,\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I>, and\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> provide additional functions\nto examine and to modify a halfedge data structure <I>HDS</I>. The class\n<I><A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt;</I> provides additional functions\nfor vertices, halfedges, and faces of a halfedge data structure\nwithout knowing the containing halfedge data structure. The class\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I> stores a reference to the halfedge\ndata structure and provides functions that modify the halfedge data\nstructure, for example Euler-operators. The class\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I> stores a const reference to\nthe halfedge data structure. It contains non-modifying functions, for\nexample the test for validness of the data structure.\n<P>\n\nAll these additional functions take care of the different capabilities\na halfedge data structure may have or may not have.  The functions\nevaluate the type tags of the halfedge data structure to decide on the\nactions. If a particular feature is not supported nothing is done.\nNote that for example the creation of new halfedges is mandatory for\nall halfedge data structures and will not appear here again.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/HalfedgeDS_items_decorator.h\">CGAL/HalfedgeDS_items_decorator.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::<A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    halfedge data structure.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Traits\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    traits class.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Vertex\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    vertex type of <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Halfedge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    halfedge type of <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Face\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    face type of <I><A HREF=\"Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Vertex_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Halfedge_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Face_handle\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Vertex_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Halfedge_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Face_iterator\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\nThe respective <I>const_handle</I>'s and <I>const_iterator</I>'s are\navailable as well.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::size_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::difference_type\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::iterator_category\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_vertex_halfedge\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_halfedge_prev\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_halfedge_vertex\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_halfedge_face\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_face_halfedge\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt;::Supports_removal\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_896\">HalfedgeDS_items_decorator</A>&lt;HDS&gt; D;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    default constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_get_vertex_halfedge6_Vertex_handle_v9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.get_vertex_halfedge ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the incident halfedge of <MATH><I>v</I></MATH> if supported, \n    <I>Halfedge_handle()</I> otherwise.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_get_vertex6Halfedge_handle_h9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.get_vertex ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the incident vertex of <MATH><I>h</I></MATH> if supported, <I>Vertex_handle()</I> \n     otherwise.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_get_prev6Halfedge_handle_h9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.get_prev ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the previous halfedge of <MATH><I>h</I></MATH> if supported, \n     <I>Halfedge_handle()</I> otherwise.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_find_prev6Halfedge_handle_h9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.find_prev ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the previous halfedge of <MATH><I>h</I></MATH>. Uses the <I>prev()</I> method \n     if supported or performs a search around the face using <I>next()</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_find_prev_around_vertex6Halfedge_handle_h9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.find_prev_around_vertex ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the previous halfedge of <MATH><I>h</I></MATH>. Uses the <I>prev()</I> method \n     if supported or performs a search around the vertex using <I>next()</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_get_face6Halfedge_handle_h9;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.get_face ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the incident face of <MATH><I>h</I></MATH> if supported, \n    <I>Face_handle()</I> otherwise.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_get_face_halfedge6_Face_handle_f9;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.get_face_halfedge ( Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the incident halfedge of <MATH><I>f</I></MATH> if supported, \n    <I>Halfedge_handle()</I> otherwise.\n        </TD></TR>\n        </TABLE>\n<P>\n\nCorresponding member functions for <I>const_handle</I>'s are provided as well.\n<P>\n\n<H3>Modifying Functions (Composed)</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_close_tip6_Halfedge_handle_h9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.close_tip ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    makes <I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> the <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A> of <MATH><I>h</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_close_tip6_Halfedge_handle_h+_Vertex_handle_v9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.close_tip ( Halfedge_handle h,  Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    makes <I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> the <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A> of <MATH><I>h</I></MATH> and sets the\n    incident vertex of <MATH><I>h</I></MATH> to <MATH><I>v</I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_tip6_Halfedge_handle_h+_Halfedge_handle_v9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.insert_tip ( Halfedge_handle h,  Halfedge_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the tip of the edge <MATH><I>h</I></MATH> into the halfedges around the vertex \n    pointed to by <MATH><I>v</I></MATH>. Halfedge <I>h-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> is the new <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A> of \n    <MATH><I>v</I></MATH> and <I>h-&gt;next()</I> will be set to <I>v-&gt;next()</I>. The vertex of <MATH><I>h</I></MATH>\n    will be set to the vertex <MATH><I>v</I></MATH> refers to if vertices are supported.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_tip6_Halfedge_handle_h9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.remove_tip ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes the edge <I>h-&gt;next()-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()</I> from the halfedge\n   circle around the vertex referred to by <MATH><I>h</I></MATH>. The new <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A>\n   halfedge of <MATH><I>h</I></MATH> will be  <I>h-&gt;next()-&gt;<A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A>()-&gt;next()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_insert_halfedge6_Halfedge_handle_h+_Halfedge_handle_f9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    D.insert_halfedge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle h,<BR>\n\nHalfedge_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    inserts the halfedge <MATH><I>h</I></MATH> between <MATH><I>f</I></MATH> and <I>f-&gt;next()</I>.\n    The face of <MATH><I>h</I></MATH> will be the one <MATH><I>f</I></MATH> refers to if faces\n    are supported.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_remove_halfedge6_Halfedge_handle_h9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.remove_halfedge ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    removes edge <I>h-&gt;next()</I> from the halfedge circle around \n    the face referred to by <MATH><I>h</I></MATH>. The new <A HREF=\"../STL_Extension_ref/Function_successor.html#Cross_link_anchor_1444\">successor</A> of <MATH><I>h</I></MATH> will be \n    <I>h-&gt;next()-&gt;next()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertex_in_vertex_loop6_Halfedge_handle_h+_Vertex_handle_v9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    D.set_vertex_in_vertex_loop ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle h,<BR>\n\nVertex_handle v)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    loops around the vertex incident to <MATH><I>h</I></MATH> and sets all vertex\n    pointers to <MATH><I>v</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>h != Halfedge_handle()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_face_in_face_loop6_Halfedge_handle_h+_Face_handle_f9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    D.set_face_in_face_loop ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Halfedge_handle h,<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    loops around the face incident to <MATH><I>h</I></MATH> and sets all face \n    pointers to <MATH><I>f</I></MATH>.<BR>\n\n<EM>Precondition: </EM><I>h != Halfedge_handle()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Halfedge_handle_flip_edge6_Halfedge_handle_h9_const;\"></A>\nHalfedge_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.flip_edge ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    performs an edge flip. It returns <MATH><I>h</I></MATH> after rotating the edge <MATH><I>h</I></MATH> one\n    vertex in the direction of the face <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.<BR>\n\n<EM>Precondition: </EM><I>h != Halfedge_handle()</I> and both incident faces \n    of <MATH><I>h</I></MATH> are triangles.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Modifying Functions (Primitives)</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertex_halfedge6_Vertex_handle_v+_Halfedge_handle_g9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    D.set_vertex_halfedge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Vertex_handle v,<BR>\n\nHalfedge_handle g)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident halfedge of <MATH><I>v</I></MATH> to <MATH><I>g</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertex_halfedge6_Halfedge_handle_h9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_vertex_halfedge ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident halfedge of the vertex incident to <MATH><I>h</I></MATH> to <MATH><I>h</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_vertex6_Halfedge_handle_h+_Vertex_handle_v9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_vertex ( Halfedge_handle h,  Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident vertex of <MATH><I>h</I></MATH> to <MATH><I>v</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_prev6_Halfedge_handle_h+_Halfedge_handle_g9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_prev ( Halfedge_handle h,  Halfedge_handle g)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the previous link of <MATH><I>h</I></MATH> to <MATH><I>g</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_face6_Halfedge_handle_h+_Face_handle_f9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_face ( Halfedge_handle h,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident face of <MATH><I>h</I></MATH> to <MATH><I>f</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_face_halfedge6_Face_handle_f+_Halfedge_handle_g9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_face_halfedge ( Face_handle f,  Halfedge_handle g)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident halfedge of <MATH><I>f</I></MATH> to <MATH><I>g</I></MATH>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_set_face_halfedge6_Halfedge_handle_h9_const;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    D.set_face_halfedge ( Halfedge_handle h)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    sets the incident halfedge of the face incident to <MATH><I>h</I></MATH> to <MATH><I>h</I></MATH>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_HalfedgeDS_decorator.html#Cross_link_anchor_880\">CGAL::HalfedgeDS_decorator</A>&lt;HDS&gt;</I><BR>\n\n<I><A HREF=\"Class_HalfedgeDS_const_decorator.html#Cross_link_anchor_878\">CGAL::HalfedgeDS_const_decorator</A>&lt;HDS&gt;</I>\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program fragment illustrates how a refined halfedge\nclass for a polyhedron can make use of the <I>find_prev()</I> member\nfunction to implement a <I>prev()</I> member function that works\nregardless of whether the halfedge data structure <I>HDS</I> provides a\n<I>prev()</I> member function for its halfedges or not. In the case that not,\nthe implementation given here runs in time proportional to the size of the \nincident face. For const-correctness a second implementation with signature\n<I>Halfedge_const_handle  prev() const;</I> is needed.\n<P>\n\nNote also the use of the static member function <I>halfedge_handle()</I>\nof the halfedge data structure. It converts a pointer to the halfedge\ninto a halfedge handle. This conversion encapsulates possible\nadjustments for hidden data members in the true halfedge type, such as\nlinked-list pointers.\n<P>\n\n<pre class=\"ExampleCode\">\nstruct Polyhedron_halfedge {\n    // ...\n    Halfedge_handle  prev() {\n        <A HREF=\"Class_HalfedgeDS_items_decorator.html#Cross_link_anchor_895\">CGAL::HalfedgeDS_items_decorator</A>&lt;HDS&gt; decorator;\n        return decorator.find_prev( HDS::halfedge_handle(this));\n    }\n};\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_HalfedgeDS_min_items.html\"><I>HalfedgeDS_min_items</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_30!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39124.0}