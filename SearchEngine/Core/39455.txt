{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Plane 3 Kernel DefinitionAn object h of the data type Plane 3 Kernel is an oriented plane in the three dimensional Euclidean space 3 It is defined by the set of points with Cartesian coordinates x y z that satisfy the plane equation h a x b y c z d The plane splits 3 in a positive and a negative side A point p with Cartesian coordinates px py pz is on the positive side of h iff a px b py c pz d It is on the negative side iff a px b py c pz d Creation Plane 3 Kernel h Kernel RT a Kernel RT b Kernel RT c Kernel RT d creates a plane h defined by the equation a px b py c pz d Notice that h is degenerate if a b c Plane 3 Kernel h Point 3 Kernel p Point 3 Kernel q Point 3 Kernel r creates a plane h passing through the points p q and r The plane is oriented such that p q and r are oriented in a positive sense that is counterclockwise when seen from the positive side of h Notice that h is degenerate if the points are collinear Plane 3 Kernel h Point 3 Kernel p Vector 3 Kernel v introduces a plane h that passes through point p and that is orthogonal to v Plane 3 Kernel h Point 3 Kernel p Direction 3 Kernel d introduces a plane h that passes through point p and that has as an orthogonal direction equal to d Plane 3 Kernel h Line 3 Kernel l Point 3 Kernel p introduces a plane h that is defined through the three points l point l point 1 and p Plane 3 Kernel h Ray 3 Kernel r Point 3 Kernel p introduces a plane h that is defined through the three points r point r point 1 and p Plane 3 Kernel h Segment 3 Kernel s Point 3 Kernel p introduces a plane h that is defined through the three points s source s target and p Operations bool h operator h2 Test for equality two planes are equal iff they have a non empty intersection and the same orientation bool h operator h2 Test for inequality Kernel RT h a returns the first coefficient of h Kernel RT h b returns the second coefficient of h Kernel RT h c returns the third coefficient of h Kernel RT h d returns the fourth coefficient of h Line 3 Kernel h perpendicular line Point 3 Kernel p returns the line that is perpendicular to h and that passes through point p The line is oriented from the negative to the positive side of h Point 3 Kernel h projection Point 3 Kernel p returns the orthogonal projection of p on h Plane 3 Kernel h opposite returns the plane with opposite orientation Point 3 Kernel h point returns an arbitrary point on h Vector 3 Kernel h orthogonal vector returns a vector that is orthogonal to h and that is directed to the positive side of h Direction 3 Kernel h orthogonal direction returns the direction that is orthogonal to h and that is directed to the positive side of h Vector 3 Kernel h base1 returns a vector orthogonal to orthogonal vector Vector 3 Kernel h base2 returns a vector that is both orthogonal to base1 and to orthogonal vector and such that the result of orientation point point base1 point base2 point orthogonal vector is positive 2D Conversion The following functions provide conversion between a plane and CGAL s two dimensional space The transformation is affine but not necessarily an isometry This means the transformation preserves combinatorics but not distances Point 2 Kernel h to 2d Point 3 Kernel p returns the image point of the projection of p under an affine transformation which maps h onto the xy plane with the z coordinate removed Point 3 Kernel h to 3d Point 2 Kernel p returns a point q such that to 2d to 3d p is equal to p Predicates Oriented side h oriented side Point 3 Kernel p returns either ON ORIENTED BOUNDARY or the constant ON POSITIVE SIDE or the constant ON NEGATIVE SIDE determined by the position of p relative to the oriented plane h For convenience we provide the following boolean functions bool h has on Point 3 Kernel p bool h has on positive side Point 3 Kernel p bool h has on negative side Point 3 Kernel p bool h has on Line 3 Kernel l bool h is degenerate Plane h is degenerate if the coefficients a b and c of the plane equation are zero Miscellaneous Plane 3 Kernel h transform Aff transformation 3 Kernel t returns the plane obtained by applying t on a point of h and the orthogonal direction of h See AlsoKernel Plane 3 Next Point 3 Kernel Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_23_ref/Class_Plane_3.html", "title": "plane_3&lt;kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_23_ref/Plane_3.tex' -->\n<html> <head>  \n<title>Plane_3&lt;Kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_71\"></A>\n\n<A NAME=\"Cross_link_anchor_72\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_57\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Plane_3<Kernel>\"></A>\n<h2><I>CGAL::Plane_3&lt;Kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>An object <I>h</I> of the data type <I><A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;</I> is an oriented\nplane in the three-dimensional Euclidean space <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>3</SUP></I></MATH>. It is defined\nby the set of points with <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> coordinates <MATH><I>(x,y,z)</I></MATH> that satisfy\nthe plane equation\n<P>\n\nh : a x + b y + c z + d = 0\n<P>\n\nThe plane splits <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>3</SUP></I></MATH> in a <I>positive</I> and a <I>negative side</I>.\nA point <MATH><I>p</I></MATH> with <A HREF=\"Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> coordinates <MATH><I>(px, py, pz)</I></MATH> is on the\npositive side of <I>h</I>, iff a px + b py +c pz + d > 0. It is on the negative side, iff\na px + b py +c pz + d <\n  0.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT a,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT b,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT c,<BR>\n\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT d);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a plane <I>h</I> defined by the equation\n a px + b py + c pz + d = 0.\nNotice that <I>h</I> is degenerate if a = b = c.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,<BR>\n\n<A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; q,<BR>\n\n<A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; r);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    creates a plane <I>h</I> passing through the points <I>p</I>,\n <I>q</I> and <I>r</I>. The plane is oriented such that <I>p</I>, \n <I>q</I> and <I>r</I> are oriented in a positive sense \n (that is counterclockwise) when seen from the positive side of <I>h</I>.\nNotice that <I>h</I> is degenerate if the points are <A HREF=\"Function_collinear.html#Cross_link_anchor_167\">collinear</A>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; v);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a plane <I>h</I> that passes through point <I>p</I> and\n that is orthogonal to <I>v</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p,  <A HREF=\"Class_Direction_3.html#Cross_link_anchor_66\">Direction_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; d);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a plane <I>h</I> that passes through point <I>p</I> and\n that has as an orthogonal direction equal to <I>d</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h (  <A HREF=\"Class_Line_3.html#Cross_link_anchor_70\">Line_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; l,  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a plane <I>h</I> that is defined through the  three points \n <I>l.point(0)</I>, <I>l.point(1)</I> and <I>p</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h (  <A HREF=\"Class_Ray_3.html#Cross_link_anchor_76\">Ray_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; r,  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a plane <I>h</I> that is defined through the  three points \n <I>r.point(0)</I>, <I>r.point(1)</I> and <I>p</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; h (  <A HREF=\"Class_Segment_3.html#Cross_link_anchor_78\">Segment_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; s,  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    introduces a plane <I>h</I> that is defined through the  three points \n <I>s.source()</I>, <I>s.target()</I> and <I>p</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator==6const_Plane_36Kernel9__h29_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.operator== (  h2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for equality: two planes are equal, iff they have a non \n        empty <A HREF=\"Function_intersection.html#Cross_link_anchor_221\">intersection</A> and the same <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    bool<A NAME=\"Function_bool_operator!=6const_Plane_36Kernel9__h29_const;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.operator!= (  h2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Test for inequality.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_a69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.a ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the first coefficient of <I>h</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_b69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.b ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the second coefficient of <I>h</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_c69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.c ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the third coefficient of <I>h</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Kernel::RT_d69_const;\"></A>\n<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::RT\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.d ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the fourth coefficient of <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Line_36Kernel9_perpendicular_line6const_Point_36Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Line_3.html#Cross_link_anchor_70\">Line_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.perpendicular_line (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the line that is perpendicular to <I>h</I> and that\n        passes through point <I>p</I>. The line is oriented from\n        the negative to the positive side of <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_36Kernel9_projection6const_Point_36Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.projection (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the orthogonal projection of <MATH><I>p</I></MATH> on <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Plane_36Kernel9_opposite69_const;\"></A>\n<A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.<A HREF=\"Function_opposite.html#Cross_link_anchor_243\">opposite</A> ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the plane with <A HREF=\"Function_opposite.html#Cross_link_anchor_243\">opposite</A> <A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_36Kernel9_point69_const;\"></A>\n<A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.point ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns an arbitrary point on <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_36Kernel9_orthogonal_vector69_const;\"></A>\n<A HREF=\"Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.<A HREF=\"Function_orthogonal_vector.html#Cross_link_anchor_245\">orthogonal_vector</A> ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a vector that is orthogonal to <I>h</I> and that\n        is directed to the positive side of <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_36Kernel9_orthogonal_direction69_const;\"></A>\n<A HREF=\"Class_Direction_3.html#Cross_link_anchor_66\">Direction_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.orthogonal_direction ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the direction that is orthogonal to <I>h</I> and that\n        is directed to the positive side of <I>h</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_36Kernel9_base169_const;\"></A>\n<A HREF=\"Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.base1 ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a vector orthogonal to \n        <I><A HREF=\"Function_orthogonal_vector.html#Cross_link_anchor_245\">orthogonal_vector</A>()</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vector_36Kernel9_base269_const;\"></A>\n<A HREF=\"Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.base2 ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a vector that is both orthogonal to <I>base1()</I>,\n        and to <I><A HREF=\"Function_orthogonal_vector.html#Cross_link_anchor_245\">orthogonal_vector</A>()</I>, and such that the result of \n        <I><A HREF=\"Function_orientation.html#Cross_link_anchor_247\">orientation</A>( point(), point() + base1(),          point()+base2(), point() + <A HREF=\"Function_orthogonal_vector.html#Cross_link_anchor_245\">orthogonal_vector</A>() )</I> is positive.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>2D Conversion</H3>\n<P>\n\nThe following functions provide conversion between a plane and \nC<SMALL>GAL</SMALL>'s two-dimensional space. The transformation is affine, but\nnot necessarily an isometry. This means, the transformation preserves\ncombinatorics, but not distances.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_26Kernel9_to_2d6const_Point_36Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.to_2d (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the image point of the projection of <I>p</I> \n       under an affine transformation, which maps <I>h</I> onto the \n       <MATH><I>xy</I></MATH>-plane, with the <MATH><I>z</I></MATH>-coordinate removed.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_36Kernel9_to_3d6const_Point_26Kernel9__p9_const;\"></A>\n<A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.to_3d (  <A HREF=\"Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a point <MATH><I>q</I></MATH>, such that <I>to_2d( to_3d( p ))</I>\n        is equal to <I>p</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_oriented_side6const_Point_36Kernel9__p9_const;\"></A>\n<A HREF=\"Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.oriented_side (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns either <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I>, or\n        the constant <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I>, or the constant\n        <I><A HREF=\"Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I>, \n        determined by the position of <MATH><I>p</I></MATH> relative to the oriented plane <I>h</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nFor convenience we provide the following boolean functions:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on6const_Point_36Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_positive_side6const_Point_36Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on_positive_side (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on_negative_side6const_Point_36Kernel9__p9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on_negative_side (  <A HREF=\"Class_Point_3.html#Cross_link_anchor_74\">Point_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; p)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_has_on6const_Line_36Kernel9__l9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.has_on (  <A HREF=\"Class_Line_3.html#Cross_link_anchor_70\">Line_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; l)\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    h.is_degenerate ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Plane <I>h</I> is degenerate, if the coefficients <I>a</I>,  \n        <I>b</I>, and <I>c</I> of the plane equation are zero.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Plane_36Kernel9_transform6const_Aff_transformation_36Kernel9__t9_const;\"></A>\n<A HREF=\"Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    h.transform (  <A HREF=\"Class_Aff_transformation_3.html#Cross_link_anchor_64\">Aff_transformation_3</A>&lt;<A HREF=\"Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt; t)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the plane obtained by applying <MATH><I>t</I></MATH> on a point of <I>h</I> \n        and the orthogonal direction of <I>h</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_Kernel--Plane_3.html#Cross_link_anchor_458\">Kernel::Plane_3</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Point_3.html\"><I>Point_3&lt;Kernel&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_7!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39455.0}