{"text": "Next Altering Programs Up More about compilation Previous File Queries and Compiling Procedures as Dynamic or Static If it is intended that a procedure be altered through the use of assert 1 and retract 1 the system should be informed that the procedure will be dynamic since these predicates are designed to work on dynamic procedures If assert 1 is applied on a non existing procedure an error is raised however the default error handler for this error only declares the procedure as dynamic and then makes the assertion A procedure is by default static unless it has been specifically declared as dynamic Clauses of static procedures must always be consecutive they may not be separated in one or more source files or by the user from the top level If the static procedure clauses are not consecutive each of the consecutive parts is taken as a separate procedure which redefines the previous occurrence of that procedure and so only the last one will remain However whenever the compiler encounters nonconsecutive clauses of a static procedure in one file it raises an exception whose default handler prints a warning but it continues to compile the rest of the file If a procedure is to be dynamic the ECLiPSe system should be given a specific dynamic declaration A dynamic declaration takes the form dynamic SpecList The predicate is dynamic 1 may be used to check if a procedure is dynamic is dynamic Name Arity When the goal compile Somefile is executed and Somefile contains clauses for procedures that have already been defined in the Prolog database those procedures are treated in one of two ways If such a procedure is dynamic its clauses compiled from Somefile are added to the database just as would happen if they were asserted and the existing clauses are not affected For example if the following clauses have already been compiled dynamic city 1 city london city paris and the file Somefile contains the following Prolog code city munich city tokyo then compiling Somefile will cause adding the clauses for city 1 to those already compiled as city 1 has been declared dynamic Thus the query city X will give eclipse 5 city X X london More X paris More X munich More X tokyo yes If however the compiled procedure is static the new clauses in Somefile replace the old procedure Thus if the following clauses have been compiled city london city paris and the file Somefile contains the following Prolog code city munich city tokyo when Somefile is compiled then the procedure city 1 is redefined Thus the query city X will give eclipse 5 city X X munich More X tokyo yes When the dynamic 1 declaration is used on a procedure that is already dynamic which may happen for instance by recompiling a file with this declaration inside the system raises the error 64 procedure already dynamic The default handler for this error however will only erase all existing clauses for the specified procedure so that when such a file is recompiled several times during its debugging the system behaves as expected the existing clauses are always replaced The handler for this error can of course be changed if required If it is set to true for instance the dynamic 1 declaration is be just silently accepted without erasing any clauses and without printing an error message Next Altering Programs Up More about compilation Previous File Queries and Micha Meier Mon Mar 4 12 11 45 MET 1996", "_id": "http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node53.html", "title": "", "html": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Compiling Procedures as Dynamic or Static</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Compiling Procedures as Dynamic or Static\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html2894 HREF=\"node54.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html2892 HREF=\"node49.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html2886 HREF=\"node52.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html2896 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html2895 HREF=\"node54.html\"> Altering Programs</A>\r\n<B>Up:</B> <A NAME=tex2html2893 HREF=\"node49.html\"> More about compilation</A>\r\n<B> Previous:</B> <A NAME=tex2html2887 HREF=\"node52.html\"> File Queries and </A>\r\n<BR> <HR> <P>\r\n<H2><A NAME=SECTION00454000000000000000> Compiling Procedures as Dynamic or Static</A></H2>\r\n<P>\r\n<A NAME=compdynamic>&#160;</A>\r\nIf it is intended that\r\na procedure be altered through the use of assert/1 and retract/1,\r\n<A NAME=608>&#160;</A>\r\n<A NAME=609>&#160;</A>\r\nthe system should be informed that the procedure will be dynamic,\r\nsince these predicates are\r\ndesigned to work on dynamic procedures. \r\nIf <b> assert/1</b> is applied on a non-existing procedure, an error\r\nis raised, however the default error handler for this error\r\nonly declares the procedure as dynamic and then makes the assertion.\r\n<P>\r\nA procedure is by default static unless it has been specifically declared as\r\ndynamic.\r\nClauses of static procedures must always be consecutive,\r\nthey may not\r\nbe separated in one or more source files or by the user from the top level.\r\nIf the static procedure clauses are not consecutive, each of the\r\nconsecutive parts is taken as a separate procedure which redefines\r\nthe previous occurrence of that procedure, and so only the last one will\r\nremain.\r\nHowever, whenever the compiler encounters nonconsecutive clauses of a static\r\nprocedure in one file, it raises an exception whose default handler\r\nprints a warning but it continues to compile the rest of the file.\r\n<P>\r\nIf a procedure is to be dynamic the <A NAME=tex2html197 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  system should be\r\ngiven a specific <i> dynamic declaration</i>\r\nA dynamic declaration takes the form\r\n<blockquote> <PRE>:- dynamic SpecList.\r\n</PRE> </blockquote>\r\n<A NAME=614>&#160;</A>\r\nThe predicate is_dynamic/1 may be used to check if a procedure\r\nis dynamic:\r\n<blockquote> <PRE>is_dynamic(Name/Arity).\r\n</PRE> </blockquote>\r\n<A NAME=618>&#160;</A>\r\nWhen the goal \r\n<blockquote> <PRE>compile(Somefile)\r\n</PRE> </blockquote>\r\nis executed\r\nand <tt> Somefile</tt> contains clauses for procedures that have\r\nalready been defined\r\nin the Prolog database, those procedures are treated in one of two ways:\r\nIf such a procedure is dynamic, its clauses compiled from <tt> Somefile</tt>\r\nare added to the database (just as would happen if they were asserted),\r\nand the existing clauses are not affected.\r\nFor example, if the following\r\nclauses have already been compiled:\r\n<blockquote> <PRE>:- dynamic city/1.\r\n\r\ncity(london).\r\ncity(paris).\r\n</PRE>\r\n</blockquote>\r\nand the file <tt> Somefile</tt> contains the\r\nfollowing Prolog code:\r\n<blockquote> <PRE>city(munich).\r\ncity(tokyo).\r\n</PRE>\r\n</blockquote>\r\nthen compiling <tt> Somefile</tt> will cause adding\r\nthe clauses for <b> city/1</b> to those\r\nalready compiled, as <b> city/1</b> has been declared dynamic.\r\nThus the query  <b> city(X</b>) will give:\r\n<blockquote> <PRE>[eclipse 5]: city(X).\r\nX = london    More? (;)\r\n\r\nX = paris    More? (;)\r\n\r\nX = munich    More? (;)\r\n\r\nX = tokyo\r\nyes.\r\n</PRE>\r\n</blockquote>\r\n<P>\r\nIf, however, the compiled procedure is static,\r\nthe new clauses in <tt> Somefile</tt> replace the old procedure.\r\nThus, if\r\nthe following clauses have been compiled:\r\n<blockquote> <PRE>city(london).\r\ncity(paris).\r\n</PRE>\r\n</blockquote>\r\nand the file <tt> Somefile</tt> contains the following Prolog code:\r\n<blockquote> <PRE>city(munich).\r\ncity(tokyo).\r\n</PRE>\r\n</blockquote>\r\nwhen <tt> Somefile</tt> is compiled, then the procedure <b> city/1</b> is redefined.\r\nThus the query <tt> city(X</tt>) will give:\r\n<blockquote> <PRE>[eclipse 5]: city(X).\r\nX = munich    More? (;)\r\n\r\nX = tokyo\r\nyes.\r\n</PRE>\r\n</blockquote>\r\n<P>\r\nWhen the dynamic/1 declaration is used on a procedure that is\r\nalready dynamic, which may happen for instance by recompiling a file\r\nwith this declaration inside, the system raises the error 64,\r\n'procedure already dynamic'.\r\nThe default handler for this error, however, will only erase\r\nall existing clauses for the specified procedure, so that\r\nwhen such a file is recompiled several times during its debugging,\r\nthe system behaves as expected, the existing clauses\r\nare always replaced.\r\nThe handler for this error can of course be changed if required.\r\nIf it is set to <b> true/0</b>, for instance,\r\nthe <b> dynamic/1</b> declaration is be just silently\r\naccepted without erasing any clauses and without printing an error message.\r\n<P>\r\n<BR> <HR><A NAME=tex2html2894 HREF=\"node54.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html2892 HREF=\"node49.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html2886 HREF=\"node52.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html2896 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html2895 HREF=\"node54.html\"> Altering Programs</A>\r\n<B>Up:</B> <A NAME=tex2html2893 HREF=\"node49.html\"> More about compilation</A>\r\n<B> Previous:</B> <A NAME=tex2html2887 HREF=\"node52.html\"> File Queries and </A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "id": 30709.0}