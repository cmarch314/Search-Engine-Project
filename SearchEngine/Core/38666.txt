{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Arr conic traits 2 Int kernel Alg kernel DefinitionThe class Arr conic traits 2 Int kernel Alg kernel is a model of the ArrangementTraits 2 concept and serves as a traits class for finite segments of algebraic curves of degree 2 at most conic curves Both template parameters must be models of the a CGAL Kernel concept The first Int kernel should be templated with an unbounded integer number type which will be used to represent the coefficients of the conic curves The second parameter Alg kernel should be templated with a number type constructible from an unbounded integer and that in addition to the arithmetic operations also support the square root operation in an exact manner as well as the extraction of the kth largest root of a given polynomial with integral coefficients This number type is used to represent the coordinates of the arrangement vertices The recommended choice for the two template parameters is Cartesian CORE BigInt as Int kernel and Cartesian CORE Expr as Alg kernel A general conic curve C is the locus of all points x y satisfying the equation rx2 sy2 txy ux vy w where If 4rs t2 C is an ellipse A special case occurs when r s and t where C becomes a circle If 4rs t2 C is a hyperbola If 4rs t2 C is a parabola A special case occurs when r s t where C becomes a line In our representation all conic coefficients namely r s t u v w must be integers A bounded conic arc is defined as one of the following A full ellipse or a circle C The supporting conic curve C and two endpoints s and t the source and target respectively In this case one should determine if we proceed from s to t in a clockwise or in a counterclockwise direction A very useful subset of the set of conic arcs are line segments and circular arcs since arrangements of circular arcs and line segments have some interesting applications e g offsetting polygons motion planning for a disc robot etc Circular arcs and line segment are simpler objects and can be dealt with more efficiently than arbitrary arcs For these reasons it is possible to construct conic arcs from segments and from circles Using these constructors is highly recommended It is more straightforward and also speeds up the arrangement construction include CGAL Arr conic traits 2 h Is Model for the ConceptArrangementTraits 2 Class Arr conic traits 2 Int kernel Alg kernel Curve 2 The Curve 2 class nested within the conic arcs traits can represent arbitrary conic arcs and support their construction in various ways The copy and default constructor as well as the assignment and equality operators are provided for conic arcs In addition an operator for the curves is defined for standard output streams and Window stream Creation Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel Segment 2 seg constructs an arc from the line segment seg Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel Circle 2 circ constructs a circular arc that corresponds to the full circle circ notice the circle center has integer coordinates and its squared radius is also an integer Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel Circle 2 circ Orientation orient Alg kernel Point 2 ps Alg kernel Point 2 pt constructs a circular arc supported by the circle circ and with ps and pt as its endpoints going in the given orientation Precondition ps and pt both lie on the circle circ Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel Point 2 p1 Int kernel Point 2 p2 Int kernel Point 2 p3 constructs a circular arc going from p1 the source through p2 to p3 the target notice all points have integer coordinates The orientation of the arc is determined automatically Precondition The three points are not collinear Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel FT r Int kernel FT s Int kernel FT t Int kernel FT u Int kernel FT v Int kernel FT w constructs a conic arc that corresponds to the full curve rx2 sy2 txy ux vy w Precondition The given curve is an ellipse that is 4rs t2 Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel FT r Int kernel FT s Int kernel FT t Int kernel FT u Int kernel FT v Int kernel FT w Orientation orient Alg kernel Point 2 ps Alg kernel Point 2 pt constructs a conic arc supported by the curve rx2 sy2 txy ux vy w with ps as its source and pt as its target going in the given orientation Precondition ps and pt both satisfy the equation of the supporting curve and define a bounded segment from it e g in case of a hyperbolic arc both point should be located on the same branch of the hyperbola Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel FT r Int kernel FT s Int kernel FT t Int kernel FT u Int kernel FT v Int kernel FT w Int kernel Line 2 l constructs a conic arc supported by the curve rx2 sy2 txy ux vy w and whose endpoints are the intersection points of the curve and the line l We take the portion of the curve that lies in the positive half plane defined by l Precondition The line l intersects the conic curve at two points Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel Point 2 p1 Int kernel Point 2 p2 Int kernel Point 2 p3 Int kernel Point 2 p4 Int kernel Point 2 p5 constructs a circular arc going from p1 the source through p2 p3 and p4 to p5 the target notice all points have integer coordinates The orientation of the arc is determined automatically Precondition No three points of the five are not collinear Arr conic traits 2 Int kernel Alg kernel Curve 2 cv Int kernel FT r Int kernel FT s Int kernel FT t Int kernel FT u Int kernel FT v Int kernel FT w Orientation orient Alg kernel Point 2 ps Int kernel FT r1 Int kernel FT s1 Int kernel FT t1 Int kernel FT u1 Int kernel FT v1 Int kernel FT w1 Alg kernel Point 2 pt Int kernel FT r2 Int kernel FT s2 Int kernel FT t2 Int kernel FT u2 Int kernel FT v2 Int kernel FT w2 constructs a conic are supported by the curve rx2 sy2 txy ux vy w with ps as its source and pt as its target going in the given orientation In this case ps and pt are just approximations of the endpoints and their exact values are given implicitly as the intersections of the supporting curve with r1x2 s1y2 t1xy u1x v1y w1 and r2x2 s2y2 t2xy u2x v2y w2 respectively Precondition The two curves specifying the endpoints really intersect with the supporting conic curve Operations bool cv is full conic returns whether the arc represents a full conic curve a full ellipse Alg kernel Point 2 cv source returns the source point of the arc Alg kernel Point 2 cv target returns the target point of the arc bool cv is x monotone returns true if the arc is x monotone false otherwise bool cv is segment returns whether the arc is a line segment bool cv is circular returns whether the arc is supported by a circle include CGAL IO Conic arc 2 Window stream h Next Arr file scanner Arrangement Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Arrangement_2_ref/Class_Arr_conic_traits_2.html", "title": "arr_conic_traits_2&lt;int_kernel, alg_kernel&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Arrangement_2_ref/Arr_conic_traits.tex' -->\n<html> <head>  \n<title>Arr_conic_traits_2&lt;Int_kernel, Alg_kernel&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_842\"></A>\n\n<A NAME=\"Cross_link_anchor_843\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_828\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Arr_conic_traits_2<Int_kernel, Alg_kernel>\"></A>\n<h2><I>CGAL::Arr_conic_traits_2&lt;Int_kernel, Alg_kernel&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>The class <I><A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel, Alg_kernel&gt;</I>\n    is a model of the <I><A HREF=\"Concept_ArrangementTraits_2.html#Cross_link_anchor_835\">ArrangementTraits_2</A></I> concept and serves as a \n    traits class for finite segments of algebraic curves of degree 2 at most\n    (conic curves).\n    Both template parameters must be models of the a CGAL <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> \n    concept: The first, <I>Int_kernel</I>, should be templated with an \n    unbounded integer number-type, which will be used to represent the\n    coefficients of the conic curves. The second parameter, <I>Alg_kernel</I>,\n    should be templated with a number type constructible from an unbounded\n    integer, and that in addition to the arithmetic operations, also support\n    the <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A>-root operation in an exact manner, as well as the extraction\n    of the <MATH><I>k</I></MATH>th-largest root of a given polynomial with integral coefficients.\n    This number type is used to represent the coordinates of the arrangement\n    vertices. The recommended choice for the two template parameters is\n    <I><A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;CORE::BigInt&gt;</I> as <I>Int_kernel</I> and\n    <I><A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_CORE--Expr.html#Cross_link_anchor_1342\">CORE::Expr</A>&gt;</I> as <I>Alg_kernel</I>.\n<P>\n\nA general conic curve <MATH><I>C</I></MATH> is the locus of all points <MATH><I>(x,y)</I></MATH> satisfying the\n    equation <MATH><I>rx<SUP>2</SUP> + sy<SUP>2</SUP> + txy + ux + vy + w = 0</I></MATH>, where:\n    <UL>\n    <LI>If <MATH><I>4rs - t<SUP>2</SUP> &gt; 0</I></MATH>, <MATH><I>C</I></MATH> is an ellipse. A special case occurs when\n          <MATH><I>r = s  <IMG BORDER=0 WIDTH=11 HEIGHT=27 ALIGN=MIDDLE SRC=\"cc_neq.gif\"> 0</I></MATH> and <MATH><I>t = 0</I></MATH>, where <MATH><I>C</I></MATH> becomes a circle.\n    <LI>If <MATH><I>4rs - t<SUP>2</SUP> &lt; 0</I></MATH>, <MATH><I>C</I></MATH> is a hyperbola.\n    <LI>If <MATH><I>4rs - t<SUP>2</SUP> = 0</I></MATH>, <MATH><I>C</I></MATH> is a parabola. A special case occurs when\n          <MATH><I>r = s = t = 0</I></MATH>, where <MATH><I>C</I></MATH> becomes a line. \n    </UL>\n    In our representation, all conic coefficients (namely <MATH><I>r,s,t,u,v,w</I></MATH>) must\n    be integers.\n<P>\n\nA bounded conic arc is defined as one of the following:\n    <UL>\n    <LI>A full ellipse (or a circle) <MATH><I>C</I></MATH>.\n    <LI>The supporting conic curve <MATH><I>C</I></MATH> and two endpoints <MATH><I>s</I></MATH> and <MATH><I>t</I></MATH> (the \n    source and target, respectively). In this case one should determine if\n    we proceed from <MATH><I>s</I></MATH> to <MATH><I>t</I></MATH> in a clockwise or in a counterclockwise\n    direction.\n    </UL>\n<P>\n\nA very useful subset of the set of conic arcs are line segments and \n    circular arcs, since arrangements of circular arcs and line segments have \n    some interesting applications (e.g. offsetting polygons, motion planning \n    for a disc robot, etc.). Circular arcs and line segment are simpler \n    objects and can be dealt with more efficiently than arbitrary arcs. \n    For these reasons, it is possible to construct conic arcs from segments \n    and from circles. Using these constructors is highly recommended: It is \n    more straightforward and also speeds up the arrangement construction.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Arr_conic_traits_2.h\">CGAL/Arr_conic_traits_2.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3><I><A HREF=\"Concept_ArrangementTraits_2.html#Cross_link_anchor_835\">ArrangementTraits_2</A></I>\n<P>\n\n<h3>Class <I>Arr_conic_traits_2&lt;Int_kernel,Alg_kernel&gt;::Curve_2</I></h3>\n<P>\n\nThe <I>Curve_2</I> class nested within the conic arcs' traits can represent\narbitrary conic arcs and support their construction in various ways. The copy \nand default constructor as well as the assignment and equality operators are \nprovided for conic arcs. In addition, an <I>operator&lt;&lt;</I> for the curves is \ndefined for standard output streams and <I><A HREF=\"../Colors_and_windows_ref/Class_Window_stream.html#Cross_link_anchor_1758\">Window_stream</A></I>.\n<P>\n\n<A NAME=\"Index_anchor_829\"></A> \n\n<A NAME=\"Index_anchor_830\"></A> \n \n   \n\n    <H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> seg);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs an arc from the line segment <I>seg</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::<A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A> circ);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a circular arc that corresponds to the full circle <I>circ</I>\n   (notice the circle center has integer coordinates and its squared radius\n   is also an integer).\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::<A HREF=\"../Kernel_23_ref/Class_Circle_2.html#Cross_link_anchor_44\">Circle_2</A> circ,<BR>\n\n<A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> orient,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> ps,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a circular arc supported by the circle <I>circ</I> and with \n   <I>ps</I> and <I>pt</I> as its endpoints, going in the given <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.<BR>\n\n<EM>Precondition: </EM><I>ps</I> and <I>pt</I> both lie on the circle <I>circ</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a circular arc going from <I>p1</I>, the source, through <I>p2</I>\n   to <I>p3</I>, the target (notice all points have integer coordinates).\n   The <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of the arc is determined automatically.<BR>\n\n<EM>Precondition: </EM>The three points are not <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::FT r,<BR>\n\nInt_kernel::FT s,<BR>\n\nInt_kernel::FT t,<BR>\n\nInt_kernel::FT u,<BR>\n\nInt_kernel::FT v,<BR>\n\nInt_kernel::FT w);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a conic arc that corresponds to the full curve <MATH><I>rx<SUP>2</SUP> + sy<SUP>2</SUP> + \n   txy + ux + vy + w = 0</I></MATH>.<BR>\n\n<EM>Precondition: </EM>The given curve is an ellipse, that is <MATH><I>4rs - t<SUP>2</SUP> &gt; 0</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::FT r,<BR>\n\nInt_kernel::FT s,<BR>\n\nInt_kernel::FT t,<BR>\n\nInt_kernel::FT u,<BR>\n\nInt_kernel::FT v,<BR>\n\nInt_kernel::FT w,<BR>\n\n<A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> orient,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> ps,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a conic arc supported by the curve <MATH><I>rx<SUP>2</SUP> + sy<SUP>2</SUP> + txy + ux + \n   vy + w = 0</I></MATH> with <I>ps</I> as its source and <I>pt</I> as its target, going\n   in the given <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.<BR>\n\n<EM>Precondition: </EM><I>ps</I> and <I>pt</I> both satisfy the equation of the supporting\n              curve and define a bounded segment from it (e.g. in case of a\n              hyperbolic arc, both point should be located on the same branch\n              of the hyperbola.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::FT r,<BR>\n\nInt_kernel::FT s,<BR>\n\nInt_kernel::FT t,<BR>\n\nInt_kernel::FT u,<BR>\n\nInt_kernel::FT v,<BR>\n\nInt_kernel::FT w,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A> l);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a conic arc supported by the curve <MATH><I>rx<SUP>2</SUP> + sy<SUP>2</SUP> + \n   txy + ux + vy + w = 0</I></MATH>, and whose endpoints are the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A>\n   points of the curve and the line <MATH><I>l</I></MATH>. We take the portion of the curve\n   that lies in the positive half-plane defined by <MATH><I>l</I></MATH>.<BR>\n\n<EM>Precondition: </EM>The line <MATH><I>l</I></MATH> intersects the conic curve at two points.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p4,<BR>\n\nInt_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p5);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a circular arc going from <I>p1</I>, the source, through <I>p2</I>,\n   <I>p3</I> and <I>p4</I> to <I>p5</I>, the target (notice all points have\n   integer coordinates). The <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of the arc is determined\n   automatically.<BR>\n\n<EM>Precondition: </EM>No three points of the five are not <A HREF=\"../Kernel_23_ref/Function_collinear.html#Cross_link_anchor_167\">collinear</A>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Arr_conic_traits_2.html#Cross_link_anchor_843\">Arr_conic_traits_2</A>&lt;Int_kernel,Alg_kernel&gt;::Curve_2 cv ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Int_kernel::FT r,<BR>\n\nInt_kernel::FT s,<BR>\n\nInt_kernel::FT t,<BR>\n\nInt_kernel::FT u,<BR>\n\nInt_kernel::FT v,<BR>\n\nInt_kernel::FT w,<BR>\n\n<A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> orient,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> ps,<BR>\n\nInt_kernel::FT r1,<BR>\n\nInt_kernel::FT s1,<BR>\n\nInt_kernel::FT t1,<BR>\n\nInt_kernel::FT u1,<BR>\n\nInt_kernel::FT v1,<BR>\n\nInt_kernel::FT w1,<BR>\n\nAlg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> pt,<BR>\n\nInt_kernel::FT r2,<BR>\n\nInt_kernel::FT s2,<BR>\n\nInt_kernel::FT t2,<BR>\n\nInt_kernel::FT u2,<BR>\n\nInt_kernel::FT v2,<BR>\n\nInt_kernel::FT w2);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    constructs a conic are supported by the curve <MATH><I>rx<SUP>2</SUP> + sy<SUP>2</SUP> + txy + ux + \n   vy + w = 0</I></MATH> with <I>ps</I> as its source and <I>pt</I> as its target, going\n   in the given <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.\n   In this case <I>ps</I> and  <I>pt</I> are just approximations of the \n   endpoints, and their exact values are given implicitly, as the \n   intersections of the supporting curve with <MATH><I>r<SUB>1</SUB>x<SUP>2</SUP> + s<SUB>1</SUB>y<SUP>2</SUP> + t<SUB>1</SUB>xy +\n    u<SUB>1</SUB>x + v<SUB>1</SUB>y + w<SUB>1</SUB> = 0</I></MATH> and <MATH><I>r<SUB>2</SUB>x<SUP>2</SUP> + s<SUB>2</SUB>y<SUP>2</SUP> + t<SUB>2</SUB>xy +\n    u<SUB>2</SUB>x + v<SUB>2</SUB>y + w<SUB>2</SUB> = 0</I></MATH>, respectively.<BR>\n\n<EM>Precondition: </EM>The two curves specifying the endpoints really intersect with\n              the supporting conic curve.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_full_conic69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cv.is_full_conic ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether the arc represents a full conic curve (a full ellipse).\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_const_Alg_kernel::Point_2__source69_const;\"></A>\n Alg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    cv.source ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source point of the arc.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_const_Alg_kernel::Point_2__target69_const;\"></A>\n Alg_kernel::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    cv.target ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target point of the arc.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_x_monotone69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    cv.is_x_monotone ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> if the arc is\n   <MATH><I>x</I></MATH>-monotone, <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_segment69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    cv.is_segment ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether the arc is a line segment.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_circular69_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    cv.is_circular ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns whether the arc is supported by a circle.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/IO/Conic_arc_2_Window_stream.h\">CGAL/IO/Conic_arc_2_Window_stream.h</A>&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Arr_file_scanner.html\"><I>Arr_file_scanner&lt;Arrangement&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_24!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38666.0}