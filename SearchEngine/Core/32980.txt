{"text": "View Javadoc 1 package swirl workspace 2 3 import java util Iterator 4 5 import javax servlet http HttpServletRequest 6 import javax servlet http HttpServletResponse 7 8 import org apache commons httpclient Header 9 import org apache commons httpclient HttpMethod 1 import org apache commons logging Log 11 import org apache commons logging LogFactory 12 13 14 An abstract base class that other SwirlCommands can extend with some basic 15 functionality 16 17 author Ben Pillet 18 19 public abstract class BaseSwirlCommand implements SwirlCommand 2 21 the request from the client 22 private HttpServletRequest request 23 24 the response to the client 25 private HttpServletResponse response 26 27 commons logging log that maps to this Command 28 private Log log LogFactory getLog this getClass 29 3 the peerManager with all peers in it 31 private PeerManager peerManager 32 33 the host to proxy to 34 private String host 35 36 the path on the proxied host 37 private String path 38 39 4 Populates the properties of this SwirlCommand 41 42 param req the request from the client 43 param resp the response to the client 44 param newHost the host to proxy to 45 param newPath the path on the proxied host 46 param peerMan the peerManager of all peers 47 48 public BaseSwirlCommand final HttpServletRequest req 49 final HttpServletResponse resp 5 final String newHost final String newPath 51 final PeerManager peerMan 52 53 setRequest req 54 setResponse resp 55 setHost newHost 56 setPath newPath 57 this peerManager peerMan 58 59 if log isDebugEnabled 6 61 log debug host host path path 62 63 64 65 66 Mutator to set the target host for this command May be empty 67 68 param newHost the new host to proxy to 69 7 public void setHost final String newHost 71 72 host newHost 73 74 75 76 Accessor for the host that this command is executing on 77 78 return host to execute command on 79 8 public String getHost 81 82 return host 83 84 85 86 Mutator method to set the path for this command 87 http domain com thepath 88 89 param newPath the new path context 9 91 public void setPath final String newPath 92 93 path newPath 94 95 96 97 Accessor for the path that this command is executing on 98 99 return path to execute command on 1 1 1 public String getPath 1 2 1 3 return path 1 4 1 5 1 6 1 7 Accessor method for this commands peerManager 1 8 1 9 return this peerManager 11 111 public PeerManager getPeerManager 112 113 return peerManager 114 115 116 117 Mutator method for this command s client request 118 119 param req the request from the client 12 121 public void setRequest final HttpServletRequest req 122 123 this request req 124 125 126 127 Accessor for the request from the client 128 129 return request from the workspace client 13 131 public HttpServletRequest getRequest 132 133 return request 134 135 136 137 Mutator method for this command s client response 138 139 param resp the response to the client 14 141 public void setResponse final HttpServletResponse resp 142 143 this response resp 144 145 146 147 Accessor method for the response to the client 148 149 return response to the workspace client 15 151 public HttpServletResponse getResponse 152 153 return response 154 155 156 157 figure out which peer to proxy the request to 158 159 return a peer that matches the host property 16 161 throws Exception the host property did not match any of the peers 162 163 public Peer getTargetPeer throws Exception 164 165 String searchPeer getHost 166 167 if searchPeer length 168 169 searchPeer PeerManager getLocalAddress getHostAddress 17 App PORT 171 172 173 if log isDebugEnabled 174 175 log debug searchPeer searchPeer 176 177 178 for Iterator it getPeerManager getPeersIterator it hasNext 179 18 Peer peer Peer it next 181 String peerHost peer getUniqueID 182 183 if log isDebugEnabled 184 185 log debug checking if searchPeer equals peerHost 186 searchPeer equals peerHost 187 188 189 if searchPeer equals peerHost 19 191 log debug getTargetPeer returning peer peer host 192 getHost peerHost peerHost 193 194 return peer 195 196 197 198 log warn Could not find peer with address searchPeer 199 2 throw new Exception Couldn t find target peer 2 1 2 2 2 3 2 4 duplicate the headers from the response from the peer into the resposne 2 5 to the client 2 6 2 7 param method the peer s method to copy from 2 8 2 9 protected void copyHeaders final HttpMethod method 21 211 copy response headers over 212 Header headers method getResponseHeaders 213 214 for int i i headers length i 215 216 String name headers i getName 217 String value headers i getValue 218 219 if name equals Date name equals Server 22 221 if log isDebugEnabled 222 223 log debug response automatically puts date and server in response 224 225 226 else 227 228 if log isDebugEnabled 229 23 log debug header name nvalue value 231 log debug newHeader name nvalue 232 value replaceAll slide swirl 233 234 getResponse addHeader name value replaceAll slide swirl 235 236 237 238 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/BaseSwirlCommand.html", "title": "baseswirlcommand xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>BaseSwirlCommand xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/BaseSwirlCommand.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.util.Iterator;\n<a name=\"4\" href=\"#4\">4</a>   \n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> javax.servlet.http.HttpServletRequest;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> javax.servlet.http.HttpServletResponse;\n<a name=\"7\" href=\"#7\">7</a>   \n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> org.apache.commons.httpclient.Header;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> org.apache.commons.httpclient.HttpMethod;\n<a name=\"10\" href=\"#10\">10</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"12\" href=\"#12\">12</a>  \n<a name=\"13\" href=\"#13\">13</a>  <em>/**<em>*</em></em>\n<a name=\"14\" href=\"#14\">14</a>  <em> * An abstract base class that other SwirlCommands can extend with some basic</em>\n<a name=\"15\" href=\"#15\">15</a>  <em> * functionality</em>\n<a name=\"16\" href=\"#16\">16</a>  <em> *</em>\n<a name=\"17\" href=\"#17\">17</a>  <em> * @author Ben Pillet</em>\n<a name=\"18\" href=\"#18\">18</a>  <em> */</em>\n<a name=\"19\" href=\"#19\">19</a>  <strong>public</strong> <strong>abstract</strong> <strong>class</strong> <a href=\"../../swirl/workspace/BaseSwirlCommand.html\">BaseSwirlCommand</a> implements <a href=\"../../swirl/workspace/SwirlCommand.html\">SwirlCommand</a>\n<a name=\"20\" href=\"#20\">20</a>  {\n<a name=\"21\" href=\"#21\">21</a>      <em>/**<em>* the request from the client */</em></em>\n<a name=\"22\" href=\"#22\">22</a>      <strong>private</strong> HttpServletRequest request;\n<a name=\"23\" href=\"#23\">23</a>  \n<a name=\"24\" href=\"#24\">24</a>      <em>/**<em>* the response to the client */</em></em>\n<a name=\"25\" href=\"#25\">25</a>      <strong>private</strong> HttpServletResponse response;\n<a name=\"26\" href=\"#26\">26</a>  \n<a name=\"27\" href=\"#27\">27</a>      <em>/**<em>* commons-logging log that maps to this Command */</em></em>\n<a name=\"28\" href=\"#28\">28</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"29\" href=\"#29\">29</a>  \n<a name=\"30\" href=\"#30\">30</a>      <em>/**<em>* the peerManager with all peers in it */</em></em>\n<a name=\"31\" href=\"#31\">31</a>      <strong>private</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> peerManager;\n<a name=\"32\" href=\"#32\">32</a>  \n<a name=\"33\" href=\"#33\">33</a>      <em>/**<em>* the host to proxy to */</em></em>\n<a name=\"34\" href=\"#34\">34</a>      <strong>private</strong> String host;\n<a name=\"35\" href=\"#35\">35</a>  \n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>* the path on the proxied host */</em></em>\n<a name=\"37\" href=\"#37\">37</a>      <strong>private</strong> String path;\n<a name=\"38\" href=\"#38\">38</a>  \n<a name=\"39\" href=\"#39\">39</a>      <em>/**<em>*</em></em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     * Populates the properties of this SwirlCommand</em>\n<a name=\"41\" href=\"#41\">41</a>  <em>     *</em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     * @param req the request from the client</em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * @param resp the response to the client</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     * @param newHost the host to proxy to</em>\n<a name=\"45\" href=\"#45\">45</a>  <em>     * @param newPath the path on the proxied host</em>\n<a name=\"46\" href=\"#46\">46</a>  <em>     * @param peerMan the peerManager of all peers</em>\n<a name=\"47\" href=\"#47\">47</a>  <em>     */</em>\n<a name=\"48\" href=\"#48\">48</a>      <strong>public</strong> <a href=\"../../swirl/workspace/BaseSwirlCommand.html\">BaseSwirlCommand</a>(<strong>final</strong> HttpServletRequest req,\n<a name=\"49\" href=\"#49\">49</a>                              <strong>final</strong> HttpServletResponse resp,\n<a name=\"50\" href=\"#50\">50</a>                              <strong>final</strong> String newHost, <strong>final</strong> String newPath,\n<a name=\"51\" href=\"#51\">51</a>                              <strong>final</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> peerMan)\n<a name=\"52\" href=\"#52\">52</a>      {\n<a name=\"53\" href=\"#53\">53</a>          setRequest(req);\n<a name=\"54\" href=\"#54\">54</a>          setResponse(resp);\n<a name=\"55\" href=\"#55\">55</a>          setHost(newHost);\n<a name=\"56\" href=\"#56\">56</a>          setPath(newPath);\n<a name=\"57\" href=\"#57\">57</a>          <strong>this</strong>.peerManager = peerMan;\n<a name=\"58\" href=\"#58\">58</a>  \n<a name=\"59\" href=\"#59\">59</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"60\" href=\"#60\">60</a>          {\n<a name=\"61\" href=\"#61\">61</a>              log.debug(<span class=\"string\">\"host: \"</span> + host + <span class=\"string\">\"    path: \"</span> + path);\n<a name=\"62\" href=\"#62\">62</a>          }\n<a name=\"63\" href=\"#63\">63</a>      }\n<a name=\"64\" href=\"#64\">64</a>  \n<a name=\"65\" href=\"#65\">65</a>      <em>/**<em>*</em></em>\n<a name=\"66\" href=\"#66\">66</a>  <em>     * Mutator to set the target host for this command.  May be empty</em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     *</em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     * @param newHost the new host to proxy to</em>\n<a name=\"69\" href=\"#69\">69</a>  <em>     */</em>\n<a name=\"70\" href=\"#70\">70</a>      <strong>public</strong> <strong>void</strong> setHost(<strong>final</strong> String newHost)\n<a name=\"71\" href=\"#71\">71</a>      {\n<a name=\"72\" href=\"#72\">72</a>          host = newHost;\n<a name=\"73\" href=\"#73\">73</a>      }\n<a name=\"74\" href=\"#74\">74</a>  \n<a name=\"75\" href=\"#75\">75</a>      <em>/**<em>*</em></em>\n<a name=\"76\" href=\"#76\">76</a>  <em>     * Accessor for the host that this command is executing on</em>\n<a name=\"77\" href=\"#77\">77</a>  <em>     *</em>\n<a name=\"78\" href=\"#78\">78</a>  <em>     * @return host to execute command on</em>\n<a name=\"79\" href=\"#79\">79</a>  <em>     */</em>\n<a name=\"80\" href=\"#80\">80</a>      <strong>public</strong> String getHost()\n<a name=\"81\" href=\"#81\">81</a>      {\n<a name=\"82\" href=\"#82\">82</a>          <strong>return</strong> host;\n<a name=\"83\" href=\"#83\">83</a>      }\n<a name=\"84\" href=\"#84\">84</a>  \n<a name=\"85\" href=\"#85\">85</a>      <em>/**<em>*</em></em>\n<a name=\"86\" href=\"#86\">86</a>  <em>     * Mutator method to set the path for this command</em>\n<a name=\"87\" href=\"#87\">87</a>  <em>     * <a href=\"http://domain.com/thepath\" target=\"alexandria_uri\">http://domain.com/thepath</a></em>\n<a name=\"88\" href=\"#88\">88</a>  <em>     *</em>\n<a name=\"89\" href=\"#89\">89</a>  <em>     * @param newPath the new path/context</em>\n<a name=\"90\" href=\"#90\">90</a>  <em>     */</em>\n<a name=\"91\" href=\"#91\">91</a>      <strong>public</strong> <strong>void</strong> setPath(<strong>final</strong> String newPath)\n<a name=\"92\" href=\"#92\">92</a>      {\n<a name=\"93\" href=\"#93\">93</a>          path = newPath;\n<a name=\"94\" href=\"#94\">94</a>      }\n<a name=\"95\" href=\"#95\">95</a>  \n<a name=\"96\" href=\"#96\">96</a>      <em>/**<em>*</em></em>\n<a name=\"97\" href=\"#97\">97</a>  <em>     * Accessor for the path that this command is executing on</em>\n<a name=\"98\" href=\"#98\">98</a>  <em>     *</em>\n<a name=\"99\" href=\"#99\">99</a>  <em>     * @return path to execute command on</em>\n<a name=\"100\" href=\"#100\">100</a> <em>     */</em>\n<a name=\"101\" href=\"#101\">101</a>     <strong>public</strong> String getPath()\n<a name=\"102\" href=\"#102\">102</a>     {\n<a name=\"103\" href=\"#103\">103</a>         <strong>return</strong> path;\n<a name=\"104\" href=\"#104\">104</a>     }\n<a name=\"105\" href=\"#105\">105</a> \n<a name=\"106\" href=\"#106\">106</a>     <em>/**<em>*</em></em>\n<a name=\"107\" href=\"#107\">107</a> <em>     * Accessor method for this commands peerManager</em>\n<a name=\"108\" href=\"#108\">108</a> <em>     *</em>\n<a name=\"109\" href=\"#109\">109</a> <em>     * @return this.peerManager</em>\n<a name=\"110\" href=\"#110\">110</a> <em>     */</em>\n<a name=\"111\" href=\"#111\">111</a>     <strong>public</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> getPeerManager()\n<a name=\"112\" href=\"#112\">112</a>     {\n<a name=\"113\" href=\"#113\">113</a>         <strong>return</strong> peerManager;\n<a name=\"114\" href=\"#114\">114</a>     }\n<a name=\"115\" href=\"#115\">115</a> \n<a name=\"116\" href=\"#116\">116</a>     <em>/**<em>*</em></em>\n<a name=\"117\" href=\"#117\">117</a> <em>     * Mutator method for this command's client request</em>\n<a name=\"118\" href=\"#118\">118</a> <em>     *</em>\n<a name=\"119\" href=\"#119\">119</a> <em>     * @param req the request from the client</em>\n<a name=\"120\" href=\"#120\">120</a> <em>     */</em>\n<a name=\"121\" href=\"#121\">121</a>     <strong>public</strong> <strong>void</strong> setRequest(<strong>final</strong> HttpServletRequest req)\n<a name=\"122\" href=\"#122\">122</a>     {\n<a name=\"123\" href=\"#123\">123</a>         <strong>this</strong>.request = req;\n<a name=\"124\" href=\"#124\">124</a>     }\n<a name=\"125\" href=\"#125\">125</a> \n<a name=\"126\" href=\"#126\">126</a>     <em>/**<em>*</em></em>\n<a name=\"127\" href=\"#127\">127</a> <em>     * Accessor for the request from the client</em>\n<a name=\"128\" href=\"#128\">128</a> <em>     *</em>\n<a name=\"129\" href=\"#129\">129</a> <em>     * @return request from the workspace client</em>\n<a name=\"130\" href=\"#130\">130</a> <em>     */</em>\n<a name=\"131\" href=\"#131\">131</a>     <strong>public</strong> HttpServletRequest getRequest()\n<a name=\"132\" href=\"#132\">132</a>     {\n<a name=\"133\" href=\"#133\">133</a>         <strong>return</strong> request;\n<a name=\"134\" href=\"#134\">134</a>     }\n<a name=\"135\" href=\"#135\">135</a> \n<a name=\"136\" href=\"#136\">136</a>     <em>/**<em>*</em></em>\n<a name=\"137\" href=\"#137\">137</a> <em>     * Mutator method for this command's client response</em>\n<a name=\"138\" href=\"#138\">138</a> <em>     *</em>\n<a name=\"139\" href=\"#139\">139</a> <em>     * @param resp the response to the client</em>\n<a name=\"140\" href=\"#140\">140</a> <em>     */</em>\n<a name=\"141\" href=\"#141\">141</a>     <strong>public</strong> <strong>void</strong> setResponse(<strong>final</strong> HttpServletResponse resp)\n<a name=\"142\" href=\"#142\">142</a>     {\n<a name=\"143\" href=\"#143\">143</a>         <strong>this</strong>.response = resp;\n<a name=\"144\" href=\"#144\">144</a>     }\n<a name=\"145\" href=\"#145\">145</a> \n<a name=\"146\" href=\"#146\">146</a>     <em>/**<em>*</em></em>\n<a name=\"147\" href=\"#147\">147</a> <em>     * Accessor method for the response to the client</em>\n<a name=\"148\" href=\"#148\">148</a> <em>     *</em>\n<a name=\"149\" href=\"#149\">149</a> <em>     * @return response to the workspace client</em>\n<a name=\"150\" href=\"#150\">150</a> <em>     */</em>\n<a name=\"151\" href=\"#151\">151</a>     <strong>public</strong> HttpServletResponse getResponse()\n<a name=\"152\" href=\"#152\">152</a>     {\n<a name=\"153\" href=\"#153\">153</a>         <strong>return</strong> response;\n<a name=\"154\" href=\"#154\">154</a>     }\n<a name=\"155\" href=\"#155\">155</a> \n<a name=\"156\" href=\"#156\">156</a>     <em>/**<em>*</em></em>\n<a name=\"157\" href=\"#157\">157</a> <em>     * figure out which peer to proxy the request to</em>\n<a name=\"158\" href=\"#158\">158</a> <em>     *</em>\n<a name=\"159\" href=\"#159\">159</a> <em>     * @return a peer that matches the host property</em>\n<a name=\"160\" href=\"#160\">160</a> <em>     *</em>\n<a name=\"161\" href=\"#161\">161</a> <em>     * @throws Exception the host property did not match any of the peers</em>\n<a name=\"162\" href=\"#162\">162</a> <em>     */</em>\n<a name=\"163\" href=\"#163\">163</a>     <strong>public</strong> <a href=\"../../swirl/workspace/Peer.html\">Peer</a> getTargetPeer() throws Exception\n<a name=\"164\" href=\"#164\">164</a>     {\n<a name=\"165\" href=\"#165\">165</a>         String searchPeer = getHost();\n<a name=\"166\" href=\"#166\">166</a> \n<a name=\"167\" href=\"#167\">167</a>         <strong>if</strong>(searchPeer.length() == 0)\n<a name=\"168\" href=\"#168\">168</a>         {\n<a name=\"169\" href=\"#169\">169</a>             searchPeer = PeerManager.getLocalAddress().getHostAddress() + <span class=\"string\">\":\"</span>\n<a name=\"170\" href=\"#170\">170</a>                          + App.PORT;\n<a name=\"171\" href=\"#171\">171</a>         }\n<a name=\"172\" href=\"#172\">172</a> \n<a name=\"173\" href=\"#173\">173</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"174\" href=\"#174\">174</a>         {\n<a name=\"175\" href=\"#175\">175</a>             log.debug(<span class=\"string\">\"searchPeer: \"</span> + searchPeer);\n<a name=\"176\" href=\"#176\">176</a>         }\n<a name=\"177\" href=\"#177\">177</a> \n<a name=\"178\" href=\"#178\">178</a>         <strong>for</strong>(Iterator it = getPeerManager().getPeersIterator(); it.hasNext();)\n<a name=\"179\" href=\"#179\">179</a>         {\n<a name=\"180\" href=\"#180\">180</a>             <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer = (Peer)it.next();\n<a name=\"181\" href=\"#181\">181</a>             String peerHost = peer.getUniqueID();\n<a name=\"182\" href=\"#182\">182</a> \n<a name=\"183\" href=\"#183\">183</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"184\" href=\"#184\">184</a>             {\n<a name=\"185\" href=\"#185\">185</a>                 log.debug(<span class=\"string\">\"checking if \"</span> + searchPeer + <span class=\"string\">\" equals \"</span> + peerHost\n<a name=\"186\" href=\"#186\">186</a>                           + <span class=\"string\">\": \"</span> + searchPeer.equals(peerHost));\n<a name=\"187\" href=\"#187\">187</a>             }\n<a name=\"188\" href=\"#188\">188</a> \n<a name=\"189\" href=\"#189\">189</a>             <strong>if</strong>(searchPeer.equals(peerHost))\n<a name=\"190\" href=\"#190\">190</a>             {\n<a name=\"191\" href=\"#191\">191</a>                 log.debug(<span class=\"string\">\"getTargetPeer: returning peer \"</span> + peer + <span class=\"string\">\"  host: \"</span>\n<a name=\"192\" href=\"#192\">192</a>                           + getHost() + <span class=\"string\">\"  peerHost: \"</span> + peerHost);\n<a name=\"193\" href=\"#193\">193</a> \n<a name=\"194\" href=\"#194\">194</a>                 <strong>return</strong> peer;\n<a name=\"195\" href=\"#195\">195</a>             }\n<a name=\"196\" href=\"#196\">196</a>         }\n<a name=\"197\" href=\"#197\">197</a> \n<a name=\"198\" href=\"#198\">198</a>         log.warn(<span class=\"string\">\"Could not find peer with address: \"</span> + searchPeer);\n<a name=\"199\" href=\"#199\">199</a> \n<a name=\"200\" href=\"#200\">200</a>         <strong>throw</strong> <strong>new</strong> Exception(<span class=\"string\">\"Couldn't find target peer\"</span>);\n<a name=\"201\" href=\"#201\">201</a>     }\n<a name=\"202\" href=\"#202\">202</a> \n<a name=\"203\" href=\"#203\">203</a>     <em>/**<em>*</em></em>\n<a name=\"204\" href=\"#204\">204</a> <em>     * duplicate the headers from the response from the peer into the resposne</em>\n<a name=\"205\" href=\"#205\">205</a> <em>     * to the client</em>\n<a name=\"206\" href=\"#206\">206</a> <em>     *</em>\n<a name=\"207\" href=\"#207\">207</a> <em>     * @param method the peer's method to copy from</em>\n<a name=\"208\" href=\"#208\">208</a> <em>     */</em>\n<a name=\"209\" href=\"#209\">209</a>     <strong>protected</strong> <strong>void</strong> copyHeaders(<strong>final</strong> HttpMethod method)\n<a name=\"210\" href=\"#210\">210</a>     {\n<a name=\"211\" href=\"#211\">211</a>         <em class=\"comment\">//copy response headers over</em>\n<a name=\"212\" href=\"#212\">212</a>         Header[] headers = method.getResponseHeaders();\n<a name=\"213\" href=\"#213\">213</a> \n<a name=\"214\" href=\"#214\">214</a>         <strong>for</strong>(<strong>int</strong> i = 0; i &lt; headers.length; ++i)\n<a name=\"215\" href=\"#215\">215</a>         {\n<a name=\"216\" href=\"#216\">216</a>             String name = headers[i].getName();\n<a name=\"217\" href=\"#217\">217</a>             String value = headers[i].getValue();\n<a name=\"218\" href=\"#218\">218</a> \n<a name=\"219\" href=\"#219\">219</a>             <strong>if</strong>(name.equals(<span class=\"string\">\"Date\"</span>) || name.equals(<span class=\"string\">\"Server\"</span>))\n<a name=\"220\" href=\"#220\">220</a>             {\n<a name=\"221\" href=\"#221\">221</a>             \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"222\" href=\"#222\">222</a>     \t        {\n<a name=\"223\" href=\"#223\">223</a>             \t\tlog.debug(<span class=\"string\">\"response automatically puts date and server in response\"</span>);\n<a name=\"224\" href=\"#224\">224</a>     \t        }\n<a name=\"225\" href=\"#225\">225</a>             }\n<a name=\"226\" href=\"#226\">226</a>             <strong>else</strong>\n<a name=\"227\" href=\"#227\">227</a>             {\n<a name=\"228\" href=\"#228\">228</a>             \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"229\" href=\"#229\">229</a>     \t        {\n<a name=\"230\" href=\"#230\">230</a>             \t\tlog.debug(<span class=\"string\">\"header: \"</span> + name + <span class=\"string\">\"\\nvalue: \"</span> + value);\n<a name=\"231\" href=\"#231\">231</a>             \t\tlog.debug(<span class=\"string\">\"newHeader: \"</span> + name + <span class=\"string\">\"\\nvalue: \"</span>\n<a name=\"232\" href=\"#232\">232</a>                           + value.replaceAll(<span class=\"string\">\"slide\"</span>, <span class=\"string\">\"swirl\"</span>));\n<a name=\"233\" href=\"#233\">233</a>     \t        }\n<a name=\"234\" href=\"#234\">234</a>                 getResponse().addHeader(name, value.replaceAll(<span class=\"string\">\"slide\"</span>, <span class=\"string\">\"swirl\"</span>));\n<a name=\"235\" href=\"#235\">235</a>             }\n<a name=\"236\" href=\"#236\">236</a>         }\n<a name=\"237\" href=\"#237\">237</a>     }\n<a name=\"238\" href=\"#238\">238</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32980.0}