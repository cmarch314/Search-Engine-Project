{"text": "ICS 45C Fall 2 14 News Course Reference Schedule Project Guide Code Examples About Alex ICS 45C Fall 2 14 Project 2 Letter Never Sent Due date and time Friday November 7 11 59pm Introduction Over my years of teaching I ve become quite fond of a grading scale that I jokingly refer to as the Whatever I Want scale Of course it s not quite as open ended as my glib joke about it it s a fair scale in the sense that any two students who perform at a particular level will receive the same grade though it is neither a straight scale nor a curve requiring me instead to decide at the end of the quarter where to set cutpoints that divide students who receive one grade from students who receive another This is the grading scale that I ll employ at the end of the quarter in this course This project asks you to write a utility program that is given input via the console describing the set of graded artifacts for a course the students enrolled in the course and their scores on the various artifacts Additionally it is given a sequence of cutpoint sets describing the cutpoints i e the number of total points necessary dividing various grade levels The program s output is twofold the total score received by each student in the course and for each cutpoint set final course grades for each student Not surprisingly you will need to write the program in C though there are some fairly heavy restrictions on what parts of C you re permitted to use as we re still early in the process of learning it and I d like you to gain some experience with some of the lower level abstractions most notably arrays new delete and delete before we layer less error prone abstractions on top of them Our goal in the early part of this course is to develop an understanding of what is happening behind the scenes in a C program and it s impossible to develop this understanding if you sit at too high of a level of abstraction Getting started As with the previous project you ll need to complete some chores before you can start working on this project Be sure you read these instructions and follow them completely before proceeding Refreshing your ICS 45C VM environment Even if you previously downloaded your ICS 45C VM you may need to refresh its environment before proceeding with this project so that you have a copy of the project2 project template that you ll need for this project Log into your VM and issue the command ics45c version to see what version of the ICS 45C environment you currently have stored on your VM Note in particular the timestamp if you see a version with a timestamp older than the one listed below you ll want to refresh your environment by running the command ics45c refresh to download the latest one before you proceed with this project 2 14 1 26 21 1 5 Project 2 template added Creating your project directory on your ICS 45C VM A project template has been created specifically for this project It includes a gather script for preparing your files for submission when you re finished support for running the memory checking tool valgrind to test the memory usage of your proram as well as a sample input for your program the same input that is specified in the project write up to prevent you from having to type it repeatedly Decide on a name for your project directory then issue the command ics45c start project PROJECT NAME project2 to create your new project directory using the project2 template Do not use the basic or project1 templates for this project You may find that they are missing some new tools that you ll be needing in order to complete your work The input The program s input is to be read from the standard input i e std cin It is separated into four sections A description of a course s graded artifacts defining both a number of points possible and a relative weight for each A description of the students in the course listing a student ID and a name for each A list of the raw scores received on each graded artifact by students in the course A list of cutpoint sets describing the total score required to receive an A B C or D respectively This project assumes that there are no modifiers on grades and that there are no other kinds of grades such as Incomplete though we will support Pass NotPass grades see below Each section is described in more detail below Graded artifacts The section describing graded artifacts begins with a positive integer alone on a line specifying the number of graded artifacts This is followed on another line a sequence of integers separated by spaces indicating the total points possible on each graded artifact Finally on one more line there will be a sequence of integers separated by spaces indicating the relative weight of each graded artifact An example of this section would be 7 15 15 15 15 15 5 5 12 12 12 12 12 15 25 This example describes seven graded artifacts the first five having 15 points possible and relative weights of 12 the sixth having 5 points possible and a relative weight of 15 and the last having 5 points possible and a relative weight of 25 Note that in this example the relative weights add up to 1 in general however this will not always be the case Students The next section of input describes the students enrolled in the course It begins with a positive integer alone on a line specifying the number of students enrolled Given that positive integer n there will be n additional lines each consisting of a non negative integer student ID followed by a space followed by the student s grade option G for letter grade or P for Pass NotPass followed by another space followed by the student s name Every character on the line after the grade option and space is considered to be part of the student s name An example of this section would be 5 123 G Alex Thornton 234 G Boo Thornton 345 G Jane Student 456 P Joe Student 567 G Too Many Courses Student IDs do not necessarily have to be three digits and they do not necessarily all have to be the same number of digits Raw scores The next section of input describes the raw scores earned by students on each graded artifact The section begins with a positive integer alone on a line specifying the number of students for which raw scores are listed Given that positive integer n there will be n additional lines each consisting of a sequence of non negative integers separated by spaces the first of which is a student ID and the rest of which are raw scores for each graded artifact If there are m graded artifacts you can assume each of these lines will contain m 1 integers one student ID followed by m raw scores and that the scores correspond in order to the graded artifacts listed in the first section Example 5 345 14 14 14 14 14 45 45 123 13 1 8 14 12 5 37 456 12 9 15 13 11 38 26 234 15 15 15 15 15 5 5 567 8 4 1 24 12 It is possible for a student to be listed in the previous section but not to be listed in this section In that case assume that the student s raw scores are all It is also possible for a student to be listed in this section who does not appear in the previous section in that case ignore the student s raw scores as the student is assumed to have dropped the course It is also possible for a raw score to be higher than the number of points possible on a graded artifact This is to be interpreted as extra credit and fits into the formula below as is Cutpoint sets The last section of input is the cutpoint sets This section begins with a positive integer alone on a line specifying the number of cutpoint sets Given that positive integer n the next n lines will consist of four non negative numeric values possibly including a decimal point and additional digits that specify respectively the total points required for an A B C or D in the course Example 3 9 8 7 6 85 75 65 55 8 7 6 5 Note that these are not percentages necessarily they indicate a total number of points necessary this is described in more detail later in this write up You may assume that each of the cutpoint values can safely be read into a variable of type double A complete example input A complete example input for the program follows It should be possible to copy and paste this into a shell window or to save this into a file and use redirection to send the file s contents into your program as input Additionally this exact input file is provided in the project2 project template so you should find a copy of it in your project directory in a directory called inputs You might want to create other test inputs and place them in that directory as well 7 15 15 15 15 15 5 5 12 12 12 12 12 15 25 5 123 G Alex Thornton 234 G Boo Thornton 345 G Jane Student 456 P Joe Student 567 G Too Many Courses 5 345 14 14 14 14 14 45 45 123 13 1 8 14 12 5 37 456 12 9 15 13 11 38 26 234 15 15 15 15 15 5 5 567 8 4 1 24 12 3 9 8 7 6 85 75 65 55 8 7 6 5 Note that there is nothing that explicitly separates one section of the input from the next though you will always be able to tell from context e g the number of graded artifacts the number of students etc where one section ends and the next begins Other requirements about the input The program must not print prompts e g Enter the number of students or any other output except for what is specified in the section titled The output below It is reasonable for your program to assume that the program s input will always be structured as specified here It is fine for your program to misbehave or even crash if given input that does conform to these specifications It is safe to assume that all integers will be small enough that they will fit into an unsigned int or int variable on the version of Linux running on the ICS 45C VM the largest value that would fit in both of these kinds of variables is 2 147 483 647 Calculating the total points The program s output is largely determined by the total score earned by each student in the course In order to complete the program you ll need to understand the correct formula to use In the example input above there are seven graded artifacts defined 15 points possible with a relative weight of 1215 points possible with a relative weight of 1215 points possible with a relative weight of 1215 points possible with a relative weight of 1215 points possible with a relative weight of 125 points possible with a relative weight of 155 points possible with a relative weight of 25 From this example we can see that simply adding together the raw scores on the various graded artifacts won t work because for example artifact 6 is being graded on a 5 point scale but is worth only slightly more overall than aritfact 5 which is being graded on a 15 point scale summing the scores would give too much weight to artifact 6 So we ll need to scale each of the raw scores then add the scaled scores together The total relative weight of all graded artifacts in this example is 1 which means that the total score for each student will range from to 1 It won t always be like this we don t assume necessarily that all courses have a 1 point scale We calculate this by multiplying the percentage of points earned on each graded artifact by its relative weight then summing the results For example suppose a student received these scores 141315121 4 45 The calculations would proceed as follows 14 15 12 11 2 13 15 12 1 4 15 15 12 12 12 15 12 9 6 1 15 12 8 4 5 15 12 45 5 25 22 5 Summing these together would yield a total of 11 2 1 4 12 9 6 8 12 22 5 85 7 So this student s total score is 85 7 out of a possible 1 Scores that include extra credit i e a raw score higher than the number of points possible on a graded artifact do not need to be treated differently they should be plugged into the formula the same way as any other Determining final course grades The final course grade for a student is determined by comparing the total score earned by that student to the cutpoints for an A B C or D If a student s total score is greater than or equal to the A cutpoint the student s final course grade is AOtherwise if a student s total score is greater than or equal to the B cutpoint the student s final course grade is BOtherwise if a student s total score is greater than or equal to the C cutpoint the student s final course grade is COtherwise if a student s total score is greater than or equal to the D cutpoint the student s final course grade is DOtherwise the student s final course grade is F Note that students whose grade option is P Pass NotPass are handled a bit differently In their case determine what their letter grade would have been as described above and then assign them one of these two grades If the student s letter grade would have been A B or C the student s final course grade is P i e passing If the student s letter grade would have been D or F the student s final course grade is NP i e not passing The output While reading the input there are specified points at which output will be generated and printed to the standard output i e std cout These are specified along with the format of that output below Student roster After reading the raw scores on all graded artifacts total scores are printed for all students The format for this output is as follows The words TOTAL SCORES alone on a lineFor each student enrolled in the course the student ID followed by a space followed by the student s name followed by a space followed by the student s total score Example TOTAL SCORES 123 Alex Thornton 79 1 234 Boo Thornton 1 345 Jane Student 92 456 Joe Student 72 4 567 Too Many Courses 3 8 It is not necessary to format the total score to a particular number of decimal places though you should not truncate it or round it to an integer Whatever way the C iostream library formats a double value by default is fine here Course grades After reading each cutpoint set final course grades for that cutpoint set are printed For the purposes of this output cutpoint sets are numbered consecutively starting from 1 The format of this output is as follows The words CUTPOINT SET n alone on a line where n is replaced by the cutpoint set number 1 for the first cutpoint set 2 for the second and so on For each student enrolled in the course the student ID followed by a space followed by the student s name followed by a space followed by the student s grade Example CUTPOINT SET 1 123 Alex Thornton C 234 Boo Thornton A 345 Jane Student A 456 Joe Student P 567 Too Many Courses F Output timing Do not store all of the output in memory and print it to the standard output only at the end of the program Instead you will be required to write output to the standard output at the points in time specified above A complete example of program execution The following is a complete example of program execution demonstrating how input and output are interleaved Input is shown in a regular font weight output is shown in bold 7 15 15 15 15 15 5 5 12 12 12 12 12 15 25 5 123 G Alex Thornton 234 G Boo Thornton 345 G Jane Student 456 P Joe Student 567 G Too Many Courses 5 345 14 14 14 14 14 45 45 123 13 1 8 14 12 5 37 456 12 9 15 13 11 38 26 234 15 15 15 15 15 5 5 567 8 4 1 24 12 TOTAL SCORES 123 Alex Thornton 79 1 234 Boo Thornton 1 345 Jane Student 92 456 Joe Student 72 4 567 Too Many Courses 3 8 3 9 8 7 6 CUTPOINT SET 1 123 Alex Thornton C 234 Boo Thornton A 345 Jane Student A 456 Joe Student P 567 Too Many Courses F 85 75 65 55 CUTPOINT SET 2 123 Alex Thornton B 234 Boo Thornton A 345 Jane Student A 456 Joe Student P 567 Too Many Courses F 8 7 6 5 CUTPOINT SET 3 123 Alex Thornton B 234 Boo Thornton A 345 Jane Student A 456 Joe Student P 567 Too Many Courses F Some rules and limitations Because we re beginning our exploration of C by building our knowledge from some of its lowest level abstractions there are some fairly strict limitations on what features of the language you ll be permitted to use in this project Those limitations will lift quickly as we move forward this quarter so don t be concerned that you ll always be put into a tiny box but this project has some very particular goals If you have prior experience with C you may find that there are other techniques that you d prefer to use and it s quite possible that you re right that they d be better techniques in general but you ll need to stick with what s allowed this time because there are particular learning objectives here Here are the rules and limitations governing your work on this project Other than iostream sstream and string you are not permitted to include any C or C standard library headers in your program Aside from console input output using for example std cin std cout and std endl the std string class and stringstreams std istringstream and std ostringstream the standard library is off limits e g you cannot use collections like std vector Use arrays to store and manipulate data within your program Note too that you won t know the correct sizes for these arrays at compile time because the sizes are specified in the program s input so you will find that you need to use dynamically allocated arrays extensively You are permitted to use structs in the C sense i e implicitly public member variables with no member functions constructors destructors etc but classes are off limits until the next project as our exploration of object oriented techniques still lies ahead of us Even though this is what you might call a batch mode program i e it reads input processes it generates output and then ends you are still required to explicitly delete any memory that you dynamically allocate using new This is a habit that is vital to build in C so this will always be a requirement in this course While the symptoms of leaking memory are often invisible we ll use tools in this course to make them visible more about that below From a design perspective you are again required to break large functions into smaller ones and to arrange your functions into multiple source files where each source file encompasses a set of strongly related functions Any source file that needs to export things e g functions to other source files should also include its own separate header file Redirection or How to avoid re typing the input every time you run your program When you use the run script to execute your program and generally by default in Linux the standard input and standard output are connected to the shell window where you executed the program The program s input is typed into that shell window the program s output is written to that shell window However you can also use a technique called redirection to connect the standard input and or standard output to other devices most importantly for us to files instead of the default For example the contents of an existing file may be redirected into the standard input so that your program will read its input from the file instead of from the shell window similarly the standard output can be redirected into a file meaning that all of the output printed to std cout will be saved into that file rather than being displayed in the shell window The typical mechanism for redirection is to use the and operators on the command line like this SomeProgramYouWantToRun FileContainingStdInput txt FileToStoreStdOutput txt You don t have to use both you can use only in which case the standard input is read from a file but the standard output is written to the shell window or only in which case the standard input is read from the shell window but the standard output is written to a file It s up to you Using redirection to avoid re typing test input This can be a handy technique to use in your testing to avoid the problem of having to re type the program s input every time you run it If you used the project2 project template and you should have when creating your project you should see a directory called inputs in your project directory in the inputs directory you should see a file sample txt which contains the sample input from this project write up If you want to run your program using the same input issue this command from your project directory run inputs sample txt The effect is that the contents of the sample txt file in the inputs directory will be redirected into your program s standard input in lieu of you having to type it You might also want to write other test files for yourself in that same inputs directory then use a similar technique to redirect them into the standard input of your program You can avoid a lot of re typing this way A note about output timing Note that the redirection technique will not give you an accurate view of whether your program is printing the right output at the right times as specified in the requirements above but it will tell you whether your program is generating the correct answer You can enter the input manually sometimes when you want to test the timing of the output Using Valgrind to check your memory usage Valgrind is a program that you can use to detect a variety of otherwise difficult to find problems in C and C programs It consists of a set of tools each of which detects a certain kind of problem For our work here we ll be interested in a tool in Valgrind called Memcheck which watches a program while it runs tracking the dynamic allocations and deallocations it does When the program finishes it reports a summary of memory leaks and other memory related issues that it found So for example if the program allocated an object dynamically using new but never deallocated the object the memory allocated to that object would be reported as a leak As an example of what Memcheck can do consider the following short C program that contains a memory leak the array allocated dynamically using new is never deallocated using delete Along the left hand column line numbers are shown they are not part of the program 1 include iostream 2 3 4 int main 5 6 std cout Hello Boo std endl 7 8 int a new int 1 9 1 for int i i 1 i 11 12 a i i 13 14 15 std cout Goodbye std endl 16 17 return 18 When I compiled and ran that program using the Memcheck tool I received the following output 24278 Memcheck a memory error detector 24278 Copyright C 2 2 2 13 and GNU GPL d by Julian Seward et al 24278 Using Valgrind 3 1 SVN and LibVEX rerun with h for copyright info 24278 Command home ics45c projects memchecktest out bin a out app 24278 Hello Boo Goodbye 24278 24278 HEAP SUMMARY 24278 in use at exit 4 bytes in 1 blocks 24278 total heap usage 1 allocs frees 4 bytes allocated 24278 24278 4 bytes in 1 blocks are definitely lost in loss record 1 of 1 24278 at x4 2A17C malloc in usr lib valgrind vgpreload memcheck x86 linux so 24278 at x4 BA7 9 operator new unsigned int in usr lib i386 linux gnu libc so 1 24278 by x8 48FE main main cpp 8 24278 24278 LEAK SUMMARY 24278 definitely lost 4 bytes in 1 blocks 24278 indirectly lost bytes in blocks 24278 possibly lost bytes in blocks 24278 still reachable bytes in blocks 24278 suppressed bytes in blocks 24278 24278 For counts of detected and suppressed errors rerun with v 24278 ERROR SUMMARY 1 errors from 1 contexts suppressed from The lines beginning in 24278 emanate from Memcheck The 24278 changes from one run to the next it s the process identifier or pid a number associated with the program to differentiate it from all of the others currently running on the system Notice that we see a preamble from Memcheck before any of the program s output Then we see all of the program s output Finally we see a report from Memcheck detailing any problems that it found Sometimes we ll see messages appear along the way while the program runs In general every message we see is an issue with our usage of memory e g failing to deallocate memory using pointers to unallocated memory using values of variables that have not been initialized and so on In this case the report tells us of a block of 4 bytes that had been allocated but never deallocated In Memcheck s estimation they are definitely lost which means that these are bytes that were definitely noted as having been allocated and definitely noted as never having been deallocated What s more we were given the line of code on which the allocation took place which was main cpp 8 line 8 of main cpp in the function main 24278 by x8 48FE main main cpp 8 Note that we re shown the entire stack trace at the point where the allocation happened but your best bet is to find the topmost line of the stack trace that describes a location in your code anything above it is likely library code you re calling into in this case the code that dynamically allocates an array when we said new int 1 Looking back at our program we see that line 8 is where the array was allocated dynamically using new That array is the one that was never deallocated Why was the block 4 bytes Because each int value was 4 bytes the size of an int on our version of Linux and there were 1 of them 4 1 4 Updating the program to include this line just after the for loop so that the dynamically allocated array will be deleted delete a causes Memcheck to generate the following report instead 24321 HEAP SUMMARY 24321 in use at exit bytes in blocks 24321 total heap usage 1 allocs 1 frees 4 bytes allocated 24321 24321 All heap blocks were freed no leaks are possible 24321 24321 For counts of detected and suppressed errors rerun with v 24321 ERROR SUMMARY errors from contexts suppressed from This is Memcheck s version of a clean bill of health There are clearly no memory leaks in the program as far as Memcheck is concerned and no other messages were generated other than the preamble and the clean bill of health at the end When we grade your project we ll use Memcheck and we ll expect a clean bill of health so if you re getting any messages from it you ll need to investigate the underlying issues and fix them If you re not sure what they mean we re happy to help Try the same program yourself with Memcheck Experiment with adding and removing the use of delete and try changing it to delete without the brackets instead and see how Memcheck s report changes This will help you start to gain an understanding of what Memcheck can do for you as you work on your project A deeper look at Memcheck A deeper look at what kinds of problems Memcheck can find and how it will report on its findings can be found in Memcheck s user manual at this link Memcheck user maunal Don t feel the need to internalize every detail but do scan through it to get a feel for what kinds of things will be reported to you Running your program using Memcheck The usual run script which you use to run your program after building it has an option that lets you run the program using Memcheck If you run your program with this command run memcheck then Memcheck will observe your program as it runs and report its finding You d type in the input as usual and would see the output appear as usual but Memcheck s preamble will be displayed when your program starts and its final report will be displayed when your program ends Note too that you can combine this with redirection run memcheck inputs sample txt if you want to run the program with Memcheck but avoid typing the input by hand We will be running your program using Memcheck as part of the grading process and expect it to generate a clean report i e no memory leaks to receive full credit so you d be well served to use Memcheck periodically as you work and to fix issues as they arise Deliverables After using the gather script in your project directory to gather up your C source and header files into a single project2 tar gz file submit that file and only that file to Checkmate Follow this link for a discussion of how to submit your project via Checkmate Be aware that I ll be holding you to all of the rules specified in that document including the one that says that you re responsible for submitting the version of the project that you want graded We won t regrade a project simply because you submitted the wrong version accidentally It s not a bad idea to look at the contents of your tarball on your host operating system before submitting it Can I submit after the deadline Yes it is possible subject to the late work policy for this course which is described in the section titled Late work at this link Some tweaks to requirements and some additional clarifications by Alex Thornton Fall 2 14 A few clarifications added by Alex Thornton Winter 2 14 Requirements tweaked and reorganized for ICS 45C VM by Alex Thornton Fall 2 13 Originally written by Alex Thornton Fall 2 12 ", "_id": "http://www.ics.uci.edu/~thornton/ics45c/ProjectGuide/Project2/", "title": "ics 45c fall 2014, project #2: letter never sent", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2014, Project #2: Letter Never Sent</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2014 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2014<br />\r\n   Project #2: <i>Letter Never Sent</i></p>\r\n   \r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, November 7, 11:59pm</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Introduction</p>\r\n\r\n<p>Over my years of teaching, I've become quite fond of a grading scale that I jokingly refer to as the \"Whatever I Want\" scale.  Of course, it's not quite as open-ended as my glib joke about it; it's a fair scale in the sense that any two students who perform at a particular level will receive the same grade &mdash; though it is neither a straight scale nor a curve, requiring me instead to decide, at the end of the quarter, where to set <i>cutpoints</i> that divide students who receive one grade from students who receive another.  This is the grading scale that I'll employ at the end of the quarter in this course.</p>\r\n\r\n<p>This project asks you to write a utility program that is given input via the console describing the set of graded artifacts for a course, the students enrolled in the course, and their scores on the various artifacts.  Additionally, it is given a sequence of <i>cutpoint sets</i> describing the cutpoints (i.e., the number of total points necessary) dividing various grade levels.  The program's output is twofold: the <i>total score</i> received by each student in the course and, for each cutpoint set, final course grades for each student.</p>\r\n\r\n<p>Not surprisingly, you will need to write the program in C++, though there are some fairly heavy restrictions on what parts of C++ you're permitted to use, as we're still early in the process of learning it and I'd like you to gain some experience with some of the lower-level abstractions (most notably arrays, <b>new</b>, <b>delete</b>, and <b>delete[ ]</b>) before we layer less error-prone abstractions on top of them.  Our goal in the early part of this course is to develop an understanding of what is happening behind the scenes in a C++ program, and it's impossible to develop this understanding if you sit at too high of a level of abstraction.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>As with the <a href=\"../Project1\">previous project</a>, you'll need to complete some chores before you can start working on this project.  <i>Be sure you read these instructions and follow them completely before proceeding.</i></p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 45C VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 45C VM, you may need to refresh its environment before proceeding with this project, so that you have a copy of the <b>project2</b> project template that you'll need for this project.</p>\r\n\r\n<p>Log into your VM and issue the command <b>ics45c version</b> to see what version of the ICS 45C environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics45c refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2014-10-26 21:10:50\r\nProject #2 template added\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 45C VM</p>\r\n\r\n<p>A project template has been created specifically for this project.  It includes a <b>gather</b> script for preparing your files for submission when you're finished, support for running the memory-checking tool <b>valgrind</b> to test the memory usage of your proram, as well as a sample input for your program (the same input that is specified in the project write-up), to prevent you from having to type it repeatedly.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics45c start_project <i>PROJECT_NAME</i> project2</b> to create your new project directory using the <b>project2</b> template.</p>\r\n\r\n<p><i>Do not use the <b>basic</b> or <b>project1</b> templates for this project!  You may find that they are missing some new tools that you'll be needing in order to complete your work!</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The input</p>\r\n\r\n<p>The program's input is to be read from the standard input (i.e., <b>std::cin</b>).  It is separated into four sections:</p>\r\n\r\n<ul>\r\n  <li>A description of a course's <i>graded artifacts</i>, defining both a <i>number of points possible</i> and a <i>relative weight</i> for each.</li>\r\n  <li>A description of the students in the course, listing a <i>student ID</i> and a <i>name</i> for each.</li>\r\n  <li>A list of the raw scores received on each graded artifact by students in the course.</li>\r\n  <li>A list of <i>cutpoint sets</i>, describing the total score required to receive an A, B, C, or D, respectively.  (This project assumes that there are no +/- modifiers on grades, and that there are no other kinds of grades such as Incomplete, though we will support Pass/NotPass grades; see below.)</li>\r\n</ul>\r\n\r\n<p>Each section is described in more detail below.</p>\r\n\r\n<p class=\"subtitle\">Graded artifacts</p>\r\n\r\n<p>The section describing graded artifacts begins with a positive integer, alone on a line, specifying the number of graded artifacts.  This is followed, on another line, a sequence of integers, separated by spaces, indicating the total points possible on each graded artifact.  Finally, on one more line, there will be a sequence of integers, separated by spaces, indicating the relative weight of each graded artifact.  An example of this section would be:</p>\r\n\r\n<blockquote><pre>\r\n7\r\n15 15 15 15 15 50 50\r\n12 12 12 12 12 15 25\r\n</pre></blockquote>\r\n\r\n<p>This example describes seven graded artifacts, the first five having 15 points possible and relative weights of 12, the sixth having 50 points possible and a relative weight of 15, and the last having 50 points possible and a relative weight of 25.  Note that, in this example, the relative weights add up to 100; in general, however, this will not always be the case.</p>\r\n\r\n<p class=\"subtitle\">Students</p>\r\n\r\n<p>The next section of input describes the students enrolled in the course.  It begins with a positive integer, alone on a line, specifying the number of students enrolled.  Given that positive integer <i>n</i>, there will be <i>n</i> additional lines, each consisting of a non-negative integer <i>student ID</i>, followed by a space, followed by the student's <i>grade option</i> (G for \"letter grade\" or P for \"Pass/NotPass\"), followed by another space, followed by the student's name.  Every character on the line after the grade option and space is considered to be part of the student's name.  An example of this section would be:</p>\r\n\r\n<blockquote><pre>\r\n5\r\n123 G Alex Thornton\r\n234 G Boo Thornton\r\n345 G Jane Student\r\n456 P Joe Student\r\n567 G Too-Many Courses\r\n</pre></blockquote>\r\n\r\n<p>Student IDs do not necessarily have to be three digits, and they do not necessarily all have to be the same number of digits.</p>\r\n\r\n<p class=\"subtitle\">Raw scores</p>\r\n\r\n<p>The next section of input describes the raw scores earned by students on each graded artifact.  The section begins with a positive integer, alone on a line, specifying the number of students for which raw scores are listed.  Given that positive integer <i>n</i>, there will be <i>n</i> additional lines, each consisting of a sequence of non-negative integers separated by spaces, the first of which is a student ID, and the rest of which are raw scores for each graded artifact.  If there are <i>m</i> graded artifacts, you can assume each of these lines will contain <i>m</i> + 1 integers (one student ID, followed by <i>m</i> raw scores), and that the scores correspond, in order, to the graded artifacts listed in the first section.  Example:</p>\r\n\r\n<blockquote><pre>\r\n5\r\n345 14 14 14 14 14 45 45\r\n123 13 10 8 14 12 50 37\r\n456 12 9 15 13 11 38 26\r\n234 15 15 15 15 15 50 50\r\n567 8 4 0 10 0 24 12\r\n</pre></blockquote>\r\n\r\n<p>It is possible for a student to be listed in the previous section but <i>not</i> to be listed in this section.  In that case, assume that the student's raw scores are all 0.  It is also possible for a student to be listed in this section who does not appear in the previous section; in that case, ignore the student's raw scores, as the student is assumed to have dropped the course.</p>\r\n\r\n<p>It is also possible for a raw score to be higher than the number of points possible on a graded artifact.  This is to be interpreted as extra credit, and fits into the formula below as-is.</p>\r\n\r\n<p class=\"subtitle\">Cutpoint sets</p>\r\n\r\n<p>The last section of input is the <i>cutpoint sets</i>.  This section begins with a positive integer, alone on a line, specifying the number of cutpoint sets.  Given that positive integer <i>n</i>, the next <i>n</i> lines will consist of four non-negative numeric values (possibly including a decimal point and additional digits) that specify, respectively, the total points required for an A, B, C, or D in the course.  Example:</p>\r\n\r\n<blockquote><pre>\r\n3\r\n90.0 80.0 70.0 60.0\r\n85.0 75.0 65.0 55.0\r\n80.0 70.0 60.0 50.0\r\n</pre></blockquote>\r\n\r\n<p>Note that these are not percentages, necessarily; they indicate a total number of points necessary &mdash; this is described in more detail later in this write-up.</p>\r\n\r\n<p>You may assume that each of the cutpoint values can safely be read into a variable of type <b>double</b>.</p>\r\n\r\n<p class=\"subtitle\">A complete example input</p>\r\n\r\n<p>A complete example input for the program follows.  It should be possible to copy and paste this into a shell window, or to save this into a file and use redirection to send the file's contents into your program as input.  Additionally, this exact input file is provided in the <b>project2</b> project template, so you should find a copy of it in your project directory in a directory called <b>inputs</b>.  (You might want to create other test inputs and place them in that directory, as well.)</p>\r\n\r\n<blockquote><pre>\r\n7\r\n15 15 15 15 15 50 50\r\n12 12 12 12 12 15 25\r\n5\r\n123 G Alex Thornton\r\n234 G Boo Thornton\r\n345 G Jane Student\r\n456 P Joe Student\r\n567 G Too-Many Courses\r\n5\r\n345 14 14 14 14 14 45 45\r\n123 13 10 8 14 12 50 37\r\n456 12 9 15 13 11 38 26\r\n234 15 15 15 15 15 50 50\r\n567 8 4 0 10 0 24 12\r\n3\r\n90.0 80.0 70.0 60.0\r\n85.0 75.0 65.0 55.0\r\n80.0 70.0 60.0 50.0\r\n</pre></blockquote>\r\n\r\n<p>Note that there is nothing that explicitly separates one section of the input from the next, though you will always be able to tell from context (e.g., the number of graded artifacts, the number of students, etc.) where one section ends and the next begins.</p>\r\n\r\n<p class=\"subtitle\">Other requirements about the input</p>\r\n\r\n<p>The program must not print prompts (e.g., \"Enter the number of students\") or any other output <i>except</i> for what is specified in the section titled <i>The output</i> below.</p>\r\n\r\n<p>It is reasonable for your program to assume that the program's input will always be structured as specified here.  It is fine for your program to misbehave or even crash if given input that does conform to these specifications.</p>\r\n\r\n<p>It is safe to assume that all integers will be small enough that they will fit into an <b>unsigned int</b> or <b>int</b> variable (on the version of Linux running on the ICS 45C VM, the largest value that would fit in both of these kinds of variables is 2,147,483,647).</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Calculating the total points</p>\r\n\r\n<p>The program's output is largely determined by the <i>total score</i> earned by each student in the course.  In order to complete the program, you'll need to understand the correct formula to use.</p>\r\n\r\n<p>In the example input above, there are seven graded artifacts defined:</p>\r\n\r\n<ol>\r\n  <li>15 points possible, with a relative weight of 12</li>\r\n  <li>15 points possible, with a relative weight of 12</li>\r\n  <li>15 points possible, with a relative weight of 12</li>\r\n  <li>15 points possible, with a relative weight of 12</li>\r\n  <li>15 points possible, with a relative weight of 12</li>\r\n  <li>50 points possible, with a relative weight of 15</li>\r\n  <li>50 points possible, with a relative weight of 25</li>\r\n</ol>\r\n\r\n<p>From this example, we can see that simply adding together the raw scores on the various graded artifacts won't work, because, for example, artifact #6 is being graded on a 50-point scale, but is worth only slightly more, overall, than aritfact #5, which is being graded on a 15-point scale; summing the scores would give too much weight to artifact #6.  So we'll need to scale each of the raw scores, then add the scaled scores together.</p>\r\n\r\n<p>The total relative weight of all graded artifacts in this example is 100, which means that the total score for each student will range from 0.0 to 100.0.  (It won't always be like this; we don't assume necessarily that all courses have a 100-point scale.)  We calculate this by multiplying the <i>percentage of points earned</i> on each graded artifact by its relative weight, then summing the results.  For example, suppose a student received these scores:</p>\r\n\r\n<ol>\r\n  <li>14</li>\r\n  <li>13</li>\r\n  <li>15</li>\r\n  <li>12</li>\r\n  <li>10</li>\r\n  <li>40</li>\r\n  <li>45</li>\r\n</ol>\r\n\r\n<p>The calculations would proceed as follows:</p>\r\n\r\n<ol>\r\n  <li>(14 / 15) * 12 = 11.2</li>\r\n  <li>(13 / 15) * 12 = 10.4</li>\r\n  <li>(15 / 15) * 12 = 12.0</li>\r\n  <li>(12 / 15) * 12 = 9.6</li>\r\n  <li>(10 / 15) * 12 = 8.0</li>\r\n  <li>(40 / 50) * 15 = 12.0</li>\r\n  <li>(45 / 50) * 25 = 22.5</li>\r\n</ol>\r\n\r\n<p>Summing these together would yield a total of 11.2 + 10.4 + 12.0 + 9.6 + 8.0 + 12.0 + 22.5 = 85.7.  So this student's <i>total score</i> is 85.7 out of a possible 100.</p>\r\n\r\n<p>Scores that include extra credit (i.e., a raw score higher than the number of points possible on a graded artifact) do not need to be treated differently; they should be plugged into the formula the same way as any other.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Determining final course grades</p>\r\n\r\n<p>The final course grade for a student is determined by comparing the <i>total score</i> earned by that student to the cutpoints for an A, B, C, or D.</p>\r\n\r\n<ul>\r\n  <li>If a student's total score is greater than or equal to the A cutpoint, the student's final course grade is A</li>\r\n  <li>Otherwise, if a student's total score is greater than or equal to the B cutpoint, the student's final course grade is B</li>\r\n  <li>Otherwise, if a student's total score is greater than or equal to the C cutpoint, the student's final course grade is C</li>\r\n  <li>Otherwise, if a student's total score is greater than or equal to the D cutpoint, the student's final course grade is D</li>\r\n  <li>Otherwise, the student's final course grade is F</li>\r\n</ul>\r\n\r\n<p>Note that students whose grade option is P (Pass/NotPass) are handled a bit differently.  In their case, determine what their letter grade would have been (as described above) and then assign them one of these two grades:</p>\r\n\r\n<ul>\r\n  <li>If the student's letter grade would have been A, B, or C, the student's final course grade is P (i.e., passing)</li>\r\n  <li>If the student's letter grade would have been D or F, the student's final course grade is NP (i.e., not passing)</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The output</p>\r\n\r\n<p>While reading the input, there are specified points at which output will be generated and printed to the standard output (i.e., <b>std::cout</b>).  These are specified, along with the format of that output, below.</p>\r\n\r\n<p class=\"subtitle\">Student roster</p>\r\n\r\n<p>After reading the raw scores on all graded artifacts, total scores are printed for all students.  The format for this output is as follows:</p>\r\n\r\n<ul>\r\n  <li>The words <b>TOTAL SCORES</b>, alone on a line</li>\r\n  <li>For each student enrolled in the course, the student ID, followed by a space, followed by the student's name, followed by a space, followed by the student's total score</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n\r\n<blockquote><pre>\r\nTOTAL SCORES\r\n123 Alex Thornton 79.1\r\n234 Boo Thornton 100\r\n345 Jane Student 92\r\n456 Joe Student 72.4\r\n567 Too-Many Courses 30.8\r\n</pre></blockquote>\r\n\r\n<p>It is not necessary to format the total score to a particular number of decimal places, though you should not truncate it or round it to an integer.  Whatever way the C++ <b>iostream</b> library formats a <b>double</b> value by default is fine here.</p>\r\n\r\n<p class=\"subtitle\">Course grades</p>\r\n\r\n<p>After reading <i>each</i> cutpoint set, final course grades for that cutpoint set are printed.  For the purposes of this output, cutpoint sets are numbered consecutively starting from 1.  The format of this output is as follows:</p>\r\n\r\n<ul>\r\n  <li>The words <b>CUTPOINT SET <i>n</i></b>, alone on a line, where <i>n</i> is replaced by the cutpoint set number (1 for the first cutpoint set, 2 for the second, and so on)</li>\r\n  <li>For each student enrolled in the course, the student ID, followed by a space, followed by the student's name, followed by a space, followed by the student's grade</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n\r\n<blockquote><pre>\r\nCUTPOINT SET 1\r\n123 Alex Thornton C\r\n234 Boo Thornton A\r\n345 Jane Student A\r\n456 Joe Student P\r\n567 Too-Many Courses F\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Output timing</p>\r\n\r\n<p>Do not store all of the output in memory and print it to the standard output only at the end of the program.  Instead, you will be required to write output to the standard output at the points in time specified above.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A complete example of program execution</p>\r\n\r\n<p>The following is a complete example of program execution, demonstrating how input and output are interleaved.  Input is shown in a regular font weight; output is shown in <b>bold</b>.</p>\r\n\r\n<blockquote><pre>\r\n7\r\n15 15 15 15 15 50 50\r\n12 12 12 12 12 15 25\r\n5\r\n123 G Alex Thornton\r\n234 G Boo Thornton\r\n345 G Jane Student\r\n456 P Joe Student\r\n567 G Too-Many Courses\r\n5\r\n345 14 14 14 14 14 45 45\r\n123 13 10 8 14 12 50 37\r\n456 12 9 15 13 11 38 26\r\n234 15 15 15 15 15 50 50\r\n567 8 4 0 10 0 24 12\r\n<b>TOTAL SCORES\r\n123 Alex Thornton 79.1\r\n234 Boo Thornton 100\r\n345 Jane Student 92\r\n456 Joe Student 72.4\r\n567 Too-Many Courses 30.8</b>\r\n3\r\n90.0 80.0 70.0 60.0\r\n<b>CUTPOINT SET 1\r\n123 Alex Thornton C\r\n234 Boo Thornton A\r\n345 Jane Student A\r\n456 Joe Student P\r\n567 Too-Many Courses F</b>\r\n85.0 75.0 65.0 55.0\r\n<b>CUTPOINT SET 2\r\n123 Alex Thornton B\r\n234 Boo Thornton A\r\n345 Jane Student A\r\n456 Joe Student P\r\n567 Too-Many Courses F</b>\r\n80.0 70.0 60.0 50.0\r\n<b>CUTPOINT SET 3\r\n123 Alex Thornton B\r\n234 Boo Thornton A\r\n345 Jane Student A\r\n456 Joe Student P\r\n567 Too-Many Courses F</b>\r\n</pre></blockquote>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Some rules and limitations</p>\r\n\r\n<p>Because we're beginning our exploration of C++ by building our knowledge from some of its lowest-level abstractions, there are some fairly strict limitations on what features of the language you'll be permitted to use in this project.  Those limitations will lift quickly as we move forward this quarter, so don't be concerned that you'll always be put into a tiny box, but this project has some very particular goals.  If you have prior experience with C++, you may find that there are other techniques that you'd prefer to use &mdash; and it's quite possible that you're right that they'd be better techniques, in general &mdash; but you'll need to stick with what's allowed this time, because there are particular learning objectives here.</p>\r\n\r\n<p>Here are the rules and limitations governing your work on this project.</p>\r\n\r\n<ul>\r\n  <li>Other than <b>iostream</b>, <b>sstream</b>, and <b>string</b>, you are not permitted to include any C or C++ standard library headers in your program.  Aside from console input/output (using, for example, <b>std::cin</b>, <b>std::cout</b>, and <b>std::endl</b>), the <b>std::string</b> class, and stringstreams (<b>std::istringstream</b> and <b>std::ostringstream</b>), the standard library is off-limits (e.g., you cannot use collections like <b>std::vector</b>).</li>\r\n  <li>Use arrays to store and manipulate data within your program.  Note, too, that you won't know the correct sizes for these arrays at compile time (because the sizes are specified in the program's input), so you will find that you need to use dynamically-allocated arrays extensively.</li>\r\n  <li>You are permitted to use <b>struct</b>s (in the C sense, i.e., implicitly public member variables with <i>no member functions, constructors, destructors, etc.</i>), but <b>class</b>es are off-limits until the next project, as our exploration of object-oriented techniques still lies ahead of us.</li>\r\n  <li>Even though this is what you might call a \"batch mode\" program (i.e., it reads input, processes it, generates output, and then ends), you are still required to explicitly delete any memory that you dynamically allocate using <b>new</b>.  This is a habit that is vital to build in C++, so this will always be a requirement in this course.  (While the symptoms of leaking memory are often invisible, we'll use tools in this course to make them visible; more about that below.)</li>\r\n</ul>\r\n\r\n<p>From a design perspective, you are again required to break large functions into smaller ones, and to arrange your functions into multiple source files, where each source file encompasses a set of strongly related functions.  Any source file that needs to \"export\" things (e.g., functions) to other source files should also include its own separate header file.</p>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Redirection (or, How to avoid re-typing the input every time you run your program)</p>\r\n\r\n<p>When you use the <b>run</b> script to execute your program &mdash; and, generally, by default in Linux &mdash; the standard input and standard output are connected to the shell window where you executed the program.  The program's input is typed into that shell window; the program's output is written to that shell window.</p>\r\n\r\n<p>However, you can also use a technique called <i>redirection</i> to connect the standard input and/or standard output to other devices &mdash; most importantly for us, to files! &mdash; instead of the default.  For example, the contents of an existing file may be redirected into the standard input, so that your program will read its input from the file instead of from the shell window; similarly, the standard output can be redirected into a file, meaning that all of the output printed to <b>std::cout</b> will be saved into that file, rather than being displayed in the shell window.</p>\r\n\r\n<p>The typical mechanism for redirection is to use the &lt; and &gt; operators on the command line, like this:</p>\r\n\r\n<blockquote><pre>\r\nSomeProgramYouWantToRun &lt;FileContainingStdInput.txt &gt;FileToStoreStdOutput.txt\r\n</pre></blockquote>\r\n\r\n<p>You don't have to use both; you can use only &lt; (in which case the standard input is read from a file, but the standard output is written to the shell window) or only &gt; (in which case the standard input is read from the shell window, but the standard output is written to a file).  It's up to you.</p>\r\n\r\n<p class=\"subtitle\">Using redirection to avoid re-typing test input</p>\r\n\r\n<p>This can be a handy technique to use in your testing, to avoid the problem of having to re-type the program's input every time you run it.  If you used the <b>project2</b> project template &mdash; and you should have! &mdash; when creating your project, you should see a directory called <b>inputs</b> in your project directory; in the <b>inputs</b> directory, you should see a file <b>sample.txt</b>, which contains the sample input from this project write-up.  If you want to run your program using the same input, issue this command (from your project directory):</p>\r\n\r\n<blockquote><pre>\r\n./run &lt;inputs/sample.txt\r\n</pre></blockquote>\r\n\r\n<p>The effect is that the contents of the <b>sample.txt</b> file in the <b>inputs</b> directory will be redirected into your program's standard input, in lieu of you having to type it.  You might also want to write other test files for yourself in that same <b>inputs</b> directory, then use a similar technique to redirect them into the standard input of your program.  You can avoid a lot of re-typing this way!</p>\r\n\r\n<p class=\"subtitle\">A note about output timing</p>\r\n\r\n<p>Note that the redirection technique will not give you an accurate view of whether your program is printing the right output at the right times, as specified in the requirements above, but it will tell you whether your program is generating the correct answer.  You can enter the input manually sometimes when you want to test the timing of the output.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using Valgrind to check your memory usage</p>\r\n\r\n<p>Valgrind is a program that you can use to detect a variety of otherwise difficult-to-find problems in C and C++ programs.  It consists of a set of <i>tools</i>, each of which detects a certain kind of problem.  For our work here, we'll be interested in a tool in Valgrind called <b>Memcheck</b>, which watches a program while it runs, tracking the dynamic allocations and deallocations it does.  When the program finishes, it reports a summary of memory leaks and other memory-related issues that it found.  So, for example, if the program allocated an object dynamically using <b>new</b>, but never deallocated the object, the memory allocated to that object would be reported as a leak.</p>\r\n\r\n<p>As an example of what Memcheck can do, consider the following short C++ program that contains a memory leak &mdash; the array allocated dynamically using <b>new</b> is never deallocated using <b>delete[ ]</b>.  (Along the left-hand column, line numbers are shown; they are not part of the program.)</p>\r\n\r\n<blockquote><pre>\r\n1     #include &lt;iostream&gt;\r\n2\r\n3\r\n4     int main()\r\n5     {\r\n6         std::cout << \"Hello Boo\" << std::endl;\r\n7\r\n8         int* a = new int[10];\r\n9\r\n10        for (int i = 0; i < 10; i++)\r\n11        {\r\n12            a[i] = i;\r\n13        }\r\n14\r\n15        std::cout << \"Goodbye!\" << std::endl;\r\n16\r\n17        return 0;\r\n18    }\r\n</pre></blockquote>\r\n\r\n<p>When I compiled and ran that program using the Memcheck tool, I received the following output.</p>\r\n\r\n<blockquote><pre>\r\n==24278== Memcheck, a memory error detector\r\n==24278== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\r\n==24278== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info\r\n==24278== Command: /home/ics45c/projects/memchecktest/out/bin/a.out.app\r\n==24278==\r\nHello Boo!\r\nGoodbye!\r\n==24278==\r\n==24278== HEAP SUMMARY:\r\n==24278==     in use at exit: 40 bytes in 1 blocks\r\n==24278==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated\r\n==24278==\r\n==24278== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1\r\n==24278==    at 0x402A17C: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)\r\n==24278==    at 0x40BA709: operator new(unsigned int) (in /usr/lib/i386-linux-gnu/libc++.so.1.0)\r\n==24278==    by 0x8048FE0: main (main.cpp:8)\r\n==24278==\r\n==24278== LEAK SUMMARY:\r\n==24278==    definitely lost: 40 bytes in 1 blocks\r\n==24278==    indirectly lost: 0 bytes in 0 blocks\r\n==24278==      possibly lost: 0 bytes in 0 blocks\r\n==24278==    still reachable: 0 bytes in 0 blocks\r\n==24278==         suppressed: 0 bytes in 0 blocks\r\n==24278==\r\n==24278== For counts of detected and suppressed errors, rerun with: -v\r\n==24278== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n</pre></blockquote>\r\n\r\n<p>The lines beginning in <b>==24278==</b> emanate from Memcheck.  (The 24278 changes from one run to the next; it's the <i>process identifier</i> or <i>pid</i>, a number associated with the program to differentiate it from all of the others currently running on the system.)  Notice that we see a preamble from Memcheck before any of the program's output.  Then we see all of the program's output.  Finally, we see a report from Memcheck detailing any problems that it found.  Sometimes, we'll see messages appear along the way while the program runs.  In general, every message we see is an issue with our usage of memory (e.g., failing to deallocate memory, using pointers to unallocated memory, using values of variables that have not been initialized, and so on).</p>\r\n\r\n<p>In this case, the report tells us of a block of 40 bytes that had been allocated but never deallocated.  In Memcheck's estimation, they are <i>definitely lost</i>, which means that these are bytes that were definitely noted as having been allocated and definitely noted as never having been deallocated.  What's more, we were given the line of code on which the allocation took place, which was <b>main.cpp:8</b> (line 8 of main.cpp) in the function <b>main</b>:</p>\r\n\r\n<blockquote><pre>\r\n==24278==    by 0x8048FE0: main (main.cpp:8)\r\n</pre></blockquote>\r\n\r\n<p>(Note that we're shown the entire stack trace at the point where the allocation happened, but your best bet is to find the topmost line of the stack trace that describes a location in your code; anything above it is likely library code you're calling into, in this case the code that dynamically allocates an array when we said <b>new int[10]</b>.)</p>\r\n\r\n<p>Looking back at our program, we see that line 8 is where the array was allocated dynamically using <b>new</b>.  That array is the one that was never deallocated.  Why was the block 40 bytes?  Because each <b>int</b> value was 4 bytes (the size of an <b>int</b> on our version of Linux) and there were 10 of them.  4 * 10 = 40.</p>\r\n\r\n<p>Updating the program to include this line, just after the <b>for</b> loop, so that the dynamically-allocated array will be deleted:</p>\r\n\r\n<blockquote><pre>\r\ndelete[] a;\r\n</pre></blockquote>\r\n\r\n<p>causes Memcheck to generate the following report instead:</p>\r\n\r\n<blockquote><pre>\r\n==24321== HEAP SUMMARY:\r\n==24321==     in use at exit: 0 bytes in 0 blocks\r\n==24321==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated\r\n==24321==\r\n==24321== All heap blocks were freed -- no leaks are possible\r\n==24321==\r\n==24321== For counts of detected and suppressed errors, rerun with: -v\r\n==24321== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n</pre></blockquote>\r\n\r\n<p>This is Memcheck's version of a \"clean bill of health.\"  There are clearly no memory leaks in the program, as far as Memcheck is concerned, and no other messages were generated other than the preamble and the clean bill of health at the end.  When we grade your project, we'll use Memcheck and we'll expect a clean bill of health, so if you're getting any messages from it, you'll need to investigate the underlying issues and fix them.  (If you're not sure what they mean, we're happy to help.)</p>\r\n\r\n<p>Try the same program yourself with Memcheck.  Experiment with adding and removing the use of <b>delete[ ]</b>, and try changing it to <b>delete</b> (without the brackets) instead, and see how Memcheck's report changes.  This will help you start to gain an understanding of what Memcheck can do for you as you work on your project.</p>\r\n\r\n<p class=\"subtitle\">A deeper look at Memcheck</p>\r\n\r\n<p>A deeper look at what kinds of problems Memcheck can find and how it will report on its findings can be found in Memcheck's user manual at this link.</p>\r\n\r\n<ul>\r\n  <li><a href=\"http://valgrind.org/docs/manual/mc-manual.html\">Memcheck user maunal</a></li>\r\n</ul>\r\n\r\n<p>Don't feel the need to internalize every detail, but do scan through it to get a feel for what kinds of things will be reported to you.</p>\r\n\r\n<p class=\"subtitle\">Running your program using Memcheck</p>\r\n\r\n<p>The usual <b>run</b> script, which you use to run your program after building it, has an option that lets you run the program using Memcheck.  If you run your program with this command:</p>\r\n\r\n<blockquote><pre>\r\n./run --memcheck\r\n</pre></blockquote>\r\n\r\n<p>then Memcheck will observe your program as it runs and report its finding.  You'd type in the input as usual and would see the output appear as usual, but Memcheck's preamble will be displayed when your program starts, and its final report will be displayed when your program ends.</p>\r\n\r\n<p>Note, too, that you can combine this with redirection:</p>\r\n\r\n<blockquote><pre>\r\n./run --memcheck &lt;inputs/sample.txt\r\n</pre></blockquote>\r\n\r\n<p>if you want to run the program with Memcheck but avoid typing the input by hand.</p>\r\n\r\n<p>We will be running your program using Memcheck as part of the grading process, and expect it to generate a clean report (i.e., no memory leaks) to receive full credit, so you'd be well-served to use Memcheck periodically as you work, and to fix issues as they arise.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project2.tar.gz</b> file, submit that file (and only that file!) to Checkmate.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Some tweaks to requirements and some additional clarifications by Alex Thornton, Fall 2014.</li>\r\n  <li>A few clarifications added by Alex Thornton, Winter 2014.</li>\r\n  <li>Requirements tweaked and reorganized for ICS 45C VM by Alex Thornton, Fall 2013.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2012.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 2858.0}