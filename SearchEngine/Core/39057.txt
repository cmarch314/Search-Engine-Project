{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Circulator from container C Definition The adaptor Circulator from container C provides a circulator for an STL container C of equal category as the iterator provided by the container The iterator must be at least of the forward iterator category The corresponding non mutable circulator is called Const circulator from container C The container type C is supposed to conform to the STL requirements for container i e to have a begin and an end iterator as well as the local types reference const reference value type size type and difference type include CGAL circulator h Types All types required for circulators are provided Creation Circulator from container C c a circulator c on an empty sequence Circulator from container C c C container a circulator c initialized to refer to the first element in container i e container begin The circulator c refers to an empty sequence if the container is empty Circulator from container C c C container C iterator i a circulator c initialized to refer to the element i in container Precondition i is dereferenceable and refers to container Operations The adaptor conforms to the requirements of the corresponding circulator category An additional member function current iterator returns the current iterator pointing to the same position as the circulator does See Also Container from circulator Circulator from iterator Circulator Example The following program composes two adaptors from a container to a circulator and back to an iterator It applies an STL sort algorithm on a STL vector with three elements The resulting vector will be 2 5 9 as it is checked by the assertions The program is part of the CGAL distribution file examples Circulator circulator prog2 C include CGAL basic h include cassert include vector include algorithm include CGAL circulator h typedef CGAL Circulator from container std vector int Circulator typedef CGAL Container from circulator Circulator Container typedef Container iterator Iterator int main std vector int v v push back 5 v push back 2 v push back 9 Circulator c v Container container c std sort container begin container end Iterator i container begin assert i 2 i assert i 5 i assert i 9 i assert i container end return Next Circulator from iterator I Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Circulator_ref/Class_Circulator_from_container.html", "title": "circulator_from_container&lt;c&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Circulator_ref/Circulator_from_container.tex' -->\n<html> <head>  \n<title>Circulator_from_container&lt;C&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1611\"></A>\n\n<A NAME=\"Cross_link_anchor_1612\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1510\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Circulator_from_container<C>\"></A>\n<h2><I>CGAL::Circulator_from_container&lt;C&gt;</I></h2>\n\n\n<A NAME=\"pageCircFromContainerRef\"></A>\n<P>\n\n<A NAME=\"Cross_link_anchor_1613\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1614\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1615\"></A>\n\n\n<A NAME=\"Cross_link_anchor_1616\"></A>\n\n\n<A NAME=\"Index_anchor_1511\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe adaptor <I><A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A>&lt;C&gt;</I> provides a circulator for an STL container <MATH><I>C</I></MATH> of equal category as the iterator provided by the container. \nThe iterator must be at least of the forward iterator\ncategory. The corresponding non-mutable circulator is called\n<I><A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1615\">Const_circulator_from_container&lt;C&gt;</A></I>.\n<P>\n\nThe container type <I>C</I> is supposed to conform to the STL \nrequirements for container (i.e.&nbsp;to have a <I>begin()</I> and an\n<I>end()</I> iterator as well as the local types\n<I>reference</I>, <I>const_reference</I>, <I>value_type</I>,\n<I>size_type</I>, and <I>difference_type</I>).\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator.h\">CGAL/circulator.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\nAll types required for circulators are provided.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A>&lt;C&gt; c;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a circulator <I>c</I> on an empty sequence.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A>&lt;C&gt; c ( C* container);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a circulator <I>c</I> initialized to refer to the first element in\n  <I>container</I>, i.e.&nbsp;<I>container.begin()</I>.\n  The circulator <I>c</I> refers to an empty sequence if the\n  <I>container</I> is empty.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A>&lt;C&gt; c ( C* container,  C::iterator i);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a circulator <I>c</I> initialized to refer to the element <I>*i</I> in\n  <I>container</I>.<BR>\n\n<EM>Precondition: </EM><I>*i</I> is dereferenceable and refers\n  to <I>container</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe adaptor conforms to the requirements of the corresponding\ncirculator category. An additional member function\n<I>current_iterator()</I> returns the current iterator pointing to\nthe same position as the circulator does.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A></I>,\n<I><A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A></I>,\n<I><A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A></I>.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program composes two adaptors - from a container to a\ncirculator and back to an iterator. It applies an STL sort algorithm\non a STL vector with three elements. The resulting vector will be\n<TT>[2 5 9]</TT> as it is checked by the assertions. The program is\npart of the C<SMALL>GAL</SMALL> distribution.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>/circulator_prog2.C\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;CGAL/circulator.h&gt;\n\ntypedef <A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1611\">CGAL::Circulator_from_container</A>&lt; std::vector&lt;int&gt; &gt;  <A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>;\ntypedef <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1659\">CGAL::Container_from_circulator</A>&lt;<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>&gt;          Container;\ntypedef Container::iterator                                  Iterator;\n\nint main() {\n    std::vector&lt;int&gt; v;\n    v.push_back(5);\n    v.push_back(2);\n    v.push_back(9);\n    <A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A> c( &amp;v);\n    Container  container( c);\n    std::sort( container.begin(), container.end());\n    Iterator i = container.begin();\n    assert( *i == 2);\n    i++;    assert( *i == 5);\n    i++;    assert( *i == 9);\n    i++;    assert(  i == container.end());\n    return 0;\n}\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Circulator_from_iterator.html\"><I>Circulator_from_iterator&lt;I&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39057.0}