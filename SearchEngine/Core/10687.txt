{"text": " This assignment is due at the start of your discussion section on Friday January 1 a Do everything on the course syllabus under the heading What to do this week to get started in ICS H22 This includes your questionnaire and photo b If you aren t already familiar with using Windows spend some time in the lab trying things out c Be sure you know how to read your mail on your UCInet account If you prefer to read your mail on a different account make sure you have redirected your UCInet ID s mail to your preferred account you can do this at http phwww cwis uci edu cgi bin phupdate We won t mention this again Also be sure you know how to use a web browser to find for example the home page for this class d The course outline specifies the readings in the Goodrich and Tamassia text that apply to each class meeting you should consider these readings part of every assignment even though we won t usually mention them explicitly In particular read the first two chapters for a concise re view of Java e Read the Writing Professional Programs handout attached to the syllabus f The officially supported Java environment for ICS H22 is a text editor such as TextPad the command line compiler javac and the command line virtual machine java all of which are available on the machines in the ICS labs You should be come familiar with running programs in this environment The Development environment section of Alex Thornton s ICS 22 Lab Manual www ics uci edu thornton ics22 LabManual gives details about acquiring a similar environment for your own machine If you would like to use DrJava drjava sourceforge net or BlueJ www bluej org which are environments that make it easy to test your classes without writing a separate test class you may but we can t promise to provide support for learning that software or installing it on your own machine g Even professional programmers often need to check how a particular Java class works there s too much to the language and libraries to memorize completely Locate Sun s Java 2 documentation at java sun com j2se 1 4 1 docs api index html and bookmark it so you can refer back to it as needed h only for students who took ICS H21 Using a text editor and the command line Java interface write a small program that contains a Person class with fields for a name and an age appropriate getter and setter methods and two simple boolean methods canVote which returns true if the person s age is at least 18 and canBePresident which returns true if the age is at least 35 Also write a test class with a main method that uses BufferedReaders for console I O and that has an interaction like this with the user where the user s input is shown in bold face Hello What s your name Peter Programmer How old are you Peter Programmer 27 Peter Programmer you are eligible to vote Peter Programmer you are not eligible to be President Good bye Of course the program should work correctly for any reasonable age Feel free to embellish it further perhaps by identifying unreasonable ages or by repeating the exchange with multiple users i only for students who did not take ICS H21 Object oriented programming is an excellent approach to designing software but it is not the only good approach or even the best one in every situation One part of regular ICS 22 is a unit on functional programming and the Scheme programming language We did this material at the beginning of ICS H21 so for those of you who didn t take ICS H21 we ll do the shorter ICS 22 version of this material early in ICS H22 to bring everyone s backgrounds closer together i 1 Locate and launch the DrScheme software It s on the lab machines it s also available for nearly any platform free of charge from www drscheme org Each DrScheme window has two panes The bottom half is the interactions or transcript window where you can type Scheme expressions and see the interpreter evaluate them To type programs you wish to save you will use the top pane the definitions window and click the green Execute arrow to evaluate the code this makes the code available for use in the interactions window below You can print the contents of each window Printing the interactions window gives a record of your activity do that as you complete each part below so you can turn it in The DrScheme system actually includes many different versions of Scheme The one we ll be using is called Pretty Big You can see whether it s the one installed by looking for the word Language in the lower pane If it doesn t say Pretty Big you can fix it this way From the Language menu select Choose Language in the resulting window click on PLT and then choose Pretty Big Click OK and then click on the green Execute arrow at the top of the DrScheme window and you re set i 2 Experiment with DrScheme to get familiar with it Try evaluating some expressions like 3 4 5 and expt 2 5 and gcd 15 23 and pi 2 In our version of Scheme the value of pi and the computation of greatest common divisors are predefined built in Type in some definitions of symbols in the interactions window like define number of students 21 and define number of staff 2 and then try number of students number of staff You may get a yellow warning message This is telling you that you ve typed in the interactions window instead of the definitions window so what you ve typed won t be saved That s fine for the experimentation we re doing now but as you start making your own definitions you ll want to type them in the top window save them periodically and have Scheme evaluate them by clicking Execute i 3 The factorial function written with an exclamation point so n factorial would be n is used in calculating how many ways there are to arrange things The value of n is n n 1 n 2 1 so 5 5 4 3 2 1 12 Type the following function definition into the definitions window Actually do the typing so you can get used to the way it works don t just copy and paste We ll go over the details of this code in class some time soon we don t expect it to be particularly clear now Compute n n factorial define fact lambda n cond n 1 is 1 by definition else n fact n 1 Notice how the environment indents and highlights blocks of code so you don t get the parentheses confused Don t forget to click Execute Now try evaluating expressions like fact 5 fact 5 and fact 5 Next evaluate fact fact 5 What will happen when you evaluate fact fact 5 Before you try it save your work 5 is awfully big What is the value produced by fact 5 expt 7 2 This result is called exact representation it s not what we expect to see on a computer but it s useful in further calculations because nothing is lost by rounding off to a decimal representation Enter this definition you can copy and paste it define decimal format lambda num string number number string exact inexact num Then evaluate decimal format fact 5 expt 7 2 i 4 extra credit What s the longest number you can generate in DrScheme without running out of memory and taking no more than 6 seconds of elapsed time Generating the big numbers is one part of the question counting the digits is another Try to count digits using string length number string your big number How do you get your big number into that expression without copying and pasting it or typing the entire number Try to count the digits using some tool s other than Scheme or any programming language Using your wristwatch or slow measured counting time how long it takes for Scheme to calculate and display your big number Now time how long it takes to calculate the big number and then its length by nesting the expression to generate the big number inside the length calculating expression above You d expect the second combined task to take longer but on some Scheme systems it doesn t Does it on your system Why might the generate and calculate length task take less time than generating the number without calculating its length What to turn in For part h turn in a printed copy of your Java code along with a printed copy of one or more interactive sessions showing thoroughly how your program works For part i turn in a printed copy of the interactions window showing what you did for each part Don t print out more than two solid pages of digits though Based in part on ICS H22 assignments by David G Kay from Winter 2 and earlier modified by David G Kay Winter 2 1 Modified by David G Kay Winter 2 3 including some logistical information from the ICS 22 Lab Manual by Alex Thornton David G Kay 4 6B Computer Science University of California Irvine Irvine CA 92697 3425 949 824 5 72 Fax 949 824 4 56 Email kay uci edu Friday January 1 2 3 2 15 PM", "_id": "http://www.ics.uci.edu/~kay/courses/h22/hw/hw1.html", "title": "first homework", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML>\n<HEAD>\n<META HTTP-EQUIV=\"GENERATOR\" CONTENT=\"Globetrotter 1.1.1\">\n<META HTTP-EQUIV=\"AUTHOR\" CONTENT=\"David G. Kay\">\n<META HTTP-EQUIV=\"UPDATED\" CONTENT=\"Friday, January 10, 2003 2:15 PM\">\n<TITLE>First Homework</TITLE>\n<META HTTP-EQUIV=\"X-GLOBETROTTERDATA\" CONTENT=\"D7F76097\">\n<META HTTP-EQUIV=KEYWORDS CONTENT=\"CS 2, CS2, assignment, performance measurement\">\n<META HTTP-EQUIV=\"DESCRIPTION\" CONTENT=\"An assignment involving measuring and analyzing the performance of alternative search algorithms for ICS H22, an honors second-quarter course in computer science in Information and Computer Science, UC Irvine.\">\n<META HTTP-EQUIV=\"COPYRIGHT\" CONTENT=\"Copyright &#169; 2000, 2003 by David G. Kay.  All rights reserved.\">\n</HEAD>\n<BODY BGCOLOR=\"#FFFFFF\">\n<A NAME=\"_top\"></A>\n<P>\n<IMG SRC=\"First_Homework_files/Sidebar_123.gif\" WIDTH=575 HEIGHT=77>\n<BR>\n<FONT FACE=\"AGaramond\" SIZE=4> &#160; <A NAME=\"_14_27\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>This assignment is due at the start of your\ndiscussion section on Friday, January 10. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(a)</B>  Do everything on the course syllabus\nunder the heading, &quot;What to do this week to get started in ICS H22.&quot;\n This includes your questionnaire and photo.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(b)</B>  If you aren&#39;t already familiar\nwith using Windows, spend some time in the lab trying things out.  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(c)</B>  Be sure you know how to read your\nmail on your UCInet account.  (If you prefer to read your mail on a different\naccount, make sure you have redirected your UCInet ID&#39;s mail to your\npreferred account; you can do this at </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://phwww.cwis.uci.edu/cgi-bin/phupdate\">http://phwww.cwis.uci.edu/cgi-bin/phupdate</A><A NAME=\"_14_657\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n We won&#39;t mention this again.)  Also be sure you know how to use a web\nbrowser to find, for example, the home page for this class.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(d)</B>  The course outline specifies the\nreadings in the Goodrich and Tamassia text  that apply to each class meeting;\nyou should consider these readings part of every assignment, even though\nwe won&#39;t usually mention them explicitly.  In particular, read the first\ntwo chapters for a concise (re)view of Java.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(e)</B>  Read the &quot;<A HREF=\"http://www.ics.uci.edu/~kay/courses/h22/hw/profpgms.html\">Writing Professional Programs</A>&quot;\nhandout attached to the syllabus.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(f)</B>  The officially supported Java\nenvironment for ICS H22 is a text editor, such as TextPad, the command-line\ncompiler </FONT><FONT FACE=\"Courier New\">javac</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand the command-line virtual machine </FONT><FONT FACE=\"Courier New\">java</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nall of which are available on the machines in the ICS labs.  You should\nbe(come) familiar with running programs in this environment.  The &quot;Development\nenvironment&quot; section of Alex Thornton&#39;s <A HREF=\"http://www.ics.uci.edu/~thornton/ics22/LabManual/\">ICS 22 Lab Manual</A>\n(</FONT><FONT FACE=\"Courier New\">www.ics.uci.edu/~thornton/ics22/LabManual/</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\ngives details about acquiring a similar environment for your own machine.\n If you would like to use <A HREF=\"http://drjava.sourceforge.net\">DrJava</A>\n(</FONT><FONT FACE=\"Courier New\">drjava.sourceforge.net</FONT><FONT FACE=\"AGaramond\" SIZE=4>)\nor <A HREF=\"http://www.bluej.org\">BlueJ</A> (</FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.bluej.org\">www.bluej.org</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>),\nwhich are environments that make it easy to test your classes without writing\na separate test class, you may, but we can&#39;t promise to provide support\nfor learning that software or installing it on your own machine. </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(g)</B>  Even professional programmers\noften need to check how a particular Java class works; there&#39;s too much\nto the language and libraries to memorize completely.  Locate Sun&#39;s\n<A HREF=\"http://java.sun.com/j2se/1.4.1/docs/api/index.html\">Java 2 documentation</A>\nat </FONT><FONT FACE=\"Courier New\">java.sun.com/j2se/1.4.1/docs/api/index.html</FONT><FONT FACE=\"AGaramond\" SIZE=4>\nand bookmark it so you can refer back to it as needed.<A NAME=\"_14_2250\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(h)</B> <I>[only for students who took\nICS H21]<A NAME=\"_14_2298\"></A></I><B> </B>Using a text editor and the command-line\nJava interface, write a small program that contains a Person class with\nfields for a name and an age, appropriate getter and setter methods, and\ntwo simple boolean methods:  </FONT><FONT FACE=\"Courier New\">canVote()<A NAME=\"_14_2530\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich returns true if the person&#39;s age is at least 18, and </FONT><FONT FACE=\"Courier New\">canBePresident()<A NAME=\"_14_2613\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nwhich returns true if the age is at least 35.  Also write a test class with\na main method that uses BufferedReaders for console I/O and that has an\ninteraction like this with the user (where the user&#39;s input is shown\nin bold face):<A NAME=\"_14_2850\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; Hello.  What&#39;s your name?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; <B>Peter Programmer</B></TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; How old are you, Peter Programmer?</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; <B>27</B></TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; Peter Programmer, you are eligible\nto vote.</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; Peter Programmer, you are not\neligible to be President.</TT></FONT></P>\n<P>\n<FONT FACE=\"Courier\" SIZE=4><TT>&#160;&#160; Good-bye.</TT></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Of course the program should work correctly\nfor any reasonable age.  Feel free to embellish it further (perhaps by identifying\nunreasonable ages or by repeating the exchange with multiple users).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i)</B> <I>[only for students who did not\ntake ICS H21]</I><B> </B>Object-oriented programming is an excellent approach\nto designing software, but it is not the only good approach or even the\nbest one in every situation.  One part of regular ICS 22 is a unit on functional\nprogramming and the Scheme programming language.  We did this material at\nthe beginning of ICS H21, so for those of you who didn&#39;t take ICS H21\nwe&#39;ll do the shorter ICS 22 version of this material early in ICS H22\nto bring everyone&#39;s backgrounds closer together.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i.1)  </B>Locate and launch the DrScheme\nsoftware.  It&#39;s on the lab machines; it&#39;s also available for nearly\nany platform, free of charge, from </FONT><FONT FACE=\"Courier New\"><A HREF=\"http://www.drscheme.org\">www.drscheme.org</A></FONT><FONT FACE=\"AGaramond\" SIZE=4>.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Each DrScheme window has two panes:  The bottom\nhalf is the interactions (or transcript) window, where you can type Scheme\nexpressions and see the interpreter evaluate them.  To type programs you\nwish to save, you will use the top pane (the definitions window) and click\nthe green &quot;Execute&quot; arrow to evaluate the code (this makes the\ncode available for use in the interactions window below).  You can print\nthe contents of each window.  Printing the interactions window gives a record\nof your activity; do that as you complete each part below so you can turn\nit in.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>The DrScheme system actually includes many\ndifferent versions of Scheme.  The one we&#39;ll be using is called &quot;Pretty\nBig.&quot;  You can see whether it&#39;s the one installed by looking for\nthe word &quot;Language&quot; in the lower pane.  If it doesn&#39;t say\n&quot;Pretty Big,&quot; you can fix it this way:  From the Language menu,\nselect &quot;Choose Language&quot;; in the resulting window, click on &quot;PLT&quot;\nand then choose &quot;Pretty Big.&quot;  Click &quot;OK&quot; and then click\non the green Execute arrow at the top of the DrScheme window, and you&#39;re\nset.<A NAME=\"_14_5018\"></A></FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i.2)</B>  Experiment with DrScheme to\nget familiar with it</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Try evaluating some expressions, like </FONT><FONT FACE=\"Courier New\">(*\n3 4 5)<A NAME=\"_14_5129\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4> and </FONT><FONT FACE=\"Courier New\">(expt&#160;2\n5)<A NAME=\"_14_5150\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4> and </FONT><FONT FACE=\"Courier New\">(gcd\n15 230)<A NAME=\"_14_5173\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4> and\n</FONT><FONT FACE=\"Courier\"><TT>(/&#160;</TT></FONT><FONT FACE=\"Courier New\">pi\n2)<A NAME=\"_14_5194\"></A></FONT><FONT FACE=\"AGaramond\" SIZE=4>.  In our\nversion of Scheme, the value of pi and the computation of greatest common\ndivisors are predefined (built in).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Type in some definitions of symbols in the\ninteractions window, like </FONT><FONT FACE=\"Courier New\">(define number-of-students\n21)</FONT><FONT FACE=\"AGaramond\" SIZE=4> and </FONT><FONT FACE=\"Courier New\">(define\nnumber-of-staff 2)</FONT><FONT FACE=\"AGaramond\" SIZE=4> and then try </FONT><FONT FACE=\"Courier New\">(+\nnumber-of-students number-of-staff)</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n (You may get a yellow warning message.  This is telling you that you&#39;ve\ntyped in the interactions window instead of the definitions window, so what\nyou&#39;ve typed won&#39;t be saved.  That&#39;s fine for the experimentation\nwe&#39;re doing now, but as you start making your own definitions, you&#39;ll\nwant to type them in the top window, save them periodically, and have Scheme\nevaluate them by clicking Execute.)</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i.3)</B>  The factorial function (written\nwith an exclamation point, so &quot;<I>n</I> factorial&quot; would be <I>n</I>!)\nis used in calculating how many ways there are to arrange things.  The value\nof <I>n</I>! is <I>n</I> * (<I>n</I>-1) * (<I>n</I>-2) * ... * 1, so 5!\n= 5 * 4 * 3 * 2 * 1 = 120.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Type the following function definition into\nthe definitions window.  Actually do the typing so you can get used to the\nway it works; don&#39;t just copy and paste.  (We&#39;ll go over the details\nof this code in class some time soon; we don&#39;t expect it to be particularly\nclear now.)<A NAME=\"_14_6449\"></A></FONT></P>\n<P>\n<FONT FACE=\"Courier New\">; Compute n! (n factorial). </FONT></P>\n<P>\n<FONT FACE=\"Courier New\">(define fact                                 </FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160; (lambda (n)                      \n       </FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160;  &#160; (cond                    \n             </FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160;  &#160;  &#160; ((&lt;= n 0)  1 )\n              ; 0! is 1 by definition   </FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;&#160;  &#160;  &#160; (else (* n (fact (-\nn 1))))))) </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Notice how the environment indents and highlights\nblocks of code so you don&#39;t get the parentheses confused.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Don&#39;t forget to click Execute.  Now try\nevaluating expressions like </FONT><FONT FACE=\"Courier New\">(fact 5)</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\n</FONT><FONT FACE=\"Courier New\">(fact 50)</FONT><FONT FACE=\"AGaramond\" SIZE=4>,\nand </FONT><FONT FACE=\"Courier New\">(fact 500)</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n Next, evaluate</FONT><FONT> </FONT><FONT FACE=\"Courier New\">(fact (fact\n5))</FONT><FONT FACE=\"AGaramond\" SIZE=4>.  What will happen when you evaluate</FONT><FONT>\n</FONT><FONT FACE=\"Courier New\">(fact (fact 50))</FONT><FONT FACE=\"AGaramond\" SIZE=4>?\n Before you try it, save your work; (50!)! is awfully big.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>What is the value produced by </FONT><FONT FACE=\"Courier\"><TT>(/\n(fact 5) (expt 7 2))</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>?  This result\nis called &quot;exact representation&quot;--it&#39;s not what we expect\nto see on a computer, but it&#39;s useful in further calculations because\nnothing is lost by rounding off to a decimal representation.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Enter this definition (you can copy and paste\nit):</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>&#160;</FONT><FONT FACE=\"Courier New\">(define\ndecimal-format</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;  (lambda (num)</FONT></P>\n<P>\n<FONT FACE=\"Courier New\">&#160;     (string-&gt;number (number-&gt;string\n(exact-&gt;inexact num)))))</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Then evaluate </FONT><FONT FACE=\"Courier\"><TT>(decimal-format\n(/ (fact 5) (expt 7 2)))</TT></FONT><FONT FACE=\"AGaramond\" SIZE=4>.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>(i.4)</B>  (extra credit)  What&#39;s the\nlongest number you can generate in DrScheme, without running out of memory\nand taking no more than 60 seconds of elapsed time?  Generating the big\nnumbers is one part of the question; counting the digits is another.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Try to count digits using </FONT><FONT FACE=\"Courier New\">(string-length\n(number-&gt;string </FONT><FONT FACE=\"AGaramond\" SIZE=4><I><U>your-big-number</U></I></FONT><FONT FACE=\"Courier New\">))</FONT><FONT FACE=\"AGaramond\" SIZE=4>.\n How do you get <I><U>your-big-number</U></I> into that expression without\ncopying and pasting it (or typing the entire number)?</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Try to count the digits using some tool(s)\nother than Scheme (or any programming language).</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>Using your wristwatch (or slow, measured counting),\ntime how long it takes for Scheme to calculate and display your big number.\n Now, time how long it takes to calculate the big number <I>and then</I>\nits length (by nesting the expression to generate the big number inside\nthe length-calculating expression above)<B>.</B>  You&#39;d expect the second,\ncombined task to take longer, but on some Scheme systems it doesn&#39;t.\n Does it on your system?  Why might the generate-and-calculate-length task\ntake <I>less</I> time than generating the number without calculating its\nlength?<A NAME=\"_14_8697\"></A></FONT></P>\n<BR>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4><B>What to turn in:</B>  </FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>-- For part <B>(h)</B>, turn in a printed\ncopy of your Java code along with a printed copy of one or more interactive\nsessions showing thoroughly how your program works.</FONT></P>\n<P>\n<FONT FACE=\"AGaramond\" SIZE=4>-- For part <B>(i)</B>, turn in a printed\ncopy of the interactions window showing what you did for each part.  Don&#39;t\nprint out more than two solid pages of digits, though.</FONT></P>\n<BR>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Based in part on ICS H22 assignments by David\nG. Kay from Winter 2000 and earlier; modified by David G. Kay, Winter 2001.</FONT></P>\n<P>\n<FONT FACE=\"Helvetica\" SIZE=1>Modified by David G. Kay, Winter 2003, including\nsome logistical information from the ICS 22 Lab Manual by Alex Thornton.</FONT></P>\n<BR CLEAR=ALL>\n<P>\n</P>\n<HR>\n<P>\n<address>\n<FONT FACE=\"Palatino\"><A HREF=\"http://www.ics.uci.edu/~kay/\">David G. Kay</A>,\n<I>406B Computer Science\n<BR>\n</I><A HREF=\"http://www.uci.edu/\">University of California, Irvine</A>\n<BR>\n</FONT><FONT FACE=\"AGaramond\">Irvine, CA  92697-3425</FONT><FONT FACE=\"Palatino\">\n --  </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-5072</B></FONT><FONT FACE=\"Palatino\">\n --  Fax </FONT><FONT FACE=\"AGaramond\"><B>(949) 824-4056</B></FONT><FONT FACE=\"Palatino\">\n --  Email  <a href=mailto:kay@uci.edu>\n</FONT><FONT FACE=\"Courier\"><TT><A HREF=\"mailto:kay@uci.edu\">kay@uci.edu</A></a>\n<BR>\n</address>\n</TT></FONT></P>\n<P>\n<FONT FACE=\"Palatino\" SIZE=1>Friday, January 10, 2003 -- 2:15 PM</FONT></P>\n</BODY>\n</HTML>\n", "id": 10687.0}