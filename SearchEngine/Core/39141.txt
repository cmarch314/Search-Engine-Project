{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Circulator from iterator I Definition The adaptor Circulator from iterator I converts two iterators of type I a begin and a past the end value to a circulator of equal category The iterator must be at least of the forward iterator category The circulator will be mutable or non mutable according to the iterator Iterators provide no size type This adapter assumes std size t instead include CGAL circulator h Types typedef I iterator In addition all types required for circulators are provided Creation Circulator from iterator I c a circulator c on an empty sequence Circulator from iterator I c I begin I end I cur begin a circulator c initialized to refer to the element cur in a range begin end The circulator c refers to a empty sequence if begin end Circulator from iterator I c Circulator from iterator I T Size Dist d I cur a copy of circulator d referring to the element cur The circulator c refers to a empty sequence if d does so Operations The adaptor conforms to the requirements of the respective circulator category An additional member function current iterator returns the current iterator pointing to the same position as the circulator does See Also Container from circulator Circulator from container Circulator Example The following program composes two adaptors from an iterator to a circulator and back to an iterator It applies an STL sort algorithm on a STL vector containing three elements The resulting vector will be 2 5 9 as it is checked by the assertions The program is part of the CGAL distribution file examples Circulator circulator prog1 C include CGAL basic h include cassert include vector include algorithm include CGAL circulator h typedef std vector int iterator I typedef CGAL Circulator from iterator I Circulator typedef CGAL Container from circulator Circulator Container typedef Container iterator Iterator int main std vector int v v push back 5 v push back 2 v push back 9 Circulator c v begin v end Container container c std sort container begin container end Iterator i container begin assert i 2 i assert i 5 i assert i 9 i assert i container end return Another example usage for this adaptor is a random access circulator over the built in C arrays Given an array of type T with a begin pointer b and a past the end pointer e the adaptor Circulator from iterator T c b e is a random access circulator c over this array Next Circulator tag Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Circulator_ref/Class_Circulator_from_iterator.html", "title": "circulator_from_iterator&lt;i&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Circulator_ref/Circulator_from_iterator.tex' -->\n<html> <head>  \n<title>Circulator_from_iterator&lt;I&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1617\"></A>\n\n<A NAME=\"Cross_link_anchor_1618\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1512\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Circulator_from_iterator<I>\"></A>\n<h2><I>CGAL::Circulator_from_iterator&lt;I&gt;</I></h2>\n\n\n<A NAME=\"pageCircFromIterRef\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe adaptor <I><A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;I&gt;</I> converts two iterators of type\n<I>I</I>, a begin and a past-the-end value, to a circulator of equal\ncategory. The iterator must be at least of the forward iterator\ncategory. The circulator will be mutable or non-mutable according to\nthe iterator. Iterators provide no <I>size_type</I>. This adapter\nassumes <I>std::size_t</I> instead.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/circulator.h\">CGAL/circulator.h</A>&gt;</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_iterator\"></A>\n<A NAME=\"Typedef_iterator\"></A>\ntypedef I\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    iterator;\n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        </TABLE>\n<P>\n\nIn addition all types required for circulators are provided.\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;I&gt; c;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a circulator <I>c</I> on an empty sequence.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;I&gt; c (  I begin,  I end,  I cur = begin);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a circulator <I>c</I> initialized to refer to the element\n  <I>*cur</I> in  a range <TT>[</TT><I>begin</I><TT>,</TT><I>end</I><TT>)</TT>.\n  The circulator <I>c</I> refers to a empty sequence\n  if <I>begin==end</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;I&gt; c ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;I,T,Size,Dist&gt; d,<BR>\n\nI cur);</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a copy of circulator <MATH><I>d</I></MATH> referring to the element <I>*cur</I>.\n  The circulator <I>c</I> refers to a empty sequence\n  if <MATH><I>d</I></MATH> does so.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe adaptor conforms to the requirements of the respective circulator\ncategory. An additional member function <I>current_iterator()</I>\nreturns the current iterator pointing to the same position as the\ncirculator does.\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1660\">Container_from_circulator</A></I>,\n<I><A HREF=\"Class_Circulator_from_container.html#Cross_link_anchor_1612\">Circulator_from_container</A></I>,\n<I><A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A></I>.\n<P>\n\n<H3>Example</H3>\n<P>\n\nThe following program composes two adaptors - from an iterator to a\ncirculator and back to an iterator. It applies an STL sort algorithm\non a STL vector containing three elements. The resulting vector will\nbe <TT>[2 5 9]</TT> as it is checked by the assertions. The program is\npart of the C<SMALL>GAL</SMALL> distribution.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>/circulator_prog1.C\n\n#include &lt;CGAL/basic.h&gt;\n#include &lt;cassert&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;CGAL/circulator.h&gt;\n\ntypedef  std::vector&lt;int&gt;::iterator                  I;\ntypedef  <A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1617\">CGAL::Circulator_from_iterator</A>&lt;I&gt;           <A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>;\ntypedef  <A HREF=\"Class_Container_from_circulator.html#Cross_link_anchor_1659\">CGAL::Container_from_circulator</A>&lt;<A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A>&gt; Container;\ntypedef  Container::iterator                         Iterator;\n\nint main() {\n    std::vector&lt;int&gt; v;\n    v.push_back(5);\n    v.push_back(2);\n    v.push_back(9);\n    <A HREF=\"Concept_Circulator.html#Cross_link_anchor_1607\">Circulator</A> c( v.begin(), v.end());\n    Container  container( c);\n    std::sort( container.begin(), container.end());\n    Iterator i = container.begin();\n    assert( *i == 2);\n    i++;    assert( *i == 5);\n    i++;    assert( *i == 9);\n    i++;    assert(  i == container.end());\n    return 0;\n}\n</pre>\n<P>\n\nAnother example usage for this adaptor is a  random access circulator\nover the built-in C arrays. Given an array of type <TT>T*</TT>  with a\nbegin pointer <TT>b</TT> and a past-the-end pointer <TT>e</TT> the adaptor\n<I><A HREF=\"Class_Circulator_from_iterator.html#Cross_link_anchor_1618\">Circulator_from_iterator</A>&lt;T*&gt; c(b,e)</I> is a random access circulator \n<I>c</I> over this array.\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Circulator_tag.html\"><I>Circulator_tag</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_5!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39141.0}