{"text": "Project 1 Conway s Game of Life Overview In this project you will be implementing a cellular automaton simulator In particular you will be simulating Conway s Game of Life In Conway s Game of Life the world is an infinite 2 D orthogonal grid of square cells i e an infinite sheet of graph paper Each cell can be in one of two states alive or dead The neighbors of a given cell are defined to be the eight cells which share an edge or corner with the given cell The simulation progresses in generations with the following transition rules A live cell with or 1 live neighbors dies A live cell with 2 or 3 live neighbors lives A live cell with 4 to 8 live neighbors dies edited Jul 1 at 12 11am A dead cell with exactly 3 live neighbors comes to life The version of the game we will be programming is a little simpler Instead of working on an infinite grid we will work in a world that is a grid with 5 rows numbered top down from to 49 and 5 columns numbered left right from to 49 When using the transition rules for cells on the boundary we will assume that all neighbors not in the 5 x5 grid are permanently dead The program Golly is a full featured Game of Life simulator and has been installed on your virtual machine The GameView object You will interact with the GUI through the GameView object Although we have not yet covered object oriented programming in C your previous background should be sufficient to work with this object Calling a method on an object in C uses the same dot syntax from Python or Java bool get status int i int j returns true if cell i j is alive and false otherwisevoid set status int i int j bool status sets the life status of cell i j in the buffervoid update status copies the buffer board on the actual boardvoid clear kills all cells on the boardvoid load board int n loads a preset board that does something interesting n 1 Glider n 2 Three beacons n 3 Spaceship n 4 Clears boardvoid render causes the GUI to updateGameEvent get event gets the next GameEvent read on for details The following code would create a GameView object named view bring cell 3 2 to life and then render the board to the scree GameView view view set status 3 2 true view update status view render Come by the lab or office hours if you have any trouble working the GameView object GameEvents and EventTypes The GameEvent is a struct with three fields type data1 and data2 The type field stores an enum of type EventType and is determined by the type of event that has occurred EventType Click The user clicked on a cell data1 the clicked rowdata2 the clicked column EventType Key The user pressed button 1 2 3 or 4 data1 the pressed numberdata2 undefined EventType Pause The user requested to pause the simulation by pressing Space data1 undefineddata2 undefined EventType Quit The user requested to quit the application by clicking X or pressing Q data1 undefineddata2 undefined EventType Null An event we do not need to worry about data1 undefineddata2 undefined The two data field contain information about the event described above The game loop You program will spend most of its time in a loop commonly called the game loop A high level description of the game loop would be loop get next event use a switch to process current event update game state if necessary render GUI The loop will normally end when it receives a quit event which may be triggered by a key press Q in our program or by closing the window Your task You task for this project is to implement a GameLoop for Conway s Game of Life handling all game events appropriately A click event should flip the state of the cell clickedA key event should load the requested boardA pause event should pause the simulationA quit event should exit the game loopA null event should do nothing The makefile for this project has the same functionality as project When you are satisfied with your project you will use make gather to produce a tar gz file to submit to dropbox on eee There are now two dropboxes on eee make sure you submit your project to the correct dropbox Project 1 starter code project1 tar gz You can download at terminal with the command wget http www ics uci edu mbannist teaching ics45c project1 project1 tar gz Note When you run your program you will likely get the following error which may be safely ignored libGL error failed to authenticate magic 3 libGL error failed to load driver vboxvideo", "_id": "http://www.ics.uci.edu/~mbannist/teaching/ics45c/project1/", "title": "none", "html": "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n\n  \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/~mbannist/css/default.css\"/>\n  \n\n  <title></title>\n\n  \n</head>\n\n<body>\n  <h1 id=\"project-1-conways-game-of-life\">Project 1: Conway\u2019s Game of Life</h1>\n  <hr />\n  \n  <h2 id=\"overview\">Overview</h2>\n  <p>In this project you will be implementing a <em>cellular automaton</em> simulator. In particular, you will be simulating <a href=\"https://en.wikipedia.org/wiki/Conway%27s_game_of_life\">Conway\u2019s Game of Life</a>. In Conway\u2019s Game of Life the world is an infinite 2-D orthogonal grid of square <em>cells</em>, i.e., an infinite sheet of graph paper. Each cell can be in one of two <em>states</em>, <em>alive</em> or <em>dead</em>. The <em>neighbors</em> of a given cell are defined to be the eight cells which share an edge or corner with the given cell. The simulation progresses in generations, with the following transition rules:</p>\n  \n  <ul>\n    <li>A live cell with 0 or 1 live neighbors dies;</li>\n    <li>A live cell with 2 or 3 live neighbors lives;</li>\n    <li>A live cell with 4 to 8 live neighbors dies <em>(edited: Jul 1 at 12:11am)</em>;</li>\n    <li>A dead cell with exactly 3 live neighbors comes to life.</li>\n  </ul>\n  \n  <p>The version of the game we will be programming is a little simpler. Instead of working on an infinite grid, we will work in a world that is a grid with 50 rows (numbered top-down from 0 to 49) and 50 columns (numbered left-right from 0 to 49). When using the transition rules for cells on the boundary we will assume that all neighbors not in the 50x50 grid are permanently dead. The program <strong>Golly</strong> is a full featured Game of Life simulator and has been installed on your virtual machine.</p>\n  \n  <h2 id=\"the-gameview-object\">The GameView object</h2>\n  <p>You will interact with the GUI through the GameView object. Although, we have not yet covered object oriented programming in C++, your previous background should be sufficient to work with this object. Calling a method on an object in C++ uses the same <em>dot</em> syntax from Python or Java.</p>\n  \n  <ul>\n    <li><strong>bool get_status(int i, int j)</strong>: returns true if cell (i,j) is alive, and false otherwise</li>\n    <li><strong>void set_status(int i, int j, bool status)</strong>: sets the life status of cell (i,j) in the buffer</li>\n    <li><strong>void update_status()</strong>: copies the buffer board on the actual board</li>\n    <li><strong>void clear()</strong>: kills all cells on the board</li>\n    <li><strong>void load_board(int n)</strong>: loads a preset board that does something interesting: (n=1) Glider (n=2), Three beacons, (n=3) Spaceship, (n=4) Clears board</li>\n    <li><strong>void render()</strong>: causes the GUI to update</li>\n    <li><strong>GameEvent get_event()</strong>: gets the next GameEvent, read on for details\u2026</li>\n  </ul>\n  \n  <p>The following code would create a GameView object named view, bring cell (3,2) to life, and then render the board to the scree:</p>\n  \n  <pre><code>GameView view;\n  view.set_status(3,2, true);\n  view.update_status()\n  view.render()\n  </code></pre>\n  \n  <p>Come by the lab or office hours if you have any trouble working the GameView object.</p>\n  \n  <h2 id=\"gameevents-and-eventtypes\">GameEvents and EventTypes</h2>\n  <p>The <strong>GameEvent</strong> is a <strong>struct</strong> with three fields: <strong>type</strong>, <strong>data1</strong> and <strong>data2</strong>. The <strong>type</strong> field stores an <strong>enum</strong> of type <strong>EventType</strong>, and is determined by the type of event that has occurred:</p>\n  \n  <ul>\n    <li><strong>EventType::Click</strong>: The user clicked on a cell\n      <ul>\n        <li><strong>data1</strong> = the clicked row</li>\n        <li><strong>data2</strong> = the clicked column</li>\n      </ul>\n    </li>\n    <li><strong>EventType::Key</strong>: The user pressed button 1,2,3 or 4\n      <ul>\n        <li><strong>data1</strong> = the pressed number</li>\n        <li><strong>data2</strong> = undefined</li>\n      </ul>\n    </li>\n    <li><strong>EventType::Pause</strong>: The user requested to pause the simulation by pressing <strong>Space</strong>\n      <ul>\n        <li><strong>data1</strong> = undefined</li>\n        <li><strong>data2</strong> = undefined</li>\n      </ul>\n    </li>\n    <li><strong>EventType::Quit</strong>: The user requested to quit the application by clicking X or pressing <strong>Q</strong>\n      <ul>\n        <li><strong>data1</strong> = undefined</li>\n        <li><strong>data2</strong> = undefined</li>\n      </ul>\n    </li>\n    <li><strong>EventType::Null</strong>: An event we do not need to worry about\n      <ul>\n        <li><strong>data1</strong> = undefined</li>\n        <li><strong>data2</strong> = undefined</li>\n      </ul>\n    </li>\n  </ul>\n  \n  <p>The two data field contain information about the event, described above.</p>\n  \n  <h2 id=\"the-game-loop\">The game loop</h2>\n  <p>You program will spend most of its time in a loop commonly called the <em>game loop</em>. A high level description of the game loop would be:</p>\n  \n  <pre><code>loop:\n    get next event\n    use a switch to process current event\n    update game state if necessary\n    render GUI\n  </code></pre>\n  \n  <p>The loop will normally end when it receives a <strong>quit</strong> event, which may be triggered by a key press (<strong>Q</strong> in our program) or by closing the window.</p>\n  \n  <h2 id=\"your-task\">Your task</h2>\n  <p>You task for this project is to implement a GameLoop for Conway\u2019s Game of Life, handling all game events appropriately:</p>\n  \n  <ul>\n    <li>A <strong>click event</strong> should flip the state of the cell clicked</li>\n    <li>A <strong>key event</strong> should load the requested board</li>\n    <li>A <strong>pause event</strong> should pause the simulation</li>\n    <li>A <strong>quit event</strong> should exit the game loop</li>\n    <li>A <strong>null event</strong> should do nothing</li>\n  </ul>\n  \n  <p>The <strong>makefile</strong> for this project has the same functionality as <a href=\"project0.html\">project 0</a>. When you are satisfied with your project you will use <strong>make gather</strong> to produce a <strong>tar.gz</strong> file to submit to dropbox on eee. There are now two dropboxes on eee; make sure you submit your project to the correct dropbox!</p>\n  \n  <p>Project 1 starter code: <a href=\"project1.tar.gz\">project1.tar.gz</a>  </p>\n  \n  <p>You can download at terminal with the command:<br />\n  <strong>wget \u201chttp://www.ics.uci.edu/~mbannist/teaching/ics45c/project1/project1.tar.gz\u201d</strong></p>\n  \n  <p>Note: When you run your program you will likely get the following \u201cerror\u201d, which may be safely ignored:</p>\n  \n  <pre><code>libGL error: failed to authenticate magic 3\n  libGL error: failed to load driver: vboxvideo\n  </code></pre>\n \n</body>\n\n</html>\n", "id": 499.0}