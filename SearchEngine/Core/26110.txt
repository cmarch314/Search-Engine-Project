{"text": "Program 4 Programming with Classes Introduction to Computer Science I ICS 21 Introduction Please print a copy of this assignment read it carefully and highlight material you think will be useful to you while you are working on the program or submitting it This programming assignment is designed to ensure that you know how to write programs that use constructors methods and fields although rarely in other classes Of course you will continue gaining experience with the standard control structures in Java blocks ifs fors breaks try catch as well as the more basic Java features declarations and expression statements using arithmetic state change relational and logical operators You will write four programs in this assignment As always you can check the behavior of your programs against mine by downloading unzipping and then running the file Program 4 Executables to help you understand the specification of the problem and observe the programmer user interaction that you are to implement See Program 1 for details on how to run these executables on both PCs and in Eclipse PCs and Macs Remember you can run these programs but not examine their source Java code Copy the input output form of the executable programs in the programs that you write use exactly the same prompts and messages For your information I am listing below the number of lines in my solution programs These programs are formated in the standard way I am counting only lines with code even if the only code on the line is a brace that closes a block but I am not counting blank lines norlines filled with comments My big collatz program is 24 lines my dice ewar program is 72 lines my phone database program is 37 lines my heart monitor program is 67 lines Your programs might be smaller and they might be larger but if your program starts going over 2 3 times the size of mine you might want to rethink it or come get some help Please follow the instructions below for each program finish each enhancement before continuing to the next one including printing whatever messages it displays in the console copied exactly The Class Examples program illustrates the use of many classes including the ones that you will need to use in this assignment The last two programs require writing nested loops one loop inside another I used multiple break statements inside some of these loops To work on this assignment create one Java project call it Program4 and create four new Java classes in it Each class will contain a program that you will write to solve one problem name the classes BigCollatz DiceWar PhoneDatabase and ICD Write run and debug each class program as you did in Program 3 When you finish each part submit its java file Only one programmer of the pair should dropoff the programs the same one for each part It doesn t matter which of the pair submits but that person should submit all the parts Of course each program should contain both student names in the comment the same one you cut pasted ane filled in at the top of each program in Program 1 Collatz with BigInteger Don t start this project with the new project folder Instead download the Program4 project folder unzip it and start a new project in Eclipse using this project folder which contains a Collatz java program that works for int values Create the DiceWar and PhoneDatabase classes here When compiled and run the Collatz java class prompts the user for an int value and performs the Collatz process read the comments for all the details on that number until it is reduced to 1 We have seen this program before when working with the Eclipse Debugger This program requires you to use objects constructed from the BigInteger class remember to import it For this programming assignment enhance this program to use variables that refer to BigInteger objects rather than store int primitives In this way there is almost no limit on the size of number that we can apply the Collatz process to checking whether all values are ultimately reduced to 1 which happens for all examples I ve tried and happens very quickly Fundamentally what you are doing in this program is translating from the use of primitive types and values to the use of reference types and objects This is a good starting point for switching to object oriented programming It will involve importing the BigInteger class see Javadoc for its full name including its package In addition you should Use constructors for BigInteger objects to initialize variables constants instead of using int literals there are no BigInteger literals Also note that the BigInteger class declares some public final constants which you should find useful Use methods like divide multiply and add to perform arithmetic on BigInteger values instead of using arithmetic operators they do not work for BigInteger values Note that there are no state change operators for BigInteger objects e g no like String it is an immutable class Use methods like equals and or compareTo to compare BigInteger values instead of using relational operators remember that probably doesn t do what you want done Check the Prompt class for a useful input method You should also make good use of cascaded method calls in your solution taking the place of subexpressions and operator precendence Submit your final program test it on small numbers and big numbers numbers with tens or hundreds of digits Finally remember to update the Description comment to describe the changes added to the program PS With a perfect understanding of BigInteger converting this program would take about 5 minutes I guess you will take longer because you will learn a lot about the BigInteger class specifically and understanding how to use objects generally Dice War This program requires you to use objects constructed from the DiceEnsemble and Timer classes remember to import them Write a program that simulates playing games of dice war the program should also collect certain statistics while it is playing these games and report them after the required number of games have been played In a game of dice war each player starts out with his her own dice ensemble consisting of 2 6 sided dice and some number entered by the user of chips Each player roles his her dice If one player s pip sum is higher that player gets a chip from the other player Whenever one player has no chips left the game is over and that player has lost and the other player has won So there are many plays throws of the dice in each game Your program must prompt the user for the number of games to play and the number of chips with which the players start each game It also prompts the user to determine if the program s behavior is to be traced use tracing as a debugging technique only when playing few games The program then simulates that many games of dice war using objects constructed from the DiceEnsemble class one pair of dice for each player It keeps track of the number of times each player wins the length number of dice rolls of the shortest and longest games and the total number of dice rolls over all the games It also uses a Timer to keep track of how long in clock time it takes to play all the games Try to use the DiceEnsemble objects themselves to keep track of some of the required information so you do not have to declare extra variables Ultimately the program prints how often each player won it is a fair game so these numbers should be about equal the length of the shortest and longest games the total number of rolls over all games the average number of rolls per game the amount of time it took to simulate all the games the simulation speed number of games per second Finally the program should also be capable of tracing its events Such a facility is not used for long simulations but instead it is very useful for short debugging runs By tracing every important event in the simulation we can display information useful for spotting bugs When you build your program you should trace the following events if the user requests a trace starting a new game playing one roll indicate what each player rolled and how many chips each player has left after the roll and redistribution of the chips winning a game Run my executable with tracing for a small number of games with each person starting out with 3 5 chips and without tracing for a large number of games with increasing number of starting chips to observe all its behavior For this assignment try to work out your own enhancements A starting point could be writing a program to play one game with the user supplying the number of starting chips then add tracing then add playing multiple games with the user supplying the number then add code for keeping all the statistics then add timing the game Explore the Javadoc of the DiceEnsemble and Timer classes and use them effectively to minimize the variables and code you must write I found Integer MAX VALUE check out this static final field in the Integer wrapper class in Javadoc useful as an initialization for computing the smallest length game although there are many other ways to compute this value correctly Phone Database This program requires you to use objects constructed from the TypedBufferReader and StringTokenizer classes as well as use of the EOFException class remember to import them Write a program that reads a database of names and their associated phone numbers from a file catenating them into one huge String As a debugging check leave it in your program it is in my executable too ask the user if he she wants to print the database to see if it has been read correctly if so print the String Then it repeatedly prompts the user for a name again a String and look up and print its associated phone number or print that the name cannot be found in the database If the user enter the name QUIT whether upper lower or mixed case the program should instead terminate Your program must prompt the user for an input file see the file phoneinput txt provided with the executable and then read all the names and phone numbers from that file each is read as a String from that file catenating them into one large database string with a space between every name and phone number Then your program should repeatedly prompt the user for a name and terminate if the user enters QUIT if the user enters any other name use a loop to process a StringTokenizer object initialized to the database it should process tokens until the name is found use a case insensitive equality comparison then the next token is the phone number or there are no more tokens then the name was not in the database Note that the Class Examples program illustrates how to read all the values from a file and how to process all the tokens in a String study this code and adapt it to this program This resulting program is pretty small it requires file reading see above and ensures that you understand how to use the StringTokenizer class which has a constructor and a few useful methods that you must learn to use Implantable Cardiac Defibrillators Write a program that simulates the working of an Implantable Cardiac Defibrillator ICD An ICD is a small electronic device placed in the chest cavity of a patient who is suffering from arrhythmias heartbeat irregularities This device constantly monitors the electrical output of a beating heart if it detects a bradycardia heart beating too slowly it acts a pacemaker more importantly if it detects a tachycardia heart beating too fast to pump blood effectively in extreme cases this results in ventricular fibrillation at which point it acts as a defibrillator by supplying a large shock to the heart in an attempt to restore a normal rhythm This shock is described by patients as feeling like a kick in the chest although many patients are unconscious by the time action is taken on the detected arrhythmia If you are interested you can read more detailed information on ICDs The basic algorithm inside an ICD computes the zero crossing count ZCC of the electical signals it samples while it is monitoring a heart Each signal should be between the value of 1 and 1 inclusive if not the ICD is receiving faulty signals and it should shut itself off During an interval typically lasting a few seconds whenever the signal value goes from positive to negative or negative to positive the ICD increments its ZCC For the purposes of this assignment we will treat as a positive number At the end of an interval the ICD checks to see whether its ZCC is within a normal range in a bradycardia the ZCC is too low equals or falls below some threshold in a tachycardia the ZCC is to high equals or exceeds some threshold If the ICD detects either of these conditions it takes the necessary action then it resets the ZCC and samples the heart signals for another interval Of course real ICDs have evolved to exhibit much more sophisticated behaviors but this simple model is good enough for this programming assignment For example if the ICD is using an interval length of 1 the following table labels each sample shows the signal value for that sample and the current ZCC Sample 1 2 3 4 5 6 7 8 9 1 11 12 13 14 15 16 17 18 19 2 21 22 Signal 5 1 5 5 5 1 5 5 5 5 1 5 5 5 5 1 5 5 5 5 1 ZCC 1 2 2 2 3 3 1 1 1 2 3 4 5 5 6 7 ZCC reset to For example between sample 4 and 5 the signal goes from 5 to 5 so the ZCC is incremented The ZCC at sample 1 the end of the first interval is 3 after which it is reset to but immediately incremented to 1 because between sample 1 and 11 the signal goes from 5 to 5 at the end of the second interval it has risen to 7 This program will simulate the simple ICD algorithmg allowing us to test it on various data files that represent samples taken of the actual electrical signals of a monitored heart It should operate as follows Prompt the user for the name of the ICD s configuration data file an input file and the name of the simulated heart data file to monitor an input file The configuration file specifies three int values an example would look like 1 15 25 The interval length how many signals to read from the data file while computing each ZCC after these many signals the ICD decides if the heart is arrythmic and resets the ZCC It continues reading more signals deciding whether or not the heart is arrythmic every interval length The bradycardia threshold if the ZCCs in a an interval equals or falls below this threshold the heart is beating too slowly The tachycardia threshold if the ZCCs in an interval equlas or exceeds this threshold the heart is beating too quickly The simulated heart file contains a sequence of electical signals that the ICD should process Display on the console the information extracted from the configuration file if these three values cannot be read correctly see the simplebad1 config txt and simplebad2 config txt files the program should terminate Simulate the action of the ICD read signals from the simulated heart file and compute the ZCC for each interval display the ZCC for that interval along with any action to take if the ZCC indicates an abnormally beating heart Continue this process until There is no more data in the simulated heart file A bad signal value is read smaller than 1 or greater than 1 Before starting to write your program run my exectable on all the different data files that I ve supplied see the executable download to familiarize youself with its operations output messages etc Then follow the iterative enhancement approach when writing this program It is an excellent idea to add comments as you are writing the code to help you understand it while you are enhancing it Initially test your enhancements on the simple config txt and simple heart txt data files they use the data illustrated above Eventually test your enhancements using regular config txt and each of the regular input files Write a kernel program that prompts the user for the name of the configuration file reads all the data that it contains and then displays it on the console Place all this code in to one large try catch statement if you cannot successfully read all the required values catch any exception then print an error message and terminate the program Test it on a good file simple config txt and two bad ones simplebad1 config txt and simplebad2 config txt Enhance the program so that it also prompts the user for the name of the heart data file too reads and displays every value in this file prefaced by the sample number 1 for the first signal 2 for the next etc terminating the program when it unsuccessfully tries to read a data value from the file e g it tries to read a non integer value or it tries to read another value when there is none Hint this is the only loop that your program needs and it should include another try catch statement that handles any thrown exception by printing a message and terminating the loop program Test it using simple config txt and one a good file simple heart txt and a bad one simplebad1 heart txt Enhance the program so that it also terminates the loop if the signal value is not between 1 and 1 inclusive displaying the appropriate message Test it using simple config txt and two bad files simplebad2 heart txt and simplebad3 heart txt Enhance the program so that it displays on the console the message Make Decision after reading enough sample signals to fill the interval For example if the interval is 1 samples the ICD should read and display the first 1 signals numbered 1 through 1 and then display Make Decision then it should read and display the second 1 signals numbered 11 through 2 and then display Make Decision again etc Test it using simple config txt and simple heart txt Enhance the program so that it computes and displays the ZCC after it reads each value from the heart data file This change will require two variables one storing the value of the previous signal and one storing the value of the current signal the current value becomes the previous one at the end of each loop iteration Initially before the loop even starts set the previous value to Each iteration of the loop reads a new value for current from the heart input file Also change the Make Decision message to display the current ZCC whose value it will actually use to check for bradycardia or tachycardia Important after each decision is made the ICD should reset the ZCC to as it begins computing the ZCC for the next interval of signals Test it using simple config txt and simple heart txt and compare the results to the table of values above When you have verified that the right ZCC values appear in these messages remove or comment out the code that displays each signal and the ZCC for each new signal read Enhance the program to display Bradycardia Detected if the ZCC equals or falls below the threshold read from the configuration file and display Tachycardia Detected if the ZCC equals or exceeds the threshold read from the configuration file Test the final program using regular config txt and each of the regular input files Extra Credit The dice war problem has 1 point of extra credit To earn it at the bottom of the main comment in the DiceWar class include a section labelled Extra Credit In this section estimate the average number of dice rolls for a game where each player starts out with 1 chips Explain the details of how you arrived at your estimate Do not discuss your estimate with anyone but the student you are pairing with ", "_id": "http://www.ics.uci.edu/~pattis/ICS-21/assignments/program4/program.html", "title": "program 4", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\r\n<html>\r\n\r\n<head>\r\n  <title>Program 4</title>\r\n</head>\r\n\r\n<body BGCOLOR=\"white\">\r\n\r\n<center>\r\n<h1>Program 4</h1>\r\n<h1>Programming with Classes</h1>\r\n<p>\r\n<h2>Introduction to Computer Science I\r\n<br>\r\nICS-21<br>\r\n</h2>\r\n<p>\r\n</center>\r\n\r\n\r\n<!-- Introduction -->\r\n\r\n<a name=\"Introduction\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Introduction</b></td>\r\n<td width =\"80%\">\r\n  Please print a copy of this assignment, read it carefully, and\r\n    highlight material you think will be useful to you while you\r\n    are working on the program or submitting it.\r\n  <p>\r\n  This programming assignment is designed to ensure that you know how to write\r\n    programs that use constructors, methods, and fields (although rarely) in\r\n    other classes.\r\n  Of course, you will continue gaining experience with the standard control\r\n    structures in Java (blocks, ifs, fors, breaks, try/catch) as well as the\r\n    more basic Java features (declarations and expression statements using\r\n     arithmetic, state-change, relational, and logical operators).\r\n  <p>\r\n  You will write four programs in this assignment.\r\n  As always, you can check the behavior of your programs against mine by\r\n    downloading, unzipping, and then running the file\r\n     <a href=\"executable.zip\">Program #4 Executables</a>,\r\n    to help you understand the specification of the problem and observe the\r\n    programmer/user interaction that you are to implement.\r\n  See <a href=\"../program1/program.html\">Program #1</a> for details on how\r\n     to run these executables on both PCs and in Eclipse (PCs and Macs).\r\n  Remember, you can run these programs, but not examine their source (Java)\r\n    code.\r\n  Copy the input/output form of the executable programs in the programs that\r\n    you write: use exactly the same prompts and messages.\r\n  <p>\r\n  For your information, I am listing below the number of lines in my solution\r\n    programs.\r\n  These programs are formated in the standard way.\r\n  I am counting only lines with code (even if the only code on the line is\r\n    a brace that closes a block); but I am not counting blank lines norlines \r\n    filled with comments.\r\n  My \"big collatz\" program is 24 lines; my \"dice ewar\" program is 72 lines; my\r\n    \"phone database\" program is 37 lines; my \"heart monitor\" program is 67\r\n    lines.\r\n  Your programs might be smaller, and they might be larger; but if your program\r\n    starts going over 2-3 times the size of mine, you might want to rethink it\r\n    (or come get some help).\r\n  <p>\r\n  Please follow the instructions below for each program: finish each\r\n    enhancement before continuing to the next one (including printing\r\n    whatever messages it displays in the console, copied exactly).\r\n  <p>\r\n  The  <a href=\"../../programs/classexamples.zip\">Class Examples</a> program\r\n    illustrates the use of many classes, including the ones that you will need\r\n    to use in this assignment.\r\n  The last two programs require writing nested loops: one loop inside another.\r\n  I used multiple <b>break</b> statements inside some of these loops.\r\n  <p>\r\n  To work on this assignment, create one Java project (call it <b>Program4</b>)\r\n    and create four new Java classes in it.\r\n  Each class will contain a program that you will write to solve one problem;\r\n    name the classes <b>BigCollatz</b>, <b>DiceWar</b>, <b>PhoneDatabase</b>,\r\n    and <b>ICD</b>.\r\n  Write, run, and debug each class/program as you did in Program #3.\r\n  When you finish each part, submit its <b>.java</b> file.\r\n  <p>\r\n  <b>Only one programmer of the pair should dropoff the programs: the same one\r\n       for each part.\r\n     It doesn't matter which of the pair submits, but that person should\r\n       submit all the parts.\r\n     Of course, each program should contain both student names (in the\r\n        comment: the same one you cut, pasted, ane filled in at the top of\r\n        each program in <a href=\"../program1/program.html\">Program #1</a>).</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Big Collatz -->\r\n\r\n<a name=\"BigCollatz\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Collatz with BigInteger</b></td>\r\n<td width =\"80%\">\r\n  Don't start this project with the new project folder.\r\n  Instead, download the <a href=\"Program4.zip\">Program4</a>\r\n    project folder, unzip it, and start a new project in Eclipse using\r\n    this project folder (which contains a <b>Collatz.java</b> program\r\n    that works for <b>int</b> values).\r\n  Create the <b>DiceWar</b> and <b>PhoneDatabase</b> classes here.\r\n  <p>\r\n  When compiled and run, the <b>Collatz.java</b> class prompts the user for an\r\n    <b>int</b> value and performs the Collatz process (read the comments for\r\n    all the details) on that number until it is \"reduced\" to 1.\r\n  We have seen this program before, when working with the Eclipse Debugger.\r\n  <p>\r\n  This program requires you to use objects constructed from the\r\n     <b>BigInteger</b> class; remember to import it.\r\n  <p>\r\n  For this programming assignment, enhance this program to use variables that\r\n     refer to <b>BigInteger</b> objects rather than store <b>int</b>\r\n     primitives.\r\n  In this way, there is almost no limit on the size of number that we can apply\r\n    the Collatz process to, checking whether all values are ultimately reduced\r\n    to 1 (which happens for all examples I've tried, and happens very quickly).\r\n  <p>\r\n  Fundamentally what you are doing in this program is translating from the\r\n    use of primitive types and values to the use of reference types and\r\n    objects.\r\n  This is a good starting point for switching to object-oriented programming.\r\n  It will involve importing the <b>BigInteger</b> class (see Javadoc for its\r\n    full name, including its package).\r\n  In addition, you should...\r\n  <ul>\r\n  <li>Use constructors for <b>BigInteger</b> objects to initialize\r\n        variables/constants, instead of using <b>int</b> literals\r\n        -there are no <b>BigInteger</b> literals!\r\n      Also note that the <b>BigInteger</b> class declares some\r\n        <b>public final</b> constants which you should find useful.\r\n  <li>Use methods like <b>.divide</b>, <b>.multiply</b>, and <b>.add</b> to\r\n        perform arithmetic on <b>BigInteger</b> values (instead of using\r\n        arithmetic operators -they do not work for <b>BigInteger</b> values).\r\n      Note that there are no state-change operators for <b>BigInteger</b> \r\n        objects (e.g., no <b>++</b>): like <b>String</b>, it is an immutable\r\n        class.\r\n  <li>Use methods like <b>.equals</b> and/or <b>.compareTo</b> to compare\r\n      <b>BigInteger</b> values (instead of using relational operators: remember\r\n      that <b>==</b> probably doesn't do what you want done!)\r\n  </ul>\r\n  Check the <b>Prompt</b> class for a useful input method.\r\n  You should also make good use of cascaded method calls in your solution\r\n    (taking the place of subexpressions and operator precendence).\r\n  <p>\r\n  Submit your final program (test it on small numbers, and big numbers: numbers\r\n    with tens or hundreds of digits).\r\n  Finally, remember to update the <b>Description:</b> comment to describe\r\n    the changes added to the program.\r\n  <p>\r\n  PS: With a perfect understanding of <b>BigInteger</b> converting this program\r\n    would take about 5 minutes: I guess you will take longer, because you will\r\n    learn a lot about the <b>BigInteger</b> class, specifically, and\r\n    understanding how to use objects, generally.\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Dice War -->\r\n\r\n<a name=\"DiceWar\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Dice War</b></td>\r\n<td width =\"80%\">\r\n  This program requires you to use objects constructed from the\r\n     <b>DiceEnsemble</b> and <b>Timer</b> classes; remember to import them.\r\n  Write a program that simulates playing games of dice war; the program should\r\n    also collect certain statistics while it is playing these games and report\r\n    them after the required number of games have been played.\r\n  In a game of dice war, each player starts out with his/her own dice ensemble,\r\n    consisting of (2,6-sided) dice, and some number (entered by the user) of\r\n    chips.\r\n  Each player roles his/her dice.\r\n  If one player's pip sum is higher, that player gets a chip from the other\r\n    player.\r\n  Whenever one player has no chips left, the game is over (and that player\r\n    has lost; and the other player has won).\r\n  So there are many plays (throws of the dice) in each game.\r\n  <p>\r\n  Your program must prompt the user for the number of games to play, and the\r\n    number of chips with which the players start each game.\r\n  It also prompts the user to determine if the program's behavior is to be\r\n    traced (use tracing as a debugging technique, only when playing few games).\r\n  The program then simulates that many games of dice war, using objects\r\n    constructed from the <b>DiceEnsemble</b> class: one pair of dice for each\r\n    player.\r\n  It keeps track of the number of times each player wins, the length (number of\r\n    dice rolls) of the shortest and longest games, and the total number of dice\r\n    rolls (over all the games).\r\n  It also uses a <b>Timer</b> to keep track of how long (in clock-time) it\r\n    takes to play all the games.\r\n  Try to use the <b>DiceEnsemble</b> objects themselves to keep track of some\r\n    of the required information, so you do not have to declare extra variables.\r\n  <p>\r\n  Ultimately the program prints \r\n  <ul>\r\n    <li>how often each player won (it is a fair game, so these\r\n           numbers should be about equal)\r\n    <li>the length of the shortest and longest games\r\n    <li>the total number of rolls (over all games)\r\n    <li>the average number of rolls per game\r\n    <li>the amount of time it took to simulate all the games\r\n    <li>the simulation speed (number of games per second)\r\n  </ul>\r\n  Finally, the program should also be capable of tracing its events.\r\n  Such a facility is not used for long simulations, but instead it is very\r\n    useful for short debugging runs.\r\n  By tracing every important event in the simulation, we can display\r\n    information useful for spotting bugs.\r\n  When you build your program, you should trace the following events (if the\r\n    user requests a trace)\r\n  <ul>\r\n    <li>starting a new game\r\n    <li>playing one roll: indicate what each player rolled and how many chips\r\n          each player has left after the roll (and redistribution of the\r\n          chips).\r\n     <li>winning a game\r\n </ul>\r\n  Run my executable with tracing (for a small number of games), with each\r\n    person starting out with 3-5 chips) and without tracing (for a large\r\n    number of games, with increasing number of starting chips) to observe\r\n    all its behavior.\r\n  <p>\r\n  For this assignment, try to work out your own enhancements.\r\n  A starting point could be writing a program to play one game (with the user\r\n    supplying the number of starting chips); then add tracing; then add playing\r\n    multiple games (with the user supplying the number); then add code for\r\n    keeping all the statistics; then add timing the game.\r\n  Explore the Javadoc of the <b>DiceEnsemble</b> and <b>Timer</b> classes, and\r\n    use them effectively to minimize the variables and code you must write.\r\n  I found <b>Integer.MAX_VALUE</b> (check out this <b>static final</b> field in\r\n    the <b>Integer</b> wrapper class in Javadoc) useful as an initialization\r\n    for computing the smallest-length game, although there are many other\r\n    ways to compute this value correctly.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n<!-- Phone Database -->\r\n\r\n<a name=\"PhoneDatabase\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Phone Database</b></td>\r\n<td width =\"80%\">\r\n  This program requires you to use objects constructed from the\r\n     <b>TypedBufferReader</b> and <b>StringTokenizer</b> classes\r\n     (as well as use of the <b>EOFException</b> class); remember to import\r\n     them.\r\n  <p>\r\n  Write a program that reads a database of names and their associated phone\r\n    numbers (from a file, catenating them into one huge <b>String</b>).\r\n  As a debugging check (leave it in your program; it is in my executable too),\r\n    ask the user if he/she wants to print the database (to see if it has been\r\n    read correctly); if so, print the <b>String</b>.\r\n  Then, it repeatedly prompts the user for a name (again, a <b>String</b>)\r\n    and look up and print its associated phone number (or print that the name\r\n    cannot be found) in the database.\r\n  If the user enter the \"name\" <b>QUIT</b>, whether upper-, lower-, or\r\n    mixed-case, the program should instead terminate.\r\n  <p>\r\n  Your program must prompt the user for an input file (see the file\r\n    <b>phoneinput.txt</b> provided with the executable) and then read all the\r\n    names and phone numbers from that file (each is read as a <b>String</b>)\r\n    from that file, catenating them into one large database string (with a\r\n    space between every name and phone number).\r\n  Then your program should repeatedly prompt the user for a name, and terminate\r\n    if the user enters <b>QUIT</b>; if the user enters any other name, use a\r\n     loop to process a <b>StringTokenizer</b> object (initialized to the\r\n     database): it should process tokens until the name is found (use a\r\n     case-insensitive equality comparison; then the next token is the phone \r\n     number) or there are no more tokens (then the name was not in the\r\n     database).\r\n  <p>\r\n  Note that the <a href=\"../../programs/classexamples.zip\">Class Examples</a>\r\n    program illustrates how to read all the values from a file, and how to\r\n    process all the tokens in a <b>String</b>; study this code and adapt it to\r\n    this program.\r\n  This resulting program is pretty small; it requires file reading (see above),\r\n    and ensures that you understand how to use the <b>StringTokenizer</b>\r\n    class (which has a constructor and a few useful methods that you must\r\n    learn to use).\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n<!-- Implantable Cardiac Defibrillator -->\r\n\r\n<a name=\"ICD\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Implantable Cardiac Defibrillators</b></td>\r\n<td width =\"80%\">\r\n  Write a program that simulates the working of an \r\n    <a href=\"http://www.elecdesign.com/Articles/ArticleID/5951/5951.html\" target=\"_blank\">\r\n      Implantable Cardiac Defibrillator</a> (ICD).\r\n  An ICD is a small electronic device placed in the chest cavity of a patient\r\n    who is suffering from arrhythmias (heartbeat irregularities).\r\n  This device constantly monitors the electrical output of a beating heart:\r\n    if it detects a bradycardia (heart beating too slowly) it acts a pacemaker;\r\n     more importantly, if it detects a tachycardia (heart beating too fast to\r\n     pump blood effectively: in extreme cases this results in  ventricular\r\n     fibrillation) at which point it acts as a defibrillator by supplying a\r\n     large shock to the heart in an attempt to restore a normal rhythm.\r\n    This shock is described by patients as feeling like a kick in the chest\r\n      -although many patients are unconscious by the time action is taken on\r\n     the detected arrhythmia.\r\n  If you are interested, you can read more detailed information on \r\n   <a href=\"http://www.medicinenet.com/implantable_cardiac_defibrillator/article.htm\" target=\"_blank\">\r\n    ICDs</a>.\r\n  <p>\r\n  The basic algorithm inside an ICD computes the zero-crossing count (ZCC) of\r\n    the electical signals it samples while it is monitoring a heart.\r\n  Each signal should be between the value of <b>-100</b> and <b>+100</b> \r\n    inclusive (if not, the ICD is receiving faulty signals, and it should shut\r\n    itself off).\r\n  During an interval (typically lasting a few seconds), whenever the signal\r\n    value goes from positive to negative or negative to positive, the ICD\r\n    increments its ZCC.\r\n  For the purposes of this assignment, we will treat 0 as a positive number.\r\n  At the end of an interval, the ICD checks to see whether its ZCC is within a\r\n    normal range: in a bradycardia the ZCC is too low (equals or falls below\r\n    some threshold); in a tachycardia the ZCC is to high (equals or exceeds\r\n    some threshold).\r\n  If the ICD detects either of these conditions it takes the necessary action;\r\n    then it resets the ZCC and samples the heart signals for another interval.\r\n  Of course, real ICDs have evolved to exhibit much more sophisticated\r\n    behaviors, but this simple model is good enough for this programming\r\n    assignment.\r\n  <p>\r\n  For example, if the ICD is using an interval length of <b>10</b>, the\r\n    following table labels each sample, shows the signal value for that sample,\r\n    and the current ZCC.\r\n  <b><pre>Sample# 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 ...\r\nSignal  0  5 10  5 -5  5 10  5 -5 -5  5 10  5 -5  5 -5 10  5 -5  5  5 10 ...\r\nZCC     0  0  0  0  1  2  2  2  3  3  1  1  1  2  3  4  5  5  6  7  0  0 ... \r\nZCC reset to 0----------------------^-----------------------------^----- ...</pre></b>\r\n  For example, between sample #4 and #5, the signal goes from <b>-5</b> to\r\n    <b>5</b> so the ZCC is incremented.\r\n  The ZCC at sample #10 (the end of the first interval) is <b>3</b> (after\r\n    which it is reset to <b>0</b> but immediately incremented to <b>1</b>\r\n     because between sample #10 and #11 the signal goes from <b>-5</b> to\r\n     <b>5</b>); at the end of the second interval it has risen to <b>7</b>.\r\n  <p>\r\n  This program will simulate the simple ICD algorithmg, allowing us to test it\r\n    on various data files that represent samples taken of the actual\r\n    electrical signals of a monitored heart.\r\n  It should operate as follows\r\n  <ul>\r\n    <li>Prompt the user for the name of the ICD's configuration data file\r\n         (an input file), and the name of the simulated heart data file to\r\n         monitor (an input file).<br>\r\n        The configuration file specifies three <b>int</b> values: an example\r\n          would look like <b>100 15 25</b>:\r\n        <ul>\r\n          <li>The interval length: how many signals to read from the data file\r\n                while computing each ZCC; after these many signals, the ICD\r\n                decides if the heart is arrythmic and resets the ZCC.\r\n              It continues reading more signals, deciding whether or not the\r\n                heart is arrythmic every interval length.\r\n          <li>The bradycardia threshold: if the ZCCs in a an interval equals or\r\n                falls below this threshold, the heart is beating too slowly.\r\n          <li>The tachycardia threshold: if the ZCCs in an interval equlas or\r\n                exceeds this threshold, the heart is beating too quickly.\r\n        </ul>\r\n        The simulated heart file contains a sequence of electical signals that\r\n           the ICD should process.\r\n    <li>Display on the console the information extracted from the configuration\r\n          file; if these three values cannot be read correctly,\r\n          (see the <b>simplebad1-config.txt</b> and\r\n           <b>simplebad2-config.txt</b> files)\r\n          the program should terminate.\r\n    <li>Simulate the action of the ICD: read signals from the simulated heart\r\n          file and compute the ZCC for each interval; display the ZCC for that\r\n          interval, along with any action to take if the ZCC indicates an \r\n          abnormally beating heart.\r\n    <li>Continue this process until\r\n        <ul>\r\n          <li>There is no more data in the simulated heart file\r\n          <li>A bad signal value is read: smaller than <b>-100</b> or greater\r\n                than <b>+100</b>\r\n        </ul>\r\n  </ul>\r\n  Before starting to write your program, run my exectable on all the different\r\n    data files that I've supplied (see the executable download), to\r\n    familiarize youself with its operations, output messages, etc.\r\n  Then, follow the iterative enhancement approach when writing this program.\r\n  It is an excellent idea to add comments as you are writing the code, to help\r\n    you understand it while you are enhancing it.\r\n  <p>\r\n  Initially, test your enhancements on the <b>simple-config.txt</b> and\r\n    <b>simple-heart.txt</b> data files (they use the data illustrated above)\r\n  Eventually test your enhancements using <b>regular-config.txt</b> and\r\n    each of the <b>regular-</b> input files.\r\n  <ol>\r\n    <li>Write a kernel program that prompts the user for the name of the\r\n          configuration file, reads all the data that it contains, and then \r\n          displays it on the console.\r\n        Place all this code in to one large <b>try</b>-<b>catch</b> statement:\r\n          if you cannot successfully read all the required values, catch any\r\n          exception, then print an error message, and terminate the program.\r\n        Test it on a good file (<b>simple-config.txt</b>) and two bad ones\r\n          (<b>simplebad1-config.txt</b> and <b>simplebad2-config.txt</b>).\r\n    <p>\r\n    <li>Enhance the program so that it also prompts the user for the name of\r\n          the heart data file too, reads and displays every value in this file\r\n          (prefaced by the sample number: <b>1</b> for the first signal,\r\n           <b>2</b> for the next, etc.), terminating the program when it\r\n          unsuccessfully tries to read a data value from the file (e.g., it\r\n          tries to read a non-integer value or it tries to read another value\r\n          when there is none).\r\n        Hint: this is the only loop that your program needs, and it should\r\n          include another <b>try</b>-<b>catch</b> statement that handles any\r\n          thrown exception by printing a message and terminating the\r\n          loop/program.\r\n        Test it using <b>simple-config.txt</b> and one a good file\r\n          (<b>simple-heart.txt</b>) and a bad one (<b>simplebad1-heart.txt</b>).\r\n    <p>\r\n    <li>Enhance the program so that it also terminates the loop if the\r\n          signal value is not between -100 and 100 inclusive, displaying\r\n          the appropriate message.\r\n        Test it using <b>simple-config.txt</b> and two bad files\r\n          (<b>simplebad2-heart.txt</b> and <b>simplebad3-heart.txt</b>).\r\n    <p>\r\n    <li>Enhance the program so that it displays on the console the message\r\n          <b>Make Decision</b> after reading enough sample signals to fill the\r\n               interval.\r\n        For example, if the interval is <b>10</b> samples, the ICD should read\r\n           and display the first <b>10</b> signals (numbered <b>1</b> through\r\n           <b>10</b>) and then display <b>Make Decision</b>; then it should\r\n            read and display the second <b>10</b> signals (numbered\r\n            <b>11</b> through <b>20</b>) and then display <b>Make Decision</b>\r\n            again, etc.\r\n        Test it using <b>simple-config.txt</b> and <b>simple-heart.txt</b>.\r\n    <p>\r\n    <li>Enhance the program so that it computes and displays the ZCC after it\r\n          reads each value from the heart data file.\r\n        This change will require two variables: one storing the value of the\r\n          <i>previous</i> signal and one storing the value of the\r\n          <i>current</i> signal; the <i>current</i> value becomes the\r\n          <i>previous</i> one at the end of each loop iteration.\r\n        Initially (before the loop even starts), set the <i>previous</i> value\r\n          to <b>0</b>.\r\n        Each iteration of the loop reads a new value for <i>current</i> from\r\n           the heart input file. \r\n        <p>\r\n        Also change the <b>Make Decision</b> message to display the current\r\n          ZCC (whose value it will actually use to check for bradycardia or\r\n          tachycardia).\r\n        Important: after each decision is made, the ICD should reset the ZCC\r\n          to <b>0</b>, as it begins  computing the ZCC for the next interval\r\n          of signals.\r\n        <p>\r\n        Test it using <b>simple-config.txt</b> and <b>simple-heart.txt</b>\r\n          and compare the results to the table of values above.\r\n        When you have verified that the right ZCC values appear in these\r\n          messages, remove (or comment out) the code that displays each signal,\r\n          and the ZCC for each new signal read.\r\n        <p>\r\n    <li>Enhance the program to display <b>Bradycardia Detected</b> if the ZCC\r\n          equals or falls below the threshold read from the configuration\r\n          file, and display <b>Tachycardia Detected</b> if the ZCC equals or\r\n          exceeds the threshold read from the configuration file.\r\n  </ol>\r\n  Test the final program using <b>regular-config.txt</b> and each of the\r\n     <b>regular-</b> input files.\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<!-- Extra Credit -->\r\n\r\n<a name=\"ExtraCredit\">\r\n<hr align=\"left\" width=\"33%\">\r\n<table cellspacing=\"0\" cellpadding=\"5\" border=\"0\" rules=\"none\" width=\"100%\">\r\n<tbody>\r\n<tr valign=\"top\">\r\n<td width =\"20%\"><b>Extra Credit</b></td>\r\n<td width =\"80%\">\r\n  The dice war problem has 1 point of extra credit.\r\n  To earn it, at the bottom of the main comment in the <b>DiceWar</b> class,\r\n    include a section labelled <b>Extra Credit</b>.\r\n  In this section, estimate the average number of dice rolls for a game\r\n    where each player starts out with 1,000,000 chips.\r\n  Explain the details of how you arrived at your estimate.\r\n  <p>\r\n  <b>Do not discuss your estimate with anyone but the student you are pairing\r\n    with.</b>\r\n</td>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n</table>\r\n</body>\r\n</html>\r\n", "id": 26110.0}