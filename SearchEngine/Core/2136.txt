{"text": "CompSci 161 Fall 2 14 Homework 7 Due Sunday November 23 Suppose we are given as input an array of n weights W i and a capacity C like in the knapsack problem but we are not given the array of benefits B i that the knapsack problem would normally have Instead we wish to find a subset of the weights whose total is less than C but is as close to C as possible Describe how to transform this problem into an equivalent input to the 1 knapsack problem such that the solution to your transformed knapsack input also is the optimal solution to the original input In the USA the most commonly used coins have values of 1 5 1 and 25 cents If you want to find as few coins as possible that add up to a certain amount of money you can just repeatedly use the largest coin possible until you have the desired total For example suppose you want to make exact change for 87 cents Then you can use three but not four quarters and the remaining amount is 12 cents Next you can use one but not two dimes and the remaining amount is 2 cents You can t use any nickels but you can use two pennies So in this example we get 87 25 25 25 1 1 1 six coins and there is no way of using fewer than six of these coins to get the same amount of money Now suppose that in the Democratic People s Republic of Algorithmstan they like multiples of two and three but multiples of five are unlucky So instead of the US system they use a different set of coins with values 1 8 12 and 27 DPRA cents Give an example where the US method of using the largest coin possible doesn t work for DPRA money Your answer should list a number of cents that you want to make exact change for the DPRA coins that add to that amount given by the largest coin possible method and a smaller number of DPRA coins that add to the same amount Give pseudocode that takes as input a number n and computes for each i from to n the minimum number of coins C i that are needed to make change for i cents in DPRA money Suppose that the array C i from part b has already been computed Give pseudocode that takes as input a number n and lists as output a set of C n DPRA coins that add to n What is the biggest number that you can obtain by inserting parentheses into the expression 1 9 8 7 6 5 4 3 2 1 You are only allowed to change the order in which these ten numbers are subtracted from each other not to put parentheses into strange places that change the meaning For instance the subexpression 6 5 4 could be parenthesized as 6 5 4 5 or 6 5 4 5 but not 6 5 4 54 Consider the following problem The input is an array of n positive numbers X i The output is a subset of the positions of the array that is well separated meaning that no two of the output positions are next to each other and that has as large a total value as possible For instance in the array X 5 4 1 3 the possible sets of numbers in well separated positions are 5 1 5 3 and 4 3 the largest total value of any of these sets is 5 3 8 Let Y i be the optimal value that can be achieved for the subproblem consisting of the first i numbers Write a recurrence giving the value of Y i in terms of the values of even smaller subproblems You do not need to do the remaining steps of converting this recurrence into a dynamic programming algorithm ", "_id": "http://www.ics.uci.edu/~eppstein/161/f14-hw7.html", "title": "compsci 161, fall 2014, homework 7", "html": "<html>\n<head>\n<title>CompSci 161, Fall 2014, Homework 7</title>\n<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n</head>\n<body>\n<h1>CompSci 161, Fall 2014, Homework 7</h1>\n\n<h2>Due Sunday, November 23</h2>\n\n<ol>\n<li><p>Suppose we are given as input an array of n weights W[i] and a capacity C (like in the knapsack problem), but we are not given the array of benefits B[i] that the knapsack problem would normally have. Instead, we wish to find a subset of the weights whose total is less than C, but is as close to C as possible. Describe how to transform this problem into an equivalent input to the 0-1 knapsack problem, such that the solution to your transformed knapsack input also is the optimal solution to the original input.</p></li>\n\n<li><p>In the USA, the most commonly used coins have values of $1$, $5$, $10$, and $25$ cents. If you want to find as few coins as possible that add up to a certain amount of money you can just repeatedly use the largest coin possible until you have the desired total. For example, suppose you want to make exact change for $87$ cents. Then you can use three but not four quarters, and the remaining amount is $12$ cents. Next you can use one but not two dimes, and the remaining amount is $2$ cents. You can't use any nickels, but you can use two pennies. So in this example we get $87=25+25+25+10+1+1$, six coins, and there is no way of using fewer than six of these coins to get the same amount of money.</p>\n\n<p>Now suppose that in the Democratic People's Republic of Algorithmstan they like multiples of two and three, but multiples of five are unlucky. So instead of the US system, they use a different set of coins with values $1$, $8$, $12$, and $27$ DPRA cents.</p>\n\n<ol type=\"a\">\n<li><p>Give an example where the US method of using the largest coin possible doesn't work for DPRA money. Your answer should list a number of cents that you want to make exact change for, the DPRA coins that add to that amount given by the largest-coin-possible method, and a smaller number of DPRA coins that add to the same amount.</p></li>\n\n<li><p>Give pseudocode that takes as input a number $n$ and computes, for each $i$ from $0$ to $n$, the minimum number of coins $C[i]$ that are needed to make change for $i$ cents in DPRA money.</p></li>\n\n<li><p>Suppose that the array $C[i]$ from part (b) has already been computed. Give pseudocode that takes as input a number $n$ and lists as output a set of $C[n]$ DPRA coins that add to $n$.</p></li></ol></li>\n\n<li><p>What is the biggest number that you can obtain by inserting parentheses into the expression $10-9-8-7-6-5-4-3-2-1$? You are only allowed to change the order in which these ten numbers are subtracted from each other, not to put parentheses into strange places that change the meaning. For instance, the subexpression $6-5-4$ could be parenthesized as $(6-5)-4=-5$ or $6-(5-4)=5$, but not $6(-5-4)=-54$.</p></li>\n</body>\n\n<li><p>Consider the following problem. The input is an array of $n$ positive numbers $X[i]$. The output is a subset of the positions of the array that is <i>well-separated</i>, meaning that no two of the output positions are next to each other, and that has as large a total value as possible. For instance, in the array $X=[5,4,1,3]$ the possible sets of numbers in well-separated positions are $\\{5,1\\}$, $\\{5,3\\}$, and $\\{4,3\\}$; the largest total value of any of these sets is $5+3=8$.</p>\n<p>Let $Y[i]$ be the optimal value that can be achieved for the subproblem consisting of the first $i$ numbers. Write a recurrence giving the value of $Y[i]$ in terms of the values of even smaller subproblems. (You do not need to do the remaining steps of converting this recurrence into a dynamic programming algorithm.)</p></li></ol>\n</body>\n</html>\n", "id": 2136.0}