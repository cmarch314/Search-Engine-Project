{"text": "Next Compiler Input Up The Compiler Previous Procedure Types Compiler Modes The compiler has several modes of operation each mode generating code with different properties The operating mode is controlled by a set of global flags which may be modified at any time even during the compilation so that a part of the program is compiled in a different mode These flags and the associated modes are listed below debug compile When this flag is on the compiler generates code which can be traced with the debugger This code can sometimes be significantly less efficient than the untraceable one and the generated code size is always significantly larger To generate optimised code this flag must be switched off To achieve this the predicate nodbgcomp can also be called and it also switches off the variable names flag occur check When this flag is on the compiled code will perform the occur check if necessary This means that every time a variable will be unified with a compound term that might already contain a reference to this variable the compound term will be scanned for this occurrence and if it is found the unification fails In this way the creation of infinite cyclic terms is impossible and thus the behaviour of the system is closer to the first order logic theory Unifications with the occur check may sometimes be very slow and most Prolog programs do not need it because no cyclic terms are created Note that this flag must be set both at compile time and at runtime in order to actually perform the checks dfid compile When this flag is on the compiler will generate code that keeps track of the number of ancestors of the current goal which is used by the library dfid to execute the bounded depth first search either as iterative deepening or plain depth limiting float precision This flag specifies if the compiler generates code for single or double precision floating point arithmetic It is recommended not to mix code compiled in different modes because single and double precision numbers do not unify and therefore may cause unexpected failures variable names ECLiPSe can remember the source variable names of the input variables When this flag is on the compiled predicates will keep the names of the source variables and will display them whenever the variables are printed In this case the usage of the global stack and code space is slightly higher to store the name and the efficiency of the code is marginally lower Setting this flag to check singletons has the same effect as on but additionally the compiler will issue warnings about variables which occur only once in a clause and whose names do not start with an underscore character all dynamic When this flag is on all procedures are compiled as dynamic ones and there is no equivalent static 1 declaration It can be used to port programs from older interpreters which rely heavily on the fact that all predicates in these interpreters were dynamic Another possible use is to switch it on at the beginning of a file that contains many dynamic predicates and switch it off at its end macro expansion This is in fact a parser flag is enables or disables the macro transformation see Chapter for the input source Next Compiler Input Up The Compiler Previous Procedure Types Micha Meier Mon Mar 4 12 11 45 MET 1996", "_id": "http://www.ics.uci.edu/~dechter/courses/ics-275a/fall-99/slides/node66.html", "title": "", "html": "<!DOCTYPE HTML PUBLIC \"-//W3O//DTD W3 HTML 2.0//EN\">\r\n<!Converted with LaTeX2HTML 95.1 (Fri Jan 20 1995) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds >\r\n<HEAD>\r\n<TITLE> Compiler Modes</TITLE>\r\n</HEAD>\r\n<BODY>\r\n<meta name=\"description\" value=\" Compiler Modes\">\r\n<meta name=\"keywords\" value=\"umsroot\">\r\n<meta name=\"resource-type\" value=\"document\">\r\n<meta name=\"distribution\" value=\"global\">\r\n<P>\r\n <BR> <HR><A NAME=tex2html3049 HREF=\"node67.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3047 HREF=\"node63.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3041 HREF=\"node65.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3051 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3050 HREF=\"node67.html\"> Compiler Input</A>\r\n<B>Up:</B> <A NAME=tex2html3048 HREF=\"node63.html\"> The Compiler</A>\r\n<B> Previous:</B> <A NAME=tex2html3042 HREF=\"node65.html\"> Procedure Types</A>\r\n<BR> <HR> <P>\r\n<H1><A NAME=SECTION00630000000000000000> Compiler Modes</A></H1>\r\n<P>\r\nThe compiler has several modes of operation, each mode\r\ngenerating code with different properties.\r\nThe operating mode is controlled by a set of global flags,\r\nwhich may be modified at any time, even during the compilation\r\nso that a part of the program is compiled in a different mode.\r\nThese flags and the associated modes are listed below.\r\n<P>\r\n<DL ><DT>\r\n<DD> debug_compile\r\nWhen this flag is <b> on</b>, the compiler generates code which can\r\nbe traced with the debugger.\r\nThis code can sometimes be significantly less efficient\r\nthan the untraceable one, and the generated code size\r\nis always significantly larger.\r\nTo generate optimised code, this flag must be switched off.\r\nTo achieve this, the predicate\r\n<PRE>:- nodbgcomp.\r\n</PRE>\r\ncan also be called, and it also switches off the <b> variable_names</b>\r\nflag.\r\n<P>\r\n<DT>\r\n<DD> <b> occur_check</b>\r\n<A NAME=922>&#160;</A>\r\nWhen this flag is <b> on</b>, the compiled code will perform\r\nthe <i> occur check</i> if necessary.\r\nThis means that every time a variable will be unified\r\nwith a compound term that might already contain a reference\r\nto this variable, the compound term will be scanned for this occurrence\r\nand if it is found, the unification fails.\r\nIn this way, the creation of infinite (cyclic) terms is impossible\r\nand thus the behaviour of the system is closer\r\nto the first order logic theory.\r\nUnifications with the occur check may sometimes be very slow,\r\nand most Prolog programs do not need it, because\r\nno cyclic terms are created.\r\nNote that this flag must be set both at compile time and at runtime in order\r\nto actually perform the checks.\r\n<P>\r\n<DT>\r\n<DD> dfid_compile\r\n<A NAME=926>&#160;</A>\r\nWhen this flag is <b> on</b>, the compiler will generate code that\r\nkeeps track of the number of ancestors of the current goal,\r\nwhich is used by the library <b> dfid</b> to execute\r\n<A NAME=929>&#160;</A>\r\nthe <b> bounded depth-first search</b>, either as iterative deepening\r\nor plain depth limiting.\r\n<P>\r\n<DT>\r\n<DD> float_precision\r\nThis flag specifies if the compiler generates code for <tt> single</tt>\r\nor <tt> double</tt> precision floating point arithmetic. It is recommended\r\nnot to mix code compiled in different modes, because single and double\r\nprecision numbers do not unify and therefore may cause unexpected failures.\r\n<P>\r\n<DT>\r\n<DD> variable_names\r\n<A NAME=935>&#160;</A>\r\n<A NAME=tex2html258 HREF=\"http://www.ecrc.de/eclipse/eclipse.html\"><b> ECLiPSe</b></A>\r\n  can remember the source variable names of the input variables.\r\nWhen this flag is <b> on</b>, the compiled predicates\r\nwill keep the names of the source variables and will display\r\nthem whenever the variables are printed.\r\nIn this case the usage of the global stack and code space is slightly higher\r\n(to store the name), and the efficiency of the code is marginally lower.\r\n<A NAME=937>&#160;</A>\r\nSetting this flag to check_singletons has the same effect as <b> on</b>,\r\nbut additionally, the compiler will issue warnings about variables which occur\r\nonly once in a clause and whose names do not start with an underscore character.\r\n<P>\r\n<DT>\r\n<DD> all_dynamic\r\nWhen this flag is <b> on</b>, all procedures are compiled\r\nas dynamic ones (and there is no equivalent <b> static/1</b>\r\ndeclaration).\r\nIt can be used to port programs from older interpreters\r\nwhich rely heavily on the fact that all predicates\r\nin these interpreters were dynamic.\r\nAnother possible use is to switch it on at the beginning of a file\r\nthat contains many dynamic predicates and switch it off at its end.\r\n<P>\r\n<DT>\r\n<DD> macro_expansion\r\nThis is in fact a parser flag, is enables or disables the macro transformation\r\n(see Chapter <A HREF=\"node149.html#chapmacros\"><IMG ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ecrc.de/eclipse/new_icons//cross_ref_motif.gif\"></A>) for the input source.\r\n<P>\r\n </DL><BR> <HR><A NAME=tex2html3049 HREF=\"node67.html\"><IMG ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ecrc.de/eclipse/new_icons//next_motif.gif\"></A>   <A NAME=tex2html3047 HREF=\"node63.html\"><IMG ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ecrc.de/eclipse/new_icons//up_motif.gif\"></A>   <A NAME=tex2html3041 HREF=\"node65.html\"><IMG ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ecrc.de/eclipse/new_icons//previous_motif.gif\"></A>      <A NAME=tex2html3051 HREF=\"node321.html\"><IMG ALIGN=BOTTOM ALT=\"index\" SRC=\"http://www.ecrc.de/eclipse/new_icons//index_motif.gif\"></A>   <BR>\r\n<B> Next:</B> <A NAME=tex2html3050 HREF=\"node67.html\"> Compiler Input</A>\r\n<B>Up:</B> <A NAME=tex2html3048 HREF=\"node63.html\"> The Compiler</A>\r\n<B> Previous:</B> <A NAME=tex2html3042 HREF=\"node65.html\"> Procedure Types</A>\r\n<BR> <HR> <P>\r\n<BR> <HR>\r\n<P><ADDRESS>\r\n<I>Micha Meier <BR>\r\nMon Mar  4 12:11:45 MET 1996</I>\r\n</ADDRESS>\r\n</BODY>\r\n", "id": 30585.0}