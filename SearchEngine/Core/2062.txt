{"text": "Homework 4 due Friday Wk 5 required problemstopic1CLR Exercise 9 3 7 on page 223 Describe an O n time algorithm that given a set S of n distinct numbers and a positive integer k n determines the k numbers in S that are closest to the median of S median selection2CLR Exercise 4 5 1 on page 96 Use the master method to give tight asymptotic bounds for the following recurrences a T n 2T n 4 1 b T n 2T n 4 n c T n 2T n 4 n d T n 2T n 4 n2 master method3CLR Exercise 4 5 2 on page 97 Professor Caesar wishes to develop a matrix multiplication algorithm that is asymptotically faster than Strassen s algorithm His algorithm will use the divide and conquer method dividing each matrix into pieces of size n 4 n 4 and the divide and combine steps together will take n2 time He needs to determine how many subproblems his algorithm has to create in order to beat Strassen s algorithm If his algorithm creates a subproblems then the recurrence for the running time T n becomes T n aT n 4 n2 What is the largest integer value of a for which Professor Caesar s algorithm would be asymptotically faster than Strassen s algorithm master method suggested problems topic4CLR Exercise 9 3 8 on page 223median selection5CLR Exercise 9 3 9 on pages 223 224median selection6CLR Problem 4 1 on page 1 7solve recurrences7CLR Problem 4 3 on page 1 8solve recurrences8Baase Exercise 4 49 on page 216solve recurrence9 CLR Problem 4 5 on pages 1 9 11 recursion1 DPV exercise 2 4 on p 71 Suppose you are choosing between the following three algorithms Algorithm A solves problems by dividing them into five subproblems of half the size recursively solving each subproblem and then combining the solutions in linear time Algorithm B solves problems of size n by recursively solving two subproblems of size n 1 and then combining the solutions in constant time Algorithm C solves problems of size n by dividing them into nine subproblems of size n 3 recursively solving each subproblem and then combining the solutions in O n2 time What are the running times of each of these algorithms in big O notation and which would you choose solve recurrences11DPV exercise 2 16 on p 73 You are given an infinite array A in which the first n cells contain integers in sorted order and the rest of the cells are filled with You are not given the value of n Describe an algorithm that takes an integer x as input and finds a position in the array containing x if such a position exists in O log n time algorithm design Dan Hirschberg Computer Science Department University of California Irvine CA 92697 3435 dan at ics uci edu Last modified Nov 1 2 14", "_id": "http://www.ics.uci.edu/~dan/class/161/hw4.html", "title": " compsci 161 homework #4 ", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\n      \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n<HTML><HEAD>\n<TITLE> CompSci 161 Homework #4 </TITLE>\n</HEAD><BODY>\n\n<!-- <H2> Homework #4 -- due Wednesday Wk 5 </H2> -->\n<H2 align=center> Homework #4 -- due Friday Wk 5 </H2>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=red>required problems</font></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>1</td>\n    <td>CLR Exercise 9.3-7 on page 223\n      <BR>Describe an <I>O(n)</I>-time algorithm that, given a set <I>S</I>\n       of <I>n</I> distinct numbers and a positive integer <I>k</I> &le; <I>n</I>,\n       determines the <I>k</I> numbers in <I>S</I> that are closest to the median\n       of <I>S</I>.\n      </td>\n    <td>median selection</td>\n<tr><td align=center>2</td>\n    <td>CLR Exercise 4.5-1 on page 96\n      <BR>Use the master method to give tight asymptotic bounds for the\n       following recurrences.\n      <BR><B>a.</B> <I>T</I>(<I>n</I>) = 2<I>T</I>(<I>n</I>/4) + 1.\n      <BR><B>b.</B> <I>T</I>(<I>n</I>) = 2<I>T</I>(<I>n</I>/4) + &radic;<I>n</I>.\n      <BR><B>c.</B> <I>T</I>(<I>n</I>) = 2<I>T</I>(<I>n</I>/4) + <I>n</I>.\n      <BR><B>d.</B> <I>T</I>(<I>n</I>) = 2<I>T</I>(<I>n</I>/4) + <I>n</I><sup>2</sup>.\n      </td>\n    <td>master method</td>\n<tr><td align=center>3</td>\n    <td>CLR Exercise 4.5-2 on page 97\n       <BR>\n       Professor Caesar wishes to develop a matrix-multiplication algorithm that is\n       asymptotically faster than Strassen's algorithm.  His algorithm will use the\n       divide-and-conquer method, dividing each matrix into pieces of size\n       <I>n</I>/4 &times; <I>n</I>/4, and the divide and combine steps together will\n       take &theta;(<I>n</I><sup>2</sup>) time.  He needs to determine how many\n       subproblems his algorithm has to create in order to beat Strassen's algorithm.\n       If his algorithm creates <I>a</I> subproblems, then the recurrence for the\n       running time <I>T(n)</I> becomes\n       <I>T(n)</I>&nbsp;=&nbsp;<I>aT(n/4)</I>+&theta;(<I>n</I><sup>2</sup>).\n       What is the largest integer value of <I>a</I> for which Professor Caesar's\n       algorithm would be asymptotically faster than Strassen's algorithm?\n       </td>\n    <td>master method</td>\n</table>\n\n<P>\n\n<table border=1>\n<tr><th width=\"5%\">#</th>\n    <th width=\"70%\"><font color=\"#009900\">suggested problems</font>\n<!--              -- not to be turned in  --></th>\n    <th width=\"25%\">topic</th>\n<tr><td align=center>4</td>\n    <td>CLR Exercise 9.3-8 on page 223</td>\n    <td>median selection</td>\n<tr><td align=center>5</td>\n    <td>CLR Exercise 9.3-9 on pages 223-224</td>\n    <td>median selection</td>\n<tr><td align=center>6</td>\n    <td>CLR Problem 4-1 on page 107</td>\n    <td>solve recurrences</td>\n<tr><td align=center>7</td>\n    <td>CLR Problem 4-3 on page 108</td>\n    <td>solve recurrences</td>\n<tr><td align=center>8</td>\n    <td>Baase Exercise 4.49 on page 216</td>\n    <td>solve recurrence</td>\n<tr><td align=center>9<font color=blue>*</font></td>\n    <td>CLR Problem 4-5 on pages 109-110</td>\n    <td>recursion</td>\n<tr><td align=center>10</td>\n    <td>DPV exercise 2.4 on p.71 <BR>\n        Suppose you are choosing between the following three algorithms:\n        <UL>\n         <LI>Algorithm A solves problems by dividing them into\n             five subproblems of half the size,\n             recursively solving each subproblem,\n             and then combining the solutions in linear time.\n         <LI>Algorithm B solves problems of size <I>n</I> by\n             recursively solving two subproblems of size <I>n</I>-1\n             and then combining the solutions in constant time.\n         <LI>Algorithm C solves problems of size <I>n</I> by dividing them into\n             nine subproblems of size <I>n</I>/3,\n             recursively solving each subproblem,\n             and then combining the solutions in <I>O</I>(<I>n</I><sup>2</sup>) time.\n        </UL>\n        What are the running times of each of these algorithms\n        (in big-<I>O</I> notation), and which would you choose?\n    <td>solve recurrences</td>\n<tr><td align=center>11</td>\n    <td>DPV exercise 2.16 on p.73 <BR>\n        You are given an infinite array <I>A</I>[*], in which\n        the first <I>n</I> cells contain integers in sorted order\n        and the rest of the cells are filled with &infin;.&nbsp;\n        You are <I>not</I> given the value of <I>n</I>.&nbsp;\n        Describe an algorithm that takes an integer <I>x</I> as input\n        and finds a position in the array containing <I>x</I>,\n        if such a position exists, in <I>O</I>(log&nbsp;<I>n</I>) time.\n    <td>algorithm design</td>\n</table>\n\n<HR>\n<A HREF=\"http://www.ics.uci.edu/~dan\">\nDan Hirschberg </A> <BR>\n<ADDRESS>\nComputer Science Department<BR>\nUniversity of California, Irvine, CA 92697-3435\n</ADDRESS>\n<tt>dan at ics.uci.edu</tt><br>\n\nLast modified: Nov 10, 2014\n</BODY></HTML>\n", "id": 2062.0}