{"text": "Navigation Up Table of Contents Bibliography Index Title Page PolyhedronItems 3 Definition The PolyhedronItems 3 concept extends the HalfedgeDSItems concept on page In addition to the requirements stated there a model for this concept must fulfill the following requirements for the local PolyhedronItems 3 Vertex wrapper Refs Traits Vertex type and PolyhedronItems 3 Face wrapper Refs Traits Face type in order to support the point for vertices and the optional plane equation for facets Note that the items class uses face instead of facet Only the polyhedral surface renames faces to facets Refines HalfedgeDSItems Types in PolyhedronItems 3 Vertex wrapper Refs Traits Vertex Vertex Point point type stored in vertices A HalfedgeDS has no dimension so this type is named Point and not Point 3 Vertex Supports vertex point CGAL Tag true A point is always required Operations Point v point const Point v point const point Types in PolyhedronItems 3 Face wrapper Refs Traits Face Types for optionally associated geometry in faces If it is not supported the respective type has to be defined although it can be an arbitrary dummy type such as void or Tag false Face Plane plane type stored in faces A HalfedgeDS has no dimension so this type is named Plane and not Plane 3 Face Supports face plane either CGAL Tag true or CGAL Tag false Operations required if Supports face plane CGAL Tag true Plane f plane const Plane f plane const plane equation Has Models CGAL Polyhedron items 3 CGAL Polyhedron min items 3 See Also CGAL Polyhedron 3 Traits HalfedgeDSItems CGAL HalfedgeDS items 2 CGAL HalfedgeDS vertex base Refs CGAL HalfedgeDS halfedge base Refs CGAL HalfedgeDS face base Refs Example We define our own items class based on the available CGAL HalfedgeDS face base base class for faces We derive the the Halfedge wrapper without further modifications from the CGAL HalfedgeDS items 2 replace the Face wrapper definition with our new definition and also replace the Vertex wrapper with a definition that uses Point 3 instead of Point 2 as point type The result is a model for the PolyhedronItems 3 concept similar to the available CGAL Polyhedron items 3 class See also there for another illustrative example include CGAL HalfedgeDS bases h struct My items public CGAL HalfedgeDS items 2 template class Refs class Traits struct Vertex wrapper typedef typename Traits Point 3 Point typedef CGAL HalfedgeDS vertex base Refs CGAL Tag true Point Vertex template class Refs class Traits struct Face wrapper typedef typename Traits Plane 3 Plane typedef CGAL HalfedgeDS face base Refs CGAL Tag true Plane Face Next Polyhedron items 3 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Polyhedron_ref/Concept_PolyhedronItems_3.html", "title": "polyhedronitems_3", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Polyhedron_ref/PolyhedronItems_3.tex' -->\n<html> <head>  \n<title>PolyhedronItems_3</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_863\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_841\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_PolyhedronItems_3\"></A>\n<h2><I>PolyhedronItems_3</I></h2>\n\n\n<H3>Definition</H3>\n<P>\n\nThe <I><A HREF=\"Concept_PolyhedronItems_3.html#Cross_link_anchor_863\">PolyhedronItems_3</A></I> concept extends the <I><A HREF=\"../HalfedgeDS_ref/Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I> concept on\npage&nbsp;<A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_items_2.html#pageHalfedgeDSitemsRef\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>. In addition to the requirements\nstated there, a model for this concept must fulfill the following\nrequirements for the local\n<I><A HREF=\"Concept_PolyhedronItems_3.html#Cross_link_anchor_863\">PolyhedronItems_3</A>::Vertex_wrapper&lt;Refs,Traits&gt;::Vertex</I> type and\n<I><A HREF=\"Concept_PolyhedronItems_3.html#Cross_link_anchor_863\">PolyhedronItems_3</A>::Face_wrapper&lt;Refs,Traits&gt;::Face</I> type\nin order to support the point for vertices and the optional plane\nequation for facets. Note that the items class uses face instead of\nfacet. Only the polyhedral surface renames faces to facets.\n<P>\n\n<H3>Refines</H3>\n<P>\n\n<I><A HREF=\"../HalfedgeDS_ref/Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I>\n<P>\n\n<A NAME=\"Index_anchor_842\"></A>\n<P>\n\n<H3>Types in <I>PolyhedronItems_3::Vertex_wrapper&lt;Refs,Traits&gt;::Vertex</I></H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Vertex::Point\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    point type stored in vertices. A <I><A HREF=\"../HalfedgeDS_ref/Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>\n    has no dimension, so this type is named <I>Point</I> and not <I><A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Vertex::Supports_vertex_point\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>.\n    A point is always required.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point__point69;\"></A>\nPoint&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    v.point () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Point__point69_const;\"></A>\nconst Point&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    v.point () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    point.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<A NAME=\"Index_anchor_843\"></A>\n<P>\n\n<H3>Types in <I>PolyhedronItems_3::Face_wrapper&lt;Refs,Traits&gt;::Face</I></H3>\n<P>\n\nTypes for (optionally) associated geometry in faces. If it is not\nsupported the respective type has to be defined, although it can be\nan arbitrary dummy type, such as <I>void*</I> or <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_476\">Tag_false</A></I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Face::Plane\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    plane type stored in faces.  A <I><A HREF=\"../HalfedgeDS_ref/Concept_HalfedgeDS.html#Cross_link_anchor_873\">HalfedgeDS</A></I>\n    has no dimension, so this type is named <I>Plane</I> and not <I><A HREF=\"../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A></I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    Face::Supports_face_plane\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    either <I><A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A></I>\n    or <I><A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_475\">CGAL::Tag_false</A></I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations required if <I>Supports_face_plane</I> <MATH><I> <IMG BORDER=0 WIDTH=11 HEIGHT=9 ALIGN=BOTTOM SRC=\"cc_equiv.gif\"> </I></MATH> \n           <I>CGAL::Tag_true</I></H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Plane__plane69;\"></A>\nPlane&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    f.plane () \n        </I></NOBR>\n        </TD>\n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_Plane__plane69_const;\"></A>\nconst Plane&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    f.plane () const\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    plane equation.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Polyhedron_items_3.html#Cross_link_anchor_864\">CGAL::Polyhedron_items_3</A></I><BR>\n\n<I><A HREF=\"Class_Polyhedron_min_items_3.html#Cross_link_anchor_866\">CGAL::Polyhedron_min_items_3</A></I>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Class_Polyhedron_3.html#Cross_link_anchor_853\">CGAL::Polyhedron_3</A>&lt;Traits&gt;</I><BR>\n\n<I><A HREF=\"../HalfedgeDS_ref/Concept_HalfedgeDSItems.html#Cross_link_anchor_876\">HalfedgeDSItems</A></I><BR>\n\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_items_2.html#Cross_link_anchor_893\">CGAL::HalfedgeDS_items_2</A></I><BR>\n\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_vertex_base.html#Cross_link_anchor_903\">CGAL::HalfedgeDS_vertex_base</A>&lt;Refs&gt;</I><BR>\n\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_halfedge_base.html#Cross_link_anchor_889\">CGAL::HalfedgeDS_halfedge_base</A>&lt;Refs&gt;</I><BR>\n\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_face_base.html#Cross_link_anchor_885\">CGAL::HalfedgeDS_face_base</A>&lt;Refs&gt;</I>\n<P>\n\n<H3>Example</H3>\n<P>\n\nWe define our own items class based on the available\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_face_base.html#Cross_link_anchor_885\">CGAL::HalfedgeDS_face_base</A></I> base class for faces. We derive the\nthe <I>Halfedge_wrapper</I> without further modifications from the\n<I><A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_items_2.html#Cross_link_anchor_893\">CGAL::HalfedgeDS_items_2</A></I>, replace the <I>Face_wrapper</I>\ndefinition with our new definition, and also replace the\n<I>Vertex_wrapper</I> with a definition that uses <I><A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A></I> instead\nof <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> as point type. The result is a model for the\n<I><A HREF=\"Concept_PolyhedronItems_3.html#Cross_link_anchor_863\">PolyhedronItems_3</A></I> concept similar to the available\n<I><A HREF=\"Class_Polyhedron_items_3.html#Cross_link_anchor_864\">CGAL::Polyhedron_items_3</A></I> class. See also there for another\nillustrative example.\n<P>\n\n<pre class=\"ExampleCode\">\n#include &lt;CGAL/HalfedgeDS_bases.h&gt;\n\nstruct My_items : public <A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_items_2.html#Cross_link_anchor_893\">CGAL::HalfedgeDS_items_2</A> {\n    template &lt; class Refs, class Traits&gt;\n    struct Vertex_wrapper {\n        typedef typename Traits::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A> Point;\n        typedef <A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_vertex_base.html#Cross_link_anchor_903\">CGAL::HalfedgeDS_vertex_base</A>&lt; Refs, <A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A>, Point&gt; Vertex;\n    };\n    template &lt; class Refs, class Traits&gt;\n    struct Face_wrapper {\n        typedef typename Traits::<A HREF=\"../Kernel_23_ref/Class_Plane_3.html#Cross_link_anchor_72\">Plane_3</A> Plane;\n        typedef <A HREF=\"../HalfedgeDS_ref/Class_HalfedgeDS_face_base.html#Cross_link_anchor_885\">CGAL::HalfedgeDS_face_base</A>&lt; Refs, <A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_477\">CGAL::Tag_true</A>, Plane&gt;   Face;\n    };\n};\n</pre>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Polyhedron_items_3.html\"><I>Polyhedron_items_3</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_28!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38468.0}