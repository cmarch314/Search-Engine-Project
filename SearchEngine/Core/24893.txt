{"text": "Test of Closest Pair Data Structures Multifragment TSP heuristic in R2 Brute ForceNeighborsQuadtreeConga LineMultiCongaFastPairn 25 8 89s 36s 21s1 5 s 49s 22s5 8 48s1 56s1 7s7 83s2 5s1 4s1 667 6 s6 48s4 77s4 36s9 3s4 33s2 31 45s 214 28s45 73s2 96s4 141 75s 1195 54s211 4s98 9s8 592 23s 912 9s425 53s16 2417 69s 3858 78s18 13s A traveling salesman tour was formed by starting with fragments consisting of isolated points and repeatedly choosing the shortest edge combining a pair of fragments Points were placed uniformly at random in the unit hypercube Times include only the construction of the closest pair data structure and algorithm execution not the initial point placement and are averages over ten runs The quadtree data structure was only run on data sets of 1 or fewer points due to its high storage requirements Code was written in C compiled and optimized by Metrowerks Codewarrior 1 and run on a 2 MHz PowerPC 6 3e processor Apple Powerbook 34 c ", "_id": "http://www.ics.uci.edu/~eppstein/projects/pairs/Data/m220/", "title": "multifragment tsp heuristic in r^20", "html": "<HTML>\n<HEAD>\n<TITLE>Multifragment TSP heuristic in R^20</TITLE>\n</HEAD>\n\n<BODY>\n<H1><A HREF=\"../\">Test of Closest Pair Data Structures</A></H1>\n<H2>Multifragment TSP heuristic in R<sup>20</sup></H2>\n\n<TABLE BORDER=1>\n<TR ALIGN=RIGHT><TD></TD>\n    <TD>Brute&nbsp;Force</TD>\n    <TD>Neighbors</TD>\n    <TD>Quadtree</TD>\n    <TD>Conga&nbsp;Line</TD>\n    <TD>MultiConga</TD>\n    <TD>FastPair</TD></TR>\n<TR ALIGN=RIGHT><TD><I>n</I>&nbsp;=&nbsp;250</TD>\n    <TD><A HREF=\"b250\">8.89s</A></TD>\n    <TD><A HREF=\"n250\">0.36s</A></TD>\n    <TD><A HREF=\"q250\"><B>0.21s</B></A></TD>\n    <TD><A HREF=\"c250\">1.50s</A></TD>\n    <TD><A HREF=\"m250\">0.49s</A></TD>\n    <TD><A HREF=\"f250\">0.22s</A></TD></TR>\n<TR ALIGN=RIGHT><TD>500</TD>\n    <TD><A HREF=\"b500\">80.48s</A></TD>\n    <TD><A HREF=\"n500\">1.56s</A></TD>\n    <TD><A HREF=\"q500\">1.07s</A></TD>\n    <TD><A HREF=\"c500\">7.83s</A></TD>\n    <TD><A HREF=\"m500\">2.05s</A></TD>\n    <TD><A HREF=\"f500\"><B>1.04s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>1000</TD>\n    <TD><A HREF=\"b1000\">667.60s</A></TD>\n    <TD><A HREF=\"n1000\">6.48s</A></TD>\n    <TD><A HREF=\"q1000\">4.77s</A></TD>\n    <TD><A HREF=\"c1000\">40.36s</A></TD>\n    <TD><A HREF=\"m1000\">9.03s</A></TD>\n    <TD><A HREF=\"f1000\"><B>4.33s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>2000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n2000\">31.45s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c2000\">214.28s</A></TD>\n    <TD><A HREF=\"m2000\">45.73s</A></TD>\n    <TD><A HREF=\"f2000\"><B>20.96s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>4000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n4000\">141.75s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"c4000\">1195.54s</A></TD>\n    <TD><A HREF=\"m4000\">211.04s</A></TD>\n    <TD><A HREF=\"f4000\"><B>98.09s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>8000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n8000\">592.23s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"m8000\">912.09s</A></TD>\n    <TD><A HREF=\"f8000\"><B>425.53s</B></A></TD></TR>\n<TR ALIGN=RIGHT><TD>16000</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"n16000\">2417.69s</A></TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><A HREF=\"m16000\">3858.78s</A></TD>\n    <TD><A HREF=\"f16000\"><B>1800.13s</B></A></TD></TR>\n</TABLE>\n\n<P>A traveling salesman tour was formed by starting with fragments \nconsisting of isolated points, and repeatedly choosing the shortest edge \ncombining a pair of fragments. Points were placed \nuniformly at random in the unit hypercube.Times include only the \nconstruction of the closest pair data structure and algorithm execution \n(not the initial point placement) and are averages over ten runs.  The \nquadtree data structure was only run on data sets of 1000 or fewer points \ndue to its high storage requirements.  Code was written in C++, compiled \nand optimized by Metrowerks Codewarrior 10, and run on a 200MHz PowerPC \n603e processor (Apple Powerbook 3400c).\n</BODY>\n</HTML>", "id": 24893.0}