{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 3Kernel Geometry 3 1 Points and Vectors In CGAL we strictly distinguish between points vectors and directions A point is a point in the Euclidean space d a vector is the difference of two points p2 p1 and denotes the direction and the distance from p1 to p2 in the vector space d and a direction is a vector where we forget about its length They are different mathematical concepts For example they behave different under affine transformations and an addition of two points is meaningless in affine geometry By putting them in different classes we not only get cleaner code but also type checking by the compiler which avoids ambiguous expressions Hence it pays twice to make this distinction CGAL defines a symbolic constant ORIGIN of type Origin which denotes the point at the origin This constant is used in the conversion between points and vectors Subtracting it from a point p results in the locus vector of p double coord 1 1 1 1 Point d Cartesian d double p 4 coord coord 4 q 4 Vector d Cartesian d double v 4 v p ORIGIN q ORIGIN v assert p q In order to obtain the point corresponding to a vector v you simply have to add v to ORIGIN If you want to determine the point q in the middle between two points p1 and p2 you can write1 q p 1 p 2 p 1 2 Note that these constructions do not involve any performance overhead for the conversion with the currently available representation classes 3 2 Kernel Objects Besides points Point d R vectors Vector d R and directions Direction d R CGAL provides lines rays segments hyperplanes and spheres Lines Line d R in CGAL are oriented A ray Ray d R is a semi infinite interval on a line and this line is oriented from the finite endpoint of this interval towards any other point in this interval A segment Segment d R is a bounded interval on a directed line and the endpoints are ordered so that they induce the same direction as that of the line Hyperplanes are affine subspaces of dimension d 1 in d passing through d points Hyperplanes are oriented and partition space into a positive side and a negative side In CGAL there are no special classes for halfspaces Halfspaces are supposed to be represented by oriented hyperplanes All kernel objects are equality comparable via operator and operator For those oriented objects whose orientation can be reversed segments lines hyperplanes spheres there is also a global function weak equality that allows to test for point set equality disregarding the orientation 3 3 Orientation and Relative Position Geometric objects in CGAL have member functions that test the position of a point relative to the object Full dimensional objects and their boundaries are represented by the same type e g halfspaces and hyperplanes are not distinguished neither are balls and spheres Such objects split the ambient space into two full dimensional parts a bounded part and an unbounded part e g spheres or two unbounded parts e g hyperplanes By default these objects are oriented i e one of the resulting parts is called the positive side the other one is called the negative side Both of these may be unbounded For these objects there is a function oriented side that determines whether a test point is on the positive side the negative side or on the oriented boundary These function returns a value of type Oriented side Those objects that split the space in a bounded and an unbounded part have a member function bounded side with return type Bounded side If an object is lower dimensional e g a segment in d dimensional space there is only a test whether a point belongs to the object or not This member function which takes a point as an argument and returns a boolean value is called has on Footnotes 1 you might call midpoint p 1 p 2 instead Next chapter Predicates and Constructions Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Kernel_d/Chapter_kernel_geometry_d.html", "title": "kernel geometry", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Kernel_d/kernel_geometry_d.tex' -->\n<html> <head>  \n<title>Kernel Geometry</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_kernel_geometry_d.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_3\"></a>\n  \n<h1>Chapter 3<BR>Kernel Geometry</h1>\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>3.1&nbsp;&nbsp;&nbsp;Points and Vectors</h2>\n\nIn C<SMALL>GAL</SMALL>, we strictly distinguish between points, vectors and\ndirections.  A <I>point</I> is a point in the Euclidean space <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>d</SUP></I></MATH>, a\n<I>vector</I> is the difference of two points <MATH><I>p<SUB>2</SUB></I></MATH>, <MATH><I>p<SUB>1</SUB></I></MATH> and denotes\nthe direction and the distance from <MATH><I>p<SUB>1</SUB></I></MATH> to <MATH><I>p<SUB>2</SUB></I></MATH> in the vector space\n<MATH><I> <IMG BORDER=0 WIDTH=13 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_R.gif\"> <SUP>d</SUP></I></MATH>, and a <I>direction</I> is a vector where we forget about its\nlength.  They are different mathematical concepts. For example, they\nbehave different under affine transformations and an addition of two\npoints is meaningless in affine geometry.  By putting them in\ndifferent classes we not only get cleaner code, but also type checking\nby the compiler which avoids ambiguous expressions. Hence, it pays\ntwice to make this distinction.\n<P>\n\nC<SMALL>GAL</SMALL> defines a symbolic constant <I><A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I> of type\n<I><A HREF=\"../Kernel_23_ref/Class_Origin.html#Cross_link_anchor_139\">Origin</A></I> which denotes the point at the origin. This constant is\nused in the conversion between points and vectors. Subtracting it from\na point <MATH><I>p</I></MATH> results in the locus vector of <MATH><I>p</I></MATH>.\n<P>\n\n<PRE>\n  double coord[] = {1.0, 1.0, 1.0, 1.0};\n  <A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt; Cartesian_d&lt;double&gt; &gt;  p(4,coord,coord+4), q(4);\n  <A HREF=\"../Kernel_d_ref/Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt; Cartesian_d&lt;double&gt; &gt;  v(4);\n  v = p - <A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A>;\n  q = <A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A> + v;  \n  assert( p == q );\n</PRE>\n<P>\n\nIn order to obtain the point corresponding to a vector <MATH><I>v</I></MATH> you simply\nhave to add <MATH><I>v</I></MATH> to <I><A HREF=\"../Kernel_23_ref/Constant_ORIGIN.html#Cross_link_anchor_141\">ORIGIN</A></I>. If you want to determine\nthe point <MATH><I>q</I></MATH> in the middle between two points <MATH><I>p<SUB>1</SUB></I></MATH> and <MATH><I>p<SUB>2</SUB></I></MATH>, you can \nwrite<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>\n<P>\n\n<PRE>\n  q = p_1 + (p_2 - p_1) / 2.0;\n</PRE>\n<P>\n\nNote that these constructions do not involve any performance overhead\nfor the conversion with the currently available representation\nclasses.\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>3.2&nbsp;&nbsp;&nbsp;Kernel Objects</h2>\n<P>\n\nBesides points (<I><A HREF=\"../Kernel_d_ref/Class_Point_d.html#Cross_link_anchor_487\">Point_d</A>&lt;R&gt;</I>), vectors (<I><A HREF=\"../Kernel_d_ref/Class_Vector_d.html#Cross_link_anchor_489\">Vector_d</A>&lt;R&gt;</I>), and\ndirections (<I><A HREF=\"../Kernel_d_ref/Class_Direction_d.html#Cross_link_anchor_491\">Direction_d</A>&lt;R&gt;</I>), C<SMALL>GAL</SMALL> provides lines, rays,\nsegments, hyperplanes, and spheres.\n<P>\n\nLines (<I><A HREF=\"../Kernel_d_ref/Class_Line_d.html#Cross_link_anchor_493\">Line_d</A>&lt;R&gt;</I>) in C<SMALL>GAL</SMALL> are oriented.  A ray\n(<I><A HREF=\"../Kernel_d_ref/Class_Ray_d.html#Cross_link_anchor_495\">Ray_d</A>&lt;R&gt;</I>) is a semi-infinite interval on a line, and this line\nis oriented from the finite endpoint of this interval towards any\nother point in this interval. A segment (<I><A HREF=\"../Kernel_d_ref/Class_Segment_d.html#Cross_link_anchor_497\">Segment_d</A>&lt;R&gt;</I>) is a\nbounded interval on a directed line, and the endpoints are ordered so\nthat they induce the same direction as that of the line.\n<P>\n\nHyperplanes are affine subspaces of dimension <MATH><I>d-1</I></MATH> in <MATH><I> <IMG BORDER=0 WIDTH=12 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathbb_E.gif\"> <SUP>d</SUP></I></MATH>, passing\nthrough <MATH><I>d</I></MATH> points.  Hyperplanes are oriented and partition space into\na positive side and a negative side.  In C<SMALL>GAL</SMALL>, there are no special\nclasses for halfspaces.  Halfspaces are supposed to be represented by\noriented hyperplanes. All kernel objects are equality comparable via\n<I>operator==</I> and <I>operator!=</I>. For those oriented objects\nwhose <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> can be reversed (segments, lines, hyperplanes,\nspheres) there is also a global function <I>weak_equality</I> that\nallows to test for point set equality disregarding the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>.\n<P>\n\n<a name=\"Section_3\"></a>\n        \n<h2>3.3&nbsp;&nbsp;&nbsp;Orientation and Relative Position</h2>\n<P>\n\nGeometric objects in C<SMALL>GAL</SMALL> have member functions that test the\nposition of a point relative to the object.  Full dimensional objects\nand their boundaries are represented by the same type, e.g. \nhalfspaces and hyperplanes are not distinguished, neither are balls\nand spheres. Such objects split the ambient space into two\nfull-dimensional parts, a bounded part and an unbounded part (e.g. \nspheres), or two unbounded parts (e.g. hyperplanes). By default these\nobjects are oriented, i.e., one of the resulting parts is called the\npositive side, the other one is called the negative side. Both of\nthese may be unbounded.\n<P>\n\nFor these objects there is a function <I>oriented_side()</I> that\ndetermines whether a test point is on the positive side, the negative\nside, or on the oriented boundary. These function returns a value of\ntype <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A></I>.\n<P>\n\nThose objects that split the space in a bounded and an unbounded part,\nhave a member function <I>bounded_side()</I> with return type\n<I><A HREF=\"../Kernel_23_ref/Enum_Bounded_side.html#Cross_link_anchor_99\">Bounded_side</A></I>.\n<P>\n\nIf an object is lower dimensional, e.g. a segment in <MATH><I>d</I></MATH>-dimensional\nspace, there is only a test whether a point belongs to the object or\nnot. This member function, which takes a point as an argument and\nreturns a boolean value, is called <I>has_on()</I>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nyou might call <I><A HREF=\"../Kernel_23_ref/Function_midpoint.html#Cross_link_anchor_239\">midpoint</A>(p_1,p_2)</I> instead\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"Chapter_predicates_constructions_d.html\">Predicates and Constructions</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_3!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38366.0}