{"text": "Getting Started in RStudio R Programming Environment R is a high level object oriented programming language which is a free version of the programming language S click here for a history of R By object oriented we mean that everything in R is treated as an object A data frame is a specific type of object in R so is a numeric value or a character value or a matrix We will be using RStudio which is an integrated development environment IDE for R RStudio is more user friendly than using R directly since it keeps track of your R script file console plots and history all in one place How to Learn R There are many free resources online including Coursera Free R classes R Programming by Johns HopkinsQuick R website and R twotorials R bloggers is a central hub of content collected from bloggers who write about R How to Start RStudio Once R and RStudio are installed on your computer it opens as any other application In Windows go to the start menu then find RStudio On a Mac open the Applications folder and click on the RStudio icon It is also useful to create a desktop shortcut to the program The R Console When you open RStudio you will see the Console window and R s command prompt This indicates R is ready to evaluate a command For example sample 1 6 1 1 5 The command sample 1 6 1 tells R to take a sample of size 1 from the numbers 1 through 6 R responds with 1 5 The 1 says how many calculations R has done you can ignore it Then it gives another showing that it s ready for another command R also has a continuation prompt which occurs if your command did not properly end sample 1 6 1 1 5 R will not return to the command prompt until you finish the command that started the continuation prompt R Syntax R has many built in functions When we use an R function the syntax is as follows function name arg name value For example the rep function creates a vector of repeated values rep x 3 times 1 The function has two arguments named x and times We want to repeat the value 3 ten times If we keep the arguments in the same order we do not need to type their names rep 3 1 But if we don t use the argument names order matters rep 1 3 The sign is the comment character Everything after a is ignored by R 3 5 R ignores everything I say from now on Make ample use of the sign to put comments in your R script files This will help you remember what you were doing when you go back to look at your code at a later date as well as help the instructor and TA understand your code Working Directory Any objects we export from R will be saved in its working directory We can use the commands setwd or getwd to set the working directory or to ask R what working directory it is using Alternatively we can click on the Files tab to view or change the Working Directory Organizing R Code You should get in the habit of writing your R commands in a R Script file before evaluating the commands in the R console This will become apparent as you start using for loops and writing functions From within RStudio we can open a new R Script file by going to File New File R Script When you save a script file you should use the extension R Later if you would like to run the code you can highlight the code in the script file and click Run or involving even less work you can source the file into R without opening it For example if your code is saved as mycode R then in the R console you can type source mycode R if the file is in your working directory If the file is located elsewhere on the computer you can enter the entire file extension We can even source in code off the web How to Save and Quit R There are three types of files you might want to save from your RStudio session R script file name R R workspace file name RData R history file name Rhistory R does not save what prints in the R console Your R script file is the R code the workspace saves an R session with all of the created objects in the workspace your R history file is a history of the commands that were entered into the console Next Basic R Functions Stats 2 1 Index", "_id": "http://www.ics.uci.edu/~staceyah/201/discussion/Rintro.html", "title": "getting started in rstudio", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <meta content=\"text/html; charset=windows-1252\"\n      http-equiv=\"Content-Type\">\n    <title>Getting Started in RStudio</title>\n    <meta content=\"Stacey Hancock\" name=\"author\">\n  </head>\n  <body>\n    <table style=\"width: 100%; background-color: rgb(102, 204, 204);\n      margin-left: auto; margin-right: auto; height: 58px; text-align:\n      left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td>\n            <div style=\"text-align: center;\"> </div>\n            <h1 style=\" text-align: center;\">Getting Started in RStudio<br>\n            </h1>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    <h1>R Programming Environment</h1>\n    <a href=\"http://www.r-project.org/\">R</a> is a high-level\n    object-oriented programming language, which is a free version of the\n    programming language S (click <a\n      href=\"http://cran.r-project.org/doc/html/interface98-paper/paper.html\"><span\n        style=\"text-decoration: underline;\">here</span></a> for a\n    history of R). By object-oriented, we mean that everything in R is\n    treated as an \"object\". A data frame is a specific type of object in\n    R; so is a numeric value, or a character value, or a matrix. <br>\n    <br>\n    We will be using <a href=\"http://www.rstudio.com/\">RStudio</a>,\n    which is an integrated development environment (IDE) for R. RStudio\n    is more user-friendly than using R directly since it keeps track of\n    your R script file, console, plots, and history, all in one place.<br>\n    <h3>How to Learn R</h3>\n    There are many free resources online including:\n    <ul>\n      <li>Coursera Free R classes: <a\n          href=\"https://www.coursera.org/course/rprog\">R Programming by\n          Johns Hopkins</a></li>\n      <li><a href=\"http://www.statmethods.net/\">Quick-R website</a> and\n        <a href=\"http://www.twotorials.com/\">R \"twotorials\"</a> </li>\n      <li><a href=\"http://www.r-bloggers.com/\">R-bloggers</a>: is a\n        central hub of content collected from bloggers who write about R</li>\n    </ul>\n    <h3>How to Start RStudio</h3>\n    <span style=\"font-weight: bold;\"><span style=\"font-weight: bold;\"></span></span>\n    <p>Once R and RStudio are installed on your computer, it opens as\n      any other application. In Windows, go to the start menu, then find\n      RStudio. On a Mac, open the Applications folder and click on the\n      RStudio icon. It is also useful to create a desktop shortcut to\n      the program.<br>\n    </p>\n    <h3>The R Console<br>\n    </h3>\n    <p>When you open RStudio, you will see the \"Console\" window and\n      &gt;, R's <span style=\"font-weight: bold; color: rgb(153, 0, 0);\">command\n\n\n\n\n\n\n\n        prompt</span>. This indicates R is ready to evaluate a command.\n      For example,<br>\n    </p>\n    <pre>&gt; sample(1:6,1)<br>[1] 5<br>&gt;<br></pre>\n    The command <span style=\"font-family: monospace;\">sample(1:6,1)</span>\n    tells R to take a sample of size 1 from the numbers 1 through 6. R\n    responds with <span style=\"font-family: monospace;\">[1] 5</span>.\n    The [1] says how many calculations R has done (you can ignore it).\n    Then it gives another &gt;, showing that it's ready for another\n    command.<br>\n    <br>\n    R also has a <span style=\"font-weight: bold; color: rgb(153, 0,\n      0);\">continuation prompt</span>, +, which occurs if your command\n    did not properly end. <br>\n    <pre>&gt; sample(1:6,<br>+ 1)<br>[1] 5<br></pre>\n    R will not return to the command prompt &gt; until you finish the\n    command that started the continuation prompt.<br>\n    <h3>R Syntax</h3>\n    R has many built-in functions. When we use an R <span style=\"color:\n      rgb(153, 51, 0); font-weight: bold;\">function</span>, the syntax\n    is as follows:<br>\n    <br style=\"font-weight: bold;\">\n    <blockquote> <span style=\"font-weight: bold;\">\n        function.name(arg.name=value,...)</span><br>\n    </blockquote>\n    <br>\n    For example, the \"rep\" function creates a vector of repeated values:<br>\n    <pre>rep(x=3, times=10)<br></pre>\n    The function has two arguments named \"x\" and \"times\". We want to\n    repeat the value 3 ten times. If we keep the arguments in the same\n    order, we do not need to type their names:<br>\n    <pre>rep(3,10)<br></pre>\n    But if we don't use the argument names, order matters:<br>\n    <pre>rep(10,3)<br></pre>\n    The \"#\" sign is the <span style=\"font-weight: bold; color: rgb(153,\n      0, 0);\">comment character</span>. Everything after a # is ignored\n    by R:<br>\n    <pre>3+5 # R ignores everything I say from now on...<br></pre>\n    Make ample use of the \"#\" sign to put comments in your R script\n    files. This will help you remember what you were doing when you go\n    back to look at your code at a later date, as well as help the\n    instructor and TA understand your code.<br>\n    <h3>Working Directory</h3>\n    Any objects we export from R will be saved in its working directory.\n    We can use the commands <span style=\"font-family: monospace;\">setwd()</span>\n    or <span style=\"font-family: monospace;\">getwd()</span> to set the\n    working directory or to ask R what working directory it is using.\n    Alternatively, we can click on the \"Files\" tab to view or change the\n    Working Directory.<br>\n    <h3>Organizing R Code<br>\n    </h3>\n    <p>You should get in the habit of writing your R commands in a <b>R\n        Script file</b> before evaluating the commands in the R console.\n      This will become apparent as you start using for loops and writing\n      functions. From within RStudio we can open a new \"R Script\" file\n      by going to File -&gt; New File -&gt; R Script. When you save a\n      script file, you should use the extension .R. Later, if you would\n      like to run the code, you can highlight the code in the script\n      file and click \"Run\", or involving even less work, you can source\n      the file into R without opening it. For example, if your code is\n      saved as mycode.R, then in the R console, you can type<br>\n    </p>\n    <pre>source(\"mycode.R\")<br></pre>\n    <p>if the file is in your working directory. If the file is located\n      elsewhere on the computer, you can enter the entire file\n      extension. We can even source in code off the web!<br>\n    </p>\n    <h3>How to Save and Quit R<br>\n    </h3>\n    There are three types of files you might want to save from your\n    RStudio session:<br>\n    <ol>\n      <li>R script file (name.R)</li>\n      <li>R workspace file (name.RData)</li>\n      <li>R history file (name.Rhistory)<br>\n      </li>\n    </ol>\n    R does not save what prints in the R console. Your R script file is\n    the R code; the workspace saves an R session with all of the created\n    objects in the workspace; your R history file is a history of the\n    commands that were entered into the console. <br>\n    <br>\n    <hr style=\"width: 100%; height: 2px;\">\n    <div style=\"text-align: center;\"><big><span style=\"font-weight:\n          bold;\">Next:</span> <a href=\"BasicR.html\">Basic R Functions</a><br>\n        <br>\n        <a href=\"../index.html\">Stats 201 Index</a></big><br>\n      <hr style=\"width: 100%; height: 2px;\"><br>\n    </div>\n  </body>\n</html>\n", "id": 465.0}