{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL surface neighbors 3 Definition Given a set of sample points issued from a surface and a query point p the function surface neighbors 3 computes the neighbors of p on the surface within the sample points If the sampling is sufficiently dense the neighbors are provably close to the point p on the surface cf the manual pages and BF 2 Fl 3 They are defined to be the neighbors of p in the regular triangulation dual to the power diagram which is equivalent to the intersection of the Voronoi cell of the query point p with the tangent plane to the surface at p include CGAL surface neighbors 3 h template class OutputIterator class InputIterator class Kernel OutputIterator surface neighbors 3 InputIterator first InputIterator beyond typename Kernel Point 3 p typename Kernel Vector 3 normal OutputIterator out Kernel K The sample points are provided in the range first beyond InputIterator value type is the point type Kernel Point 3 The tangent plane is defined by the point p and the vector normal The parameter K determines the kernel type that will instantiate the template parameter of Voronoi intersection 2 traits 3 K The surface neighbors of p are computed which are the neighbors of p in the regular triangulation that is dual to the intersection of the 3D Voronoi diagram of with the tangent plane The point sequence that is computed by the function is placed starting at out The function returns an iterator that is placed past the end of the resulting point sequence template class OutputIterator class InputIterator class ITraits OutputIterator surface neighbors 3 InputIterator first InputIterator beyond typename ITraits Point 2 p OutputIterator out ITraits traits the same as above only that the traits class must be instantiated by the user ITraits must be equivalent to Voronoi intersection 2 traits 3 K The next functions return in addition a boolean value that certifies whether or not the Voronoi cell of p can be affected by points that lie outside the input range i e outside the ball centered on p passing through the furthest sample point from p in the range first beyond If the sample points are collected by a k nearest neighbor or a range search query this permits to verify that a large enough neighborhood has been considered template class OutputIterator class InputIterator class Kernel std pair OutputIterator bool surface neighbors certified 3 InputIterator first InputIterator beyond typename Kernel Point 3 p typename Kernel Vector 3 normal OutputIterator out Kernel K Similar to the first function The additional third return value is true if the furthest point in the range first beyond is further away from p than twice the distance from p to the furthest vertex of the intersection of the Voronoi cell of p with the tangent plane defined be p normal It is false otherwise template class OutputIterator class InputIterator class Kernel std pair OutputIterator bool surface neighbors certified 3 InputIterator first InputIterator beyond typename Kernel Point 2 p typename Kernel FT max distance OutputIterator out Kernel kernel The same as above except that this function takes the maximal distance from p to the points in the range first beyond as additional parameter template class OutputIterator class InputIterator class ITraits std pair OutputIterator bool surface neighbors certified 3 InputIterator first InputIterator beyond typename ITraits Point 2 p OutputIterator out ITraits traits The same as above only that the traits class must be instantiated by the user ITraits must be equivalent to Voronoi intersection 2 traits 3 K There is no parameter max distance template class OutputIterator class InputIterator class ITraits std pair OutputIterator bool surface neighbors certified 3 InputIterator first InputIterator beyond typename ITraits Point 2 p typename ITraits FT max distance OutputIterator out ITraits traits The same as above with the parameter max distance The next function allows to filter some potential neighbors of the query point p from via its three dimensional Delaunay triangulation All surface neighbors of p are necessarily neighbors in the Delaunay triangulation of p template class Dt class OutputIterator OutputIterator surface neighbors 3 Dt dt typename Dt Geom traits Point 2 p typename Dt Geom traits Vector 3 normal OutputIterator out typename Dt Face handle start typename Dt Face handle computes the surface neighbor coordinates with respect to the points that are vertices of the Delaunay triangulation dt The type Dt must be equivalent to Delaunay triangulation 3 Gt Tds The optional parameter start is used for the used as a starting place for the search of the conflict zone It may be the result of the call dt locate p This function instantiates the template parameter ITraits to be Voronoi intersection 2 traits 3 Dt Geom traits template class Dt class OutputIterator class ITraits OutputIterator surface neighbors 3 Dt dt typename Dt Geom traits Point 2 p OutputIterator out ITraits traits typename Dt Face handle start typename Dt Face handle The same as above only that the parameter traits instantiates the geometric traits class Its type ITraits must be equivalent to Voronoi intersection 2 traits 3 K Requirements Dt is equivalent to the class Delaunay triangulation 3 OutputIterator value type is equivalent to Dt Point 3 i e a point type ITraits is equivalent to the class Voronoi intersection 2 traits 3 K See AlsoCGAL Voronoi intersection 2 traits 3 K CGAL surface neighbor coordinates 3 ImplementationThese functions compute the regular triangulation of the sample points and the point p using a traits class equivalent to Voronoi intersection 2 traits 3 K They determine the neighbors of p in this triangulation The functions which certify the result need to compute in addition the Voronoi vertices of the cell of p in this diagram Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Interpolation_ref/Function_surface_neighbors_3.html", "title": "surface_neighbors_3", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Interpolation_ref/surface_neighbors_3.tex' -->\n<html> <head>  \n<title>surface_neighbors_3</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1136\"></A>\n\n<A NAME=\"Cross_link_anchor_1137\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_1033\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Function.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::surface_neighbors_3\"></A>\n<h2><I>CGAL::surface_neighbors_3</I></h2>\n\n     \n     \n     \n<A NAME=\"Index_anchor_1034\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nGiven a set of sample points issued from a surface and a query point\n<I>p</I>, the function <I><A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1137\">surface_neighbors_3</A></I> computes the neighbors of <I>p</I> on\nthe surface within the sample points. If the sampling is sufficiently\ndense, the neighbors are provably close to the point <I>p</I> on the\nsurface (cf. the manual pages and\n[<A HREF=\"../biblio.html#Biblio_bf-lcss-02\">BF02</A>],[<A HREF=\"../biblio.html#Biblio_cgal:f-csapc-03\">Fl&ouml;03</A>]). They are defined to\nbe the neighbors of <I>p</I> in the regular triangulation dual\nto the power diagram which is equivalent to the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the\nVoronoi cell of the query point <I>p</I> with the tangent plane to the\nsurface at <I>p</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/surface_neighbors_3.h\">CGAL/surface_neighbors_3.h</A>&gt;</I>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_surface_neighbors_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_3__p+_const_typename_Kernel::Vector_3__normal+_OutputIterator_out+_const_Kernel__K9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1137\">surface_neighbors_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/FunctionObjectConcept_Kernel--Vector_3.html#Cross_link_anchor_474\">Kernel::Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> K)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The sample points <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> are provided in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH>.\n  <I>InputIterator::value_type</I> is the point type\n  <I><A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A></I>. The tangent plane is defined by the point\n  <I>p</I> and the vector <I>normal</I>.  The\n  parameter <I>K</I> determines the kernel type that will instantiate the template parameter of <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.<BR>\n\nThe surface neighbors of <I>p</I> are computed which are the\n  neighbors of <I>p</I> in the regular triangulation that is dual to\n  the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the <MATH><I>3D</I></MATH> Voronoi diagram of <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> with\n  the tangent plane. The point sequence that is computed by the\n  function is placed starting at <I>out</I>. The function returns an\n  iterator that is placed past-the-end of the resulting point\n  sequence.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_surface_neighbors_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+OutputIterator_out+_const_ITraits__traits9;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1137\">surface_neighbors_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    the same as above only that the traits\n  class must be instantiated by the user. <I>ITraits</I> must be equivalent\n  to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe next functions return, in addition, a boolean value that certifies\nwhether or not, the Voronoi cell of <I>p</I> can be affected by points\nthat lie outside the input range, i.e. outside the ball centered on <I>p</I> passing through the\nfurthest sample point from <I>p</I> in the range\n<MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH>. If the sample\npoints are collected by a <MATH><I>k</I></MATH>-nearest neighbor or a range search\nquery, this permits to verify that a large enough neighborhood has\nbeen considered.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6_OutputIterator+_bool_9_surface_neighbors_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_3__p+_const_typename_Kernel::Vector_3__normal+_OutputIterator_out+_const_Kernel__K9;\"></A>\nstd::pair&lt; OutputIterator, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbors_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_3.html#Cross_link_anchor_460\">Kernel::Point_3</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/FunctionObjectConcept_Kernel--Vector_3.html#Cross_link_anchor_474\">Kernel::Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> K)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Similar to the first function. The additional third return\n  value is <I>true</I> if the furthest point in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH> is further\n  away from <I>p</I> than twice the distance from <I>p</I> to the\n  furthest vertex of the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the Voronoi cell of <I>p</I>\n  with the tangent plane defined be <I>(p,normal)</I>. It is\n  <I>false</I> otherwise.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6_OutputIterator+_bool_9_surface_neighbors_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_Kernel::Point_2__p+_const_typename_Kernel::FT__max_distance+_OutputIterator_out+_const_Kernel__kernel9;\"></A>\nstd::pair&lt; OutputIterator, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbors_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel--Point_2.html#Cross_link_anchor_459\">Kernel::Point_2</A> p,<BR>\n\ntypename <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>::FT max_distance,<BR>\n\nOutputIterator out,<BR>\n\n<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A> kernel)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above except that this function\n  takes the maximal distance from <I>p</I> to the points in the range\n  <MATH><I>[.</I></MATH><I>first</I>, <I>beyond</I><MATH><I>.)</I></MATH> as additional\n  parameter.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6_OutputIterator+_bool_9_surface_neighbors_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+_OutputIterator_out+_const_ITraits__traits9;\"></A>\nstd::pair&lt; OutputIterator, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbors_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above only that the traits\n  class must be instantiated by the user.  <I>ITraits</I> must be\n  equivalent to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>. There is no\n  parameter <I>max_distance</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt;class OutputIterator, class InputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_std::pair6_OutputIterator+_bool_9_surface_neighbors_certified_36InputIterator_first+_InputIterator_beyond+_const_typename_ITraits::Point_2__p+_const_typename_ITraits::FT__max_distance+_OutputIterator_out+_const_ITraits__traits9;\"></A>\nstd::pair&lt; OutputIterator, bool &gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    surface_neighbors_certified_3 ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    InputIterator first,<BR>\n\nInputIterator beyond,<BR>\n\ntypename ITraits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\ntypename ITraits::FT max_distance,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above with the parameter\n  <I>max_distance</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe next function allows to filter some potential neighbors of the\nquery point <I>p</I> from <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\"></I></MATH> via its three-dimensional\nDelaunay triangulation. All surface neighbors of <I>p</I> are\nnecessarily neighbors in the Delaunay triangulation of <MATH><I><IMG BORDER=0 WIDTH=12 HEIGHT=13 ALIGN=BOTTOM SRC=\"cc_mathcal_P.gif\">\n <IMG BORDER=0 WIDTH=9 HEIGHT=11 ALIGN=BOTTOM SRC=\"cc_cup.gif\"> {p}</I></MATH>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Dt, class OutputIterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_surface_neighbors_36const_Dt__dt+_const_typename_Dt::Geom_traits::Point_2__p+_const_typename_Dt::Geom_traits::Vector_3__normal+_OutputIterator_out+_typename_Dt::Face_handle_start_=_typename_Dt::Face_handle699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1137\">surface_neighbors_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Dt dt,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Vector_3.html#Cross_link_anchor_86\">Vector_3</A> normal,<BR>\n\nOutputIterator out,<BR>\n\ntypename Dt::Face_handle start = typename Dt::Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    computes\n  the surface neighbor coordinates with respect to the points that are\n  vertices of the Delaunay triangulation <I>dt</I>. The type <I>Dt</I>\n  must be equivalent to <I><A HREF=\"../Triangulation_3_ref/Class_Delaunay_triangulation_3.html#Cross_link_anchor_974\">Delaunay_triangulation_3</A>&lt;Gt, Tds&gt;</I>. The\n  optional parameter <I>start</I> is used for the used as a starting\n  place for the search of the conflict zone. It may be the result of\n  the call <I>dt.locate(p)</I>. This function instantiates the template\n  parameter <I>ITraits</I> to be\n  <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;Dt::Geom_traits&gt;</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Dt, class OutputIterator, class ITraits&gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_OutputIterator_surface_neighbors_36const_Dt__dt+_const_typename_Dt::Geom_traits::Point_2__p+_OutputIterator_out+_const_ITraits__traits+_typename_Dt::Face_handle_start_=_typename_Dt::Face_handle699;\"></A>\nOutputIterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Function_surface_neighbors_3.html#Cross_link_anchor_1137\">surface_neighbors_3</A> ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Dt dt,<BR>\n\ntypename Dt::Geom_traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<BR>\n\nOutputIterator out,<BR>\n\nITraits traits,<BR>\n\ntypename Dt::Face_handle start = typename Dt::Face_handle())</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The same as above only that the parameter <I>traits</I> instantiates\n  the geometric traits class. Its type <I>ITraits</I> must be\n  equivalent to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Requirements</H3>\n<OL>\n<LI><I>Dt</I> is equivalent to the class\n  <I><A HREF=\"../Triangulation_3_ref/Class_Delaunay_triangulation_3.html#Cross_link_anchor_974\">Delaunay_triangulation_3</A></I>.\n<LI><I>OutputIterator::value_type</I> is equivalent to\n  <I>Dt::<A HREF=\"../Kernel_23_ref/Class_Point_3.html#Cross_link_anchor_74\">Point_3</A></I>, i.e. a point type.\n<LI><I>ITraits</I> is equivalent to the class <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>.\n</OL>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1132\">CGAL::Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I><BR>\n\n<I><A HREF=\"Function_surface_neighbor_coordinates_3.html#Cross_link_anchor_1134\">CGAL::surface_neighbor_coordinates_3</A></I><BR>\n\n\n<P>\n\n<H3>Implementation</H3>These functions compute the regular triangulation of\nthe sample points and the point <I>p</I> using a traits class\nequivalent to <I><A HREF=\"Class_Voronoi_intersection_2_traits_3.html#Cross_link_anchor_1133\">Voronoi_intersection_2_traits_3</A>&lt;K&gt;</I>. They determine\nthe neighbors of <I>p</I> in this triangulation. The functions which\ncertify the result need to compute, in addition, the Voronoi vertices\nof the cell of <I>p</I> in this diagram.\n<P>\n\n<!Next_reference_link_8_50_16!>\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_50!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38502.0}