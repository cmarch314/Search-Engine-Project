{"text": "OEChem C Theory Manual Version 1 3 1 Previous 32 OpenEye Command Line Up 32 OpenEye Command Line Next 32 2 Configuring OEInterface 32 1 Compiling a text file into a C program This section describes how to automatically compile a text file into a C program using a simple makefile rule and a perl script Using this method the text file is required at compile time but NOT at runtime and the contents of the file will be accessible as a const unsigned char Several of the functions described later in this chapter take a const unsigned char created by this method This following perl script usr bin perl text2hex pl OpenEye Scientific Software September 2 1 Autoflush STDOUT STDOUT autoflush 1 1 argc ARGV if argc 2 filename ARGV arrayname ARGV 1 pos1 rindex filename 1 if pos1 1 tmpguard substr filename pos1 else tmpguard filename guard uc tmpguard for pos2 rindex guard pos2 1 pos2 rindex guard lnth length guard pos3 pos2 1 pos4 lnth pos3 tmpguard guard guard substr tmpguard pos2 substr tmpguard pos3 pos4 for pos2 rindex guard pos2 1 pos2 rindex guard lnth length guard pos3 pos2 1 pos4 lnth pos3 tmpguard guard guard substr tmpguard pos2 substr tmpguard pos3 pos4 elsif argc 3 filename ARGV arrayname ARGV 1 guard ARGV 2 else print usage bin2hex pl textfile arrayname n n exit debug open F filename die Error Unable to open binary file n if debug print ifndef OE guard n print define OE guard n n print static const unsigned char arrayname n binmode F col init ignore newline 1 while eof F ch ord getc F if ch 13 ch if ignore if ch 1 ignore ch elsif newline if ch 35 ignore 1 ch elsif ch newline elsif ch 1 newline 1 if ch if debug print chr ch else if init print else init 1 if col 15 print n col print sprintf x 2X ch col if debug if col 15 print n x n n else print x n n print endif OE guard n n close F exit Download as text Converts a text file into a C const unsigned char The usage of this script is text2hex pl textfile arrayname And the output is sent so standard out So for example if we had a text file OOGA BOOGA named babytalk txt text2hex pl would produce the following output text2hex pl babytalk txt baby ifndef OE BABYTALK define OE BABYTALK static const unsigned char baby x4F x4F x47 x41 x A x42 x4F x4F x47 x41 x A x endif OE BABYTALK ITF With this perl script we can put the following rule in our makefile SUFFIXES txt SUFFIXES itf txt itf text2hex pl InterfaceData This rule tells the make system that it can create a file with a file with a itf extension from a file with a txt extension by using the text2hex pl script and piping the output into the itf file This is exactly analogous to rules that create a o file from a cpp file here txt corresponds to cpp and itf corresponds to o Note that the choice of itf as an extension is completely arbitrary but the OpenEye supplied makefiles define this rule with the itf extension and also another rule with the req extension as follows SUFFIXES txt SUFFIXES req txt req text2hex pl RequirementData The following program Chapter 32 Example 1 cpp file include oeplatform h include oesystem h This itf file defines the static unsigned char variable InterfaceData include ch32 1 itf using namespace OEPlatform using namespace OESystem int main int char oeout InterfaceData oeendl return Download as text Includes a itf file Provided the above rule for generating and itf file is included in the makefile the only additional modification to the makefile needed to compile ch32 1 o aside from the normal compiling riles is ch32 1 o must have a dependency on ch32 1 txt added to it As with any makefile dependencies this dependency can be added by including this line Chapter 32 Example 1 Makefile dependency ch32 1 o ch32 1 txt Anywhere in the makefile Alternatively you could add ch32 1 txt to your existing dependency list for ch32 1 o which presumably includes ch32 1 cpp Once compiled the program simply outputs the contents of file ch32 1 txt it was compiled with So given that the contents of ch32 1 txt were Chapter 32 Example 1 Text file include oeplatform h include oesystem h This itf file defines the static unsigned char variable InterfaceData include ch32 1 itf using namespace OEPlatform using namespace OESystem int main int char oeout InterfaceData oeendl return Download as text At compile time the program ch32 1 will work as follows Chapter 32 Example 1 Output ch32 1 OOGA BOOGA Note that ch32 1 txt is only required at compile time not run time OEChem C Theory Manual Version 1 3 1 Previous 32 OpenEye Command Line Up 32 OpenEye Command Line Next 32 2 Configuring OEInterface Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node253.html", "title": "32.1 compiling a text file into a c++ program", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>32.1 Compiling a text file into a C++ program</title>\n<META NAME=\"description\" CONTENT=\"32.1 Compiling a text file into a C++ program\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node254.html\">\n<LINK REL=\"previous\" HREF=\"node252.html\">\n<LINK REL=\"up\" HREF=\"node252.html\">\n<LINK REL=\"next\" HREF=\"node254.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node254.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node254.html\">32.2 Configuring OEInterface</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0035100000000000000000\">\n32.1 Compiling a text file into a C++ program</A>\n</H1>\n\n<P>\nThis section describes how to automatically compile a text file into a C++\nprogram, using a simple makefile rule and a perl script.  Using this method\nthe text file is required at compile time but <i>NOT</i> at runtime,  and the\ncontents of the file will be accessible as a <code>const unsigned char*</code>.\nSeveral of the functions described later in this chapter take a\n<code>const unsigned char*</code> created by this method.\n\n<P>\nThis following perl script\n\n<P>\n<dl><dd><pre class=\"verbatim\">#!/usr/bin/perl\n# text2hex.pl\n# OpenEye Scientific Software\n# September 2001\n\n# Autoflush STDOUT\n#STDOUT-&gt;autoflush(1);\n$| = 1;\n\n$argc = @ARGV;\nif( $argc == 2 ) {\n    $filename = @ARGV[0];\n    $arrayname = @ARGV[1];\n\n    $pos1 = rindex($filename,\"/\") + 1;\n    if ($pos1 &gt; -1)\n    {\n      $tmpguard = substr($filename,$pos1);\n    }\n    else\n    {\n      $tmpguard = $filename;\n    }\n    $guard = uc($tmpguard);\n    for ( $pos2 = rindex($guard,\".\") ; $pos2 &gt; -1 ; $pos2 = rindex($guard,\".\") )\n    {\n      $lnth = length($guard);\n      $pos3 = $pos2 + 1;\n      $pos4 = $lnth - $pos3;\n      $tmpguard = $guard;\n      $guard = substr($tmpguard,0,$pos2) . \"_\" . substr($tmpguard,$pos3,$pos4);\n    }\n    for ( $pos2 = rindex($guard,\"-\") ; $pos2 &gt; -1 ; $pos2 = rindex($guard,\"-\") )\n    {\n      $lnth = length($guard);\n      $pos3 = $pos2 + 1;\n      $pos4 = $lnth - $pos3;\n      $tmpguard = $guard;\n      $guard = substr($tmpguard,0,$pos2) . \"_\" . substr($tmpguard,$pos3,$pos4);\n    }\n} elsif( $argc == 3 ) {\n    $filename = @ARGV[0];\n    $arrayname = @ARGV[1];\n    $guard = @ARGV[2];\n} else {\n    print \"usage:  bin2hex.pl &lt;textfile&gt; &lt;arrayname&gt;&#92;n&#92;n\";\n    exit;\n}\n\n$debug = 0;\n\nopen(F,$filename) || die \"Error: Unable to open binary file!&#92;n\";\n\nif( !$debug ) {\n    print \"#ifndef OE_\" . $guard . \"&#92;n\";\n    print \"#define OE_\" . $guard . \"&#92;n&#92;n\";\n    print \"static const unsigned char \" . $arrayname . \"[] = {&#92;n\";\n}\n\nbinmode(F);\n\n$col = 0;\n$init = 0;\n$ignore = 0;\n$newline = 1;\n\nwhile( !eof(F) ) {\n    $ch = ord(getc(F));\n    if( $ch == 13 ) {\n        $ch = 0;\n    }\n\n    if( $ignore ) {\n        if( $ch == 10 ) {\n            $ignore = 0;\n        }\n        $ch = 0;\n    } elsif( $newline ) {\n        if ( $ch == 35 ) {\n            $ignore = 1;\n            $ch = 0;\n        } elsif( $ch ) {\n            $newline = 0;\n        }\n    } elsif( $ch == 10 ) {\n        $newline = 1;\n    }\n\n    if( $ch ) {\n        if( $debug ) {\n            print chr($ch);\n        } else {\n            if( $init ) {\n                print \",\";\n            } else {\n                $init = 1;\n            }\n            if( $col &gt;= 15 ) {\n                print \"&#92;n\";\n                $col = 0;\n            }\n            print sprintf(\"0x%02X\",$ch);\n            $col++;\n        }\n    }\n}\n\nif( !$debug ) {\n    if( $col &gt;= 15 ) {\n        print \",&#92;n0x00};&#92;n&#92;n\";\n    } else {\n        print \",0x00};&#92;n&#92;n\";\n    }\n    print \"#endif // OE_\" . $guard . \"&#92;n&#92;n\";\n}\n\nclose(F);\nexit;\n\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"text2hex.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nConverts a text file into a C++ <code>const unsigned char*</code>.  The usage of this script is\n\n<P>\n<dl><dd><pre class=\"verbatim\">text2hex.pl &lt;textfile&gt; &lt;arrayname&gt;\n</pre></dl>\n\n<P>\nAnd the output is sent so standard out.\n\n<P>\nSo for example if we had a text file\n\n<P>\n<dl><dd><pre class=\"verbatim\">OOGA\nBOOGA\n</pre></dl>\n\n<P>\nnamed babytalk.txt\n\n<P>\ntext2hex.pl would produce the following output\n\n<P>\n<dl><dd><pre class=\"verbatim\">&gt; text2hex.pl babytalk.txt baby\n#ifndef OE_BABYTALK\n#define OE_BABYTALK\n\nstatic const unsigned char baby[] = {\n0x4F,0x4F,0x47,0x41,0x0A,0x42,0x4F,0x4F,0x47,0x41,0x0A,0x00};\n\n#endif // OE_BABYTALK_ITF\n&gt;\n</pre></dl>\n\n<P>\nWith this perl script we can put the following rule in our makefile\n\n<P>\n<dl><dd><pre class=\"verbatim\">.SUFFIXES:      .txt\n.SUFFIXES:      .itf\n.txt.itf:\n                text2hex.pl $&lt; InterfaceData &gt; $@\n</pre></dl>\n\n<P>\nThis rule tells the make system that it can create a file with a file\nwith a .itf extension from a file with a .txt extension by using the\ntext2hex.pl script and piping the output into the .itf file.  This\nis exactly analogous to rules that create a .o file from a .cpp file\n(here .txt corresponds to .cpp and .itf corresponds to .o).  Note\nthat the choice of itf as an extension is completely arbitrary, but\nthe OpenEye supplied makefiles define this rule with the .itf\nextension, and also another rule with the .req extension as follows\n\n<P>\n<dl><dd><pre class=\"verbatim\">.SUFFIXES:      .txt\n.SUFFIXES:      .req\n.txt.req:\n                text2hex.pl $&lt; RequirementData &gt; $@\n</pre></dl>\n\n<P>\nThe following program\n\n<P>\n<i>Chapter 32 - Example 1: cpp file</i>\n<dl><dd><pre class=\"verbatim\">#include \"oeplatform.h\"\n#include \"oesystem.h\"\n\n//This .itf file defines the static unsigned char* variable InterfaceData\n#include \"ch32-1.itf\"\n\nusing namespace OEPlatform;\nusing namespace OESystem;\n\nint main(int , char** )\n{\n  oeout &lt;&#60; InterfaceData &lt;&#60; oeendl;\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-1.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nIncludes a .itf file.  Provided the above rule for generating and itf\nfile is included in the makefile, the only additional modification to\nthe makefile needed to compile ch32-1.o, aside from the normal compiling\nriles, is ch32-1.o must have a dependency on ch32-1.txt added to it.\nAs with any makefile dependencies, this dependency can be added by\nincluding this line\n\n<P>\n<i>Chapter 32 - Example 1: Makefile dependency</i>\n<dl><dd><pre class=\"verbatim\">ch32-1.o: ch32-1.txt\n</pre></dl>\n\n<P>\nAnywhere in the makefile.  Alternatively you could add ch32-1.txt to\nyour existing dependency list for ch32-1.o (which presumably includes\nch32-1.cpp).\n\n<P>\nOnce compiled the program simply outputs the contents of file ch32-1.txt\nit was compiled with.  So given that the contents of ch32-1.txt were\n\n<P>\n<i>Chapter 32 - Example 1: Text file</i>\n<dl><dd><pre class=\"verbatim\">#include \"oeplatform.h\"\n#include \"oesystem.h\"\n\n//This .itf file defines the static unsigned char* variable InterfaceData\n#include \"ch32-1.itf\"\n\nusing namespace OEPlatform;\nusing namespace OESystem;\n\nint main(int , char** )\n{\n  oeout &lt;&#60; InterfaceData &lt;&#60; oeendl;\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-1.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nAt compile time the program, ch32-1, will work as follows\n\n<P>\n<i>Chapter 32 - Example 1: Output</i>\n<dl><dd><pre class=\"verbatim\">&gt; ch32-1\nOOGA\nBOOGA\n\n&gt;\n</pre></dl>\n\n<P>\nNote that ch32-1.txt is only required at compile time, not run time.\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node254.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node254.html\">32.2 Configuring OEInterface</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38814.0}