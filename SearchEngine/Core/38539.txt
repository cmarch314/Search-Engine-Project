{"text": "Navigation Up Table of Contents Bibliography Index Title Page Chapter 212D Planar Maps of Intersecting Curves Eyal Flato Efi Fogel Dan Halperin Shai Hirsch and Ron Wein 21 1 Introduction Given a collection of possibly intersecting and not necessarily x monotone curves in the plane we construct a collection in two steps as follows First we decompose each curve in into maximal x monotone curves thus obtaining the collection Second We decompose each curve in into maximal connected pieces not intersecting any other curve in This way we obtain the collection of x monotone pairwise interior disjoint curves Constructing the planar map with intersection of the curves in is therefore equivalent to the construction of the planar map see Chapter induced by the curves in The Planar Map with Intersections package extends the functionality of the Planar Map package by enabling simple insertion of intersecting and not necessarily x monotone curves The Planar map with intersections 2 class has different insertion functions but it uses the same data structures as the Planar map 2 class Therefore almost any functionality of the planar map is also supported here e g traversal of planar map features point location queries and I O operations are supported but infinite objects are not supported However to maintain a planar map with intersections one obviously needs to support some additional functions in the geometric traits class handling with intersections and x monotonicity Note that if one needs to build a planar map of x monotone pairwise interior disjoint curves then it would be more efficient in running time and less demanding in traits class functionality to use the Planar map 2 class instead Degeneracies Like the Planar Map package see Chapter the Planar Map with Intersections package can deal with x degenerate input including vertical segments However while in the planar map the input curves were assumed to be non intersecting in their interiors there is no such assumption when using planar map with intersections Furthermore overlapping curves are also supported If two curves overlap the traits intersection function must return the two endpoints of the common part 21 1 1 A Simple Program The simple program listed below demonstrates the construction of an X shaped planar subdivision out of two intersecting segments The coordinates of the halfedges of the constructed subdivision are printed to standard output file examples Pm with intersections example1 C include CGAL Cartesian h include CGAL MP Float h include CGAL Quotient h include CGAL Pm default dcel h include CGAL Arr segment traits 2 h include CGAL Planar map 2 h include CGAL Pm with intersections h typedef CGAL Quotient CGAL MP Float NT typedef CGAL Cartesian NT Kernel typedef CGAL Arr segment traits 2 Kernel Traits typedef Traits Point 2 Point 2 typedef Traits X monotone curve 2 X monotone curve 2 typedef CGAL Pm default dcel Traits Dcel typedef CGAL Planar map 2 Dcel Traits Planar map 2 typedef CGAL Planar map with intersections 2 Planar map 2 Pmwx int main Pmwx pm X monotone curve 2 cv1 Point 2 Point 2 1 1 X monotone curve 2 cv2 Point 2 1 Point 2 1 insertion of the curves std cout Inserting the segments std endl cv1 std endl pm insert cv1 std cout cv2 std endl std endl pm insert cv2 traversal of the curves std cout Edges of the planar map std endl Pmwx Halfedge const iterator eit for eit pm halfedges begin eit pm halfedges end eit eit std cout eit source point eit target point std endl return The output of the program looks like this Inserting the segments 1 1 1 1 Edges of the planar map 5 5 5 5 1 1 1 5 5 1 5 5 21 2 Architecture The Planar map with intersections 2 Planar map 2 Dcel Traits class is parameterized with the Planar map 2 class it inherits from which is parameterized with the Dcel and the Traits objects The Dcel is a data structure that maintains a doubly connected edge list and represents the underlying topology The geometric functionality is provided by the Traits class and is tailored to handle a specific family of curves It encapsulates the number type used and the coordinate representation This package contains traits classes that handle various types of curves e g segments polylines conics etc Similar to some constructors of the Planar map 2 see Chapter some of the constructors of the Planar map with intersections 2 class allow you to choose between various point location strategies While the default point location strategy of the Planar map 2 class is the trapezoid ric strategy which is based on a trapezoidal decomposition of the map and requires constructing and maintening auxliary data structures the default strategy of the Planar map with intersections 2 class is the walk along a line strategy as the overhead of the former tends to be very large when no restrictions are applied on the input curves 21 2 1 Operations The set of operations that can be applied to a planar map with intersection is divided into four subsets namely constructors modifiers queries and input output operations These operations are overviewed in detail in section so next we will just emphasize the differences between the two classes Aggregated Insert A Planar Map with Intersections can be built incrementally by inserting one curve after the other into the map However for a large number of curves that intersect rather sparsely it can be more efficient to use the aggregate insertion method that inserts a set of curves to an empty map at once by performing the sweep line algorithm on the set of input curves The aggregate insertion method is more efficient in many cases and it also has less requirements from the traits class in comparison with the the incremental insertion function Namely the curves compare y at x left and the nearest intersection to left functions are not required nor do the various reflection functions Example of Aggregate Insertion The following example demonstrates the usage of the aggregate insertion method It constructs a planar map out of four segments 1 1 1 1 1 and 1 1 1 an hourglass shape two of them are intersecting in their interior The resulting planar map will contain all the disjoint interior sub segments obtained by the calculation of the sweep line algorithm For clarity we printed all the halfedges of the resulting planar map to the standard output The output of the program looks like this Non Intersecting Insertion Functions In some cases the users insert curves to a planar map with intersections in an incremental manner but have some knowledge regarding the location of several curves In such cases special insertion functions may be called in order to speed up the construction of the map If it is known in advance that the current curve is x monotone and does not intersect any one of the curves currently in the map in its interior it is possible to insert this curve using the non intersecting insert function A similar function is also available for a range of x monotone and interior disjoint curves that does not induce any intersection with the existing curves in the map Sometimes the exact location of the x monotone curve in the map is known It may be inserted 1 within the interior of a given face 2 with one given vertex as one of its endpoints or 3 between to given vertices The non intersecting insert in face interior non intersecting insert from vertex and non intersecting insert at vertices functions serve for this purpose For more details regrading these special insertion functions as well as for an example for their usage see section advanced 21 2 2 Change Notification An insertion of an intersecting curve into a planar map may add several halfedges and modify several features of the map i e split halfedges split faces etc The so called Change Notification class provides this kind of flexibility The modification methods accept an additional parameter a class which is a model of the PlanarMapWithIntersectionsChangeNotification 2 concept The change notification includes an associative function for each modification method This function is called after each such modification The change notification class is useful in many cases For example one may add a color or other extra data to any halfedge of a planar map An insertion of a new curve can split halfedges that were previously in the map After such a split the color of the newly created halfedges should be updated according to the original color of the split halfedge One can do this by implementing the split edge function of the change notification class This function will be called after each split of an halfedge in the map Example of Change Notification The following example demonstrates the usage of the change notification concept during the construction of a planar map out of three segments 1 1 1 1 and 1 1 1 During the insertion we use My notification instance to output the internal process of the construction of the planar map We also count how many edges are in the map by incrementing a counter each time an edge is added add edge or split split edge file examples Pm with intersections example2 C include short names h include CGAL Cartesian h include CGAL MP Float h include CGAL Quotient h include CGAL Pm default dcel h include CGAL Arr segment traits 2 h include CGAL Planar map 2 h include CGAL Pm with intersections h typedef CGAL Quotient CGAL MP Float NT typedef CGAL Cartesian NT Kernel typedef CGAL Arr segment traits 2 Kernel Traits typedef Traits Point 2 Point 2 typedef Traits X monotone curve 2 X monotone curve 2 typedef CGAL Pm default dcel Traits Dcel typedef CGAL Planar map 2 Dcel Traits Planar map 2 typedef CGAL Planar map with intersections 2 Planar map 2 Pmwx typedef Pmwx Pmwx change notification Pmwx change notification class My notification public Pmwx change notification public My notification i void add edge const Traits X monotone curve 2 Planar map Halfedge handle bool left to right bool overlap false void overlap std cout add edge std endl i void split edge Planar map Halfedge handle orig edge Planar map Halfedge handle new edge const Traits X monotone curve 2 const Traits X monotone curve 2 std cout split edge std endl i void split face Planar map Face handle orig face Planar map Face handle new face std cout split face std endl void add hole Planar map Face handle in face Planar map Halfedge handle new hole std cout add hole std endl int i int main Pmwx pm My notification notif insertion of the curves X monotone curve 2 c1 Point 2 1 Point 2 1 X monotone curve 2 c2 Point 2 Point 2 1 1 X monotone curve 2 c3 Point 2 1 Point 2 1 1 std cout inserting c1 std endl pm insert c1 notif std cout inserting c2 std endl pm insert c2 notif std cout inserting c3 std endl pm insert c3 notif std cout Total number of edges notif i std endl return The output of the program looks like this inserting 1 1 add edge add hole inserting 1 1 split edge add edge add edge inserting 1 1 1 add edge split face Total number of edges 5 advanced Next chapter 2D Planar Maps of Intersecting Curves Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Pm_with_intersections_2/Chapter_main.html", "title": "2d planar maps of intersecting curves", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Pm_with_intersections_2/main.tex' -->\n<html> <head>  \n<title>2D Planar Maps of Intersecting Curves</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_main.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n<a name=\"Chapter_21\"></a>\n  \n<h1>Chapter 21<BR>2D Planar Maps of Intersecting Curves</h1>\n \n<A NAME=\"I1_ChapterPmwx\"></A>\n<EM>Eyal Flato, Efi Fogel, Dan Halperin, Shai Hirsch, and Ron Wein</EM><BR>\n\n\n<P>\n\n<a name=\"Section_1\"></a>\n        \n<h2>21.1&nbsp;&nbsp;&nbsp;Introduction</h2>\n<P>\n\nGiven a collection <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\"></I></MATH> of (possibly intersecting and not necessarily\n<MATH><I>x</I></MATH>-monotone curves) in the plane, we construct a collection <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">''</I></MATH> in\ntwo steps, as follows: First, we decompose each curve in <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\"></I></MATH> into\nmaximal <MATH><I>x</I></MATH>-monotone curves, thus obtaining the collection\n<MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">'</I></MATH>. Second, We decompose each curve in <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">'</I></MATH> into \nmaximal connected pieces not intersecting any other curve in <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">'</I></MATH>.\nThis way we obtain the collection <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">''</I></MATH> of <MATH><I>x</I></MATH>-monotone, pairwise \ninterior disjoint curves.  Constructing the <I>planar map with \n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A></I> of the curves in <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\"></I></MATH> is therefore equivalent to the\nconstruction of the <I>planar map</I>(see Chapter&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>) \ninduced by the curves in <MATH><I><IMG BORDER=0 WIDTH=8 HEIGHT=12 ALIGN=BOTTOM SRC=\"cc_mathcal_C.gif\">''</I></MATH>.\n<P>\n\nThe <I>Planar Map with Intersections</I> package extends the functionality \nof the <I>Planar Map</I> package by enabling simple insertion of intersecting \nand not necessarily <MATH><I>x</I></MATH>-monotone curves. The \n<I><A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A></I> class has different insertion functions \nbut it uses the same data structures as the <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I> class. \nTherefore, almost any functionality of the planar map is also supported here \n(e.g., traversal of planar map features, point location queries and I/O \noperations are supported but infinite objects are not supported). However, \nto maintain a planar map with intersections one obviously needs to support \nsome additional functions in the geometric traits class, handling with \nintersections and <MATH><I>x</I></MATH>-monotonicity.\n<P>\n\nNote that if one needs to build a planar map of <MATH><I>x</I></MATH>-monotone, pairwise \ninterior disjoint curves, then it would be more efficient (in running time) \nand less demanding (in traits class functionality) to use the \n<I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I> class instead.\n<P>\n\n<b>Degeneracies</b>\n<P>\n\nLike the <I>Planar Map</I> package (see Chapter&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>), \nthe <I>Planar Map with Intersections</I> package can deal with <MATH><I>x</I></MATH>-degenerate \ninput (including vertical segments). However, while in the planar map the input\ncurves were assumed to be non-intersecting in their interiors, there is no \nsuch assumption when using planar map with intersections. Furthermore, \noverlapping curves are also supported: If two curves overlap the traits \n<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> function must return the two endpoints of the common part.\n<P>\n\n<h3>21.1.1&nbsp;&nbsp;&nbsp;A Simple Program</h3>\n\n<A NAME=\"ssec:example1\"></A>\nThe simple program listed below demonstrates the construction of an\n<MATH><I>X</I></MATH>-shaped planar subdivision out of two intersecting segments.\nThe coordinates of the halfedges of the constructed subdivision are\nprinted to standard output.\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Pm_with_intersections/example1.C\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1400\">MP_Float</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1404\">Quotient</A>.h&gt;\n#include &lt;CGAL/Pm_default_dcel.h&gt;\n#include &lt;CGAL/<A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_837\">Arr_segment_traits_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>.h&gt;\n#include &lt;CGAL/Pm_with_intersections.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1403\">CGAL::Quotient</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A>&gt;                      NT;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;NT&gt;                                 <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>;\ntypedef <A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_836\">CGAL::Arr_segment_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;                  Traits;\ntypedef Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                                     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\ntypedef Traits::X_monotone_curve_2                          X_monotone_curve_2;\ntypedef CGAL::Pm_default_dcel&lt;Traits&gt;                       Dcel;\ntypedef <A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_786\">CGAL::Planar_map_2</A>&lt;Dcel,Traits&gt;                     <A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>;\ntypedef <A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_816\">CGAL::Planar_map_with_intersections_2</A>&lt;<A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&gt; Pmwx;\n\nint main() {\n  \n  Pmwx pm;\n  X_monotone_curve_2 cv1(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(0, 0), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1, 1));\n  X_monotone_curve_2 cv2(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(0, 1), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1, 0)); \n\n  //insertion of the curves\n  std::cout &lt;&lt; &quot;Inserting the segments:&quot; &lt;&lt; std::endl &lt;&lt; cv1 &lt;&lt; std::endl;\n  pm.insert(cv1);\n  std::cout &lt;&lt; cv2 &lt;&lt; std::endl &lt;&lt; std::endl;\n  pm.insert(cv2);\n  \n  //traversal of the curves\n  std::cout &lt;&lt; &quot;Edges of the planar map:&quot; &lt;&lt; std::endl;\n\n  Pmwx::Halfedge_const_iterator eit;\n  for (eit = pm.halfedges_begin(); eit != pm.halfedges_end(); ++eit, ++eit) {\n    std::cout &lt;&lt; eit-&gt;source()-&gt;point()\n              &lt;&lt; &quot; --- &quot; &lt;&lt; eit-&gt;target()-&gt;point() &lt;&lt; std::endl;\n  }\n\n  return 0;\n}\n</pre>\n<P>\n\nThe output of the program looks like this:\n<pre class=\"Verbatim\">\nInserting the segments:\n0 0 1 1\n0 1 1 0\n\nEdges of the planar map:\n0 0 --- 0.5 0.5\n0.5 0.5 --- 1 1\n0 1 --- 0.5 0.5\n1 0 --- 0.5 0.5\n</pre>\n<P>\n\n<a name=\"Section_2\"></a>\n        \n<h2>21.2&nbsp;&nbsp;&nbsp;Architecture</h2>\n<P>\n\nThe <I><A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A>&lt;<A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&lt;Dcel, Traits&gt; &gt;</I> class \nis parameterized with the <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I> class it inherits from, which \nis parameterized with the <I>Dcel</I> and the <I>Traits</I> objects. The\n<I>Dcel</I> is a data structure that maintains a\n<I>doubly-connected edge list</I> and represents the underlying topology.\nThe geometric functionality is provided by the <I>Traits</I> class, and is\ntailored to handle a specific family of curves. It encapsulates the\nnumber type used and the coordinate representation. This package\ncontains traits classes that handle various types of curves (e.g.,\nsegments, polylines, conics, etc.).\n<P>\n\nSimilar to some constructors of the <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I>, \n(see Chapter&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>), some of the constructors of the\n<I><A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A></I> class allow you to choose between\nvarious point-location strategies. While the default point-location\nstrategy of the <I><A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A></I> class is the <I>trapezoid-ric</I> strategy,\nwhich is based on a trapezoidal decomposition of the map, and requires\nconstructing and maintening auxliary data structures, the default strategy\nof the <I><A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_817\">Planar_map_with_intersections_2</A></I> class is the\n<I>walk-along-a-line</I> strategy, as the overhead of the former\ntends to be very large when no restrictions are applied on the input curves.\n<P>\n\n<h3>21.2.1&nbsp;&nbsp;&nbsp;Operations</h3>\n\nThe set of operations that can be applied to a planar map with <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> \nis divided into four subsets, namely constructors, modifiers, queries, and\ninput/output operations. These operations are overviewed in detail in\nsection&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>, so next we will just emphasize the \ndifferences between the two classes.\n<P>\n\n<h4>Aggregated Insert</h4>\n<P>\n\nA <I>Planar Map with Intersections</I> can be built incrementally by\ninserting one curve after the other into the map. However, for a large number\nof curves that intersect rather sparsely, it can be more efficient to use the\naggregate insertion method, that inserts a set of curves to an empty map at\nonce by performing the sweep-line algorithm on the set of input curves.\n<P>\n\nThe aggregate insertion method is more efficient in many cases and it also\nhas less requirements from the traits class, in comparison with the the\nincremental insertion function. Namely, the <I>curves_compare_y_at_x_left()</I> and the <I>nearest_intersection_to_left()</I> functions are not required, nor do\nthe various reflection functions.\n<P>\n\n<h4>Example of Aggregate Insertion</h4>\n\n<A NAME=\"sssec:example1_aggrinsrt\"></A>\nThe following example demonstrates the usage of the aggregate insertion\nmethod. It constructs a planar map out of four segments  -  \n<MATH><I>(0,0)-(1,1)</I></MATH> , <MATH><I>(0,1)-(1,0)</I></MATH> , <MATH><I>(0,0)-(1,0)</I></MATH> and <MATH><I>(0,1)-(1,1)</I></MATH>\n(an hourglass shape), two of them are intersecting in their interior. \nThe resulting planar map will contain all the disjoint interior sub-segments \nobtained by the calculation of the sweep line algorithm. For clarity, we printed all the halfedges of the resulting planar map to the standard output.\n<P>\n\nThe output of the program looks like this:\n<P>\n\n<h4>Non Intersecting Insertion Functions</h4>\n<P>\n\nIn some cases the users insert curves to a planar map with intersections\nin an incremental manner, but have some knowledge regarding the location\nof several curves. In such cases, special insertion functions may be called\nin order to speed up the construction of the map:\n<UL>\n<LI>If it is known in advance that the current curve is <MATH><I>x</I></MATH>-monotone and does\nnot intersect any one of the curves currently in the map in its interior,\nit is possible to insert this curve using the <I>non_intersecting_insert()</I>\nfunction. A similar function is also available for a range of <MATH><I>x</I></MATH>-monotone\nand interior-disjoint curves, that does not induce any <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> with the\nexisting curves in the map.\n<LI>Sometimes the exact location of the <MATH><I>x</I></MATH>-monotone curve in the map is known. It may be inserted (1) within the interior of a given face, (2) with one given vertex as one of its endpoints, or (3) between to given vertices. The <I>non_intersecting_insert_in_face_interior()</I>, <I>non_intersecting_insert_from_vertex()</I> and <I>non_intersecting_insert_at_vertices()</I> functions serve for this purpose. For more details regrading these special insertion functions, as well as for an example for their usage, see section&nbsp;<A HREF=\"../Planar_map/Chapter_main.html#I1_ChapterPlanarMap\"><IMG SRC=\"cc_ref_up_arrow.gif\" ALT=\"reference\" WIDTH=\"10\" HEIGHT=\"10\"></A>.\n</UL>\n<P>\n\n<BR>\n\n<div class=\"AdvancedBlock\">\n  <table><tr><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin1.gif\" alt=\"begin of advanced section\">\n  </td><td valign=\"top\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"top\">\n  <img border=\"0\" src=\"cc_advanced_begin2.gif\" alt=\"begin of advanced section\">\n  </td></tr></table>\n\n\n<h3>21.2.2&nbsp;&nbsp;&nbsp;Change Notification</h3>\n<P>\n\nAn insertion of an intersecting curve into a planar map may add\nseveral halfedges and modify several features of the map (i.e.\nsplit halfedges, split faces, etc.). The so-called <I>Change Notification</I> class provides this kind of flexibility. The modification \nmethods accept an additional parameter, a class which is a model of the\n<I><A HREF=\"../Pm_with_intersections_2_ref/Concept_PlanarMapWithIntersectionsChangeNotification_2.html#Cross_link_anchor_819\">PlanarMapWithIntersectionsChangeNotification_2</A></I> concept. The\nchange notification includes an associative function for each\nmodification method.  This function is called after each such\nmodification.\n<P>\n\nThe change notification class is useful in many cases. For example,\none may add a color (or other extra data) to any halfedge of a\nplanar map. An insertion of a new curve can split halfedges that\nwere previously in the map. After such a split the color of the\nnewly created halfedges should be updated according to the original\ncolor of the split halfedge. One can do this by implementing the\n<I>split_edge</I> function of the change notification class. This\nfunction will be called after each split of an halfedge in the map.\n<P>\n\n<h4>Example of Change Notification</h4>\n\n<A NAME=\"ssecn:example2\"></A>\nThe following example demonstrates the usage of the change\nnotification concept during the construction of a\nplanar map out of three segments  -  <MATH><I>(0,1)-(1,0)</I></MATH>, <MATH><I>(0,0)-(1,1)</I></MATH>\nand <MATH><I>(0,1)-(1,1)</I></MATH>.\nDuring the insertion we use <I>My_notification</I> instance to\noutput the internal process of the construction of the planar map.\nWe also count how many edges are in the map by incrementing a\ncounter each time an edge is added (<I>add_edge</I>) or split \n(<I>split_edge</I>).\n<P>\n\n<pre class=\"ExampleCode\">// file: examples/Pm_with_intersections/example2.C\n\n#include &quot;short_names.h&quot;\n\n#include &lt;CGAL/<A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1400\">MP_Float</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1404\">Quotient</A>.h&gt;\n#include &lt;CGAL/Pm_default_dcel.h&gt;\n#include &lt;CGAL/<A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_837\">Arr_segment_traits_2</A>.h&gt;\n#include &lt;CGAL/<A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>.h&gt;\n#include &lt;CGAL/Pm_with_intersections.h&gt;\n\ntypedef <A HREF=\"../NumberTypeSupport_ref/Class_Quotient.html#Cross_link_anchor_1403\">CGAL::Quotient</A>&lt;<A HREF=\"../NumberTypeSupport_ref/Class_MP_Float.html#Cross_link_anchor_1399\">CGAL::MP_Float</A>&gt;                      NT;\ntypedef <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_5\">CGAL::Cartesian</A>&lt;NT&gt;                                 <A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>;\ntypedef <A HREF=\"../Arrangement_2_ref/Class_Arr_segment_traits_2.html#Cross_link_anchor_836\">CGAL::Arr_segment_traits_2</A>&lt;<A HREF=\"../Kernel_23_ref/Concept_Kernel.html#Cross_link_anchor_0\">Kernel</A>&gt;                  Traits;\ntypedef Traits::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>                                     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\ntypedef Traits::X_monotone_curve_2                          X_monotone_curve_2;\ntypedef CGAL::Pm_default_dcel&lt;Traits&gt;                       Dcel;\ntypedef <A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_786\">CGAL::Planar_map_2</A>&lt;Dcel,Traits&gt;                     <A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>;\ntypedef <A HREF=\"../Pm_with_intersections_2_ref/Class_Planar_map_with_intersections_2.html#Cross_link_anchor_816\">CGAL::Planar_map_with_intersections_2</A>&lt;<A HREF=\"../Planar_map_ref/Class_Planar_map_2.html#Cross_link_anchor_787\">Planar_map_2</A>&gt; Pmwx;\ntypedef Pmwx::Pmwx_change_notification Pmwx_change_notification;\n\nclass My_notification : public Pmwx_change_notification \n{\npublic:\n\n  My_notification()\n  {i = 0;}\n\n  void add_edge(const  Traits::X_monotone_curve_2 &amp;,\n                Planar_map::Halfedge_handle, \n                bool /* left_to_right */, bool overlap = false)\n  {\n    (void) overlap;\n    std::cout &lt;&lt; &quot;add_edge&quot; &lt;&lt; std::endl;\n    i++;\n  }\n\n  void split_edge(Planar_map::Halfedge_handle /* orig_edge */, \n                  Planar_map::Halfedge_handle /* new_edge */,\n                  const Traits::X_monotone_curve_2 &amp;,\n                  const Traits::X_monotone_curve_2 &amp;)\n  {\n    std::cout &lt;&lt; &quot;split_edge&quot; &lt;&lt; std::endl;\n    i++;\n  }\n\n  void split_face(Planar_map::Face_handle /* orig_face */, \n                  Planar_map::Face_handle /* new_face */)\n  {\n    std::cout &lt;&lt; &quot;split_face&quot; &lt;&lt; std::endl;\n  }\n\n  void add_hole(Planar_map::Face_handle /* in_face */, \n                Planar_map::Halfedge_handle /* new_hole */)\n  {\n    std::cout &lt;&lt; &quot;add_hole&quot; &lt;&lt; std::endl;\n  }\n\n  int i;\n};\n\nint main() {\n  \n  Pmwx pm;\n  My_notification notif;\n\n  //insertion of the curves\n  X_monotone_curve_2 c1(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(0, 1), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1, 0));\n  X_monotone_curve_2 c2(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(0, 0), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1, 1));\n  X_monotone_curve_2 c3(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(0, 1), <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>(1, 1));\n\n  std::cout &lt;&lt; &quot;inserting &quot; &lt;&lt; c1 &lt;&lt; std::endl;\n  pm.insert(c1, &amp;notif);\n  std::cout &lt;&lt; &quot;inserting &quot; &lt;&lt; c2 &lt;&lt; std::endl;\n  pm.insert(c2, &amp;notif);\n  std::cout &lt;&lt; &quot;inserting &quot; &lt;&lt; c3 &lt;&lt; std::endl;\n  pm.insert(c3, &amp;notif);\n\n  std::cout &lt;&lt; &quot;Total number of edges &quot; &lt;&lt; notif.i &lt;&lt; std::endl;\n\n  return 0;\n}\n</pre>\n<P>\n\nThe output of the program looks like this:\n<pre class=\"Verbatim\">\ninserting 0 1 1 0\nadd_edge\nadd_hole\ninserting 0 0 1 1\nsplit_edge\nadd_edge\nadd_edge\ninserting 0 1 1 1\nadd_edge\nsplit_face\nTotal number of edges 5\n</pre>\n<P>\n\n<table><tr><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end1.gif\" alt=\"end of advanced section\">\n  </td><td valign=\"bottom\">\n  <em class=\"AdvancedBlockLabel\">&nbsp;advanced&nbsp;</em>\n  </td><td valign=\"bottom\">\n  <img border=\"0\" src=\"cc_advanced_end2.gif\" alt=\"end of advanced section\">\n  </td></tr></table></div>\n<P>\n\n<div class=\"NavNext\"><hr> Next chapter: <a href=\"../Pm_with_intersections_2_ref/Chapter_intro.html\">2D Planar Maps of Intersecting Curves</a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_21!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38539.0}