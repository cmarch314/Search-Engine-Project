{"text": "ICS 32 Winter 2 15 News Course Reference Schedule Project Guide Code Examples About Alex ICS 32 Winter 2 15 Project 5 The Width of a Circle Part 2 Due date and time Friday March 13 11 59pm This project is to be done individually Background In the previous project you implemented an Othello game with a console mode user interface in the spirit of the user interfaces we ve been building all quarter However when you compare that program to the kinds of programs you use on a daily basis it s not hard to see that there s something missing that your Othello game was less satisfying than the kinds of software you interact with In recent lectures we ve been learning about tkinter a library built into Python that provides the ability to build programs with graphical user interfaces in Python This project asks you to take the program you wrote for the previous project and replace its user interface with a graphical one You ll build your graphical user interface using tkinter as we ve been doing in lecture but the program will otherwise preserve its underlying spirit users will have the same set of options and will play the same game but the look and feel of the game will be more realistic Having completed this task you ll have taken a step toward building the kinds of software you use every day The program This project asks you to build a graphical user interface that implements the same Othello game as the previous project As before the user will begin by selecting a set of options that configure how the game will be played the game will then be played by asking users to make moves in a graphical window continuing untli the game is complete at which point the game has ended and the window can be dismissed Some details about the GUI based version of Othello Your GUI based version of Othello will begin by asking users to make the same choices as in the previous project You have some leeway in how you design the part of the GUI that asks these questions but the input will need to be provided in a reasonable convenient way in the GUI not via the console the look and feel is up to you but try to provide something that would be convenient for a user How many rows are on the board an even integer between 4 and 16 inclusiveHow many columns are on the board an even integer between 4 and 16 inclusive which does not have to be the same as the number of rowsWhich player black or white will move firstThe arrangement of the four discs in the center of the grid at the beginning of the game black in the upper left of the four cells with discs or white Whether the game will be won by the player with more discs or fewer discs one or the other but not both Once the game begins the GUI should display the current score i e how many discs of each color are on the board a clean representation of the game board as a grid with discs colored either black or white and an indication of whose turn it is to move black or white The user is permitted to make a move by clicking one of the squares on the grid though the move will only be allowed if it is valid once a valid move is made the board is updated to reflect the necessary changes i e which discs are flipped etc When the game is over display three things in the GUI the score the final game board and who the winner is Be sure to handle the case where there is no winner i e the number of discs on the board for both players is equal at the end of the game At this point you can simply wait for the user to dismiss the window or you can optionally offer the user the choice to play another game Approaching the problem Reusing your game logic If you have a complete set of game logic from the previous project you ll find that your task this time is primary one of visualization and taking input Your game logic if designed appropriately before should be usable without modification In some ways it may not e g if your game logic makes assumptions about the presence of a console user interface instead of a graphical one and in these areas lie learning opportunities reflect on what changes you had to make and why and understand how you could have avoided making those changes What to do if you didn t complete your game logic previously If your game logic was incomplete or incorrect in the previous project you are not required to complete it but you do need to submit something stable so the following is a simplified set of rules that you can implement instead of the complete rules for Othello implementing these rules leaves open the possibility of receiving full credit on this project i e there are no deductions for not implementing more than this and there are no bonuses for implementing everything The same configuration options need to exist i e number of rows and columns who moves first how the tiles are arranged at the start of the game and whether more or fewer tiles wins the game and they have the same meanings as before A player can make a valid move anywhere on the board that is not already occupied by a tile When a player makes a move any adjacent cell on the board i e one cell away in any of the eight directions from where the move was made containing a tile of the opponent player s color is flipped The game ends when neither player can make a valid move In general at your option you can submit either complete Othello game logic or logic for the modified version of Othello described above Module design As before you are required to keep the code that implements the game logic entirely separate from the code that implements your GUI To that end you will be required to submit at least two modules one that implements your game logic and another that implements your GUI You re welcome to break these two modules up further if you find it beneficial but the requirement is to keep these two parts of your program the logic and the user interface separate At least one of your modules should be executable i e should contain an if name main block namely the one that you would execute if you wanted to launch your GUI and play your game Using classes to implement your GUI Because your event handlers will need access to the game s current state your GUI should be implemented as one or more classes in the style we ve been discussing in recent lectures with at least an object representing the application you may also find it useful to have additional kinds of objects that represent parts of your GUI but this is up to you to decide and is not a requirement Drawing the game board and resizing the GUI s root window You are not permitted to represent the game board using built in widgets like buttons Instead you ll need to draw it on a Canvas widget programmatically Additionally your GUI s root window must support resizing and resizing it must cause the area in which the board is drawn to change size correspondingly with the game board redrawn to fill the available space so the user can decide how large of a window he or she would like to play the game on Where to find more information about tkinter When you want to know more about the tkinter library there are two places where you can get a lot of good information Almost surely you ll want to do things in your own GUIs that we didn t end up having time to cover in lecture and don t show up in these code examples so these are the places to go if you want to find out more In general I m happy to help though you ll find that my knowledge of this library is not encyclopedic so there s a chance you ll stump me and I ll send you to the places linked below A good place to start is Chapter 9 of the Perkovic text that I recommended for this course and was used in ICS 31 While it s not an exhaustive look at tkinter it covers the basic concepts that tkinter is built around in more detail than you ll see in each lecture or in these code examples The tkinter 8 5 Reference from New Mexico Tech Computer Center is a more comprehensive reference book weighing in at over 16 pages in its printable PDF version that will tell you absolutely everything you would want to know about tkinter The one thing to be cautious about is that its Python code examples use an older version of the Python language Python 2 that differs from the version we re using Python 3 in a number of mostly minor ways so you ll need to be cognizant of these differences A word about the use of outside resources I am aware that there are existing versions of Othello written in Python that are available online It should go without saying that you are not permitted to download these and submit them as your own in whole or in part and that you are not permitted to use them as any kind of basis for your own work but prior experience has taught me otherwise I generally like to keep a pretty open policy about outside resources when it s pedagogically wise but other implementations of Othello are strictly off limits in your work on this project Be aware that a variety of existing implementations found online will be included in the plagiarism detection that we do after your work is submitted Additionally be aware that you are allowed to reuse your own game logic from Project 4 but you are not permitted to use someone else s if you were unable to finish your own Deliverables Put your name and student ID in a comment at the top of each of your py files then submit all of the files to Checkmate Take a moment to be sure that you ve submitted all of your files Follow this link for a discussion of how to submit your project via Checkmate Be aware that I ll be holding you to all of the rules specified in that document including the one that says that you re responsible for submitting the version of the project that you want greaded We won t regrade a project simply because you submitted the wrong version accidentally Can I submit after the deadline Yes it is possible subject to the late work policy for this course which is described in the section titled Late work at this link Option to implement a simplified version of Othello added by Alex Thornton Spring 2 14 Originally written by Alex Thornton Winter 2 13 with some influence from Games Without Frontiers and Black and White also written by Alex Thornton ", "_id": "http://www.ics.uci.edu/~thornton/ics32/ProjectGuide/Project5/", "title": "ics 32 winter 2015, project #5: the width of a circle (part 2)", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 32 Winter 2015, Project #5: The Width of a Circle (Part 2)</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 32 Winter 2015 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 32 Winter 2015<br />\r\n   Project #5: <i>The Width of a Circle (Part 2)</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Friday, March 13, 11:59pm</i></p>\r\n\r\n<p class=\"center\"><i>This project is to be done individually</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>In the <a href=\"../Project4\">previous project</a>, you implemented an Othello game with a console-mode user interface, in the spirit of the user interfaces we've been building all quarter.  However, when you compare that program to the kinds of programs you use on a daily basis, it's not hard to see that there's something missing, that your Othello game was less satisfying than the kinds of software you interact with.</p>\r\n\r\n<p>In recent lectures, we've been learning about <b>tkinter</b>, a library built into Python that provides the ability to build programs with graphical user interfaces in Python.  This project asks you to take the program you wrote for the <a href=\"../Project4\">previous project</a> and replace its user interface with a graphical one.  You'll build your graphical user interface using <b>tkinter</b>, as we've been doing in lecture, but the program will otherwise preserve its underlying spirit; users will have the same set of options and will play the same game, but the look and feel of the game will be more realistic.  Having completed this task, you'll have taken a step toward building the kinds of software you use every day.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>This project asks you to build a graphical user interface that implements the same Othello game as the <a href=\"../Project4\">previous project</a>.  As before, the user will begin by selecting a set of options that configure how the game will be played; the game will then be played by asking users to make moves in a graphical window, continuing untli the game is complete, at which point the game has ended and the window can be dismissed.</p>\r\n\r\n<p class=\"subtitle\">Some details about the GUI-based version of Othello</p>\r\n\r\n<p>Your GUI-based version of Othello will begin by asking users to make the same choices as in the <a href=\"../Project4\">previous project</a>.  You have some leeway in how you design the part of the GUI that asks these questions, but the input will need to be provided in a reasonable, convenient way in the GUI, not via the console; the look and feel is up to you, but try to provide something that would be convenient for a user.</p>\r\n\r\n<ul>\r\n  <li>How many rows are on the board, an <i>even integer</i> between 4 and 16 inclusive</li>\r\n  <li>How many columns are on the board, an <i>even integer</i> between 4 and 16 inclusive, which <i>does not</i> have to be the same as the number of rows</li>\r\n  <li>Which player &mdash; black or white &mdash; will move first</li>\r\n  <li>The arrangement of the four discs in the center of the grid at the beginning of the game &mdash; black in the upper-left of the four cells with discs, or white?</li>\r\n  <li>Whether the game will be won by the player with more discs or fewer discs (one or the other, but not both)</li>\r\n</ul>\r\n\r\n<p>Once the game begins, the GUI should display the current score (i.e., how many discs of each color are on the board), a clean representation of the game  board as a grid with discs colored either black or white, and an indication of whose turn it is to move (black or white).  The user is permitted to make a move by clicking one of the squares on the grid, though the move will only be allowed if it is valid; once a valid move is made, the board is updated to reflect the necessary changes (i.e., which discs are flipped, etc.).</p>\r\n\r\n<p>When the game is over, display three things in the GUI: the score, the final game board, and who the winner is.  Be sure to handle the case where there is no winner (i.e., the number of discs on the board for both players is equal at the end of the game).</p>\r\n\r\n<p>At this point, you can simply wait for the user to dismiss the window, or you can optionally offer the user the choice to play another game.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Approaching the problem</p>\r\n\r\n<p class=\"subtitle\">Reusing your game logic</p>\r\n\r\n<p>If you have a complete set of game logic from the <a href=\"../Project4\">previous project</a>, you'll find that your task this time is primary one of visualization and taking input.  Your game logic, if designed appropriately before, should be usable without modification.  In some ways, it may not (e.g., if your game logic makes assumptions about the presence of a console user interface instead of a graphical one), and in these areas lie learning opportunities: reflect on what changes you had to make and why, and understand how you could have avoided making those changes.</p>\r\n\r\n<p class=\"subtitle\">What to do if you didn't complete your game logic previously</p>\r\n\r\n<p>If your game logic was incomplete or incorrect in the <a href=\"../Project4\">previous project</a>, you are not required to complete it, but you do need to submit something stable, so the following is a simplified set of rules that you can implement instead of the complete rules for Othello; implementing these rules leaves open the possibility of receiving full credit on this project (i.e., there are no deductions for not implementing more than this, and there are no bonuses for implementing everything).</p>\r\n\r\n<ul>\r\n  <li>The same configuration options need to exist (i.e., number of rows and columns, who moves first, how the tiles are arranged at the start of the game, and whether more or fewer tiles wins the game) and they have the same meanings as before.</li>\r\n  <li>A player can make a valid move anywhere on the board that is not already occupied by a tile.</li>\r\n  <li>When a player makes a move, any adjacent cell on the board (i.e., one cell away in any of the eight directions from where the move was made) containing a tile of the opponent player's color is flipped.</li>\r\n  <li>The game ends when neither player can make a valid move.</li>\r\n</ul>\r\n\r\n<p>In general, at your option, you can submit either complete Othello game logic or logic for the modified version of Othello described above.</p>\r\n\r\n<p class=\"subtitle\">Module design</p>\r\n\r\n<p>As before, you are required to keep the code that implements the game logic entirely separate from the code that implements your GUI.  To that end, <i>you will be required</i> to submit at least two modules: one that implements your game logic and another that implements your GUI.  You're welcome to break these two modules up further if you find it beneficial, but the requirement is to keep these two parts of your program &mdash; the logic and the user interface &mdash; separate.</p>\r\n\r\n<p>At least one of your modules should be executable (i.e., should contain an <b>if __name__ == '__main__':</b> block), namely the one that you would execute if you wanted to launch your GUI and play your game.</p>\r\n\r\n<p class=\"subtitle\">Using classes to implement your GUI</p>\r\n\r\n<p>Because your event handlers will need access to the game's current state, your GUI should be implemented as one or more classes, in the style we've been discussing in recent lectures, with (at least) an object representing the application; you may also find it useful to have additional kinds of objects that represent parts of your GUI, but this is up to you to decide and is not a requirement.</p>\r\n\r\n<p class=\"subtitle\">Drawing the game board and resizing the GUI's root window</p>\r\n\r\n<p>You are not permitted to represent the game board using built-in widgets like buttons.  Instead, you'll need to draw it on a Canvas widget programmatically.  Additionally, your GUI's root window must support resizing, and resizing it must cause the area in which the board is drawn to change size correspondingly, with the game board redrawn to fill the available space, so the user can decide how large of a window he or she would like to play the game on.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Where to find more information about tkinter</p>\r\n\r\n<p>When you want to know more about the <b>tkinter</b> library, there are two places where you can get a lot of good information.  Almost surely, you'll want to do things in your own GUIs that we didn't end up having time to cover in lecture and don't show up in these code examples, so these are the places to go if you want to find out more.  In general, I'm happy to help, though you'll find that my knowledge of this library is not encyclopedic, so there's a chance you'll stump me and I'll send you to the places linked below.</p>\r\n\r\n<ul>\r\n  <li>A good place to start is Chapter 9 of the Perkovic text that I recommended for this course (and was used in ICS 31).  While it's not an exhaustive look at <b>tkinter</b>, it covers the basic concepts that <b>tkinter</b> is built around in more detail than you'll see in each lecture or in these code examples.</li>\r\n  <li>The <a href=\"http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html\">tkinter 8.5 Reference</a> from New Mexico Tech Computer Center is a more comprehensive reference book &mdash; weighing in at over 160 pages in its <a href=\"http://www.nmt.edu/tcc/help/pubs/tkinter/tkinter.pdf\">printable PDF version</a> &mdash; that will tell you absolutely everything you would want to know about <b>tkinter</b>.\r\n    <ul>\r\n      <li>The one thing to be cautious about is that its Python code examples use an older version of the Python language (Python 2) that differs from the version we're using (Python 3) in a number of (mostly minor) ways, so you'll need to be cognizant of these differences.</li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">A word about the use of outside resources</p>\r\n\r\n<p>I am aware that there are existing versions of Othello written in Python that are available online.  It should go without saying that you are not permitted to download these and submit them as your own, in whole or in part, and that you are not permitted to use them as any kind of basis for your own work, but prior experience has taught me otherwise.  I generally like to keep a pretty open policy about outside resources when it's pedagogically wise, but other implementations of Othello are strictly off-limits in your work on this project. Be aware that a variety of existing implementations found online will be included in the plagiarism detection that we do after your work is submitted.</p>\r\n\r\n<p>Additionally, be aware that you are allowed to reuse <i>your own</i> game logic from <a href=\"../Project4\">Project #4</a>, but you are not permitted to use someone else's if you were unable to finish your own.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>Put your name and student ID in a comment at the top of each of your <b>.py</b> files, then submit all of the files to Checkmate.  Take a moment to be sure that you've submitted all of your files.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want greaded.  We won't regrade a project simply because you submitted the wrong version accidentally.</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course, which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Option to implement a simplified version of Othello added by Alex Thornton, Spring 2014.</li>\r\n  <li>Originally written by Alex Thornton, Winter 2013, with some influence from <i>Games Without Frontiers</i> and <i>Black and White</i>, also written by Alex Thornton.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 16557.0}