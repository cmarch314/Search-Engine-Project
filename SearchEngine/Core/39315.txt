{"text": "Navigation Up Table of Contents Bibliography Index Title Page PartitionTraits 2 Definition The polygon partitioning functions are each parameterized by a traits class that defines the primitives used in the algorithms Many requirements are common to all traits classes The concept PartitionTraits 2 defines this common set of requirements Types PartitionTraits 2 Point 2 The point type on which the partitioning algorithm operates PartitionTraits 2 Polygon 2 The polygon type to be created by the partitioning algorithm For testing the validity postcondition of the partition this type should provide a nested type Vertex const iterator that is the type of the iterator over the polygon vertices and member functions Vertex const iterator vertices begin and Vertex const iterator vertices end PartitionTraits 2 Less xy 2 Predicate object type that compares Point 2s lexicographically Must provide bool operator Point 2 p Point 2 q where true is returned iff p xy q We have p xyq iff px qx or px qx and py qy where px and py denote the x and y coordinates of point p respectively PartitionTraits 2 Less yx 2 Same as Less xy 2 with the roles of x and y interchanged PartitionTraits 2 Left turn 2 Predicate object type that provides bool operator Point 2 p Point 2 q Point 2 r which returns true iff r lies to the left of the oriented line through p and q PartitionTraits 2 Orientation 2 Predicate object type that provides CGAL Orientation operator Point 2 p Point 2 q Point 2 r that returns CGAL LEFT TURN if r lies to the left of the oriented line l defined by p and q returns CGAL RIGHT TURN if r lies to the right of l and returns CGAL COLLINEAR if r lies on l PartitionTraits 2 Compare y 2 Predicate object type that provides CGAL Comparision result operator Point 2 p Point 2 q to compare the y values of two points The operator must return CGAL SMALLER if py qy CGAL LARGER if py qy and CGAL EQUAL if py qy PartitionTraits 2 Compare x 2 The same as Compare y 2 except that x coordinates are compared instead of y Creation A copy constructor and default constructor are required PartitionTraits 2 traits PartitionTraits 2 traits tr Operations The following functions that create instances of the above predicate object types must exist Less yx 2 traits less yx 2 object Less xy 2 traits less xy 2 object Left turn 2 traits left turn 2 object Orientation 2 traits orientation 2 object Compare y 2 traits compare y 2 object Compare x 2 traits compare x 2 object Has Models CGAL Partition traits 2 R See Also CGAL approx convex partition 2 CGAL greene approx convex partition 2 CGAL optimal convex partition 2 CGAL y monotone partition 2 Next PartitionIsValidTraits 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Partition_2_ref/Concept_PartitionTraits_2.html", "title": "partitiontraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Partition_2_ref/PartitionTraits_2.tex' -->\n<html> <head>  \n<title>PartitionTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_682\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_668\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_PartitionTraits_2\"></A>\n<h2><I>PartitionTraits_2</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe polygon partitioning functions are each parameterized by a traits class \nthat defines the primitives used in the algorithms.  Many requirements are \ncommon\nto all traits classes.  The concept <I><A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A></I> defines this common set of\nrequirements.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The point type on which the partitioning algorithm operates.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::<A HREF=\"../Polygon_ref/Class_Polygon_2.html#Cross_link_anchor_672\">Polygon_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The polygon type to be created by the partitioning \nalgorithm. For testing the validity postcondition of the partition, this \ntype should provide a nested type <I>Vertex_const_iterator</I> that is the\ntype of the iterator over the polygon vertices and member functions\n<I>Vertex_const_iterator vertices_begin()</I> and\n<I>Vertex_const_iterator vertices_end()</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n\n   \n     \n     \n<A NAME=\"Index_anchor_669\"></A> \n\n   \n\n\n   \n     \n     \n<A NAME=\"Index_anchor_670\"></A> \n\n   \n\n\n   \n     \n     \n<A NAME=\"Index_anchor_671\"></A> \n\n   \n\n\n   \n     \n     \n<A NAME=\"Index_anchor_672\"></A>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Less_xy_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that compares <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>s lexicographically.\nMust provide <I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)</I> where <I>true</I>\nis returned iff <MATH><I>p &lt;<SUB>xy</SUB> q</I></MATH>.\nWe have <MATH><I>p&lt;<SUB>xy</SUB>q</I></MATH>, iff <MATH><I>p<SUB>x</SUB> &lt; q<SUB>x</SUB></I></MATH> or <MATH><I>p<SUB>x</SUB> = q<SUB>x</SUB></I></MATH> and <MATH><I>p<SUB>y</SUB> &lt; q<SUB>y</SUB></I></MATH>,\nwhere <MATH><I>p<SUB>x</SUB></I></MATH> and <MATH><I>p<SUB>y</SUB></I></MATH> denote the <MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> coordinates of point <MATH><I>p</I></MATH>, \nrespectively.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Less_yx_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Same as <I>Less_xy_2</I> with the roles of <MATH><I>x</I></MATH> and <MATH><I>y</I></MATH> interchanged.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Left_turn_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that provides \n<I>bool operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q,<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> r)</I>, which\nreturns <I>true</I> iff <I>r</I> lies to the left of the \noriented line through <I>p</I> and <I>q</I>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Orientation_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that provides\n<I><A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_113\">CGAL::Orientation</A> operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> r)</I> that\nreturns <I><A HREF=\"../Kernel_23_ref/Constant_LEFT_TURN.html#Cross_link_anchor_126\">CGAL::LEFT_TURN</A></I>, if <MATH><I>r</I></MATH> lies to the left of the oriented \nline <MATH><I>l</I></MATH> defined by <MATH><I>p</I></MATH> and <MATH><I>q</I></MATH>, returns <I><A HREF=\"../Kernel_23_ref/Constant_RIGHT_TURN.html#Cross_link_anchor_128\">CGAL::RIGHT_TURN</A></I> if <MATH><I>r</I></MATH> \nlies to the right of <MATH><I>l</I></MATH>, and returns <I><A HREF=\"../Kernel_23_ref/Constant_COLLINEAR.html#Cross_link_anchor_124\">CGAL::COLLINEAR</A></I> if <MATH><I>r</I></MATH> lies\non <MATH><I>l</I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Compare_y_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Predicate object type that provides\n<I>CGAL::Comparision_result operator()(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)</I> to <A HREF=\"../NumberTypeSupport_ref/Function_compare.html#Cross_link_anchor_1339\">compare</A>\nthe <MATH><I>y</I></MATH> values of two points.  The operator must return\n<I>CGAL::<A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">SMALLER</A></I> if <MATH><I>p<SUB>y</SUB> &lt; q<SUB>y</SUB></I></MATH>, <I>CGAL::<A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">LARGER</A></I> if <MATH><I>p<SUB>y</SUB> &gt; q<SUB>y</SUB></I></MATH> and\n<I>CGAL::<A HREF=\"../Kernel_23_ref/Enum_Comparison_result#Enum_Comparison_result\">EQUAL</A></I> if <MATH><I>p<SUB>y</SUB> = q<SUB>y</SUB></I></MATH>.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A>::Compare_x_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    The same as <I>Compare_y_2</I>, except that <MATH><I>x</I></MATH> \ncoordinates are compared instead of <MATH><I>y</I></MATH>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\nA copy constructor and default constructor are required.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A> traits;\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n<TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_PartitionTraits_2.html#Cross_link_anchor_682\">PartitionTraits_2</A> traits (  &amp; tr);\n        </I></NOBR>\n        </TD></TR>\n<P>\n\n</TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\nThe following functions that create instances of the above predicate object\ntypes must exist.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Less_yx_2_less_yx_2_object69;\"></A>\nLess_yx_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_yx_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Less_xy_2_less_xy_2_object69;\"></A>\nLess_xy_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.less_xy_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Left_turn_2_left_turn_2_object69;\"></A>\nLeft_turn_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.left_turn_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Orientation_2_orientation_2_object69;\"></A>\nOrientation_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.orientation_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_y_2_compare_y_2_object69;\"></A>\nCompare_y_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.compare_y_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_x_2_compare_x_2_object69;\"></A>\nCompare_x_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    traits.compare_x_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Partition_traits_2.html#Cross_link_anchor_689\">CGAL::Partition_traits_2</A>&lt;R&gt;</I>\n<P>\n\n<H3>See Also</H3>\n<P>\n\n<I><A HREF=\"Function_approx_convex_partition_2.html#Cross_link_anchor_697\">CGAL::approx_convex_partition_2</A></I><BR>\n\n<I><A HREF=\"Function_greene_approx_convex_partition_2.html#Cross_link_anchor_701\">CGAL::greene_approx_convex_partition_2</A></I><BR>\n\n<I><A HREF=\"Function_optimal_convex_partition_2.html#Cross_link_anchor_705\">CGAL::optimal_convex_partition_2</A></I><BR>\n\n<I><A HREF=\"Function_y_monotone_partition_2.html#Cross_link_anchor_709\">CGAL::y_monotone_partition_2</A></I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_PartitionIsValidTraits_2.html\"><I>PartitionIsValidTraits_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_10!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 39315.0}