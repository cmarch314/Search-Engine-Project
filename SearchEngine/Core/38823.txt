{"text": "OEChem C Theory Manual Version 1 3 1 Previous 32 7 Requiring Parameters Up 32 OpenEye Command Line Next 32 9 Types of Parameters 32 8 Accessing parameter values Previous sections in this chapter have used the OEWriteSettings function to list the settings of various parameter to standard out Parameter values however are most commonly accessed directly using the Has and Get member functions of OEInterface These functions are described in detail in the API documentation but briefly the Has function returns true if a parameter has either a default value or a user specified setting The Get returns the user specified setting of the parameter or the default value if the user did not specify the setting if the user did not specify a setting and there is no default value a default constructed object is returned an an error is issued The following example illustrates the use of the Has and Get member functions Chapter 32 Example 1 cpp file include oeplatform h include oesystem h Defines static const unsigned char array InterfaceData include ch32 1 itf Defines static const unsigned char array RequirementData include ch32 1 r req using namespace OEPlatform using namespace OESystem using namespace std int main int argc char argv OEInterface itf OEConfigure itf InterfaceData if OECheckHelp itf argc argv return OEParseCommandLine itf argc argv RequirementData if itf Has string op OEThrow Error You must specify op return 1 string op itf Get string op float x itf Get float x float y itf Get float y if op add oeout x plus y is x y oeendl else if op subtract oeout x minus y is x y oeendl else if op multiply oeout x times y is x y oeendl else if op divide oeout x divided by y is x y oeendl else OEThrow Error s is not a valid operation op c str return 1 return Download as text Chapter 32 Example 1 OEConfigure txt configuration file CATEGORY Variables BRIEF Category for variables PARAMETER x TYPE float DEFAULT BRIEF First variable END PARAMETER y TYPE float DEFAULT BRIEF Second variable END END CATEGORY operator PARAMETER op TYPE string BRIEF Operation to perform on x and y DETAIL The operation performed is x op y So if op is add the operation is x y END END Download as text Chapter 32 Example 1 Requirement txt configuration file REQUIREMENT OPTION y op divide OPTION y ERROR MSG Cannot divide by zero result would be undefined END Download as text Not that there is no need to check to see if the itf object Has x or y because these variables have a default value Has will therefore always return true The Get function with therefore always succeed if the user doesn t specify a value the default will be returned Output of this program looks like the following ch32 1 x 1 y 2 op add 1 plus 2 is 3 ch32 1 x 1 y 2 op multiply 1 times 2 is 2 ch32 1 x 1 y 2 op divide 1 divided by 2 is 5 ch32 1 x 1 y 2 op subtract 1 minus 2 is 1 ch32 1 x 1 y 2 op square Fatal square is not a valid operation ch32 1 op divide Fatal Missing requirements Cannot divide by zero result would be undefined Some things to know about the Has and Get member functions of OEInterface If Has is templated incorrectly i e the parameter with the given name is not the same type as the Has functions template it returns false If Get is templated incorrectly i e the parameter with the given name is not the same type as the Get functions template it returns a default constructed object of the type Get is templated upon and issued an error If Has returns true Get will succeed for the same input The Has and Get automatically search all child interfaces for parameters OEChem C Theory Manual Version 1 3 1 Previous 32 7 Requiring Parameters Up 32 OpenEye Command Line Next 32 9 Types of Parameters Documentation released on July 3 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/oechem/cplusprog/node262.html", "title": "32.8 accessing parameter values", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n<html>\n<head>\n<title>32.8 Accessing parameter values</title>\n<META NAME=\"description\" CONTENT=\"32.8 Accessing parameter values\">\n<META NAME=\"keywords\" CONTENT=\"cplusprog\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n<link rel=\"STYLESHEET\" href=\"cplusprog.css\">\n<link rel=\"first\" href=\"cplusprog.html\">\n<link rel=\"contents\" href=\"contents.html\" title=\"Contents\">\n\n<LINK REL=\"next\" HREF=\"node263.html\">\n<LINK REL=\"previous\" HREF=\"node261.html\">\n<LINK REL=\"up\" HREF=\"node252.html\">\n<LINK REL=\"next\" HREF=\"node263.html\">\n</head>\n<body>\n<DIV CLASS=\"navigation\">\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node261.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node263.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node261.html\">32.7 Requiring Parameters</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node263.html\">32.9 Types of Parameters</A>\n<br><hr>\n</DIV>\n<!--End of Navigation Panel-->\n\n<H1><A NAME=\"SECTION0035800000000000000000\">\n32.8 Accessing parameter values</A>\n</H1>\n\n<P>\nPrevious sections in this chapter have used the OEWriteSettings function\nto list the settings of various parameter to standard out.  Parameter\nvalues however, are most commonly accessed directly using the <i>Has</i>\nand <i>Get</i> member functions of OEInterface.  These functions are\ndescribed in detail in the API documentation, but briefly the Has function\nreturns true if a parameter has either a default value or a user specified\nsetting.  The <i>Get</i> returns the user specified setting of the parameter, or\nthe default value if the user did not specify the setting (if the user did\nnot specify a setting and there is no default value a default constructed\nobject is returned an an error is issued).  The following example\nillustrates the use of the <i>Has</i> and <i>Get</i> member functions.\n\n<P>\n<i>Chapter 32 - Example 10 : cpp file</i>\n<dl><dd><pre class=\"verbatim\">#include \"oeplatform.h\"\n#include \"oesystem.h\"\n\n//Defines static const unsigned char* array InterfaceData\n#include \"ch32-10.itf\"\n\n//Defines static const unsigned char* array RequirementData\n#include \"ch32-10r.req\"\n\nusing namespace OEPlatform;\nusing namespace OESystem;\nusing namespace std;\nint main(int argc, char** argv)\n{\n  OEInterface itf;\n  OEConfigure(itf,InterfaceData);\n  if (OECheckHelp(itf,argc,argv)) return 0;\n  OEParseCommandLine(itf,argc,argv,RequirementData);\n\n  if (!itf.Has&lt;string&gt;(\"-op\"))\n  {\n    OEThrow.Error(\"You must specify -op\");\n    return 1;\n  }\n\n  string op = itf.Get&lt;string&gt;(\"-op\");\n  float x = itf.Get&lt;float&gt;(\"-x\");\n  float y = itf.Get&lt;float&gt;(\"-y\");\n\n  if (op == \"add\")\n  {\n    oeout &lt;&#60; x &lt;&#60; \" plus \" &lt;&#60; y &lt;&#60; \" is \" &lt;&#60; x+y &lt;&#60; oeendl;\n  }\n  else if (op == \"subtract\")\n  {\n    oeout &lt;&#60; x &lt;&#60; \" minus \" &lt;&#60; y &lt;&#60; \" is \" &lt;&#60; x-y &lt;&#60; oeendl;\n  }\n  else if (op == \"multiply\")\n  {\n    oeout &lt;&#60; x &lt;&#60; \" times \" &lt;&#60; y &lt;&#60; \" is \" &lt;&#60; x*y &lt;&#60; oeendl;\n  }\n  else if (op == \"divide\")\n  {\n    oeout &lt;&#60; x &lt;&#60; \" divided by \" &lt;&#60; y &lt;&#60; \" is \" &lt;&#60; x/y &lt;&#60; oeendl;\n  }\n  else\n  {\n    OEThrow.Error(\"%s is not a valid operation\",op.c_str());\n    return 1;\n  }\n\n  return 0;\n}\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-10.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n<i>Chapter 32 - Example 10 : OEConfigure txt configuration file</i>\n<dl><dd><pre class=\"verbatim\">!CATEGORY Variables\n  !BRIEF Category for variables\n\n  !PARAMETER -x\n    !TYPE float\n    !DEFAULT 0.0\n    !BRIEF First variable\n  !END\n\n  !PARAMETER -y\n    !TYPE float\n    !DEFAULT 0.0\n    !BRIEF Second variable\n  !END\n\n!END\n\n!CATEGORY operator\n\n  !PARAMETER -op\n    !TYPE string\n    !BRIEF Operation to perform on x and y\n    !DETAIL\n      The operation performed is\n\n        x &lt;-op&gt; y\n\n      So if -op is 'add' the operation is\n\n        x + y\n  !END\n\n!END\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-10.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\n<i>Chapter 32 - Example 10 : Requirement txt configuration file</i>\n<dl><dd><pre class=\"verbatim\">!REQUIREMENT\n  !OPTION -y 0.0 !-op divide\n  !OPTION !-y 0.0\n  !ERROR_MSG\n    Cannot divide by zero\n    result would be undefined\n!END\n</pre>\n<div class=\"verbatiminput-footer\">\n<a href=\"ch32-10r.txt\" type=\"text/plain\">Download as text.</a>\n</div>\n</dd></dl>\n\n<P>\nNot that there is no need to check to see if the itf object <i>Has</i> -x\nor -y because these variables have a default value, <i>Has</i> will therefore\nalways return true.  The <i>Get</i> function with therefore always succeed (if the\nuser doesn't specify a value the default will be returned).\n\n<P>\nOutput of this program looks like the following.\n\n<P>\n<dl><dd><pre class=\"verbatim\">&gt; ch32-10 -x 1 -y 2 -op add\n1.000000 plus 2.000000 is 3.000000\n\n&gt; ch32-10 -x 1 -y 2 -op multiply\n1.000000 times 2.000000 is 2.000000\n\n&gt; ch32-10 -x 1 -y 2 -op divide\n1.000000 divided by 2.000000 is 0.500000\n\n&gt; ch32-10 -x 1 -y 2 -op subtract\n1.000000 minus 2.000000 is -1.000000\n\n&gt; ch32-10 -x 1 -y 2 -op square\nFatal: square is not a valid operation\n\n&gt; ch32-10 -op divide\nFatal: Missing requirements:\n    Cannot divide by zero\n    result would be undefined\n&gt;\n</pre></dl>\n\n<P>\nSome things to know about the <i>Has</i> and <i>Get</i> member functions of\nOEInterface.\n\n<P>\n\n<OL>\n<LI>If <i>Has</i> is templated incorrectly (<I>i.e.</I>, the parameter\nwith the given name is not the same type as the <i>Has</i> functions template)\nit returns false.\n\n<P>\n</LI>\n<LI>If <i>Get</i> is templated incorrectly (<I>i.e.</I>, the parameter\nwith the given name is not the same type as the <i>Get</i> functions template)\nit returns a default constructed object of the type Get is templated upon,\nand issued an error.\n\n<P>\n</LI>\n<LI>If <i>Has</i> returns true, <i>Get</i> will succeed (for the same input).\n\n<P>\n</LI>\n<LI>The <i>Has</i> and <i>Get</i> automatically search\nall child interfaces for parameters.\n\n<P>\n</LI>\n</OL>\n\n<P>\n\n<DIV CLASS=\"navigation\">\n<p><hr>\n<table align=\"center\" border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td rowspan=2><A HREF=\"node261.html\"><img src=\"../icons/previous.gif\"\n  border=\"0\" alt=\"Previous Page\"></A></td>\n<td rowspan=2><A HREF=\"node252.html\"><img src=\"../icons/up.gif\"\n  border=\"0\" alt=\"Up One Level\"></A></td>\n<td rowspan=2><A HREF=\"node263.html\"><img src=\"../icons/next.gif\"\n  border=\"0\" alt=\"Next Page\"></A></td><td width=\"100%\" rowspan=\"2\"> </td>\n<td valign=\"center\" align=\"right\" height=\"56\" background=\"../icons/title_bkgd.gif\" colspan=4 class=\"navigation\">OEChem - C++ Theory Manual\n<BR>\nVersion 1.3.1</td></tr>\n<tr><td><img src=\"../icons/spacer_1.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><A href=\"contents.html\"><img src=\"../icons/contents.gif\"\n  border=\"0\" alt=\"Contents\"></A></td>\n<td><img src=\"../icons/spacer_2.gif\"\n  border=\"0\" alt=\"\"></td>\n<td><img src=\"../icons/blank_4.gif\"\n  border=\"0\" alt=\"\"></td>\n</tr></table>\n<b class=\"navlabel\">Previous:</b> <a class=\"sectref\" HREF=\"node261.html\">32.7 Requiring Parameters</A>\n<b class=\"navlabel\">Up:</b> <a class=\"sectref\" HREF=\"node252.html\">32. OpenEye Command Line</A>\n<b class=\"navlabel\">Next:</b> <a class=\"sectref\" HREF=\"node263.html\">32.9 Types of Parameters</A>\n<hr>\n<span class=\"release-info\">Documentation released on July 30, 2004.</span>\n</DIV>\n<!--End of Navigation Panel-->\n\n</BODY>\n</HTML>\n", "id": 38823.0}