{"text": "Next Dissertation Contributions Up Introduction Previous Software Uncertainty Modeling Premises and Hypothesis To arrive at the approach taken in this dissertation one must follow the statements in this section Most statements such as software complexity hinders its understanding or users get disoriented in large hypertext spaces are either widely accepted or substantiated later These statements therefore constitute the premises for this dissertation One statement however is less accepted and requires further investigation Explicit modeling of software uncertainties improves human judgment and decision making during software development This statement therefore constitutes the hypothesis for this dissertation and will be further elaborated and validated Our initial observation is that software is extremely complex i e that software systems are perhaps the most intricate of man s handiworks Bro95 Software complexity is not only ubiquitous it is also intrinsic The complexity of software is an essential property not an accidental one Bro87 By essential we mean that we may master this complexity but we can never make it go away Boo94 Complexity hinders software understanding yet understanding must be afforded if development is to be successful To manage complexity software development concerns are often separated in time and space Thus software is typically developed in distinct phases by different teams of developers Large scale software is often long lived and delivered in multiple version thereby comprising a family of related programs Par79 The product of software development is typically a large and complex collection of software elements of diverse types Software artifact collections often contain not only millions of source code lines but also versioned releases volumes of user manuals and documentation requirements and design specifications test cases and test results and so forth Moreover these software objects are typically integrated and correlated within themselves and with each other in surprisingly intricate and subtle ways SZ92 This poses substantial impediments to software understanding particularly with respect to traceability visualization and navigation issues thereby leading to the following research question Research Question Given the intricacy and complexity of software artifact relationships what can be done to improve traceability visualization and navigation of large artifact collections As a first step it is proposed that software systems be viewed as large hypertexts since hypertext offers a coherent and consistent metaphor for viewing both inter as well as intra artifact relationships cf ZO95 SZ92 Here it suffices to define hypertext informally as providing node and link views and navigation of software artifact collections Hypertext is defined more formally and completely in Chapter We therefore contend that a hypertext metaphor of software artifacts and relations should improve developer s ability to trace or track related elements in large and complex software spaces Despite the above hypertext is no silver bullet for relieving software artifact complexities and uncertainties Specifically hypertext introduces several concerns regarding its efficacy for software engineering ZO95 Here we are particularly concerned with the well known navigation problem of user confusion and disorientation in large hypertext spaces as well as the fact that hypertext systems generally are not designed with software engineering in mind This means that hypertext does not necessarily address the unique needs of software developers and users nor does it model or make use of the unique characteristics of software systems Additional means should therefore be provided to further facilitate understanding of software artifact collections The following statements concern this facilitation We claim that software engineering is fraught with uncertainties Software uncertainties contribute significantly to the overall complexity and unpredictability of software development Like complexity uncertainty is inherent to the engineering of software systems This observation is summarized succinctly in ZRK96 as the Maxim of Uncertainty in Software Engineering Uncertainty is inherent and inevitable in software processes and products Examples of software uncertainties abound many are provided in this dissertation Starting in Chapter Four we focus on uncertainties associated with developers confidence levels in software artifacts including among others requirements specifications design elements code modules and testing information These confidence levels fluctuate frequently during development Their modeling should therefore include a scheme for confidence revision and updating We now arrive at the high level statement of the hypothesis for this dissertation High level Research Hypothesis Explicitly modeling uncertainty improves human judgment and decision making during software development This hypothesis is too vague to be investigated and validated directly Instead we require a more specific formulation including a specific technique for software uncertainty modeling To model software uncertainties we turn to artificial intelligence research in modeling and management of uncertainty We select a specific uncertainty modeling technique called Bayesian belief networks Pea88 Detailed reasons for this choice are provided in Chapter Four Here it suffices to say that Bayesian networks offer a clear conceptual model of causality among related elements and include algorithms for belief revision and updating This leads to our specific hypothesis below The hypothesis speaks in terms of software artifacts which include among others requirements elements design nodes code modules and test information relationships among those artifacts established as part of the development process and confidence levels which reflect developer confidences in certain qualities and properties of software artifacts Specific Research Hypothesis Bayesian network models of software artifact uncertainties improves understanding of associated confidence levels compared to simply following linked information ultimately leading to better human decision making In the long run we believe that proper adoption and use of uncertainty modeling techniques will improve human judgment and decision making during software development For the purposes of this dissertation we focused on the specific hypothesis above and took steps toward its validation as follows An existing software system was selected as case study The system of choice called CEquencer is currently under development at Beckman Instruments in Fullerton CA CEquencer is designed to control and communicate with various hardware devices that in turn are used by biologists chemists and other scientists to separate laboratory specimens into molecular constituents in order to determine their DNA sequences CEquencer software artifacts are described in Chapter Five CEquencer requirements were investigated throughly and a hypertext model as well as a Bayesian network model of those requirements were constructed A key subsystem of CEquencer called FSM Run was investigated thoroughly resulting in a hypertext model of software artifacts including all FSM Run code modules as well as related requirements Software uncertainty information was collected for FSM Run artifacts The information was elicited from Beckman experts and developers and organized in a Bayesian network Our main hypothesis was evaluated against FSM Run code modules and related requirements as identified in 2 above In a questionnaire session with the Beckman team developers were asked to trace artifacts and associated confidence levels with and without the Bayesian network representation of confidence values Results were gathered for the case study and analyzed for statistical significance Results of the questionnaire session are summarized in Chapter Six Next Dissertation Contributions Up Introduction Previous Software Uncertainty Modeling Hadar Ziv Fri Jun 2 16 22 31 PDT 1997", "_id": "http://www.ics.uci.edu/~ziv/diss/intropaper/node3.html", "title": "premises and hypothesis", "html": "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->\n<HTML>\n<HEAD>\n<TITLE>Premises and Hypothesis</TITLE>\n<META NAME=\"description\" CONTENT=\"Premises and Hypothesis\">\n<META NAME=\"keywords\" CONTENT=\"intropaper\">\n<META NAME=\"resource-type\" CONTENT=\"document\">\n<META NAME=\"distribution\" CONTENT=\"global\">\n<LINK REL=STYLESHEET HREF=\"intropaper.css\">\n</HEAD>\n<BODY LANG=\"EN\">\n <A NAME=\"tex2html42\" HREF=\"node4.html\"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ics.uci.edu/icons/next_motif.gif\"></A> <A NAME=\"tex2html40\" HREF=\"node1.html\"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ics.uci.edu/icons/up_motif.gif\"></A> <A NAME=\"tex2html34\" HREF=\"node2.html\"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ics.uci.edu/icons/previous_motif.gif\"></A>   <BR>\n<B> Next:</B> <A NAME=\"tex2html43\" HREF=\"node4.html\">Dissertation Contributions</A>\n<B>Up:</B> <A NAME=\"tex2html41\" HREF=\"node1.html\">Introduction</A>\n<B> Previous:</B> <A NAME=\"tex2html35\" HREF=\"node2.html\">Software Uncertainty Modeling</A>\n<BR> <P>\n<H1><A NAME=\"SECTION00120000000000000000\">Premises and Hypothesis</A></H1>\n<P>\n<A NAME=\"premises\">&#160;</A>\n<P>\nTo arrive at the approach taken in this dissertation,\none must follow the statements in this section.\nMost statements, such as ``software complexity hinders\nits understanding'' or ``users get disoriented in\nlarge hypertext spaces,'' are either widely accepted\nor substantiated later.  These statements therefore\nconstitute the <EM>premises</EM> for this dissertation.\nOne statement, however, is less accepted and requires\nfurther investigation: ``Explicit modeling of\nsoftware uncertainties improves human judgment and\ndecision making during software development.''\nThis statement therefore constitutes the\n<EM>hypothesis</EM> for this dissertation and will be\nfurther elaborated and validated.\n<P>\nOur initial observation is that software is extremely\ncomplex, i.e., that ``software systems are perhaps the\nmost intricate of man's handiworks''&nbsp;[<A HREF=\"node6.html#BrooksAnniversary\">Bro95</A>].\nSoftware complexity is not only ubiquitous, it is also\n<EM>intrinsic</EM>:\n``The complexity of software is an essential property,\nnot an accidental one''&nbsp;[<A HREF=\"node6.html#brooks87\">Bro87</A>].  ``By essential\nwe mean that we may master this complexity, but we can\nnever make it go away''&nbsp;[<A HREF=\"node6.html#BoochOOAD\">Boo94</A>].\nComplexity hinders software understanding, yet understanding\nmust be afforded if development is to be successful.\n<P>\nTo manage complexity, software development concerns\nare often separated in time and space.  Thus, software\nis typically developed in distinct phases by different\nteams of developers.  Large-scale software is often\nlong-lived and delivered in multiple version, thereby\ncomprising a family of related programs&nbsp;[<A HREF=\"node6.html#ParnasExtension\">Par79</A>].\n<P>\nThe product of software development is typically a\nlarge and complex collection of software elements of\ndiverse types.  Software artifact collections often\ncontain not only millions of source code lines,\nbut also versioned releases, volumes of user \nmanuals and documentation, requirements and design\nspecifications, test cases and test results, and so forth.\nMoreover, these software objects are typically\nintegrated and correlated within themselves and\nwith each other in surprisingly intricate and subtle\nways&nbsp;[<A HREF=\"node6.html#SteinbergYosemite\">SZ92</A>].  This poses\nsubstantial impediments to software understanding,\nparticularly with respect to traceability,\nvisualization, and navigation issues, thereby\nleading to the following research question.\n<P>\n<B>Research Question</B>:\n<BLOCKQUOTE> Given the intricacy and complexity of software\nartifact relationships, what can be done to\nimprove traceability, visualization, and\nnavigation of large artifact collections?\n</BLOCKQUOTE>\n<P>\nAs a first step, it is proposed that software systems\nbe viewed as large hypertexts, since hypertext offers\na coherent and consistent metaphor for viewing both\ninter- as well as intra-artifact relationships\n(cf.&nbsp;[<A HREF=\"node6.html#ZivResearchIssues\">ZO95</A>, <A HREF=\"node6.html#SteinbergYosemite\">SZ92</A>]).\nHere, it suffices to define hypertext informally\nas providing node-and-link views and navigation\nof software artifact collections.  Hypertext is\ndefined more formally and completely in\nChapter&nbsp;<A HREF=\"#background\"><IMG  ALIGN=BOTTOM ALT=\"gif\" SRC=\"http://www.ics.uci.edu/icons/cross_ref_motif.gif\"></A>.  We therefore contend\nthat a hypertext metaphor of software artifacts\nand relations should improve developer's ability\nto trace or track related elements in large and\ncomplex software spaces.\n<P>\nDespite the above, hypertext is no ``silver bullet''\nfor relieving software artifact complexities and\nuncertainties.  Specifically, hypertext introduces\nseveral concerns regarding its efficacy for\nsoftware engineering&nbsp;[<A HREF=\"node6.html#ZivResearchIssues\">ZO95</A>].\nHere, we are particularly concerned with the\nwell-known navigation problem of user confusion\nand disorientation in large hypertext spaces as\nwell as the fact that hypertext systems generally\nare not designed with software engineering in mind.\nThis means that hypertext does not necessarily\naddress the unique needs of software developers\nand users nor does it model or make use of the\nunique characteristics of software systems.\nAdditional means should, therefore, be provided to further\nfacilitate understanding of software artifact collections.\nThe following statements concern this facilitation.\n<P>\nWe claim that software engineering is fraught\nwith uncertainties.  Software uncertainties\ncontribute significantly to the overall complexity \nand unpredictability of software development.\nLike complexity, uncertainty is inherent to the\nengineering of software systems.  This observation\nis summarized succinctly in&nbsp;[<A HREF=\"node6.html#ZivMUSE\">ZRK96</A>] as the \n<EM>Maxim of Uncertainty in Software Engineering</EM>:\n<BLOCKQUOTE> <EM>\nUncertainty is inherent and inevitable in software processes\nand products.\n</EM>\n</BLOCKQUOTE>\n<P>\nExamples of software uncertainties abound - many are provided\nin this dissertation.  Starting in Chapter Four, we focus on\nuncertainties associated with developers' confidence levels\nin software artifacts, including, among others, requirements\nspecifications, design elements, code modules, and testing\ninformation.  These confidence levels fluctuate frequently\nduring development.  Their modeling should, therefore,\ninclude a scheme for confidence revision and updating.\n<P>\nWe now arrive at the high-level statement of the hypothesis\nfor this dissertation.\n<P>\n<B>High-level Research Hypothesis</B>:\n<BLOCKQUOTE> Explicitly modeling uncertainty improves human judgment and\ndecision making during software development. \n</BLOCKQUOTE>\n<P>\nThis hypothesis is too vague to be investigated and\nvalidated directly.  Instead, we require a more specific\nformulation, including a specific technique for software\nuncertainty modeling.\nTo model software uncertainties, we turn to artificial\nintelligence research in modeling and management of\nuncertainty.  We select a specific uncertainty modeling\ntechnique called Bayesian belief networks&nbsp;[<A HREF=\"node6.html#Pearl88\">Pea88</A>].\nDetailed reasons for this choice are provided in Chapter Four.\n<P>\nHere, it suffices to say that Bayesian networks\noffer a clear conceptual model of causality among related\nelements and include algorithms for belief revision and\nupdating.  This leads to our specific hypothesis below.\nThe hypothesis speaks in terms of software artifacts,\nwhich include, among others, requirements elements,\ndesign nodes, code modules, and test information,\nrelationships among those artifacts, established as\npart of the development process, and confidence\nlevels, which reflect developer confidences in\ncertain qualities and properties of software artifacts.\n<P>\n<B>Specific Research Hypothesis</B>:\n<BLOCKQUOTE> Bayesian-network models of software artifact uncertainties improves\nunderstanding of associated confidence levels, compared to simply\nfollowing linked information, ultimately leading to better human\ndecision making.\n</BLOCKQUOTE>\n<P>\nIn the long run, we believe that proper adoption and use of\nuncertainty modeling techniques will improve human judgment\nand decision making during software development.  For the\npurposes of this dissertation, we focused on the specific\nhypothesis above and took steps toward its validation,\nas follows:\n<OL><LI>\nAn existing software system was selected as case study.\nThe system of choice, called CEquencer, is currently\nunder development at Beckman Instruments in Fullerton,\nCA.  CEquencer is designed to control and communicate\nwith various hardware devices that in turn are used by \nbiologists, chemists, and other scientists to separate\nlaboratory specimens into molecular constituents in\norder to determine their DNA sequences.\nCEquencer software artifacts are described in Chapter Five.<LI>\nCEquencer requirements were investigated throughly,\nand a hypertext model as well as a Bayesian-network\nmodel of those requirements were constructed.<LI>\nA key subsystem of CEquencer, called FSM Run, was\ninvestigated thoroughly, resulting in a hypertext\nmodel of software artifacts, including all FSM Run\ncode modules as well as related requirements.<LI>\nSoftware uncertainty information was collected for FSM Run\nartifacts.  The information was elicited from Beckman\nexperts and developers and organized in a Bayesian network.<LI>\nOur main hypothesis was evaluated against FSM Run code\nmodules and related requirements, as identified in (2)\nabove.  In a questionnaire session with the Beckman team,\ndevelopers were asked to trace artifacts and associated\nconfidence levels with and without the Bayesian-network\nrepresentation of confidence values.<LI>\nResults were gathered for the case study and analyzed\nfor statistical significance.  Results of the\nquestionnaire session are summarized in Chapter Six.\n</OL><HR><A NAME=\"tex2html42\" HREF=\"node4.html\"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT=\"next\" SRC=\"http://www.ics.uci.edu/icons/next_motif.gif\"></A> <A NAME=\"tex2html40\" HREF=\"node1.html\"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT=\"up\" SRC=\"http://www.ics.uci.edu/icons/up_motif.gif\"></A> <A NAME=\"tex2html34\" HREF=\"node2.html\"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT=\"previous\" SRC=\"http://www.ics.uci.edu/icons/previous_motif.gif\"></A>   <BR>\n<B> Next:</B> <A NAME=\"tex2html43\" HREF=\"node4.html\">Dissertation Contributions</A>\n<B>Up:</B> <A NAME=\"tex2html41\" HREF=\"node1.html\">Introduction</A>\n<B> Previous:</B> <A NAME=\"tex2html35\" HREF=\"node2.html\">Software Uncertainty Modeling</A>\n<P><ADDRESS>\n<I>Hadar Ziv <BR>\nFri Jun 20 16:22:31 PDT 1997</I>\n</ADDRESS>\n</BODY>\n</HTML>\n", "id": 2655.0}