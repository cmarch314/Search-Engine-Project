{"text": "CS143 Introduction to Matlab Code intro m Introduction to Matlab adapted from http www stanford edu class cs223b matlabIntro html Stefan Roth roth AT cs DOT brown DOT edu 9 8 2 3 Last modified 9 1 2 3 1 Basics The symbol is used to indicate a comment for the remainder of the line When writing a long Matlab statement that becomes to long for a single line use at the end of the line to continue on the next line E g A 1 2 3 4 A semicolon at the end of a statement means that Matlab will not display the result of the evaluated statement If the is omitted then Matlab will display the result This is also useful for printing the value of variables e g A Matlab s command line is a little like a standard shell Use the up arrow to recall commands without retyping them and down arrow to go forward in the command history C a moves to beginning of line C e for end C f moves forward a character and C b moves back equivalent to the left and right arrow keys C d deletes a character C k deletes the rest of the line to the right of the cursor C p goes back through the command history and C n goes forward equivalent to up and down arrows Tab tries to complete a command Simple debugging If the command dbstop if error is issued before running a script or a function that causes a run time error the execution will stop at the point where the error occurred Very useful for tracking down errors 2 Basic types in Matlab A The basic types in Matlab are scalars usually double precision floating point vectors and matrices A 1 2 3 4 Creates a 2x2 matrix B 1 2 3 4 The simplest way to create a matrix is to list its entries in square brackets The symbol separates rows the optional separates columns N 5 A scalar v 1 A row vector v 1 2 3 A column vector v v Transpose a vector row to column or column to row v 1 5 3 A vector filled in a specified range v pi 4 4 4 start stepsize end brackets are optional v Empty vector B Creating special matrices 1ST parameter is ROWS 2ND parameter is COLS m zeros 2 3 Creates a 2x3 matrix of zeros v ones 1 3 Creates a 1x3 matrix row vector of ones m eye 3 Identity matrix 3x3 v rand 3 1 Randomly filled 3x1 matrix column vector see also randn But watch out m zeros 3 Creates a 3x3 matrix of zeros C Indexing vectors and matrices Warning Indices always start at 1 and NOT at v 1 2 3 v 3 Access a vector element m 1 2 3 4 5 7 8 8 9 1 11 12 13 14 15 16 m 1 3 Access a matrix element matrix ROW COLUMN m 2 Access a whole matrix row 2nd row m 1 Access a whole matrix column 1st column m 1 1 3 Access elements 1 through 3 of the 1st row m 2 3 2 Access elements 2 through 3 of the 2nd column m 2 end 3 Keyword end accesses the remainder of a column or row m 1 2 3 4 5 6 size m Returns the size of a matrix size m 1 Number of rows size m 2 Number of columns m1 zeros size m Create a new matrix with the size of m who List variables in workspace whos List variables w info about size type etc 3 Simple operations on vectors and matrices A Element wise operations These operations are done element by element If two vectors matrices are to be added subtracted or element wise multiplied or divided they must have the same size a 1 2 3 4 A column vector 2 a Scalar multiplication a 4 Scalar division b 5 6 7 8 Another column vector a b Vector addition a b Vector subtraction a 2 Element wise squaring note the a b Element wise multiplication note the a b Element wise division note the log 1 2 3 4 Element wise logarithm round 1 5 2 2 2 3 1 Element wise rounding to nearest integer Other element wise arithmetic operations include e g floor ceil B Vector Operations Built in Matlab functions that operate on vectors a 1 4 6 3 A row vector sum a Sum of vector elements mean a Mean of vector elements var a Variance of elements std a Standard deviation max a Maximum min a Minimum If a matrix is given then these functions will operate on each column of the matrix and return a row vector as result a 1 2 3 4 5 6 A matrix mean a Mean of each column max a Max of each column max max a Obtaining the max of a matrix mean a 2 Mean of each row second argument specifies dimension along which operation is taken 1 2 3 4 5 6 1x3 row vector times a 3x1 column vector results in a scalar Known as dot product or inner product Note the absence of 1 2 3 4 5 6 3x1 column vector times a 1x3 row vector results in a 3x3 matrix Known as outer product Note the absence of C Matrix Operations a rand 3 2 A 3x2 matrix b rand 2 4 A 2x4 matrix c a b Matrix product results in a 3x4 matrix a 1 2 3 4 5 6 A 3x2 matrix b 5 6 7 A 1x3 row vector b a Vector matrix product results in a 1x2 row vector c 8 9 A 2x1 column vector a c Matrix vector product results in a 3x1 column vector a 1 3 2 6 5 4 7 8 9 A 3x3 matrix inv a Matrix inverse of a eig a Vector of eigenvalues of a V D eig a D matrix with eigenvalues on diagonal V matrix of eigenvectors Example for multiple return values U S V svd a Singular value decomposition of a a U S V singular values are stored in S Other matrix operations det norm rank D Reshaping and assembling matrices a 1 2 3 4 5 6 A 3x2 matrix b a Make 6x1 column vector by stacking up columns of a sum a Useful sum of all elements a reshape b 2 3 Make 2x3 matrix out of vector elements column wise a 1 2 b 3 4 Two row vectors c a b Horizontal concatenation see horzcat a 1 2 3 Column vector c a 4 Vertical concatenation see vertcat a eye 3 rand 3 Concatenation for matrices b eye 3 ones 1 3 b repmat 5 3 2 Create a 3x2 matrix of fives b repmat 1 2 3 4 1 2 Replicate the 2x2 matrix twice in column direction makes 2x4 matrix b diag 1 2 3 Create 3x3 diagonal matrix with given diagonal elements 4 Control statements vectorization Syntax of control flow statements for VARIABLE EXPR STATEMENT STATEMENT end EXPR is a vector here e g 1 1 or 1 5 1 or 1 4 7 while EXPRESSION STATEMENTS end if EXPRESSION STATEMENTS elseif EXPRESSION STATEMENTS else STATEMENTS end elseif and else clauses are optional the end is required EXPRESSIONs are usually made of relational clauses e g a b The operators are almost like in C Warning Loops run very slowly in Matlab because of interpretation overhead This has gotten somewhat better in version 6 5 but you should nevertheless try to avoid them by vectorizing the computation i e by rewriting the code in form of matrix operations This is illustrated in some examples below Examples for i 1 2 7 Loop from 1 to 7 in steps of 2 i Print i end for i 5 13 1 Loop over given vector if i 1 Sample if statement disp Larger than 1 Print given string elseif i Parentheses are optional disp Negative value else disp Something else end end Here is another example given an mxn matrix A and a 1xn vector v we want to subtract v from every row of A m 5 n 1 A ones m n v 2 rand 1 n Implementation using loops for i 1 m A i A i v end We can compute the same thing using only matrix operations A ones m n repmat v m 1 This version of the code runs much faster We can vectorize the computation even when loops contain conditional statements Example given an mxn matrix A create a matrix B of the same size containing all zeros and then copy into B the elements of A that are greater than zero Implementation using loops B zeros m n for i 1 m for j 1 n if A i j B i j A i j end end end All this can be computed w o any loop B zeros m n ind find A Find indices of positive elements of A see help find for more info B ind A ind Copies into B only the elements of A that are 5 Saving your work save myfile Saves all workspace variables into file myfile mat save myfile a b Saves only variables a and b clear a b Removes variables a and b from the workspace clear Clears the entire workspace load myfile Loads variable s from myfile mat 6 Creating scripts or functions using m files Matlab scripts are files with m extension containing Matlab commands Variables in a script file are global and will change the value of variables of the same name in the environment of the current Matlab session A script with name script1 m can be invoked by typing script1 in the command window Functions are also m files The first line in a function file must be of this form function outarg 1 outarg m myfunction inarg 1 inarg n The function name should be the same as that of the file i e function myfunction should be saved in file myfunction m Have a look at myfunction m and myotherfunction m for examples Functions are executed using local workspaces there is no risk of conflicts with the variables in the main workspace At the end of a function execution only the output arguments will be visible in the main workspace a 1 2 3 4 Global variable a b myfunction 2 a Call myfunction which has local variable a a Global variable a is unchanged c d myotherfunction a b Call myotherfunction with two return values 7 Plotting x 1 2 3 4 Basic plotting plot x Plot x versus its index values pause Wait for key press plot x 2 x Plot 2 x versus x axis 8 8 Adjust visible rectangle figure Open new figure x pi 24 24 24 plot x sin x xlabel radians Assign label for x axis ylabel sin value Assign label for y axis title dummy Assign plot title figure subplot 1 2 1 Multiple functions in separate graphs plot x sin x see help subplot axis square Make visible area square subplot 1 2 2 plot x 2 cos x axis square figure plot x sin x hold on Multiple functions in single graph plot x 2 cos x chooses different line pattern legend sin cos Assigns names to each plot hold off Stop putting multiple figures in current graph figure Matrices vs images m rand 64 64 imagesc m Plot matrix as image colormap gray Choose gray level colormap axis image Show pixel coordinates as axes axis off Remove axes 8 Working with gray level images I imread cit png Read a PNG image figure imagesc I Display it as gray level image colormap gray colorbar Turn on color bar on the side pixval Display pixel values interactively truesize Display at resolution of one screen pixel per image pixel truesize 2 size I Display at resolution of two screen pixels per image pixel I2 imresize I 5 bil Resize to 5 using bilinear interpolation I3 imrotate I2 45 Rotate 45 degrees and crop to bil crop original size I3 double I2 Convert from uint8 to double to allow math operations imagesc I3 2 Display squared image pixel wise imagesc log I3 Display log of image pixel wise I3 uint8 I3 Convert back to uint8 for writing imwrite I3 test png Save image as PNG figure g 1 2 1 1 2 1 16 3x3 Gaussian filter mask I2 double I Convert image to floating point I3 conv2 I2 g Convolve image with filter mask I3 conv2 I2 g same Convolve image but keep original size subplot 1 2 1 Display original and filtered image imagesc I side by side axis square colormap gray subplot 1 2 2 imagesc I3 axis square colormap gray myfunction m function y myfunction x Function of one argument with one return value a 2 1 1 Have a global variable of the same name y a x myotherfunction m function y z myotherfunction a b Function of two arguments with two return values y a b z a b Created by Stefan Roth Last updated 2 3 9 1 ", "_id": "http://www.ics.uci.edu/~dramanan/teaching/cs216_fall09/MatlabTutorialCode.html", "title": "cs143: introduction to matlab (code)", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n  <head>\n    <title>CS143: Introduction to Matlab (Code)</title>\n    <meta name=\"generator\" content=\"emacs-wiki.el\">\n    <meta http-equiv=\"Content-Type\"\n\t  content=\"text/html; charset=iso-8859-1\">\n    <link rev=\"made\" href=\"mailto: roth (AT) cs DOT brown DOT edu\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"plain.css\">\n  </head>\n  <body>\n    \n    <h1>CS143: Introduction to Matlab (Code)</h1>\n<h2>intro.m</h2>\n<a name=\"intro\" id=\"intro\"></a><pre class=\"mcode\"><span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% Introduction to Matlab </span>\n<span class=\"comment\">% (adapted from http://www.stanford.edu/class/cs223b/matlabIntro.html)</span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% Stefan Roth &lt;roth (AT) cs DOT brown DOT edu&gt;, 09/08/2003</span>\n<span class=\"comment\">% Last modified: 09/10/2003</span>\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n\n<span class=\"comment\">% (1) Basics</span>\n\n<span class=\"comment\">% The symbol &quot;%&quot; is used to indicate a comment (for the remainder of</span>\n<span class=\"comment\">% the line).</span>\n\n<span class=\"comment\">% When writing a long Matlab statement that becomes to long for a</span>\n<span class=\"comment\">% single line use &quot;...&quot; at the end of the line to continue on the next</span>\n<span class=\"comment\">% line.  E.g.</span>\n\nA = [1, 2; <span class=\"cont\">...</span>\n     3, 4];\n\n<span class=\"comment\">% A semicolon at the end of a statement means that Matlab will not</span>\n<span class=\"comment\">% display the result of the evaluated statement. If the &quot;;&quot; is omitted</span>\n<span class=\"comment\">% then Matlab will display the result.  This is also useful for</span>\n<span class=\"comment\">% printing the value of variables, e.g.</span>\n\nA\n\n<span class=\"comment\">% Matlab's command line is a little like a standard shell:</span>\n<span class=\"comment\">% - Use the up arrow to recall commands without retyping them (and </span>\n<span class=\"comment\">%   down arrow to go forward in the command history).  </span>\n<span class=\"comment\">% - C-a moves to beginning of line (C-e for end), C-f moves forward a</span>\n<span class=\"comment\">%   character and C-b moves back (equivalent to the left and right</span>\n<span class=\"comment\">%   arrow keys), C-d deletes a character, C-k deletes the rest of the</span>\n<span class=\"comment\">%   line to the right of the cursor, C-p goes back through the</span>\n<span class=\"comment\">%   command history and C-n goes forward (equivalent to up and down</span>\n<span class=\"comment\">%   arrows), Tab tries to complete a command.</span>\n\n<span class=\"comment\">% Simple debugging:</span>\n<span class=\"comment\">% If the command &quot;dbstop if error&quot; is issued before running a script</span>\n<span class=\"comment\">% or a function that causes a run-time error, the execution will stop</span>\n<span class=\"comment\">% at the point where the error occurred. Very useful for tracking down</span>\n<span class=\"comment\">% errors.</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n\n<span class=\"comment\">% (2) Basic types in Matlab</span>\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (A) The basic types in Matlab are scalars (usually double-precision</span>\n<span class=\"comment\">% floating point), vectors, and matrices:</span>\n\nA = [1 2; 3 4];              <span class=\"comment\">% Creates a 2x2 matrix</span>\nB = [1,2; 3,4];              <span class=\"comment\">% The simplest way to create a matrix is</span>\n                             <span class=\"comment\">% to list its entries in square brackets.</span>\n                             <span class=\"comment\">% The &quot;;&quot; symbol separates rows;</span>\n                             <span class=\"comment\">% the (optional) &quot;,&quot; separates columns.</span>\n\nN = 5                        <span class=\"comment\">% A scalar</span>\nv = [1 0 0]                  <span class=\"comment\">% A row vector</span>\nv = [1; 2; 3]                <span class=\"comment\">% A column vector</span>\nv = v'                       <span class=\"comment\">% Transpose a vector (row to column or </span>\n                             <span class=\"comment\">%   column to row)</span>\nv = 1:.5:3                   <span class=\"comment\">% A vector filled in a specified range: </span>\nv = pi*[-4:4]/4              <span class=\"comment\">%   [start:stepsize:end]</span>\n                             <span class=\"comment\">%   (brackets are optional)</span>\nv = []                       <span class=\"comment\">% Empty vector</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (B) Creating special matrices: 1ST parameter is ROWS,</span>\n<span class=\"comment\">%   2ND parameter is COLS </span>\n\nm = zeros(2, 3)              <span class=\"comment\">% Creates a 2x3 matrix of zeros</span>\nv = ones(1, 3)               <span class=\"comment\">% Creates a 1x3 matrix (row vector) of ones</span>\nm = eye(3)                   <span class=\"comment\">% Identity matrix (3x3)</span>\nv = rand(3, 1)               <span class=\"comment\">% Randomly filled 3x1 matrix (column </span>\n                             <span class=\"comment\">% vector); see also randn</span>\n\n                             <span class=\"comment\">% But watch out:</span>\nm = zeros(3)                 <span class=\"comment\">% Creates a 3x3 matrix (!) of zeros</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (C) Indexing vectors and matrices.</span>\n<span class=\"comment\">% Warning: Indices always start at 1 and *NOT* at 0!</span>\n\nv = [1 2 3];\nv(3)                         <span class=\"comment\">% Access a vector element </span>\n\n\nm = [1 2 3 4; 5 7 8 8; 9 10 11 12; 13 14 15 16]\nm(1, 3)                      <span class=\"comment\">% Access a matrix element</span>\n                             <span class=\"comment\">%       matrix(ROW #, COLUMN #)</span>\nm(2, :)                      <span class=\"comment\">% Access a whole matrix row (2nd row)</span>\nm(:, 1)                      <span class=\"comment\">% Access a whole matrix column (1st column)</span>\n\nm(1, 1:3)                    <span class=\"comment\">% Access elements 1 through 3 of the 1st row</span>\nm(2:3, 2)                    <span class=\"comment\">% Access elements 2 through 3 of the </span>\n                             <span class=\"comment\">%   2nd column</span>\nm(2:<span class=\"keyword\">end</span>, 3)                  <span class=\"comment\">% Keyword &quot;end&quot; accesses the remainder of a</span>\n                             <span class=\"comment\">%   column or row</span>\n\nm = [1 2 3; 4 5 6]     \nsize(m)                      <span class=\"comment\">% Returns the size of a matrix</span>\nsize(m, 1)                   <span class=\"comment\">% Number of rows</span>\nsize(m, 2)                   <span class=\"comment\">% Number of columns</span>\n\nm1 = zeros(size(m))          <span class=\"comment\">% Create a new matrix with the size of m</span>\n\nwho                          <span class=\"comment\">% List variables in workspace</span>\nwhos                         <span class=\"comment\">% List variables w/ info about size, type, etc.</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (3) Simple operations on vectors and matrices</span>\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (A) Element-wise operations:</span>\n\n<span class=\"comment\">% These operations are done &quot;element by element&quot;.  If two </span>\n<span class=\"comment\">% vectors/matrices are to be added, subtracted, or element-wise</span>\n<span class=\"comment\">% multiplied or divided, they must have the same size.</span>\n\na = [1 2 3 4]';              <span class=\"comment\">% A column vector</span>\n2 * a                        <span class=\"comment\">% Scalar multiplication</span>\na / 4                        <span class=\"comment\">% Scalar division</span>\nb = [5 6 7 8]';              <span class=\"comment\">% Another column vector</span>\na + b                        <span class=\"comment\">% Vector addition</span>\na - b                        <span class=\"comment\">% Vector subtraction</span>\na .^ 2                       <span class=\"comment\">% Element-wise squaring (note the &quot;.&quot;)</span>\na .* b                       <span class=\"comment\">% Element-wise multiplication (note the &quot;.&quot;)</span>\na ./ b                       <span class=\"comment\">% Element-wise division (note the &quot;.&quot;)</span>\n\nlog([1 2 3 4])               <span class=\"comment\">% Element-wise logarithm</span>\nround([1.5 2; 2.2 3.1])      <span class=\"comment\">% Element-wise rounding to nearest integer</span>\n\n<span class=\"comment\">% Other element-wise arithmetic operations include e.g. :</span>\n<span class=\"comment\">%   floor, ceil, ...</span>\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (B) Vector Operations</span>\n<span class=\"comment\">% Built-in Matlab functions that operate on vectors</span>\n\na = [1 4 6 3]                <span class=\"comment\">% A row vector</span>\nsum(a)                       <span class=\"comment\">% Sum of vector elements</span>\nmean(a)                      <span class=\"comment\">% Mean of vector elements</span>\nvar(a)                       <span class=\"comment\">% Variance of elements</span>\nstd(a)                       <span class=\"comment\">% Standard deviation</span>\nmax(a)                       <span class=\"comment\">% Maximum</span>\nmin(a)                       <span class=\"comment\">% Minimum</span>\n\n<span class=\"comment\">% If a matrix is given, then these functions will operate on each column</span>\n<span class=\"comment\">%   of the matrix and return a row vector as result</span>\na = [1 2 3; 4 5 6]           <span class=\"comment\">% A matrix</span>\nmean(a)                      <span class=\"comment\">% Mean of each column</span>\nmax(a)                       <span class=\"comment\">% Max of each column    </span>\nmax(max(a))                  <span class=\"comment\">% Obtaining the max of a matrix </span>\nmean(a, 2)                   <span class=\"comment\">% Mean of each row (second argument specifies</span>\n                             <span class=\"comment\">%   dimension along which operation is taken)</span>\n\n\n[1 2 3] * [4 5 6]'           <span class=\"comment\">% 1x3 row vector times a 3x1 column vector</span>\n                             <span class=\"comment\">%   results in a scalar.  Known as dot product</span>\n                             <span class=\"comment\">%   or inner product.  Note the absence of &quot;.&quot;</span>\n\n[1 2 3]' * [4 5 6]           <span class=\"comment\">% 3x1 column vector times a 1x3 row vector </span>\n                             <span class=\"comment\">%   results in a 3x3 matrix.  Known as outer</span>\n                             <span class=\"comment\">%   product.  Note the absence of &quot;.&quot;</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (C) Matrix Operations:</span>\n\na = rand(3,2)                <span class=\"comment\">% A 3x2 matrix</span>\nb = rand(2,4)                <span class=\"comment\">% A 2x4 matrix</span>\nc = a * b                    <span class=\"comment\">% Matrix product results in a 3x4 matrix</span>\n\na = [1 2; 3 4; 5 6];         <span class=\"comment\">% A 3x2 matrix</span>\nb = [5 6 7];                 <span class=\"comment\">% A 1x3 row vector</span>\nb * a                        <span class=\"comment\">% Vector-matrix product results in</span>\n                             <span class=\"comment\">%   a 1x2 row vector</span>\nc = [8; 9];                  <span class=\"comment\">% A 2x1 column vector</span>\na * c                        <span class=\"comment\">% Matrix-vector product results in</span>\n                             <span class=\"comment\">%   a 3x1 column vector</span>\n\na = [1 3 2; 6 5 4; 7 8 9];   <span class=\"comment\">% A 3x3 matrix</span>\ninv(a)                       <span class=\"comment\">% Matrix inverse of a</span>\neig(a)                       <span class=\"comment\">% Vector of eigenvalues of a</span>\n[V, D] = eig(a)              <span class=\"comment\">% D matrix with eigenvalues on diagonal;</span>\n                             <span class=\"comment\">%   V matrix of eigenvectors</span>\n                             <span class=\"comment\">%   Example for multiple return values!</span>\n[U, S, V] = svd(a)           <span class=\"comment\">% Singular value decomposition of a.</span>\n                             <span class=\"comment\">%   a = U * S * V', singular values are</span>\n                             <span class=\"comment\">%   stored in S</span>\n\n<span class=\"comment\">% Other matrix operations: det, norm, rank, ...</span>\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (D) Reshaping and assembling matrices:</span>\n\na = [1 2; 3 4; 5 6];         <span class=\"comment\">% A 3x2 matrix</span>\nb = a(:)                     <span class=\"comment\">% Make 6x1 column vector by stacking </span>\n                             <span class=\"comment\">%   up columns of a</span>\nsum(a(:))                    <span class=\"comment\">% Useful:  sum of all elements</span>\n\na = reshape(b, 2, 3)         <span class=\"comment\">% Make 2x3 matrix out of vector </span>\n                             <span class=\"comment\">%   elements (column-wise)</span>\n\na = [1 2]; b = [3 4];        <span class=\"comment\">% Two row vectors</span>\nc = [a b]                    <span class=\"comment\">% Horizontal concatenation (see horzcat)</span>\n\na = [1; 2; 3];               <span class=\"comment\">% Column vector</span>\nc = [a; 4]                   <span class=\"comment\">% Vertical concatenation (see vertcat)</span>\n\na = [eye(3) rand(3)]         <span class=\"comment\">% Concatenation for matrices</span>\nb = [eye(3); ones(1, 3)]\n\nb = repmat(5, 3, 2)          <span class=\"comment\">% Create a 3x2 matrix of fives</span>\nb = repmat([1 2; 3 4], 1, 2) <span class=\"comment\">% Replicate the 2x2 matrix twice in</span>\n                             <span class=\"comment\">%   column direction; makes 2x4 matrix</span>\nb = diag([1 2 3])            <span class=\"comment\">% Create 3x3 diagonal matrix with given</span>\n                             <span class=\"comment\">%   diagonal elements</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">% (4) Control statements &amp; vectorization</span>\n\n<span class=\"comment\">% Syntax of control flow statements:</span>\n<span class=\"comment\">% </span>\n<span class=\"comment\">% for VARIABLE = EXPR</span>\n<span class=\"comment\">%     STATEMENT</span>\n<span class=\"comment\">%      ...</span>\n<span class=\"comment\">%     STATEMENT</span>\n<span class=\"comment\">% end </span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">%   EXPR is a vector here, e.g. 1:10 or -1:0.5:1 or [1 4 7]</span>\n<span class=\"comment\">% </span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% while EXPRESSION</span>\n<span class=\"comment\">%     STATEMENTS</span>\n<span class=\"comment\">% end</span>\n<span class=\"comment\">% </span>\n<span class=\"comment\">% if EXPRESSION</span>\n<span class=\"comment\">%     STATEMENTS </span>\n<span class=\"comment\">% elseif EXPRESSION</span>\n<span class=\"comment\">%     STATEMENTS</span>\n<span class=\"comment\">% else</span>\n<span class=\"comment\">%     STATEMENTS</span>\n<span class=\"comment\">% end </span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">%   (elseif and else clauses are optional, the &quot;end&quot; is required)</span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">%   EXPRESSIONs are usually made of relational clauses, e.g. a &lt; b</span>\n<span class=\"comment\">%   The operators are &lt;, &gt;, &lt;=, &gt;=, ==, ~=  (almost like in C(++))</span>\n\n<span class=\"comment\">% Warning:</span>\n<span class=\"comment\">%   Loops run very slowly in Matlab, because of interpretation overhead.</span>\n<span class=\"comment\">%   This has gotten somewhat better in version 6.5, but you should</span>\n<span class=\"comment\">%   nevertheless try to avoid them by &quot;vectorizing&quot; the computation, </span>\n<span class=\"comment\">%   i.e. by rewriting the code in form of matrix operations.  This is</span>\n<span class=\"comment\">%   illustrated in some examples below.</span>\n\n<span class=\"comment\">% Examples:</span>\n<span class=\"keyword\">for</span> i=1:2:7                  <span class=\"comment\">% Loop from 1 to 7 in steps of 2</span>\n  i                          <span class=\"comment\">% Print i</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">for</span> i=[5 13 -1]              <span class=\"comment\">% Loop over given vector</span>\n  <span class=\"keyword\">if</span> (i &gt; 10)                <span class=\"comment\">% Sample if statement</span>\n    disp(<span class=\"string\">'Larger than 10'</span>)   <span class=\"comment\">% Print given string</span>\n  <span class=\"keyword\">elseif</span> i &lt; 0               <span class=\"comment\">% Parentheses are optional</span>\n    disp(<span class=\"string\">'Negative value'</span>) \n  <span class=\"keyword\">else</span>\n    disp(<span class=\"string\">'Something else'</span>)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n\n<span class=\"comment\">% Here is another example: given an mxn matrix A and a 1xn </span>\n<span class=\"comment\">% vector v, we want to subtract v from every row of A.</span>\n\nm = 50; n = 10; A = ones(m, n); v = 2 * rand(1, n); \n<span class=\"comment\">%</span>\n<span class=\"comment\">% Implementation using loops:</span>\n<span class=\"keyword\">for</span> i=1:m\n  A(i,:) = A(i,:) - v;\n<span class=\"keyword\">end</span>\n\n<span class=\"comment\">% We can compute the same thing using only matrix operations</span>\nA = ones(m, n) - repmat(v, m, 1);   <span class=\"comment\">% This version of the code runs </span>\n                                    <span class=\"comment\">%   much faster!!!</span>\n\n\n<span class=\"comment\">% We can vectorize the computation even when loops contain</span>\n<span class=\"comment\">%   conditional statements.</span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% Example: given an mxn matrix A, create a matrix B of the same size</span>\n<span class=\"comment\">%   containing all zeros, and then copy into B the elements of A that</span>\n<span class=\"comment\">%   are greater than zero.</span>\n\n<span class=\"comment\">% Implementation using loops:</span>\nB = zeros(m,n);\n<span class=\"keyword\">for</span> i=1:m\n  <span class=\"keyword\">for</span> j=1:n\n    <span class=\"keyword\">if</span> A(i,j)&gt;0\n      B(i,j) = A(i,j);\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"comment\">% All this can be computed w/o any loop!</span>\nB = zeros(m,n);\nind = find(A &gt; 0);           <span class=\"comment\">% Find indices of positive elements of A </span>\n                             <span class=\"comment\">%   (see &quot;help find&quot; for more info)</span>\nB(ind) = A(ind);             <span class=\"comment\">% Copies into B only the elements of A</span>\n                             <span class=\"comment\">%   that are &gt; 0</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">%(5) Saving your work</span>\n\nsave myfile                  <span class=\"comment\">% Saves all workspace variables into</span>\n                             <span class=\"comment\">%   file myfile.mat</span>\nsave myfile a b              <span class=\"comment\">% Saves only variables a and b</span>\n\nclear a b                    <span class=\"comment\">% Removes variables a and b from the</span>\n                             <span class=\"comment\">%   workspace</span>\nclear                        <span class=\"comment\">% Clears the entire workspace</span>\n\nload myfile                  <span class=\"comment\">% Loads variable(s) from myfile.mat</span>\n\n \n \n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">%(6) Creating scripts or functions using m-files: </span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% Matlab scripts are files with &quot;.m&quot; extension containing Matlab </span>\n<span class=\"comment\">% commands.  Variables in a script file are global and will change the</span>\n<span class=\"comment\">% value of variables of the same name in the environment of the current</span>\n<span class=\"comment\">% Matlab session.  A script with name &quot;script1.m&quot; can be invoked by</span>\n<span class=\"comment\">% typing &quot;script1&quot; in the command window.</span>\n\n<span class=\"comment\">% Functions are also m-files. The first line in a function file must be</span>\n<span class=\"comment\">% of this form: </span>\n<span class=\"comment\">% function [outarg_1, ..., outarg_m] = myfunction(inarg_1, ..., inarg_n)</span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% The function name should be the same as that of the file </span>\n<span class=\"comment\">% (i.e. function &quot;myfunction&quot; should be saved in file &quot;myfunction.m&quot;). </span>\n<span class=\"comment\">% Have a look at myfunction.m and myotherfunction.m for examples.</span>\n<span class=\"comment\">%</span>\n<span class=\"comment\">% Functions are executed using local workspaces: there is no risk of</span>\n<span class=\"comment\">% conflicts with the variables in the main workspace. At the end of a</span>\n<span class=\"comment\">% function execution only the output arguments will be visible in the</span>\n<span class=\"comment\">% main workspace.</span>\n \na = [1 2 3 4];               <span class=\"comment\">% Global variable a</span>\nb = myfunction(2 * a)        <span class=\"comment\">% Call myfunction which has local </span>\n                             <span class=\"comment\">%   variable a</span>\na                            <span class=\"comment\">% Global variable a is unchanged</span>\n\n[c, d] = <span class=\"cont\">...</span>\n  myotherfunction(a, b)      <span class=\"comment\">% Call myotherfunction with two return</span>\n                             <span class=\"comment\">% values</span>\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">%(7) Plotting </span>\n\nx = [0 1 2 3 4];             <span class=\"comment\">% Basic plotting</span>\nplot(x);                     <span class=\"comment\">% Plot x versus its index values</span>\npause                        <span class=\"comment\">% Wait for key press</span>\nplot(x, 2*x);                <span class=\"comment\">% Plot 2*x versus x</span>\naxis([0 8 0 8]);             <span class=\"comment\">% Adjust visible rectangle</span>\n\nfigure;                      <span class=\"comment\">% Open new figure</span>\nx = pi*[-24:24]/24;\nplot(x, sin(x));\nxlabel(<span class=\"string\">'radians'</span>);           <span class=\"comment\">% Assign label for x-axis</span>\nylabel(<span class=\"string\">'sin value'</span>);         <span class=\"comment\">% Assign label for y-axis</span>\ntitle(<span class=\"string\">'dummy'</span>);              <span class=\"comment\">% Assign plot title</span>\n\nfigure;                      \nsubplot(1, 2, 1);            <span class=\"comment\">% Multiple functions in separate graphs</span>\nplot(x, sin(x));             <span class=\"comment\">%   (see &quot;help subplot&quot;)</span>\naxis square;                 <span class=\"comment\">% Make visible area square</span>\nsubplot(1, 2, 2);\nplot(x, 2*cos(x));\naxis square;\n\nfigure;                      \nplot(x, sin(x));\nhold on;                     <span class=\"comment\">% Multiple functions in single graph           </span>\nplot(x, 2*cos(x), <span class=\"string\">'--'</span>);     <span class=\"comment\">% '--' chooses different line pattern</span>\nlegend(<span class=\"string\">'sin'</span>, <span class=\"string\">'cos'</span>);        <span class=\"comment\">% Assigns names to each plot</span>\nhold off;                    <span class=\"comment\">% Stop putting multiple figures in current</span>\n                             <span class=\"comment\">%   graph</span>\n\nfigure;                      <span class=\"comment\">% Matrices vs. images</span>\nm = rand(64,64);\nimagesc(m)                   <span class=\"comment\">% Plot matrix as image</span>\ncolormap gray;               <span class=\"comment\">% Choose gray level colormap</span>\naxis image;                  <span class=\"comment\">% Show pixel coordinates as axes</span>\naxis off;                    <span class=\"comment\">% Remove axes</span>\n\n\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n<span class=\"comment\">%(8) Working with (gray level) images</span>\n\nI = imread(<span class=\"string\">'cit.png'</span>);         <span class=\"comment\">% Read a PNG image</span>\n\nfigure\nimagesc(I)                    <span class=\"comment\">% Display it as gray level image</span>\ncolormap gray;\n\ncolorbar                      <span class=\"comment\">% Turn on color bar on the side</span>\npixval                        <span class=\"comment\">% Display pixel values interactively</span>\ntruesize                      <span class=\"comment\">% Display at resolution of one screen</span>\n                              <span class=\"comment\">%   pixel per image pixel</span>\ntruesize(2*size(I))           <span class=\"comment\">% Display at resolution of two screen</span>\n                              <span class=\"comment\">%   pixels per image pixel</span>\n\nI2 = imresize(I, 0.5, <span class=\"string\">'bil'</span>); <span class=\"comment\">% Resize to 50% using bilinear </span>\n                              <span class=\"comment\">%   interpolation</span>\nI3 = imrotate(I2, 45, <span class=\"cont\">...</span><span class=\"comment\">     % Rotate 45 degrees and crop to</span>\n              <span class=\"string\">'bil'</span>, <span class=\"string\">'crop'</span>); <span class=\"comment\">%   original size</span>\n\nI3 = double(I2);              <span class=\"comment\">% Convert from uint8 to double, to allow</span>\n                              <span class=\"comment\">%   math operations</span>\nimagesc(I3.^2)                <span class=\"comment\">% Display squared image (pixel-wise)</span>\nimagesc(log(I3))              <span class=\"comment\">% Display log of image (pixel-wise)</span>\nI3 = uint8(I3);               <span class=\"comment\">% Convert back to uint8 for writing</span>\nimwrite(I3, <span class=\"string\">'test.png'</span>)       <span class=\"comment\">% Save image as PNG</span>\n\nfigure;\ng = [1 2 1]' * [1 2 1] / 16;  <span class=\"comment\">% 3x3 Gaussian filter mask</span>\nI2 = double(I);               <span class=\"comment\">% Convert image to floating point</span>\nI3 = conv2(I2, g);            <span class=\"comment\">% Convolve image with filter mask</span>\nI3 = conv2(I2, g, <span class=\"string\">'same'</span>);    <span class=\"comment\">% Convolve image, but keep original size</span>\nsubplot(1, 2, 1)              <span class=\"comment\">% Display original and filtered image</span>\nimagesc(I);                   <span class=\"comment\">%   side-by-side</span>\naxis square;\ncolormap gray;\nsubplot(1, 2, 2)\nimagesc(I3);\naxis square;\ncolormap gray;\n\n<span class=\"comment\">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>\n</pre>\n\n\n<h2>myfunction.m</h2>\n<a name=\"myfunction\" id=\"myfunction\"></a><pre class=\"mcode\"><span class=\"keyword\">function</span> y = myfunction(x)\n<span class=\"comment\">% Function of one argument with one return value</span>\n\na = [-2 -1 0 1];              <span class=\"comment\">% Have a global variable of the same name</span>\ny = a + x;\n</pre>\n\n\n<h2>myotherfunction.m</h2>\n<a name=\"myotherfunction\" id=\"myotherfunction\"></a><pre class=\"mcode\"><span class=\"keyword\">function</span> [y, z] = myotherfunction(a, b)\n<span class=\"comment\">% Function of two arguments with two return values</span>\n\ny = a + b;\nz = a - b;\n</pre>\n\n    <hr>\n    <div class=\"navfoot\">\n      <div class=\"footname\">\n\tCreated by <a href=\"mailto: roth (AT) cs DOT brown DOT edu\">\n\t  Stefan Roth</a>\n      </div>\n      <div class=\"footdate\">\n\tLast updated: 2003-09-10\n      </div>\n    </div>\n  </body>\n</html>", "id": 1223.0}