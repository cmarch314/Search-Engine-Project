{"text": "Navigation Up Table of Contents Bibliography Index Title Page CGAL Segment Voronoi diagram 2 Gt DS Definition The class Segment Voronoi diagram 2 Gt DS represents the segment Voronoi diagram by its dual Currently it supports only insertions of sites It is templated by two template arguments Gt which must be a model of SegmentVoronoiDiagramTraits 2 and DS which must be a model of SegmentVoronoiDiagramDataStructure 2 The second template argument defaults to CGAL Triangulation data structure 2 CGAL Segment Voronoi diagram vertex base 2 Gt CGAL Triangulation face base 2 Gt include CGAL Segment Voronoi diagram 2 h Is Model for the ConceptDefaultConstructible CopyConstructible Assignable Types typedef Gt Geom traits A type for the geometric traits typedef DS Data structure A type for the underlying data structure typedef typename DS size type size type Size type an unsigned integral type typedef typename Gt Point 2 Point 2 A type for the point defined in the geometric traits typedef typename Gt Site 2 Site 2 A type for the segment Voronoi diagram site defined in the geometric traits typedef std set Point 2 Point container A type for the container of points typedef typename Point container iterator Point handle A handle for points in the point container The vertices and faces of the dual of the segment Voronoi diagram are accessed through handles iterators and circulators The iterators and circulators are all bidirectional and non mutable The circulators and iterators are assignable to the corresponding handle types and they are also convertible to the corresponding handles The edges of the dual of the segment Voronoi diagram can also be visited through iterators and circulators the edge circulators and iterators are also bidirectional and non mutable In the following we call infinite any face or edge incident to the infinite vertex and the infinite vertex itself Any other feature face edge or vertex of the dual of the segment Voronoi diagram is said to be finite Some iterators the All iterators allow to visit finite or infinite features while the others the Finite iterators visit only finite features Circulators visit both infinite and finite features typedef typename DS Edge Edge The edge type The Edge f i is the edge common to faces f and f neighbor i It is also the edge joining the vertices vertex cw i and vertex ccw i of f Precondition i must be 1 or 2 typedef typename DS Vertex handle Vertex handle A type for a handle to a vertex typedef typename DS Face handle Face handle A type for a handle to a face typedef typename DS Vertex circulator Vertex circulator A type for a circulator over vertices incident to a given vertex typedef typename DS Face circulator Face circulator A type for a circulator over faces incident to a given vertex typedef typename DS Edge circulator Edge circulator A type for a circulator over edges incident to a given vertex typedef typename DS Vertex iterator All vertices iterator A type for an iterator over all vertices typedef typename DS Face iterator All faces iterator A type for an iterator over all faces typedef typename DS Edge iterator All edges iterator A type for an iterator over all edges Segment Voronoi diagram 2 Gt DS Finite vertices iterator A type for an iterator over finite vertices Segment Voronoi diagram 2 Gt DS Finite faces iterator A type for an iterator over finite faces Segment Voronoi diagram 2 Gt DS Finite edges iterator A type for an iterator over finite edges In addition to iterators and circulators for vertices and faces iterators for sites are provided In particular there are iterators for the set of input sites and the set of output sites The set of input sites is the set of sites inserted by the user using the insert methods of this class If a site is inserted multiple times every instance of this site will be reported The set of output sites is the set of sites in the segment Voronoi diagram The value type of these iterators is Site 2 Segment Voronoi diagram 2 Gt DS Input sites iterator A type for a bidirectional iterator over all input sites Segment Voronoi diagram 2 Gt DS Output sites iterator A type for a bidirectional iterator over all output sites the sites in the diagram Creation In addition to the default and copy constructors the following constructors are defined Segment Voronoi diagram 2 Gt DS svd Gt gt Gt Creates the dual of the segment Voronoi diagram using gt as geometric traits template class Input iterator Segment Voronoi diagram 2 Gt DS svd Input iterator first Input iterator beyond Gt gt Gt Creates the dual of the segment Voronoi diagram using gt as geometric traits and inserts all sites in the range first beyond Precondition Input iterator must be a model of InputIterator The value type of Input iterator must be either Point 2 or Site 2 Access Functions Geom traits svd geom traits Returns a reference to the segment Voronoi diagram traits object int svd dimension Returns the dimension of the segment Voronoi diagram The dimension is 1 if the diagram contains no sites if the diagram contains one site 1 if it contains two sites and 2 if it contains three or more sites size type svd number of vertices Returns the number of finite vertices of the dual of the segment Voronoi diagram size type svd number of faces Returns the number of faces both finite and infinite of the dual of the segment Voronoi diagram size type svd number of input sites Return the number of input sites size type svd number of output sites Return the number of output sites This is equal to the number of vertices in the dual of the segment Voronoi diagram Face handle svd infinite face Returns a face incident to the infinite vertex Vertex handle svd infinite vertex Returns the infinite vertex Vertex handle svd finite vertex Returns a vertex distinct from the infinite vertex Precondition The number of sites in the segment Voronoi diagram must be at least one Data structure svd data structure Returns a reference to the segment Voronoi diagram data structure object Point container svd point container Returns a reference to the point container object Traversal of the dual of the segment Voronoi diagram A segment Voronoi diagram can be seen as a container of faces and vertices Therefore the Segment Voronoi diagram 2 Gt DS class provides several iterators and circulators that allow to traverse it completely or partially Face Edge and Vertex Iterators The following iterators allow respectively to visit finite faces finite edges and finite vertices of the dual of the segment Voronoi diagram These iterators are non mutable bidirectional and their value types are respectively Face Edge and Vertex They are all invalidated by any change in the segment Voronoi diagram Finite vertices iterator svd finite vertices begin Starts at an arbitrary finite vertex Finite vertices iterator svd finite vertices end Past the end iterator Finite edges iterator svd finite edges begin Starts at an arbitrary finite edge Finite edges iterator svd finite edges end Past the end iterator Finite faces iterator svd finite faces begin Starts at an arbitrary finite face Finite faces iterator svd finite faces end Past the end iterator The following iterators allow respectively to visit all both finite and infinite faces edges and vertices of the dual of the segment Voronoi diagram These iterators are non mutable bidirectional and their value types are respectively Face Edge and Vertex They are all invalidated by any change in the segment Voronoi diagram All vertices iterator svd all vertices begin Starts at an arbitrary vertex All vertices iterator svd all vertices end Past the end iterator All edges iterator svd all edges begin Starts at an arbitrary edge All edges iterator svd all edges end Past the end iterator All faces iterator svd all faces begin Starts at an arbitrary face All faces iterator svd all faces end Past the end iterator Site iterators The following iterators allow respectively to visit all sites These iterators are non mutable bidirectional and their value type is Site 2 They are all invalidated by any change in the segment Voronoi diagram Input sites iterator svd input sites begin Starts at an arbitrary input site Input sites iterator svd input sites end Past the end iterator Output sites iterator svd output sites begin Starts at an arbitrary output site Output sites iterator svd output sites end Past the end iterator Face Edge and Vertex Circulators The Segment Voronoi diagram 2 Gt DS class also provides circulators that allow to visit respectively all faces or edges incident to a given vertex or all vertices adjacent to a given vertex These circulators are non mutable and bidirectional The operator operator moves the circulator counterclockwise around the vertex while the operator moves clockwise A face circulator is invalidated by any modification of the face pointed to An edge circulator is invalidated by any modification in one of the two faces incident to the edge pointed to A vertex circulator is invalidated by any modification in any of the faces adjacent to the vertex pointed to Face circulator svd incident faces Vertex handle v Starts at an arbitrary face incident to v Face circulator svd incident faces Vertex handle v Face handle f Starts at face f Precondition Face f is incident to vertex v Edge circulator svd incident edges Vertex handle v Starts at an arbitrary edge incident to v Edge circulator svd incident edges Vertex handle v Face handle f Starts at the first edge of f incident to v in counterclockwise order around v Precondition Face f is incident to vertex v Vertex circulator svd incident vertices Vertex handle v Starts at an arbitrary vertex incident to v Vertex circulator svd incident vertices Vertex handle v Face handle f Starts at the first vertex of f adjacent to v in counterclockwise order around v Precondition Face f is incident to vertex v Traversal of the Convex Hull Applied on the infinite vertex the above methods allow to visit the vertices on the convex hull and the infinite edges and faces Note that a counterclockwise traversal of the vertices adjacent to the infinite vertex is a clockwise traversal of the convex hull Vertex circulator svd incident vertices svd infinite vertex Vertex circulator svd incident vertices svd infinite vertex Face handle f Face circulator svd incident faces svd infinite vertex Face circulator svd incident faces svd infinite vertex Face handle f Edge circulator svd incident edges svd infinite vertex Edge circulator svd incident edges svd infinite vertex Face handle f PredicatesThe class Segment Voronoi diagram 2 Gt DS provides methods to test the finite or infinite character of any feature bool svd is infinite Vertex handle v true iff v is the infinite vertex bool svd is infinite Face handle f true iff face f is infinite bool svd is infinite Face handle f int i true iff edge f i is infinite bool svd is infinite Edge e true iff edge e is infinite bool svd is infinite Edge circulator ec true iff edge ec is infinite Insertion template class Input iterator size type svd insert Input iterator first Input iterator beyond Inserts the sites in the range first beyond The number of additional sites inserted in the diagram is returned Input iterator must be a model of InputIterator and its value type must be either Point 2 or Site 2 template class Input iterator size type svd insert Input iterator first Input iterator beyond Tag false Same as the previous method Input iterator must be a model of InputIterator and its value type must be either Point 2 or Site 2 template class Input iterator size type svd insert Input iterator first Input iterator beyond Tag true Inserts the sites in the range first beyond after performing a random shuffle on them The number of additional sites inserted in the diagram is returned Input iterator must be a model of InputIterator and its value type must be either Point 2 or Site 2 Vertex handle svd insert Point 2 p Inserts the point p in the segment Voronoi diagram If p has already been inserted then the vertex handle of its already inserted copy is returned If p has not been inserted yet the vertex handle of p is returned Vertex handle svd insert Point 2 p Vertex handle vnear Inserts p in the segment Voronoi diagram using the site associated with vnear as an estimate for the nearest neighbor of p The vertex handle returned has the same semantics as the vertex handle returned by the method Vertex handle insert Point 2 p Vertex handle svd insert Point 2 p1 Point 2 p2 Inserts the closed segment with endpoints p1 and p2 in the segment Voronoi diagram If the segment has already been inserted in the diagram then the vertex handle of its already inserted copy is returned If the segment does not intersect any segment in the existing diagram the vertex handle corresponding to its corresponding open segment is returned Finally if the segment intersects other segments in the existing Voronoi diagram the vertex handle to one of its open subsegments is returned Vertex handle svd insert Point 2 p1 Point 2 p2 Vertex handle vnear Inserts the segment whose endpoints are p1 and p2 in the segment Voronoi diagram using the site associated with vnear as an estimate for the nearest neighbor of p1 The vertex handle returned has the same semantics as the vertex handle returned by the method Vertex handle insert Point 2 p1 Point 2 p2 Vertex handle svd insert Site 2 s Inserts the site s in the segment Voronoi diagram The vertex handle returned has the same semantics as the vertex handle returned by the methods Vertex handle insert Point 2 p and Vertex handle insert Point 2 p1 Point 2 p2 depending on whether s represents a point or a segment respectively Precondition s is input must be true Vertex handle svd insert Site 2 s Vertex handle vnear Inserts s in the segment Voronoi diagram using the site associated with vnear as an estimate for the nearest neighbor of s if s is a point or the first endpoint of s if s is a segment The vertex handle returned has the same semantics as the vertex handle returned by the method Vertex handle insert Site 2 s Precondition s is input must be true Nearest neighbor location Vertex handle svd nearest neighbor Point 2 p Finds the nearest neighbor of the point p In other words it finds the site whose segment Voronoi diagram cell contains p Ties are broken arbitrarily and one of the nearest neighbors of p is returned If there are no sites in the segment Voronoi diagram Vertex handle is returned Vertex handle svd nearest neighbor Point 2 p Vertex handle vnear Finds the nearest neighbor of the point p using the site associated with vnear as an estimate for the nearest neighbor of p Ties are broken arbitrarily and one of the nearest neighbors of p is returned If there are no sites in the segment Voronoi diagram Vertex handle is returned I O template class Stream Stream svd draw dual Stream str Draws the segment Voronoi diagram to the stream str The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 template class Stream Stream svd draw skeleton Stream str Draws the segment Voronoi diagram to the stream str except the edges of the diagram corresponding to a segment and its endpoints The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 template class Stream Stream svd draw dual edge Edge e Stream str Draws the edge e of the segment Voronoi diagram to the stream str The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 Precondition e must be a finite edge template class Stream Stream svd draw dual edge Edge circulator ec Stream str Draws the edge ec of the segment Voronoi diagram to the stream str The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 Precondition ec must be a finite edge template class Stream Stream svd draw dual edge All edges iterator eit Stream str Draws the edge eit of the segment Voronoi diagram to the stream str The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 Precondition eit must be a finite edge template class Stream Stream svd draw dual edge Finite edges iterator eit Stream str Draws the edge eit of the segment Voronoi diagram to the stream str The following operators must be defined Stream operator Stream Gt Segment 2 Stream operator Stream Gt Ray 2 Stream operator Stream Gt Line 2 Validity check bool svd is valid bool verbose false int level 1 Checks the validity of the segment Voronoi diagram If verbose is true a short message is sent to std cerr If level is only the data structure is validated If level is 1 then both the data structure and the segment Voronoi diagram are validated Negative values of level always return true and values greater than 1 are equivalent to level being 1 Miscellaneous void svd clear Clears all contents of the segment Voronoi diagram void svd swap other The segment Voronoi diagrams other and svd are swapped svd swap other should be preferred to svd other or to svd other if other is deleted afterwards See AlsoSegmentVoronoiDiagramTraits 2 SegmentVoronoiDiagramDataStructure 2 SegmentVoronoiDiagramVertexBase 2 TriangulationFaceBase 2 CGAL Segment Voronoi diagram hierarchy 2 Gt STag DS CGAL Segment Voronoi diagram traits 2 K MTag CGAL Segment Voronoi diagram traits without intersections 2 K MTag CGAL Segment Voronoi diagram filtered traits 2 CK CM EK EM FK FM CGAL Segment Voronoi diagram filtered traits without intersections 2 CK CM EK EM FK FM CGAL Triangulation data structure 2 Vb Fb CGAL Segment Voronoi diagram vertex base 2 Gt SSTag CGAL Triangulation face base 2 Gt Next SegmentVoronoiDiagramSite 2 Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Segment_Voronoi_diagram_2_ref/Class_Segment_Voronoi_diagram_2.html", "title": "segment_voronoi_diagram_2&lt;gt,ds&gt;", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Segment_Voronoi_diagram_2_ref/Segment_Voronoi_diagram_2.tex' -->\n<html> <head>  \n<title>Segment_Voronoi_diagram_2&lt;Gt,DS&gt;</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1040\"></A>\n\n<A NAME=\"Cross_link_anchor_1041\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_963\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Class.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_CGAL::Segment_Voronoi_diagram_2<Gt,DS>\"></A>\n<h2><I>CGAL::Segment_Voronoi_diagram_2&lt;Gt,DS&gt;</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe class <I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I> represents the segment Voronoi diagram by its\ndual. Currently it supports only insertions of sites.\nIt is templated by two template arguments <I>Gt</I>, which\nmust be a model of <I><A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A></I>\nand <I>DS</I>,\nwhich must be a model of <I><A HREF=\"Concept_SegmentVoronoiDiagramDataStructure_2.html#Cross_link_anchor_1048\">SegmentVoronoiDiagramDataStructure_2</A></I>.\nThe second template argument defaults to \n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;  <A HREF=\"Class_Segment_Voronoi_diagram_vertex_base_2.html#Cross_link_anchor_1050\">CGAL::Segment_Voronoi_diagram_vertex_base_2</A>&lt;Gt&gt;, <A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Gt&gt; &gt;</I>.\n<P>\n\n<I>#include &lt;<A HREF=\"../../../include/CGAL/Segment_Voronoi_diagram_2.h\">CGAL/Segment_Voronoi_diagram_2.h</A>&gt;</I>\n<P>\n\n<H3>Is Model for the Concept</H3><I>DefaultConstructible</I><BR>\n\n<I>CopyConstructible</I><BR>\n\n<I>Assignable</I>\n<P>\n\n<H3>Types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Geom_traits\"></A>\n<A NAME=\"Typedef_Geom_traits\"></A>\ntypedef Gt\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Geom_traits;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the geometric traits.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Data_structure\"></A>\n<A NAME=\"Typedef_Data_structure\"></A>\ntypedef DS\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Data_structure;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the underlying\ndata structure.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_size_type\"></A>\n<A NAME=\"Typedef_size_type\"></A>\ntypedef typename DS::size_type\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    size_type;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Size type (an unsigned integral type)\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2\"></A>\n<A NAME=\"Typedef_Point_2\"></A>\ntypedef typename Gt::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the\npoint defined in the geometric traits.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Site_2\"></A>\n<A NAME=\"Typedef_Site_2\"></A>\ntypedef typename Gt::Site_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Site_2;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the segment Voronoi diagram site, defined in the geometric\n  traits.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_container\"></A>\n<A NAME=\"Typedef_Point_container\"></A>\ntypedef std::set&lt;<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>&gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Point_container;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for the container of points.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Point_handle\"></A>\n<A NAME=\"Typedef_Point_handle\"></A>\ntypedef typename Point_container::iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Point_handle;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A handle for points in the point container.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe vertices and faces of the dual of the segment Voronoi diagram are\naccessed through <I>handles</I>, \n<I>iterators</I> and <I>circulators</I>. \nThe iterators and circulators\nare all bidirectional and non-mutable.\nThe circulators and iterators are assignable to the \ncorresponding handle types, and they are also convertible to the\ncorresponding handles.\nThe edges of the dual of the segment Voronoi diagram can also be\nvisited through iterators and circulators,\nthe edge circulators and iterators\nare also bidirectional and non-mutable.\nIn the following, we call <I>infinite</I> any face or edge \nincident  to the infinite vertex and the infinite vertex itself.\nAny other feature (face, edge or vertex) of the dual of the segment\nVoronoi diagram is said to be <I>finite</I>.\nSome iterators (the <I>All</I> iterators ) allow to visit finite or \ninfinite features while the others (the <I>Finite</I> iterators) visit only\nfinite features. Circulators visit both infinite and finite features.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Edge\"></A>\n<A NAME=\"Typedef_Edge\"></A>\ntypedef typename DS::Edge\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Edge;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The edge type.\nThe <I>Edge(f,i)</I> is the edge common to faces <I>f</I> and \n<I>f.neighbor(i)</I>. It is also the edge joining the vertices\n<I>vertex(cw(i))</I> and <I>vertex(ccw(i))</I> of <I>f</I>.<BR>\n\n<EM>Precondition: </EM><I>i</I> must be <I>0</I>, <I>1</I> or <I>2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle\"></A>\n<A NAME=\"Typedef_Vertex_handle\"></A>\ntypedef typename DS::Vertex_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Vertex_handle;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a handle to a vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle\"></A>\n<A NAME=\"Typedef_Face_handle\"></A>\ntypedef typename DS::Face_handle\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Face_handle;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a handle to a face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator\"></A>\n<A NAME=\"Typedef_Vertex_circulator\"></A>\ntypedef typename DS::Vertex_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Vertex_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over vertices incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator\"></A>\n<A NAME=\"Typedef_Face_circulator\"></A>\ntypedef typename DS::Face_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Face_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over faces incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator\"></A>\n<A NAME=\"Typedef_Edge_circulator\"></A>\ntypedef typename DS::Edge_circulator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    Edge_circulator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for a circulator over edges incident to a given vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator\"></A>\n<A NAME=\"Typedef_All_vertices_iterator\"></A>\ntypedef typename DS::Vertex_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    All_vertices_iterator;\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all vertices.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator\"></A>\n<A NAME=\"Typedef_All_faces_iterator\"></A>\ntypedef typename DS::Face_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    All_faces_iterator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all faces.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator\"></A>\n<A NAME=\"Typedef_All_edges_iterator\"></A>\ntypedef typename DS::Edge_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    All_edges_iterator;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    A type for an iterator over all edges.\n        </TD></TR>\n        </TABLE>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;::Finite_vertices_iterator;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over finite vertices.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;::Finite_faces_iterator;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over finite faces.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;::Finite_edges_iterator;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an iterator over finite edges.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\nIn addition to iterators and circulators for vertices and faces,\niterators for sites are provided. In particular there are iterators\nfor the set of input sites and the set of output sites. The set of\ninput sites is the set of sites inserted by the user using the\n<I>insert</I> methods of this class. If a site is inserted multiple\ntimes, every instance of this site will be reported. The set of output\nsites is the set of sites in the segment Voronoi diagram. The value\ntype of these iterators is <I>Site_2</I>.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;::Input_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a bidirectional iterator over all input sites.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;::Output_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a bidirectional iterator over all output sites (the sites\n  in the diagram).\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\nIn addition to the default and copy constructors the following\nconstructors are defined:\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt; svd ( Gt gt=Gt());\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates the\n  dual of the segment Voronoi diagram using <I>gt</I> as geometric\n  traits.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt; svd ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond,<BR>\n\nGt gt=Gt());</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Creates the dual of the segment Voronoi diagram using <I>gt</I> as\ngeometric traits and inserts all sites in the range\n[<I>first</I>, <I>beyond</I>).<BR>\n\n<EM>Precondition: </EM><I>Input_iterator</I> must be a model of\n<I>InputIterator</I>. The value type of\n<I>Input_iterator</I> must be either <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> or <I>Site_2</I>.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access Functions</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Geom_traits_geom_traits69;\"></A>\nGeom_traits\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    svd.geom_traits ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a reference to the segment Voronoi diagram traits object.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_dimension69;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    svd.dimension ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the dimension of the segment Voronoi diagram. The dimension\n  is <MATH><I>-1</I></MATH> if the diagram contains no sites, <MATH><I>0</I></MATH> if the diagram\n  contains one site, <MATH><I>1</I></MATH> if it contains two sites and <MATH><I>2</I></MATH> if it\n  contains three or more sites.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_vertices69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.number_of_vertices ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of finite vertices of the dual of the segment\n  Voronoi diagram.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_faces69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.number_of_faces ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the number of faces (both finite and infinite) of the\n  dual of the segment Voronoi diagram.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_input_sites69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.number_of_input_sites ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Return the number of input sites.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_number_of_output_sites69;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.number_of_output_sites ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Return the number of output sites. This is equal to the number of\nvertices in the dual of the segment Voronoi diagram.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_handle_infinite_face69;\"></A>\nFace_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.infinite_face ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a face incident to the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_infinite_vertex69;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.infinite_vertex ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_finite_vertex69;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_vertex ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a vertex distinct from  the <I>infinite_vertex</I>.<BR>\n\n<EM>Precondition: </EM>The number of sites in the segment Voronoi diagram must\n  be at least one.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Data_structure_data_structure69;\"></A>\nData_structure\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.data_structure ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a reference to the\n  segment Voronoi diagram data structure object.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_container_point_container69;\"></A>\nPoint_container\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.point_container ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Returns a reference to\n  the point container object.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Traversal of the dual of the segment Voronoi diagram</H3>\n<P>\n\nA segment Voronoi diagram can be seen as a container of faces and\nvertices. Therefore the <I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I> class provides several iterators\nand circulators that allow to traverse it (completely or partially).\n<P>\n\n<H3>Face, Edge and Vertex Iterators</H3>\n<P>\n\nThe following iterators allow respectively to visit \nfinite faces,  finite edges and  finite vertices of the dual of the\nsegment Voronoi diagram. These iterators are non-mutable,\nbidirectional and their value types are respectively\n<I>Face</I>, <I>Edge</I> and <I>Vertex</I>. \nThey are all invalidated by any change in the segment Voronoi diagram.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_vertices_iterator_finite_vertices_begin69;\"></A>\nFinite_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_vertices_iterator_finite_vertices_end69;\"></A>\nFinite_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edges_iterator_finite_edges_begin69;\"></A>\nFinite_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_edges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edges_iterator_finite_edges_end69;\"></A>\nFinite_edges_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_edges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_faces_iterator_finite_faces_begin69;\"></A>\nFinite_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_faces_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary finite face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_faces_iterator_finite_faces_end69_const;\"></A>\nFinite_faces_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.finite_faces_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\nThe following iterators allow respectively to visit all\n(both finite and infinite) faces, edges and vertices\nof the dual of the segment Voronoi diagram. These iterators are\nnon-mutable, bidirectional and their value types are respectively\n<I>Face</I>, <I>Edge</I> and <I>Vertex</I>. \nThey are all invalidated by any change in the segment Voronoi diagram.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator_all_vertices_begin69;\"></A>\nAll_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_vertices_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary  vertex.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_All_vertices_iterator_all_vertices_end69;\"></A>\nAll_vertices_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_vertices_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator_all_edges_begin69;\"></A>\nAll_edges_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_edges_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_edges_iterator_all_edges_end69;\"></A>\nAll_edges_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_edges_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator_all_faces_begin69;\"></A>\nAll_faces_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_faces_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary face.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_All_faces_iterator_all_faces_end69;\"></A>\nAll_faces_iterator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.all_faces_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Site iterators</H3>\n<P>\n\nThe following iterators allow respectively to visit \nall sites. These iterators are non-mutable, bidirectional and their\nvalue type is <I>Site_2</I>. They are all invalidated by any change in\nthe segment Voronoi diagram.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Input_sites_iterator_input_sites_begin69;\"></A>\nInput_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.input_sites_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary input site.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Input_sites_iterator_input_sites_end69;\"></A>\nInput_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.input_sites_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Output_sites_iterator_output_sites_begin69;\"></A>\nOutput_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.output_sites_begin ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary output site.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Output_sites_iterator_output_sites_end69;\"></A>\nOutput_sites_iterator\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.output_sites_end ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Past-the-end iterator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Face, Edge and Vertex Circulators</H3>\n<P>\n\nThe <I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I> class also provides circulators that allow to visit\nrespectively all faces or edges incident to a given vertex or all\nvertices adjacent to a given vertex. These circulators are non-mutable\nand bidirectional. The operator <I>operator++</I> moves the circulator\ncounterclockwise around the vertex while the <I>operator--</I> moves\nclockwise. A face circulator is invalidated by any modification of the\nface pointed to. An edge circulator is invalidated by any modification\nin one of the two faces incident to the edge pointed to. A vertex\ncirculator is invalidated by any modification in any of the faces\nadjacent to the vertex pointed to.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6Vertex_handle_v9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_faces ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary face incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6Vertex_handle_v+_Face_handle_f9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_faces ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at face <I>f</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6Vertex_handle_v9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_edges ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary edge incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6Vertex_handle_v+_Face_handle_f9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_edges ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at the first edge of <I>f</I> incident to \n<I>v</I>, in counterclockwise order around <I>v</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6Vertex_handle_v9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_vertices ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at an arbitrary  vertex incident\nto <I>v</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6Vertex_handle_v+_Face_handle_f9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_vertices ( Vertex_handle v,  Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Starts at the first vertex of <I>f</I> adjacent  to <I>v</I>\nin  counterclockwise order around <I>v</I>.<BR>\n\n<EM>Precondition: </EM>Face <I>f</I> is incident to vertex <I>v</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Traversal of the Convex Hull</H3>\n<P>\n\nApplied on the <I>infinite_vertex</I>\nthe above methods  allow to visit the vertices on the convex hull and\nthe infinite edges and faces. Note that a counterclockwise\ntraversal of the vertices adjacent to the <I>infinite_vertex</I> is\na clockwise traversal of the convex hull.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6svd+infinite_vertex699;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_vertices ( svd.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_circulator_incident_vertices6svd+infinite_vertex69+_Face_handle_f9;\"></A>\nVertex_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.incident_vertices ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6svd+infinite_vertex699;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_faces ( svd.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Face_circulator_incident_faces6svd+infinite_vertex69+_Face_handle_f9;\"></A>\nFace_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.incident_faces ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6svd+infinite_vertex699;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.incident_edges ( svd.infinite_vertex())\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Edge_circulator_incident_edges6svd+infinite_vertex69+_Face_handle_f9;\"></A>\nEdge_circulator\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.incident_edges ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.infinite_vertex(),<BR>\n\nFace_handle f)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Predicates</H3>The class <I><A HREF=\"Class_Segment_Voronoi_diagram_2.html#Cross_link_anchor_1041\">Segment_Voronoi_diagram_2</A>&lt;Gt,DS&gt;</I> provides methods to test\nthe finite or infinite character of any feature.\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Vertex_handle_v9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_infinite ( Vertex_handle v)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff <I>v</I> is the <I>infinite_vertex</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Face_handle_f9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_infinite ( Face_handle f)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff face <I>f</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Face_handle_f+_int_i9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_infinite ( Face_handle f,  int i)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>(f,i)</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Edge_e9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_infinite ( Edge e)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>e</I> is infinite.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_infinite6Edge_circulator_ec9_const;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_infinite ( Edge_circulator ec)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    <I>true</I>, iff edge <I>*ec</I> is infinite.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Insertion</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_insert6Input_iterator_first+_Input_iterator_beyond9;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the sites in the range\n[<I>first</I>,<I>beyond</I>). The number of additional sites inserted in\n  the diagram is returned. <I>Input_iterator</I> must be a model of\n  <I>InputIterator</I> and its value type must be\n  either <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> or <I>Site_2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_insert6Input_iterator_first+_Input_iterator_beyond+_Tag_false9;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Tag_false.html#Cross_link_anchor_476\">Tag_false</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Same as the previous method. <I>Input_iterator</I> must be a model of\n  <I>InputIterator</I> and its value type must be\n  either <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> or <I>Site_2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Input_iterator &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_size_type_insert6Input_iterator_first+_Input_iterator_beyond+_Tag_true9;\"></A>\nsize_type\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Input_iterator first,<BR>\n\nInput_iterator beyond,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Tag_true.html#Cross_link_anchor_478\">Tag_true</A>)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the sites in the range\n[<I>first</I>,<I>beyond</I>) after performing a random shuffle on\n  them. The number of additional sites inserted in the diagram is\n  returned. <I>Input_iterator</I> must be a model of\n  <I>InputIterator</I> and its value type must be\n  either <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I> or <I>Site_2</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_2_p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.insert ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the\npoint <I>p</I> in the segment Voronoi diagram. If <I>p</I> has already\nbeen inserted, then the vertex handle of its already inserted copy is\nreturned. If <I>p</I> has not been inserted yet, the vertex handle of\n<I>p</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_2_p+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.insert ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts <I>p</I> in the segment Voronoi diagram using the site\nassociated with <I>vnear</I> as an estimate for the nearest neighbor\nof <I>p</I>. The vertex handle returned has the same semantics as\nthe vertex handle returned by the method\n<I>Vertex_handle insert(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_2_p1+_Point_2_p29;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.insert ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the\n  closed segment with endpoints <I>p1</I> and <I>p2</I> in the segment\n  Voronoi diagram. If the segment has already been inserted in the\n  diagram then the vertex handle of its already inserted copy is\n  returned. If the segment does not intersect any segment in the\n  existing diagram, the vertex handle corresponding to its\n  corresponding open segment is returned. Finally, if the segment\n  intersects other segments in the existing Voronoi diagram, the\n  vertex handle to one of its open subsegments is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Point_2_p1+_Point_2_p2+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.insert ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,<BR>\n\nVertex_handle vnear)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the segment whose endpoints are <I>p1</I> and <I>p2</I>\n  in the segment Voronoi diagram using the site\n  associated with <I>vnear</I> as an estimate for the nearest neighbor\n  of <I>p1</I>. The vertex handle returned has the same semantics as the\n  vertex handle returned by the method\n  <I>Vertex_handle insert(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.insert ( Site_2 s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts the site <I>s</I> in the\n  segment Voronoi diagram. The vertex handle returned has the same\n  semantics as the vertex handle returned by the methods\n  <I>Vertex_handle insert(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)</I> and <I>Vertex_handle     insert(<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)</I>, depending on whether <I>s</I>\n  represents a point or a segment respectively.<BR>\n\n<EM>Precondition: </EM><I>s.is_input()</I> must be <I>true</I>.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_insert6Site_2_s+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.insert ( Site_2 s,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Inserts <I>s</I> in the segment Voronoi diagram using the site\nassociated with <I>vnear</I> as an estimate for the nearest neighbor of\n<I>s</I>, if <I>s</I> is a point, or the first endpoint of <I>s</I>, if\n<I>s</I> is a segment. The vertex handle returned has the same\nsemantics as the vertex handle returned by the method\n<I>Vertex_handle insert(Site_2 s)</I>.<BR>\n\n<EM>Precondition: </EM><I>s.is_input()</I> must be <I>true</I>.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Nearest neighbor location</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_2_p9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point <I>p</I>. In other words it\nfinds the site whose segment Voronoi diagram cell contains\n<I>p</I>. Ties are broken arbitrarily and one of the nearest neighbors\nof <I>p</I> is returned. If there are no sites in the\nsegment Voronoi diagram <I>Vertex_handle()</I> is returned.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_handle_nearest_neighbor6Point_2_p+_Vertex_handle_vnear9;\"></A>\nVertex_handle\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.<A HREF=\"../Point_set_2_ref/Function_nearest_neighbor.html#Cross_link_anchor_1221\">nearest_neighbor</A> ( <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,  Vertex_handle vnear)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Finds the nearest neighbor of the point\n<I>p</I> using the site associated with <I>vnear</I> as an\nestimate for the nearest neighbor of <I>p</I>. Ties are broken\narbitrarily and one of the nearest neighbors of <I>p</I> is\nreturned. If there are no sites in the segment Voronoi diagram\n<I>Vertex_handle()</I> is returned.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>I/O</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual6Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.draw_dual ( Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the segment Voronoi\ndiagram to the stream <I>str</I>. The following operators must be\ndefined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template &lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_skeleton6Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.draw_skeleton ( Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the segment Voronoi\ndiagram to the stream <I>str</I>, except the edges of the diagram\ncorresponding to a segment and its endpoints.\nThe following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual_edge6Edge_e+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.draw_dual_edge ( Edge e,  Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the edge <I>e</I> of\n  the segment Voronoi diagram to the stream <I>str</I>.\nThe following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I><BR>\n\n<EM>Precondition: </EM><I>e</I> must be a finite edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual_edge6Edge_circulator_ec+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.draw_dual_edge ( Edge_circulator ec,  Stream&amp; str)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the edge <I>*ec</I> of\n  the segment Voronoi diagram to the stream <I>str</I>.\nThe following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I><BR>\n\n<EM>Precondition: </EM><I>*ec</I> must be a finite edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual_edge6All_edges_iterator_eit+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.draw_dual_edge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    All_edges_iterator eit,<BR>\n\nStream&amp; str)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the edge <I>*eit</I> of\n  the segment Voronoi diagram to the stream <I>str</I>.\nThe following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I><BR>\n\n<EM>Precondition: </EM><I>*eit</I> must be a finite edge.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    template&lt; class Stream &gt;\n        </I></NOBR>\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Stream__draw_dual_edge6Finite_edges_iterator_eit+_Stream__str9;\"></A>\nStream&amp;\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    svd.draw_dual_edge ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    Finite_edges_iterator eit,<BR>\n\nStream&amp; str)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Draws the edge <I>*eit</I> of\n  the segment Voronoi diagram to the stream <I>str</I>.\nThe following operators must be defined:<BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>)</I><BR>\n\n<I>Stream&amp; operator&lt;&lt;(Stream&amp;, Gt::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>)</I>\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Validity check</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_valid6bool_verbose_=_false+_int_level_=_19;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    svd.is_valid ( bool verbose = false,  int level = 1)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Checks the validity of the segment Voronoi diagram. If <I>verbose</I>\n  is <I>true</I> a short message is sent to <I>std::cerr</I>. If\n  <I>level</I> is 0, only the data structure is validated. If\n  <I>level</I> is 1, then both the data structure and the segment\n  Voronoi diagram are validated. Negative values of <I>level</I> always\n  return true, and values greater than 1 are equivalent to <I>level</I>\n  being 1.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Miscellaneous</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_clear69;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    svd.clear ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Clears all contents of the segment Voronoi\n  diagram.\n        </TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_void_swap6Segment_Voronoi_diagram_26Gt+DS9_other9;\"></A>\nvoid\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    svd.swap (  other)\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    The segment Voronoi diagrams\n<I>other</I> and <I>svd</I> are swapped. <I>svd</I>.<I>swap(other)</I> should\nbe preferred to <I>svd</I><I> = other</I> or to <I>svd</I><I>(other)</I> if\n<I>other</I> is deleted afterwards.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Concept_SegmentVoronoiDiagramTraits_2.html#Cross_link_anchor_1052\">SegmentVoronoiDiagramTraits_2</A></I><BR>\n\n<I><A HREF=\"Concept_SegmentVoronoiDiagramDataStructure_2.html#Cross_link_anchor_1048\">SegmentVoronoiDiagramDataStructure_2</A></I><BR>\n\n<I><A HREF=\"Concept_SegmentVoronoiDiagramVertexBase_2.html#Cross_link_anchor_1049\">SegmentVoronoiDiagramVertexBase_2</A></I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Concept_TriangulationFaceBase_2.html#Cross_link_anchor_934\">TriangulationFaceBase_2</A></I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_hierarchy_2.html#Cross_link_anchor_1061\">CGAL::Segment_Voronoi_diagram_hierarchy_2</A>&lt;Gt,STag,DS&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_2.html#Cross_link_anchor_1053\">CGAL::Segment_Voronoi_diagram_traits_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_traits_without_intersections_2.html#Cross_link_anchor_1055\">CGAL::Segment_Voronoi_diagram_traits_without_intersections_2</A>&lt;K,MTag&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_2.html#Cross_link_anchor_1057\">CGAL::Segment_Voronoi_diagram_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_filtered_traits_without_intersections_2.html#Cross_link_anchor_1059\">CGAL::Segment_Voronoi_diagram_filtered_traits_without_intersections_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I><BR>\n\n<I><A HREF=\"../TDS_2_ref/Class_Triangulation_data_structure_2.html#Cross_link_anchor_965\">CGAL::Triangulation_data_structure_2</A>&lt;Vb,Fb&gt;</I><BR>\n\n<I><A HREF=\"Class_Segment_Voronoi_diagram_vertex_base_2.html#Cross_link_anchor_1050\">CGAL::Segment_Voronoi_diagram_vertex_base_2</A>&lt;Gt,SSTag&gt;</I><BR>\n\n<I><A HREF=\"../Triangulation_2_ref/Class_Triangulation_face_base_2.html#Cross_link_anchor_946\">CGAL::Triangulation_face_base_2</A>&lt;Gt&gt;</I>\n<P>\n\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Concept_SegmentVoronoiDiagramSite_2.html\"><I>SegmentVoronoiDiagramSite_2</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_44!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 37890.0}