{"text": "Search LoginPreferencesHelp GuideAbout Trac WikiTimelineRoadmapBrowse SourceView TicketsSearch Context Navigation BlameRevision Log source nomatic tags NomaticIM 5 processing libraries howto txt View diff against View revision Visit trunk Last change on this file was 488 checked in by djp3 7 years ago First Import File size 17 4 KB Line 1LIBRARIES IN PROCESSING23Some basic instructions on how libraries work with Processing 4 I m also adding to this as people have trouble with it 5Pretty soon it s gonna be an outrageous mess 67Libraries are a new feature that are present only in revisions 7 8and higher Before revision 7 users could place any sort of code9inside the code folder of their sketch but this meant too many1 copies of each library The code folder is still an option but the 11use of the new library system is encouraged as a simple packaging 12mechanism for your projects 1314A Processing library can be any sort of Java code that s been 15given a package name and packed into a jar file It can also register16itself with the parent applet to get notification of when events 17happen in the sketch for instance whenever draw is called or a 18key is pressed 192 Most libraries may not need that much functionality but they 21may want to implement the dispose call which is called as the 22applet is closed Many libraries especially those with native code 23need this to properly shut down 2425It is not possible to build libraries from within Processing itself 26In fact creating a library with Processing will cause problems 27because when exported as an applet the jar file will contain the28current version of the processing core classes which will cause29major conflicts when trying to use any other code 3 31The PDE is built with the sole purpose of creating short sketches that 32are part of PApplet that have a few files at most We don t plan to 33extend the PDE to also support developing libraries or tools once 34those are enabled because then it simply becomes like any other IDE 35that is quickly too general for our target audience Users who are 36advanced enough in their programming skills to build libraries will 37almost always be skilled enough to use another IDE like Eclipse 38 if they aren t already to build their library 394 41 424344Notes on Library distribution4546There are two categories of libraries The core libraries 47 Video OpenGL Serial Net are part of the Processing distribution 48and contributed libraries are developed owned and maintained 49by members of the Processing community 5 51It s very possible that contributed libraries might make their way 52into the regular distribution if it makes sense for all involved 53After the 1 release we ll re evaluate if some libraries should be 54made a part of the standard distribution For now we don t have the 55people resources to support this because it would require us to 56debug the libraries with each release 5758We try to place a strong focus on the importance of clear 59documentation for the Processing project so please attempt similar 6 effort into communicating your library s features to potential users 61by hosting a descriptive web site 6263If you d like to have your library posted on the Processing website64 http processing org reference libraries please email65reas at processing org and we ll make a decision about its inclusion 66We strongly encourage and may someday require as a stipulation for67placement on the site that the source to your library be included 68We re giving away all our stuff and we want others to do so as well69because it s good for the community 7 71The contributed libraries are one of the most important aspects of 72the Processing project and have an enormous impact on how people 73understand Processing Libraries have been designed into the larger 74Processing plan to enable simple extensions of the core API in new 75innovative and unexpected directions The libraries are the future 76of the project as we plan for processing core to remain very 77minimal 78798 818283A Very Basic Example848586package libraryexample 87import processing core 8889public class BoringLibrary 9 PApplet parent 9192 public BoringLibrary PApplet parent 93 this parent parent 94 parent registerDispose this 95 9697 public void dispose 98 anything in here will be called automatically when 99 the parent applet shuts down for instance this might1 shut down a thread used by this library 1 1 note that this currently has issues see bug 1831 2 http dev processing org bugs show bug cgi id 1831 3 1 4 1 51 61 7Usually you ll need to pass this to a library s constructor so that1 8the library can access functions from PApplet i e graphics methods1 9like line and stroke or loadImage See later in the document for11 information about reading and writing files 111112If you d like to use constants such as RGB use the following 113public class BoringLibrary implements PConstants 114which will allow all the constants to be used by that class 115116117 11811912 Library Methods121122public void pre 123method that s called just after beginFrame meaning that it 124can affect drawing 125126public void draw 127method that s called at the end of draw but before endFrame 128129public void mouseEvent MouseEvent e 13 called when a mouse event occurs in the parent applet131132public void keyEvent KeyEvent e 133called when a key event occurs in the parent applet134135public void post 136method called after draw has completed and the frame is done 137no drawing allowed 138139public void size int width int height 14 this will be called the first time an applet sets its size 141but also any time that it s called while the PApplet is running 142no drawing should occur inside of this method because it may 143not be the case that the new renderer is yet valid and ready 144use this only to flag the new size and prepare for the next frame 145146public void stop 147can be called by users for instance movie stop will shut down148a movie that s being played or camera stop stops capturing 149video server stop will shut down the server and shut it down15 completely which is identical to its dispose function 151152public void dispose 153this should only be called by PApplet dispose is what gets 154called when the host applet is stopped so this should shut down155any threads disconnect from the net unload memory etc 156currently this method is not being called consistently 157http dev processing org bugs show bug cgi id 77158159To register any of these methods with the parent call 16 parent registerPre this or whatever the name of the function161is that you d like to use 162163Note that making things public is extremely important When running164inside Processing anything left blank has public added by the165preprocessor meaning void draw becomes public void draw 166167You can only draw inside of pre draw mouseEvent or keyEvent 168otherwise you may run into trouble pre and draw happen while169legitimate drawing is taking place and the mouse key events happen17 just before draw events are called they re queued up by the host171applet until it s safe to draw 172173For this reason you should use registerMouseEvent and mouseEvent 174 and same for the keys to handle your events rather than your class175implementing MouseListener For instance to figure out what the mouse176event is throwing back at you this would be an example handler 177178public void mouseEvent MouseEvent event 179 int x event getX 18 int y event getY 181182 switch event getID 183 case MouseEvent MOUSE PRESSED 184 do something for the mouse being pressed185 break 186 case MouseEvent MOUSE RELEASED 187 do something for mouse released188 break 189 case MouseEvent MOUSE CLICKED 19 do something for mouse clicked191 break 192 case MouseEvent MOUSE DRAGGED 193 do something for mouse dragged194 break 195 case MouseEvent MOUSE MOVED 196 umm 197 break 198 199 2 2 1More on mouse handling can be found in Sun s Java documentation 2 2http java sun com j2se 1 4 2 docs api java awt event MouseEvent html2 3which also covers things like modifiers shift click and whatnot 2 4Also check out the code for PApplet to see how ctrl click is handled2 5on Mac OS X so that it properly registers as a right click 2 62 72 8 2 921 211Structure of a Library Folder212213The Sonia library by Amit Pitaru is a good example here To make a214library called sonia you create a folder called sonia and within215that a subfolder named library The sonia folder should be placed216inside the Processing libraries folder or a user can place it217inside their sketchbook folder 218219Inside library you ll find sonia jar Anything that is found 22 inside library will be exported with your sketch 221222If different sets of files should be exported with applets versus223applications a file called export txt should be included For224sonia this looks like 225226 only export the jar file for applets 227 everything else is installed as a separate browser plugin228applet sonia jar229 application needs everything23 application sonia jar JSynClasses jar JSynV142 dll libJSynV142 jnilib231232This will include sonia jar for applets because in a web browser the233DLL files must be installed separately along with JSynClasses jar 234The sign in front of a line means that the line is a comment 235and it ll be ignored by the PDE 236237As of revision 97 you can also specify what to export for other238platforms as well at least Mac OS X Windows Linux For the example239above the application line could instead be changed to 24 241application macosx sonia jar JSynClasses jar libJSynV142 jnilib242application windows sonia jar JSynClasses jar JSynV142 dll243244Platform specific exports will be checked first and if they don t245exist the application will be used If neither exist or export txt246doesn t exist the entire contents of the library folder will be247copied 24824925 251252253Using Other Java Code As A Library254255So long as the code is inside a package it can be set up for use as 256a library For instance if you want to make a library called poopy 257set up a folder as follows 258259poopy 26 library 261 poopy jar262263Then the folder should be placed in the Processing libraries folder264or inside the user s sketch folder to be recognized by Processing and265its Import Library menu As of now you may need to restart266Processing in order to get the library to show up 267268While this process may sound a little complicated the intent is to269make it easier for users than a typical Java IDE A little added27 complexity for the developers of library code who will generally be271more advanced users is traded for great simplicity by the users 272since Processing is intended to target beginning programmers 273274275 276277278Import Statements and How They Work27928 If your library is sonia jar found at sonia library sonia jar all281the packages found in sonia jar will be added as imports into the282user s sketch when they selected Import Library 283284In the case of Sonia an additional jar file can be found in the285sonia library folder jsyn jar The contents of jsyn jar will not be286added to the import statements This is to avoid every library having287a ridiculously large number of import statements For instance if you288want to use the video library you don t want all 15 2 packages for289the QuickTime libraries listed there to confuse your users 29 291Bottom line if you want packages from the other jar to be loaded by292Processing then you need to put those class files into the main jar293file for the library sonia library sonia jar in this case 294295296 297298299Import Statements and the Code Folder3 3 1The code folder works differently and every package inside every jar3 2found in the code folder is simply added to the import statements by3 3the preprocessor The user never sees this it just happens magically 3 43 53 6 3 73 83 9Creating jar Files For Your Library31 311Since your code is inside a package you need to make sure that it s312inside subfolders in the jar file It should be noted that jar files313are simply zip files they can be opened with WinZip or Stuffit with314a manifest file 315316In the past you may have used 317javac java318to compile your files Once they re inside a packages you must use 319javac d java32 which will create folders and subfolders for the packages For321instance for all the stuff in processing core it would create 322323processing 324 core 325 PApplet class326 PGraphics class327 etc328329then you can jar that stuff up using 33 jar cf core jar processing331or with the command line info zip utility 332zip r core jar processing333334335 336337338The Import Library Menu Item33934 All this does is add the import yourlibrary statement to the top341of your sketch If you ve handwritten the import statements then342there s no need to use Import Library 343344345 346347348Getting a UnsupportedClassVersionError especially with Java 1 5 34935 When I compiled blah jar using the successful method mentioned351earlier under Java 1 5 I get the following error from Processing 352353java lang UnsupportedClassVersionError blah SomeClass354 Unsupported major minor version 49 355356This is because more recent versions of Java like to use their own357class file format that s not backwards compatible Pretty annoying 358since it s rare that newer language features are actually used and359shouldn t be with Processing anyway since most likely you want to36 make things work on Java 1 1 361362The fix is to compile with target 1 1 which will create class363files that are compatible with Java 1 1 This is necessary for any 364code that will run in a browser since approximately 3 4 of web 365users are still using Microsoft s Java 1 1 4 JVM as of April 2 5 366367K Damkjer adds Depending on the version of Java that you re using 368specifying target 1 1 when compiling libraries for distribution may 369not be enough to get a 1 1 compatible class file You may also need to 37 indicate source compatibility It seems that source 1 3 is the most 371recent Java release that is capable of creating 1 1 targeted class 372files All that said here s a typical compile string for me 373374javac source 1 3 target 1 1 d 375 classpath P5 HOME lib core jar package dirs java376377378 37938 381Adding Your Own Library Events382383So that your library can notify the host applet that something 384interesting has happened this is how you implement an event 385method in the style of serialEvent serverEvent etc 386387388public class FancyLibrary 389 Method fancyEventMethod 39 391 public YourLibrary PApplet parent 392 your library init code here 393394 check to see if the host applet implements395 public void fancyEvent FancyLibrary f 396 try 397 fancyEventMethod 398 parent getClass getMethod fancyEvent 399 new Class FancyLibrary class 4 catch Exception e 4 1 no such method or an error which is fine just ignore4 2 4 3 4 44 5 then later to fire that event4 6 public void makeEvent 4 7 if fancyEventMethod null 4 8 try 4 9 fancyEventMethod invoke parent new Object this 41 catch Exception e 411 System err println Disabling fancyEvent for name 412 because of an error 413 e printStackTrace 414 fancyEventMethod null 415 416 417 41841942 421422423Using built in functions from processing core424425Many methods in PApplet are made static for use by other libraries426and code that interfaces with Processing For instance openStream 427requires an applet object but loadStrings is a static method 428that can be run on any InputStream See the developer s reference429for more information about which methods are available 43 431432 433434435Accessing files from inside a library436437To open files for use with a library use the openStream method 438This is the most compatible means for loading data and makes use439of many hours of headaches that were the result of attempts to 44 create functions that loaded data across platforms Mac Windows 441and Linux and circumstances applet application and other 442443The functions sketchPath savePath dataPath and createPath 444all facilitate reading and writing files relative to the sketch 445folder They should be used to ensure that file I O works consistently446between your library and functions like loadImage or loadStrings 447Their documentation can be seen in the online javadoc reference found448on dev processing org The variable sketchPath is available for449convenience but in nearly all cases the sketchPath method is45 a better and more compatible route 451452The xxxxPath functions were finalized in revision 96 453454455 456457458Library Naming Rules45946 Libraries or classes inside them should not be prefixed with P 461the way that the core Processing classes are PImage PGraphics etc 462It s tempting to prefix everything that way to identify it with 463Processing but we d like to reserve that naming for official 464things that are inside processing core and other associated classes 465466Same goes for using Processing Pro or P5 just like P 467or whether it s a prefix or a suffix 468469Similarly please don t using processing as the prefix for your47 library packages We d like to keep that name space clear for 471official things as well 472473474 475476477Ben Fry Last updated 26 June 2 6 Note See TracBrowser for help on using the repository browser Download in other formats Plain Text Original Format Powered by Trac 1 1 By Edgewall Software All content copyright 2 7 2 8 by LUCI http luci ics uci edu ", "_id": "http://djp3-pc2.ics.uci.edu/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt", "title": "\n      howto.txt in nomatic/tags/nomaticim-0.0.5/processing/libraries\n     \u2013 nomatic*im\n    ", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  \n  \n\n  \n\n\n  <head>\n\t\t<title>\n      howto.txt in nomatic/tags/NomaticIM-0.0.5/processing/libraries\n     \u2013 Nomatic*IM\n    </title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /><link rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search\" /><link rel=\"help\" href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt?format=txt\" type=\"text/plain\" title=\"Plain Text\" /><link rel=\"alternate\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\" type=\"text/plain; charset=iso-8859-15\" title=\"Original Format\" /><link rel=\"start\" href=\"/LUCICodeRepository/nomaticIM/wiki\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/code.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/pygments/trac.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/LUCICodeRepository/nomaticIM/chrome/common/css/browser.css\" type=\"text/css\" /><link rel=\"shortcut icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link rel=\"icon\" href=\"http://luci.ics.uci.edu/logo32by32.gif\" type=\"image/gif\" /><link type=\"application/opensearchdescription+xml\" rel=\"search\" href=\"/LUCICodeRepository/nomaticIM/search/opensearch\" title=\"Search Nomatic*IM\" /><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/jquery.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/babel.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/messages/en_US.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/trac.js\"></script><script type=\"text/javascript\" charset=\"utf-8\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/search.js\"></script><script type=\"text/javascript\" src=\"/LUCICodeRepository/nomaticIM/chrome/common/js/folding.js\"></script><script type=\"text/javascript\">\n      jQuery(document).ready(function($) {\n        $(\".trac-toggledeleted\").show().click(function() {\n                  $(this).siblings().find(\".trac-deleted\").toggle();\n                  return false;\n        }).click();\n        $(\"#jumploc input\").hide();\n        $(\"#jumploc select\").change(function () {\n          this.parentNode.parentNode.submit();\n        });\n          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));\n      });\n    </script>\n\t</head>\n  <body>\n    <div id=\"banner\">\n      <div id=\"header\">\n        <a id=\"logo\" href=\"http://luci.ics.uci.edu/#code\"><img src=\"http://luci.ics.uci.edu/blog/archives/LUCIhorzTight.jpg\" alt=\"LUCI Code Repository\" /></a>\n      </div>\n      <form id=\"search\" action=\"/LUCICodeRepository/nomaticIM/search\" method=\"get\">\n        <div>\n          <label for=\"proj-search\">Search:</label>\n          <input type=\"text\" id=\"proj-search\" name=\"q\" size=\"18\" value=\"\" />\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div id=\"metanav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/login\">Login</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/prefs\">Preferences</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/wiki/TracGuide\">Help/Guide</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/about\">About Trac</a></li>\n    </ul>\n  </div>\n    </div>\n    <div id=\"mainnav\" class=\"nav\">\n    <ul>\n      <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/wiki\">Wiki</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/timeline\">Timeline</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/roadmap\">Roadmap</a></li><li class=\"active\"><a href=\"/LUCICodeRepository/nomaticIM/browser\">Browse Source</a></li><li><a href=\"/LUCICodeRepository/nomaticIM/report\">View Tickets</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/search\">Search</a></li>\n    </ul>\n  </div>\n    <div id=\"main\">\n      <div id=\"ctxtnav\" class=\"nav\">\n        <h2>Context Navigation</h2>\n        <ul>\n          <li class=\"first\"><a href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/trunk/processing/libraries/howto.txt?annotate=blame\" title=\"Annotate each line with the last changed revision (this can be time consuming...)\">Blame</a></li><li class=\"last\"><a href=\"/LUCICodeRepository/nomaticIM/log/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\">Revision Log</a></li>\n        </ul>\n        <hr />\n      </div>\n    <div id=\"content\" class=\"browser\">\n        <h1>\n          \n<a class=\"pathentry first\" href=\"/LUCICodeRepository/nomaticIM/browser?order=name\" title=\"Go to repository root\">source:</a>\n<a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic?order=name\" title=\"View nomatic\">nomatic</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags?order=name\" title=\"View tags\">tags</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5?order=name\" title=\"View NomaticIM-0.0.5\">NomaticIM-0.0.5</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing?order=name\" title=\"View processing\">processing</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing/libraries?order=name\" title=\"View libraries\">libraries</a><span class=\"pathentry sep\">/</span><a class=\"pathentry\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt?order=name\" title=\"View howto.txt\">howto.txt</a>\n<br style=\"clear: both\" />\n\n        </h1>\n        <div id=\"diffrev\">\n          <form action=\"/LUCICodeRepository/nomaticIM/changeset\" method=\"get\">\n            <div>\n              <label title=\"Show the diff against a specific revision\">\n                View diff against: <input type=\"text\" name=\"old\" size=\"6\" />\n                <input type=\"hidden\" name=\"old_path\" value=\"nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\" />\n                <input type=\"hidden\" name=\"new\" />\n                <input type=\"hidden\" name=\"new_path\" value=\"nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\" />\n              </label>\n            </div>\n          </form>\n        </div>\n        <div id=\"jumprev\">\n          <form action=\"\" method=\"get\">\n            <div>\n              <label for=\"rev\">\n                View revision:</label>\n              <input type=\"text\" id=\"rev\" name=\"rev\" size=\"6\" />\n            </div>\n          </form>\n        </div>\n        <div id=\"jumploc\">\n          <form action=\"\" method=\"get\">\n            <div class=\"buttons\">\n              <label for=\"preselected\">Visit:</label>\n              <select id=\"preselected\" name=\"preselected\">\n                <option selected=\"selected\"></option>\n                <optgroup label=\"branches\">\n                  <option value=\"/LUCICodeRepository/nomaticIM/browser/trunk\">trunk</option>\n                </optgroup>\n              </select>\n              <input type=\"submit\" value=\"Go!\" title=\"Jump to the chosen preselected path\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"trac-tags\">\n        </div>\n      <table id=\"info\" summary=\"Revision info\">\n        <tr>\n          <th>\n                <a href=\"/LUCICodeRepository/nomaticIM/changeset/488/nomatic/trunk/processing/libraries/howto.txt\" title=\"View differences\">Last change</a>\n                  on this file was\n                  <a href=\"/LUCICodeRepository/nomaticIM/changeset/488/\" title=\"View changeset 488\">488</a>,\n                  checked in by djp3, <a class=\"timeline\" href=\"/LUCICodeRepository/nomaticIM/timeline?from=2007-09-27T00%3A25%3A12-07%3A00&amp;precision=second\" title=\"See timeline at Sep 27, 2007, 12:25:12 AM\">7 years ago</a>\n          </th>\n        </tr>\n        <tr>\n          <td class=\"message searchable\">\n              <p>\nFirst Import<br />\n</p>\n          </td>\n        </tr>\n        <tr><td colspan=\"2\">\n            <strong>File size:</strong>\n            <span title=\"17807 bytes\">17.4 KB</span>\n          </td></tr>\n      </table>\n      <div id=\"preview\" class=\"searchable\">\n        \n  <table class=\"code\"><thead><tr><th class=\"lineno\" title=\"Line numbers\">Line</th><th class=\"content\">\u00a0</th></tr></thead><tbody><tr><th id=\"L1\"><a href=\"#L1\">1</a></th><td>LIBRARIES IN PROCESSING</td></tr><tr><th id=\"L2\"><a href=\"#L2\">2</a></th><td></td></tr><tr><th id=\"L3\"><a href=\"#L3\">3</a></th><td>Some basic instructions on how libraries work with Processing. </td></tr><tr><th id=\"L4\"><a href=\"#L4\">4</a></th><td>(I'm also adding to this as people have trouble with it.. </td></tr><tr><th id=\"L5\"><a href=\"#L5\">5</a></th><td>Pretty soon it's gonna be an outrageous mess!)</td></tr><tr><th id=\"L6\"><a href=\"#L6\">6</a></th><td></td></tr><tr><th id=\"L7\"><a href=\"#L7\">7</a></th><td>Libraries are a new feature that are present only in revisions 70 </td></tr><tr><th id=\"L8\"><a href=\"#L8\">8</a></th><td>and higher. Before revision 70, users could place any sort of code</td></tr><tr><th id=\"L9\"><a href=\"#L9\">9</a></th><td>inside the 'code' folder of their sketch, but this meant too many</td></tr><tr><th id=\"L10\"><a href=\"#L10\">10</a></th><td>copies of each library. The code folder is still an option, but the </td></tr><tr><th id=\"L11\"><a href=\"#L11\">11</a></th><td>use of the new \"library\" system is encouraged as a simple packaging </td></tr><tr><th id=\"L12\"><a href=\"#L12\">12</a></th><td>mechanism for your projects.</td></tr><tr><th id=\"L13\"><a href=\"#L13\">13</a></th><td></td></tr><tr><th id=\"L14\"><a href=\"#L14\">14</a></th><td>A Processing library can be any sort of Java code that's been </td></tr><tr><th id=\"L15\"><a href=\"#L15\">15</a></th><td>given a package name and packed into a jar file. It can also register</td></tr><tr><th id=\"L16\"><a href=\"#L16\">16</a></th><td>itself with the parent applet to get notification of when events </td></tr><tr><th id=\"L17\"><a href=\"#L17\">17</a></th><td>happen in the sketch, for instance whenever draw() is called or a </td></tr><tr><th id=\"L18\"><a href=\"#L18\">18</a></th><td>key is pressed.</td></tr><tr><th id=\"L19\"><a href=\"#L19\">19</a></th><td></td></tr><tr><th id=\"L20\"><a href=\"#L20\">20</a></th><td>Most libraries may not need that much functionality, but they </td></tr><tr><th id=\"L21\"><a href=\"#L21\">21</a></th><td>may want to implement the dispose() call, which is called as the </td></tr><tr><th id=\"L22\"><a href=\"#L22\">22</a></th><td>applet is closed. Many libraries, especially those with native code, </td></tr><tr><th id=\"L23\"><a href=\"#L23\">23</a></th><td>need this to properly shut down. </td></tr><tr><th id=\"L24\"><a href=\"#L24\">24</a></th><td></td></tr><tr><th id=\"L25\"><a href=\"#L25\">25</a></th><td>It is not possible to build libraries from within Processing itself. </td></tr><tr><th id=\"L26\"><a href=\"#L26\">26</a></th><td>In fact, creating a library with Processing will cause problems </td></tr><tr><th id=\"L27\"><a href=\"#L27\">27</a></th><td>because when exported as an applet, the jar file will contain the</td></tr><tr><th id=\"L28\"><a href=\"#L28\">28</a></th><td>current version of the processing.core classes, which will cause</td></tr><tr><th id=\"L29\"><a href=\"#L29\">29</a></th><td>major conflicts when trying to use any other code.</td></tr><tr><th id=\"L30\"><a href=\"#L30\">30</a></th><td></td></tr><tr><th id=\"L31\"><a href=\"#L31\">31</a></th><td>The PDE is built with the sole purpose of creating short sketches that </td></tr><tr><th id=\"L32\"><a href=\"#L32\">32</a></th><td>are part of PApplet that have a few files at most. We don't plan to </td></tr><tr><th id=\"L33\"><a href=\"#L33\">33</a></th><td>extend the PDE to also support developing libraries (or \"tools,\" once </td></tr><tr><th id=\"L34\"><a href=\"#L34\">34</a></th><td>those are enabled) because then it simply becomes like any other IDE </td></tr><tr><th id=\"L35\"><a href=\"#L35\">35</a></th><td>that is quickly too general for our target audience. Users who are </td></tr><tr><th id=\"L36\"><a href=\"#L36\">36</a></th><td>advanced enough in their programming skills to build libraries will </td></tr><tr><th id=\"L37\"><a href=\"#L37\">37</a></th><td>almost always be skilled enough to use another IDE like Eclipse </td></tr><tr><th id=\"L38\"><a href=\"#L38\">38</a></th><td>(if they aren't already) to build their library.</td></tr><tr><th id=\"L39\"><a href=\"#L39\">39</a></th><td></td></tr><tr><th id=\"L40\"><a href=\"#L40\">40</a></th><td></td></tr><tr><th id=\"L41\"><a href=\"#L41\">41</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L42\"><a href=\"#L42\">42</a></th><td></td></tr><tr><th id=\"L43\"><a href=\"#L43\">43</a></th><td></td></tr><tr><th id=\"L44\"><a href=\"#L44\">44</a></th><td>Notes on Library distribution</td></tr><tr><th id=\"L45\"><a href=\"#L45\">45</a></th><td></td></tr><tr><th id=\"L46\"><a href=\"#L46\">46</a></th><td>There are two categories of libraries. The \"core\" libraries </td></tr><tr><th id=\"L47\"><a href=\"#L47\">47</a></th><td>(Video, OpenGL, Serial, Net) are part of the Processing distribution, </td></tr><tr><th id=\"L48\"><a href=\"#L48\">48</a></th><td>and \"contributed libraries\" are developed, owned, and maintained </td></tr><tr><th id=\"L49\"><a href=\"#L49\">49</a></th><td>by members of the Processing community.</td></tr><tr><th id=\"L50\"><a href=\"#L50\">50</a></th><td></td></tr><tr><th id=\"L51\"><a href=\"#L51\">51</a></th><td>It's very possible that contributed libraries might make their way </td></tr><tr><th id=\"L52\"><a href=\"#L52\">52</a></th><td>into the regular distribution if it makes sense for all involved. </td></tr><tr><th id=\"L53\"><a href=\"#L53\">53</a></th><td>After the 1.0 release, we'll re-evaluate if some libraries should be </td></tr><tr><th id=\"L54\"><a href=\"#L54\">54</a></th><td>made a part of the standard distribution. For now, we don't have the </td></tr><tr><th id=\"L55\"><a href=\"#L55\">55</a></th><td>people resources to support this, because it would require us to </td></tr><tr><th id=\"L56\"><a href=\"#L56\">56</a></th><td>debug the libraries with each release. </td></tr><tr><th id=\"L57\"><a href=\"#L57\">57</a></th><td></td></tr><tr><th id=\"L58\"><a href=\"#L58\">58</a></th><td>We try to place a strong focus on the importance of clear </td></tr><tr><th id=\"L59\"><a href=\"#L59\">59</a></th><td>documentation for the Processing project, so please attempt similar </td></tr><tr><th id=\"L60\"><a href=\"#L60\">60</a></th><td>effort into communicating your library's features to potential users </td></tr><tr><th id=\"L61\"><a href=\"#L61\">61</a></th><td>by hosting a descriptive web site.</td></tr><tr><th id=\"L62\"><a href=\"#L62\">62</a></th><td></td></tr><tr><th id=\"L63\"><a href=\"#L63\">63</a></th><td>If you'd like to have your library posted on the Processing website</td></tr><tr><th id=\"L64\"><a href=\"#L64\">64</a></th><td>(http://processing.org/reference/libraries) please email</td></tr><tr><th id=\"L65\"><a href=\"#L65\">65</a></th><td>reas at processing.org and we'll make a decision about its inclusion.</td></tr><tr><th id=\"L66\"><a href=\"#L66\">66</a></th><td>We strongly encourage (and may someday require as a stipulation for</td></tr><tr><th id=\"L67\"><a href=\"#L67\">67</a></th><td>placement on the site) that the source to your library be included. </td></tr><tr><th id=\"L68\"><a href=\"#L68\">68</a></th><td>We're giving away all our stuff, and we want others to do so as well</td></tr><tr><th id=\"L69\"><a href=\"#L69\">69</a></th><td>because it's good for the community.</td></tr><tr><th id=\"L70\"><a href=\"#L70\">70</a></th><td></td></tr><tr><th id=\"L71\"><a href=\"#L71\">71</a></th><td>The contributed libraries are one of the most important aspects of </td></tr><tr><th id=\"L72\"><a href=\"#L72\">72</a></th><td>the Processing project and have an enormous impact on how people </td></tr><tr><th id=\"L73\"><a href=\"#L73\">73</a></th><td>understand Processing. Libraries have been designed into the larger </td></tr><tr><th id=\"L74\"><a href=\"#L74\">74</a></th><td>Processing plan to enable simple extensions of the core API in new, </td></tr><tr><th id=\"L75\"><a href=\"#L75\">75</a></th><td>innovative, and unexpected directions. The libraries are the future </td></tr><tr><th id=\"L76\"><a href=\"#L76\">76</a></th><td>of the project as we plan for processing.core.* to remain very </td></tr><tr><th id=\"L77\"><a href=\"#L77\">77</a></th><td>minimal.</td></tr><tr><th id=\"L78\"><a href=\"#L78\">78</a></th><td></td></tr><tr><th id=\"L79\"><a href=\"#L79\">79</a></th><td></td></tr><tr><th id=\"L80\"><a href=\"#L80\">80</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L81\"><a href=\"#L81\">81</a></th><td></td></tr><tr><th id=\"L82\"><a href=\"#L82\">82</a></th><td></td></tr><tr><th id=\"L83\"><a href=\"#L83\">83</a></th><td>A Very Basic Example</td></tr><tr><th id=\"L84\"><a href=\"#L84\">84</a></th><td></td></tr><tr><th id=\"L85\"><a href=\"#L85\">85</a></th><td></td></tr><tr><th id=\"L86\"><a href=\"#L86\">86</a></th><td>package libraryexample;</td></tr><tr><th id=\"L87\"><a href=\"#L87\">87</a></th><td>import processing.core.*;</td></tr><tr><th id=\"L88\"><a href=\"#L88\">88</a></th><td></td></tr><tr><th id=\"L89\"><a href=\"#L89\">89</a></th><td>public class BoringLibrary {</td></tr><tr><th id=\"L90\"><a href=\"#L90\">90</a></th><td>\u00a0 PApplet parent;</td></tr><tr><th id=\"L91\"><a href=\"#L91\">91</a></th><td></td></tr><tr><th id=\"L92\"><a href=\"#L92\">92</a></th><td>\u00a0 public BoringLibrary(PApplet parent) {</td></tr><tr><th id=\"L93\"><a href=\"#L93\">93</a></th><td>\u00a0 \u00a0 this.parent = parent;</td></tr><tr><th id=\"L94\"><a href=\"#L94\">94</a></th><td>\u00a0 \u00a0 parent.registerDispose(this);</td></tr><tr><th id=\"L95\"><a href=\"#L95\">95</a></th><td>\u00a0 }</td></tr><tr><th id=\"L96\"><a href=\"#L96\">96</a></th><td></td></tr><tr><th id=\"L97\"><a href=\"#L97\">97</a></th><td>\u00a0 public void dispose() {</td></tr><tr><th id=\"L98\"><a href=\"#L98\">98</a></th><td>\u00a0 \u00a0 // anything in here will be called automatically when </td></tr><tr><th id=\"L99\"><a href=\"#L99\">99</a></th><td>\u00a0 \u00a0 // the parent applet shuts down. for instance, this might</td></tr><tr><th id=\"L100\"><a href=\"#L100\">100</a></th><td>\u00a0 \u00a0 // shut down a thread used by this library.</td></tr><tr><th id=\"L101\"><a href=\"#L101\">101</a></th><td>\u00a0 \u00a0 // note that this currently has issues, see bug #183</td></tr><tr><th id=\"L102\"><a href=\"#L102\">102</a></th><td>\u00a0 \u00a0 // http://dev.processing.org/bugs/show_bug.cgi?id=183</td></tr><tr><th id=\"L103\"><a href=\"#L103\">103</a></th><td>\u00a0 }</td></tr><tr><th id=\"L104\"><a href=\"#L104\">104</a></th><td>}</td></tr><tr><th id=\"L105\"><a href=\"#L105\">105</a></th><td></td></tr><tr><th id=\"L106\"><a href=\"#L106\">106</a></th><td></td></tr><tr><th id=\"L107\"><a href=\"#L107\">107</a></th><td>Usually you'll need to pass \"this\" to a library's constructor so that</td></tr><tr><th id=\"L108\"><a href=\"#L108\">108</a></th><td>the library can access functions from PApplet, i.e graphics methods</td></tr><tr><th id=\"L109\"><a href=\"#L109\">109</a></th><td>like line() and stroke() or loadImage(). See later in the document for</td></tr><tr><th id=\"L110\"><a href=\"#L110\">110</a></th><td>information about reading and writing files.</td></tr><tr><th id=\"L111\"><a href=\"#L111\">111</a></th><td></td></tr><tr><th id=\"L112\"><a href=\"#L112\">112</a></th><td>If you'd like to use constants such as \"RGB\", use the following:</td></tr><tr><th id=\"L113\"><a href=\"#L113\">113</a></th><td>public class BoringLibrary implements PConstants {</td></tr><tr><th id=\"L114\"><a href=\"#L114\">114</a></th><td>which will allow all the constants to be used by that class.</td></tr><tr><th id=\"L115\"><a href=\"#L115\">115</a></th><td></td></tr><tr><th id=\"L116\"><a href=\"#L116\">116</a></th><td></td></tr><tr><th id=\"L117\"><a href=\"#L117\">117</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L118\"><a href=\"#L118\">118</a></th><td></td></tr><tr><th id=\"L119\"><a href=\"#L119\">119</a></th><td></td></tr><tr><th id=\"L120\"><a href=\"#L120\">120</a></th><td>Library Methods</td></tr><tr><th id=\"L121\"><a href=\"#L121\">121</a></th><td></td></tr><tr><th id=\"L122\"><a href=\"#L122\">122</a></th><td>public void pre() </td></tr><tr><th id=\"L123\"><a href=\"#L123\">123</a></th><td>method that's called just after beginFrame(), meaning that it </td></tr><tr><th id=\"L124\"><a href=\"#L124\">124</a></th><td>can affect drawing. </td></tr><tr><th id=\"L125\"><a href=\"#L125\">125</a></th><td></td></tr><tr><th id=\"L126\"><a href=\"#L126\">126</a></th><td>public void draw()</td></tr><tr><th id=\"L127\"><a href=\"#L127\">127</a></th><td>method that's called at the end of draw(), but before endFrame().</td></tr><tr><th id=\"L128\"><a href=\"#L128\">128</a></th><td></td></tr><tr><th id=\"L129\"><a href=\"#L129\">129</a></th><td>public void mouseEvent(MouseEvent e) </td></tr><tr><th id=\"L130\"><a href=\"#L130\">130</a></th><td>called when a mouse event occurs in the parent applet</td></tr><tr><th id=\"L131\"><a href=\"#L131\">131</a></th><td></td></tr><tr><th id=\"L132\"><a href=\"#L132\">132</a></th><td>public void keyEvent(KeyEvent e) </td></tr><tr><th id=\"L133\"><a href=\"#L133\">133</a></th><td>called when a key event occurs in the parent applet</td></tr><tr><th id=\"L134\"><a href=\"#L134\">134</a></th><td></td></tr><tr><th id=\"L135\"><a href=\"#L135\">135</a></th><td>public void post() </td></tr><tr><th id=\"L136\"><a href=\"#L136\">136</a></th><td>method called after draw has completed and the frame is done.</td></tr><tr><th id=\"L137\"><a href=\"#L137\">137</a></th><td>no drawing allowed.</td></tr><tr><th id=\"L138\"><a href=\"#L138\">138</a></th><td></td></tr><tr><th id=\"L139\"><a href=\"#L139\">139</a></th><td>public void size(int width, int height)</td></tr><tr><th id=\"L140\"><a href=\"#L140\">140</a></th><td>this will be called the first time an applet sets its size, </td></tr><tr><th id=\"L141\"><a href=\"#L141\">141</a></th><td>but also any time that it's called while the PApplet is running.</td></tr><tr><th id=\"L142\"><a href=\"#L142\">142</a></th><td>no drawing should occur inside of this method, because it may </td></tr><tr><th id=\"L143\"><a href=\"#L143\">143</a></th><td>not be the case that the new renderer is yet valid and ready.</td></tr><tr><th id=\"L144\"><a href=\"#L144\">144</a></th><td>use this only to flag the new size and prepare for the next frame.</td></tr><tr><th id=\"L145\"><a href=\"#L145\">145</a></th><td></td></tr><tr><th id=\"L146\"><a href=\"#L146\">146</a></th><td>public void stop()</td></tr><tr><th id=\"L147\"><a href=\"#L147\">147</a></th><td>can be called by users, for instance movie.stop() will shut down</td></tr><tr><th id=\"L148\"><a href=\"#L148\">148</a></th><td>a movie that's being played, or camera.stop() stops capturing </td></tr><tr><th id=\"L149\"><a href=\"#L149\">149</a></th><td>video. server.stop() will shut down the server and shut it down</td></tr><tr><th id=\"L150\"><a href=\"#L150\">150</a></th><td>completely, which is identical to its \"dispose\" function.</td></tr><tr><th id=\"L151\"><a href=\"#L151\">151</a></th><td></td></tr><tr><th id=\"L152\"><a href=\"#L152\">152</a></th><td>public void dispose() </td></tr><tr><th id=\"L153\"><a href=\"#L153\">153</a></th><td>this should only be called by PApplet. dispose() is what gets </td></tr><tr><th id=\"L154\"><a href=\"#L154\">154</a></th><td>called when the host applet is stopped, so this should shut down</td></tr><tr><th id=\"L155\"><a href=\"#L155\">155</a></th><td>any threads, disconnect from the net, unload memory, etc. </td></tr><tr><th id=\"L156\"><a href=\"#L156\">156</a></th><td>currently, this method is not being called consistently:</td></tr><tr><th id=\"L157\"><a href=\"#L157\">157</a></th><td>http://dev.processing.org/bugs/show_bug.cgi?id=77</td></tr><tr><th id=\"L158\"><a href=\"#L158\">158</a></th><td></td></tr><tr><th id=\"L159\"><a href=\"#L159\">159</a></th><td>To register any of these methods with the parent, call </td></tr><tr><th id=\"L160\"><a href=\"#L160\">160</a></th><td>parent.registerPre(this) or whatever the name of the function</td></tr><tr><th id=\"L161\"><a href=\"#L161\">161</a></th><td>is that you'd like to use. </td></tr><tr><th id=\"L162\"><a href=\"#L162\">162</a></th><td></td></tr><tr><th id=\"L163\"><a href=\"#L163\">163</a></th><td>Note that making things \"public\" is extremely important. When running</td></tr><tr><th id=\"L164\"><a href=\"#L164\">164</a></th><td>inside Processing, anything left blank has public added by the</td></tr><tr><th id=\"L165\"><a href=\"#L165\">165</a></th><td>preprocessor, meaning \"void draw()\" becomes \"public void draw()\". </td></tr><tr><th id=\"L166\"><a href=\"#L166\">166</a></th><td></td></tr><tr><th id=\"L167\"><a href=\"#L167\">167</a></th><td>You can only draw inside of pre(), draw(), mouseEvent(), or keyEvent()</td></tr><tr><th id=\"L168\"><a href=\"#L168\">168</a></th><td>otherwise you may run into trouble. pre() and draw() happen while</td></tr><tr><th id=\"L169\"><a href=\"#L169\">169</a></th><td>legitimate drawing is taking place, and the mouse/key events happen</td></tr><tr><th id=\"L170\"><a href=\"#L170\">170</a></th><td>just before draw() events are called, they're queued up by the host</td></tr><tr><th id=\"L171\"><a href=\"#L171\">171</a></th><td>applet until it's safe to draw.</td></tr><tr><th id=\"L172\"><a href=\"#L172\">172</a></th><td></td></tr><tr><th id=\"L173\"><a href=\"#L173\">173</a></th><td>For this reason, you should use registerMouseEvent() and mouseEvent() </td></tr><tr><th id=\"L174\"><a href=\"#L174\">174</a></th><td>(and same for the keys) to handle your events, rather than your class</td></tr><tr><th id=\"L175\"><a href=\"#L175\">175</a></th><td>implementing MouseListener. For instance, to figure out what the mouse</td></tr><tr><th id=\"L176\"><a href=\"#L176\">176</a></th><td>event is throwing back at you, this would be an example handler:</td></tr><tr><th id=\"L177\"><a href=\"#L177\">177</a></th><td></td></tr><tr><th id=\"L178\"><a href=\"#L178\">178</a></th><td>public void mouseEvent(MouseEvent event) {</td></tr><tr><th id=\"L179\"><a href=\"#L179\">179</a></th><td>\u00a0 int x = event.getX();</td></tr><tr><th id=\"L180\"><a href=\"#L180\">180</a></th><td>\u00a0 int y = event.getY();</td></tr><tr><th id=\"L181\"><a href=\"#L181\">181</a></th><td></td></tr><tr><th id=\"L182\"><a href=\"#L182\">182</a></th><td>\u00a0 switch (event.getID()) {</td></tr><tr><th id=\"L183\"><a href=\"#L183\">183</a></th><td>\u00a0 \u00a0 case MouseEvent.MOUSE_PRESSED:</td></tr><tr><th id=\"L184\"><a href=\"#L184\">184</a></th><td>\u00a0 \u00a0 \u00a0 // do something for the mouse being pressed</td></tr><tr><th id=\"L185\"><a href=\"#L185\">185</a></th><td>\u00a0 \u00a0 \u00a0 break;</td></tr><tr><th id=\"L186\"><a href=\"#L186\">186</a></th><td>\u00a0 \u00a0 case MouseEvent.MOUSE_RELEASED:</td></tr><tr><th id=\"L187\"><a href=\"#L187\">187</a></th><td>\u00a0 \u00a0 \u00a0 // do something for mouse released</td></tr><tr><th id=\"L188\"><a href=\"#L188\">188</a></th><td>\u00a0 \u00a0 \u00a0 break;</td></tr><tr><th id=\"L189\"><a href=\"#L189\">189</a></th><td>\u00a0 \u00a0 case MouseEvent.MOUSE_CLICKED:</td></tr><tr><th id=\"L190\"><a href=\"#L190\">190</a></th><td>\u00a0 \u00a0 \u00a0 // do something for mouse clicked</td></tr><tr><th id=\"L191\"><a href=\"#L191\">191</a></th><td>\u00a0 \u00a0 \u00a0 break;</td></tr><tr><th id=\"L192\"><a href=\"#L192\">192</a></th><td>\u00a0 \u00a0 case MouseEvent.MOUSE_DRAGGED:</td></tr><tr><th id=\"L193\"><a href=\"#L193\">193</a></th><td>\u00a0 \u00a0 \u00a0 // do something for mouse dragged</td></tr><tr><th id=\"L194\"><a href=\"#L194\">194</a></th><td>\u00a0 \u00a0 \u00a0 break;</td></tr><tr><th id=\"L195\"><a href=\"#L195\">195</a></th><td>\u00a0 \u00a0 case MouseEvent.MOUSE_MOVED:</td></tr><tr><th id=\"L196\"><a href=\"#L196\">196</a></th><td>\u00a0 \u00a0 \u00a0 // umm...</td></tr><tr><th id=\"L197\"><a href=\"#L197\">197</a></th><td>\u00a0 \u00a0 \u00a0 break;</td></tr><tr><th id=\"L198\"><a href=\"#L198\">198</a></th><td>\u00a0 }</td></tr><tr><th id=\"L199\"><a href=\"#L199\">199</a></th><td>}</td></tr><tr><th id=\"L200\"><a href=\"#L200\">200</a></th><td></td></tr><tr><th id=\"L201\"><a href=\"#L201\">201</a></th><td>More on mouse handling can be found in Sun's Java documentation:</td></tr><tr><th id=\"L202\"><a href=\"#L202\">202</a></th><td>http://java.sun.com/j2se/1.4.2/docs/api/java/awt/event/MouseEvent.html</td></tr><tr><th id=\"L203\"><a href=\"#L203\">203</a></th><td>which also covers things like modifiers (shift-click) and whatnot.</td></tr><tr><th id=\"L204\"><a href=\"#L204\">204</a></th><td>Also check out the code for PApplet to see how ctrl-click is handled</td></tr><tr><th id=\"L205\"><a href=\"#L205\">205</a></th><td>on Mac OS X so that it properly registers as a right-click.</td></tr><tr><th id=\"L206\"><a href=\"#L206\">206</a></th><td></td></tr><tr><th id=\"L207\"><a href=\"#L207\">207</a></th><td></td></tr><tr><th id=\"L208\"><a href=\"#L208\">208</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L209\"><a href=\"#L209\">209</a></th><td></td></tr><tr><th id=\"L210\"><a href=\"#L210\">210</a></th><td></td></tr><tr><th id=\"L211\"><a href=\"#L211\">211</a></th><td>Structure of a Library Folder</td></tr><tr><th id=\"L212\"><a href=\"#L212\">212</a></th><td></td></tr><tr><th id=\"L213\"><a href=\"#L213\">213</a></th><td>The Sonia library by Amit Pitaru is a good example here. To make a</td></tr><tr><th id=\"L214\"><a href=\"#L214\">214</a></th><td>library called sonia, you create a folder called \"sonia\" and within</td></tr><tr><th id=\"L215\"><a href=\"#L215\">215</a></th><td>that, a subfolder named \"library\". The sonia folder should be placed</td></tr><tr><th id=\"L216\"><a href=\"#L216\">216</a></th><td>inside the Processing \"libraries\" folder, or a user can place it</td></tr><tr><th id=\"L217\"><a href=\"#L217\">217</a></th><td>inside their sketchbook folder. </td></tr><tr><th id=\"L218\"><a href=\"#L218\">218</a></th><td></td></tr><tr><th id=\"L219\"><a href=\"#L219\">219</a></th><td>Inside \"library\", you'll find \"sonia.jar\". Anything that is found </td></tr><tr><th id=\"L220\"><a href=\"#L220\">220</a></th><td>inside library will be exported with your sketch. </td></tr><tr><th id=\"L221\"><a href=\"#L221\">221</a></th><td></td></tr><tr><th id=\"L222\"><a href=\"#L222\">222</a></th><td>If different sets of files should be exported with applets versus</td></tr><tr><th id=\"L223\"><a href=\"#L223\">223</a></th><td>applications, a file called \"export.txt\" should be included. For</td></tr><tr><th id=\"L224\"><a href=\"#L224\">224</a></th><td>sonia, this looks like:</td></tr><tr><th id=\"L225\"><a href=\"#L225\">225</a></th><td></td></tr><tr><th id=\"L226\"><a href=\"#L226\">226</a></th><td># only export the jar file for applets.. </td></tr><tr><th id=\"L227\"><a href=\"#L227\">227</a></th><td># everything else is installed as a separate browser plugin</td></tr><tr><th id=\"L228\"><a href=\"#L228\">228</a></th><td>applet=sonia.jar</td></tr><tr><th id=\"L229\"><a href=\"#L229\">229</a></th><td># application needs everything</td></tr><tr><th id=\"L230\"><a href=\"#L230\">230</a></th><td>application=sonia.jar,JSynClasses.jar,JSynV142.dll,libJSynV142.jnilib</td></tr><tr><th id=\"L231\"><a href=\"#L231\">231</a></th><td></td></tr><tr><th id=\"L232\"><a href=\"#L232\">232</a></th><td>This will include sonia.jar for applets, because in a web browser, the</td></tr><tr><th id=\"L233\"><a href=\"#L233\">233</a></th><td>DLL files must be installed separately along with JSynClasses.jar. </td></tr><tr><th id=\"L234\"><a href=\"#L234\">234</a></th><td>The # sign in front of a line means that the line is a comment, </td></tr><tr><th id=\"L235\"><a href=\"#L235\">235</a></th><td>and it'll be ignored by the PDE.</td></tr><tr><th id=\"L236\"><a href=\"#L236\">236</a></th><td></td></tr><tr><th id=\"L237\"><a href=\"#L237\">237</a></th><td>As of revision 0097, you can also specify what to export for other</td></tr><tr><th id=\"L238\"><a href=\"#L238\">238</a></th><td>platforms as well (at least Mac OS X, Windows, Linux). For the example</td></tr><tr><th id=\"L239\"><a href=\"#L239\">239</a></th><td>above, the application line could instead be changed to:</td></tr><tr><th id=\"L240\"><a href=\"#L240\">240</a></th><td></td></tr><tr><th id=\"L241\"><a href=\"#L241\">241</a></th><td>application.macosx=sonia.jar,JSynClasses.jar,libJSynV142.jnilib</td></tr><tr><th id=\"L242\"><a href=\"#L242\">242</a></th><td>application.windows=sonia.jar,JSynClasses.jar,JSynV142.dll</td></tr><tr><th id=\"L243\"><a href=\"#L243\">243</a></th><td></td></tr><tr><th id=\"L244\"><a href=\"#L244\">244</a></th><td>Platform-specific exports will be checked first, and if they don't</td></tr><tr><th id=\"L245\"><a href=\"#L245\">245</a></th><td>exist, the \"application\" will be used. If neither exist (or export.txt</td></tr><tr><th id=\"L246\"><a href=\"#L246\">246</a></th><td>doesn't exist), the entire contents of the library folder will be</td></tr><tr><th id=\"L247\"><a href=\"#L247\">247</a></th><td>copied.</td></tr><tr><th id=\"L248\"><a href=\"#L248\">248</a></th><td></td></tr><tr><th id=\"L249\"><a href=\"#L249\">249</a></th><td></td></tr><tr><th id=\"L250\"><a href=\"#L250\">250</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L251\"><a href=\"#L251\">251</a></th><td></td></tr><tr><th id=\"L252\"><a href=\"#L252\">252</a></th><td></td></tr><tr><th id=\"L253\"><a href=\"#L253\">253</a></th><td>Using Other Java Code As A Library</td></tr><tr><th id=\"L254\"><a href=\"#L254\">254</a></th><td></td></tr><tr><th id=\"L255\"><a href=\"#L255\">255</a></th><td>So long as the code is inside a package, it can be set up for use as </td></tr><tr><th id=\"L256\"><a href=\"#L256\">256</a></th><td>a library. For instance, if you want to make a library called 'poopy'</td></tr><tr><th id=\"L257\"><a href=\"#L257\">257</a></th><td>set up a folder as follows:</td></tr><tr><th id=\"L258\"><a href=\"#L258\">258</a></th><td></td></tr><tr><th id=\"L259\"><a href=\"#L259\">259</a></th><td>poopy -&gt; </td></tr><tr><th id=\"L260\"><a href=\"#L260\">260</a></th><td>\u00a0 library -&gt;</td></tr><tr><th id=\"L261\"><a href=\"#L261\">261</a></th><td>\u00a0 \u00a0 poopy.jar</td></tr><tr><th id=\"L262\"><a href=\"#L262\">262</a></th><td></td></tr><tr><th id=\"L263\"><a href=\"#L263\">263</a></th><td>Then, the folder should be placed in the Processing 'libraries' folder</td></tr><tr><th id=\"L264\"><a href=\"#L264\">264</a></th><td>or inside the user's sketch folder to be recognized by Processing and</td></tr><tr><th id=\"L265\"><a href=\"#L265\">265</a></th><td>its \"Import Library\" menu. As of now, you may need to restart</td></tr><tr><th id=\"L266\"><a href=\"#L266\">266</a></th><td>Processing in order to get the library to show up. </td></tr><tr><th id=\"L267\"><a href=\"#L267\">267</a></th><td></td></tr><tr><th id=\"L268\"><a href=\"#L268\">268</a></th><td>While this process may sound a little complicated, the intent is to</td></tr><tr><th id=\"L269\"><a href=\"#L269\">269</a></th><td>make it easier for users than a typical Java IDE. A little added</td></tr><tr><th id=\"L270\"><a href=\"#L270\">270</a></th><td>complexity for the developers of library code (who will generally be</td></tr><tr><th id=\"L271\"><a href=\"#L271\">271</a></th><td>more advanced users) is traded for great simplicity by the users,</td></tr><tr><th id=\"L272\"><a href=\"#L272\">272</a></th><td>since Processing is intended to target beginning programmers.</td></tr><tr><th id=\"L273\"><a href=\"#L273\">273</a></th><td></td></tr><tr><th id=\"L274\"><a href=\"#L274\">274</a></th><td></td></tr><tr><th id=\"L275\"><a href=\"#L275\">275</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L276\"><a href=\"#L276\">276</a></th><td></td></tr><tr><th id=\"L277\"><a href=\"#L277\">277</a></th><td></td></tr><tr><th id=\"L278\"><a href=\"#L278\">278</a></th><td>Import Statements and How They Work</td></tr><tr><th id=\"L279\"><a href=\"#L279\">279</a></th><td></td></tr><tr><th id=\"L280\"><a href=\"#L280\">280</a></th><td>If your library is sonia.jar, found at sonia/library/sonia.jar, all</td></tr><tr><th id=\"L281\"><a href=\"#L281\">281</a></th><td>the packages found in sonia.jar will be added as imports into the</td></tr><tr><th id=\"L282\"><a href=\"#L282\">282</a></th><td>user's sketch when they selected \"Import Library\". </td></tr><tr><th id=\"L283\"><a href=\"#L283\">283</a></th><td></td></tr><tr><th id=\"L284\"><a href=\"#L284\">284</a></th><td>In the case of Sonia, an additional .jar file can be found in the</td></tr><tr><th id=\"L285\"><a href=\"#L285\">285</a></th><td>sonia/library/ folder, jsyn.jar. The contents of jsyn.jar will not be</td></tr><tr><th id=\"L286\"><a href=\"#L286\">286</a></th><td>added to the import statements. This is to avoid every library having</td></tr><tr><th id=\"L287\"><a href=\"#L287\">287</a></th><td>a ridiculously large number of import statements. For instance, if you</td></tr><tr><th id=\"L288\"><a href=\"#L288\">288</a></th><td>want to use the \"video\" library, you don't want all 15-20 packages for</td></tr><tr><th id=\"L289\"><a href=\"#L289\">289</a></th><td>the QuickTime libraries listed there to confuse your users. </td></tr><tr><th id=\"L290\"><a href=\"#L290\">290</a></th><td></td></tr><tr><th id=\"L291\"><a href=\"#L291\">291</a></th><td>Bottom line, if you want packages from the other .jar to be loaded by</td></tr><tr><th id=\"L292\"><a href=\"#L292\">292</a></th><td>Processing, then you need to put those .class files into the main .jar</td></tr><tr><th id=\"L293\"><a href=\"#L293\">293</a></th><td>file for the library (sonia/library/sonia.jar in this case).</td></tr><tr><th id=\"L294\"><a href=\"#L294\">294</a></th><td></td></tr><tr><th id=\"L295\"><a href=\"#L295\">295</a></th><td></td></tr><tr><th id=\"L296\"><a href=\"#L296\">296</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L297\"><a href=\"#L297\">297</a></th><td></td></tr><tr><th id=\"L298\"><a href=\"#L298\">298</a></th><td></td></tr><tr><th id=\"L299\"><a href=\"#L299\">299</a></th><td>Import Statements and the Code Folder</td></tr><tr><th id=\"L300\"><a href=\"#L300\">300</a></th><td></td></tr><tr><th id=\"L301\"><a href=\"#L301\">301</a></th><td>The code folder works differently, and every package inside every .jar</td></tr><tr><th id=\"L302\"><a href=\"#L302\">302</a></th><td>found in the code folder is simply added to the import statements by</td></tr><tr><th id=\"L303\"><a href=\"#L303\">303</a></th><td>the preprocessor. The user never sees this, it just happens magically.</td></tr><tr><th id=\"L304\"><a href=\"#L304\">304</a></th><td></td></tr><tr><th id=\"L305\"><a href=\"#L305\">305</a></th><td></td></tr><tr><th id=\"L306\"><a href=\"#L306\">306</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L307\"><a href=\"#L307\">307</a></th><td></td></tr><tr><th id=\"L308\"><a href=\"#L308\">308</a></th><td></td></tr><tr><th id=\"L309\"><a href=\"#L309\">309</a></th><td>Creating .jar Files For Your Library</td></tr><tr><th id=\"L310\"><a href=\"#L310\">310</a></th><td></td></tr><tr><th id=\"L311\"><a href=\"#L311\">311</a></th><td>Since your code is inside a package, you need to make sure that it's</td></tr><tr><th id=\"L312\"><a href=\"#L312\">312</a></th><td>inside subfolders in the .jar file. It should be noted that jar files</td></tr><tr><th id=\"L313\"><a href=\"#L313\">313</a></th><td>are simply .zip files (they can be opened with WinZip or Stuffit) with</td></tr><tr><th id=\"L314\"><a href=\"#L314\">314</a></th><td>a \"manifest\" file. </td></tr><tr><th id=\"L315\"><a href=\"#L315\">315</a></th><td></td></tr><tr><th id=\"L316\"><a href=\"#L316\">316</a></th><td>In the past, you may have used:</td></tr><tr><th id=\"L317\"><a href=\"#L317\">317</a></th><td>javac *.java</td></tr><tr><th id=\"L318\"><a href=\"#L318\">318</a></th><td>to compile your files. Once they're inside a packages, you must use:</td></tr><tr><th id=\"L319\"><a href=\"#L319\">319</a></th><td>javac -d . *.java</td></tr><tr><th id=\"L320\"><a href=\"#L320\">320</a></th><td>which will create folders and subfolders for the packages. For</td></tr><tr><th id=\"L321\"><a href=\"#L321\">321</a></th><td>instance, for all the stuff in processing.core.* it would create:</td></tr><tr><th id=\"L322\"><a href=\"#L322\">322</a></th><td></td></tr><tr><th id=\"L323\"><a href=\"#L323\">323</a></th><td>processing/ -&gt;</td></tr><tr><th id=\"L324\"><a href=\"#L324\">324</a></th><td>\u00a0 core/ -&gt;</td></tr><tr><th id=\"L325\"><a href=\"#L325\">325</a></th><td>\u00a0 \u00a0 PApplet.class</td></tr><tr><th id=\"L326\"><a href=\"#L326\">326</a></th><td>\u00a0 \u00a0 PGraphics.class</td></tr><tr><th id=\"L327\"><a href=\"#L327\">327</a></th><td>\u00a0 \u00a0 ..etc</td></tr><tr><th id=\"L328\"><a href=\"#L328\">328</a></th><td></td></tr><tr><th id=\"L329\"><a href=\"#L329\">329</a></th><td>then you can jar that stuff up using:</td></tr><tr><th id=\"L330\"><a href=\"#L330\">330</a></th><td>jar -cf core.jar processing</td></tr><tr><th id=\"L331\"><a href=\"#L331\">331</a></th><td>or with the command line info-zip utility:</td></tr><tr><th id=\"L332\"><a href=\"#L332\">332</a></th><td>zip -r core.jar processing</td></tr><tr><th id=\"L333\"><a href=\"#L333\">333</a></th><td></td></tr><tr><th id=\"L334\"><a href=\"#L334\">334</a></th><td></td></tr><tr><th id=\"L335\"><a href=\"#L335\">335</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L336\"><a href=\"#L336\">336</a></th><td></td></tr><tr><th id=\"L337\"><a href=\"#L337\">337</a></th><td></td></tr><tr><th id=\"L338\"><a href=\"#L338\">338</a></th><td>The \"Import Library\" Menu Item</td></tr><tr><th id=\"L339\"><a href=\"#L339\">339</a></th><td></td></tr><tr><th id=\"L340\"><a href=\"#L340\">340</a></th><td>All this does is add the \"import yourlibrary.*;\" statement to the top</td></tr><tr><th id=\"L341\"><a href=\"#L341\">341</a></th><td>of your sketch. If you've handwritten the import statements, then</td></tr><tr><th id=\"L342\"><a href=\"#L342\">342</a></th><td>there's no need to use \"Import Library\".</td></tr><tr><th id=\"L343\"><a href=\"#L343\">343</a></th><td></td></tr><tr><th id=\"L344\"><a href=\"#L344\">344</a></th><td></td></tr><tr><th id=\"L345\"><a href=\"#L345\">345</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L346\"><a href=\"#L346\">346</a></th><td></td></tr><tr><th id=\"L347\"><a href=\"#L347\">347</a></th><td></td></tr><tr><th id=\"L348\"><a href=\"#L348\">348</a></th><td>Getting a UnsupportedClassVersionError? (especially with Java 1.5)</td></tr><tr><th id=\"L349\"><a href=\"#L349\">349</a></th><td></td></tr><tr><th id=\"L350\"><a href=\"#L350\">350</a></th><td>When I compiled blah.jar (using the successful method mentioned</td></tr><tr><th id=\"L351\"><a href=\"#L351\">351</a></th><td>earlier) under Java 1.5, I get the following error from Processing:</td></tr><tr><th id=\"L352\"><a href=\"#L352\">352</a></th><td></td></tr><tr><th id=\"L353\"><a href=\"#L353\">353</a></th><td>java.lang.UnsupportedClassVersionError: blah/SomeClass</td></tr><tr><th id=\"L354\"><a href=\"#L354\">354</a></th><td>\u00a0(Unsupported major.minor version 49.0) </td></tr><tr><th id=\"L355\"><a href=\"#L355\">355</a></th><td></td></tr><tr><th id=\"L356\"><a href=\"#L356\">356</a></th><td>This is because more recent versions of Java like to use their own</td></tr><tr><th id=\"L357\"><a href=\"#L357\">357</a></th><td>class file format that's not backwards compatible. Pretty annoying,</td></tr><tr><th id=\"L358\"><a href=\"#L358\">358</a></th><td>since it's rare that newer language features are actually used (and</td></tr><tr><th id=\"L359\"><a href=\"#L359\">359</a></th><td>shouldn't be with Processing anyway, since most likely you want to</td></tr><tr><th id=\"L360\"><a href=\"#L360\">360</a></th><td>make things work on Java 1.1)</td></tr><tr><th id=\"L361\"><a href=\"#L361\">361</a></th><td></td></tr><tr><th id=\"L362\"><a href=\"#L362\">362</a></th><td>The fix is to compile with \"-target 1.1\" which will create class</td></tr><tr><th id=\"L363\"><a href=\"#L363\">363</a></th><td>files that are compatible with Java 1.1. This is necessary for any </td></tr><tr><th id=\"L364\"><a href=\"#L364\">364</a></th><td>code that will run in a browser, since approximately 30-40% of web </td></tr><tr><th id=\"L365\"><a href=\"#L365\">365</a></th><td>users are still using Microsoft's Java 1.1.4 JVM (as of April 2005).</td></tr><tr><th id=\"L366\"><a href=\"#L366\">366</a></th><td></td></tr><tr><th id=\"L367\"><a href=\"#L367\">367</a></th><td>K. Damkjer adds: Depending on the version of Java that you're using, </td></tr><tr><th id=\"L368\"><a href=\"#L368\">368</a></th><td>specifying -target 1.1 when compiling libraries for distribution may </td></tr><tr><th id=\"L369\"><a href=\"#L369\">369</a></th><td>not be enough to get a 1.1 compatible class file. You may also need to </td></tr><tr><th id=\"L370\"><a href=\"#L370\">370</a></th><td>indicate source compatibility. It seems that -source 1.3 is the most </td></tr><tr><th id=\"L371\"><a href=\"#L371\">371</a></th><td>recent Java release that is capable of creating 1.1 targeted .class </td></tr><tr><th id=\"L372\"><a href=\"#L372\">372</a></th><td>files. All that said, here's a typical compile string for me: </td></tr><tr><th id=\"L373\"><a href=\"#L373\">373</a></th><td></td></tr><tr><th id=\"L374\"><a href=\"#L374\">374</a></th><td>javac -source 1.3 -target 1.1 -d . </td></tr><tr><th id=\"L375\"><a href=\"#L375\">375</a></th><td>\u00a0 -classpath %P5_HOME%\\lib\\core.jar\u00a0 package/dirs/*.java</td></tr><tr><th id=\"L376\"><a href=\"#L376\">376</a></th><td></td></tr><tr><th id=\"L377\"><a href=\"#L377\">377</a></th><td></td></tr><tr><th id=\"L378\"><a href=\"#L378\">378</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L379\"><a href=\"#L379\">379</a></th><td></td></tr><tr><th id=\"L380\"><a href=\"#L380\">380</a></th><td></td></tr><tr><th id=\"L381\"><a href=\"#L381\">381</a></th><td>Adding Your Own Library Events</td></tr><tr><th id=\"L382\"><a href=\"#L382\">382</a></th><td></td></tr><tr><th id=\"L383\"><a href=\"#L383\">383</a></th><td>So that your library can notify the host applet that something </td></tr><tr><th id=\"L384\"><a href=\"#L384\">384</a></th><td>interesting has happened, this is how you implement an event </td></tr><tr><th id=\"L385\"><a href=\"#L385\">385</a></th><td>method in the style of serialEvent, serverEvent, etc.</td></tr><tr><th id=\"L386\"><a href=\"#L386\">386</a></th><td></td></tr><tr><th id=\"L387\"><a href=\"#L387\">387</a></th><td></td></tr><tr><th id=\"L388\"><a href=\"#L388\">388</a></th><td>public class FancyLibrary {</td></tr><tr><th id=\"L389\"><a href=\"#L389\">389</a></th><td>\u00a0 Method fancyEventMethod;</td></tr><tr><th id=\"L390\"><a href=\"#L390\">390</a></th><td></td></tr><tr><th id=\"L391\"><a href=\"#L391\">391</a></th><td>\u00a0 public YourLibrary(PApplet parent) {</td></tr><tr><th id=\"L392\"><a href=\"#L392\">392</a></th><td>\u00a0 \u00a0 // your library init code here...</td></tr><tr><th id=\"L393\"><a href=\"#L393\">393</a></th><td></td></tr><tr><th id=\"L394\"><a href=\"#L394\">394</a></th><td>\u00a0 \u00a0 // check to see if the host applet implements</td></tr><tr><th id=\"L395\"><a href=\"#L395\">395</a></th><td>\u00a0 \u00a0 // public void fancyEvent(FancyLibrary f)</td></tr><tr><th id=\"L396\"><a href=\"#L396\">396</a></th><td>\u00a0 \u00a0 try {</td></tr><tr><th id=\"L397\"><a href=\"#L397\">397</a></th><td>\u00a0 \u00a0 \u00a0 fancyEventMethod =</td></tr><tr><th id=\"L398\"><a href=\"#L398\">398</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 parent.getClass().getMethod(\"fancyEvent\",</td></tr><tr><th id=\"L399\"><a href=\"#L399\">399</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Class[] { FancyLibrary.class });</td></tr><tr><th id=\"L400\"><a href=\"#L400\">400</a></th><td>\u00a0 \u00a0 } catch (Exception e) {</td></tr><tr><th id=\"L401\"><a href=\"#L401\">401</a></th><td>\u00a0 \u00a0 \u00a0 // no such method, or an error.. which is fine, just ignore</td></tr><tr><th id=\"L402\"><a href=\"#L402\">402</a></th><td>\u00a0 \u00a0 }</td></tr><tr><th id=\"L403\"><a href=\"#L403\">403</a></th><td>\u00a0 }</td></tr><tr><th id=\"L404\"><a href=\"#L404\">404</a></th><td></td></tr><tr><th id=\"L405\"><a href=\"#L405\">405</a></th><td>\u00a0 // then later, to fire that event</td></tr><tr><th id=\"L406\"><a href=\"#L406\">406</a></th><td>\u00a0 public void makeEvent() {</td></tr><tr><th id=\"L407\"><a href=\"#L407\">407</a></th><td>\u00a0 \u00a0 if (fancyEventMethod != null) {</td></tr><tr><th id=\"L408\"><a href=\"#L408\">408</a></th><td>\u00a0 \u00a0 try {</td></tr><tr><th id=\"L409\"><a href=\"#L409\">409</a></th><td>\u00a0 \u00a0 \u00a0 fancyEventMethod.invoke(parent, new Object[] { this });</td></tr><tr><th id=\"L410\"><a href=\"#L410\">410</a></th><td>\u00a0 \u00a0 } catch (Exception e) {</td></tr><tr><th id=\"L411\"><a href=\"#L411\">411</a></th><td>\u00a0 \u00a0 \u00a0 System.err.println(\"Disabling fancyEvent() for \" + name +</td></tr><tr><th id=\"L412\"><a href=\"#L412\">412</a></th><td>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\" because of an error.\");</td></tr><tr><th id=\"L413\"><a href=\"#L413\">413</a></th><td>\u00a0 \u00a0 \u00a0 e.printStackTrace();</td></tr><tr><th id=\"L414\"><a href=\"#L414\">414</a></th><td>\u00a0 \u00a0 \u00a0 fancyEventMethod = null;</td></tr><tr><th id=\"L415\"><a href=\"#L415\">415</a></th><td>\u00a0 \u00a0 }</td></tr><tr><th id=\"L416\"><a href=\"#L416\">416</a></th><td>\u00a0 }</td></tr><tr><th id=\"L417\"><a href=\"#L417\">417</a></th><td>}</td></tr><tr><th id=\"L418\"><a href=\"#L418\">418</a></th><td></td></tr><tr><th id=\"L419\"><a href=\"#L419\">419</a></th><td></td></tr><tr><th id=\"L420\"><a href=\"#L420\">420</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L421\"><a href=\"#L421\">421</a></th><td></td></tr><tr><th id=\"L422\"><a href=\"#L422\">422</a></th><td></td></tr><tr><th id=\"L423\"><a href=\"#L423\">423</a></th><td>Using built-in functions from processing.core</td></tr><tr><th id=\"L424\"><a href=\"#L424\">424</a></th><td></td></tr><tr><th id=\"L425\"><a href=\"#L425\">425</a></th><td>Many methods in PApplet are made static for use by other libraries</td></tr><tr><th id=\"L426\"><a href=\"#L426\">426</a></th><td>and code that interfaces with Processing. For instance, openStream()</td></tr><tr><th id=\"L427\"><a href=\"#L427\">427</a></th><td>requires an applet object, but loadStrings() is a static method </td></tr><tr><th id=\"L428\"><a href=\"#L428\">428</a></th><td>that can be run on any InputStream. See the developer's reference</td></tr><tr><th id=\"L429\"><a href=\"#L429\">429</a></th><td>for more information about which methods are available.</td></tr><tr><th id=\"L430\"><a href=\"#L430\">430</a></th><td></td></tr><tr><th id=\"L431\"><a href=\"#L431\">431</a></th><td></td></tr><tr><th id=\"L432\"><a href=\"#L432\">432</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L433\"><a href=\"#L433\">433</a></th><td></td></tr><tr><th id=\"L434\"><a href=\"#L434\">434</a></th><td></td></tr><tr><th id=\"L435\"><a href=\"#L435\">435</a></th><td>Accessing files from inside a library</td></tr><tr><th id=\"L436\"><a href=\"#L436\">436</a></th><td></td></tr><tr><th id=\"L437\"><a href=\"#L437\">437</a></th><td>To open files for use with a library, use the openStream() method.</td></tr><tr><th id=\"L438\"><a href=\"#L438\">438</a></th><td>This is the most compatible means for loading data, and makes use</td></tr><tr><th id=\"L439\"><a href=\"#L439\">439</a></th><td>of many hours of headaches that were the result of attempts to </td></tr><tr><th id=\"L440\"><a href=\"#L440\">440</a></th><td>create functions that loaded data across platforms (Mac, Windows, </td></tr><tr><th id=\"L441\"><a href=\"#L441\">441</a></th><td>and Linux) and circumstances (applet, application, and other). </td></tr><tr><th id=\"L442\"><a href=\"#L442\">442</a></th><td></td></tr><tr><th id=\"L443\"><a href=\"#L443\">443</a></th><td>The functions sketchPath(), savePath(), dataPath(), and createPath()</td></tr><tr><th id=\"L444\"><a href=\"#L444\">444</a></th><td>all facilitate reading and writing files relative to the sketch </td></tr><tr><th id=\"L445\"><a href=\"#L445\">445</a></th><td>folder. They should be used to ensure that file I/O works consistently</td></tr><tr><th id=\"L446\"><a href=\"#L446\">446</a></th><td>between your library and functions like loadImage() or loadStrings().</td></tr><tr><th id=\"L447\"><a href=\"#L447\">447</a></th><td>Their documentation can be seen in the online javadoc reference found</td></tr><tr><th id=\"L448\"><a href=\"#L448\">448</a></th><td>on dev.processing.org. The variable sketchPath is available for</td></tr><tr><th id=\"L449\"><a href=\"#L449\">449</a></th><td>convenience, but in nearly all cases, the sketchPath() method is</td></tr><tr><th id=\"L450\"><a href=\"#L450\">450</a></th><td>a better (and more compatible) route.</td></tr><tr><th id=\"L451\"><a href=\"#L451\">451</a></th><td></td></tr><tr><th id=\"L452\"><a href=\"#L452\">452</a></th><td>The xxxxPath() functions were finalized in revision 0096.</td></tr><tr><th id=\"L453\"><a href=\"#L453\">453</a></th><td></td></tr><tr><th id=\"L454\"><a href=\"#L454\">454</a></th><td></td></tr><tr><th id=\"L455\"><a href=\"#L455\">455</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L456\"><a href=\"#L456\">456</a></th><td></td></tr><tr><th id=\"L457\"><a href=\"#L457\">457</a></th><td></td></tr><tr><th id=\"L458\"><a href=\"#L458\">458</a></th><td>Library Naming Rules</td></tr><tr><th id=\"L459\"><a href=\"#L459\">459</a></th><td></td></tr><tr><th id=\"L460\"><a href=\"#L460\">460</a></th><td>Libraries, or classes inside them, should not be prefixed with \"P\" </td></tr><tr><th id=\"L461\"><a href=\"#L461\">461</a></th><td>the way that the core Processing classes are (PImage, PGraphics, etc).</td></tr><tr><th id=\"L462\"><a href=\"#L462\">462</a></th><td>It's tempting to prefix everything that way to identify it with </td></tr><tr><th id=\"L463\"><a href=\"#L463\">463</a></th><td>Processing, but we'd like to reserve that naming for \"official\" </td></tr><tr><th id=\"L464\"><a href=\"#L464\">464</a></th><td>things that are inside processing.core and other associated classes.</td></tr><tr><th id=\"L465\"><a href=\"#L465\">465</a></th><td></td></tr><tr><th id=\"L466\"><a href=\"#L466\">466</a></th><td>Same goes for using \"Processing\", \"Pro\", or \"P5\" just like \"P\", </td></tr><tr><th id=\"L467\"><a href=\"#L467\">467</a></th><td>or whether it's a prefix or a suffix. </td></tr><tr><th id=\"L468\"><a href=\"#L468\">468</a></th><td></td></tr><tr><th id=\"L469\"><a href=\"#L469\">469</a></th><td>Similarly, please don't using processing.* as the prefix for your</td></tr><tr><th id=\"L470\"><a href=\"#L470\">470</a></th><td>library packages. We'd like to keep that name space clear for </td></tr><tr><th id=\"L471\"><a href=\"#L471\">471</a></th><td>official things as well.</td></tr><tr><th id=\"L472\"><a href=\"#L472\">472</a></th><td></td></tr><tr><th id=\"L473\"><a href=\"#L473\">473</a></th><td></td></tr><tr><th id=\"L474\"><a href=\"#L474\">474</a></th><td>//////////////////////////////////////////////////////////////</td></tr><tr><th id=\"L475\"><a href=\"#L475\">475</a></th><td></td></tr><tr><th id=\"L476\"><a href=\"#L476\">476</a></th><td></td></tr><tr><th id=\"L477\"><a href=\"#L477\">477</a></th><td>Ben Fry, Last updated 26 June 2006</td></tr></tbody></table>\n\n      </div>\n      <div id=\"anydiff\">\n        <form action=\"/LUCICodeRepository/nomaticIM/diff\" method=\"get\">\n          <div class=\"buttons\">\n            <input type=\"hidden\" name=\"new_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\" />\n            <input type=\"hidden\" name=\"old_path\" value=\"/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\" />\n            <input type=\"hidden\" name=\"new_rev\" />\n            <input type=\"hidden\" name=\"old_rev\" />\n            <input type=\"submit\" value=\"View changes...\" title=\"Select paths and revs for Diff\" />\n          </div>\n        </form>\n      </div>\n      <div id=\"help\"><strong>Note:</strong> See <a href=\"/LUCICodeRepository/nomaticIM/wiki/TracBrowser\">TracBrowser</a>\n        for help on using the repository browser.</div>\n    </div>\n    <div id=\"altlinks\">\n      <h3>Download in other formats:</h3>\n      <ul>\n        <li class=\"first\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/browser/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt?format=txt\">Plain Text</a>\n        </li><li class=\"last\">\n          <a rel=\"nofollow\" href=\"/LUCICodeRepository/nomaticIM/export/1312/nomatic/tags/NomaticIM-0.0.5/processing/libraries/howto.txt\">Original Format</a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    <div id=\"footer\" lang=\"en\" xml:lang=\"en\"><hr />\n      <a id=\"tracpowered\" href=\"http://trac.edgewall.org/\"><img src=\"/LUCICodeRepository/nomaticIM/chrome/common/trac_logo_mini.png\" height=\"30\" width=\"107\" alt=\"Trac Powered\" /></a>\n      <p class=\"left\">Powered by <a href=\"/LUCICodeRepository/nomaticIM/about\"><strong>Trac 1.0.1</strong></a><br />\n        By <a href=\"http://www.edgewall.org/\">Edgewall Software</a>.</p>\n      <p class=\"right\">All content copyright 2007-2008 by LUCI <br /><a href=\"http://luci.ics.uci.edu/\">http://luci.ics.uci.edu/</a></p>\n    </div>\n\t\t<div id=\"sitefooter\">\n\t\t\t<script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\">\n\t\t\t</script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t_uacct = \"UA-338915-2\";\n\t\t\t\turchinTracker();\n\t\t\t</script>\n\t\t</div>\n\t</body>\n</html>", "id": 41993.0}