{"text": "ICS 45C Fall 2 14 News Course Reference Schedule Project Guide Code Examples About Alex ICS 45C Fall 2 14 Project 1 Stay Faraway So Close Due date and time Monday October 27 11 59pm Background Like many things that have been automated in recent decades most of us no longer use maps printed on paper when we want to get from one place to another Instead maps exist online in a searchable form and GPS systems can help us to track our physical position as we move around Software then can automatically tell us the shortest route between two locations track our position along that route and indicate how we should proceed along the way Air travel is similarly automated though of course the restriction that one should drive only on existing roads is lifted aircraft can follow something more akin to a straight line route from one place to another except to the extent that they are required to follow certain regulations such as staying out of airspace in which they re not permitted e g directly over the White House or crossing an international border without permission and maintaining a safe distance from one another At the core of any kind of automation like this lies the ability to determine one s current position on the surface of the Earth There has long existed a way to described such a position using latitude and longitude For example if we wanted to calculate the distance along a direct route from Los Angeles International Airport and Kahului Airport in Hawaii we would need to know two things 1 the latitude and longitude of each of these airports and 2 a formula for calculating a distance given those latitudes and longitudes This project asks you to explore this problem a bit by implementing a program that calculates distances between locations on the surface of the Earth Along the way you ll gain some experience using the C Standard Library discovering how to use some of its functions by reading their documentation and writing C programs comprised of multiple source files I fully expect that this is a program that everyone in this course is quite capable of writing but the goal here is to embrace good techniques so how you solve the problem will be at least as important as whether you solve it Getting started Before you begin work on this project there are a couple of chores you ll need to complete on your ICS 45C VM to get it set up to proceed Refreshing your ICS 45C VM environment Even if you previously downloaded your ICS 45C VM you may need to refresh its environment before proceeding with this project Log into your VM and issue the shell command ics45c version to see what version of the ICS 45C environment you currently have stored on your VM Note in particular the timestamp if you see a version with a timestamp older than the one listed below you ll want to refresh your environment by running the command ics45c refresh to download the latest one before you proceed with this project 2 14 1 17 51 1 Template for Project 1 added Creating your project directory on your ICS 45C VM A project template has been created specifically for this project Though it is largely identical to the basic template there are a few minor things that change from one to another such as the name of the file generated by the gather script Do use the project1 template for this project as opposed to the basic one Decide on a name for your project directory then issue the command ics45c start project YOUR CHOSEN PROJECT NAME project1 to create your new project directory using the project1 template For example if you wanted to call your project directory proj1 you would issue the command ics45c start project proj1 project1 to create it Now you re ready to proceed The program Your program will read the following input from the console i e from std cin The first line of the input describes a starting location from which you ll determine distances to other locations The second line of the input specifies a positive number of target locations to which you ll determine distances from the starting location Subsequent lines will describe each target location with one target location specified on each line You can safely assume that the number of target locations described in the input will match the number specified on the second line Locations are specified as a latitude followed by a space followed by a longitude followed by a space followed by the name of the location The name of the location is all of the text on the line that follows the space after the longitude Latitudes are specified as a non negative decimal number of degrees between and 9 followed immediately by a slash followed immediately by a direction N for north or S for south Longitudes are specified as a non negative decimal number of degrees between and 18 followed immediately by a slash followed immediately by a direction W for west or E for east Note that the longitudes 18 W and 18 E are equivalent It s safe to assume that you ll always be given input in the format described above you are not required to detect erroneous input and report errors and it s fine if you re program handles incorrect input in any way you d like up to and including your program crashing Your program will determine which of the target locations is closest to i e the smallest number of miles away from the start location as well as the which target location is farthest i e the largest number of miles away from the start location After reading all of the input and determining the closest and farthest location your program will write the following output to the console i e std cout The words Start Location followed by a colon and a space followed by the start location s latitude followed by a space folloewd by the start location s longitude followed by a space followed by the name of the start location in parentheses The words Closest Location followed by a colon and a space followed by the closest location s latitude followed by a space followed by the closest location s longitude followed by a space followed by the name of the closest location in parentheses followed by a space followed by the distance from the start location to the closest location in miles surrounded by parentheses The words Farthest Location followed by a colon and space followed by a description of the farthest location in the same format as the closest one It s not important to limit your output to a particular number of decimal places feel free to output whatever C writes to the output by default though you should note that latitudes longitudes and distances are intended to be numbers with fractional parts i e they are not integers An example of the program s execution The following is an example of the program s execution as it should appear in the console Boldfaced italicized text indicates input while normal text indicates ouptut 33 9425 N 118 4 81 W Los Angeles International Airport 3 2 8987 N 156 43 5 W Kahului Airport 47 4647 N 8 5492 E Zurich Airport 23 4356 S 46 4731 W Sao Paolo Guarulhos International Airport Start Location 33 9425 N 118 4 8 W Los Angeles International Airport Closest Location 2 8987 N 156 43 W Kahului Airport 2483 3 miles Farthest Location 23 4356 S 46 4731 W Sao Paolo Guarulhos International Airport 6164 9 miles Notice again that there are no prompts or other ouptut other than the output that is required as specified above This may seem strange but it s safe to assume that this program is not ultimately intended to have a human user we ll be running automated tests against it so welcome prompts etc will get in the way of us determining whether your program is correct Also you may get output that differs in the number of digits after decimal places in general that s fine so long as all of your output is within 1 of what we expect in every case which is more than enough of a buffer to account for inaccuracies introduced by the use of floating point types like float or double And for what it s worth the output above is correct if you re getting significantly different answers particularly for the distances between airports it means that your formulas or your implementation are incorrect Determining the distances between locations The fundamental operation your program needs is to be able to determine the distance between two locations on Earth Before you can do that though we first need to agree on what is meant by distance The Earth is more or less spherical and a particular location i e a latitude and longitude specifies a point somewhere on its surface When we consider the distance between two such locations there are two ways to think about it A straight line traveling through the interior of the sphere with the two locations as the endpoints of the line We might call this the straight line distance between the locations The shortest arc that travels along the surface of the sphere that has the two locations as the endpoints of the arc The length of such an arc is called the great circle distance between the two locations As is often the case there s a tension between what s easier to implement and what s actually required The straight line distance would presumably be simpler to calculate but if our goal is to calculate distances that people might travel it s a misleading answer it assumes that people travel from one location on Earth to another by boring a hole in the Earth The great circle distance makes a lot more sense when we consider the distances between locations on Earth because people would tend to travel either along the Earth s surface e g in a car or roughly parallel to it e g in an airplane So when calculating the distance between two locations your program s goal is to calculate the great circle distance between them Understanding your problem domain Before you get too much farther if you don t know about how the latitude and longitude system works don t feel bad if you don t but you do need to understand this in order to solve this problem take a look at the section titled Geographic latitude and longitude at this Wikipedia link In particular note the limits on allowable latitudes and longitudes and on the difference between North and South latitude and between West and East longitude A formula for calculating great circle distance Mathematics provides us with multiple formulas for solving a problem like this Some of these are a better fit for a computer program than others Since we re dealing with circles arcs and angles it s reasonable to expect that trigonometric functions would be involved as we ll see C contains a collection of built in trigonometric functions in its Standard Library so these will be no problem to incorporate in your program Different computational formulas for approximating these distances will give slightly different results so we ll need to agree on one particular formula We ll use a formula called the haversine formula which gives a reasonably precise result even for relatively small distances An algorithm for calculating the haversine formula not written in any particular programming language follows let lat1 be the latitude of the first location let lat2 be the latitude of the second location let lon1 be the longitude of the first location let lon2 be the longitude of the second location let dlat be the difference in latitudes between the locations let dlon be the difference in longitudes between the locations let a sin2 dlat 2 cos lat1 cos lat2 sin2 dlon 2 let c 2 atan2 sqrt a sqrt 1 a let d R c R in this part of the formula is the radius of the Earth At the conclusion of the algorithm d is the great circle distance between the two locations Just to be clear in the formula above sin is the trigonometric function sine cos is the trigonometric function cosine atan2 y x is the arc tangent of y x and sqrt means square root What is the radius of the Earth Since we re measuring our distances in miles we ll need to know the Earth s radius measured in miles It turns out that the Earth isn t quite spherical meaning that the radius as measured by the distance from the center of the Earth to a particular location the Earth s surface isn t quite the same from one location to another To keep things simple though we ll have to use an approximation ours will be 3 959 9 miles Organizing your program One of the hallmarks of well written software is what is sometimes called separation of concerns the principle that you should handle separate issues in separate parts of a program rather than munging everything together into fewer larger more complex functions Given your background in programming from previous coursework even a program as seemingly simple sounding as this one is one you should be reflexively approaching by dividing it up whether you re explicitly asked to or not I imagine you ve already developed the ability to work incrementally and test the individual pieces However just to be clear there are some design requirements here In general functions should be relatively short each having a single job with the functions names and the names of their parameters clearly and succintly describing their purpose Source files too should be reasonably self contained with what software engineers called high cohesion i e the things defined within a source file are strongly related to each one and low coupling i e different source files depend on as few details as possible of the others While there is not one particular design that we re requiring we will be grading partly on your ability to cleanly divide the problem into separate functions and we would expect to see multiple source files each with a header file that declares the things that are public i e the things you would reasonably expect other source files to use while keeping other details hidden It s possible to write this program as a single main function but you should be aware that a solution like that will be viewed unfavorably you will likely get a much lower score on this project than you might expect if you go that route As in real world software development your goal is not just to write programs that work but to write programs well and that includes style and organization Using the C Standard Library Some of the things you ll need to implement in this project are not part of the C language but are instead part of its standard library There are at least three standard headers you ll need in some parts of your program The mathematical operations you ll need trigonometric functions calculating square roots etc are declared in the standard header cmath The I O operations you ll need when you want to read console input or write console output are declared in the standard header iostream When you want to represent strings in C the simplest way is to use the type std string which is declared in the standard header string You may find the need for others but I d expect any solution to require at least those three Where to find documentation on the C Standard Library Other than the document describing the C standard there is no official central repository of searchable documentation on the C Standard Library as you would find for languages like Python or Java However one very good set of documentation is maintained at cppreference com There are others too though I ve found that they generally are less complete or more annoying e g by serving up advertisements Being sure to use C and not C This is a course that decidedly focuses on C instead of C but it s important to note that our compiler Clang is capable of compiling both C and C so it includes both the C and C standard libraries This introduces a bit of an issue as some of what s in the C Standard Library also appears in C s library If you re not careful especially if you seek advice online you may find yourself using the C library instead of the C one In the context of this project there are a couple of things to watch out for The C Standard Library includes a standard header math h which includes many of the same functions as appear in the C standard header cmath However the C standard header declares the functions a bit differently notably they include std in their names so for example the function to calculate a sqrt is std sqrt Be sure you re using cmath and not math h In general an easy way to tell the difference between standard C headers and standard C headers is that C headers have names that end in h while C headers have no extension on their names at all The C language doesn t have a std string type Instead it represents strings in a much more difficult to use way as pointers to arrays of characters In this course we ll prefer std string though there will occasionally be times when we have to use C style strings I ll point out the need when it arises but for now you should be using std string Deliverables After using the gather script in your project directory to gather up your C source and header files into a single project1 tar gz file as you did in Project submit that file and only that file to Checkmate Refer back to Project if you need instructions on how to do that Follow this link for a discussion of how to submit your project via Checkmate Be aware that I ll be holding you to all of the rules specified in that document including the one that says that you re responsible for submitting the version of the project that you want graded We won t regrade a project simply because you submitted the wrong version accidentally It s not a bad idea to look at the contents of your tarball on your host operating system before submitting it Can I submit after the deadline Yes it is possible subject to the late work policy for this course which is described in the section titled Late work at this link Cleaned up and tweaked by Alex Thornton Winter 2 14 Originally written by Alex Thornton Fall 2 13 ", "_id": "http://www.ics.uci.edu/~thornton/ics45c/ProjectGuide/Project1/", "title": "ics 45c fall 2014, project #1: stay (faraway, so close!)", "html": "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC\r\n \"-//W3C//DTD XHTML 1.1//EN\"\r\n \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n\r\n<head>\r\n<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\" />\r\n<link rel=\"stylesheet\" href=\"../../course.css\" type=\"text/css\" />\r\n\r\n<title>ICS 45C Fall 2014, Project #1: Stay (Faraway, So Close!)</title>\r\n</head>\r\n\r\n<body>\r\n\r\n<div class=\"navbar\">\r\n\r\n<p>\r\nICS 45C Fall 2014 |\r\n<a href=\"../../index.html\">News</a> |\r\n<a href=\"../../CourseReference.html\">Course Reference</a> |\r\n<a href=\"../../Schedule.html\">Schedule</a> |\r\n<a href=\"../../ProjectGuide\">Project Guide</a> |\r\n<a href=\"../../CodeExamples\">Code Examples</a> |\r\n<a href=\"http://www.ics.uci.edu/~thornton/\">About Alex</a>\r\n</p>\r\n\r\n<hr />\r\n\r\n</div>\r\n\r\n<div class=\"header\">\r\n\r\n<p>ICS 45C Fall 2014<br />\r\n   Project #1: <i>Stay (Faraway, So Close!)</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<p class=\"center\"><b>Due date and time:</b> <i>Monday, October 27, 11:59pm</i></p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Background</p>\r\n\r\n<p>Like many things that have been automated in recent decades, most of us no longer use maps printed on paper when we want to get from one place to another.  Instead, maps exist online in a searchable form, and GPS systems can help us to track our physical position as we move around.  Software then can automatically tell us the shortest route between two locations, track our position along that route, and indicate how we should proceed along the way.  Air travel is similarly automated, though, of course, the restriction that one should drive only on existing roads is lifted; aircraft can follow something more akin to a \"straight-line\" route from one place to another, except to the extent that they are required to follow certain regulations, such as staying out of airspace in which they're not permitted (e.g., directly over the White House or crossing an international border without permission) and maintaining a safe distance from one another.</p>\r\n\r\n<p>At the core of any kind of automation like this lies the ability to determine one's current position on the surface of the Earth.  There has long existed a way to described such a position, using <i>latitude</i> and <i>longitude</i>.  For example, if we wanted to calculate the distance along a direct route from Los Angeles International Airport and Kahului Airport in Hawaii, we would need to know two things: (1) the latitude and longitude of each of these airports, and (2) a formula for calculating a distance given those latitudes and longitudes.</p>\r\n\r\n<p>This project asks you to explore this problem a bit, by implementing a program that calculates distances between locations on the surface of the Earth.  Along the way, you'll gain some experience using the C++ Standard Library, discovering how to use some of its functions by reading their documentation, and writing C++ programs comprised of multiple source files.  I fully expect that this is a program that everyone in this course is quite capable of writing, but the goal here is to embrace good techniques, so <i>how</i> you solve the problem will be at least as important as <i>whether</i> you solve it.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Getting started</p>\r\n\r\n<p>Before you begin work on this project, there are a couple of chores you'll need to complete on your ICS 45C VM to get it set up to proceed.</p>\r\n\r\n<p class=\"subtitle\">Refreshing your ICS 45C VM environment</p>\r\n\r\n<p>Even if you previously downloaded your ICS 45C VM, you may need to refresh its environment before proceeding with this project.  Log into your VM and issue the shell command <b>ics45c version</b> to see what version of the ICS 45C environment you currently have stored on your VM.  Note, in particular, the timestamp; if you see a version with a timestamp older than the one listed below, you'll want to refresh your environment by running the command <b>ics45c refresh</b> to download the latest one before you proceed with this project.</p>\r\n\r\n<blockquote><pre>\r\n2014-10-17 00:51:10\r\nTemplate for Project #1 added\r\n</pre></blockquote>\r\n\r\n<p class=\"subtitle\">Creating your project directory on your ICS 45C VM</p>\r\n\r\n<p>A project template has been created specifically for this project.  Though it is largely identical to the <b>basic</b> template, there are a few minor things that change from one to another (such as the name of the file generated by the <b>gather</b> script).  Do use the <b>project1</b> template for this project, as opposed to the <b>basic</b> one.</p>\r\n\r\n<p>Decide on a name for your project directory, then issue the command <b>ics45c start_project <i>YOUR_CHOSEN_PROJECT_NAME</i> project1</b> to create your new project directory using the <b>project1</b> template.  (For example, if you wanted to call your project directory <b>proj1</b>, you would issue the command <b>ics45c start_project proj1 project1</b> to create it.)  Now you're ready to proceed!</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">The program</p>\r\n\r\n<p>Your program will read the following input from the console (i.e., from <b>std::cin</b>):</p>\r\n\r\n<ul>\r\n  <li>The first line of the input describes a <i>starting location</i>, from which you'll determine distances to other locations.</li>\r\n  <li>The second line of the input specifies a positive number of <i>target locations</i> to which you'll determine distances from the starting location.</li>\r\n  <li>Subsequent lines will describe each target location, with one target location specified on each line.  You can safely assume that the number of target locations described in the input will match the number specified on the second line.</li>\r\n  <li>Locations are specified as a latitude, followed by a space, followed by a longitude, followed by a space, followed by the name of the location.  The name of the location is all of the text on the line that follows the space after the longitude.</li>\r\n  <li>Latitudes are specified as a non-negative decimal number of degrees between 0 and 90, followed immediately by a slash, followed immediately by a direction (<b>N</b> for north or <b>S</b> for south).</li>\r\n  <li>Longitudes are specified as a non-negative decimal number of degrees between 0 and 180, followed immediately by a slash, followed immediately by a direction (<b>W</b> for west or <b>E</b> for east).  Note that the longitudes <b>180/W</b> and <b>180/E</b> are equivalent.</li>\r\n</ul>\r\n\r\n<p>It's safe to assume that you'll always be given input in the format described above; you are not required to detect erroneous input and report errors, and it's fine if you're program handles incorrect input in any way you'd like, up to and including your program crashing.</p>\r\n\r\n<p>Your program will determine which of the target locations is closest to (i.e., the smallest number of miles away from) the start location, as well as the which target location is farthest (i.e., the largest number of miles away from) the start location.</p>\r\n\r\n<p>After reading all of the input and determining the closest and farthest location, your program will write the following output to the console (i.e., <b>std::cout</b>):</p>\r\n\r\n<ul>\r\n  <li>The words <b>Start Location</b>, followed by a colon and a space, followed by the start location's latitude, followed by a space, folloewd by the start location's longitude, followed by a space, followed by the name of the start location in parentheses.</li>\r\n  <li>The words <b>Closest Location</b>, followed by a colon and a space, followed by the closest location's latitude, followed by a space, followed by the closest location's longitude, followed by a space, followed by the name of the closest location in parentheses, followed by a space, followed by the distance from the start location to the closest location in miles (surrounded by parentheses).</li>\r\n  <li>The words <b>Farthest Location</b>, followed by a colon and space, followed by a description of the farthest location in the same format as the closest one.</li>\r\n</ul>\r\n\r\n<p>It's not important to limit your output to a particular number of decimal places; feel free to output whatever C++ writes to the output by default, though you should note that latitudes, longitudes, and distances are intended to be numbers with fractional parts (i.e., they are not integers).</p>\r\n\r\n<p class=\"subtitle\">An example of the program's execution</p>\r\n\r\n<p>The following is an example of the program's execution, as it should appear in the console.  Boldfaced, italicized text indicates input, while normal text indicates ouptut.</p>\r\n\r\n<blockquote><pre>\r\n<b><i>33.9425/N 118.4081/W Los Angeles International Airport</i></b>\r\n<b><i>3</i></b>\r\n<b><i>20.8987/N 156.4305/W Kahului Airport</i></b>\r\n<b><i>47.4647/N 8.5492/E Zurich Airport</i></b>\r\n<b><i>23.4356/S 46.4731/W Sao Paolo-Guarulhos International Airport</i></b>\r\nStart Location: 33.9425/N 118.408/W (Los Angeles International Airport)\r\nClosest Location: 20.8987/N 156.43/W (Kahului Airport) (2483.3 miles)\r\nFarthest Location: 23.4356/S 46.4731/W (Sao Paolo-Guarulhos International Airport) (6164.9 miles)\r\n</pre></blockquote>\r\n\r\n<p>Notice, again, that there are no prompts or other ouptut, other than the output that is required as specified above.  This may seem strange, but it's safe to assume that this program is not ultimately intended to have a human user; we'll be running automated tests against it, so welcome prompts, etc., will get in the way of us determining whether your program is correct.</p>\r\n\r\n<p>Also, you may get output that differs in the number of digits after decimal places; in general, that's fine, so long as all of your output is within 0.1% of what we expect in every case (which is more than enough of a buffer to account for inaccuracies introduced by the use of floating-point types like <b>float</b> or <b>double</b>).</p>\r\n\r\n<p>(And, for what it's worth, the output above is correct; if you're getting significantly different answers, particularly for the distances between airports, it means that your formulas or your implementation are incorrect.)</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Determining the distances between locations</p>\r\n\r\n<p>The fundamental operation your program needs is to be able to determine the distance between two locations on Earth.  Before you can do that, though, we first need to agree on what is meant by \"distance.\"  The Earth is (more or less) spherical and a particular location (i.e., a latitude and longitude) specifies a point somewhere on its surface.  When we consider the distance between two such locations, there are two ways to think about it:</p>\r\n\r\n<ul>\r\n  <li>A straight line traveling through the interior of the sphere, with the two locations as the endpoints of the line.  We might call this the <i>straight-line distance</i> between the locations.</li>\r\n  <li>The shortest arc that travels along the surface of the sphere that has the two locations as the endpoints of the arc.  The length of such an arc is called the <i>great-circle distance</i> between the two locations.</li>\r\n</ul>\r\n\r\n<p>As is often the case, there's a tension between what's easier to implement and what's actually required.  The straight-line distance would presumably be simpler to calculate, but if our goal is to calculate distances that people might travel, it's a misleading answer &mdash; it assumes that people travel from one location on Earth to another by boring a hole in the Earth!  The great-circle distance makes a lot more sense when we consider the distances between locations on Earth, because people would tend to travel either along the Earth's surface (e.g., in a car) or roughly parallel to it (e.g., in an airplane).</p>\r\n\r\n<p>So, when calculating the distance between two locations, your program's goal is to calculate the great-circle distance between them.</p>\r\n\r\n<p class=\"subtitle\">Understanding your problem domain</p>\r\n\r\n<p>Before you get too much farther, if you don't know about how the latitude and longitude system works &mdash; don't feel bad if you don't, but you do need to understand this in order to solve this problem! &mdash; take a look at the section titled <i>Geographic latitude and longitude</i> at this <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_system\">Wikipedia link</a>.  In particular, note the limits on allowable latitudes and longitudes <i>and</i> on the difference between North and South latitude and between West and East longitude.</p>\r\n\r\n<p class=\"subtitle\">A formula for calculating great-circle distance</p>\r\n\r\n<p>Mathematics provides us with multiple formulas for solving a problem like this.  Some of these are a better fit for a computer program than others.  Since we're dealing with circles, arcs, and angles, it's reasonable to expect that trigonometric functions would be involved; as we'll see, C++ contains a collection of built-in trigonometric functions in its Standard Library, so these will be no problem to incorporate in your program.</p>\r\n\r\n<p>Different computational formulas for approximating these distances will give slightly different results, so we'll need to agree on one particular formula.  We'll use a formula called the <i>haversine formula</i>, which gives a reasonably precise result even for relatively small distances.  An algorithm for calculating the haversine formula, not written in any particular programming language, follows:</p>\r\n\r\n<blockquote><pre>\r\nlet lat1 be the latitude of the first location\r\nlet lat2 be the latitude of the second location\r\nlet lon1 be the longitude of the first location\r\nlet lon2 be the longitude of the second location\r\nlet dlat be the difference in latitudes between the locations\r\nlet dlon be the difference in longitudes between the locations\r\nlet a = sin<sup><small>2</small></sup>(dlat/2) + cos(lat1) * cos(lat2) * sin<sup><small>2</small></sup>(dlon/2)\r\nlet c = 2 * atan2(sqrt(a), sqrt(1 - a))\r\nlet d = R * c        <i>R, in this part of the formula, is the radius of the Earth</i>\r\n</pre></blockquote>\r\n\r\n<p>At the conclusion of the algorithm, <i>d</i> is the great-circle distance between the two locations.</p>\r\n\r\n<p>(Just to be clear, in the formula above, <b>sin</b> is the trigonometric function sine, <b>cos</b> is the trigonometric function cosine, <b>atan2(<i>y</i>, <i>x</i>)</b> is the arc tangent of <i>y</i>/<i>x</i>, and <b>sqrt</b> means \"square root.\")</p>\r\n\r\n<p class=\"subtitle\">What is the radius of the Earth?</p>\r\n\r\n<p>Since we're measuring our distances in miles, we'll need to know the Earth's radius measured in miles.  It turns out that the Earth isn't quite spherical, meaning that the radius (as measured by the distance from the center of the Earth to a particular location the Earth's surface) isn't quite the same from one location to another.  To keep things simple, though, we'll have to use an approximation; ours will be <i>3,959.9 miles</i>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Organizing your program</p>\r\n\r\n<p>One of the hallmarks of well-written software is what is sometimes called <i>separation of concerns</i>, the principle that you should handle separate issues in separate parts of a program, rather than munging everything together into fewer, larger, more complex functions.  Given your background in programming from previous coursework, even a program as seemingly simple-sounding as this one is one you should be reflexively approaching by dividing it up, whether you're explicitly asked to or not; I imagine you've already developed the ability to work incrementally and test the individual pieces.  However, just to be clear, there are some design requirements here.</p>\r\n\r\n<p>In general, functions should be relatively short, each having a single job, with the functions' names (and the names of their parameters) clearly and succintly describing their purpose.  Source files, too, should be reasonably self-contained, with what software engineers called <i>high cohesion</i> (i.e., the things defined within a source file are strongly related to each one) and <i>low coupling</i> (i.e., different source files depend on as few details as possible of the others).</p>\r\n\r\n<p>While there is not one particular design that we're requiring, we will be grading partly on your ability to cleanly divide the problem into separate functions, and we would expect to see multiple source files, each with a header file that declares the things that are \"public\" (i.e., the things you would reasonably expect other source files to use), while keeping other details hidden.</p>\r\n\r\n<p>It's possible to write this program as a single <b>main()</b> function, but you should be aware that a solution like that will be viewed unfavorably; you will likely get a much lower score on this project than you might expect if you go that route.  As in real-world software development, your goal is not just to write programs that work, but to write programs <i>well</i>, and that includes style and organization.</p>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Using the C++ Standard Library</p>\r\n\r\n<p>Some of the things you'll need to implement in this project are not part of the C++ language, but are instead part of its standard library.  There are at least three standard headers you'll need in some parts of your program:</p>\r\n\r\n<ul>\r\n  <li>The mathematical operations you'll need &mdash; trigonometric functions, calculating square roots, etc. &mdash; are declared in the standard header <b>&lt;cmath&gt;</b>.</li>\r\n  <li>The I/O operations you'll need, when you want to read console input or write console output, are declared in the standard header <b>&lt;iostream&gt;</b>.</li>\r\n  <li>When you want to represent strings in C++, the simplest way is to use the type <b>std::string</b>, which is declared in the standard header <b>&lt;string&gt;</b>.</li>\r\n</ul>\r\n\r\n<p>You may find the need for others, but I'd expect any solution to require at least those three.</p>\r\n\r\n<p class=\"subtitle\">Where to find documentation on the C++ Standard Library</p>\r\n\r\n<p>Other than the document describing the C++ standard, there is no \"official\" central repository of searchable documentation on the C++ Standard Library, as you would find for languages like Python or Java.  However, one very good set of documentation is maintained at <a href=\"http://cppreference.com/\">cppreference.com</a>.  (There are others, too, though I've found that they generally are less complete or more annoying &mdash; e.g., by serving up advertisements.)</p>\r\n\r\n<p class=\"subtitle\">Being sure to use C++ and not C</p>\r\n\r\n<p>This is a course that decidedly focuses on C++ instead of C, but it's important to note that our compiler, Clang, is capable of compiling both C++ and C, so it includes both the C++ and C standard libraries.  This introduces a bit of an issue, as some of what's in the C++ Standard Library also appears in C's library.  If you're not careful &mdash; especially if you seek advice online &mdash; you may find yourself using the C library instead of the C++ one.</p>\r\n\r\n<p>In the context of this project, there are a couple of things to watch out for.</p>\r\n\r\n<ul>\r\n  <li>The C Standard Library includes a standard header <b>&lt;math.h&gt;</b>, which includes many of the same functions as appear in the C++ standard header <b>&lt;cmath&gt;</b>.  However, the C++ standard header declares the functions a bit differently &mdash; notably, they include <b>std::</b> in their names, so, for example, the function to calculate a sqrt is <b>std::sqrt</b>.  Be sure you're using <b>&lt;cmath&gt;</b> and not <b>&lt;math.h&gt;</b>.  (In general, an easy way to tell the difference between standard C++ headers and standard C headers is that C headers have names that end in <b>.h</b>, while C++ headers have no extension on their names at all.)</li>\r\n  <li>The C language doesn't have a <b>std::string</b> type.  Instead, it represents strings in a much more difficult-to-use way, as pointers to arrays of characters.  In this course, we'll prefer <b>std::string</b>, though there will occasionally be times when we have to use C-style strings; I'll point out the need when it arises, but, for now, you should be using <b>std::string</b>.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n<div class=\"section\">\r\n\r\n<hr />\r\n\r\n<p class=\"title\">Deliverables</p>\r\n\r\n<p>After using the <b>gather</b> script in your project directory to gather up your C++ source and header files into a single <b>project1.tar.gz</b> file (as you did in <a href=\"../Project0\">Project #0</a>, submit that file (and only that file!) to Checkmate.  Refer back to <a href=\"../Project0\">Project #0</a> if you need instructions on how to do that.</p>\r\n\r\n<p>Follow <a href=\"../SubmittingProjects.html\">this link</a> for a discussion of how to submit your project via Checkmate.  Be aware that I'll be holding you to all of the rules specified in that document, including the one that says that you're responsible for submitting the version of the project that you want graded.  We won't regrade a project simply because you submitted the wrong version accidentally.  (It's not a bad idea to look at the contents of your tarball on your host operating system before submitting it.)</p>\r\n\r\n<p class=\"subtitle\">Can I submit after the deadline?</p>\r\n\r\n<p>Yes, it is possible, subject to the late work policy for this course which is described in the section titled <i>Late work</i> at <a href=\"../index.html\">this link</a>.</p>\r\n\r\n</div>\r\n\r\n<div class=\"history\">\r\n\r\n<hr />\r\n\r\n<ul class=\"nomarker\">\r\n  <li>Cleaned up and tweaked by Alex Thornton, Winter 2014.</li>\r\n  <li>Originally written by Alex Thornton, Fall 2013.</li>\r\n</ul>\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n", "id": 2868.0}