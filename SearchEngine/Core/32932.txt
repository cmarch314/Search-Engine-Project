{"text": "View Javadoc 1 package swirl workspace 2 3 import java io InputStream 4 import java io OutputStream 5 import java util Iterator 6 import java util List 7 8 import javax servlet http HttpServletRequest 9 import javax servlet http HttpServletResponse 1 11 import org apache commons httpclient HttpMethod 12 import org apache commons logging Log 13 import org apache commons logging LogFactory 14 import org apache webdav lib methods XMLResponseMethodBase 15 import org dom4j DocumentException 16 import org dom4j Node 17 import org dom4j io DOMReader 18 import org dom4j io DOMWriter 19 import org w3c dom Document 2 21 import swirl workspace common DocumentLogger 22 import swirl workspace common NetUtils 23 24 25 Abstract base class for commands that proxy to only one peer All the child 26 has to do is implement createMethod to customize what to send and this 27 class will do the rest 28 29 author bpillet 3 31 public abstract class ProxyCommand extends BaseSwirlCommand 32 33 commons logging log that maps to this Command 34 private Log log LogFactory getLog this getClass 35 36 37 See super 38 39 param req see super 4 param resp see super 41 param host see super 42 param path see super 43 param peerManager see super 44 45 public ProxyCommand final HttpServletRequest req 46 final HttpServletResponse resp final String host 47 final String path final PeerManager peerManager 48 49 super req resp host path peerManager 5 51 52 53 Hook for subclasses to make this Command send a specific method 54 55 param url the url to the server 56 57 return an initialized HTTP Method 58 59 public abstract HttpMethod createMethod final String url 6 61 62 Figures out which peer to proxy to and sends them a request based on the 63 createMethod hook 64 65 return the status code from the server 66 67 throws Exception if there s a problem proxying 68 69 public int execute throws Exception 7 71 Peer peer getTargetPeer 72 73 if log isDebugEnabled 74 75 log debug using peer peer 76 77 78 String host getHost 79 8 if host equals 81 82 host PeerManager getLocalAddress getHostAddress 83 App PORT 84 if log isDebugEnabled 85 86 log debug changing host from empty to host 87 88 89 9 String url http host getPath replaceAll 2 91 String url http host NetUtils encodeLastElement getPath 92 String url http host NetUtils encodeEachElement getPath 93 94 if log isDebugEnabled 95 96 log debug url url 97 98 99 HttpMethod method createMethod url 1 1 1 method setFollowRedirects true 1 2 1 3 int ret peer executeHttpRequestMethod method 1 4 1 5 if log isDebugEnabled 1 6 1 7 log debug ret ret 1 8 log debug Reason method getStatusText 1 9 11 111 int status ret 112 113 getResponse setStatus status 114 copyHeaders method 115 116 if log isDebugEnabled 117 118 log debug before copying response body 119 12 121 OutputStream out getResponse getOutputStream 122 InputStream in method getResponseBodyAsStream 123 124 if log isDebugEnabled 125 126 log debug Response from server in 127 128 129 byte buffer new byte 1 24 13 int len 131 132 if in null 133 134 if log isDebugEnabled 135 136 log debug server response has a body copying it to client 137 138 139 while len in read buffer buffer length 1 14 141 if log isDebugEnabled 142 143 log debug writing len bytes to client 144 145 146 out write buffer len 147 148 149 in close 15 151 else 152 153 if log isDebugEnabled 154 155 log debug server response doesn t have a stream body 156 157 158 if method instanceof XMLResponseMethodBase 159 16 XMLResponseMethodBase xmlMethod XMLResponseMethodBase method 161 Document serverResponseBody xmlMethod getResponseDocument 162 163 if serverResponseBody null 164 165 if log isDebugEnabled 166 167 DocumentLogger logDocument log 168 logging response document 169 serverResponseBody 17 171 172 Document modifiedResponse modifyServerResponseDocument serverResponseBody 173 174 serverResponseBody modifiedResponse 175 DocumentLogger logDocument log modified xml response 176 serverResponseBody 177 178 convert xml tree back into a stream 179 DocumentLogger writeDocument serverResponseBody out 18 181 182 else 183 184 if log isDebugEnabled 185 186 log debug not doing anything with client body 187 188 189 19 191 out flush 192 193 method releaseConnection 194 method recycle 195 196 return status 197 198 199 2 change any references to slide to swirl so that the client doesn t see 2 1 slide at all 2 2 2 3 param serverResponseBody the response from the server to change 2 4 2 5 return and document to send back to the client 2 6 2 7 throws DocumentException if there s a problem reading the response 2 8 2 9 protected Document modifyServerResponseDocument final Document serverResponseBody 21 throws DocumentException 211 212 DOMReader reader new DOMReader 213 org dom4j Document doc reader read serverResponseBody 214 List textNodes doc selectNodes text 215 216 for Iterator it textNodes iterator it hasNext 217 218 Node textNode Node it next 219 String text textNode getText 22 221 if log isDebugEnabled 222 223 log debug changing textNode with text text nto 224 text replaceAll slide swirl 225 226 227 textNode setText text replaceAll slide swirl 228 229 23 DOMWriter writer new DOMWriter 231 232 return writer write doc 233 234 This page was automatically generated by Maven", "_id": "http://drzaius.ics.uci.edu/~swirl/impromptu-0.20/xref/swirl/workspace/ProxyCommand.html", "title": "proxycommand xref", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\" /><title>ProxyCommand xref</title>\n<link type=\"text/css\" rel=\"stylesheet\" href=\"../../stylesheet.css\" />\n</head>\n<body>\n<div id=\"overview\"><a href=\"../../../apidocs/swirl/workspace/ProxyCommand.html\">View Javadoc</a></div><pre>\n\n<a name=\"1\" href=\"#1\">1</a>   <strong>package</strong> <a href=\"../../swirl/workspace/package-summary.html\">swirl.workspace</a>;\n<a name=\"2\" href=\"#2\">2</a>   \n<a name=\"3\" href=\"#3\">3</a>   <strong>import</strong> java.io.InputStream;\n<a name=\"4\" href=\"#4\">4</a>   <strong>import</strong> java.io.OutputStream;\n<a name=\"5\" href=\"#5\">5</a>   <strong>import</strong> java.util.Iterator;\n<a name=\"6\" href=\"#6\">6</a>   <strong>import</strong> java.util.List;\n<a name=\"7\" href=\"#7\">7</a>   \n<a name=\"8\" href=\"#8\">8</a>   <strong>import</strong> javax.servlet.http.HttpServletRequest;\n<a name=\"9\" href=\"#9\">9</a>   <strong>import</strong> javax.servlet.http.HttpServletResponse;\n<a name=\"10\" href=\"#10\">10</a>  \n<a name=\"11\" href=\"#11\">11</a>  <strong>import</strong> org.apache.commons.httpclient.HttpMethod;\n<a name=\"12\" href=\"#12\">12</a>  <strong>import</strong> org.apache.commons.logging.Log;\n<a name=\"13\" href=\"#13\">13</a>  <strong>import</strong> org.apache.commons.logging.LogFactory;\n<a name=\"14\" href=\"#14\">14</a>  <strong>import</strong> org.apache.webdav.lib.methods.XMLResponseMethodBase;\n<a name=\"15\" href=\"#15\">15</a>  <strong>import</strong> org.dom4j.DocumentException;\n<a name=\"16\" href=\"#16\">16</a>  <strong>import</strong> org.dom4j.Node;\n<a name=\"17\" href=\"#17\">17</a>  <strong>import</strong> org.dom4j.io.DOMReader;\n<a name=\"18\" href=\"#18\">18</a>  <strong>import</strong> org.dom4j.io.DOMWriter;\n<a name=\"19\" href=\"#19\">19</a>  <strong>import</strong> org.w3c.dom.Document;\n<a name=\"20\" href=\"#20\">20</a>  \n<a name=\"21\" href=\"#21\">21</a>  <strong>import</strong> swirl.workspace.common.DocumentLogger;\n<a name=\"22\" href=\"#22\">22</a>  <strong>import</strong> swirl.workspace.common.NetUtils;\n<a name=\"23\" href=\"#23\">23</a>  \n<a name=\"24\" href=\"#24\">24</a>  <em>/**<em>*</em></em>\n<a name=\"25\" href=\"#25\">25</a>  <em> * Abstract base class for commands that proxy to only one peer. All the child</em>\n<a name=\"26\" href=\"#26\">26</a>  <em> * has to do is implement createMethod to customize what to send and this</em>\n<a name=\"27\" href=\"#27\">27</a>  <em> * class will do the rest</em>\n<a name=\"28\" href=\"#28\">28</a>  <em> *</em>\n<a name=\"29\" href=\"#29\">29</a>  <em> * @author bpillet</em>\n<a name=\"30\" href=\"#30\">30</a>  <em> */</em>\n<a name=\"31\" href=\"#31\">31</a>  <strong>public</strong> <strong>abstract</strong> <strong>class</strong> <a href=\"../../swirl/workspace/ProxyCommand.html\">ProxyCommand</a> <strong>extends</strong> <a href=\"../../swirl/workspace/BaseSwirlCommand.html\">BaseSwirlCommand</a>\n<a name=\"32\" href=\"#32\">32</a>  {\n<a name=\"33\" href=\"#33\">33</a>      <em>/**<em>* commons-logging log that maps to this Command */</em></em>\n<a name=\"34\" href=\"#34\">34</a>      <strong>private</strong> Log log = LogFactory.getLog(<strong>this</strong>.getClass());\n<a name=\"35\" href=\"#35\">35</a>  \n<a name=\"36\" href=\"#36\">36</a>      <em>/**<em>*</em></em>\n<a name=\"37\" href=\"#37\">37</a>  <em>     * See super</em>\n<a name=\"38\" href=\"#38\">38</a>  <em>     *</em>\n<a name=\"39\" href=\"#39\">39</a>  <em>     * @param req see super</em>\n<a name=\"40\" href=\"#40\">40</a>  <em>     * @param resp see super</em>\n<a name=\"41\" href=\"#41\">41</a>  <em>     * @param host see super</em>\n<a name=\"42\" href=\"#42\">42</a>  <em>     * @param path see super</em>\n<a name=\"43\" href=\"#43\">43</a>  <em>     * @param peerManager see super</em>\n<a name=\"44\" href=\"#44\">44</a>  <em>     */</em>\n<a name=\"45\" href=\"#45\">45</a>      <strong>public</strong> <a href=\"../../swirl/workspace/ProxyCommand.html\">ProxyCommand</a>(<strong>final</strong> HttpServletRequest req,\n<a name=\"46\" href=\"#46\">46</a>                          <strong>final</strong> HttpServletResponse resp, <strong>final</strong> String host,\n<a name=\"47\" href=\"#47\">47</a>                          <strong>final</strong> String path, <strong>final</strong> <a href=\"../../swirl/workspace/PeerManager.html\">PeerManager</a> peerManager)\n<a name=\"48\" href=\"#48\">48</a>      {\n<a name=\"49\" href=\"#49\">49</a>          <strong>super</strong>(req, resp, host, path, peerManager);\n<a name=\"50\" href=\"#50\">50</a>      }\n<a name=\"51\" href=\"#51\">51</a>  \n<a name=\"52\" href=\"#52\">52</a>      <em>/**<em>*</em></em>\n<a name=\"53\" href=\"#53\">53</a>  <em>     * Hook for subclasses to make this Command send a specific method</em>\n<a name=\"54\" href=\"#54\">54</a>  <em>     *</em>\n<a name=\"55\" href=\"#55\">55</a>  <em>     * @param url the url to the server</em>\n<a name=\"56\" href=\"#56\">56</a>  <em>     *</em>\n<a name=\"57\" href=\"#57\">57</a>  <em>     * @return an initialized HTTP Method</em>\n<a name=\"58\" href=\"#58\">58</a>  <em>     */</em>\n<a name=\"59\" href=\"#59\">59</a>      <strong>public</strong> <strong>abstract</strong> HttpMethod createMethod(<strong>final</strong> String url);\n<a name=\"60\" href=\"#60\">60</a>  \n<a name=\"61\" href=\"#61\">61</a>      <em>/**<em>*</em></em>\n<a name=\"62\" href=\"#62\">62</a>  <em>     * Figures out which peer to proxy to and sends them a request based on the</em>\n<a name=\"63\" href=\"#63\">63</a>  <em>     * createMethod() hook</em>\n<a name=\"64\" href=\"#64\">64</a>  <em>     *</em>\n<a name=\"65\" href=\"#65\">65</a>  <em>     * @return the status code from the server</em>\n<a name=\"66\" href=\"#66\">66</a>  <em>     *</em>\n<a name=\"67\" href=\"#67\">67</a>  <em>     * @throws Exception if there's a problem proxying</em>\n<a name=\"68\" href=\"#68\">68</a>  <em>     */</em>\n<a name=\"69\" href=\"#69\">69</a>      <strong>public</strong> <strong>int</strong> execute() throws Exception\n<a name=\"70\" href=\"#70\">70</a>      {\n<a name=\"71\" href=\"#71\">71</a>          <a href=\"../../swirl/workspace/Peer.html\">Peer</a> peer = getTargetPeer();\n<a name=\"72\" href=\"#72\">72</a>  \n<a name=\"73\" href=\"#73\">73</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"74\" href=\"#74\">74</a>          {\n<a name=\"75\" href=\"#75\">75</a>              log.debug(<span class=\"string\">\"using peer \"</span> + peer);\n<a name=\"76\" href=\"#76\">76</a>          }\n<a name=\"77\" href=\"#77\">77</a>  \n<a name=\"78\" href=\"#78\">78</a>          String host = getHost();\n<a name=\"79\" href=\"#79\">79</a>  \n<a name=\"80\" href=\"#80\">80</a>          <strong>if</strong>(host.equals(<span class=\"string\">\"\"</span>))\n<a name=\"81\" href=\"#81\">81</a>          {\n<a name=\"82\" href=\"#82\">82</a>              host = PeerManager.getLocalAddress().getHostAddress() + ':'\n<a name=\"83\" href=\"#83\">83</a>                     + App.PORT;\n<a name=\"84\" href=\"#84\">84</a>              <strong>if</strong>(log.isDebugEnabled())\n<a name=\"85\" href=\"#85\">85</a>  \t        {\n<a name=\"86\" href=\"#86\">86</a>              \tlog.debug(<span class=\"string\">\"changing host from empty to \"</span> + host);\n<a name=\"87\" href=\"#87\">87</a>  \t        }\n<a name=\"88\" href=\"#88\">88</a>          }\n<a name=\"89\" href=\"#89\">89</a>  \n<a name=\"90\" href=\"#90\">90</a>          <em class=\"comment\">//String url = \"http://\" + host + getPath().replaceAll(\" \", \"%20\");</em>\n<a name=\"91\" href=\"#91\">91</a>          <em class=\"comment\">//String url = \"http://\" + host + (NetUtils.encodeLastElement(getPath()));</em>\n<a name=\"92\" href=\"#92\">92</a>          String url = <span class=\"string\">\"http://\"</span> + host + (NetUtils.encodeEachElement(getPath()));\n<a name=\"93\" href=\"#93\">93</a>  \n<a name=\"94\" href=\"#94\">94</a>          <strong>if</strong>(log.isDebugEnabled())\n<a name=\"95\" href=\"#95\">95</a>          {\n<a name=\"96\" href=\"#96\">96</a>              log.debug(<span class=\"string\">\"url: \"</span> + url);\n<a name=\"97\" href=\"#97\">97</a>          }\n<a name=\"98\" href=\"#98\">98</a>  \n<a name=\"99\" href=\"#99\">99</a>          HttpMethod method = createMethod(url);\n<a name=\"100\" href=\"#100\">100</a> \n<a name=\"101\" href=\"#101\">101</a>         method.setFollowRedirects(<strong>true</strong>);\n<a name=\"102\" href=\"#102\">102</a> \n<a name=\"103\" href=\"#103\">103</a>         <strong>int</strong> ret = peer.executeHttpRequestMethod(method);\n<a name=\"104\" href=\"#104\">104</a> \n<a name=\"105\" href=\"#105\">105</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"106\" href=\"#106\">106</a>         {\n<a name=\"107\" href=\"#107\">107</a>             log.debug(<span class=\"string\">\"ret: \"</span> + ret);\n<a name=\"108\" href=\"#108\">108</a>             log.debug(<span class=\"string\">\"Reason: \"</span> + method.getStatusText());\n<a name=\"109\" href=\"#109\">109</a>         }\n<a name=\"110\" href=\"#110\">110</a> \n<a name=\"111\" href=\"#111\">111</a>         <strong>int</strong> status = ret;\n<a name=\"112\" href=\"#112\">112</a> \n<a name=\"113\" href=\"#113\">113</a>         getResponse().setStatus(status);\n<a name=\"114\" href=\"#114\">114</a>         copyHeaders(method);\n<a name=\"115\" href=\"#115\">115</a> \n<a name=\"116\" href=\"#116\">116</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"117\" href=\"#117\">117</a>         {\n<a name=\"118\" href=\"#118\">118</a>             log.debug(<span class=\"string\">\"before copying response body...\"</span>);\n<a name=\"119\" href=\"#119\">119</a>         }\n<a name=\"120\" href=\"#120\">120</a> \n<a name=\"121\" href=\"#121\">121</a>         OutputStream out = getResponse().getOutputStream();\n<a name=\"122\" href=\"#122\">122</a>         InputStream in = method.getResponseBodyAsStream();\n<a name=\"123\" href=\"#123\">123</a> \n<a name=\"124\" href=\"#124\">124</a>         <strong>if</strong>(log.isDebugEnabled())\n<a name=\"125\" href=\"#125\">125</a>         {\n<a name=\"126\" href=\"#126\">126</a>             log.debug(<span class=\"string\">\"Response from server: \"</span> + in);\n<a name=\"127\" href=\"#127\">127</a>         }\n<a name=\"128\" href=\"#128\">128</a> \n<a name=\"129\" href=\"#129\">129</a>         byte[] buffer = <strong>new</strong> byte[1024];\n<a name=\"130\" href=\"#130\">130</a>         <strong>int</strong> len = 0;\n<a name=\"131\" href=\"#131\">131</a> \n<a name=\"132\" href=\"#132\">132</a>         <strong>if</strong>(in != <strong>null</strong>)\n<a name=\"133\" href=\"#133\">133</a>         {\n<a name=\"134\" href=\"#134\">134</a>         \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"135\" href=\"#135\">135</a> \t        {\n<a name=\"136\" href=\"#136\">136</a>         \t\tlog.debug(<span class=\"string\">\"server response has a body. copying it to client\"</span>);\n<a name=\"137\" href=\"#137\">137</a> \t        }\n<a name=\"138\" href=\"#138\">138</a> \n<a name=\"139\" href=\"#139\">139</a>             <strong>while</strong>((len = in.read(buffer, 0, buffer.length)) != -1)\n<a name=\"140\" href=\"#140\">140</a>             {\n<a name=\"141\" href=\"#141\">141</a>                 <strong>if</strong>(log.isDebugEnabled())\n<a name=\"142\" href=\"#142\">142</a>                 {\n<a name=\"143\" href=\"#143\">143</a>                     log.debug(<span class=\"string\">\"writing \"</span> + len + <span class=\"string\">\" bytes to client\"</span>);\n<a name=\"144\" href=\"#144\">144</a>                 }\n<a name=\"145\" href=\"#145\">145</a> \n<a name=\"146\" href=\"#146\">146</a>                 out.write(buffer, 0, len);\n<a name=\"147\" href=\"#147\">147</a>             }\n<a name=\"148\" href=\"#148\">148</a> \n<a name=\"149\" href=\"#149\">149</a>             in.close();\n<a name=\"150\" href=\"#150\">150</a>         }\n<a name=\"151\" href=\"#151\">151</a>         <strong>else</strong>\n<a name=\"152\" href=\"#152\">152</a>         {\n<a name=\"153\" href=\"#153\">153</a>         \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"154\" href=\"#154\">154</a> \t        {\n<a name=\"155\" href=\"#155\">155</a>         \t\tlog.debug(<span class=\"string\">\"server response doesn't have a stream body\"</span>);\n<a name=\"156\" href=\"#156\">156</a> \t        }\n<a name=\"157\" href=\"#157\">157</a> \n<a name=\"158\" href=\"#158\">158</a>             <strong>if</strong>(method instanceof XMLResponseMethodBase)\n<a name=\"159\" href=\"#159\">159</a>             {\n<a name=\"160\" href=\"#160\">160</a>                 XMLResponseMethodBase xmlMethod = (XMLResponseMethodBase)method;\n<a name=\"161\" href=\"#161\">161</a>                 Document serverResponseBody = xmlMethod.getResponseDocument();\n<a name=\"162\" href=\"#162\">162</a> \n<a name=\"163\" href=\"#163\">163</a>                 <strong>if</strong>(serverResponseBody != <strong>null</strong>)\n<a name=\"164\" href=\"#164\">164</a>                 {\n<a name=\"165\" href=\"#165\">165</a>                     <strong>if</strong>(log.isDebugEnabled())\n<a name=\"166\" href=\"#166\">166</a>                     {\n<a name=\"167\" href=\"#167\">167</a>                         DocumentLogger.logDocument(log,\n<a name=\"168\" href=\"#168\">168</a>                                                    <span class=\"string\">\"logging response document...\"</span>,\n<a name=\"169\" href=\"#169\">169</a>                                                    serverResponseBody);\n<a name=\"170\" href=\"#170\">170</a>                     }\n<a name=\"171\" href=\"#171\">171</a> \n<a name=\"172\" href=\"#172\">172</a>                     Document modifiedResponse = modifyServerResponseDocument(serverResponseBody);\n<a name=\"173\" href=\"#173\">173</a> \n<a name=\"174\" href=\"#174\">174</a>                     serverResponseBody = modifiedResponse;\n<a name=\"175\" href=\"#175\">175</a>                     DocumentLogger.logDocument(log, <span class=\"string\">\"modified xml response\"</span>,\n<a name=\"176\" href=\"#176\">176</a>                                                serverResponseBody);\n<a name=\"177\" href=\"#177\">177</a> \n<a name=\"178\" href=\"#178\">178</a>                     <em class=\"comment\">// convert xml tree back into a stream</em>\n<a name=\"179\" href=\"#179\">179</a>                     DocumentLogger.writeDocument(serverResponseBody, out);\n<a name=\"180\" href=\"#180\">180</a>                 }\n<a name=\"181\" href=\"#181\">181</a>             }\n<a name=\"182\" href=\"#182\">182</a>             <strong>else</strong>\n<a name=\"183\" href=\"#183\">183</a>             {\n<a name=\"184\" href=\"#184\">184</a>             \t<strong>if</strong>(log.isDebugEnabled())\n<a name=\"185\" href=\"#185\">185</a>     \t        {\n<a name=\"186\" href=\"#186\">186</a>             \t\tlog.debug(<span class=\"string\">\"not doing anything with client body\"</span>);\n<a name=\"187\" href=\"#187\">187</a>     \t        }\n<a name=\"188\" href=\"#188\">188</a>             }\n<a name=\"189\" href=\"#189\">189</a>         }\n<a name=\"190\" href=\"#190\">190</a> \n<a name=\"191\" href=\"#191\">191</a>         out.flush();\n<a name=\"192\" href=\"#192\">192</a> \n<a name=\"193\" href=\"#193\">193</a>         method.releaseConnection();\n<a name=\"194\" href=\"#194\">194</a>         method.recycle();\n<a name=\"195\" href=\"#195\">195</a> \n<a name=\"196\" href=\"#196\">196</a>         <strong>return</strong> status;\n<a name=\"197\" href=\"#197\">197</a>     }\n<a name=\"198\" href=\"#198\">198</a> \n<a name=\"199\" href=\"#199\">199</a>     <em>/**<em>*</em></em>\n<a name=\"200\" href=\"#200\">200</a> <em>     * change any references to slide to swirl so that the client doesn't see</em>\n<a name=\"201\" href=\"#201\">201</a> <em>     * slide at all</em>\n<a name=\"202\" href=\"#202\">202</a> <em>     *</em>\n<a name=\"203\" href=\"#203\">203</a> <em>     * @param serverResponseBody the response from the server to change</em>\n<a name=\"204\" href=\"#204\">204</a> <em>     *</em>\n<a name=\"205\" href=\"#205\">205</a> <em>     * @return and document to send back to the client</em>\n<a name=\"206\" href=\"#206\">206</a> <em>     *</em>\n<a name=\"207\" href=\"#207\">207</a> <em>     * @throws DocumentException if there's a problem reading the response</em>\n<a name=\"208\" href=\"#208\">208</a> <em>     */</em>\n<a name=\"209\" href=\"#209\">209</a>     <strong>protected</strong> Document modifyServerResponseDocument(<strong>final</strong> Document serverResponseBody)\n<a name=\"210\" href=\"#210\">210</a>                                              throws DocumentException\n<a name=\"211\" href=\"#211\">211</a>     {\n<a name=\"212\" href=\"#212\">212</a>         DOMReader reader = <strong>new</strong> DOMReader();\n<a name=\"213\" href=\"#213\">213</a>         org.dom4j.Document doc = reader.read(serverResponseBody);\n<a name=\"214\" href=\"#214\">214</a>         List textNodes = doc.selectNodes(<span class=\"string\">\"//text()\"</span>);\n<a name=\"215\" href=\"#215\">215</a> \n<a name=\"216\" href=\"#216\">216</a>         <strong>for</strong>(Iterator it = textNodes.iterator(); it.hasNext();)\n<a name=\"217\" href=\"#217\">217</a>         {\n<a name=\"218\" href=\"#218\">218</a>             Node textNode = (Node)it.next();\n<a name=\"219\" href=\"#219\">219</a>             String text = textNode.getText();\n<a name=\"220\" href=\"#220\">220</a> \n<a name=\"221\" href=\"#221\">221</a>             <strong>if</strong>(log.isDebugEnabled())\n<a name=\"222\" href=\"#222\">222</a>             {\n<a name=\"223\" href=\"#223\">223</a>                 log.debug(<span class=\"string\">\"changing textNode with text: \"</span> + text + <span class=\"string\">\"\\nto: \"</span>\n<a name=\"224\" href=\"#224\">224</a>                           + text.replaceAll(<span class=\"string\">\"slide\"</span>, <span class=\"string\">\"swirl\"</span>));\n<a name=\"225\" href=\"#225\">225</a>             }\n<a name=\"226\" href=\"#226\">226</a> \n<a name=\"227\" href=\"#227\">227</a>             textNode.setText(text.replaceAll(<span class=\"string\">\"slide\"</span>, <span class=\"string\">\"swirl\"</span>));\n<a name=\"228\" href=\"#228\">228</a>         }\n<a name=\"229\" href=\"#229\">229</a> \n<a name=\"230\" href=\"#230\">230</a>         DOMWriter writer = <strong>new</strong> DOMWriter();\n<a name=\"231\" href=\"#231\">231</a> \n<a name=\"232\" href=\"#232\">232</a>         <strong>return</strong> writer.write(doc);\n<a name=\"233\" href=\"#233\">233</a>     }\n<a name=\"234\" href=\"#234\">234</a> }\n</pre>\n<hr/><div id=\"footer\">This page was automatically generated by <a href=\"http://maven.apache.org/\">Maven</a></div></body>\n</html>\n\n", "id": 32932.0}