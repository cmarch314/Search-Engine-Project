{"text": "Navigation Up Table of Contents Bibliography Index Title Page ExtendedKernelTraits 2 Definition ExtendedKernelTraits 2 is a kernel concept providing extended geometry1 Let K be an instance of the data type ExtendedKernelTraits 2 The central notion of extended geomtry are extended points An extended point represents either a standard affine point of the Cartesian plane or a non standard point representing the equivalence class of rays where two rays are equivalent if one is contained in the other Let R be an infinimaximal number2 F be the square box with corners NW R R NE R R SE R R and SW R R Let p be a non standard point and let r be a ray defining it If the frame F contains the source point of r then let p R be the intersection of r with the frame F if F does not contain the source of r then p R is undefined For a standard point let p R be equal to p if p is contained in the frame F and let p R be undefined otherwise Clearly for any standard or non standard point p p R is defined for any sufficiently large R Let f be any function on standard points say with k arguments We call f extensible if for any k points p1 pk the function value f p1 R pk R is constant for all sufficiently large R We define this value as f p1 pk Predicates like lexicographic order of points orientation and incircle tests are extensible An extended segment is defined by two extended points such that it is either an affine segment an affine ray an affine line or a segment that is part of the square box Extended directions extend the affine notion of direction to extended objects This extended geometry concept serves two purposes It offers functionality for changing between standard affine and extended geometry At the same time it provides extensible geometric primitives on the extended geometric objects Types Affine kernel types ExtendedKernelTraits 2 Standard kernel the standard affine kernel ExtendedKernelTraits 2 Standard RT the standard ring type ExtendedKernelTraits 2 Standard point 2 standard points ExtendedKernelTraits 2 Standard segment 2 standard segments ExtendedKernelTraits 2 Standard line 2 standard oriented lines ExtendedKernelTraits 2 Standard direction 2 standard directions ExtendedKernelTraits 2 Standard ray 2 standard rays ExtendedKernelTraits 2 Standard aff transformation 2 standard affine transformations Extended kernel types ExtendedKernelTraits 2 RT the ring type of our extended kernel ExtendedKernelTraits 2 Point 2 extended points ExtendedKernelTraits 2 Segment 2 extended segments ExtendedKernelTraits 2 Direction 2 extended directions enum Point type SWCORNER LEFTFRAME NWCORNER BOTTOMFRAME STANDARD TOPFRAME SECORNER RIGHTFRAME NECORNER a type descriptor for extended points Operations Interfacing the affine kernel types Point 2 K construct point Standard point 2 p creates an extended point and initializes it to the standard point p Point 2 K construct point Standard line 2 l creates an extended point and initializes it to the equivalence class of all the rays underlying the oriented line l Point 2 K construct point Standard point 2 p1 Standard point 2 p2 creates an extended point and initializes it to the equivalence class of all the rays underlying the oriented line l p1 p2 Point 2 K construct point Standard point 2 p Standard direction 2 d creates an extended point and initializes it to the equivalence class of all the rays underlying the ray starting in p in direction d Point 2 K construct opposite point Standard line 2 l creates an extended point and initializes it to the equivalence class of all the rays underlying the oriented line opposite to l Point type K type Point 2 p determines the type of p and returns it bool K is standard Point 2 p returns true iff p is a standard point Standard point 2 K standard point Point 2 p returns the standard point represented by p Precondition K is standard p Standard line 2 K standard line Point 2 p returns the oriented line representing the bundle of rays defining p Precondition K is standard p Standard ray 2 K standard ray Point 2 p a ray defining p Precondition K is standard p Point 2 K NE returns the point on the northeast frame corner Point 2 K SE returns the point on the southeast frame corner Point 2 K NW returns the point on the northwest frame corner Point 2 K SW returns the point on the southwest frame corner Geometric kernel calls Point 2 K source Segment 2 s returns the source point of s Point 2 K target Segment 2 s returns the target point of s Segment 2 K construct segment Point 2 p Point 2 q constructs a segment pq int K orientation Segment 2 s Point 2 p returns the orientation of p with respect to the line through s int K orientation Point 2 p1 Point 2 p2 Point 2 p3 returns the orientation of p3 with respect to the line through p1p2 bool K left turn Point 2 p1 Point 2 p2 Point 2 p3 return true iff the p3 is left of the line through p1p2 bool K is degenerate Segment 2 s return true iff s is degenerate int K compare xy Point 2 p1 Point 2 p2 returns the lexicographic order of p1 and p2 int K compare x Point 2 p1 Point 2 p2 returns the order on the x coordinates of p1 and p2 int K compare y Point 2 p1 Point 2 p2 returns the order on the y coordinates of p1 and p2 Point 2 K intersection Segment 2 s1 Segment 2 s2 returns the point of intersection of the lines supported by s1 and s2 Precondition the intersection point exists Direction 2 K construct direction Point 2 p1 Point 2 p2 returns the direction of the vector p2 p1 bool K strictly ordered ccw Direction 2 d1 Direction 2 d2 Direction 2 d3 returns true iff d2 is in the interior of the counterclockwise angular sector between d1 and d3 bool K strictly ordered along line Point 2 p1 Point 2 p2 Point 2 p3 returns true iff p2 is in the relative interior of the segment p1p3 bool K contains Segment 2 s Point 2 p returns true iff s contains p bool K first pair closer than second Point 2 p1 Point 2 p2 Point 2 p3 Point 2 p4 returns true iff p1 p2 p3 p4 const char K output identifier returns a unique identifier for kernel object Input Output Usually this should be the name of the model Has Models CGAL Extended cartesian FT CGAL Extended homogeneous RT CGAL Filtered extended homogeneous RT Footnotes 1 It is called extended geometry for simplicity though it is not a real geometry in the classical sense 2 A finite but very large number Next Extended cartesian FT Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Nef_2_ref/Concept_ExtendedKernelTraits_2", "title": "extendedkerneltraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Nef_2_ref/ExtendedKernelTraits_2.tex' -->\n<html> <head>  \n<title>ExtendedKernelTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_719\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_744\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_ExtendedKernelTraits_2\"></A>\n<h2><I>ExtendedKernelTraits_2</I></h2>\n\n\n\n     \n     \n     \n<A NAME=\"Index_anchor_745\"></A> \n\n<A NAME=\"Index_anchor_746\"></A>\n<P>\n\n<H3>Definition</H3>\n<P>\n\n<I><A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A></I> is a kernel concept providing extended\ngeometry<A HREF=\"#Footnote_1\"><SUP>1</SUP></A>. Let <I>K</I>\nbe an instance of the data type <I><A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A></I>.  The\ncentral notion of extended geomtry are extended points. An extended\npoint represents either a standard affine point of the <A HREF=\"../Kernel_23_ref/Class_Cartesian.html#Cross_link_anchor_6\">Cartesian</A> plane\nor a non-standard point representing the equivalence class of rays\nwhere two rays are equivalent if one is contained in the other.\n<P>\n\nLet <MATH><I>R</I></MATH> be an infinimaximal number<A HREF=\"#Footnote_2\"><SUP>2</SUP></A>, <MATH><I>F</I></MATH> be the <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> box with corners <MATH><I>NW(-R,R)</I></MATH>, <MATH><I>NE(R,R)</I></MATH>,\n<MATH><I>SE(R,-R)</I></MATH>, and <MATH><I>SW(-R,-R)</I></MATH>. Let <MATH><I>p</I></MATH> be a non-standard point and let\n<MATH><I>r</I></MATH> be a ray defining it. If the frame <MATH><I>F</I></MATH> contains the source point\nof <MATH><I>r</I></MATH> then let <MATH><I>p(R)</I></MATH> be the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of <MATH><I>r</I></MATH> with the frame <MATH><I>F</I></MATH>,\nif <MATH><I>F</I></MATH> does not contain the source of <MATH><I>r</I></MATH> then <MATH><I>p(R)</I></MATH> is undefined.\nFor a standard point let <MATH><I>p(R)</I></MATH> be equal to <MATH><I>p</I></MATH> if <MATH><I>p</I></MATH> is contained in\nthe frame <MATH><I>F</I></MATH> and let <MATH><I>p(R)</I></MATH> be undefined otherwise. Clearly, for any\nstandard or non-standard point <MATH><I>p</I></MATH>, <MATH><I>p(R)</I></MATH> is defined for any\nsufficiently large <MATH><I>R</I></MATH>. Let <MATH><I>f</I></MATH> be any function on standard points,\nsay with <MATH><I>k</I></MATH> arguments. We call <MATH><I>f</I></MATH> <I>extensible</I> if for any <MATH><I>k</I></MATH>\npoints <MATH><I>p<SUB>1</SUB></I></MATH>, ..., <MATH><I>p<SUB>k</SUB></I></MATH> the function value\n<MATH><I>f(p<SUB>1</SUB>(R),...,p<SUB>k</SUB>(R))</I></MATH> is constant for all sufficiently large\n<MATH><I>R</I></MATH>. We define this value as <MATH><I>f(p<SUB>1</SUB>,...,p<SUB>k</SUB>)</I></MATH>.  Predicates like\nlexicographic order of points, <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A>, and incircle tests are\nextensible.\n<P>\n\nAn extended segment is defined by two extended points such that it is\neither an affine segment, an affine ray, an affine line, or a segment\nthat is part of the <A HREF=\"../NumberTypeSupport_ref/Function_square.html#Cross_link_anchor_1418\">square</A> box. Extended directions extend the affine\nnotion of direction to extended objects.\n<P>\n\nThis extended geometry concept serves two purposes. It offers\nfunctionality for changing between standard affine and extended\ngeometry. At the same time it provides extensible geometric primitives\non the extended geometric objects.\n<P>\n\n<H3>Types</H3>\n<P>\n\n<H3>Affine kernel types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_kernel\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the standard affine kernel.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the standard ring type.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_point_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard points.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_segment_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard segments.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_line_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard oriented lines.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_direction_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard directions.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_ray_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard rays.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::Standard_aff_transformation_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    standard affine transformations.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Extended kernel types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    the ring type of our extended kernel.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    extended points.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    extended segments.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ExtendedKernelTraits_2.html#Cross_link_anchor_719\">ExtendedKernelTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    extended directions.\n<P>\n\n</TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A NAME=\"Function_Point_type\"></A>\n<A NAME=\"Enum_Point_type\"></A>\n<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    <A HREF=\"../Polyhedron_ref/Class_Polyhedron_incremental_builder_3#Enum_enum\">enum</A> <A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">Point_type</A> { </TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP>\n    <A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">SWCORNER</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">LEFTFRAME</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">NWCORNER</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">BOTTOMFRAME</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">STANDARD</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">TOPFRAME</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">SECORNER</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">RIGHTFRAME</A><A NAME=\"Function_Point_type\"></A>\n,<BR>\n\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">NECORNER</A><A NAME=\"Function_Point_type\"></A>\n};</TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    a type descriptor for extended points.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Operations</H3>\n<P>\n\n<H3>Interfacing the affine kernel types</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_construct_point6const_Standard_point_2__p9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.construct_point (  Standard_point_2 p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates an extended point and initializes it to the standard point\n<I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_construct_point6const_Standard_line_2__l9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.construct_point (  Standard_line_2 l)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates an extended point and initializes it to the equivalence class\nof all the rays underlying the oriented line <I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_construct_point6const_Standard_point_2__p1+_const_Standard_point_2__p29_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    K.construct_point ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Standard_point_2 p1,<BR>\n\nStandard_point_2 p2)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates an extended point and initializes it\nto the equivalence class of all the rays underlying the oriented line\n<I>l(p1,p2)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_construct_point6const_Standard_point_2__p+_const_Standard_direction_2__d9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    K.construct_point ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     Standard_point_2 p,<BR>\n\nStandard_direction_2 d)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates an extended point and initializes\nit to the equivalence class of all the rays underlying the ray\nstarting in <I>p</I> in direction <I>d</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_construct_opposite_point6const_Standard_line_2__l9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.construct_opposite_point (  Standard_line_2 l)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    creates an extended point and initializes it to the equivalence\nclass of all the rays underlying the oriented line <A HREF=\"../Kernel_23_ref/Function_opposite.html#Cross_link_anchor_243\">opposite</A> to\n<I>l</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_type_type6const_Point_2__p9_;\"></A>\n<A HREF=\"Concept_ExtendedKernelTraits_2#Enum_Point_type\">Point_type</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.type (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    determines the type of\n<I>p</I> and returns it.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_standard6const_Point_2__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.is_standard (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> iff\n<I>p</I> is a standard point.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Standard_point_2_standard_point6const_Point_2__p9_;\"></A>\nStandard_point_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.standard_point (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\nthe standard point represented by <I>p</I>.<BR>\n\n<EM>Precondition: </EM><I>K.is_standard(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Standard_line_2_standard_line6const_Point_2__p9_;\"></A>\nStandard_line_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.standard_line (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns\nthe oriented line representing the bundle of rays defining <I>p</I>.<BR>\n\n<EM>Precondition: </EM><I>!K.is_standard(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Standard_ray_2_standard_ray6const_Point_2__p9_;\"></A>\nStandard_ray_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.standard_ray (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    a ray\ndefining <I>p</I>.<BR>\n\n<EM>Precondition: </EM><I>!K.is_standard(p)</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_NE69_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    K.NE ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point on the northeast frame\ncorner.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_SE69_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    K.SE ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point on the southeast frame\ncorner.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_NW69_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    K.NW ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point on the northwest frame\ncorner.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_SW69_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    K.SW ()\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point on the southwest frame\ncorner.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Geometric kernel calls</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_source6const_Segment_2__s9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.source (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the source\npoint of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_target6const_Segment_2__s9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.target (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the target\npoint of <I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Segment_2_construct_segment6const_Point_2__p+_const_Point_2__q9_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.construct_segment (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> q)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    constructs a segment <I>pq</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_orientation6const_Segment_2__s+_const_Point_2__p9_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of <I>p</I> with respect to the line through\n<I>s</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_orientation6const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> of <I>p3</I> with respect to\nthe line through <I>p1p2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_left_turn6const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_left_turn.html#Cross_link_anchor_223\">left_turn</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    return true iff the <I>p3</I> is left of the line\nthrough <I>p1p2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_is_degenerate6const_Segment_2__s9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.is_degenerate (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    return true iff\n<I>s</I> is degenerate.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_compare_xy6const_Point_2__p1+_const_Point_2__p29_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_compare_xy.html#Cross_link_anchor_183\">compare_xy</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the lexicographic order of <I>p1</I> and <I>p2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_compare_x6const_Point_2__p1+_const_Point_2__p29_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_compare_x.html#Cross_link_anchor_181\">compare_x</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the order on the <MATH><I>x</I></MATH>-coordinates of <I>p1</I> and <I>p2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_int_compare_y6const_Point_2__p1+_const_Point_2__p29_;\"></A>\nint\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_compare_y.html#Cross_link_anchor_189\">compare_y</A> (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the order on the <MATH><I>y</I></MATH>-coordinates of <I>p1</I> and <I>p2</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Point_2_intersection6_const_Segment_2__s1+_const_Segment_2__s29_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.<A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s1,  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the point of <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> of the lines supported by\n<I>s1</I> and <I>s2</I>.<BR>\n\n<EM>Precondition: </EM>the <A HREF=\"../Kernel_23_ref/Function_intersection.html#Cross_link_anchor_221\">intersection</A> point exists.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Direction_2_construct_direction6_const_Point_2__p1+_const_Point_2__p29_;\"></A>\n<A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A>\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.construct_direction (  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns the direction of the vector <I>p2</I> -\n<I>p1</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_strictly_ordered_ccw6const_Direction_2__d1+_const_Direction_2__d2+_const_Direction_2__d39_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    K.strictly_ordered_ccw ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A> d1,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A> d2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Direction_2.html#Cross_link_anchor_46\">Direction_2</A> d3)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> iff\n<I>d2</I> is in the interior of the counterclockwise angular sector\nbetween <I>d1</I> and <I>d3</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_strictly_ordered_along_line6_const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p39_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    K.strictly_ordered_along_line ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns <I>true</I> iff <I>p2</I> is\nin the relative interior of the segment <I>p1p3</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_contains6const_Segment_2__s+_const_Point_2__p9_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.contains (  <A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A> s,  <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff <I>s</I> contains <I>p</I>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_bool_first_pair_closer_than_second6_const_Point_2__p1+_const_Point_2__p2+_const_Point_2__p3+_const_Point_2__p49_;\"></A>\nbool\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n    K.first_pair_closer_than_second ( </I></TD><TD ALIGN=LEFT VALIGN=TOP NOWRAP><I>\n     <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p1,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p2,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p3,<BR>\n\n<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p4)</I></TD></TR></TABLE>\n    \n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns true iff\n<MATH><I> <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC=\"cc_parallel.gif\"> p1-p2 <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC=\"cc_parallel.gif\">  &lt;  <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC=\"cc_parallel.gif\"> p3-p4 <IMG BORDER=0 WIDTH=6 HEIGHT=29 ALIGN=MIDDLE SRC=\"cc_parallel.gif\"> </I></MATH>.\n        </TD></TR>\n        <TR><TD><BR></TD></TR>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_const_char*_output_identifier69_;\"></A>\nconst char*\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    K.output_identifier ()\n        </I></NOBR>\n        </TR><TR><TD WIDTH=25% NOWRAP></TD><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    returns a unique\nidentifier for kernel object Input/Output. Usually this should be the\nname of the model.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Extended_cartesian.html#Cross_link_anchor_720\">CGAL::Extended_cartesian</A>&lt;FT&gt;</I><BR>\n\n<I><A HREF=\"Class_Extended_homogeneous.html#Cross_link_anchor_722\">CGAL::Extended_homogeneous</A>&lt;RT&gt;</I><BR>\n\n<I><A HREF=\"Class_Filtered_extended_homogeneous.html#Cross_link_anchor_724\">CGAL::Filtered_extended_homogeneous</A>&lt;RT&gt;</I>\n<P>\n\n<HR><H3>Footnotes</H3>\n<P>\n\n<TABLE><TR><TD VALIGN=TOP>\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_1\">&nbsp;<SUP>1</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nIt is called extended geometry for simplicity,\nthough it is not a real geometry in the classical sense.\n</TD></TR><TR><TD VALIGN=TOP>\n        <A NAME=\"Footnote_2\">&nbsp;<SUP>2</SUP>&nbsp;</A></TD><TD VALIGN=TOP>\nA finite but very large\nnumber.\n\n</TD></TR></TABLE>\n<div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Extended_cartesian.html\"><I>Extended_cartesian&lt;FT&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_12!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 42204.0}