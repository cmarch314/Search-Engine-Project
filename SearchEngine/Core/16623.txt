{"text": "More Advanced R Commands User Defined Functions If R doesn t have a built in function for what you need you can program your own function For example the following code creates a function called test test function a b start of function definition body of the function a 2 b 2 the last command is the value returned end of function is here Now we try out our new function test 9 9 test 9 test 9 Loops For loops are a coding method to carry out a command multiple times without having to code each iteration individually In the example below it will run the for loop for n 1 n 2 n 3 to n 1 p initializes p to for n in 1 1 p p 1 2 n compute 1 2 1 4 1 8 1 1 24 p means NULL set up an empty objectfor i in 1 1 data runif 2 means i mean data meansmean means If Else Often logical commands require us to check if something is true If so we do one command otherwise we do another Some examples of if else commands are foo 5if foo 5 print success ifelse foo 5 sqrt foo NA ifelse foo 6 sqrt foo NA if foo 5 print wait for it 2 3 Simulation Dice Rolls One of the more powerful tools in R is its capability to simulate random processes Here is an example for a dice roll simulation sample 1 6 1 replace TRUE one die rollsum sample 1 6 2 replace TRUE sum of two dice rollsnum for n in 1 1 roll two dice 1 times and record the number of times the sum 7 x sum sample 1 6 2 replace TRUE if x 7 num num 1 prop num 1 prop In the end the object prop gives us an empirical probability that the sum of two dice is 7 An empirical probability is an estimate of a probability obtained via simulation or data collection as opposed to a theoretical or exact probability The more times we run the simulation the closer the empirical probability will be to the exact probability What is the exact probability that the sum is 7 Previous Basic R Functions Introduction to R Index", "_id": "http://www.ics.uci.edu/~staceyah/120A/Rintro/Adv_Coding.html", "title": "more advanced r commands", "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html>\n  <head>\n    <meta content=\"text/html; charset=windows-1252\"\n      http-equiv=\"Content-Type\">\n    <title>More Advanced R Commands</title>\n    <meta content=\"Stacey Hancock\" name=\"author\">\n  </head>\n  <body>\n    <table style=\"width: 100%; background-color: rgb(102, 204, 204);\n      margin-left: auto; margin-right: auto; height: 58px; text-align:\n      left;\" border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n      <tbody>\n        <tr>\n          <td>\n            <div style=\"text-align: center;\"> </div>\n            <h1 style=\" text-align: center;\">More Advanced R Commands<br>\n            </h1>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>User-Defined Functions </h2>\n    If R doesn't have a built-in function for what you need, you can\n    program your own function. For example, the following code creates a\n    function called \"<span style=\"font-family: monospace;\">test</span>\".<br>\n    <pre>test &lt;- function(a,b) # start of function definition <br>{ <br>  # body of the function <br>  a^2-b^2 \t# the last command is the value returned <br>} \t\t# end of function is here <br><br></pre>\n    Now we try out our new function:<br>\n    <pre>test(9,9) <br>test(9,0) <br>test(0,9) <br></pre>\n    <br>\n    <p> </p>\n    <h2>Loops</h2>\n    \"For loops\" are a coding method to carry out a command multiple\n    times without having to code each iteration individually. In the\n    example below, it will run the for loop for n=1, n=2, n=3,... to\n    n=10.<br>\n    <br>\n    <pre>p &lt;- 0                  # initializes p to 0<br>for(n in 1:10)<br>{<br>   p&lt;-p+(1/2)^n      # compute 1/2+1/4+1/8+...+1/1024<br>}<br>p <br><br>means = NULL\t\t# set up an empty object<br>for(i in 1:100){<br>   data = runif(20)<br>   means[i] = mean(data)<br>}<br>means<br>mean(means)<br></pre>\n    <br>\n    <h2>If-Else</h2>\n    Often, logical commands require us to check if something is true. If\n    so, we do one command; otherwise, we do another. Some examples of\n    if-else commands are:<br>\n    <pre>foo &lt;- 5<br>if(foo==5) print(\"success!\")<br>ifelse(foo==5,sqrt(foo),NA)<br>ifelse(foo&gt;=6,sqrt(foo),NA)<br>if(foo==5){<br>  print(\"wait for it...\")<br>  2+3<br>}<br></pre>\n    <br>\n    <h2>Simulation: Dice Rolls<br>\n    </h2>\n    One of the more powerful tools in R is its capability to simulate\n    random processes. Here is an example for a dice roll simulation.<br>\n    <pre>sample(1:6,1,replace=TRUE)          # one die roll<br>sum(sample(1:6,2,replace=TRUE))     # sum of two dice rolls<br><br>num &lt;- 0<br>for(n in 1:1000)                    # roll two dice 1000 times and<br>{                                   # record the number of times the sum = 7<br>  x &lt;- sum(sample(1:6,2,replace=TRUE))<br>  if(x==7) num &lt;- num+1<br>}<br>prop&lt;-num/1000<br>prop</pre>\n    <p> </p>\n    In the end, the object <span style=\"font-family: monospace;\">prop</span>\n    gives us an <span style=\"font-style: italic; font-weight: bold;\">empirical\n\n\n      probability</span> that the sum of two dice is 7. An empirical\n    probability is an estimate of a probability obtained via simulation\n    or data collection (as opposed to a theoretical or exact\n    probability). The more times we run the simulation, the closer the\n    empirical probability will be to the exact probability. What is the\n    exact probability that the sum is 7?<br>\n    <br>\n    <span style=\"text-decoration: underline;\"></span><br>\n    <hr style=\"width: 100%; height: 2px;\">\n    <div style=\"text-align: center;\"><big> <b>Previous: </b><a\n          href=\"BasicR.html\">Basic R Functions</a><br>\n        <br>\n        <a href=\"index.html\">Introduction to R Index</a></big><br>\n      <hr style=\"width: 100%; height: 2px;\"></div>\n  </body>\n</html>\n", "id": 16623.0}