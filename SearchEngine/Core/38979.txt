{"text": "Navigation Up Table of Contents Bibliography Index Title Page ApolloniusGraphTraits 2 Definition The concept ApolloniusGraphTraits 2 provides the traits requirements for the Apollonius graph 2 class In particular it provides a type Site 2 which must be a model of the concept ApolloniusSite 2 It also provides constructions for sites and several function object types for the predicates Types ApolloniusGraphTraits 2 Point 2 A type for a point ApolloniusGraphTraits 2 Site 2 A type for an Apollonius site Must be a model of the concept ApolloniusSite 2 ApolloniusGraphTraits 2 Line 2 A type for a line Only required if access to the dual of the Apollonius graph is required or if the primal or dual diagram are inserted in a stream ApolloniusGraphTraits 2 Ray 2 A type for a ray Only required if access to the dual of the Apollonius graph is required or if the primal or dual diagram are inserted in a stream ApolloniusGraphTraits 2 Segment 2 A type for a segment Only required if access to the dual of the Apollonius graph is required or if the primal or dual diagram are inserted in a stream ApolloniusGraphTraits 2 Object 2 A type representing different types of objects in two dimensions namely Point 2 Site 2 Line 2 Ray 2 and Segment 2 ApolloniusGraphTraits 2 FT A type for the field number type of sites ApolloniusGraphTraits 2 RT A type for the ring number type of sites ApolloniusGraphTraits 2 Assign 2 Must provide template class T bool operator T t Object 2 o which assigns o to t if o was constructed from an object of type T Returns true if the assignment was possible ApolloniusGraphTraits 2 Construct object 2 Must provide template class T Object 2 operator T t that constructs an object of type Object 2 that contains t and returns it ApolloniusGraphTraits 2 Construct Apollonius vertex 2 A constructor for a point of the Apollonius diagram equidistant from three sites Must provide Point 2 operator Site 2 s1 Site 2 s2 Site 2 s3 which constructs a point equidistant from the sites s1 s2 and s3 ApolloniusGraphTraits 2 Construct Apollonius site 2 A constructor for a dual Apollonius site a site whose center is a vertex of the Apollonius diagram and its weight is the common distance of its center from the three defining sites Must provide Site 2 operator Site 2 s1 Site 2 s2 Site 2 s3 which constructs a dual site whose center c is equidistant from s1 s2 and s3 and its weight is equal to the signed distance of c from s1 or s2 or s3 Must also provide Line 2 operator Site 2 s1 Site 2 s2 which constructs a line bitangent to s1 and s2 This line is the dual site of s1 s2 and the site at infinity it can be viewed as a dual Apollonius site whose center is at infinity and its weight is infinite ApolloniusGraphTraits 2 Compare x 2 A predicate object type Must provide Comparison result operator Site 2 s1 Site 2 s2 which compares the x coordinates of the centers of s1 and s2 ApolloniusGraphTraits 2 Compare y 2 A predicate object type Must provide Comparison result operator Site 2 s1 Site 2 s2 which compares the y coordinates of the centers of s1 and s2 ApolloniusGraphTraits 2 Compare weight 2 A predicate object type Must provide Comparison result operator Site 2 s1 Site 2 s2 which compares the weights of s1 and s2 ApolloniusGraphTraits 2 Orientation 2 A predicate object type Must provide Orientation operator Site 2 s1 Site 2 s2 Site 2 s3 which performs the usual orientation test for the centers of the three sites s1 s2 and s3 ApolloniusGraphTraits 2 Is hidden 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 which returns true if the circle corresponding to s2 is contained in the closure of the disk corresponding to s1 false otherwise ApolloniusGraphTraits 2 Oriented side of bisector 2 A predicate object type Must provide Oriented side operator Site 2 s1 Site 2 s2 Point 2 p which returns the oriented side of the bisector of s1 and s2 that contains p Returns ON POSITIVE SIDE if p lies in the half space of s1 i e p is closer to s1 than s2 returns ON NEGATIVE SIDE if p lies in the half space of s2 returns ON ORIENTED BOUNDARY if p lies on the bisector of s1 and s2 ApolloniusGraphTraits 2 Vertex conflict 2 A predicate object type Must provide Sign operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q which returns the sign of the distance of q from the dual Apollonius site of s1 s2 s3 Precondition the dual Apollonius site of s1 s2 s3 must exist Must also provide Sign operator Site 2 s1 Site 2 s2 Site 2 q which returns the sign of the distance of q from the bitangent line of s1 s2 a degenerate dual Apollonius site with its center at infinity ApolloniusGraphTraits 2 Finite edge interior conflict 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 s4 Site 2 q bool b The sites s1 s2 s3 and s4 define an Apollonius edge that lies on the bisector of s1 and s2 and has as endpoints the Apollonius vertices defined by the triplets s1 s2 s3 and s1 s4 and s2 The boolean b denotes if the two Apollonius vertices are in conflict with the site q in which case b should be true otherwise false In case that b is true the predicate returns true if and only if the entire Apollonius edge is in conflict with q If b is false the predicate returns false if and only if q is not in conflict with the Apollonius edge Precondition the Apollonius vertices of s1 s2 s3 and s1 s4 s2 must exist Must also provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q bool b The sites s1 s2 s3 and the site at infinity s define an Apollonius edge that lies on the bisector of s1 and s2 and has as endpoints the Apollonius vertices defined by the triplets s1 s2 s3 and s1 s and s2 the second Apollonius vertex is actually at infinity The boolean b denotes if the two Apollonius vertices are in conflict with the site q in which case b should be true otherwise false In case that b is true the predicate returns true if and only if the entire Apollonius edge is in conflict with q If b is false the predicate returns false if and only if q is not in conflict with the Apollonius edge Precondition the Apollonius vertex of s1 s2 s3 must exist Must finally provide bool operator Site 2 s1 Site 2 s2 Site 2 q bool b The sites s1 s2 and the site at infinity s define an Apollonius edge that lies on the bisector of s1 and s2 and has as endpoints the Apollonius vertices defined by the triplets s1 s2 s and s1 s and s2 both Apollonius vertices are actually at infinity The boolean b denotes if the two Apollonius vertices are in conflict with the site q in which case b should be true otherwise false In case that b is true the predicate returns true if and only if the entire Apollonius edge is in conflict with q If b is false the predicate returns false if and only if q is not in conflict with the Apollonius edge ApolloniusGraphTraits 2 Infinite edge interior conflict 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 q bool b The sites s s1 s2 and s3 define an Apollonius edge that lies on the bisector of s and s1 and has as endpoints the Apollonius vertices defined by the triplets s s1 s2 and s s3 and s1 The boolean b denotes if the two Apollonius vertices are in conflict with the site q in which case b should be true otherwise false In case that b is true the predicate returns true if and only if the entire Apollonius edge is in conflict with q If b is false the predicate returns false if and only if q is not in conflict with the Apollonius edge ApolloniusGraphTraits 2 Is degenerate edge 2 A predicate object type Must provide bool operator Site 2 s1 Site 2 s2 Site 2 s3 Site 2 s4 It returns true if the Apollonius edge defined by s1 s2 s3 and s4 is degenerate false otherwise An Apollonius edge is called degenerate if its two endpoints coincide Precondition the Apollonius vertices of s1 s2 s3 and s1 s4 s2 must exist Creation ApolloniusGraphTraits 2 gt Default constructor ApolloniusGraphTraits 2 gt other Copy constructor ApolloniusGraphTraits 2 gt other Assignment operator Access to predicate objects Compare x 2 gt compare x 2 object Compare y 2 gt compare y 2 object Compare weight 2 gt compare weight 2 object Orientation 2 gt orientation 2 object Is hidden 2 gt is hidden 2 object Oriented side of bisector 2 gt oriented side of bisector test 2 object Vertex conflict 2 gt vertex conflict 2 object Finite edge interior conflict 2 gt finite edge interior conflict 2 object Infinite edge interior conflict 2 gt infinite edge interior conflict 2 object Is degenerate edge 2 gt is degenerate edge 2 object Access to contructor objects Construct object 2 gt construct object 2 object Construct Apollonius vertex 2 gt construct Apollonius vertex 2 object Construct Apollonius site 2 gt construct Apollonius site 2 object Access to other objects Assign 2 gt assign 2 object Has Models CGAL Apollonius graph traits 2 K Method tag CGAL Apollonius graph filtered traits 2 CK CM EK EM FK FM See AlsoCGAL Apollonius graph 2 Gt Agds CGAL Apollonius graph traits 2 K Method tag CGAL Apollonius graph filtered traits 2 CK CM EK EM FK FM Next Apollonius graph traits 2 K Method tag Navigation Table of Contents Bibliography Index Title Page The CGAL Project Tue December 21 2 4 ", "_id": "http://www.ics.uci.edu/~dock/manuals/cgal_manual/Apollonius_graph_2_ref/Concept_ApolloniusGraphTraits_2.html", "title": "apolloniusgraphtraits_2", "html": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<!-- Page automatically generated from latex_to_html converter. -->\n<!-- by cc_extract_html, $Revision: 3.19 $ -->\n<!-- LaTeX source file: './Apollonius_graph_2_ref/ApolloniusGraphTraits_2.tex' -->\n<html> <head>  \n<title>ApolloniusGraphTraits_2</title>\n</head>  \n<link href=\"../latex_to_html.css\" rel=\"STYLESHEET\">\n<body bgcolor=\"white\">\n<!-- ------------------------------------------------------------------- -->\n\n\n<!-- Top Navigation ---------------------------------------------------- -->\n<div class=\"NavTop\">\n<hr>\n  <strong>Navigation:</strong>\n<a href=\"Chapter_intro.html\">Up</a>, \n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<hr><!-- End of Top Navigation ----------------------------------------- -->\n</div>\n\n\n<A NAME=\"Cross_link_anchor_1075\"></A>\n\n      \n     \n     \n     \n<A NAME=\"Index_anchor_985\"></A> \n\n   \n<TABLE ALIGN=RIGHT><TR><TD><IMG ALIGN=TOP SRC=\"cc_Concept.gif\"></TD></TR></TABLE>\n\n\n    <A NAME=\"ccRef_ApolloniusGraphTraits_2\"></A>\n<h2><I>ApolloniusGraphTraits_2</I></h2>\n<P>\n\n<H3>Definition</H3>\n<P>\n\nThe concept <I><A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A></I> provides the traits\nrequirements for the <I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1067\">Apollonius_graph_2</A></I> class. In particular,\nit provides a type <I>Site_2</I>, which must be a model of the concept\n<I><A HREF=\"Concept_ApolloniusSite_2.html#Cross_link_anchor_1068\">ApolloniusSite_2</A></I>. It also provides\nconstructions for sites and several function object\ntypes for the predicates.\n<P>\n\n<H3>Types</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a point.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Site_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for an Apollonius site. Must be a model\n  of the concept <I><A HREF=\"Concept_ApolloniusSite_2.html#Cross_link_anchor_1068\">ApolloniusSite_2</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a line. Only required if access to\n  the dual of the Apollonius graph is required or if the primal\n  or dual diagram are inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a ray. Only required if access to\n  the dual of the Apollonius graph is required or if the primal\n  or dual diagram are inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::<A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for a segment. Only required if access to\n  the dual of the Apollonius graph is required or if the primal\n  or dual diagram are inserted in a stream.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Object_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type representing different types of objects\n  in two dimensions, namely: <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A></I>, <I>Site_2</I>,\n  <I><A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A></I>, <I><A HREF=\"../Kernel_23_ref/Class_Ray_2.html#Cross_link_anchor_54\">Ray_2</A></I> and <I><A HREF=\"../Kernel_23_ref/Class_Segment_2.html#Cross_link_anchor_56\">Segment_2</A></I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::FT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for the field number type of sites.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::RT\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A type for the ring number type of sites.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Assign_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Must provide <I>template &lt;class T&gt; bool operator() ( T&amp; t,     Object_2 o)</I> which assigns <I>o</I> to <I>t</I> if <I>o</I> was\n  constructed from an object of type <I>T</I>. Returns \n  <I>true</I>, if the assignment was possible.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Construct_object_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Must provide <I>template &lt;class T&gt;     Object_2 operator()( T t)</I> that constructs an object of type\n  <I>Object_2</I> that contains <I>t</I> and returns it.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Construct_Apollonius_vertex_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A constructor for a point of the Apollonius diagram equidistant\n  from three sites. Must provide\n  <I><A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3)</I>, which\n  constructs a point equidistant from the sites <I>s1</I>, <I>s2</I> and\n  <I>s3</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Construct_Apollonius_site_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A constructor for\na dual Apollonius site (a site whose center is a\nvertex of the Apollonius diagram and its weight is the common\ndistance of its center from the three defining sites).\nMust provide <I>Site_2 operator()(Site_2 s1, Site_2 s2, Site_2 s3)</I>, which constructs a\ndual site whose center <MATH><I>c</I></MATH> is equidistant from <I>s1</I>, <I>s2</I> and\n<I>s3</I>, and its weight is equal to the (signed) distance of <MATH><I>c</I></MATH>\nfrom <I>s1</I> (or <I>s2</I> or <I>s3</I>).<BR>\n\nMust also provide <I><A HREF=\"../Kernel_23_ref/Class_Line_2.html#Cross_link_anchor_50\">Line_2</A> operator()(Site_2 s1, Site_2 s2)</I>, which\nconstructs a line bitangent to <I>s1</I> and <I>s2</I>. This line is the\ndual site of <I>s1</I>, <I>s2</I> and the site at infinity; it can be\nviewed as a dual Apollonius site whose center is at infinity\nand its weight is infinite.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Compare_x_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A> operator()(Site_2 s1, Site_2 s2)</I>, which compares the <MATH><I>x</I></MATH>-coordinates of the centers of\n<I>s1</I> and <I>s2</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Compare_y_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A> operator()(Site_2 s1, Site_2 s2)</I>, which compares the <MATH><I>y</I></MATH>-coordinates of the centers of\n<I>s1</I> and <I>s2</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Compare_weight_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Comparison_result.html#Cross_link_anchor_104\">Comparison_result</A> operator()(Site_2 s1, Site_2 s2)</I>, which compares the weights of <I>s1</I> \nand <I>s2</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Orientation_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I><A HREF=\"../Kernel_23_ref/Enum_Orientation.html#Cross_link_anchor_114\">Orientation</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3)</I>, which performs the\nusual <A HREF=\"../Kernel_23_ref/Function_orientation.html#Cross_link_anchor_247\">orientation</A> test for the centers of the three sites\n<I>s1</I>, <I>s2</I> and <I>s3</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Is_hidden_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type. Must\nprovide <I>bool operator()(Site_2 s1, Site_2 s2)</I>, which returns <I>true</I> if the circle\ncorresponding to <I>s2</I> is contained in the closure of the disk\ncorresponding to <I>s1</I>, <I>false</I> otherwise.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Oriented_side_of_bisector_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type.\nMust provide <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side.html#Cross_link_anchor_116\">Oriented_side</A> operator()(Site_2 s1, Site_2 s2, <A HREF=\"../Kernel_23_ref/Class_Point_2.html#Cross_link_anchor_52\">Point_2</A> p)</I>, which returns\nthe oriented side of the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I> that\ncontains <I>p</I>. Returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_POSITIVE_SIDE</A></I> if <I>p</I> lies in\nthe half-space of <I>s1</I> (i.e., <I>p</I> is closer to <I>s1</I> than\n<I>s2</I>); returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_NEGATIVE_SIDE</A></I> if <I>p</I> lies in the\nhalf-space of <I>s2</I>; returns <I><A HREF=\"../Kernel_23_ref/Enum_Oriented_side#Enum_Oriented_side\">ON_ORIENTED_BOUNDARY</A></I> if <I>p</I>\nlies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I>.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Vertex_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type.\nMust provide <I><A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q)</I>, which\nreturns the <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distance of <I>q</I> from the dual Apollonius\nsite of <I>s1</I>, <I>s2</I>, <I>s3</I>.<BR>\n\n<EM>Precondition: </EM>the dual Apollonius site of <I>s1</I>, <I>s2</I>,\n<I>s3</I> must exist.<BR>\n\nMust also provide <I><A HREF=\"../Kernel_23_ref/Enum_Sign.html#Cross_link_anchor_109\">Sign</A> operator()(Site_2 s1, Site_2 s2, Site_2 q)</I>, which returns the <A HREF=\"../NumberTypeSupport_ref/Function_sign.html#Cross_link_anchor_1410\">sign</A> of the distance of\n<I>q</I> from the bitangent line of <I>s1</I>, <I>s2</I> (a degenerate\ndual Apollonius site, with its center at infinity).\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Finite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object\ntype. Must provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 s4, Site_2 q, bool b)</I>. The sites <I>s1</I>, <I>s2</I>,\n<I>s3</I> and <I>s4</I> define an Apollonius edge that lies on the\n<A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <I>s1</I> and <I>s2</I> and has as endpoints the Apollonius\nvertices defined by the triplets <I>s1</I>, <I>s2</I>, <I>s3</I> and\n<I>s1</I>, <I>s4</I> and <I>s2</I>. The boolean <I>b</I> denotes if the\ntwo Apollonius vertices are in conflict with the site\n<I>q</I> (in which case <I>b</I> should be <I>true</I>, otherwise\n<I>false</I>). In case that <I>b</I> is <I>true</I>, the predicate\nreturns <I>true</I> if and only if the entire Apollonius edge is in\nconflict with <I>q</I>. If <I>b</I> is <I>false</I>, the predicate returns\n<I>false</I> if and only if <I>q</I> is not in conflict with the\nApollonius edge.<BR>\n\n<EM>Precondition: </EM>the Apollonius vertices of <I>s1</I>, <I>s2</I>,\n<I>s3</I>, and <I>s1</I>, <I>s4</I>, <I>s2</I> must exist.<BR>\n\nMust also provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, bool b)</I>. The\nsites <I>s1</I>, <I>s2</I>, <I>s3</I> and the site at infinity\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> define an Apollonius edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of\n<I>s1</I> and <I>s2</I> and has as endpoints the Apollonius vertices\ndefined by the triplets <I>s1</I>, <I>s2</I>, <I>s3</I> and <I>s1</I>,\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s2</I> (the second Apollonius vertex is actually at\ninfinity). The boolean <I>b</I> denotes if the two Apollonius vertices\nare in conflict with the site <I>q</I> (in which case <I>b</I>\nshould be <I>true</I>, otherwise <I>false</I>). \nIn case that <I>b</I> is <I>true</I>, the predicate\nreturns <I>true</I> if and only if the entire Apollonius edge is in\nconflict with <I>q</I>. If <I>b</I> is <I>false</I>, the predicate returns\n<I>false</I> if and only if <I>q</I> is not in conflict with the\nApollonius edge.<BR>\n\n<EM>Precondition: </EM>the Apollonius vertex of <I>s1</I>, <I>s2</I>,\n<I>s3</I> must exist.<BR>\n\nMust finally provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 q, bool b)</I>. The\nsites <I>s1</I>, <I>s2</I> and the site at infinity\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> define an Apollonius edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of\n<I>s1</I> and <I>s2</I> and has as endpoints the Apollonius vertices\ndefined by the triplets <I>s1</I>, <I>s2</I>, <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s1</I>,\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s2</I> (both Apollonius vertices are actually at\ninfinity). The boolean <I>b</I> denotes if the two Apollonius vertices\nare in conflict with the site <I>q</I> (in which case <I>b</I>\nshould be <I>true</I>, otherwise <I>false</I>). \nIn case that <I>b</I> is <I>true</I>, the predicate\nreturns <I>true</I> if and only if the entire Apollonius edge is in\nconflict with <I>q</I>. If <I>b</I> is <I>false</I>, the predicate returns \n<I>false</I> if and only if <I>q</I> is not in conflict with the\nApollonius edge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Infinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate\nobject type. Must provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 q, bool b)</I>. The\nsites <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s1</I>, <I>s2</I> and <I>s3</I> define an\nApollonius edge that lies on the <A HREF=\"../Kernel_23_ref/Function_bisector.html#Cross_link_anchor_161\">bisector</A> of <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH> and <I>s1</I>\nand has as endpoints the Apollonius vertices defined by the triplets\n<MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s1</I>, <I>s2</I> and <MATH><I>s<SUB> <IMG BORDER=0 WIDTH=15 HEIGHT=8 ALIGN=BOTTOM SRC=\"cc_infty.gif\"> </SUB></I></MATH>, <I>s3</I> and\n<I>s1</I>. The boolean <I>b</I> denotes if the two Apollonius vertices\nare in conflict with the site <I>q</I> (in which case <I>b</I>\nshould be <I>true</I>, otherwise <I>false</I>.\nIn case that <I>b</I> is <I>true</I>, the predicate\nreturns <I>true</I> if and only if the entire Apollonius edge is in\nconflict with <I>q</I>. If <I>b</I> is <I>false</I>, the predicate returns\n<I>false</I> if and only if <I>q</I> is not in conflict with the\nApollonius edge.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>::Is_degenerate_edge_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    A predicate object type.\nMust provide <I>bool operator()(Site_2 s1, Site_2 s2, Site_2 s3, Site_2 s4)</I>. It returns <I>true</I> if\nthe Apollonius edge defined by <I>s1</I>, <I>s2</I>, <I>s3</I> and\n<I>s4</I> is degenerate, <I>false</I> otherwise. An Apollonius edge is\ncalled degenerate if its two endpoints coincide.<BR>\n\n<EM>Precondition: </EM>the Apollonius vertices of <I>s1</I>, <I>s2</I>,\n<I>s3</I>, and <I>s1</I>, <I>s4</I>, <I>s2</I> must exist.\n<P>\n\n</TD></TR>\n        </TABLE>\n<P>\n\n<H3>Creation</H3>\n<P>\n\n<TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A> gt;\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Default constructor.\n<P>\n\n</TD></TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A> gt (  other);\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=30% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=70%>\n    Copy constructor.\n<P>\n\n</TD></TR>\n        </TABLE>\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A HREF=\"Concept_ApolloniusGraphTraits_2.html#Cross_link_anchor_1075\">ApolloniusGraphTraits_2</A>\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n     gt =  other<A NAME=\"Function_ApolloniusGraphTraits_2_operator=6ApolloniusGraphTraits_2_other9;\"></A>\n\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=50%>\n    Assignment operator.\n        </TD></TR>\n        </TABLE>\n<P>\n\n<H3>Access to predicate objects</H3>\n\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_x_2_compare_x_2_object69;\"></A>\nCompare_x_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.compare_x_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_y_2_compare_y_2_object69;\"></A>\nCompare_y_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.compare_y_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Compare_weight_2_compare_weight_2_object69;\"></A>\nCompare_weight_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.compare_weight_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Orientation_2_orientation_2_object69;\"></A>\nOrientation_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.orientation_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Is_hidden_2_is_hidden_2_object69;\"></A>\nIs_hidden_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.is_hidden_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Oriented_side_of_bisector_2_oriented_side_of_bisector_test_2_object69;\"></A>\nOriented_side_of_bisector_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.oriented_side_of_bisector_test_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Vertex_conflict_2_vertex_conflict_2_object69;\"></A>\nVertex_conflict_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.vertex_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Finite_edge_interior_conflict_2_finite_edge_interior_conflict_2_object69;\"></A>\nFinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.finite_edge_interior_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Infinite_edge_interior_conflict_2_infinite_edge_interior_conflict_2_object69;\"></A>\nInfinite_edge_interior_conflict_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.infinite_edge_interior_conflict_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Is_degenerate_edge_2_is_degenerate_edge_2_object69;\"></A>\nIs_degenerate_edge_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.is_degenerate_edge_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Access to contructor objects</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Construct_object_2_construct_object_2_object69;\"></A>\nConstruct_object_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.construct_object_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Construct_Apollonius_vertex_2_construct_Apollonius_vertex_2_object69;\"></A>\nConstruct_Apollonius_vertex_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.construct_Apollonius_vertex_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        \n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=100% COLSPAN=3>\n        <I><NOBR>\n    <A NAME=\"Function_Construct_Apollonius_site_2_construct_Apollonius_site_2_object69;\"></A>\nConstruct_Apollonius_site_2\n        </I></NOBR>\n        </TD></TR><TR><TD WIDTH=25% NOWRAP></TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.construct_Apollonius_site_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Access to other objects</H3>\n\n        <TABLE BORDER=0 CELLSPACING=2 CELLPADDING=0 WIDTH=650>\n        <TR><TD ALIGN=LEFT VALIGN=TOP WIDTH=25% NOWRAP>\n        <I><NOBR>\n    <A NAME=\"Function_Assign_2_assign_2_object69;\"></A>\nAssign_2\n        </I></NOBR>\n        </TD><TD ALIGN=LEFT VALIGN=TOP WIDTH=75% NOWRAP COLSPAN=2>\n        <I><NOBR>\n    gt.assign_2_object ()\n        </I></NOBR>\n        \n    \n        </TR>\n        </TABLE>\n<P>\n\n<H3>Has Models</H3>\n<P>\n\n<I><A HREF=\"Class_Apollonius_graph_traits_2.html#Cross_link_anchor_1076\">CGAL::Apollonius_graph_traits_2</A>&lt;K,Method_tag&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_filtered_traits_2.html#Cross_link_anchor_1078\">CGAL::Apollonius_graph_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I>\n<P>\n\n<H3>See Also</H3><I><A HREF=\"Class_Apollonius_graph_2.html#Cross_link_anchor_1066\">CGAL::Apollonius_graph_2</A>&lt;Gt,Agds&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_traits_2.html#Cross_link_anchor_1076\">CGAL::Apollonius_graph_traits_2</A>&lt;K,Method_tag&gt;</I><BR>\n\n<I><A HREF=\"Class_Apollonius_graph_filtered_traits_2.html#Cross_link_anchor_1078\">CGAL::Apollonius_graph_filtered_traits_2</A>&lt;CK,CM,EK,EM,FK,FM&gt;</I>\n\n                   <div class=\"NavNext\"><hr> <b>Next:</b> <a href=\"Class_Apollonius_graph_traits_2.html\"><I>Apollonius_graph_traits_2&lt;K,Method_tag&gt;</I></a> \n\n\n    \n<div class=\"NavBottom\">\n<hr><!-- Bottom Navigation --------------------------------------------- -->\n  <strong>Navigation:</strong>\n<!Up_chapter_link_46!>\n  <a href=\"../contents.html\">Table of Contents</A>,\n  <a href=\"../biblio.html\">Bibliography</a>,\n  <a href=\"../manual_index.html\">Index</a>,\n  <a href=\"../title.html\">Title Page</a>\n<!-- End of Bottom Navigation ------------------------------------------ -->\n\n\n<hr><!-- --------------------------------------------------------------- -->\n<div class=\"NavAddress\">\n\nThe <A HREF=http://www.cgal.org>CGAL Project</A> .\n\nTue, December 21, 2004 .\n<hr></div>\n</body>  </html>  \n", "id": 38979.0}